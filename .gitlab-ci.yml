variables:
  FF_USE_FASTZIP: 1
  COMPOSER_CACHE_DIR: ${CI_PROJECT_DIR}/.composer-cache
  BASE_PHP_VERSION: '8.1'

default:
  image: gitlab.jtl-software.com:4567/connector/connector-utils/ci-docker/php/cli:${BASE_PHP_VERSION}
  tags:
    - docker
  cache:
    key: vendor
    paths:
      - vendor
      - .composer-cache

include:
  - project: 'connector/connector-utils/CI-Templates'
    file:
      - 'auto-create-mr/ci.yaml'
      - 'update-changelog/ci.yaml'

stages:
  - createMR
  - build
  - test
  - deploy
  - extract-changelog
  - update-changelog


build:vendor:
  stage: build
  script:
    - composer install --no-progress --no-interaction
  cache:
    key:
      files:
        - composer.json
    paths:
      - vendor/
      - .composer-cache
  artifacts:
    paths:
      - vendor/

build:vendor:no-dev:
  stage: build
  script:
    - composer install --no-progress --no-interaction --no-dev
  cache:
    key:
      files:
        - composer.json
    paths:
      - vendor/
      - .composer-cache
  artifacts:
    paths:
      - vendor/


random_files:
  image: alpine:latest
  stage: test
  needs: []
  script:
    - >-
      if [ `find . \( -name .idea -o -name .code -o -name .DS_Store \) -not -path "./vendor/*"` ] ; then
        echo "Found .idea, .code or .DS_Store. Please remove them from your project.";
        exit 1
      fi

code_quality:
  stage: test
  needs:
    - build:vendor
  script:
    - composer run phpcs:ci
  artifacts:
    paths:
      - phpcs-quality-report.json
    when: always

phpstan:
  stage: test
  needs:
    - build:vendor
  script:
    - composer run phpstan:ci
  artifacts:
    paths:
      - phpstan-quality-report.json
    when: always

combine_reports:
  stage: test
  needs:
    - code_quality
    - phpstan
  when: always
  script:
    - >-
      if [[ -f phpcs-quality-report.json ]] && [[ -f phpstan-quality-report.json ]]; then
        jq -s 'add' phpcs-quality-report.json phpstan-quality-report.json > codeclimate-quality-report.json;
      elif [[ -f phpcs-quality-report.json ]]; then
        mv phpcs-quality-report.json codeclimate-quality-report.json;
      elif [[ -f phpstan-quality-report.json ]]; then
        mv phpstan-quality-report.json codeclimate-quality-report.json;
      fi
  artifacts:
    reports:
      codequality: codeclimate-quality-report.json
    when: always

test:unit:
  parallel:
    matrix:
      - BASE: 'php'
        VERSION: [ '8.1', '8.2', '8.3' ]
  image: gitlab.jtl-software.com:4567/connector/connector-utils/ci-docker/php/cli:${VERSION}
  stage: test
  allow_failure: true
  needs:
    - build:vendor
  script:
    - composer run tests:ci
  artifacts:
    reports:
      junit: junit.xml
    when: always

build:dist:
  image: gitlab.jtl-software.com:4567/connector/connector-utils/ci-docker/php/cli:${BASE_PHP_VERSION}
  stage: build
  variables:
    VERSION: dev
  needs:
    - build:vendor:no-dev
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: $CI_COMMIT_TAG
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: on_success
  script:
    - php ./phing.phar build -Dversion=${VERSION} -Dtmpdir=.
  artifacts:
    paths:
      - dist/

build:zip:
  image: gitlab.jtl-software.com:4567/connector/connector-utils/ci-docker/php/cli:${BASE_PHP_VERSION}
  stage: build
  variables:
    VERSION: dev
  needs:
    - build:vendor:no-dev
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: $CI_COMMIT_TAG
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: on_success
  script:
    - php ./phing.phar release -Dversion=${VERSION}
  artifacts:
    expose_as: 'build'
    name: 'build'
    paths:
      - woo-jtl-connector-${VERSION}.zip

deploy:
  stage: deploy
  before_script: [ ]
  variables:
    VERSION: dev
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
  needs:
    - build:dist
  script:
    - svn checkout --username "$SVN_USERNAME" --password "$SVN_PASSWORD" https://plugins.svn.wordpress.org/woo-jtl-connector --depth immediates
    - svn checkout --username "$SVN_USERNAME" --password "$SVN_PASSWORD" https://plugins.svn.wordpress.org/woo-jtl-connector/trunk woo-jtl-connector/trunk/ --depth infinity
    - rm -f -R woo-jtl-connector/trunk/*
    - cp -R dist/woo-jtl-connector/* woo-jtl-connector/trunk/
    - cd woo-jtl-connector/trunk
    - svn status
    - svn add --force *
    - if svn info "https://plugins.svn.wordpress.org/woo-jtl-connector/tags/$VERSION"; then svn delete --username "$SVN_USERNAME" --password "$SVN_PASSWORD" --force "https://plugins.svn.wordpress.org/woo-jtl-connector/tags/$VERSION" -m "Removing old Tag $VERSION"; fi
    - svn commit --username "$SVN_USERNAME" --password "$SVN_PASSWORD" -m "Tagging $VERSION"
    - svn copy --username "$SVN_USERNAME" --password "$SVN_PASSWORD" https://plugins.svn.wordpress.org/woo-jtl-connector/trunk "https://plugins.svn.wordpress.org/woo-jtl-connector/tags/$VERSION" -m "Tagging $VERSION"


extractChangelog:
  stage: extract-changelog
  when: on_success
  variables:
    CHANGELOG_FILE: 'CHANGELOG.md'
    CHANGELOG_JSON: 'woocommerce.json'
    CONTEXT_FILE: '/tmp/target/storage/systems/woocommerce.json'

updateChangelogRepo:
  only:
    - tags
  stage: update-changelog
  when: on_success
  variables:
    COPY_FILE: "woocommerce.json"
