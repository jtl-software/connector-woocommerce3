<?php

namespace WPML\TM\API {
    class ATE
    {
        public function __construct(\WPML_TM_ATE_API $ateApi, \WPML_TM_ATE_Jobs $ateJobs)
        {
        }
        public function checkJobStatus($wpmlJobId)
        {
        }
        public function applyTranslation($wpmlJobId, $postId, $xliffUrl)
        {
        }
    }
}
namespace WPML\TM\API\ATE {
    class LanguageMappings
    {
        const IGNORE_MAPPING_OPTION = 'wpml-languages-ignore-mapping';
        const IGNORE_MAPPING_ID = -1;
        public static function withCanBeTranslatedAutomatically($languages = null)
        {
        }
        public static function isCodeEligibleForAutomaticTranslations($languageCode = null)
        {
        }
        /**
         * @return LanguageMapping[] $mappings
         */
        public static function get()
        {
        }
        public static function withMapping($languages = null)
        {
        }
        /**
         * @return array
         */
        public static function getAvailable()
        {
        }
        /**
         * @param LanguageMapping[] $mappings
         *
         * @return Either
         */
        public static function saveMapping(array $mappings)
        {
        }
        /**
         * @return array
         */
        public static function getLanguagesEligibleForAutomaticTranslations()
        {
        }
        /**
         * @return string[]
         */
        public static function geCodesEligibleForAutomaticTranslations()
        {
        }
        public static function hasTheSameMappingAsDefaultLang($language = null)
        {
        }
        /**
         * @return CachedATEAPI
         */
        protected static function getATEAPI()
        {
        }
    }
    class CachedLanguageMappings extends \WPML\TM\API\ATE\LanguageMappings
    {
        /**
         * @return CachedATEAPI
         */
        protected static function getATEAPI()
        {
        }
        public static function clearCache()
        {
        }
    }
    class Account
    {
        /**
         * @return Either<array>
         */
        public static function getCredits()
        {
        }
        /**
         * @param array $creditInfo
         *
         * @return bool
         */
        public static function hasActiveSubscription(array $creditInfo)
        {
        }
        /**
         * @param array $creditInfo
         *
         * @return int
         */
        public static function getAvailableBalance(array $creditInfo)
        {
        }
        /**
         * @return bool
         */
        public static function isAbleToTranslateAutomatically()
        {
        }
    }
}
namespace WPML\Collect\Support\Traits {
    trait Macroable
    {
        /**
         * The registered string macros.
         *
         * @var callable[]
         */
        protected static $macros = [];
        /**
         * Register a custom macro.
         *
         * @param  string    $name
         * @param  callable  $macro
         * @return void
         */
        public static function macro($name, callable $macro)
        {
        }
        /**
         * Checks if macro is registered.
         *
         * @param  string  $name
         * @return bool
         */
        public static function hasMacro($name)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param  string  $method
         * @param  mixed[]   $parameters
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public static function __callStatic($method, $parameters)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param  string  $method
         * @param  mixed[]   $parameters
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public function __call($method, $parameters)
        {
        }
    }
}
namespace WPML\TM\API {
    /**
     * Class Jobs
     * @package WPML\TM\API
     *
     * @phpstan-type curried "__CURRIED_PLACEHOLDER__"
     *
     * @method static callable|null|\stdClass getPostJob( ...$postId, ...$postType, ...$language ) : Curried:: int->string->string->null|\stdClass
     * @method static callable|null|\stdClass getTridJob( ...$trid, ...$language ) : Curried:: int->string->null|\stdClass
     * @method static callable|false|\stdClass get( ...$jobId ) : Curried:: int->false|\stdClass
     * @method static callable|void setNotTranslatedStatus( ...$jobId )  : Curried:: int->int
     * @method static callable|void setTranslationService( ...$jobId, $translationService ) : Curried:: int->int|string->int
     * @method static callable|void clearReviewStatus( ...$jobId ) : Curried:: int->int->int
     * @method static callable|array getTranslation( ...$job ) - Curried :: \stdClass->array
     * @method static callable|int getTranslatedPostId( ...$job ) - Curried :: \stdClass->int
     * @method static callable|void incrementRetryCount( ...$jobId ) : Curried:: int->void
     * @method static callable|void setTranslated( ...$jobId, ...$status ) - Curried :: int->bool->int
     * @method static callable|void clearTranslated( ...$jobId ) - Curried :: int->int
     * @method static callable|int clearAutomatic( ...$jobId ) - Curried :: int->int
     * @method static callable|void delete( ...$jobId ) - Curried :: int->void
     * @method static callable|bool isEligibleForAutomaticTranslations( ...$jobId ) - Curried :: int->bool
     */
    class Jobs
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const SENT_MANUALLY = 1;
        const SENT_VIA_BASKET = 2;
        const SENT_AUTOMATICALLY = 3;
        const SENT_FROM_REVIEW = 4;
        const SENT_RETRY = 5;
        const SENT_VIA_DASHBOARD = 6;
        public static function init()
        {
        }
        /**
         * @return string
         */
        public static function getCurrentUrl()
        {
        }
        /**
         * It checks whether the job must be synced with ATE or not
         *
         * @param array{status: int, editor: string}|\stdClass{status: int, editor: string} $job
         *
         * @return bool
         */
        public static function shouldBeATESynced($job)
        {
        }
        /**
         * @param int $jobId
         * @param bool $isAutomatic
         *
         * @return void
         */
        public static function setAutomaticStatus($jobId, $isAutomatic)
        {
        }
        /**
         * @template A as int
         * @template B as int
         * @template R as int
         *
         * @param ?(int|curried) $jobId
         * @param ?(int|curried) $status
         *
         * @return ($jobId is A
         *  ? ($status is B ? R : callable(B=):R)
         *  : ($jobId is curried
         *    ? ($status is B ? callable(A=):R : callable(A=,B=):R)
         *    : callable(A=,B=):R
         *    )
         *  )
         */
        public static function setStatus($jobId = null, $status = null)
        {
        }
        /**
         * @template A as int
         * @template B as string
         * @template R as int
         *
         * @param ?(int|curried)    $jobId
         * @param ?(string|curried) $status
         *
         * @return ($jobId is A
         *  ? ($status is B ? R : callable(B=):R)
         *  : ($jobId is curried
         *    ? ($status is B ? callable(A=):R : callable(A=,B=):R)
         *    : callable(A=,B=):R
         *    )
         *  )
         */
        public static function setReviewStatus($jobId = null, $status = null)
        {
        }
        /**
         * @param int $jobId
         *
         * @return \stdClass|false
         *
         * @phpstan-template V1 of int|curried
         * @phpstan-template P1 of int
         * @phpstan-template R of \stdClass|false
         *
         * @phpstan-param ?V1 $jobId
         *
         * @phpstan-return ($jobId is P1 ? R : callable(P1=):R)
         */
        public static function get($jobId = null)
        {
        }
        /**
         * @param string $returnUrl
         * @param int $jobId
         *
         * @return callable|string
         *
         * @phpstan-template A1 of string|curried
         * @phpstan-template A2 of int|curried
         * @phpstan-template P1 of string
         * @phpstan-template P2 of int
         * @phpstan-template R of string
         *
         * @phpstan-param ?A1 $returnUrl
         * @phpstan-param ?A2 $jobId
         *
         * @phpstan-return ($returnUrl is P1
         *  ? ($jobId is P2 ? R : callable(P2=):R)
         *  : ($jobId is P2 ? callable(P1=):R : callable(P1=,P2=):R)
         * )
         */
        public static function getEditUrl($returnUrl = null, $jobId = null)
        {
        }
        /**
         * @param int    $postId
         * @param string $elementType
         * @param string $language
         *
         * @return callable|\stdClass|null
         *
         * @phpstan-template A1 of int|curried
         * @phpstan-template A2 of string|curried
         * @phpstan-template A3 of string|curried
         * @phpstan-template P1 of int
         * @phpstan-template P2 of string
         * @phpstan-template P3 of string
         * @phpstan-template R of \stdClass|null
         *
         * @phpstan-param ?A1 $postId
         * @phpstan-param ?A2 $elementType
         * @phpstan-param ?A3 $language
         *
         * @phpstan-return ($postId is P1
         *  ? ($elementType is P2
         *    ? ($language is P3
         *      ? R
         *      : callable(P3=):R)
         *    : ($language is P3
         *      ? callable(P2=):R
         *      : callable(P2=,P3=):R)
         *  )
         *  : ($elementType is P2
         *    ? ($language is P3
         *      ? callable(P1=):R
         *      : callable(P1=,P3=):R)
         *    : ($language is P3
         *      ? callable(P1=,P2=):R
         *      : callable(P1=,P2=,P3=):R)
         *  )
         * )
         */
        public static function getElementJob($postId = null, $elementType = null, $language = null)
        {
        }
    }
}
namespace WPML\TM\API\Job {
    /**
     * @method static callable|int fromJobId( ...$job_id )
     * @method static callable|int|null fromRid( ...$rid )
     */
    class Map
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
        public static function jobIdFromDB($rid)
        {
        }
        public static function ridFromDB($jobId)
        {
        }
    }
}
namespace WPML\TM\API {
    class Translators
    {
        /**
         * @return \WPML_Translator
         */
        public static function getCurrent()
        {
        }
    }
}
namespace WPML\FP {
    trait Curryable
    {
        /**
         * The registered string curried methods.
         *
         * @var string[]
         */
        protected static $curried = [];
        /**
         * Register a custom curried function.
         *
         * @param string   $name
         * @param int      $argCount
         * @param callable $fn
         *
         * @return void
         */
        public static function curryN($name, $argCount, callable $fn)
        {
        }
        /**
         * Checks if curried function is registered.
         *
         * @param string $name
         *
         * @return bool
         */
        public static function hasCurry($name)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param string  $method
         * @param mixed[] $parameters
         *
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public static function __callStatic($method, $parameters)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param string  $method
         * @param mixed[] $parameters
         *
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public function __call($method, $parameters)
        {
        }
        /**
         * @param int     $count
         * @param \Closure $fn
         *
         * @return \Closure
         */
        private function curryItCall($count, \Closure $fn)
        {
        }
        /**
         * @param int     $count
         * @param \Closure $fn
         *
         * @return \Closure
         */
        private static function curryItStaticCall($count, \Closure $fn)
        {
        }
    }
}
namespace WPML\TM\API {
    /**
     * Class Batch
     * @package WPML\TM\API
     *
     * @method static callable|void rollback( ...$batchName ) - Curried :: string->void
     *
     * It rollbacks just sent batch.
     */
    class Batch
    {
        use \WPML\FP\Curryable;
        public static function init()
        {
        }
        public static function sendPosts(\WPML\TM\Jobs\Dispatch\Messages $messages, $batch, $sendFrom = \WPML\TM\API\Jobs::SENT_VIA_BASKET)
        {
        }
        public static function sendStrings(\WPML\TM\Jobs\Dispatch\Messages $messages, $batch)
        {
        }
    }
    class TranslationServices
    {
        /**
         * @param AuthorizationFactory $authorizationFactory
         */
        public function __construct(\WPML\TM\TranslationProxy\Services\AuthorizationFactory $authorizationFactory)
        {
        }
        /**
         * @param string $suid
         *
         * @return Either
         */
        public function selectBySUID($suid)
        {
        }
        /**
         * @param int $serviceId
         *
         * @return Either
         */
        public function selectByServiceId($serviceId)
        {
        }
        public function deselect()
        {
        }
        public function authorize($apiToken)
        {
        }
        /**
         * @return null|\TranslationProxy_Service
         */
        public function getCurrentService()
        {
        }
        public function isAnyActive()
        {
        }
        public function isAuthorized()
        {
        }
    }
    class Basket
    {
        /**
         * @return bool
         */
        public static function shouldUse($currentLanguageCode = null)
        {
        }
    }
}
namespace {
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInit80c12143e38f72b0252b5fc1bac6346b
    {
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInit80c12143e38f72b0252b5fc1bac6346b
    {
        public static $files = array('b45b351e6b6f7487d819961fef2fda77' => __DIR__ . '/..' . '/jakeasmith/http_build_url/src/http_build_url.php');
        public static $classMap = array('Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php', 'IWPML_PB_Media_Nodes_Iterator' => __DIR__ . '/../..' . '/classes/Shared/media/interface-iwpml-pb-media-nodes-iterator.php', 'IWPML_PB_Media_Update' => __DIR__ . '/../..' . '/classes/Shared/media/interface-iwpml-pb-media-update.php', 'IWPML_PB_Media_Update_Factory' => __DIR__ . '/../..' . '/classes/Shared/media/interface-iwpml-pb-media-update-factory.php', 'IWPML_PB_Strategy' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/interface-iwpml-pb-strategy.php', 'IWPML_Page_Builders_Data_Settings' => __DIR__ . '/../..' . '/classes/Shared/st/compatibility/interface-iwpml-page-builders-data-settings.php', 'IWPML_Page_Builders_Module' => __DIR__ . '/../..' . '/classes/Shared/st/compatibility/interface-iwpml-page-builders-module.php', 'IWPML_Page_Builders_Translatable_Nodes' => __DIR__ . '/../..' . '/classes/Shared/st/compatibility/interface-iwpml-page-builders-translatable-nodes.php', 'WPML\\Compatibility\\BaseDynamicContent' => __DIR__ . '/../..' . '/classes/Shared/Abstracts/BaseDynamicContent.php', 'WPML\\Compatibility\\Divi\\Builder' => __DIR__ . '/../..' . '/classes/Integrations/Divi/builder.php', 'WPML\\Compatibility\\Divi\\DisplayConditions' => __DIR__ . '/../..' . '/classes/Integrations/Divi/DisplayConditions.php', 'WPML\\Compatibility\\Divi\\DiviOptionsEncoding' => __DIR__ . '/../..' . '/classes/Integrations/Divi/divi-options-encoding.php', 'WPML\\Compatibility\\Divi\\DoubleQuotes' => __DIR__ . '/../..' . '/classes/Integrations/Divi/DoubleQuotes.php', 'WPML\\Compatibility\\Divi\\DynamicContent' => __DIR__ . '/../..' . '/classes/Integrations/Divi/dynamic-content.php', 'WPML\\Compatibility\\Divi\\Hooks\\DomainsBackendEditor' => __DIR__ . '/../..' . '/classes/Integrations/Divi/Hooks/DomainsBackendEditor.php', 'WPML\\Compatibility\\Divi\\Hooks\\Editor' => __DIR__ . '/../..' . '/classes/Integrations/Divi/Hooks/Editor.php', 'WPML\\Compatibility\\Divi\\Hooks\\GutenbergUpdate' => __DIR__ . '/../..' . '/classes/Integrations/Divi/Hooks/GutenbergUpdate.php', 'WPML\\Compatibility\\Divi\\Search' => __DIR__ . '/../..' . '/classes/Integrations/Divi/search.php', 'WPML\\Compatibility\\Divi\\ThemeBuilder' => __DIR__ . '/../..' . '/classes/Integrations/Divi/theme-builder.php', 'WPML\\Compatibility\\Divi\\ThemeBuilderFactory' => __DIR__ . '/../..' . '/classes/Integrations/Divi/theme-builder-factory.php', 'WPML\\Compatibility\\Divi\\TinyMCE' => __DIR__ . '/../..' . '/classes/Integrations/Divi/TinyMCE.php', 'WPML\\Compatibility\\Divi\\WooShortcodes' => __DIR__ . '/../..' . '/classes/Integrations/Divi/WooShortcodes.php', 'WPML\\Compatibility\\FusionBuilder\\Backend\\Hooks' => __DIR__ . '/../..' . '/classes/Integrations/FusionBuilder/backend/Hooks.php', 'WPML\\Compatibility\\FusionBuilder\\BaseHooks' => __DIR__ . '/../..' . '/classes/Integrations/FusionBuilder/abstracts/BaseHooks.php', 'WPML\\Compatibility\\FusionBuilder\\DynamicContent' => __DIR__ . '/../..' . '/classes/Integrations/FusionBuilder/DynamicContent.php', 'WPML\\Compatibility\\FusionBuilder\\FormContent' => __DIR__ . '/../..' . '/classes/Integrations/FusionBuilder/FormContent.php', 'WPML\\Compatibility\\FusionBuilder\\Frontend\\Hooks' => __DIR__ . '/../..' . '/classes/Integrations/FusionBuilder/frontend/Hooks.php', 'WPML\\Compatibility\\FusionBuilder\\Hooks\\Editor' => __DIR__ . '/../..' . '/classes/Integrations/FusionBuilder/Hooks/Editor.php', 'WPML\\Compatibility\\WPBakery\\Styles' => __DIR__ . '/../..' . '/classes/Integrations/WPBakery/Styles.php', 'WPML\\PB\\App' => __DIR__ . '/../..' . '/classes/App.php', 'WPML\\PB\\AutoUpdate\\Hooks' => __DIR__ . '/../..' . '/classes/Shared/AutoUpdate/Hooks.php', 'WPML\\PB\\AutoUpdate\\Settings' => __DIR__ . '/../..' . '/classes/Shared/AutoUpdate/Settings.php', 'WPML\\PB\\AutoUpdate\\TranslationStatus' => __DIR__ . '/../..' . '/classes/Shared/AutoUpdate/TranslationStatus.php', 'WPML\\PB\\BeaverBuilder\\BeaverThemer\\HooksFactory' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/BeaverThemer/HooksFactory.php', 'WPML\\PB\\BeaverBuilder\\BeaverThemer\\LocationHooks' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/BeaverThemer/LocationHooks.php', 'WPML\\PB\\BeaverBuilder\\Config\\Factory' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/Config/Factory.php', 'WPML\\PB\\BeaverBuilder\\Hooks\\Editor' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/Hooks/Editor.php', 'WPML\\PB\\BeaverBuilder\\Hooks\\Menu' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/Hooks/Menu.php', 'WPML\\PB\\BeaverBuilder\\Modules\\ModuleWithItemsFromConfig' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/modules/ModuleWithItemsFromConfig.php', 'WPML\\PB\\BeaverBuilder\\TranslationJob\\Hooks' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/TranslationJob/Hooks.php', 'WPML\\PB\\Config\\Factory' => __DIR__ . '/../..' . '/classes/Shared/Config/Factory.php', 'WPML\\PB\\Config\\Hooks' => __DIR__ . '/../..' . '/classes/Shared/Config/Hooks.php', 'WPML\\PB\\Config\\Parser' => __DIR__ . '/../..' . '/classes/Shared/Config/Parser.php', 'WPML\\PB\\Config\\Storage' => __DIR__ . '/../..' . '/classes/Shared/Config/Storage.php', 'WPML\\PB\\Container\\Config' => __DIR__ . '/../..' . '/classes/Shared/Container/Config.php', 'WPML\\PB\\ConvertIds\\Helper' => __DIR__ . '/../..' . '/classes/Shared/ConvertIds/Helper.php', 'WPML\\PB\\Cornerstone\\Config\\Factory' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/Config/Factory.php', 'WPML\\PB\\Cornerstone\\Hooks\\Editor' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/Hooks/Editor.php', 'WPML\\PB\\Cornerstone\\Hooks\\Media' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/Hooks/Media.php', 'WPML\\PB\\Cornerstone\\Hooks\\ShortcodeAttributes' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/Hooks/ShortcodeAttributes.php', 'WPML\\PB\\Cornerstone\\Modules\\ModuleWithItemsFromConfig' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/modules/ModuleWithItemsFromConfig.php', 'WPML\\PB\\Cornerstone\\Styles\\Hooks' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/Styles/Hooks.php', 'WPML\\PB\\Cornerstone\\Utils' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/class-wpml-cornerstone-utils.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\Button' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/Button.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\EssentialAddons\\ContentTimeline' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/EssentialAddons/ContentTimeline.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\FormPopup' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/FormPopup.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\Hotspot' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/Hotspot.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\IconList' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/IconList.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\LoopCarousel' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/LoopCarousel.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\LoopGrid' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/LoopGrid.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\MegaMenu' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/MegaMenu.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\Popup' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/Popup.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\Provider' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/Provider.php', 'WPML\\PB\\Elementor\\Config\\DynamicElements\\WooProduct' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/DynamicElements/WooProduct.php', 'WPML\\PB\\Elementor\\Config\\Factory' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Config/Factory.php', 'WPML\\PB\\Elementor\\DataConvert' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/DataConvert.php', 'WPML\\PB\\Elementor\\DynamicContent\\Field' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/DynamicContent/Field.php', 'WPML\\PB\\Elementor\\DynamicContent\\Strings' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/DynamicContent/Strings.php', 'WPML\\PB\\Elementor\\Helper\\Node' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Helper/Node.php', 'WPML\\PB\\Elementor\\Helper\\StringFormat' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Helper/StringFormat.php', 'WPML\\PB\\Elementor\\Hooks\\CssCache' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/CssCache.php', 'WPML\\PB\\Elementor\\Hooks\\DomainsWithMultisite' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/DomainsWithMultisite.php', 'WPML\\PB\\Elementor\\Hooks\\DynamicElements' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/DynamicElements.php', 'WPML\\PB\\Elementor\\Hooks\\Editor' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/Editor.php', 'WPML\\PB\\Elementor\\Hooks\\FormPopup' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/FormPopup.php', 'WPML\\PB\\Elementor\\Hooks\\Frontend' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/Frontend.php', 'WPML\\PB\\Elementor\\Hooks\\GutenbergCleanup' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/GutenbergCleanup.php', 'WPML\\PB\\Elementor\\Hooks\\LandingPages' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/LandingPages.php', 'WPML\\PB\\Elementor\\Hooks\\Templates' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/Templates.php', 'WPML\\PB\\Elementor\\Hooks\\WooCommerce' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/WooCommerce.php', 'WPML\\PB\\Elementor\\Hooks\\WordPressWidgets' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/Hooks/WordPressWidgets.php', 'WPML\\PB\\Elementor\\LanguageSwitcher\\LanguageSwitcher' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/LanguageSwitcher/LanguageSwitcher.php', 'WPML\\PB\\Elementor\\LanguageSwitcher\\Widget' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/LanguageSwitcher/Widget.php', 'WPML\\PB\\Elementor\\LanguageSwitcher\\WidgetAdaptor' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/LanguageSwitcher/WidgetAdaptor.php', 'WPML\\PB\\Elementor\\Media\\Modules\\AllNodes' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/AllNodes.php', 'WPML\\PB\\Elementor\\Media\\Modules\\Gallery' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/Gallery.php', 'WPML\\PB\\Elementor\\Media\\Modules\\Hotspot' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/Hotspot.php', 'WPML\\PB\\Elementor\\Media\\Modules\\Video' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/Video.php', 'WPML\\PB\\Elementor\\Media\\Modules\\VideoPlaylist' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/VideoPlaylist.php', 'WPML\\PB\\Elementor\\Modules\\Hotspot' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/Hotspot.php', 'WPML\\PB\\Elementor\\Modules\\MediaCarousel' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/MediaCarousel.php', 'WPML\\PB\\Elementor\\Modules\\ModuleWithItemsFromConfig' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/ModuleWithItemsFromConfig.php', 'WPML\\PB\\Elementor\\Modules\\MultipleGallery' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/MultipleGallery.php', 'WPML\\PB\\Elementor\\Modules\\Reviews' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/Reviews.php', 'WPML\\PB\\GutenbergCleanup\\Package' => __DIR__ . '/../..' . '/classes/Shared/GutenbergCleanup/Package.php', 'WPML\\PB\\GutenbergCleanup\\ShortcodeHooks' => __DIR__ . '/../..' . '/classes/Shared/GutenbergCleanup/ShortcodeHooks.php', 'WPML\\PB\\Gutenberg\\ConvertIdsInBlock\\Base' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/IdsInBlock/Base.php', 'WPML\\PB\\Gutenberg\\ConvertIdsInBlock\\BlockAttributes' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/IdsInBlock/BlockAttributes.php', 'WPML\\PB\\Gutenberg\\ConvertIdsInBlock\\Composite' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/IdsInBlock/Composite.php', 'WPML\\PB\\Gutenberg\\ConvertIdsInBlock\\Hooks' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/IdsInBlock/Hooks.php', 'WPML\\PB\\Gutenberg\\ConvertIdsInBlock\\TagAttributes' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/IdsInBlock/TagAttributes.php', 'WPML\\PB\\Gutenberg\\Integration' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/interface-integration.php', 'WPML\\PB\\Gutenberg\\Integration_Composite' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/class-integration-composite.php', 'WPML\\PB\\Gutenberg\\Navigation\\Frontend' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/Navigation/Frontend.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\AdminIntegration' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/class-admin-integration.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\Basket' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/Basket.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\BasketElement' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/class-basket-element.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\Blocks' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/class-blocks.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\Integration' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/class-integration.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\JobFactory' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/JobFactory.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\JobLinks' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/class-job-links.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\Manage' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/class-manage.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\ManageBasket' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/class-manage-basket.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\ManageBatch' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/class-manage-batch.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\Notice' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/class-notice.php', 'WPML\\PB\\Gutenberg\\ReusableBlocks\\Translation' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/reusable-blocks/class-translation.php', 'WPML\\PB\\Gutenberg\\StringsInBlock\\Attributes' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/strings-in-block/class-attributes.php', 'WPML\\PB\\Gutenberg\\StringsInBlock\\Base' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/strings-in-block/class-base.php', 'WPML\\PB\\Gutenberg\\StringsInBlock\\Collection' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/strings-in-block/class-collection.php', 'WPML\\PB\\Gutenberg\\StringsInBlock\\DOMHandler\\DOMHandle' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/strings-in-block/dom-handler/dom-handle.php', 'WPML\\PB\\Gutenberg\\StringsInBlock\\DOMHandler\\HtmlBlock' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/strings-in-block/dom-handler/html-block.php', 'WPML\\PB\\Gutenberg\\StringsInBlock\\DOMHandler\\ListBlock' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/strings-in-block/dom-handler/list-block.php', 'WPML\\PB\\Gutenberg\\StringsInBlock\\DOMHandler\\ListItemBlock' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/strings-in-block/dom-handler/list-item-block.php', 'WPML\\PB\\Gutenberg\\StringsInBlock\\DOMHandler\\StandardBlock' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/strings-in-block/dom-handler/standard-block.php', 'WPML\\PB\\Gutenberg\\StringsInBlock\\HTML' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/strings-in-block/class-html.php', 'WPML\\PB\\Gutenberg\\StringsInBlock\\StringsInBlock' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/strings-in-block/interface-strings-in-block.php', 'WPML\\PB\\Gutenberg\\Widgets\\Block\\DisplayTranslation' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/Widgets/Block/DisplayTranslation.php', 'WPML\\PB\\Gutenberg\\Widgets\\Block\\RegisterStrings' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/Widgets/Block/RegisterStrings.php', 'WPML\\PB\\Gutenberg\\Widgets\\Block\\Search' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/Widgets/Block/Search.php', 'WPML\\PB\\Gutenberg\\Widgets\\Block\\Strings' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/Widgets/Block/Strings.php', 'WPML\\PB\\Gutenberg\\XPath' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/XPath.php', 'WPML\\PB\\Helper\\LanguageNegotiation' => __DIR__ . '/../..' . '/classes/Shared/Helper/LanguageNegotiation.php', 'WPML\\PB\\LegacyIntegration' => __DIR__ . '/../..' . '/classes/LegacyIntegration.php', 'WPML\\PB\\OldPlugin' => __DIR__ . '/../..' . '/classes/OldPlugin.php', 'WPML\\PB\\ShortCodesInGutenbergBlocks' => __DIR__ . '/../..' . '/classes/Shared/st/ShortCodesInGutenbergBlocks.php', 'WPML\\PB\\Shortcode\\AdjustIdsHooks' => __DIR__ . '/../..' . '/classes/Shared/Shortcode/AdjustIdsHooks.php', 'WPML\\PB\\Shortcode\\StringCleanUp' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/shortcode/StringCleanUp.php', 'WPML\\PB\\Shutdown\\Hooks' => __DIR__ . '/../..' . '/classes/Shared/Shutdown/Hooks.php', 'WPML\\PB\\SiteOrigin\\Config\\Factory' => __DIR__ . '/../..' . '/classes/Integrations/SiteOrigin/Config/Factory.php', 'WPML\\PB\\SiteOrigin\\DataSettings' => __DIR__ . '/../..' . '/classes/Integrations/SiteOrigin/DataSettings.php', 'WPML\\PB\\SiteOrigin\\Factory' => __DIR__ . '/../..' . '/classes/Integrations/SiteOrigin/Factory.php', 'WPML\\PB\\SiteOrigin\\HandleCustomFieldsFactory' => __DIR__ . '/../..' . '/classes/Integrations/SiteOrigin/HandleCustomFieldsFactory.php', 'WPML\\PB\\SiteOrigin\\Modules\\ModuleWithItems' => __DIR__ . '/../..' . '/classes/Integrations/SiteOrigin/Modules/ModuleWithItems.php', 'WPML\\PB\\SiteOrigin\\Modules\\ModuleWithItemsFromConfig' => __DIR__ . '/../..' . '/classes/Integrations/SiteOrigin/Modules/ModuleWithItemsFromConfig.php', 'WPML\\PB\\SiteOrigin\\RegisterStrings' => __DIR__ . '/../..' . '/classes/Integrations/SiteOrigin/RegisterStrings.php', 'WPML\\PB\\SiteOrigin\\TranslatableNodes' => __DIR__ . '/../..' . '/classes/Integrations/SiteOrigin/TranslatableNodes.php', 'WPML\\PB\\SiteOrigin\\UpdateTranslation' => __DIR__ . '/../..' . '/classes/Integrations/SiteOrigin/UpdateTranslation.php', 'WPML\\PB\\TranslateLinks' => __DIR__ . '/../..' . '/classes/Shared/st/TranslateLinks.php', 'WPML_Beaver_Builder_Accordion' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/modules/class-wpml-beaver-builder-accordion.php', 'WPML_Beaver_Builder_Content_Slider' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/modules/class-wpml-beaver-builder-content-slider.php', 'WPML_Beaver_Builder_Data_Settings' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/class-wpml-beaver-builder-data-settings.php', 'WPML_Beaver_Builder_Data_Settings_For_Media' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/class-wpml-beaver-builder-data-settings-for-media.php', 'WPML_Beaver_Builder_Icon_Group' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/modules/class-wpml-beaver-builder-icon-group.php', 'WPML_Beaver_Builder_Integration_Factory' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/class-wpml-beaver-builder-integration-factory.php', 'WPML_Beaver_Builder_Media_Hooks_Factory' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/media/class-wpml-beaver-builder-media-hooks-factory.php', 'WPML_Beaver_Builder_Media_Node' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/media/modules/class-wpml-beaver-builder-media-node.php', 'WPML_Beaver_Builder_Media_Node_Content_Slider' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/media/modules/class-wpml-beaver-builder-media-node-content-slider.php', 'WPML_Beaver_Builder_Media_Node_Gallery' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/media/modules/class-wpml-beaver-builder-media-node-gallery.php', 'WPML_Beaver_Builder_Media_Node_Photo' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/media/modules/class-wpml-beaver-builder-media-node-photo.php', 'WPML_Beaver_Builder_Media_Node_Provider' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/media/class-wpml-beaver-builder-media-node-provider.php', 'WPML_Beaver_Builder_Media_Node_Slideshow' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/media/modules/class-wpml-beaver-builder-media-node-slideshow.php', 'WPML_Beaver_Builder_Media_Nodes_Iterator' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/media/class-wpml-beaver-builder-media-nodes-iterator.php', 'WPML_Beaver_Builder_Module_With_Items' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/modules/class-wpml-beaver-builder-module-with-items.php', 'WPML_Beaver_Builder_Pricing_Table' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/modules/class-wpml-beaver-builder-pricing-table.php', 'WPML_Beaver_Builder_Register_Strings' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/class-wpml-beaver-builder-register-strings.php', 'WPML_Beaver_Builder_Tab' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/modules/class-wpml-beaver-builder-tab.php', 'WPML_Beaver_Builder_Testimonials' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/modules/class-wpml-beaver-builder-testimonials.php', 'WPML_Beaver_Builder_Translatable_Nodes' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/class-wpml-beaver-builder-translatable-nodes.php', 'WPML_Beaver_Builder_Update_Media_Factory' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/media/class-wpml-beaver-builder-update-media-factory.php', 'WPML_Beaver_Builder_Update_Translation' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/class-wpml-beaver-builder-update-translation.php', 'WPML_Compatibility_Divi' => __DIR__ . '/../..' . '/classes/Integrations/Divi/class-wpml-compatibility-divi.php', 'WPML_Compatibility_Divi_Notice' => __DIR__ . '/../..' . '/classes/Integrations/Divi/class-wpml-compatiblity-divi-notice.php', 'WPML_Compatibility_Plugin_Fusion_Global_Element_Hooks' => __DIR__ . '/../..' . '/classes/Integrations/FusionBuilder/wpml-compatibility-plugin-fusion-global-element-hooks.php', 'WPML_Compatibility_Plugin_Fusion_Hooks_Factory' => __DIR__ . '/../..' . '/classes/Integrations/FusionBuilder/wpml-compatibility-plugin-fusion-hooks-factory.php', 'WPML_Compatibility_Plugin_Visual_Composer' => __DIR__ . '/../..' . '/classes/Integrations/WPBakery/class-wpml-compatibility-plugin-visual-composer.php', 'WPML_Compatibility_Plugin_Visual_Composer_Grid_Hooks' => __DIR__ . '/../..' . '/classes/Integrations/WPBakery/class-wpml-compatibility-plugin-visual-composer-grid-hooks.php', 'WPML_Compatibility_Theme_Enfold' => __DIR__ . '/../..' . '/classes/Integrations/Enfold/class-wpml-compatibility-theme-enfold.php', 'WPML_Core_Version_Check' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-dependencies/src/dependencies/class-wpml-core-version-check.php', 'WPML_Cornerstone_Accordion' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/modules/class-wpml-cornerstone-accordion.php', 'WPML_Cornerstone_Data_Settings' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/class-wpml-cornerstone-data-settings.php', 'WPML_Cornerstone_Integration_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/class-wpml-cornerstone-integration-factory.php', 'WPML_Cornerstone_Media_Hooks_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/class-wpml-cornerstone-media-hooks-factory.php', 'WPML_Cornerstone_Media_Node' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/modules/abstract/class-wpml-cornerstone-media-node.php', 'WPML_Cornerstone_Media_Node_Classic_Card' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/modules/class-wpml-cornerstone-media-node-classic-card.php', 'WPML_Cornerstone_Media_Node_Classic_Creative_CTA' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/modules/class-wpml-cornerstone-media-node-classic-creative-cta.php', 'WPML_Cornerstone_Media_Node_Classic_Feature_Box' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/modules/class-wpml-cornerstone-media-node-classic-feature-box.php', 'WPML_Cornerstone_Media_Node_Classic_Image' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/modules/class-wpml-cornerstone-media-node-classic-image.php', 'WPML_Cornerstone_Media_Node_Classic_Promo' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/modules/class-wpml-cornerstone-media-node-classic-promo.php', 'WPML_Cornerstone_Media_Node_Image' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/modules/class-wpml-cornerstone-media-node-image.php', 'WPML_Cornerstone_Media_Node_Provider' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/class-wpml-cornerstone-media-node-provider.php', 'WPML_Cornerstone_Media_Node_With_URLs' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/modules/abstract/class-wpml-cornerstone-media-node-with-urls.php', 'WPML_Cornerstone_Media_Nodes_Iterator' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/class-wpml-cornerstone-media-nodes-iterator.php', 'WPML_Cornerstone_Module_With_Items' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/modules/class-wpml-cornerstone-module-with-items.php', 'WPML_Cornerstone_Register_Strings' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/class-wpml-cornerstone-register-strings.php', 'WPML_Cornerstone_Tabs' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/modules/class-wpml-cornerstone-tabs.php', 'WPML_Cornerstone_Translatable_Nodes' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/class-wpml-cornerstone-translatable-nodes.php', 'WPML_Cornerstone_Update_Media_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/media/class-wpml-cornerstone-update-media-factory.php', 'WPML_Cornerstone_Update_Translation' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/class-wpml-cornerstone-update-translation.php', 'WPML_Dependencies' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-dependencies/src/dependencies/class-wpml-dependencies.php', 'WPML_Elementor_Accordion' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/class-wpml-elementor-accordion.php', 'WPML_Elementor_Adjust_Global_Widget_ID' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-adjust-global-widget-id.php', 'WPML_Elementor_Adjust_Global_Widget_ID_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-adjust-global-widget-id-factory.php', 'WPML_Elementor_DB' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-db.php', 'WPML_Elementor_DB_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-db-factory.php', 'WPML_Elementor_Data_Settings' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-data-settings.php', 'WPML_Elementor_Form' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/class-wpml-elementor-form.php', 'WPML_Elementor_Icon_List' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/class-wpml-elementor-icon-list.php', 'WPML_Elementor_Integration_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-integration-factory.php', 'WPML_Elementor_Media_Hooks_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/class-wpml-elementor-media-hooks-factory.php', 'WPML_Elementor_Media_Node' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/abstract/class-wpml-elementor-media-node.php', 'WPML_Elementor_Media_Node_Call_To_Action' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/class-wpml-elementor-media-node-call-to-action.php', 'WPML_Elementor_Media_Node_Image' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/class-wpml-elementor-media-node-image.php', 'WPML_Elementor_Media_Node_Image_Box' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/class-wpml-elementor-media-node-image-box.php', 'WPML_Elementor_Media_Node_Image_Carousel' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/class-wpml-elementor-media-node-image-carousel.php', 'WPML_Elementor_Media_Node_Image_Gallery' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/class-wpml-elementor-media-node-image-gallery.php', 'WPML_Elementor_Media_Node_Media_Carousel' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/class-wpml-elementor-media-node-media-carousel.php', 'WPML_Elementor_Media_Node_Provider' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/class-wpml-elementor-media-node-provider.php', 'WPML_Elementor_Media_Node_Slides' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/class-wpml-elementor-media-node-slides.php', 'WPML_Elementor_Media_Node_WP_Widget_Media_Gallery' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/class-wpml-elementor-media-node-wp-widget-media-gallery.php', 'WPML_Elementor_Media_Node_WP_Widget_Media_Image' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/class-wpml-elementor-media-node-wp-widget-media-image.php', 'WPML_Elementor_Media_Node_With_Image_Property' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/abstract/class-wpml-elementor-media-node-with-image-property.php', 'WPML_Elementor_Media_Node_With_Images_Property' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/abstract/class-wpml-elementor-media-node-with-images-property.php', 'WPML_Elementor_Media_Node_With_Slides' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/modules/abstract/class-wpml-elementor-media-node-with-slides.php', 'WPML_Elementor_Media_Nodes_Iterator' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/class-wpml-elementor-media-nodes-iterator.php', 'WPML_Elementor_Module_With_Items' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/class-wpml-elementor-module-with-items.php', 'WPML_Elementor_Price_List' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/class-wpml-elementor-price-list.php', 'WPML_Elementor_Price_Table' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/class-wpml-elementor-price-table.php', 'WPML_Elementor_Register_Strings' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-register-strings.php', 'WPML_Elementor_Slides' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/class-wpml-elementor-slides.php', 'WPML_Elementor_Tabs' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/class-wpml-elementor-tabs.php', 'WPML_Elementor_Testimonial_Carousel' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/class-wpml-elementor-testimonial-carousel.php', 'WPML_Elementor_Toggle' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/modules/class-wpml-elementor-toggle.php', 'WPML_Elementor_Translatable_Nodes' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-translatable-nodes.php', 'WPML_Elementor_Translate_IDs' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-translate-ids.php', 'WPML_Elementor_Translate_IDs_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-translate-ids-factory.php', 'WPML_Elementor_URLs' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-urls.php', 'WPML_Elementor_URLs_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-urls-factory.php', 'WPML_Elementor_Update_Media_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/media/class-wpml-elementor-update-media-factory.php', 'WPML_Elementor_Update_Translation' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-update-translation.php', 'WPML_Elementor_WooCommerce_Hooks' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-woocommerce-hooks.php', 'WPML_Elementor_WooCommerce_Hooks_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-woocommerce-hooks-factory.php', 'WPML_Gutenberg_Config_Option' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/class-wpml-gutenberg-config-option.php', 'WPML_Gutenberg_Integration' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/class-wpml-gutenberg-integration.php', 'WPML_Gutenberg_Integration_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/class-wpml-gutenberg-integration-factory.php', 'WPML_Gutenberg_Strings_Registration' => __DIR__ . '/../..' . '/classes/Integrations/Gutenberg/class-wpml-gutenberg-strings-registration.php', 'WPML_PB_API_Hooks_Strategy' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/api-hooks/class-wpml-pb-api-hooks-strategy.php', 'WPML_PB_Beaver_Builder_Handle_Custom_Fields_Factory' => __DIR__ . '/../..' . '/classes/Integrations/BeaverBuilder/class-wpml-beaver-builder-handle-custom-fields-factory.php', 'WPML_PB_Config_Import_Shortcode' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/shortcode/class-wpml-pb-config-import-shortcode.php', 'WPML_PB_Cornerstone_Handle_Custom_Fields_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Cornerstone/class-wpml-cornerstone-handle-custom-fields-factory.php', 'WPML_PB_Elementor_Handle_Custom_Fields_Factory' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-elementor-pb-handle-custom-fields-factory.php', 'WPML_PB_Factory' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-factory.php', 'WPML_PB_Fix_Maintenance_Query' => __DIR__ . '/../..' . '/classes/Integrations/Elementor/class-wpml-pb-fix-maintenance-query.php', 'WPML_PB_Handle_Custom_Fields' => __DIR__ . '/../..' . '/classes/Shared/tm/class-wpml-pb-handle-custom-fields.php', 'WPML_PB_Handle_Post_Body' => __DIR__ . '/../..' . '/classes/Shared/tm/class-wpml-pb-handle-post-body.php', 'WPML_PB_Integration' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-integration.php', 'WPML_PB_Integration_Rescan' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-rescan.php', 'WPML_PB_Last_Translation_Edit_Mode' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-last-translation-edit-mode.php', 'WPML_PB_Loader' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-loader.php', 'WPML_PB_Package_Strings_Resave' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-package-strings-resave.php', 'WPML_PB_Register_Shortcodes' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/shortcode/class-wpml-pb-register-shortcodes.php', 'WPML_PB_Reuse_Translations' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-reuse-translations.php', 'WPML_PB_Reuse_Translations_By_Strategy' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-reuse-translations-by-strategy.php', 'WPML_PB_Shortcode_Content_Wrapper' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/shortcode/class-wpml-pb-shortcode-content-wrapper.php', 'WPML_PB_Shortcode_Encoding' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/shortcode/class-wpml-pb-shortcode-encoding.php', 'WPML_PB_Shortcode_Strategy' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/shortcode/class-wpml-pb-shortcode-strategy.php', 'WPML_PB_Shortcodes' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/shortcode/class-wpml-pb-shortcodes.php', 'WPML_PB_String' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-string.php', 'WPML_PB_String_Registration' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-string-registration.php', 'WPML_PB_String_Translation' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-string-translation.php', 'WPML_PB_String_Translation_By_Strategy' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-string-translation-by-strategy.php', 'WPML_PB_Update_API_Hooks_In_Content' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/api-hooks/class-wpml-pb-update-api-hooks-in-content.php', 'WPML_PB_Update_Post' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-pb-update-post.php', 'WPML_PB_Update_Shortcodes_In_Content' => __DIR__ . '/../..' . '/classes/Shared/st/strategy/shortcode/class-wpml-pb-update-shortcodes-in-content.php', 'WPML_PHP_Version_Check' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-dependencies/src/dependencies/class-wpml-php-version-check.php', 'WPML_Page_Builders_App' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-page-builders-app.php', 'WPML_Page_Builders_Defined' => __DIR__ . '/../..' . '/classes/Shared/st/compatibility/class-wpml-page-builders-defined.php', 'WPML_Page_Builders_Integration' => __DIR__ . '/../..' . '/classes/Shared/st/class-page-builder-integration.php', 'WPML_Page_Builders_Media_Hooks' => __DIR__ . '/../..' . '/classes/Shared/media/class-wpml-page-builders-media-hooks.php', 'WPML_Page_Builders_Media_Shortcodes' => __DIR__ . '/../..' . '/classes/Shared/media/shortcodes/class-wpml-page-builders-media-shortcodes.php', 'WPML_Page_Builders_Media_Shortcodes_Update' => __DIR__ . '/../..' . '/classes/Shared/media/shortcodes/class-wpml-page-builders-media-shortcodes-update.php', 'WPML_Page_Builders_Media_Shortcodes_Update_Factory' => __DIR__ . '/../..' . '/classes/Shared/media/shortcodes/class-wpml-page-builders-media-shortcodes-update-factory.php', 'WPML_Page_Builders_Media_Translate' => __DIR__ . '/../..' . '/classes/Shared/media/class-wpml-page-builders-media-translate.php', 'WPML_Page_Builders_Media_Usage' => __DIR__ . '/../..' . '/classes/Shared/media/class-wpml-page-builders-media-usage.php', 'WPML_Page_Builders_Page_Built' => __DIR__ . '/../..' . '/classes/Shared/utilities/class-wpml-page-builders-page-built-with-built.php', 'WPML_Page_Builders_Register_Strings' => __DIR__ . '/../..' . '/classes/Shared/st/compatibility/class-wpml-page-builders-register-strings.php', 'WPML_Page_Builders_Update' => __DIR__ . '/../..' . '/classes/Shared/st/compatibility/class-wpml-page-builders-update.php', 'WPML_Page_Builders_Update_Media' => __DIR__ . '/../..' . '/classes/Shared/media/class-wpml-page-builders-update-media.php', 'WPML_Page_Builders_Update_Translation' => __DIR__ . '/../..' . '/classes/Shared/st/compatibility/class-wpml-page-builders-update-translation.php', 'WPML_ST_Diff' => __DIR__ . '/../..' . '/classes/Shared/utilities/class-wpml-st-diff.php', 'WPML_ST_PB_Plugin' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-st-pb-plugin.php', 'WPML_String_Registration_Factory' => __DIR__ . '/../..' . '/classes/Shared/st/class-wpml-string-registration-factory.php', 'WPML_TM_Page_Builders' => __DIR__ . '/../..' . '/classes/Shared/tm/class-wpml-tm-page-builders.php', 'WPML_TM_Page_Builders_Field_Wrapper' => __DIR__ . '/../..' . '/classes/Shared/tm/class-wpml-tm-page-builders-field-wrapper.php', 'WPML_TM_Page_Builders_Hooks' => __DIR__ . '/../..' . '/classes/Shared/tm/class-wpml-tm-page-builders-hooks.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_PHP_Version_Check
     */
    class WPML_PHP_Version_Check
    {
        /**
         * WPML_PHP_Version_Check constructor.
         *
         * @param string $required_version Required php version.
         * @param string $plugin_name      Plugin name.
         * @param string $plugin_file      Plugin file.
         * @param string $text_domain      Text domain.
         */
        public function __construct($required_version, $plugin_name, $plugin_file, $text_domain)
        {
        }
        /**
         * Check php version.
         *
         * @return bool
         */
        public function is_ok()
        {
        }
        /**
         * Show notice with php requirement.
         */
        public function php_requirement_message()
        {
        }
    }
    class WPML_Core_Version_Check
    {
        public static function is_ok($package_file_path)
        {
        }
    }
    /*
    Module Name: WPML Dependency Check Module
    Description: This is not a plugin! This module must be included in other plugins (WPML and add-ons) to handle compatibility checks
    Author: OnTheGoSystems
    Author URI: http://www.onthegosystems.com/
    Version: 2.1
    */
    /** @noinspection PhpUndefinedClassInspection */
    class WPML_Dependencies
    {
        protected static $instance;
        public $data_key = 'wpml_dependencies:';
        public $needs_validation_key = 'wpml_dependencies:needs_validation';
        protected function remove_old_admin_notices()
        {
        }
        public function run_validation_on_plugins_page()
        {
        }
        public function activated_plugin_action()
        {
        }
        public function deactivated_plugin_action()
        {
        }
        public function upgrader_process_complete_action($upgrader_object, $options)
        {
        }
        public function admin_notices_action()
        {
        }
        public function extra_plugin_headers_action(array $extra_headers = array())
        {
        }
        /**
         * @return WPML_Dependencies
         */
        public static function get_instance()
        {
        }
        public function get_plugins()
        {
        }
        public function init_plugins_action()
        {
        }
        public function get_plugins_validation()
        {
        }
        public function is_plugin_version_valid()
        {
        }
        public function get_expected_versions()
        {
        }
        public function has_invalid_plugins()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Action
    {
        public function add_hooks();
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Frontend_Action extends \IWPML_Action
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Backend_Action extends \IWPML_Action
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_DIC_Action extends \IWPML_Action
    {
    }
}
namespace WPML\PB\Shutdown {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const PRIORITY_REGISTER_STRINGS = 10;
        const PRIORITY_SAVE_TRANSLATIONS_TO_POST = 20;
        const PRIORITY_TRANSLATE_MEDIA = 30;
        public function __construct(\WPML_PB_Integration $pbIntegration)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * This applies only on original posts.
         */
        public function registerStrings()
        {
        }
        /**
         * This applies only on post translations.
         */
        public function translateMedias()
        {
        }
    }
}
namespace {
    class WPML_PB_Handle_Post_Body implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function __construct(\WPML_Page_Builders_Page_Built $page_builders_built)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $translate
         * @param WP_Post $post
         *
         * @return int
         */
        public function should_translate($translate, \WP_Post $post)
        {
        }
        /**
         * @param int $new_post_id
         * @param int $original_post_id
         * @param array $fields
         */
        public function copy($new_post_id, $original_post_id, array $fields)
        {
        }
    }
    class WPML_TM_Page_Builders
    {
        const PACKAGE_TYPE_EXTERNAL = 'external';
        const TRANSLATION_COMPLETE = 10;
        const FIELD_STYLE_AREA = 'AREA';
        const FIELD_STYLE_VISUAL = 'VISUAL';
        const FIELD_STYLE_LINK = 'LINK';
        /**
         * @param SitePress $sitepress
         * @param WPML_PB_Integration|null $wpmlPbIntegration
         */
        public function __construct(\SitePress $sitepress, \WPML_PB_Integration $wpmlPbIntegration = \null)
        {
        }
        /**
         * Filter translation job data.
         *
         * @param array $translation_package Translation package.
         * @param mixed $post                Post.
         * @param bool  $isOriginal          If it's used as original post.
         *
         * @return array
         */
        public function translation_job_data_filter(array $translation_package, $post, $isOriginal = \false)
        {
        }
        /**
         * @param int      $new_element_id
         * @param array    $fields
         * @param stdClass $job
         */
        public function pro_translation_completed_action($new_element_id, array $fields, \stdClass $job)
        {
        }
        /**
         * Adjust translation fields.
         *
         * @param array    $fields Translation fields.
         * @param stdClass $job    Translation job.
         *
         * @return array
         */
        public function adjust_translation_fields_filter(array $fields, $job)
        {
        }
        /**
         * @param array $layout
         *
         * @return array
         */
        public function job_layout_filter(array $layout)
        {
        }
        /**
         * @param string $link
         * @param int    $post_id
         * @param string $lang
         * @param int    $trid
         *
         * @return string
         */
        public function link_to_translation_filter($link, $post_id, $lang, $trid)
        {
        }
        /**
         * @param string $field_slug
         *
         * @return WPML_TM_Page_Builders_Field_Wrapper
         */
        public function create_field_wrapper($field_slug)
        {
        }
    }
    class WPML_TM_Page_Builders_Hooks
    {
        /**
         * WPML_TM_Page_Builders constructor.
         *
         * @param WPML_TM_Page_Builders $worker
         */
        public function __construct(\WPML_TM_Page_Builders $worker = \null, \SitePress $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param array $translation_package
         * @param mixed $post
         * @param bool  $isOriginal
         *
         * @return array
         */
        public function translation_job_data_filter(array $translation_package, $post, $isOriginal = \false)
        {
        }
        /**
         * @param int      $new_post_id
         * @param array    $fields
         * @param stdClass $job
         */
        public function pro_translation_completed_action($new_post_id, array $fields, \stdClass $job)
        {
        }
        /**
         * Filter translation fields.
         *
         * @param array    $fields Translation fields.
         * @param stdClass $job    Translation job.
         *
         * @return array
         */
        public function adjust_translation_fields_filter(array $fields, $job)
        {
        }
        /**
         * @param array $layout
         *
         * @return array
         */
        public function job_layout_filter(array $layout)
        {
        }
        /**
         * @param string $link
         * @param int    $post_id
         * @param string $lang
         * @param int    $trid
         *
         * @return string
         */
        public function link_to_translation_filter($link, $post_id, $lang, $trid)
        {
        }
        /**
         * Remove "Page Builder ShortCode Strings" from translation dashboard filters
         *
         * @param array $types
         *
         * @return mixed
         */
        public function remove_shortcode_strings_type_filter($types)
        {
        }
    }
    /**
     * WPML_TM_Page_Builders_Field_Wrapper class file.
     *
     * @package wpml-page-builders
     */
    /**
     * Class WPML_TM_Page_Builders_Field_Wrapper
     */
    class WPML_TM_Page_Builders_Field_Wrapper
    {
        const SLUG_BASE = 'package-string-';
        /**
         * WPML_TM_Page_Builders_Field_Wrapper constructor.
         *
         * @param string $field_slug Field slug.
         */
        public function __construct($field_slug)
        {
        }
        /**
         * Check if package is valid.
         *
         * @param bool $package_must_exist Demand existence of the package.
         *
         * @return bool
         */
        public function is_valid($package_must_exist = \false)
        {
        }
        /**
         * Get package id.
         *
         * @return false|string
         */
        public function get_package_id()
        {
        }
        /**
         * Get package.
         *
         * @return WPML_Package|null
         */
        public function get_package()
        {
        }
        /**
         * Get string id.
         *
         * @return false|string
         */
        public function get_string_id()
        {
        }
        /**
         * Get field slug.
         *
         * @return string
         */
        public function get_field_slug()
        {
        }
        /**
         * Get string type.
         *
         * @return false|string
         */
        public function get_string_type()
        {
        }
        /**
         * Get string wrap tag.
         *
         * @param stdClass $string WPML string.
         *
         * @return string
         */
        public static function get_wrap_tag($string)
        {
        }
        /**
         * Generate field slug.
         *
         * @param int $package_id Package id.
         * @param int $string_id  String id.
         *
         * @return string
         */
        public static function generate_field_slug($package_id, $string_id)
        {
        }
        /**
         * Get string title.
         *
         * @return string|bool
         */
        public function get_string_title()
        {
        }
    }
    class WPML_PB_Handle_Custom_Fields
    {
        protected $data_settings;
        public function __construct(\IWPML_Page_Builders_Data_Settings $data_settings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param bool $is_page_builder_page
         * @param WP_Post $post
         *
         * @return bool
         */
        public function is_page_builder_page_filter($is_page_builder_page, \WP_Post $post)
        {
        }
        /**
         * @param int $new_post_id
         * @param int $original_post_id
         */
        public function copy_custom_fields($new_post_id, $original_post_id)
        {
        }
        /**
         * @param int $new_post_id
         * @param int $original_post_id
         * @param string $field
         */
        public static function copy_field($new_post_id, $original_post_id, $field)
        {
        }
        /**
         * @param mixed $data
         *
         * @return mixed string
         */
        public static function slash_json($data)
        {
        }
    }
}
namespace WPML\PB\ConvertIds {
    class Helper
    {
        const TYPE_POST_IDS = 'post-ids';
        const TYPE_TAXONOMY_IDS = 'taxonomy-ids';
        /**
         * @param string $type
         *
         * @return bool
         */
        public static function isValidType($type)
        {
        }
        /**
         * @param string|null $subtype
         * @param string|null $type
         *
         * @return string
         */
        public static function selectElementType($subtype, $type)
        {
        }
    }
}
namespace WPML\PB\Container {
    class Config
    {
        public static function getSharedClasses()
        {
        }
    }
}
namespace WPML\PB\Helper {
    class LanguageNegotiation
    {
        /**
         * @return bool
         */
        public static function isUsingDomains()
        {
        }
        /**
         * @param string $languageCode Language code.
         *
         * @retun string|null
         */
        public static function getDomainByLanguage($languageCode)
        {
        }
    }
}
namespace {
    /**
     * Based on https://github.com/paulgb/simplediff/blob/master/php/simplediff.php
     */
    class WPML_ST_Diff
    {
        /**
         * @param string[] $old_words
         * @param string[] $new_words
         *
         * @return array
         */
        public static function diff($old_words, $new_words)
        {
        }
        /**
         * @param string $old_text
         * @param string $new_text
         *
         * @return float|int
         */
        public static function get_sameness_percent($old_text, $new_text)
        {
        }
    }
    class WPML_Page_Builders_Page_Built
    {
        public function __construct(\WPML_Config_Built_With_Page_Builders $config)
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return bool
         */
        public function is_page_builder_page(\WP_Post $post)
        {
        }
    }
    class WPML_PB_Loader
    {
        public function __construct(\WPML_ST_Settings $st_settings, $pb_integration = \null)
        {
        }
    }
    /**
     * Class WPML_String_Registration_Factory
     */
    class WPML_String_Registration_Factory
    {
        public function __construct($pb_plugin_name)
        {
        }
        /**
         * @return WPML_PB_String_Registration
         */
        public function create()
        {
        }
    }
    class WPML_PB_Reuse_Translations
    {
        public function __construct(\WPML_ST_String_Factory $string_factory)
        {
        }
        /**
         * We receive arrays of strings with this structure:
         *
         * array(
         *  'gf4544ds454sds542122sd' => array(
         *      'value'      => 'The string value',
         *      'context'    => 'the-string-context',
         *      'name'       => 'the-string-name',
         *      'id'         => 123,
         *      'package_id' => 123,
         *      'location'   => 123,
         *     ),
         *  )
         *
         * The key is the string hash.
         *
         * @param array[] $original_strings
         * @param array[] $current_strings
         * @param array[] $leftover_strings
         */
        public function find_and_reuse_translations(array $original_strings, array $current_strings, array $leftover_strings)
        {
        }
    }
    class WPML_PB_Reuse_Translations_By_Strategy extends \WPML_PB_Reuse_Translations
    {
        public function __construct(\IWPML_PB_Strategy $strategy, \WPML_ST_String_Factory $string_factory)
        {
        }
        /** @param array $strings */
        public function set_original_strings(array $strings)
        {
        }
        /**
         * @param int   $post_id
         * @param array $leftover_strings
         */
        public function find_and_reuse($post_id, array $leftover_strings)
        {
        }
        /**
         * @param int $post_id
         *
         * @return array
         */
        public function get_strings($post_id)
        {
        }
    }
    /**
     * Class WPML_PB_Integration
     */
    class WPML_PB_Integration
    {
        const MIGRATION_DONE_POST_META = '_wpml_location_migration_done';
        /**
         * WPML_PB_Integration constructor.
         *
         * @param SitePress       $sitepress
         * @param WPML_PB_Factory $factory
         */
        public function __construct(\SitePress $sitepress, \WPML_PB_Factory $factory)
        {
        }
        /**
         * @param IWPML_PB_Strategy $strategy
         */
        public function add_strategy(\IWPML_PB_Strategy $strategy)
        {
        }
        /**
         * @return WPML_PB_Integration_Rescan
         */
        public function get_rescan()
        {
        }
        /**
         * @param WPML_PB_Integration_Rescan $rescan
         */
        public function set_rescan(\WPML_PB_Integration_Rescan $rescan)
        {
        }
        public function resave_post_translation_in_shutdown(\WPML_Post_Element $post_element, $disallowed_in_shutdown = \true)
        {
        }
        /**
         * @param int|string $post_id
         * @param \WP_Post   $post
         */
        public function queue_save_post_actions($post_id, $post)
        {
        }
        /**
         * @return \WP_Post[]
         */
        public function get_save_post_queue()
        {
        }
        /**
         * @param WP_Post $post
         * @param bool $allowRegisteringPostTranslation Specifies if the string registration must be allowed for posts that are not original.
         */
        public function register_all_strings_for_translation($post, $allowRegisteringPostTranslation = \false)
        {
        }
        /**
         * Add all actions filters.
         */
        public function add_hooks()
        {
        }
        /**
         * @param int      $new_post_id
         * @param array    $fields
         * @param stdClass $job
         */
        public function cleanup_strings_after_translation_completed($new_post_id, array $fields, \stdClass $job)
        {
        }
        public function new_translation($translated_string_id)
        {
        }
        /**
         * When a Page Builder content has only a "LINK" string, it's won't be part
         * of the translation job as it's automatically converted.
         * We need to add the package to the update list (by strategies).
         *
         * @param int $new_post_id
         * @param int $original_doc_id
         */
        public function process_pb_content_with_hidden_strings_only($new_post_id, $original_doc_id)
        {
        }
        public function save_translations_to_post()
        {
        }
        /**
         * @param string $content
         * @param string $lang
         *
         * @return string
         */
        public function update_translations_in_content($content, $lang)
        {
        }
        /**
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlst-958
         * @param array                $translation_package
         * @param WP_Post|WPML_Package $post
         *
         * @return array
         */
        public function rescan(array $translation_package, $post)
        {
        }
        /**
         * @param int $post_id
         */
        public function migrate_location($post_id)
        {
        }
        /**
         * @param bool $registered
         * @param string|int $post_id
         * @param string $content
         *
         * @return bool
         */
        public function register_strings_in_content($registered, $post_id, $content)
        {
        }
        public function get_factory()
        {
        }
        public function initialize_string_clean_up(\WP_Post $post)
        {
        }
        public function clean_up_strings(\WP_Post $post)
        {
        }
        /**
         * @param WP_Post $post
         */
        public function translate_media($post)
        {
        }
    }
    class WPML_PB_String_Translation
    {
        /** @var  wpdb $wpdb */
        protected $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param array $package_data
         *
         * @return array
         */
        public function get_package_strings(array $package_data)
        {
        }
        public function remove_string(array $string_data)
        {
        }
        /**
         * @param string $string_value
         *
         * @return string
         */
        public function get_string_hash($string_value)
        {
        }
    }
    class WPML_PB_Factory
    {
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        public function get_wpml_package($package_id)
        {
        }
        public function get_string_translations(\IWPML_PB_Strategy $strategy)
        {
        }
        public function get_shortcode_parser(\WPML_PB_Shortcode_Strategy $strategy)
        {
        }
        /**
         * @param WPML_PB_Shortcode_Strategy $strategy
         * @param bool $migration_mode
         *
         * @return WPML_PB_Register_Shortcodes
         */
        public function get_register_shortcodes(\WPML_PB_Shortcode_Strategy $strategy, $migration_mode = \false)
        {
        }
        public function get_update_post($package_data, \IWPML_PB_Strategy $strategy)
        {
        }
        public function get_shortcode_content_updater(\IWPML_PB_Strategy $strategy)
        {
        }
        public function get_api_hooks_content_updater(\IWPML_PB_Strategy $strategy)
        {
        }
        public function get_package_strings_resave()
        {
        }
        public function get_handle_post_body()
        {
        }
        /**
         * @depecated Use the static methods instead of the instance.
         */
        public function get_last_translation_edit_mode()
        {
        }
        public function get_post_element($post_id)
        {
        }
    }
    /**
     * Class WPML_Page_Builders_Integration
     */
    class WPML_Page_Builders_Integration
    {
        const STRINGS_TRANSLATED_PRIORITY = 10;
        /**
         * WPML_Page_Builders_Integration constructor.
         *
         * @param WPML_Page_Builders_Register_Strings $register_strings
         * @param WPML_Page_Builders_Update_Translation $update_translation
         * @param IWPML_Page_Builders_Data_Settings $data_settings
         */
        public function __construct(\WPML_Page_Builders_Register_Strings $register_strings, \WPML_Page_Builders_Update_Translation $update_translation, \IWPML_Page_Builders_Data_Settings $data_settings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $page_builder_plugins
         *
         * @return array
         */
        public function support_required(array $page_builder_plugins)
        {
        }
        /**
         * @param \WP_Post $post
         * @param array    $package_key
         */
        public function register_pb_strings($post, $package_key)
        {
        }
        /**
         * @param string  $kind
         * @param int     $translated_post_id
         * @param WP_Post $original_post
         * @param array   $string_translations
         * @param string  $lang
         */
        public function update_translated_post($kind, $translated_post_id, \WP_Post $original_post, $string_translations, $lang)
        {
        }
        public function remove_shortcode_strings_type_filter($types)
        {
        }
    }
    class WPML_ST_PB_Plugin
    {
        function check_requirements()
        {
        }
        function is_active()
        {
        }
        function ask_to_deactivate()
        {
        }
        function disable_old_pb_notice()
        {
        }
    }
    class WPML_PB_String_Translation_By_Strategy extends \WPML_PB_String_Translation
    {
        public function __construct(\wpdb $wpdb, \WPML_PB_Factory $factory, \IWPML_PB_Strategy $strategy)
        {
        }
        /** @param int $translated_string_id */
        public function new_translation($translated_string_id)
        {
        }
        public function save_translations_to_post()
        {
        }
        /**
         * @param string $content
         * @param string $lang
         *
         * @return string
         */
        public function update_translations_in_content($content, $lang)
        {
        }
        /**
         * @param WPML_Package $package
         * @param string       $language
         */
        public function add_package_to_update_list(\WPML_Package $package, $language)
        {
        }
    }
    class WPML_PB_Package_Strings_Resave
    {
        public function __construct(\WPML_ST_String_Factory $string_factory)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         *
         * @return WPML_Package[]
         */
        public function from_element(\WPML_Post_Element $post_element)
        {
        }
    }
    class WPML_PB_Shortcode_Content_Wrapper
    {
        const WRAPPER_SHORTCODE_NAME = 'wpml_string_wrapper';
        /**
         * @param string $content
         * @param array  $valid_shortcodes
         */
        public function __construct($content, array $valid_shortcodes)
        {
        }
        public function get_wrapped_content()
        {
        }
        /**
         * @param string $content
         * @param array  $shortcodes
         *
         * @return string
         */
        public static function maybeWrap($content, array $shortcodes)
        {
        }
        /**
         * This will flag some regular text not wrapped in a shortcode.
         * e.g. "[foo] Some text not wrapped [bar]"
         *
         * @param string $content
         *
         * @return bool
         */
        public static function isStrippedContentDifferent($content)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public static function wrap($content)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public static function unwrap($content)
        {
        }
    }
    class WPML_PB_Config_Import_Shortcode
    {
        const PB_SHORTCODE_SETTING = 'pb_shortcode';
        const PB_MEDIA_SHORTCODE_SETTING = 'wpml_pb_media_shortcode';
        const PB_IDS_SHORTCODE_SETTING = 'wpml_pb_ids_shortcode';
        const TYPE_POST_IDS = 'post-ids';
        const TYPE_TAXONOMY_IDS = 'taxonomy-ids';
        public function __construct(\WPML_ST_Settings $st_settings)
        {
        }
        public function add_hooks()
        {
        }
        public function wpml_config_filter($config_data)
        {
        }
        public function get_settings()
        {
        }
        public function get_media_settings()
        {
        }
        /**
         * @return array
         */
        public function get_id_settings()
        {
        }
        public function has_settings()
        {
        }
    }
    /**
     * Class WPML_PB_Register_Shortcodes
     */
    class WPML_PB_Shortcode_Encoding
    {
        const ENCODE_TYPES_BASE64 = 'base64';
        const ENCODE_TYPES_VISUAL_COMPOSER_LINK = 'vc_link';
        const ENCODE_TYPES_ENFOLD_LINK = 'av_link';
        public function decode($string, $encoding, $encoding_condition = '')
        {
        }
        public function encode($string, $encoding)
        {
        }
    }
    /**
     * Class WPML_PB_Register_Shortcodes
     */
    class WPML_PB_Register_Shortcodes
    {
        /**
         * @param WPML_PB_String_Registration                 $handle_strings
         * @param WPML_PB_Shortcode_Strategy                  $shortcode_strategy
         * @param WPML_PB_Shortcode_Encoding                  $encoding
         * @param WPML_PB_Reuse_Translations_By_Strategy|null $reuse_translations
         */
        public function __construct(\WPML_PB_String_Registration $handle_strings, \WPML_PB_Shortcode_Strategy $shortcode_strategy, \WPML_PB_Shortcode_Encoding $encoding, \WPML_PB_Reuse_Translations_By_Strategy $reuse_translations = \null)
        {
        }
        /**
         * @param string|int    $post_id
         * @param string        $content
         * @param StringCleanUp $externalStringCleanUp
         *
         * @return bool
         */
        public function register_shortcode_strings($post_id, $content, \WPML\PB\Shortcode\StringCleanUp $externalStringCleanUp = \null)
        {
        }
        function get_updated_shortcode_string_title($string_id, $shortcode, $attribute)
        {
        }
        function get_shortcode_string_title($string_id)
        {
        }
        public function register_string($post_id, $content, $shortcode, $attribute, $editor_type)
        {
        }
    }
    class WPML_PB_Update_Shortcodes_In_Content
    {
        const LONG_STRING_THRESHOLD = 5000;
        public function __construct(\WPML_PB_Shortcode_Strategy $strategy, \WPML_PB_Shortcode_Encoding $encoding)
        {
        }
        public function update($translated_post_id, $original_post, $string_translations, $lang)
        {
        }
        public function update_content($original_content, $string_translations, $lang)
        {
        }
    }
    class WPML_PB_Shortcodes
    {
        public function __construct(\WPML_PB_Shortcode_Strategy $shortcode_strategy)
        {
        }
        public function get_shortcodes($content)
        {
        }
    }
}
namespace WPML\PB\Shortcode {
    class StringCleanUp
    {
        /**
         * StringCleanUp constructor.
         *
         * @param int                         $postId
         * @param \WPML_PB_Shortcode_Strategy $shortcodeStrategy
         */
        public function __construct($postId, \WPML_PB_Shortcode_Strategy $shortcodeStrategy)
        {
        }
        /**
         * @return array
         */
        public function get()
        {
        }
        /**
         * @param string $value
         */
        public function remove($value)
        {
        }
        public function cleanUp()
        {
        }
    }
}
namespace {
    interface IWPML_PB_Strategy
    {
        /**
         * @param \WP_Post|stdClass $post
         */
        public function register_strings($post);
        /**
         * @param int $post_id
         * @param string $content
         * @param WPML\PB\Shortcode\StringCleanUp $stringCleanUp
         *
         * @return bool - true if strings were added.
         */
        public function register_strings_in_content($post_id, $content, \WPML\PB\Shortcode\StringCleanUp $stringCleanUp);
        /**
         * @param WPML_PB_Factory $factory
         *
         */
        public function set_factory($factory);
        public function get_package_key($page_id);
        public function get_package_kind();
        public function get_update_post($package_data);
        public function get_content_updater();
        public function get_package_strings($package_data);
        public function remove_string($string_data);
        public function migrate_location($post_id, $post_content);
    }
    class WPML_PB_Shortcode_Strategy implements \IWPML_PB_Strategy
    {
        public function __construct(\WPML_Page_Builder_Settings $page_builder_settings)
        {
        }
        public function add_shortcodes($shortcode_data)
        {
        }
        public function get_shortcodes()
        {
        }
        public function get_shortcode_attributes($tag)
        {
        }
        public function get_shortcode_tag_encoding($tag)
        {
        }
        public function get_shortcode_tag_encoding_condition($tag)
        {
        }
        public function get_shortcode_tag_type($tag)
        {
        }
        public function get_shortcode_ignore_content($tag)
        {
        }
        public function get_shortcode_attribute_encoding($tag, $attribute)
        {
        }
        public function get_shortcode_attribute_type($tag, $attribute)
        {
        }
        public function get_shortcode_attribute_label($tag, $attribute)
        {
        }
        public function get_shortcode_parser()
        {
        }
        /**
         * @param \WP_Post|stdClass $post
         */
        public function register_strings($post)
        {
        }
        /**
         * @param string|int $post_id
         * @param string     $content
         * @param WPML\PB\Shortcode\StringCleanUp $stringCleanUp
         *
         * @return bool
         */
        public function register_strings_in_content($post_id, $content, \WPML\PB\Shortcode\StringCleanUp $stringCleanUp = \null)
        {
        }
        public function set_factory($factory)
        {
        }
        public function get_package_key($page_id)
        {
        }
        public function get_package_kind()
        {
        }
        public function get_update_post($package_data)
        {
        }
        public function get_content_updater()
        {
        }
        public function get_package_strings($package_data)
        {
        }
        public function remove_string($string_data)
        {
        }
        /**
         * @param int $post_id
         * @param object $post_content
         */
        public function migrate_location($post_id, $post_content)
        {
        }
    }
    class WPML_PB_API_Hooks_Strategy implements \IWPML_PB_Strategy
    {
        public function __construct($name)
        {
        }
        /**
         * @param \WP_Post|stdClass $post
         */
        public function register_strings($post)
        {
        }
        /**
         * @param string|int $post_id
         * @param string $content
         * @param WPML\PB\Shortcode\StringCleanUp $stringCleanUp
         *
         * @return bool
         */
        public function register_strings_in_content($post_id, $content, \WPML\PB\Shortcode\StringCleanUp $stringCleanUp)
        {
        }
        public function set_factory($factory)
        {
        }
        /**
         * @param int $page_id
         *
         * @return array
         */
        public function get_package_key($page_id)
        {
        }
        public function get_package_kind()
        {
        }
        public function get_update_post($package_data)
        {
        }
        public function get_content_updater()
        {
        }
        public function get_package_strings($package_data)
        {
        }
        public function remove_string($string_data)
        {
        }
        public function migrate_location($post_id, $post_content)
        {
        }
    }
    class WPML_PB_Update_API_Hooks_In_Content
    {
        public function __construct(\WPML_PB_API_Hooks_Strategy $strategy)
        {
        }
        public function update($translated_post_id, $original_post, $string_translations, $lang)
        {
        }
        /**
         * @param string $original_content
         * @param array  $string_translations
         * @param string $lang
         *
         * @return string
         */
        public function update_content($original_content, $string_translations, $lang)
        {
        }
    }
    class WPML_PB_Integration_Rescan
    {
        /**
         * @param WPML_PB_Integration $integrator
         */
        public function __construct(\WPML_PB_Integration $integrator)
        {
        }
        /**
         * Rescan post content if it does not contain packages
         *
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlst-958
         *
         * @param array    $translation_package
         * @param \WP_Post $post
         *
         * @return array
         */
        public function rescan(array $translation_package, $post)
        {
        }
    }
}
namespace WPML\PB {
    class TranslateLinks
    {
        /**
         * @param \WPML_ST_String_Factory $stringFactory
         * @param array $activeLanguages
         *
         * @return \Closure
         */
        public static function getTranslatorForString(\WPML_ST_String_Factory $stringFactory, $activeLanguages)
        {
        }
    }
}
namespace {
    class WPML_PB_Last_Translation_Edit_Mode
    {
        const POST_META_KEY = '_last_translation_edit_mode';
        const NATIVE_EDITOR = 'native-editor';
        const TRANSLATION_EDITOR = 'translation-editor';
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public static function is_native_editor($post_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public static function is_translation_editor($post_id)
        {
        }
        /**
         * @param int $post_id
         */
        public static function set_native_editor($post_id)
        {
        }
        /**
         * @param int $post_id
         */
        public static function set_translation_editor($post_id)
        {
        }
    }
}
namespace WPML\PB {
    /**
     * Class ShortCodesInGutenbergBlocks
     * @package WPML\PB
     *
     * This class is to handle an edge case when there is only one Gutenberg block
     * that contains one or more shortcodes.
     * In this case we need to force the Gutenberg processing as there will be
     * no Gutenberg strings and only shortcode strings.
     *
     */
    class ShortCodesInGutenbergBlocks
    {
        const FORCED_GUTENBERG = 'Forced-Gutenberg';
        public static function recordPackage(\WPML_PB_String_Translation_By_Strategy $strategy, $strategyKind, \WPML_Package $package, $language)
        {
        }
        public static function fixupPackage($package_data)
        {
        }
        public static function normalizePackages(array $packagesToUpdate)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_PB_String_Registration
     */
    class WPML_PB_String_Registration
    {
        /**
         * WPML_PB_String_Registration constructor.
         *
         * @param IWPML_PB_Strategy           $strategy
         * @param WPML_ST_String_Factory      $string_factory
         * @param WPML_ST_Package_Factory     $package_factory
         * @param WPML_Translate_Link_Targets $translate_link_targets
         * @param callable                    $set_link_translations
         * @param bool                        $migration_mode
         */
        public function __construct(\IWPML_PB_Strategy $strategy, \WPML_ST_String_Factory $string_factory, \WPML_ST_Package_Factory $package_factory, \WPML_Translate_Link_Targets $translate_link_targets, callable $set_link_translations, $migration_mode = \false)
        {
        }
        /**
         * @param int    $post_id
         * @param string $content
         * @param string $name
         *
         * @return null|int
         */
        public function get_string_id_from_package($post_id, $content, $name = '')
        {
        }
        public function get_string_title($string_id)
        {
        }
        /**
         * Register string.
         *
         * @param int          $post_id  Post Id.
         * @param string|mixed $content  String content.
         * @param string       $type     String editor type.
         * @param string       $title    String title.
         * @param string       $name     String name.
         * @param int          $location String location.
         * @param string       $wrap_tag String wrap tag.
         *
         * @return null|integer $string_id
         */
        public function register_string($post_id, $content = '', $type = 'LINE', $title = '', $name = '', $location = 0, $wrap_tag = '')
        {
        }
    }
    /**
     * Interface IWPML_Page_Builders_Data_Settings
     */
    interface IWPML_Page_Builders_Data_Settings
    {
        /**
         * @return string
         */
        public function get_meta_field();
        /**
         * @return string
         */
        public function get_node_id_field();
        /**
         * @return array
         */
        public function get_fields_to_copy();
        /**
         * @return array
         */
        public function get_fields_to_save();
        /**
         * @param mixed $data
         *
         * @return array
         */
        public function convert_data_to_array($data);
        /**
         * @param array $data
         *
         * @return mixed
         */
        public function prepare_data_for_saving(array $data);
        /**
         * @return string
         */
        public function get_pb_name();
        public function add_hooks();
        /**
         * @param int $postId
         *
         * @return bool
         */
        public function is_handling_post($postId);
    }
    class WPML_Page_Builders_Update
    {
        /** @var IWPML_Page_Builders_Data_Settings */
        protected $data_settings;
        public function __construct(\IWPML_Page_Builders_Data_Settings $data_settings)
        {
        }
        /**
         * @param int $post_id
         *
         * @return array
         */
        public function get_converted_data($post_id)
        {
        }
        /**
         * @param int   $post_id
         * @param int   $original_post_id
         * @param array $converted_data
         */
        public function save($post_id, $original_post_id, $converted_data)
        {
        }
    }
    /**
     * Class WPML_Page_Builders_Update_Translation
     */
    abstract class WPML_Page_Builders_Update_Translation extends \WPML_Page_Builders_Update
    {
        const TRANSLATION_COMPLETE = 10;
        /**
         * @var IWPML_Page_Builders_Translatable_Nodes
         */
        protected $translatable_nodes;
        public function __construct(\IWPML_Page_Builders_Translatable_Nodes $translatable_nodes, \IWPML_Page_Builders_Data_Settings $data_settings)
        {
        }
        /**
         * @param int               $translated_post_id
         * @param \WP_Post|stdClass $original_post
         * @param array             $string_translations
         * @param string            $lang
         */
        public function update($translated_post_id, $original_post, $string_translations, $lang)
        {
        }
        /**
         * @param WPML_PB_String $string
         *
         * @return WPML_PB_String
         */
        protected function get_translation(\WPML_PB_String $string)
        {
        }
        protected abstract function update_strings_in_modules(array &$data_array);
        protected abstract function update_strings_in_node($node_id, $settings);
    }
    /**
     * Class IWPML_Page_Builders_Module
     */
    interface IWPML_Page_Builders_Module
    {
        /**
         * @param string|int $node_id
         * @param mixed $element
         * @param WPML_PB_String[] $strings
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $element, $strings);
        /**
         * @param string|int $node_id
         * @param mixed $element
         * @param WPML_PB_String $string
         *
         * @return array|null
         */
        public function update($node_id, $element, \WPML_PB_String $string);
    }
    interface IWPML_Page_Builders_Translatable_Nodes
    {
        /**
         * @param string|int $node_id
         * @param array|stdClass $element
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $element);
        /**
         * @param string|int $node_id
         * @param array|stdClass $element
         * @param WPML_PB_String $string
         *
         * @return mixed
         */
        public function update($node_id, $element, \WPML_PB_String $string);
        /**
         * @param string $node_id
         * @param array $field
         * @param mixed $settings
         *
         * @return mixed
         */
        public function get_string_name($node_id, $field, $settings);
        public function initialize_nodes_to_translate();
    }
    /**
     * Class WPML_Page_Builders_Register_Strings
     */
    abstract class WPML_Page_Builders_Register_Strings
    {
        /**
         * @var IWPML_Page_Builders_Data_Settings
         */
        protected $data_settings;
        public function __construct(\IWPML_Page_Builders_Translatable_Nodes $translatable_nodes, \IWPML_Page_Builders_Data_Settings $data_settings, \WPML_PB_String_Registration $string_registration, \WPML_PB_Reuse_Translations_By_Strategy $reuse_translations = \null)
        {
        }
        /**
         * @param WP_Post $post
         * @param array $package
         */
        public function register_strings(\WP_Post $post, array $package)
        {
        }
        /**
         * @param string $node_id
         * @param mixed $element
         * @param array $package
         */
        protected function register_strings_for_node($node_id, $element, array $package)
        {
        }
        /**
         * @param array $data_array
         * @param array $package
         */
        protected abstract function register_strings_for_modules(array $data_array, array $package);
    }
    /**
     * Class WPML_Page_Builders_Defined
     */
    class WPML_Page_Builders_Defined
    {
        public function __construct()
        {
        }
        public function has($page_builder)
        {
        }
        /**
         * @param array $components
         *
         * @return array
         */
        public function add_components($components)
        {
        }
        public function init_settings()
        {
        }
        /**
         * @return array
         */
        public function get_settings()
        {
        }
    }
    class WPML_PB_String
    {
        /**
         * WPML_PB_String constructor.
         *
         * @param string $value       String value.
         * @param string $name        String name.
         * @param string $title       String title.
         * @param string $editor_type Editor type used.
         * @param string $wrap_tag    String wrap tag.
         */
        public function __construct($value, $name, $title, $editor_type, $wrap_tag = '')
        {
        }
        /**
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @param string $value
         */
        public function set_value($value)
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_editor_type()
        {
        }
        /**
         * Get string wrap tag.
         *
         * @return string
         */
        public function get_wrap_tag()
        {
        }
    }
    class WPML_PB_Update_Post
    {
        public function __construct($wpdb, $sitepress, $package_data, \IWPML_PB_Strategy $strategy)
        {
        }
        public function update()
        {
        }
        /**
         * @param string $content
         * @param string $lang
         *
         * @return string
         */
        public function update_content($content, $lang)
        {
        }
    }
    /**
     * Class WPML_Page_Builders_App
     */
    class WPML_Page_Builders_App
    {
        /**
         * WPML_Page_Builders_App constructor.
         *
         * @param WPML_Page_Builders_Defined $page_builder_plugins
         */
        public function __construct(\WPML_Page_Builders_Defined $page_builder_plugins)
        {
        }
        public function add_hooks()
        {
        }
        public function load_integration()
        {
        }
        public function add_components($components)
        {
        }
    }
}
namespace WPML\PB\AutoUpdate {
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        const HASH_SEP = '-';
        public function __construct(\WPML_PB_Integration $pbIntegration, \WPML_Translation_Element_Factory $elementFactory, \WPML_Page_Builders_Page_Built $pageBuilt)
        {
        }
        public function add_hooks()
        {
        }
        public function isTmLoaded()
        {
        }
        /**
         * @param bool     $isDelegated
         * @param int      $originalPostId
         * @param callable $statusesUpdater
         *
         * @return bool
         */
        public function enqueueTranslationStatusUpdate($isDelegated, $originalPostId, $statusesUpdater)
        {
        }
        /**
         * @param string   $content
         * @param \WP_Post $post
         *
         * @return string
         */
        public function getMd5ContentFromPackageStrings($content, $post)
        {
        }
        /**
         * @param int $postId
         *
         * @return \WPML_Package[]
         */
        public static function getPackages($postId)
        {
        }
        /**
         * We need to update translation statuses after string registration
         * to make sure we build the content hash with the new strings.
         */
        public function afterRegisterAllStringsInShutdown()
        {
        }
    }
    class Settings
    {
        /**
         * This is part of the "Translation Auto-Update" feature
         * The "Translation Auto-Update" feature will be released in the next major version.
         * We need a way for users to allow disabling it quickly, if necessary.
         *
         * @return bool
         */
        public static function isEnabled()
        {
        }
    }
    class TranslationStatus
    {
        /**
         * @param WPML_Post_Element $element
         *
         * @return int|null
         */
        public static function get(\WPML_Post_Element $element)
        {
        }
    }
}
namespace WPML\PB\Config {
    class Storage
    {
        const OPTION_GROUP = 'api-pb-config';
        public function __construct(\WPML\WP\OptionManager $optionManager, $pbKey)
        {
        }
        public function get()
        {
        }
        public function update(array $pbConfig)
        {
        }
    }
    class Hooks implements \IWPML_Action
    {
        const PRIORITY_AFTER_DEFAULT = 20;
        public function __construct(\WPML\PB\Config\Parser $parser, \WPML\PB\Config\Storage $storage, $translatableWidgetsHook)
        {
        }
        public function add_hooks()
        {
        }
        public function extractConfig(array $allConfig)
        {
        }
        /**
         * @param array $widgets
         *
         * @return array
         */
        public function extendTranslatableWidgets(array $widgets)
        {
        }
    }
    class Parser
    {
        public function __construct($configRoot, $defaultConditionKey)
        {
        }
        /**
         * Receives a raw config array (from XML) and convert it into
         * a page builder configuration array.
         *
         * @see WPML_Elementor_Translatable_Nodes::get_nodes_to_translate()
         *
         * @param array $allConfig
         *
         * @return array
         */
        public function extract(array $allConfig)
        {
        }
        /**
         * If a sequence has only one element, we will wrap it
         * in order to have the same data shape as for multiple elements.
         *
         * @param array $partialConfig
         *
         * @return array
         */
        public function normalize(array $partialConfig)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Action_Loader_Factory
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|callable|null
         */
        public function create();
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Backend_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Frontend_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
}
namespace WPML\PB\Config {
    abstract class Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return \IWPML_Action
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        protected abstract function getPbData($key);
    }
}
namespace WPML\PB\GutenbergCleanup {
    class Package
    {
        /**
         * @param int $postId
         *
         * @return \WPML_Package|null
         */
        public static function get($postId)
        {
        }
        /**
         * @param \WPML_Package|null $package
         */
        public static function delete($package)
        {
        }
    }
    class ShortcodeHooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param int            $post_ID
         * @param \WP_Post|mixed $post
         */
        public function removeGutenbergFootprint($post_ID, $post)
        {
        }
    }
}
namespace WPML\PB\Shortcode {
    class AdjustIdsHooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function __construct(\WPML_PB_Config_Import_Shortcode $config)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param false|string $bool
         * @param string       $tag
         * @param array        $attr
         * @param array        $m
         *
         * @return false|string
         */
        public function convertAttributeIds($bool, $tag, $attr, $m)
        {
        }
    }
}
namespace {
    class WPML_Page_Builders_Media_Usage
    {
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate, \WPML_Media_Usage_Factory $media_usage_factory)
        {
        }
        /** @param int $post_id */
        public function update($post_id)
        {
        }
    }
    interface IWPML_PB_Media_Update
    {
        /**
         * @param WP_Post $post
         */
        public function translate($post);
    }
    class WPML_Page_Builders_Update_Media implements \IWPML_PB_Media_Update
    {
        /** @var IWPML_PB_Media_Nodes_Iterator $node_iterator */
        protected $node_iterator;
        /** @var WPML_Page_Builders_Media_Usage|null $media_usage */
        protected $media_usage;
        public function __construct(\WPML_Page_Builders_Update $pb_update, \WPML_Translation_Element_Factory $element_factory, \IWPML_PB_Media_Nodes_Iterator $node_iterator, \WPML_Page_Builders_Media_Usage $media_usage = \null)
        {
        }
        /**
         * @param WP_Post $post
         */
        public function translate($post)
        {
        }
    }
    class WPML_Page_Builders_Media_Shortcodes_Update implements \IWPML_PB_Media_Update
    {
        public function __construct(\WPML_Translation_Element_Factory $element_factory, \WPML_Page_Builders_Media_Shortcodes $media_shortcodes, \WPML_Page_Builders_Media_Usage $media_usage)
        {
        }
        /**
         * @param WP_Post $post
         */
        public function translate($post)
        {
        }
    }
    interface IWPML_PB_Media_Update_Factory
    {
        /** @return IWPML_PB_Media_Update */
        public function create();
    }
    class WPML_Page_Builders_Media_Shortcodes_Update_Factory implements \IWPML_PB_Media_Update_Factory
    {
        public function __construct(\WPML_PB_Config_Import_Shortcode $page_builder_config_import)
        {
        }
        public function create()
        {
        }
    }
    class WPML_Page_Builders_Media_Shortcodes
    {
        const TYPE_URL = 'media-url';
        const TYPE_IDS = 'media-ids';
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate, array $config)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function translate($content)
        {
        }
        /**
         * @param string $content
         *
         * @return bool
         */
        public function has_media_shortcode($content)
        {
        }
        /**
         * @param string $target_lang
         *
         * @return self
         */
        public function set_target_lang($target_lang)
        {
        }
        /**
         * @param string $source_lang
         *
         * @return self
         */
        public function set_source_lang($source_lang)
        {
        }
    }
    class WPML_Page_Builders_Media_Translate
    {
        /** @var WPML_Media_Image_Translate $image_translate */
        protected $image_translate;
        /** @var array $translated_urls */
        protected $translated_urls = array();
        /** @var (WP_Post|null)[] $translated_posts */
        protected $translated_posts = array();
        public function __construct(\WPML_Translation_Element_Factory $element_factory, \WPML_Media_Image_Translate $image_translate)
        {
        }
        /**
         * @param string $url
         * @param string $lang
         * @param string $source_lang
         *
         * @return string
         */
        public function translate_image_url($url, $lang, $source_lang)
        {
        }
        /**
         * @param int    $id
         * @param string $lang
         *
         * @return int
         */
        public function translate_id($id, $lang)
        {
        }
        public function reset_translated_ids()
        {
        }
        /** @return array */
        public function get_translated_ids()
        {
        }
    }
    class WPML_Page_Builders_Media_Hooks implements \IWPML_Action
    {
        /**
         * WPML_Page_Builders_Media_Hooks constructor.
         *
         * @param IWPML_PB_Media_Update_Factory $media_update_factory
         * @param string                        $page_builder_slug
         */
        public function __construct(\IWPML_PB_Media_Update_Factory $media_update_factory, $page_builder_slug)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param IWPML_PB_Media_Update[] $updaters
         *
         * @return IWPML_PB_Media_Update[]
         */
        public function add_media_updater($updaters)
        {
        }
        /**
         * @param string  $content
         * @param WP_Post $post
         *
         * @return string
         */
        public function add_package_strings_content($content, $post)
        {
        }
    }
    interface IWPML_PB_Media_Nodes_Iterator
    {
        public function translate($data, $lang, $source_lang);
    }
}
namespace WPML\Compatibility {
    abstract class BaseDynamicContent implements \IWPML_DIC_Action, \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Add filters and actions.
         */
        public function add_hooks()
        {
        }
        /**
         * Sets dynamic content to be translatable.
         *
         * @param string $string   The decoded string so far.
         * @param string $encoding The encoding used.
         *
         * @return string|array
         */
        public abstract function decode_dynamic_content($string, $encoding);
        /**
         * Rebuilds dynamic content with translated strings.
         *
         * @param string|array $string   The field array or string.
         * @param string       $encoding The encoding used.
         *
         * @return string
         */
        public abstract function encode_dynamic_content($string, $encoding);
        /**
         * Check if a certain field contains dynamic content.
         *
         * @param string $string The string to check.
         *
         * @return bool
         */
        protected abstract function is_dynamic_content($string);
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return array
         */
        protected abstract function decode_field($string);
        /**
         * Encode a dynamic-content field.
         *
         * @param array $field The field to encode.
         *
         * @return string
         */
        protected abstract function encode_field($field);
    }
}
namespace {
    /**
     * Class WPML_Compatibility_Theme_Enfold
     */
    class WPML_Compatibility_Theme_Enfold
    {
        /**
         * @param TranslationManagement $translation_management
         */
        public function __construct(\TranslationManagement $translation_management)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * Enfold's page builder is keeping the content in the custom field "_aviaLayoutBuilderCleanData" (maybe to prevent the content
         * from being altered by another plugin). The standard post content will be displayed only if the field
         * "_aviaLayoutBuilder_active" or "_avia_builder_shortcode_tree" does not exist.
         *
         * "_aviaLayoutBuilder_active" and "_avia_builder_shortcode_tree" fields should be set to "copy" in wpml-config.xml.
         *
         * @param int     $post_id
         * @param WP_Post $post
         */
        public function wp_insert_post_action($post_id, $post)
        {
        }
        /**
         * @param string $content
         * @param int    $post_id
         *
         * @return string
         */
        public function get_content_from_custom_field($content, $post_id)
        {
        }
        /**
         * @param int    $master_post_id
         * @param string $lang
         * @param array  $post_array
         * @param int    $id
         */
        function sync_duplicate($master_post_id, $lang, $post_array, $id)
        {
        }
        /**
         * Enfold/Avia replaces "'" with "’" in enfold/onfig-templatebuilder/avia-template-builder/assets/js/avia-builder.js:1312
         * We just follow the same replacement pattern for string translations
         *
         * @param null|string $translation
         * @param bool        $is_attribute
         *
         * @return null|string
         */
        public function replace_single_quotes($translation, $is_attribute)
        {
        }
        /**
         * @param bool    $isBuiltWithShortcodes
         * @param WP_Post $post
         *
         * @return bool
         */
        public function isPostBuiltWithShortcodes($isBuiltWithShortcodes, \WP_Post $post)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice
    {
        /**
         * WPML_Admin_Notification constructor.
         *
         * @param int|string $id
         * @param string     $text
         * @param string     $group
         */
        public function __construct($id, $text, $group = 'default')
        {
        }
        public function add_action(\WPML_Notice_Action $action)
        {
        }
        public function add_exclude_from_page($page)
        {
        }
        public function add_restrict_to_page($page)
        {
        }
        /** @param int $user_id */
        public function add_user_restriction($user_id)
        {
        }
        /** @param int $user_id */
        public function remove_user_restriction($user_id)
        {
        }
        /** @return array */
        public function get_restricted_user_ids()
        {
        }
        /** @return bool */
        public function is_user_restricted()
        {
        }
        /** @return bool */
        public function is_for_current_user()
        {
        }
        /**
         * @return bool
         */
        public function is_user_cap_allowed()
        {
        }
        public function can_be_dismissed()
        {
        }
        public function can_be_dismissed_for_different_text()
        {
        }
        public function can_be_hidden()
        {
        }
        /**
         * @return bool
         */
        public function can_be_collapsed()
        {
        }
        /**
         * As the notice is supposed to be serialized and stored into the DB,
         * the callback should be only a function or a static method.
         *
         * Before to use a callback, please check the existing options with:
         * - add_exclude_from_page
         * - add_restrict_to_page
         * - add_user_restriction
         * - add_capability_check
         *
         * @param callable $callback
         */
        public function add_display_callback($callback)
        {
        }
        public function add_capability_check(array $cap)
        {
        }
        public function get_display_callbacks()
        {
        }
        /**
         * @return array<\WPML_Notice_Action>
         */
        public function get_actions()
        {
        }
        public function get_css_classes()
        {
        }
        /**
         * @param string|array $css_classes
         */
        public function set_css_classes($css_classes)
        {
        }
        public function get_exclude_from_pages()
        {
        }
        /**
         * @return string
         */
        public function get_group()
        {
        }
        /**
         * @return int|string
         */
        public function get_id()
        {
        }
        public function set_restrict_to_page_prefixes(array $page_prefixes)
        {
        }
        /**
         * @return array
         */
        public function get_restrict_to_page_prefixes()
        {
        }
        public function get_restrict_to_pages()
        {
        }
        public function set_restrict_to_screen_ids(array $screens)
        {
        }
        /**
         * @return array
         */
        public function get_restrict_to_screen_ids()
        {
        }
        public function get_nonce_action()
        {
        }
        /**
         * @return string
         */
        public function get_text()
        {
        }
        public function get_css_class_types()
        {
        }
        /**
         * @return string
         */
        public function get_collapsed_text()
        {
        }
        /**
         * Use this to set the look of the notice.
         * WordPress recognize these values:
         * - notice-error
         * - notice-warning
         * - notice-success
         * - notice-info
         * You can use the above values with or without the "notice-" prefix:
         * the prefix will be added automatically in the HTML, if missing.
         *
         * @see https://codex.wordpress.org/Plugin_API/Action_Reference/admin_notices for more details
         *
         * @param string|array $types Accepts either a space separated values string, or an array of values.
         * @return WPML_Notice
         */
        public function set_css_class_types($types)
        {
        }
        /**
         * @param bool $dismissible
         */
        public function set_dismissible($dismissible)
        {
        }
        public function set_exclude_from_pages(array $pages)
        {
        }
        public function set_hide_if_notice_exists($notice_id, $notice_group = \null)
        {
        }
        public function get_hide_if_notice_exists()
        {
        }
        /**
         * @param bool $hideable
         */
        public function set_hideable($hideable)
        {
        }
        /**
         * @param bool $collapsable
         */
        public function set_collapsable($collapsable)
        {
        }
        /**
         * @param string $action
         */
        public function set_nonce_action($action)
        {
        }
        /**
         * @param string $collapsed_text
         */
        public function set_collapsed_text($collapsed_text)
        {
        }
        public function set_restrict_to_pages(array $pages)
        {
        }
        public function reset_dismiss()
        {
        }
        public function must_reset_dismiss()
        {
        }
        public function is_different(\WPML_Notice $other_notice)
        {
        }
        /**
         * Set notice to only display once.
         *
         * @param bool $flash
         *
         * @return WPML_Notice
         * @since 4.1.0
         */
        public function set_flash($flash = \true)
        {
        }
        /**
         * @return bool
         * @since 4.1.0
         */
        public function is_flash()
        {
        }
        /**
         * @return bool
         */
        public function should_be_text_only()
        {
        }
        /**
         * @param bool $text_only
         */
        public function set_text_only($text_only)
        {
        }
        /**
         * @param int|string $id
         * @param string     $text
         * @param string     $group
         *
         * @return WPML_Notice
         */
        public static function make($id, $text, $group = 'default')
        {
        }
    }
    class WPML_Compatibility_Divi_Notice extends \WPML_Notice
    {
        const ID = 'wpml-compatibility-divi-editor-warning';
        const GROUP = 'wpml-compatibility-divi';
        public function __construct()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_AJAX_Action extends \IWPML_Action
    {
    }
}
namespace WPML\Compatibility\Divi {
    class Builder implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
        public function switch_to_user_language($locale)
        {
        }
    }
    class DisplayConditions implements \IWPML_Frontend_Action
    {
        const BASE64_EMPTY_ARRAY = 'W10=';
        public function add_hooks()
        {
        }
        /**
         * @param array $atts
         * @return array
         */
        public function translateAttributes($atts)
        {
        }
    }
    class TinyMCE implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $config
         *
         * @return array
         */
        public function filterEditorAutoTags($config)
        {
        }
    }
    class ThemeBuilder implements \IWPML_Action
    {
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Add filters and actions.
         */
        public function add_hooks()
        {
        }
        /**
         * Access the global post types array to tweak the settings for layouts
         */
        public function make_layouts_editable()
        {
        }
        /**
         * Translate theme builder layout ids in the frontend.
         *
         * @param string $value   The layout id.
         * @param int    $post_id The post it belongs to.
         * @param string $key     The meta key we are handling.
         * @param bool   $single  Fetch a single row or an array.
         * @return string
         */
        public function translate_layout_ids($value, $post_id, $key, $single)
        {
        }
        /**
         * Remove the 'View' link because you can't view layouts alone.
         *
         * @param string $link   The complete link.
         * @param string $text   The text to link.
         * @param object $job    The corresponding translation job.
         * @param string $prefix The prefix of the element type.
         * @param string $type   The element type.
         *
         * @return string
         */
        public function document_view_layout_link($link, $text, $job, $prefix, $type)
        {
        }
    }
}
namespace WPML\Compatibility\Divi\Hooks {
    class Editor implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
    class DomainsBackendEditor implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function displayNotice()
        {
        }
    }
    class GutenbergUpdate implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param string   $builtWithShortcodes
         * @param \WP_Post $post
         *
         * @return bool
         */
        public static function isPostBuiltWithShortcodes($builtWithShortcodes, $post)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Deferred_Action_Loader extends \IWPML_Action_Loader_Factory
    {
        /**
         * @return string
         */
        public function get_load_action();
    }
}
namespace WPML\Compatibility\Divi {
    class ThemeBuilderFactory implements \IWPML_Deferred_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    class DiviOptionsEncoding implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        const CHARS_ENCODED = ['%22', '%91', '%93'];
        const CHARS_DECODED = ['"', '[', ']'];
        const DELIMITER = '_';
        const TRANSLATABLE_KEYS = ['value', 'link_url', 'link_text'];
        public function add_hooks()
        {
        }
        public function decode_divi_options($string, $encoding)
        {
        }
        public function encode_divi_options($string, $encoding)
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Divi implements \IWPML_DIC_Action, \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        const REGEX_REMOVE_OPENING_PARAGRAPH = '/(<p>[\\n\\r]*)([\\n\\r]{1}\\[\\/et_)/m';
        const REGEX_REMOVE_CLOSING_PARAGRAPH = '/(\\[et_.*\\][\\n\\r]{1})([\\n\\r]*<\\/p>)/m';
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function display_warning_notice()
        {
        }
        /**
         * These actions require the custom widget area to be initialized.
         *
         * @param array $actions
         * @return array
         */
        public function load_builder_for_ajax_actions($actions)
        {
        }
        public function load_resources_if_they_are_required()
        {
        }
        /**
         * The global layout is not properly extracted from the page
         * because it adds <p> tags either not opened or not closed.
         *
         * See the global content below as an example:
         *
         * [et_pb_section prev_background_color="#000000" next_background_color="#000000"][et_pb_text]
         *
         * </p>
         * <p>Global text 1 EN5</p>
         * <p>
         *
         * [/et_pb_text][/et_pb_section]
         *
         * We also need to remove `prev_background` and `next_background` attributes which are added from the page.
         *
         * @param string $content
         * @param int    $post_id
         */
        public function cleanup_global_layout_content($content, $post_id)
        {
        }
        public function should_handle_shortcode_content($handle_content, $shortcode)
        {
        }
        /**
         * Remove the `_et_pb_old_content` meta field from translation jobs, except for products.
         *
         * @param array  $fields  Array of fields to translate.
         * @param object $post_id The ID of the post being translated.
         *
         * @return array
         */
        public function remove_old_content_from_translation($fields, $post_id)
        {
        }
        /**
         * Remove the `_et_pb_old_content` meta field from words count, except for products.
         *
         * @param array  $fields_to_count Array of custom fields to count.
         * @param object $post_id         The ID of the post for which we are counting the words.
         *
         * @return array
         */
        public function remove_old_content_from_words_count($fields_to_count, $post_id)
        {
        }
    }
}
namespace WPML\Compatibility\Divi {
    /**
     * Divi replaces double quotes with %22 when saving shortcode attributes.
     * ATE needs valid HTML so we temporarily decode the double quotes.
     * When we receive the translation we undo the change.
     *
     * @package WPML\Compatibility\Divi
     */
    class DoubleQuotes implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param string $string
         * @param string $encoding
         *
         * @return string
         */
        public function decode($string, $encoding)
        {
        }
        /**
         * @param string $string
         * @param string $encoding
         *
         * @return string
         */
        public function encode($string, $encoding)
        {
        }
    }
    class Search implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        public function add_language_form_field()
        {
        }
    }
    class WooShortcodes implements \IWPML_Frontend_Action
    {
        const WOO_SHORTCODES = ['et_pb_wc_description', 'et_pb_wc_title'];
        public function add_hooks()
        {
        }
        /**
         * @param array  $shortcodeAttrs
         * @param array  $attrs
         * @param string $slug
         *
         * @return array
         */
        public function translateAttributes($shortcodeAttrs, $attrs, $slug)
        {
        }
    }
    class DynamicContent extends \WPML\Compatibility\BaseDynamicContent
    {
        const ENCODED_CONTENT_START = '@ET-DC@';
        const ENCODED_CONTENT_END = '@';
        /** @var array */
        protected $positions = ['before', 'after'];
        /**
         * Sets $positions dynamic content to be translatable.
         *
         * @param string $string   The decoded string so far.
         * @param string $encoding The encoding used.
         *
         * @return string|array
         */
        public function decode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Rebuilds dynamic content with translated strings.
         *
         * @param string|array $string   The field array or string.
         * @param string       $encoding The encoding used.
         *
         * @return string
         */
        public function encode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return bool
         */
        protected function is_dynamic_content($string)
        {
        }
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return array
         */
        protected function decode_field($string)
        {
        }
        /**
         * Encode a dynamic-content field.
         *
         * @param array $field The field to encode.
         *
         * @return string
         */
        protected function encode_field($field)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_AJAX_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
}
namespace WPML\PB\SiteOrigin {
    class HandleCustomFieldsFactory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return \WPML_PB_Handle_Custom_Fields
         */
        public function create()
        {
        }
    }
    class RegisterStrings extends \WPML_Page_Builders_Register_Strings
    {
        public function register_strings_for_modules(array $data_array, array $package)
        {
        }
    }
}
namespace WPML\PB\SiteOrigin\Config {
    class Factory extends \WPML\PB\Config\Factory
    {
        const DATA = ['configRoot' => 'siteorigin-widgets', 'defaultConditionKey' => '_type', 'pbKey' => 'siteorigin', 'translatableWidgetsHook' => 'wpml_siteorigin_modules_to_translate'];
        /**
         * @inheritDoc
         */
        protected function getPbData($key)
        {
        }
    }
}
namespace WPML\PB\SiteOrigin {
    class DataSettings implements \IWPML_Page_Builders_Data_Settings
    {
        /**
         * @return string
         */
        public function get_meta_field()
        {
        }
        /**
         * @return string
         */
        public function get_node_id_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_copy()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function convert_data_to_array($data)
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function prepare_data_for_saving(array $data)
        {
        }
        /**
         * @return string
         */
        public function get_pb_name()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_save()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * By letting WPML think `nav_menu` is translatable, it will filter out items in other languages.
         * To avoid interfeering with anything else, we do this only for the SiteOrigin menu widget.
         *
         * @param bool|null $result
         * @param string    $tax
         *
         * @return bool|null
         */
        public function filterMenus($result, $tax)
        {
        }
        /**
         * @param array $widgets
         *
         * @return array
         */
        public function removeWidgets($widgets)
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public function is_handling_post($postId)
        {
        }
        /**
         * @param string $form
         *
         * @return string
         */
        public function removeLanguageSelector($form)
        {
        }
    }
    class Factory
    {
        public function create()
        {
        }
    }
    class TranslatableNodes implements \IWPML_Page_Builders_Translatable_Nodes
    {
        const SETTINGS_FIELD = 'panels_info';
        const CHILDREN_FIELD = 'panels_data';
        const WRAPPING_MODULES = ['SiteOrigin_Panels_Widgets_Layout'];
        /**
         * Get translatable node.
         *
         * @param string|int $node_id  Node id.
         * @param array      $settings Node settings.
         *
         * @return \WPML_PB_String[]
         */
        public function get($node_id, $settings)
        {
        }
        /**
         * Update translatable node.
         *
         * @param string          $node_id  Node id.
         * @param array           $settings Node settings.
         * @param \WPML_PB_String $string   String object.
         *
         * @return mixed
         */
        public function update($node_id, $settings, \WPML_PB_String $string)
        {
        }
        /**
         * Get string name.
         *
         * @param string $node_id  Node id.
         * @param array  $field    Page builder field.
         * @param array  $settings Node settings.
         *
         * @return string
         */
        public function get_string_name($node_id, $field, $settings)
        {
        }
        public function initialize_nodes_to_translate()
        {
        }
        /**
         * @param array $module
         *
         * @return bool
         */
        public static function isWrappingModule($module)
        {
        }
    }
    class UpdateTranslation extends \WPML_Page_Builders_Update_Translation
    {
        /** @param array $data_array */
        public function update_strings_in_modules(array &$data_array)
        {
        }
        /**
         * @param string $node_id
         * @param array  $settings
         *
         * @return mixed
         */
        public function update_strings_in_node($node_id, $settings)
        {
        }
    }
}
namespace WPML\PB\SiteOrigin\Modules {
    abstract class ModuleWithItems implements \IWPML_Page_Builders_Module
    {
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_title($field);
        /** @return array */
        protected abstract function get_fields();
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_editor_type($field);
        /**
         * @return string
         */
        public abstract function get_items_field();
        /**
         * @param mixed $settings
         *
         * @return array
         */
        public abstract function get_items($settings);
        /**
         * @param string|int $node_id
         * @param mixed $settings
         * @param \WPML_PB_String[] $strings
         *
         * @return \WPML_PB_String[]
         */
        public function get($node_id, $settings, $strings)
        {
        }
        /**
         * @param string|int $node_id
         * @param mixed $element
         * @param \WPML_PB_String $string
         *
         * @return array
         */
        public function update($node_id, $element, \WPML_PB_String $string)
        {
        }
        /**
         * @param string $key
         *
         * @return array
         */
        public function get_field_path($key)
        {
        }
    }
    class ModuleWithItemsFromConfig extends \WPML\PB\SiteOrigin\Modules\ModuleWithItems
    {
        /**
         * @param string $itemsField
         * @param array  $config
         */
        public function __construct($itemsField, array $config)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_title($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_fields()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_editor_type($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_items_field()
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function get_items($settings)
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Plugin_Visual_Composer_Grid_Hooks implements \IWPML_Action
    {
        public function __construct(\IWPML_Current_Language $current_language, \WPML_Translation_Element_Factory $element_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string|array $string
         * @param string       $encoding
         * @param string       $encoded_string
         *
         * @return string|array
         */
        function vc_grid_link_decode($string, $encoding, $encoded_string)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function vc_shortcode_content_filter($content)
        {
        }
    }
}
namespace WPML\Compatibility\WPBakery {
    class Styles implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        const META_CUSTOM_CSS = ['_wpb_shortcodes_custom_css', '_wpb_post_custom_css'];
        public function __construct(\WPML_Custom_Field_Setting_Factory $metaSettingFactory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         */
        public function copyCssFromOriginal($postId)
        {
        }
        /**
         * As a general rule, we will copy the CSS meta field only once, so
         * it will work fine and independently if the translation is done
         * with the native WP editor. Otherwise, we will programmatically
         * copy the CSS meta to the translation.
         *
         * This adjustment code is required since we are changing the original
         * setting from "copy" to "copy_once" (it will also be updated on the
         * remote config file).
         */
        public function adjustMetaSetting()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Compatibility_Plugin_Visual_Composer
     *
     * @author OnTheGoSystems
     */
    class WPML_Compatibility_Plugin_Visual_Composer
    {
        /**
         * WPML_Compatibility_Plugin_Visual_Composer constructor.
         *
         * @param WPML_Debug_BackTrace $debug_backtrace
         */
        public function __construct(\WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $text
         *
         * @return string
         */
        public function suspend_vc_widget_translation($text)
        {
        }
        /**
         * @param string $text
         *
         * @return mixed
         */
        public function restore_widget_translation($text)
        {
        }
        function vc_safe_encode($string, $encoding)
        {
        }
        function vc_safe_decode($string, $encoding, $encoded_string)
        {
        }
    }
    /**
     * Class WPML_Beaver_Builder_Translatable_Nodes
     */
    class WPML_Beaver_Builder_Translatable_Nodes implements \IWPML_Page_Builders_Translatable_Nodes
    {
        /**
         * Get translatable node.
         *
         * @param string|int $node_id  Node id.
         * @param stdClass   $settings Node settings.
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $settings)
        {
        }
        /**
         * Update translatable node.
         *
         * @param string         $node_id  Node id.
         * @param stdClass       $settings Node settings.
         * @param WPML_PB_String $string   String object.
         *
         * @return stdClass
         */
        public function update($node_id, $settings, \WPML_PB_String $string)
        {
        }
        /**
         * Get string name.
         *
         * @param string   $node_id  Node id.
         * @param array    $field    Page builder field.
         * @param stdClass $settings Node settings.
         *
         * @return string
         */
        public function get_string_name($node_id, $field, $settings)
        {
        }
        /**
         * @return array
         */
        public static function get_nodes_to_translate()
        {
        }
        /**
         * Initialize translatable nodes.
         */
        public function initialize_nodes_to_translate()
        {
        }
    }
}
namespace WPML\PB\BeaverBuilder\TranslationJob {
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function __construct(\WPML_Beaver_Builder_Data_Settings $dataSettings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array              $translationPackage
         * @param \stdClass|\WP_Post $post
         *
         * @return array
         */
        public function filterFieldsByPageBuilderKind(array $translationPackage, $post)
        {
        }
    }
}
namespace {
    class WPML_Beaver_Builder_Data_Settings implements \IWPML_Page_Builders_Data_Settings
    {
        /**
         * @return string
         */
        public function get_meta_field()
        {
        }
        /**
         * @return string
         */
        public function get_node_id_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_copy()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function convert_data_to_array($data)
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function prepare_data_for_saving(array $data)
        {
        }
        /**
         * @return string
         */
        public function get_pb_name()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_save()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public function is_handling_post($postId)
        {
        }
    }
    class WPML_Beaver_Builder_Data_Settings_For_Media extends \WPML_Beaver_Builder_Data_Settings
    {
        /**
         * @return array
         */
        public function get_fields_to_copy()
        {
        }
    }
}
namespace WPML\PB\BeaverBuilder\Hooks {
    class Menu implements \IWPML_Frontend_Action
    {
        const TERM_TAXONOMY = 'nav_menu';
        public function add_hooks()
        {
        }
        /**
         * @param string $menu
         * @param object $settings module settings object.
         *
         * @return string
         */
        public function adjustTranslatedMenu($menu, $settings)
        {
        }
    }
    class Editor implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Beaver_Builder_Register_Strings
     */
    class WPML_Beaver_Builder_Register_Strings extends \WPML_Page_Builders_Register_Strings
    {
        /**
         * @param array $data_array
         * @param array $package
         */
        protected function register_strings_for_modules(array $data_array, array $package)
        {
        }
    }
}
namespace WPML\PB\BeaverBuilder\BeaverThemer {
    class HooksFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
        /**
         * @return bool
         */
        public static function isActive()
        {
        }
    }
    class LocationHooks implements \IWPML_Backend_Action
    {
        const LAYOUT_CPT = 'fl-theme-layout';
        const LOCATIONS_RULES_KEY = '_fl_theme_builder_locations';
        const EXCLUSIONS_RULES_KEY = '_fl_theme_builder_exclusions';
        public function add_hooks()
        {
        }
        /**
         * @param mixed  $copiedValue
         * @param int    $translatedPostId
         * @param int    $originalPostId
         * @param string $metaKey
         *
         * @return mixed
         */
        public function translateLocationRulesMeta($copiedValue, $translatedPostId, $originalPostId, $metaKey)
        {
        }
    }
}
namespace WPML\PB\BeaverBuilder\Config {
    class Factory extends \WPML\PB\Config\Factory
    {
        const DATA = ['configRoot' => 'beaver-builder-widgets', 'defaultConditionKey' => 'type', 'pbKey' => 'beaver-builder', 'translatableWidgetsHook' => 'wpml_beaver_builder_modules_to_translate'];
        /**
         * @inheritDoc
         */
        protected function getPbData($key)
        {
        }
    }
}
namespace {
    class WPML_PB_Beaver_Builder_Handle_Custom_Fields_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Beaver_Builder_Integration_Factory
    {
        const SLUG = 'beaver-builder';
        public function create()
        {
        }
    }
    /**
     * Class WPML_Beaver_Builder_Update_Translation
     */
    class WPML_Beaver_Builder_Update_Translation extends \WPML_Page_Builders_Update_Translation
    {
        /** @param array $data_array */
        public function update_strings_in_modules(array &$data_array)
        {
        }
        /**
         * @param string $node_id
         * @param array $settings
         *
         * @return mixed
         */
        public function update_strings_in_node($node_id, $settings)
        {
        }
    }
    class WPML_Beaver_Builder_Media_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Beaver_Builder_Update_Media_Factory implements \IWPML_PB_Media_Update_Factory
    {
        public function create()
        {
        }
    }
    class WPML_Beaver_Builder_Media_Nodes_Iterator implements \IWPML_PB_Media_Nodes_Iterator
    {
        public function __construct(\WPML_Beaver_Builder_Media_Node_Provider $node_provider)
        {
        }
        /**
         * @param array $data_array
         * @param string $lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($data_array, $lang, $source_lang)
        {
        }
    }
    class WPML_Beaver_Builder_Media_Node_Provider
    {
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_Beaver_Builder_Media_Node|null
         */
        public function get($type)
        {
        }
    }
    abstract class WPML_Beaver_Builder_Media_Node
    {
        /** @var WPML_Page_Builders_Media_Translate $media_translate */
        protected $media_translate;
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        abstract function translate($node_data, $target_lang, $source_lang);
    }
    class WPML_Beaver_Builder_Media_Node_Gallery extends \WPML_Beaver_Builder_Media_Node
    {
        public function translate($node_data, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Beaver_Builder_Media_Node_Content_Slider extends \WPML_Beaver_Builder_Media_Node
    {
        public function translate($node_data, $target_lang, $source_lang)
        {
        }
    }
    /**
     * @group media
     */
    class WPML_Beaver_Builder_Media_Node_Slideshow extends \WPML_Beaver_Builder_Media_Node
    {
        public function translate($node_data, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Beaver_Builder_Media_Node_Photo extends \WPML_Beaver_Builder_Media_Node
    {
        public function translate($node_data, $target_lang, $source_lang)
        {
        }
    }
    /**
     * Class WPML_Beaver_Builder_Module_With_Items
     */
    abstract class WPML_Beaver_Builder_Module_With_Items implements \IWPML_Page_Builders_Module
    {
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_title($field);
        /** @return array */
        protected function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
        /**
         * @param object $settings
         *
         * @return array
         */
        protected function &get_items($settings)
        {
        }
        /**
         * @param string|int $node_id
         * @param object $settings
         * @param WPML_PB_String[] $strings
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $settings, $strings)
        {
        }
        /**
         * @param string|int $node_id
         * @param object $settings
         * @param WPML_PB_String $string
         *
         * @return null
         */
        public function update($node_id, $settings, \WPML_PB_String $string)
        {
        }
    }
    class WPML_Beaver_Builder_Pricing_Table extends \WPML_Beaver_Builder_Module_With_Items
    {
        public function &get_items($settings)
        {
        }
        public function get_fields()
        {
        }
        protected function get_title($field)
        {
        }
        protected function get_editor_type($field)
        {
        }
    }
    class WPML_Beaver_Builder_Testimonials extends \WPML_Beaver_Builder_Module_With_Items
    {
        public function &get_items($settings)
        {
        }
        public function get_fields()
        {
        }
        protected function get_title($field)
        {
        }
        protected function get_editor_type($field)
        {
        }
    }
    class WPML_Beaver_Builder_Icon_Group extends \WPML_Beaver_Builder_Module_With_Items
    {
        public function &get_items($settings)
        {
        }
        public function get_fields()
        {
        }
        protected function get_title($field)
        {
        }
        protected function get_editor_type($field)
        {
        }
    }
    class WPML_Beaver_Builder_Accordion extends \WPML_Beaver_Builder_Module_With_Items
    {
        protected function get_title($field)
        {
        }
    }
    class WPML_Beaver_Builder_Tab extends \WPML_Beaver_Builder_Module_With_Items
    {
        protected function get_title($field)
        {
        }
    }
    class WPML_Beaver_Builder_Content_Slider extends \WPML_Beaver_Builder_Module_With_Items
    {
        public function &get_items($settings)
        {
        }
        public function get_fields()
        {
        }
        protected function get_title($field)
        {
        }
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\PB\BeaverBuilder\Modules {
    class ModuleWithItemsFromConfig extends \WPML_Beaver_Builder_Module_With_Items
    {
        /**
         * @param string $itemsField
         * @param array  $config
         */
        public function __construct($itemsField, array $config)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_title($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_fields()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_editor_type($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function &get_items($settings)
        {
        }
    }
}
namespace {
    class WPML_Cornerstone_Register_Strings extends \WPML_Page_Builders_Register_Strings
    {
        /**
         * @param array $data_array
         * @param array $package
         */
        protected function register_strings_for_modules(array $data_array, array $package)
        {
        }
    }
    class WPML_Cornerstone_Integration_Factory
    {
        const SLUG = 'cornerstone';
        public function create()
        {
        }
    }
    /**
     * Class WPML_Cornerstone_Translatable_Nodes
     */
    class WPML_Cornerstone_Translatable_Nodes implements \IWPML_Page_Builders_Translatable_Nodes
    {
        const SETTINGS_FIELD = '_modules';
        /**
         * Nodes to translate.
         *
         * @var array
         */
        protected $nodes_to_translate;
        /**
         * Get translatable node.
         *
         * @param string|int $node_id  Node id.
         * @param array      $settings Node settings.
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $settings)
        {
        }
        /**
         * Update translatable node.
         *
         * @param string         $node_id  Node id.
         * @param array          $settings Node settings.
         * @param WPML_PB_String $string   String object.
         *
         * @return array
         */
        public function update($node_id, $settings, \WPML_PB_String $string)
        {
        }
        /**
         * Get string name.
         *
         * @param string $node_id  Node id.
         * @param array  $field    Page builder field.
         * @param array  $settings Node settings.
         *
         * @return string
         */
        public function get_string_name($node_id, $field, $settings)
        {
        }
        /**
         * @return array[]
         */
        public static function get_nodes_to_translate()
        {
        }
        /**
         * Initialize translatable nodes.
         */
        public function initialize_nodes_to_translate()
        {
        }
    }
}
namespace WPML\PB\Cornerstone\Styles {
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        const META_KEY_OLD = '_cs_generated_styles';
        const META_KEY_V6 = '_cs_generated_tss';
        /**
         * Hooks constructor.
         *
         * @param \WPML_PB_Last_Translation_Edit_Mode $lastEditMode
         * @param \WPML_Cornerstone_Data_Settings     $dataSettings
         */
        public function __construct(\WPML_PB_Last_Translation_Edit_Mode $lastEditMode, \WPML_Cornerstone_Data_Settings $dataSettings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         */
        public function invalidateStylesInTranslation($postId)
        {
        }
    }
}
namespace {
    class WPML_Cornerstone_Data_Settings implements \IWPML_Page_Builders_Data_Settings
    {
        /**
         * @return string
         */
        public function get_meta_field()
        {
        }
        /**
         * @return string
         */
        public function get_node_id_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_copy()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function convert_data_to_array($data)
        {
        }
        /**
         * @param array $data
         *
         * @return string
         */
        public function prepare_data_for_saving(array $data)
        {
        }
        /**
         * @return string
         */
        public function get_pb_name()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_save()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public function is_handling_post($postId)
        {
        }
    }
}
namespace WPML\PB\Cornerstone\Hooks {
    class Editor implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
    }
    class ShortcodeAttributes implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * The `_p` key in $pairs is correctly set to the current (global) post,
         * but it's overwritten with shortcode attribute ID copied from the original.
         *
         * @see \Themeco\Cornerstone\Services\FrontEnd::render_content()
         *
         * @param array $out
         * @param array $pairs
         *
         * @return array
         */
        public static function restoreContentId($out, $pairs)
        {
        }
    }
    class Media implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        public function __construct(\WPML_Cornerstone_Data_Settings $dataSettings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param \IWPML_PB_Media_Update[] $updaters
         * @param \WP_Post                $post
         *
         * @return mixed
         */
        public function removeUpdaterIfNotHandledByCornerstone($updaters, $post)
        {
        }
    }
}
namespace WPML\PB\Cornerstone\Config {
    class Factory extends \WPML\PB\Config\Factory
    {
        const DATA = ['configRoot' => 'cornerstone-widgets', 'defaultConditionKey' => '_type', 'pbKey' => 'cornerstone', 'translatableWidgetsHook' => 'wpml_cornerstone_modules_to_translate'];
        /**
         * @inheritDoc
         */
        protected function getPbData($key)
        {
        }
    }
}
namespace {
    class WPML_Cornerstone_Update_Translation extends \WPML_Page_Builders_Update_Translation
    {
        /** @param array $data_array */
        public function update_strings_in_modules(array &$data_array)
        {
        }
        /**
         * @param string $node_id
         * @param array  $settings
         *
         * @return mixed
         */
        protected function update_strings_in_node($node_id, $settings)
        {
        }
    }
    class WPML_Cornerstone_Media_Nodes_Iterator implements \IWPML_PB_Media_Nodes_Iterator
    {
        const ITEMS_FIELD = \WPML_Cornerstone_Module_With_Items::ITEMS_FIELD;
        public function __construct(\WPML_Cornerstone_Media_Node_Provider $node_provider)
        {
        }
        /**
         * @param array $data_array
         * @param string $lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($data_array, $lang, $source_lang)
        {
        }
    }
    class WPML_Cornerstone_Update_Media_Factory implements \IWPML_PB_Media_Update_Factory
    {
        public function create()
        {
        }
    }
    class WPML_Cornerstone_Media_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Provider
    {
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_Cornerstone_Media_Node|null
         */
        public function get($type)
        {
        }
    }
    abstract class WPML_Cornerstone_Media_Node
    {
        /** @var WPML_Page_Builders_Media_Translate $media_translate */
        protected $media_translate;
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        /**
         * @param array  $node_data
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return array
         */
        abstract function translate($node_data, $target_lang, $source_lang);
    }
    abstract class WPML_Cornerstone_Media_Node_With_URLs extends \WPML_Cornerstone_Media_Node
    {
        /** @return array */
        protected abstract function get_keys();
        /**
         * @param array  $node_data
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($node_data, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Classic_Creative_CTA extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Classic_Card extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Classic_Image extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Image extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Classic_Promo extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_Cornerstone_Media_Node_Classic_Feature_Box extends \WPML_Cornerstone_Media_Node_With_URLs
    {
        protected function get_keys()
        {
        }
    }
    class WPML_PB_Cornerstone_Handle_Custom_Fields_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\PB\Cornerstone {
    class Utils
    {
        const MODULE_TYPE_PREFIX = 'classic:';
        const LAYOUT_TYPES = ['bar', 'container', 'section', 'row', 'column', 'layout-row', 'layout-column', 'layout-grid', 'layout-cell', 'layout-div'];
        /**
         * @param array $data
         * @return string
         */
        public static function getNodeId($data)
        {
        }
        /**
         * Check if the type is a layout type.
         *
         * @param string $type The type to check.
         * @return bool
         */
        public static function typeIsLayout($type)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Cornerstone_Module_With_Items
     */
    abstract class WPML_Cornerstone_Module_With_Items implements \IWPML_Page_Builders_Module
    {
        const ITEMS_FIELD = \WPML_Cornerstone_Translatable_Nodes::SETTINGS_FIELD;
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_title($field);
        /** @return array */
        protected abstract function get_fields();
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_editor_type($field);
        /**
         * @param array $settings
         *
         * @return array
         */
        protected function get_items($settings)
        {
        }
        /**
         * @param string|int $node_id
         * @param array $settings
         * @param WPML_PB_String[] $strings
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $settings, $strings)
        {
        }
        /**
         * @param string|int $node_id
         * @param array $settings
         * @param WPML_PB_String $string
         *
         * @return array
         */
        public function update($node_id, $settings, \WPML_PB_String $string)
        {
        }
    }
    class WPML_Cornerstone_Tabs extends \WPML_Cornerstone_Module_With_Items
    {
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\PB\Cornerstone\Modules {
    class ModuleWithItemsFromConfig extends \WPML_Cornerstone_Module_With_Items
    {
        public function __construct(array $config)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_title($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_fields()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_editor_type($field)
        {
        }
    }
}
namespace {
    class WPML_Cornerstone_Accordion extends \WPML_Cornerstone_Module_With_Items
    {
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\PB\Gutenberg {
    interface Integration
    {
        public function add_hooks();
    }
}
namespace {
    /**
     * Class WPML_Gutenberg_Integration
     */
    class WPML_Gutenberg_Integration implements \WPML\PB\Gutenberg\Integration
    {
        const PACKAGE_ID = 'Gutenberg';
        const GUTENBERG_OPENING_START = '<!-- wp:';
        const GUTENBERG_CLOSING_START = '<!-- /wp:';
        const CLASSIC_BLOCK_NAME = 'core/classic-block';
        public function __construct(\WPML\PB\Gutenberg\StringsInBlock\StringsInBlock $strings_in_block, \WPML_Gutenberg_Config_Option $config_option, \WPML_Gutenberg_Strings_Registration $strings_registration)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $plugins
         *
         * @return array
         */
        function page_builder_support_required($plugins)
        {
        }
        /**
         * @param WP_Post $post
         * @param array $package_data
         */
        function register_strings(\WP_Post $post, $package_data)
        {
        }
        public function register_strings_from_widget(array $blocks, array $package_data)
        {
        }
        /**
         * @param WP_Block_Parser_Block|array $block
         *
         * @return WP_Block_Parser_Block
         */
        public static function sanitize_block($block)
        {
        }
        /**
         * @param string $package_kind
         * @param int $translated_post_id
         * @param WP_Post $original_post
         * @param array $string_translations
         * @param string $lang
         */
        public function string_translated($package_kind, $translated_post_id, $original_post, $string_translations, $lang)
        {
        }
        /**
         * @param string $content
         * @param array  $string_translations
         * @param string $lang
         *
         * @return string
         */
        public function replace_strings_in_blocks($content, $string_translations, $lang)
        {
        }
        /**
         * @param array|WP_Block_Parser_Block $block
         *
         * @return string
         */
        public static function render_block($block)
        {
        }
        public static function has_non_empty_attributes(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param array $config_data
         *
         * @return array
         */
        public function wpml_config_filter($config_data)
        {
        }
        /**
         * @param bool    $translate
         * @param WP_Post $post
         * @param string  $context
         *
         * @return bool
         */
        public function should_body_be_translated_filter($translate, \WP_Post $post, $context = '')
        {
        }
        public static function parse_blocks($content)
        {
        }
        /**
         * Remove Gutenberg (string package) from translation dashboard filters
         *
         * @param array $types
         *
         * @return mixed
         */
        public function remove_package_strings_type_filter($types)
        {
        }
    }
    /**
     * Class WPML_Gutenberg_Config_Option
     */
    class WPML_Gutenberg_Config_Option
    {
        const OPTION = 'wpml-gutenberg-config';
        const OPTION_IDS_IN_BLOCKS = 'wpml-gutenberg-config-ids-in-blocks';
        const SEARCH_METHOD_WILDCARD = 'wildcards';
        const SEARCH_METHOD_REGEX = 'regex';
        /**
         * @param array $config_data
         */
        public function update_from_config($config_data)
        {
        }
        /**
         * @param array $block_config
         *
         * @return string|null
         */
        public static function get_block_name(array $block_config)
        {
        }
        public function get()
        {
        }
        /**
         * @return array
         */
        public function get_ids_in_blocks()
        {
        }
    }
    class WPML_Gutenberg_Strings_Registration
    {
        public function __construct(\WPML\PB\Gutenberg\StringsInBlock\StringsInBlock $strings_in_blocks, \WPML_ST_String_Factory $string_factory, \WPML_PB_Reuse_Translations $reuse_translations, \WPML_PB_String_Translation $string_translation, \WPML_Translate_Link_Targets $translate_link_targets, callable $set_link_translations)
        {
        }
        /**
         * @param WP_Post $post
         * @param array $package_data
         */
        public function register_strings(\WP_Post $post, $package_data)
        {
        }
        /**
         * @param array $blocks
         * @param array $package_data
         */
        public function register_strings_from_widget(array $blocks, array $package_data)
        {
        }
    }
}
namespace WPML\PB\Gutenberg\ConvertIdsInBlock {
    class Base
    {
        /**
         * @param array $block
         *
         * @return array
         */
        public function convert(array $block)
        {
        }
        /**
         * @see Ids::convert(), supports string lists with any separator.
         *
         * @param array|int|string $ids
         * @param string           $elementSlug e.g. "page", "category", ...
         * @param string|null      $elementType "post" or "taxonomy".
         *
         * @return array|int
         */
        public static function convertIds($ids, $elementSlug, $elementType = null)
        {
        }
    }
    class TagAttributes extends \WPML\PB\Gutenberg\ConvertIdsInBlock\Base
    {
        public function __construct(array $attributesToConvert)
        {
        }
        public function convert(array $block)
        {
        }
    }
    class Hooks implements \WPML\PB\Gutenberg\Integration
    {
        public function __construct(\WPML_Gutenberg_Config_Option $config)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $block
         *
         * @return array
         */
        public function filterIdsInBlock(array $block)
        {
        }
    }
    class Composite extends \WPML\PB\Gutenberg\ConvertIdsInBlock\Base
    {
        public function __construct(array $converters)
        {
        }
        public function convert(array $block)
        {
        }
    }
    class BlockAttributes extends \WPML\PB\Gutenberg\ConvertIdsInBlock\Base
    {
        public function __construct(array $attributesToConvert)
        {
        }
        public function convert(array $block)
        {
        }
    }
}
namespace WPML\PB\Gutenberg\Navigation {
    class Frontend implements \WPML\PB\Gutenberg\Integration
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function translateNavigationId($data)
        {
        }
    }
}
namespace {
    class WPML_Gutenberg_Integration_Factory
    {
        /** @return \WPML\PB\Gutenberg\Integration_Composite */
        public function create()
        {
        }
        /**
         * @return WPML_Gutenberg_Integration
         */
        public function create_gutenberg_integration()
        {
        }
    }
}
namespace WPML\PB\Gutenberg\StringsInBlock {
    interface StringsInBlock
    {
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        public function find(\WP_Block_Parser_Block $block);
        /**
         * @param \WP_Block_Parser_Block $block
         * @param array                 $string_translations
         * @param string                $lang
         *
         * @return \WP_Block_Parser_Block
         */
        public function update(\WP_Block_Parser_Block $block, array $string_translations, $lang);
    }
    abstract class Base implements \WPML\PB\Gutenberg\StringsInBlock\StringsInBlock
    {
        const LONG_STRING_LENGTH = 80;
        public function __construct(\WPML_Gutenberg_Config_Option $config_option)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param string                 $type e.g. `xpath` or `key`
         *
         * @return array|string|null
         */
        protected function get_block_config(\WP_Block_Parser_Block $block, $type)
        {
        }
        /**
         * @param  \WP_Block_Parser_Block  $block
         *
         * @return string
         */
        protected function get_block_label(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param string                 $type
         *
         * @return array|null
         */
        public function get_namespace_config(\WP_Block_Parser_Block $block, $type)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function get_string_type($string)
        {
        }
        /**
         * @param string $id
         * @param string $name
         * @param string $text
         * @param string $type
         *
         * @return object
         */
        protected function build_string($id, $name, $text, $type)
        {
        }
        /**
         * @param string $name
         * @param string $text
         *
         * @return string
         */
        protected function get_string_id($name, $text)
        {
        }
    }
    class HTML extends \WPML\PB\Gutenberg\StringsInBlock\Base
    {
        const LIST_BLOCK_NAME = 'core/list';
        const LIST_ITEM_BLOCK_NAME = 'core/list-item';
        const HTML_BLOCK_NAME = 'core/html';
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        public function find(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param array                  $string_translations
         * @param string                 $lang
         *
         * @return \WP_Block_Parser_Block
         */
        public function update(\WP_Block_Parser_Block $block, array $string_translations, $lang)
        {
        }
        /**
         * HTML_ENTITY_PLACEHOLDERS
         * Some translations are applied using \DomHandler, which converts any HTML entity
         * back to it's character, i.e. &apos; becomes '.
         * At some places (like shortcode attributes) it breaks the attribute value, because
         * the delimter can use the same kind of quotes, i.e. [my attr='Some'value'] => broken.
         * To avoid this problem the HTML entities are replaced before parsing the content with
         * \DomDocument::loadHTML() and re-applied afterwards.
         */
        const HTML_ENTITY_PLACEHOLDERS = ['&apos;' => 'WPML_PLACEHOLDER_APOS', '&quot;' => 'WPML_PLACEHOLDER_QUOT'];
    }
}
namespace WPML\PB\Gutenberg\StringsInBlock\DOMHandler {
    abstract class DOMHandle
    {
        const INNER_HTML_PARTIAL = 'partial';
        const INNER_HTML_FULL = 'full';
        /**
         * @param string $html
         *
         * @return \DOMXPath
         */
        public function getDomxpath($html)
        {
        }
        /**
         * @param string $html
         *
         * @return \DOMDocument
         */
        public function getDom($html)
        {
        }
        /**
         * This is required when a block has innerBlocks and translatable content at the root.
         * Unfortunately we cannot use the DOM because we have only HTML extracts which
         * are not valid taken independently.
         *
         * {@internal
         *          innerContent => [
         *              '<div><p>The title</p>',
         *              null,
         *              '\n\n',
         *              null,
         *              '</div>'
         *          ]}
         *
         * @param \WP_Block_Parser_Block $block
         * @param \DOMNode               $element
         * @param string                 $translation
         * @param string|null            $originalValue
         *
         * @return \WP_Block_Parser_Block
         */
        public function applyStringTranslations(\WP_Block_Parser_Block $block, \DOMNode $element, $translation, $originalValue = null)
        {
        }
        /**
         * @param \DOMNode $element
         * @param string   $context
         *
         * @return array
         */
        protected function getInnerHTML(\DOMNode $element, $context)
        {
        }
        /**
         * @param \DOMNode $element
         * @param string   $context
         *
         * @return string
         */
        protected abstract function getInnerHTMLFromChildNodes(\DOMNode $element, $context);
        /**
         * @param \DOMNode $element
         *
         * @return array
         */
        public function getPartialInnerHTML(\DOMNode $element)
        {
        }
        /**
         * @param \DOMNode $element
         *
         * @return array
         */
        public function getFullInnerHTML(\DOMNode $element)
        {
        }
        /**
         * @param \DOMNode $element
         * @param string   $value
         */
        public function setElementValue(\DOMNode $element, $value)
        {
        }
        /**
         * @param \DOMNode $clone
         * @param \DOMNode $element
         */
        protected abstract function appendExtraChildNodes(\DOMNode $clone, \DOMNode $element);
        protected function getAsHTML5(\DOMNode $element)
        {
        }
        public static function removeCdataFromStyleTag($innerHTML)
        {
        }
        public static function removeCdataFromScriptTag($innerHTML)
        {
        }
    }
    class StandardBlock extends \WPML\PB\Gutenberg\StringsInBlock\DOMHandler\DOMHandle
    {
        /**
         * @param \DOMNode $element
         * @param string   $context
         *
         * @return string
         */
        protected function getInnerHTMLFromChildNodes(\DOMNode $element, $context)
        {
        }
        /**
         * @param \DOMNode $clone
         * @param \DOMNode $element
         */
        protected function appendExtraChildNodes(\DOMNode $clone, \DOMNode $element)
        {
        }
    }
    class ListItemBlock extends \WPML\PB\Gutenberg\StringsInBlock\DOMHandler\StandardBlock
    {
        /**
         * @inheritDoc
         */
        public function applyStringTranslations(\WP_Block_Parser_Block $block, \DOMNode $element, $translation, $originalValue = null)
        {
        }
    }
    class ListBlock extends \WPML\PB\Gutenberg\StringsInBlock\DOMHandler\DOMHandle
    {
        /**
         * @param \DOMNode $element
         * @param string   $context
         *
         * @return string
         */
        protected function getInnerHTMLFromChildNodes(\DOMNode $element, $context)
        {
        }
        /**
         * @param \DOMNode $clone
         * @param \DOMNode $element
         */
        protected function appendExtraChildNodes(\DOMNode $clone, \DOMNode $element)
        {
        }
    }
    class HtmlBlock extends \WPML\PB\Gutenberg\StringsInBlock\DOMHandler\StandardBlock
    {
        /**
         * @param \DOMNode $element
         * @param string   $context
         *
         * @return array
         */
        protected function getInnerHTML(\DOMNode $element, $context)
        {
        }
    }
}
namespace WPML\PB\Gutenberg\StringsInBlock {
    class Collection implements \WPML\PB\Gutenberg\StringsInBlock\StringsInBlock
    {
        /**
         * @param StringsInBlock[] $parsers
         */
        public function __construct(array $parsers)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        public function find(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param array                  $string_translations
         * @param string                 $lang
         *
         * @return \WP_Block_Parser_Block
         */
        public function update(\WP_Block_Parser_Block $block, array $string_translations, $lang)
        {
        }
    }
    class Attributes extends \WPML\PB\Gutenberg\StringsInBlock\Base
    {
        /**
         * @param \WP_Block_Parser_Block $block
         *
         * @return array
         */
        public function find(\WP_Block_Parser_Block $block)
        {
        }
        /**
         * @param string $config_key
         *
         * @return string
         */
        public static function getWildcardRegex($config_key)
        {
        }
        /**
         * @param \WP_Block_Parser_Block $block
         * @param array                  $string_translations
         * @param string                 $lang
         *
         * @return \WP_Block_Parser_Block
         */
        public function update(\WP_Block_Parser_Block $block, array $string_translations, $lang)
        {
        }
        /**
         * @param array  $attrs
         * @param array  $config_keys
         * @param array  $translations
         * @param string $lang
         * @param string $block_name
         *
         * @return array
         */
        public function updateStringsRecursively(array $attrs, array $config_keys, array $translations, $lang, $block_name)
        {
        }
    }
}
namespace WPML\PB\Gutenberg {
    class Integration_Composite implements \WPML\PB\Gutenberg\Integration
    {
        public function add(\WPML\PB\Gutenberg\Integration $integration)
        {
        }
        public function add_hooks()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_REST_Action extends \IWPML_Action
    {
    }
}
namespace WPML\PB\Gutenberg\Widgets\Block {
    class RegisterStrings implements \IWPML_REST_Action, \WPML\PB\Gutenberg\Integration
    {
        public function add_hooks()
        {
        }
    }
    class Strings
    {
        const PACKAGE_KIND = 'Block';
        const PACKAGE_KIND_SLUG = 'block';
        const PACKAGE_NAME = 'widget';
        const PACKAGE_TITLE = 'Widget';
        const DOMAIN = self::PACKAGE_KIND_SLUG . '-' . self::PACKAGE_NAME;
        /**
         * @param string $locale
         *
         * @return array
         * @throws \WPML\Auryn\InjectionException
         */
        public static function fromMo($locale)
        {
        }
        public static function loadStringsFromMOFile($domain, $locale)
        {
        }
        public static function createPackage()
        {
        }
    }
    class Search implements \IWPML_Frontend_Action, \WPML\PB\Gutenberg\Integration
    {
        public function add_hooks()
        {
        }
    }
    class DisplayTranslation implements \IWPML_Frontend_Action, \WPML\PB\Gutenberg\Integration
    {
        /**
         * @see \WPML_Widgets_Support_Frontend::PRIORITY_AFTER_TRANSLATION_APPLIED
         */
        const PRIORITY_BEFORE_REMOVE_BLOCK_MARKUP = -1;
        public function add_hooks()
        {
        }
    }
}
namespace WPML\PB\Gutenberg\ReusableBlocks {
    class Notice
    {
        public function __construct(\WPML_Notices $notices, \WPML\PB\Gutenberg\ReusableBlocks\JobLinks $job_links)
        {
        }
        public function addJobsCreatedAutomatically(array $job_ids)
        {
        }
    }
    abstract class Manage
    {
        /** @var Blocks */
        protected $blocks;
        /** @var Translation */
        protected $translation;
        public function __construct(\WPML\PB\Gutenberg\ReusableBlocks\Blocks $blocks, \WPML\PB\Gutenberg\ReusableBlocks\Translation $translation)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection $blocks
         *
         * [
         *  (object) [
         *      'block_id'     => 1,
         *      'target_langs' => ['fr' => 1, 'de' => 1],
         *      'source_lang'  => 'en',
         *  ],
         *  (object) [
         *      'block_id'     => 2,
         *      'target_langs' => ['de' => 1],
         *      'source_lang'  => 'en',
         *  ],
         * ]
         *
         * @return \WPML\Collect\Support\Collection
         */
        protected function getBlockElementsToAdd($blocks)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection $post_elements
         *
         * @return \WPML\Collect\Support\Collection
         */
        protected function getBlocksFromPostElements(\WPML\Collect\Support\Collection $post_elements)
        {
        }
        /**
         * @param \WPML_TM_Translation_Batch_Element|BasketElement|mixed $element
         *
         * @return array
         */
        public function findBlocksInElement($element)
        {
        }
        /**
         * @param int    $block_id
         * @param string $target_lang
         *
         * @return bool
         */
        protected function requiresTranslation($block_id, $target_lang)
        {
        }
        /**
         * We will remove target langs that do not require a job
         * for the reusable block.
         *
         * @param \stdClass $block
         *
         * @return \stdClass
         */
        public function selectTargetLangs(\stdClass $block)
        {
        }
    }
    class ManageBasket extends \WPML\PB\Gutenberg\ReusableBlocks\Manage
    {
        public function __construct(\WPML\PB\Gutenberg\ReusableBlocks\Blocks $blocks, \WPML\PB\Gutenberg\ReusableBlocks\Translation $translation, \WPML\PB\Gutenberg\ReusableBlocks\Basket $translation_basket)
        {
        }
        /**
         * @param array $data
         */
        public function addBlocks(array $data)
        {
        }
    }
    class ManageBatch extends \WPML\PB\Gutenberg\ReusableBlocks\Manage
    {
        public function addBlocks(\WPML_TM_Translation_Batch $batch)
        {
        }
    }
    class BasketElement
    {
        /**
         * @param int    $element_id
         * @param string $source_lang
         * @param array  $target_languages
         */
        public function __construct($element_id, $source_lang, array $target_languages)
        {
        }
        /**
         * @return int
         */
        public function get_element_id()
        {
        }
        /**
         * @return string
         */
        public function get_element_type()
        {
        }
        /**
         * @return string
         */
        public function get_source_lang()
        {
        }
        /**
         * @return array
         */
        public function get_target_langs()
        {
        }
    }
    class AdminIntegration implements \WPML\PB\Gutenberg\Integration
    {
        public function __construct(\WPML\PB\Gutenberg\ReusableBlocks\ManageBatch $manage_batch, \WPML\PB\Gutenberg\ReusableBlocks\ManageBasket $manage_basket, \WPML\PB\Gutenberg\ReusableBlocks\Notice $notice)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Add reusable block elements that are used inside
         * the post elements already in the batch.
         *
         * @param \WPML_TM_Translation_Batch $batch
         *
         * @return \WPML_TM_Translation_Batch
         */
        public function addBlocksToBatch(\WPML_TM_Translation_Batch $batch)
        {
        }
        /**
         * Add reusable blocks that are used in the
         * post items in the basket.
         *
         * @param array $data
         */
        public function addBlocksToBasket(array $data)
        {
        }
        /**
         * @param array $added_jobs
         */
        public function notifyExtraJobsToTranslator(array $added_jobs)
        {
        }
    }
    class Integration implements \WPML\PB\Gutenberg\Integration
    {
        public function __construct(\WPML\PB\Gutenberg\ReusableBlocks\Translation $translation)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Converts the block in the current language
         *
         * @param array $block
         *
         * @return array
         */
        public function convertReusableBlock(array $block)
        {
        }
        /**
         * The filter hook `render_block_data` applies only for root blocks,
         * nested blocks are not passing through this hook.
         * That's why we need to re-render reusable nested blocks.
         *
         * @param string $blockContent
         * @param array  $block
         *
         * @return string
         */
        public function reRenderInnerReusableBlock($blockContent, $block)
        {
        }
    }
    class Translation
    {
        const POST_TYPE = 'wp_block';
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param array        $block
         * @param null|string  $lang
         *
         * @return array
         */
        public function convertBlock(array $block, $lang = null)
        {
        }
        /**
         * @param int         $block_id
         * @param string|null $lang
         *
         * @return int
         */
        public function convertBlockId($block_id, $lang = null)
        {
        }
        /**
         * @param int $post_id
         *
         * @return string|null
         */
        public function getSourceLang($post_id)
        {
        }
    }
    class Blocks
    {
        /**
         * @param array $block
         *
         * @return bool
         */
        public static function isReusable(array $block)
        {
        }
        /**
         * @param array $block
         *
         * @return int
         */
        public static function getReusableId(array $block)
        {
        }
        /**
         * We get block IDs recursively to find possible
         * nested reusable blocks.
         * 
         * @param int $post_id
         *
         * @return array
         */
        public function getChildrenIdsFromPost($post_id)
        {
        }
    }
    class JobLinks
    {
        public function __construct(\WPML\PB\Gutenberg\ReusableBlocks\JobFactory $job_factory)
        {
        }
        /**
         * @param array $job_ids
         *
         * @return \WPML\Collect\Support\Collection
         */
        public function get(array $job_ids)
        {
        }
    }
    class JobFactory
    {
        public function get_translation_job($job_id)
        {
        }
    }
    class Basket
    {
        public function update_basket($basket_portion)
        {
        }
    }
}
namespace WPML\PB\Gutenberg {
    class XPath
    {
        /**
         * If a sequence has only one element, we will wrap it
         * in order to have the same data shape as for multiple elements.
         * Also check for type attribute
         *
         * @param array|string $data
         *
         * @return array
         */
        public static function normalize($data)
        {
        }
        /**
         * @param string|array $query
         *
         * @return array [query, type, label]
         */
        public static function parse($query)
        {
        }
    }
}
namespace {
    class WPML_Elementor_WooCommerce_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Elementor_Translate_IDs_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Elementor_URLs implements \IWPML_Action
    {
        public function __construct(\WPML_Translation_Element_Factory $element_factory, \IWPML_URL_Converter_Strategy $language_converter, \IWPML_Current_Language $current_language)
        {
        }
        public function add_hooks()
        {
        }
        public function adjust_edit_with_elementor_url($url, $elementor_document)
        {
        }
        /**
         * Check if the given URL is the pagination inside the post.
         *
         * @param bool $is_pagination_url_in_post
         * @param string $url URL to check
         * @param string $post_name Current post name
         *
         * @return bool
         */
        public function is_pagination_url($is_pagination_url_in_post, $url, $post_name)
        {
        }
        public function fix_pagination_link_with_language_param($link)
        {
        }
    }
    class WPML_Elementor_DB
    {
        // @codingStandardsIgnoreLine
        public function __construct(\Elementor\DB $elementor_db)
        {
        }
        /**
         * @param int $post_id
         */
        public function save_plain_text($post_id)
        {
        }
    }
}
namespace WPML\PB\Elementor {
    class DataConvert
    {
        /**
         * @param array $data
         *
         * @return string
         */
        public static function serialize(array $data)
        {
        }
        /**
         * @param array|string $data
         *
         * @return array
         */
        public static function unserialize($data)
        {
        }
    }
}
namespace WPML\PB\Elementor\Helper {
    class Node
    {
        /**
         * @param array $element
         *
         * @return bool
         */
        public static function isTranslatable($element)
        {
        }
        /**
         * @param array $element
         *
         * @return bool
         */
        public static function hasChildren($element)
        {
        }
    }
    class StringFormat
    {
        /**
         * @param array           $settings
         * @param \WPML_PB_String $string
         *
         * @return bool
         */
        public static function useWpAutoP($settings, $string)
        {
        }
    }
}
namespace {
    class WPML_Elementor_Data_Settings implements \IWPML_Page_Builders_Data_Settings
    {
        const META_KEY_DATA = '_elementor_data';
        const META_KEY_MODE = '_elementor_edit_mode';
        public function __construct(\WPML_Elementor_DB $elementor_db = \null)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param  array  $value
         * @param  int    $translated_post_id
         * @param  int    $original_post_id
         * @param  string $meta_key
         *
         * @return mixed
         */
        public function mark_css_field_as_empty($value, $translated_post_id, $original_post_id, $meta_key)
        {
        }
        public function save_post_body_as_plain_text($type, $post_id, $original_post, $string_translations, $lang)
        {
        }
        /**
         * @return string
         */
        public function get_meta_field()
        {
        }
        /**
         * @return string
         */
        public function get_node_id_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_copy()
        {
        }
        /**
         * @param array|string $data
         *
         * @return array
         */
        public function convert_data_to_array($data)
        {
        }
        /**
         * @param array $data
         *
         * @return string
         */
        public function prepare_data_for_saving(array $data)
        {
        }
        /**
         * @return string
         */
        public function get_pb_name()
        {
        }
        /**
         * @return array
         */
        public function get_fields_to_save()
        {
        }
        /**
         * @param  array $custom_fields_values
         * @param  int   $post_id
         *
         * @return array
         */
        public function add_data_custom_field_to_md5(array $custom_fields_values, $post_id)
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public function is_handling_post($postId)
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public static function is_edited_with_elementor($postId)
        {
        }
    }
    class WPML_Elementor_WooCommerce_Hooks
    {
        public function add_hooks()
        {
        }
        /**
         * @param WP_Query $query
         *
         * @return WP_Query
         */
        public function do_not_suppress_filters_on_product_widget(\WP_Query $query)
        {
        }
        /**
         * @param  array $actions
         *
         * @return array
         */
        public function adjustCurrencyOnElementorCartFragments($actions)
        {
        }
    }
    /**
     * Class WPML_Elementor_Register_Strings
     */
    class WPML_Elementor_Register_Strings extends \WPML_Page_Builders_Register_Strings
    {
        /**
         * @param array $data_array
         * @param array $package
         */
        protected function register_strings_for_modules(array $data_array, array $package)
        {
        }
    }
    /**
     * Class WPML_Elementor_Integration_Factory
     */
    class WPML_Elementor_Integration_Factory
    {
        const SLUG = 'elementor';
        /**
         * @return WPML_Page_Builders_Integration
         */
        public function create()
        {
        }
    }
    class WPML_Elementor_Update_Translation extends \WPML_Page_Builders_Update_Translation
    {
        /** @param array $data_array */
        protected function update_strings_in_modules(array &$data_array)
        {
        }
        /**
         * @param int   $node_id
         * @param array $settings
         *
         * @return array
         */
        protected function update_strings_in_node($node_id, $settings)
        {
        }
    }
}
namespace WPML\PB\Elementor\Hooks {
    class WooCommerce implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
    }
    class CssCache implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        const TEMPLATES_POST_TYPE = 'elementor_library';
        /**
         * @return void
         */
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         *
         * @return void
         */
        public static function flushCache($postId)
        {
        }
    }
    class Editor implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
    class WordPressWidgets implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
    class Frontend implements \IWPML_Frontend_Action
    {
        /** @var string */
        const PERMALINKS_CATEGORY_PATTERN = '%category%';
        /**
         * @return void
         */
        public function add_hooks()
        {
        }
        public function addLanguageFormField()
        {
        }
        /**
         * @param \WP_Term   $cat
         * @param \WP_Term[] $cats
         * @param \WP_Post   $post
         *
         * @return \WP_Term
         */
        public function fixLanguageSwitcherPermalink($cat, $cats, $post)
        {
        }
    }
    class DynamicElements implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function convert(array $data)
        {
        }
        /**
         * @param string      $allowedTag
         * @param string      $idKey
         * @param string|null $tagString
         *
         * @return string|null
         */
        public static function convertTag($allowedTag, $idKey, $tagString)
        {
        }
        /**
         * @param int $elementId
         *
         * @return int
         */
        public static function convertId($elementId)
        {
        }
    }
    class Templates implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        const POST_TYPE = 'elementor_library';
        /**
         * @return void
         */
        public function add_hooks()
        {
        }
        /**
         * @return void
         */
        public static function setTemplatesAutomaticallyTranslatable()
        {
        }
    }
    class GutenbergCleanup implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * If we detect Gutenberg footprint in the Elementor data,
         * we'll remove it and delete the Gutenberg string package.
         *
         * @param null|bool $check
         * @param int       $postId
         * @param string    $metaKey
         * @param string    $metaValue
         *
         * @return mixed
         */
        public function removeGutenbergFootprint($check, $postId, $metaKey, $metaValue)
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function removeBlockMetaInEditorWidget(array $data)
        {
        }
    }
    class FormPopup implements \IWPML_Frontend_Action, \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param \ElementorPro\Modules\Forms\Classes\Form_Record  $record      An instance of the form record.
         * @param \ElementorPro\Modules\Forms\Classes\Ajax_Handler $ajaxHandler An instance of the ajax handler.
         */
        public function convertFormPopupIdAjax($record, $ajaxHandler)
        {
        }
    }
    class LandingPages implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const POST_TYPE = 'e-landing-page';
        const BACKUP_HOOK_PRIORITY = 11;
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @see \Elementor\Modules\LandingPages\Module::remove_post_type_slug
         *
         * @param string   $postUrl
         * @param \WP_Post $post
         *
         * @return string
         */
        public function adjustLink($postUrl, $post)
        {
        }
        /**
         * Backup and restore the global $wp_query that was overwritten by Elementor.
         *
         * In order for Elementor to treat landing pages(post_type: e-landing-page) as pages, it overwrites the global
         * $wp_query when using the /%category%/%postname%/ permalink structure.
         * WPML then resets the global $wp_query in SitePress::get_ls_languages() and this causes 404 errors on landing pages
         * and prevents editing them in the Elementor editor.
         *
         * In this case, we backup the global $wp_query when Elementor overwrites it on 'pre_handle_404' hook, and we restore
         * it after WPML resets it on 'wp_head' hook.
         *
         * @see \WPML_SEO_HeadLangs::head_langs()
         * @see \SitePress::get_ls_languages()
         * @see \Elementor\Modules\LandingPages\Module::handle_404
         *
         * @param bool      $value
         * @param \WP_Query $query
         *
         * @return bool
         */
        public function backupQuery($value, $query)
        {
        }
    }
    class DomainsWithMultisite implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function onElementorEditor()
        {
        }
        /**
         * @param string $url The admin area URL.
         */
        public function filterUrl($url)
        {
        }
    }
}
namespace {
    class WPML_Elementor_DB_Factory
    {
        /**
         * @return null|WPML_Elementor_DB
         */
        public function create()
        {
        }
    }
    class WPML_Elementor_Adjust_Global_Widget_ID_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\PB\Elementor\Config\DynamicElements {
    class WooProduct
    {
        /**
         * @param string $widget
         *
         * @return array
         */
        public static function get($widget)
        {
        }
    }
    class IconList
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
    }
}
namespace WPML\PB\Elementor\Config\DynamicElements\EssentialAddons {
    /**
     * @see https://essential-addons.com/elementor/docs/creative-elements/content-timeline/
     */
    class ContentTimeline
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
    }
}
namespace WPML\PB\Elementor\Config\DynamicElements {
    class Popup
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
    }
    class LoopCarousel
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
    }
    class LoopGrid
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
    }
    class Button
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
    }
    class Provider
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
    }
    class FormPopup
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
    }
    class MegaMenu
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
    }
    class Hotspot
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
    }
}
namespace WPML\PB\Elementor\Config {
    class Factory extends \WPML\PB\Config\Factory
    {
        const DATA = ['configRoot' => 'elementor-widgets', 'defaultConditionKey' => 'widgetType', 'pbKey' => 'elementor', 'translatableWidgetsHook' => 'wpml_elementor_widgets_to_translate'];
        /**
         * @inheritDoc
         */
        protected function getPbData($key)
        {
        }
    }
}
namespace {
    class WPML_PB_Elementor_Handle_Custom_Fields_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Elementor_Adjust_Global_Widget_ID
    {
        public function __construct(\IWPML_Page_Builders_Data_Settings $elementor_settings, \WPML_Translation_Element_Factory $translation_element_factory, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function adjust_ids()
        {
        }
        public function restore_current_language()
        {
        }
        /**
         * The snippet is a WHERE condition which is added to a DB query.
         * This will include the source element in the query results in case the element
         * does not exist in the current language.
         *
         * @see WPML_Query_Filter::display_as_translated_snippet
         *
         * @param bool  $display_as_translated
         * @param array $post_types
         *
         * @return bool
         */
        public function should_use_display_as_translated_snippet($display_as_translated, $post_types)
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function duplicate_css_class_with_original_id($content)
        {
        }
    }
    class WPML_PB_Fix_Maintenance_Query implements \IWPML_Frontend_Action
    {
        const AFTER_TEMPLATE_APPLY = 12;
        public function add_hooks()
        {
        }
        public function fix_global_query()
        {
        }
    }
}
namespace WPML\PB\Elementor\DynamicContent {
    class Strings
    {
        const KEY_SETTINGS = \WPML_Elementor_Translatable_Nodes::SETTINGS_FIELD;
        const KEY_DYNAMIC = '__dynamic__';
        const KEY_NODE_ID = 'id';
        const KEY_ITEM_ID = '_id';
        const SETTINGS_REGEX = '/settings="(.*?(?="]))/';
        const NAME_PREFIX = 'dynamic';
        const DELIMITER = '-';
        const TRANSLATABLE_SETTINGS = ['before', 'after', 'fallback', 'video_url', 'shortcode'];
        /**
         * Remove the strings overwritten with dynamic content
         * and add the extra strings "before", "after" and "fallback".
         *
         * @param WPML_PB_String[] $strings
         * @param string           $nodeId
         * @param array            $element
         *
         * @return WPML_PB_String[]
         */
        public static function filter(array $strings, $nodeId, array $element)
        {
        }
        /**
         * @param array          $element
         * @param WPML_PB_String $string
         *
         * @return array
         */
        public static function updateNode(array $element, \WPML_PB_String $string)
        {
        }
        /**
         * @param string $nodeId
         * @param string $itemId
         * @param string $tagKey
         * @param string $settingField
         *
         * @return string
         */
        public static function getStringName($nodeId, $itemId, $tagKey, $settingField)
        {
        }
    }
    class Field
    {
        /**
         * e.g. '[elementor-tag id="cc0b6c6" name="post-title" settings="ENCODED_STRING"]'
         *
         * @var string $tagValue
         */
        public $tagValue;
        /**
         * e.g. 'title'
         *
         * @var string $tagKey
         */
        public $tagKey;
        /**
         * The node ID.
         *
         * @var string $nodeId
         */
        public $nodeId;
        /**
         * The item ID inside the node with items.
         *
         * @var string $itemId
         */
        public $itemId;
        /**
         * @param string $tagValue
         * @param string $tagKey
         * @param string $nodeId
         * @param string $itemId
         */
        public function __construct($tagValue, $tagKey, $nodeId, $itemId = '')
        {
        }
        /**
         * @see \WPML_Elementor_Translatable_Nodes::get_string_name()
         * @see \WPML_Elementor_Module_With_Items::get_string_name()
         *
         * @param WPML_PB_String $string
         *
         * @return bool
         */
        public function isMatchingStaticString(\WPML_PB_String $string)
        {
        }
    }
}
namespace {
    class WPML_Elementor_Media_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Elementor_Media_Node_Provider
    {
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_Elementor_Media_Node|null
         */
        public function get($type)
        {
        }
    }
    class WPML_Elementor_Media_Nodes_Iterator implements \IWPML_PB_Media_Nodes_Iterator
    {
        public function __construct(\WPML_Elementor_Media_Node_Provider $node_provider)
        {
        }
        /**
         * @param array $data_array
         * @param string $lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($data_array, $lang, $source_lang)
        {
        }
    }
    class WPML_Elementor_Update_Media_Factory implements \IWPML_PB_Media_Update_Factory
    {
        public function create()
        {
        }
    }
    abstract class WPML_Elementor_Media_Node
    {
        /** @var WPML_Page_Builders_Media_Translate $media_translate */
        protected $media_translate;
        public function __construct(\WPML_Page_Builders_Media_Translate $media_translate)
        {
        }
        /**
         * @param array  $settings
         * @param string $property
         * @param string $lang
         * @param string $source_lang
         *
         * @return mixed
         */
        protected function translate_image_property($settings, $property, $lang, $source_lang)
        {
        }
        /**
         * @param array  $settings
         * @param string $property
         * @param string $lang
         * @param string $source_lang
         *
         * @return mixed
         */
        protected function translate_images_property($settings, $property, $lang, $source_lang)
        {
        }
        /**
         * @param array $image
         * @param string $lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate_image_array($image, $lang, $source_lang)
        {
        }
        abstract function translate($settings, $target_lang, $source_lang);
    }
    class WPML_Elementor_Media_Node_Image extends \WPML_Elementor_Media_Node
    {
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
}
namespace WPML\PB\Elementor\Media\Modules {
    class VideoPlaylist extends \WPML_Elementor_Media_Node
    {
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
}
namespace {
    abstract class WPML_Elementor_Media_Node_With_Slides extends \WPML_Elementor_Media_Node
    {
        /** @return string */
        protected abstract function get_image_property_name();
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
    abstract class WPML_Elementor_Media_Node_With_Images_Property extends \WPML_Elementor_Media_Node
    {
        /** @return string */
        protected abstract function get_property_name();
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
    abstract class WPML_Elementor_Media_Node_With_Image_Property extends \WPML_Elementor_Media_Node
    {
        /** @return string */
        protected abstract function get_property_name();
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Elementor_Media_Node_Slides extends \WPML_Elementor_Media_Node_With_Slides
    {
        protected function get_image_property_name()
        {
        }
    }
    class WPML_Elementor_Media_Node_Image_Carousel extends \WPML_Elementor_Media_Node_With_Images_Property
    {
        protected function get_property_name()
        {
        }
    }
    class WPML_Elementor_Media_Node_WP_Widget_Media_Image extends \WPML_Elementor_Media_Node
    {
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
}
namespace WPML\PB\Elementor\Media\Modules {
    class Video extends \WPML_Elementor_Media_Node_With_Image_Property
    {
        public function get_property_name()
        {
        }
    }
}
namespace {
    class WPML_Elementor_Media_Node_Image_Gallery extends \WPML_Elementor_Media_Node_With_Images_Property
    {
        protected function get_property_name()
        {
        }
    }
}
namespace WPML\PB\Elementor\Media\Modules {
    class AllNodes extends \WPML_Elementor_Media_Node
    {
        /**
         * @param array $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
    class Gallery extends \WPML_Elementor_Media_Node_With_Images_Property
    {
        protected function get_property_name()
        {
        }
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return mixed
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
}
namespace {
    class WPML_Elementor_Media_Node_Image_Box extends \WPML_Elementor_Media_Node_With_Image_Property
    {
        protected function get_property_name()
        {
        }
    }
    class WPML_Elementor_Media_Node_Media_Carousel extends \WPML_Elementor_Media_Node_With_Slides
    {
        protected function get_image_property_name()
        {
        }
    }
    class WPML_Elementor_Media_Node_Call_To_Action extends \WPML_Elementor_Media_Node
    {
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
    class WPML_Elementor_Media_Node_WP_Widget_Media_Gallery extends \WPML_Elementor_Media_Node
    {
        /**
         * @param array  $settings
         * @param string $target_lang
         * @param string $source_lang
         *
         * @return array
         */
        public function translate($settings, $target_lang, $source_lang)
        {
        }
    }
}
namespace WPML\PB\Elementor\Media\Modules {
    class Hotspot extends \WPML_Elementor_Media_Node_With_Image_Property
    {
        protected function get_property_name()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Elementor_Translate_IDs
     */
    class WPML_Elementor_Translate_IDs implements \IWPML_Action
    {
        /**
         * WPML_Elementor_Translate_IDs constructor.
         *
         * @param \WPML\Utils\DebugBackTrace $debug_backtrace
         */
        public function __construct(\WPML\Utils\DebugBackTrace $debug_backtrace)
        {
        }
        public function add_hooks()
        {
        }
        public function translate_theme_location_template_id($template_id)
        {
        }
        /**
         * @param int|string $sub_id
         * @param array      $parsed_condition
         *
         * @return int|string
         */
        public function translate_location_condition_sub_id($sub_id, $parsed_condition)
        {
        }
        public function translate_template_id($template_id)
        {
        }
        public function translate_global_widget_ids($data_array, $post_id)
        {
        }
        /**
         * @param array $data_array
         * @param int   $post_id
         *
         * @return array
         */
        public function translate_product_ids($data_array, $post_id)
        {
        }
    }
    /**
     * Class WPML_Elementor_Translatable_Nodes
     */
    class WPML_Elementor_Translatable_Nodes implements \IWPML_Page_Builders_Translatable_Nodes
    {
        const SETTINGS_FIELD = 'settings';
        const TYPE = 'widgetType';
        const DEFAULT_HEADING_TAG = 'h2';
        const ELEMENT_TYPE = 'elType';
        /**
         * @param string|int $node_id Translatable node id.
         * @param array $element
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $element)
        {
        }
        /**
         * @param string|int $node_id
         * @param array $element
         * @param WPML_PB_String $string
         *
         * @return array
         */
        public function update($node_id, $element, \WPML_PB_String $string)
        {
        }
        /**
         * @param string $node_id
         * @param array $field
         * @param array $settings
         *
         * @return string
         */
        public function get_string_name($node_id, $field, $settings)
        {
        }
        public static function get_nodes_to_translate()
        {
        }
        public function initialize_nodes_to_translate()
        {
        }
    }
}
namespace WPML\PB\Elementor\LanguageSwitcher {
    class Widget extends \Elementor\Widget_Base
    {
        public function __construct($data = [], $args = null, \WPML\PB\Elementor\LanguageSwitcher\WidgetAdaptor $adaptor = null)
        {
        }
        /** @return string */
        public function get_name()
        {
        }
        /** @return string */
        public function get_title()
        {
        }
        /** @return string */
        public function get_icon()
        {
        }
        /** @return array */
        public function get_categories()
        {
        }
        /**
         * Register controls.
         *
         * Used to add new controls to any element type. For example, external
         * developers use this method to register controls in a widget.
         *
         * Should be inherited and register new controls using `add_control()`,
         * `add_responsive_control()` and `add_group_control()`, inside control
         * wrappers like `start_controls_section()`, `start_controls_tabs()` and
         * `start_controls_tab()`.
         */
        protected function register_controls()
        {
        }
        /**
         * Render element.
         *
         * Generates the final HTML on the frontend.
         */
        protected function render()
        {
        }
    }
    class LanguageSwitcher implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @return void
         */
        public function registerWidgets()
        {
        }
        /**
         * Deprecated since Elementor 3.5.0.
         *
         * @return void
         */
        public function registerWidgetsDeprecated()
        {
        }
    }
    class WidgetAdaptor
    {
        public function setTarget(\WPML\PB\Elementor\LanguageSwitcher\Widget $widget)
        {
        }
        /** @return string */
        public function getName()
        {
        }
        /** @return string */
        public function getTitle()
        {
        }
        /** @return string */
        public function getIcon()
        {
        }
        /** @return array */
        public function getCategories()
        {
        }
        /**
         * Register controls.
         *
         * Used to add new controls to any element type. For example, external
         * developers use this method to register controls in a widget.
         *
         * Should be inherited and register new controls using `add_control()`,
         * `add_responsive_control()` and `add_group_control()`, inside control
         * wrappers like `start_controls_section()`, `start_controls_tabs()` and
         * `start_controls_tab()`.
         */
        public function registerControls()
        {
        }
        /**
         * Render element.
         *
         * Generates the final HTML on the frontend.
         */
        public function render()
        {
        }
    }
}
namespace {
    class WPML_Elementor_URLs_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_Elementor_Module_With_Items
     */
    abstract class WPML_Elementor_Module_With_Items implements \IWPML_Page_Builders_Module
    {
        /**
         * @param string $field
         *
         * @return string
         */
        protected abstract function get_title($field);
        /** @return array */
        protected abstract function get_fields();
        /**
         * @param string $field
         *
         * @return string mixed
         */
        protected abstract function get_editor_type($field);
        /**
         * @return string
         */
        public abstract function get_items_field();
        /**
         * @param string|int $node_id
         * @param array $element
         * @param WPML_PB_String[] $strings
         *
         * @return WPML_PB_String[]
         */
        public function get($node_id, $element, $strings)
        {
        }
        /**
         * @param int|string $node_id
         * @param mixed $element
         * @param WPML_PB_String $string
         *
         * @return mixed
         */
        public function update($node_id, $element, \WPML_PB_String $string)
        {
        }
        /**
         * @param array $element
         *
         * @return mixed
         */
        public function get_items($element)
        {
        }
    }
}
namespace WPML\PB\Elementor\Modules {
    class MediaCarousel extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Elementor_Slides
     */
    class WPML_Elementor_Slides extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Icon_List
     */
    class WPML_Elementor_Icon_List extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Accordion
     */
    class WPML_Elementor_Accordion extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Price_Table
     */
    class WPML_Elementor_Price_Table extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Accordion
     */
    class WPML_Elementor_Testimonial_Carousel extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\PB\Elementor\Modules {
    class Reviews extends \WPML_Elementor_Module_With_Items
    {
        protected function get_title($field)
        {
        }
        public function get_fields()
        {
        }
        protected function get_editor_type($field)
        {
        }
        public function get_items_field()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Elementor_Toggle
     */
    class WPML_Elementor_Toggle extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Form
     */
    class WPML_Elementor_Form extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\PB\Elementor\Modules {
    class ModuleWithItemsFromConfig extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @param string $itemsField
         * @param array  $config
         */
        public function __construct($itemsField, array $config)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_title($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_fields()
        {
        }
        /**
         * @inheritDoc
         */
        public function get_editor_type($field)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_items_field()
        {
        }
    }
    class MultipleGallery extends \WPML_Elementor_Module_With_Items
    {
        protected function get_title($field)
        {
        }
        public function get_fields()
        {
        }
        protected function get_editor_type($field)
        {
        }
        public function get_items_field()
        {
        }
    }
    class Hotspot extends \WPML_Elementor_Module_With_Items
    {
        protected function get_title($field)
        {
        }
        public function get_fields()
        {
        }
        protected function get_editor_type($field)
        {
        }
        public function get_items_field()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Elementor_Price_List
     */
    class WPML_Elementor_Price_List extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
    /**
     * Class WPML_Elementor_Tabs
     */
    class WPML_Elementor_Tabs extends \WPML_Elementor_Module_With_Items
    {
        /**
         * @return string
         */
        public function get_items_field()
        {
        }
        /**
         * @return array
         */
        public function get_fields()
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_title($field)
        {
        }
        /**
         * @param string $field
         *
         * @return string
         */
        protected function get_editor_type($field)
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder {
    abstract class BaseHooks
    {
        const HANDLE = 'wpml-compatibility-fusion';
        const SCRIPT_SRC = '/dist/js/compatibility/fusion_builder/app.js';
        const STYLE_SRC = '/res/css/compatibility/fusion_builder.css';
        const OBJECT_NAME = 'WPML_COMPATIBILITY_FUSION';
        protected function enqueue_style()
        {
        }
        protected function enqueue_script()
        {
        }
        protected function localize_script($data)
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder\Frontend {
    class Hooks extends \WPML\Compatibility\FusionBuilder\BaseHooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function __construct(\SitePress $sitepress, \WPML_Translation_Element_Factory $elementFactory)
        {
        }
        public function add_hooks()
        {
        }
        public function frontendScripts()
        {
        }
        /**
         * Adds required CSS class in menu links. This CSS class is used by
         * WPML_Fix_Links_In_Display_As_Translated_Content::fix_fallback_links() to skip fixing language switcher links.
         *
         * Notes:
         * - This is intended for themes that provide custom menu walkers.
         * - For this to work, the custom menu walker must call `nav_menu_link_attributes` filter.
         *
         * @param array $atts
         * @param mixed $item
         *
         * @return array
         */
        public function addMenuLinkCssClass($atts, $item)
        {
        }
        /**
         * @param array $data
         * @return array
         */
        public function translateOffCanvasConditionId($data)
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Plugin_Fusion_Global_Element_Hooks extends \WPML\Compatibility\FusionBuilder\BaseHooks implements \IWPML_Action
    {
        const BEFORE_ADD_GLOBAL_ELEMENTS_PRIORITY = 5;
        const GLOBAL_SHORTCODE_START = '[fusion_global id="';
        const ACTION = 'wpml_compatibility_fusion_get_template_translation_icons';
        const LAYOUTS_SCREEN_ID = 'avada_page_avada-layouts';
        const LAYOUTS_SCREEN_ID_BEFORE_V7 = 'fusion-builder_page_fusion-layouts';
        const SECTIONS_SCREEN_ID = 'avada-layout-sections';
        const SECTIONS_SCREEN_ID_BEFORE_V7 = 'fusion-builder_page_fusion-layout-sections';
        public function __construct(\IWPML_Current_Language $current_language, \WPML_Translation_Element_Factory $element_factory, \WPML_Custom_Columns $custom_columns, array $activeLanguages, \WPML_Post_Status_Display $postStatusDisplay)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param bool $render
         *
         * @return bool
         */
        public function wpml_ls_exclude_in_menu_filter($render)
        {
        }
        public function translate_global_element_ids($content)
        {
        }
        /**
         * Filter overrides.
         *
         * @param WP_Post|stdClass|false $override  The override.
         *
         * @return WP_Post|stdClass|false
         */
        public function fusion_get_override_filter($override)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_language_column_header($columns)
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param string     $column_name
         * @param array|null $item
         */
        public function add_language_column_content($column_name, $item = \null)
        {
        }
        public function get_template_translation_icons()
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder {
    class DynamicContent extends \WPML\Compatibility\BaseDynamicContent
    {
        /** @var array */
        protected $positions = ['before', 'after', 'fallback'];
        /**
         * Sets $positions dynamic content to be translatable.
         *
         * @param string|array $string   The decoded string so far.
         * @param string $encoding The encoding used.
         *
         * @return string|array
         */
        public function decode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Rebuilds dynamic content with translated strings.
         *
         * @param string|array $string   The field array or string.
         * @param string       $encoding The encoding used.
         *
         * @return string
         */
        public function encode_dynamic_content($string, $encoding)
        {
        }
        /**
         * Check if a certain field contains dynamic content.
         *
         * @param string $string The string to check.
         *
         * @return bool
         */
        protected function is_dynamic_content($string)
        {
        }
        /**
         * Decode a dynamic-content field.
         *
         * @param string $string The string to decode.
         *
         * @return array
         */
        protected function decode_field($string)
        {
        }
        /**
         * Encode a dynamic-content field.
         *
         * @param array $field The field to encode.
         *
         * @return string
         */
        protected function encode_field($field)
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder\Hooks {
    class Editor implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_Compatibility_Plugin_Fusion_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder {
    class FormContent implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        const CPT_FORM = 'fusion_form';
        public function add_hooks()
        {
        }
        /**
         * Avada's team tried to add WPML support for forms
         * but it's not working at all. We'll just make sure
         * to detach theirs filters.
         */
        public function disableAvadaBuiltinShortcodeHooks()
        {
        }
        /**
         * Decodes form shortcodes.
         *
         * @param string|array $string
         *
         * @return array|string
         */
        public function decode($string)
        {
        }
        /**
         * Encodes form shortcodes.
         *
         * @param string|array $string
         *
         * @return string
         */
        public function encode($string)
        {
        }
        /**
         * @param array $atts
         *
         * @return array
         */
        public function convertForm($atts)
        {
        }
    }
}
namespace WPML\Compatibility\FusionBuilder\Backend {
    class Hooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        public function add_hooks()
        {
        }
        public function invalidateMegamenuHook()
        {
        }
    }
}
namespace WPML\PB {
    class App
    {
        public static function run()
        {
        }
    }
    /**
     * We had a first project of WPML Page Builders abandoned
     * some years before (last version v1.1.3), when we included the code inside ST,
     * and then in Core as composer package.
     *
     * This old plugin contains outdated code and we cannot afford
     * to have it running in parallel while the new version is also
     * embedded in Core.
     */
    class OldPlugin
    {
        /**
         * @return bool
         */
        public static function handle()
        {
        }
    }
    class LegacyIntegration
    {
        public static function load()
        {
        }
    }
}
namespace {
    class WPML_Troubleshooting_Terms_Menu
    {
        /**
         * Displays the admin notice informing about terms in the old format, using the language suffix.
         * The notice is displayed until it is either dismissed or the update button is pressed.
         */
        public static function display_terms_with_suffix_admin_notice()
        {
        }
        /**
         * Returns the HTML for the display of all terms with a language suffix in the troubleshooting menu.
         *
         * @return string
         */
        public static function display_terms_with_suffix()
        {
        }
        /**
         * @param string $term_name
         * Strips a term off all language suffixes in the form @<lang_code> on it.
         *
         * @return string
         */
        public static function strip_language_suffix($term_name)
        {
        }
        /**
         * Ajax handler for the troubleshoot page. Updates the term name on those terms given via the Ajax action.
         */
        public static function wpml_update_term_names_troubleshoot()
        {
        }
    }
    abstract class WPML_TM_Menus
    {
        protected $post_types;
        protected $tab_items;
        protected $current_shown_item;
        /** @var  WPML_UI_Screen_Options_Pagination|null $dashboard_pagination */
        protected $dashboard_pagination;
        function __construct()
        {
        }
        public function display_main(\WPML_UI_Screen_Options_Pagination $dashboard_pagination = \null)
        {
        }
        protected abstract function render_main();
        protected abstract function build_tab_items();
        protected function render_items()
        {
        }
        public function build_content_dashboard_fetch_translations_box()
        {
        }
        /**
         * Used only by unit tests at the moment
         *
         * @return mixed
         */
        public function get_post_types()
        {
        }
        protected function heading($text)
        {
        }
        protected abstract function get_page_slug();
        protected abstract function get_default_tab();
    }
    /**
     * Class WPML_WPDB_User
     *
     * Superclass for all WPML classes using the @global wpdb $wpdb
     *
     * @since 3.2.3
     */
    abstract class WPML_WPDB_User
    {
        /** @var wpdb $wpdb */
        public $wpdb;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        public function get_wpdb()
        {
        }
    }
    /**
     * Class WPML_WPDB_And_SP_User
     */
    abstract class WPML_WPDB_And_SP_User extends \WPML_WPDB_User
    {
        /** @var SitePress $sitepress */
        protected $sitepress;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         */
        public function __construct(&$wpdb, &$sitepress)
        {
        }
    }
    abstract class WPML_Language_Filter_Bar extends \WPML_WPDB_And_SP_User
    {
        protected $active_languages;
        protected $current_language;
        protected function init()
        {
        }
        protected function lang_span($lang_code, $count)
        {
        }
        protected function strong_lang_span_cover($lang_code, $count)
        {
        }
        protected function sanitize_request()
        {
        }
        protected abstract function get_count_data($element_type);
        protected function extra_conditions_snippet()
        {
        }
        protected function get_counts($element_type)
        {
        }
    }
    class WPML_Post_Language_Filter extends \WPML_Language_Filter_Bar
    {
        protected function sanitize_request()
        {
        }
        public function register_scripts()
        {
        }
        public function post_language_filter()
        {
        }
        protected function extra_conditions_snippet()
        {
        }
        protected function get_count_data($type)
        {
        }
    }
    class WPML_Posts_Listing_Page
    {
        public function __construct()
        {
        }
        public function pre_populate_caches()
        {
        }
    }
    class WPML_Meta_Boxes_Post_Edit_Ajax_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return WPML_Meta_Boxes_Post_Edit_Ajax
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Meta_Boxes_Post_Edit_HTML
     */
    class WPML_Meta_Boxes_Post_Edit_HTML
    {
        const FLAG_HAS_MEDIA_OPTIONS = 'wpml_has_media_options';
        const TAXONOMIES_PRIORITY = 'translation_priority';
        const WRAPPER_ID = 'icl_div';
        /**
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translation
         */
        function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation)
        {
        }
        /**
         * @param null|WP_Post $post
         */
        public function render_languages($post = \null)
        {
        }
    }
    class WPML_Meta_Boxes_Post_Edit_Ajax implements \IWPML_Action
    {
        const ACTION_GET_META_BOXES = 'wpml_get_meta_boxes_html';
        const ACTION_GET_ADMIN_LS = 'wpml_get_admin_ls_links';
        const ACTION_DUPLICATE = 'make_duplicates';
        public function __construct(\WPML_Meta_Boxes_Post_Edit_HTML $meta_boxes_post_edit_html, \TranslationManagement $iclTranslationManagement, \WPML_Admin_Language_Switcher $admin_language_switcher)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $hook
         */
        public function enqueue_scripts($hook)
        {
        }
        public function render_meta_boxes_html()
        {
        }
        public function get_admin_ls_links()
        {
        }
        /**
         * @param bool $is_edit_page
         *
         * @return bool
         */
        public function force_post_edit_when_refreshing_meta_boxes($is_edit_page)
        {
        }
        public function duplicate_post()
        {
        }
    }
    /**
     * Class WPML_SP_User
     *
     * Superclass for all WPML classes using the @global SitePress $sitepress directly
     *
     * @since 3.2.3
     */
    abstract class WPML_SP_User
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(&$sitepress)
        {
        }
    }
    class WPML_Sync_Custom_Field_Note extends \WPML_SP_User
    {
        /**
         * Prints and admins notice if custom fields where copied to a new post.
         *
         * @param string $source_lang
         * @param int[]  $translations
         */
        public function print_sync_copy_custom_field_note($source_lang, $translations)
        {
        }
    }
    class WPML_Post_Status_Display_Factory
    {
        public function __construct(\SitePress $sitepress = \null)
        {
        }
        public function create()
        {
        }
    }
    class SitePress_EditLanguages
    {
        const ACCEPTED_MIME_TYPES = ['gif' => 'image/gif', 'jpg|jpeg|jpe' => 'image/jpg', 'png' => 'image/png', 'svg' => 'image/svg+xml'];
        public static $active_languages;
        public $upload_dir;
        public $is_writable = \false;
        public $required_fields = ['code' => '', 'english_name' => '', 'translations' => 'array', 'flag' => '', 'default_locale' => '', 'tag' => ''];
        public $validation_failed = \false;
        /**
         * This is a helper variable that stores just saved mapping.
         * It is needed to avoid the problem with delayed mapping propagation in ATE.
         * When we save a new mapping, we try to retrieve those data immediately after which does not always work.
         * Instead of that, we store this data here after saving. When a user reloads the page, we will ask ATE API for those data.
         *
         * @var array|null
         */
        public static $newlySavedMapping;
        /**
         * @param \WPML_Flags $wpml_flags
         * @param bool        $update_language_packs_if_needed
         */
        public function __construct(\WPML_Flags $wpml_flags, $update_language_packs_if_needed = \true)
        {
        }
        /**
         * @param bool $clearCache
         *
         * @return array
         */
        public static function getLanguagesAvailableInATE($clearCache = \false)
        {
        }
        function render()
        {
        }
        function edit_table()
        {
        }
        public static function get_active_languages()
        {
        }
        function update_main_table($id, $code, $default_locale, $encode_url, $tag)
        {
        }
        function insert_translation($name, $language_code, $display_language_code)
        {
        }
        function update_translation($name, $language_code, $display_language_code)
        {
        }
        function insert_flag($lang_code, $flag, $from_template)
        {
        }
        function update_flag($lang_code, $flag, $from_template)
        {
        }
        function update()
        {
        }
        function insert_one($data)
        {
        }
        function validate_one($id, $data)
        {
        }
        function delete_language($lang_id)
        {
        }
        function sanitize($data)
        {
        }
        function check_extension($file)
        {
        }
        function get_errors()
        {
        }
        function set_errors($str = \false)
        {
        }
        function get_messages()
        {
        }
        function set_messages($str = \false)
        {
        }
        function upload_flag($id)
        {
        }
        function migrate()
        {
        }
    }
    class WPML_TM_Menus_Settings extends \WPML_TM_Menus
    {
        public function init()
        {
        }
        protected function render_main()
        {
        }
        protected function build_tab_items()
        {
        }
        public function build_content_mcs()
        {
        }
        public function build_content_translation_notifications()
        {
        }
        protected function get_page_slug()
        {
        }
        protected function get_default_tab()
        {
        }
    }
    class WPML_Post_Status_Display
    {
        const ICON_TRANSLATION_EDIT = 'otgs-ico-edit';
        const ICON_TRANSLATION_NEEDS_UPDATE = 'otgs-ico-refresh';
        const ICON_TRANSLATION_ADD = 'otgs-ico-add';
        const ICON_TRANSLATION_ADD_DISABLED = 'otgs-ico-add-disabled';
        const ICON_TRANSLATION_EDIT_DISABLED = 'otgs-ico-edit-disabled';
        const ICON_TRANSLATION_IN_PROGRESS = 'otgs-ico-in-progress';
        public function __construct($active_languages)
        {
        }
        /**
         * This function takes a post ID and a language as input.
         * It will always return the status icon,
         * of the version of the input post ID in the language given as the second parameter.
         *
         * @param int    $post_id  original post ID
         * @param string $lang     language of the translation
         *
         * @return string
         */
        public function get_status_html($post_id, $lang)
        {
        }
        public function get_status_data($post_id, $lang)
        {
        }
    }
    class WPML_Translation_Selector extends \WPML_SP_User
    {
        public function __construct(&$sitepress, $default_language, $source_language, $element_id)
        {
        }
        function add_translation_of_selector_to_page($trid, $current_language, $selected_language, $untranslated_ids)
        {
        }
    }
    class WPML_Menu_Sync_Display
    {
        public function __construct($menu_id, $icl_ms)
        {
        }
        public function print_sync_field($index)
        {
        }
    }
    /**
     * Class WPML_TM_Dashboard
     */
    class WPML_TM_Dashboard
    {
        const LIMIT_RETRIEVED_POSTS_VALUE = 200;
        /**
         * WPML_TM_Dashboard constructor.
         *
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * Required for integration test to set smaller limit for test performance
         *
         * @param int|null $limit_retrieved_posts_value
         */
        public function set_limit_retrieved_posts_value($limit_retrieved_posts_value)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get_documents($args = array())
        {
        }
        /**
         * Add additional where conditions to support the following query arguments:
         *  - post_title_like         - Allow query posts with SQL LIKE in post title.
         *  - post_language_to        - Allow query posts with language they are translated to.
         *  - post_translation_status - Allow to query posts by their translation status.
         *
         * @param string $where
         * @param object $wp_query
         *
         * @return string
         */
        public function add_dashboard_filter_conditions($where, $wp_query)
        {
        }
    }
    class WPML_Dashboard_Ajax
    {
        public function enqueue_js()
        {
        }
    }
    class WPML_Admin_Language_Switcher
    {
        function render()
        {
        }
        public function get_languages_links()
        {
        }
    }
    class SitePress_Table extends \WP_List_Table
    {
        public function __construct()
        {
        }
    }
    class WPML_TM_Menus_Management extends \WPML_TM_Menus
    {
        const SKIP_TM_WIZARD_META_KEY = 'wpml_skip_tm_wizard';
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        protected function render_main()
        {
        }
        /**
         * It builds all the sections.
         */
        protected function build_tab_items()
        {
        }
        public function build_content_dashboard()
        {
        }
        public function build_content_basket()
        {
        }
        public function get_translators_dropdown($lang_code)
        {
        }
        public function build_content_translation_jobs()
        {
        }
        public function build_tp_com_log()
        {
        }
        public function get_dashboard_documents()
        {
        }
        public function build_content_dashboard_filter()
        {
        }
        /**
         * @param array $post_types
         *
         * @since 2.6.0
         *
         * @return array
         */
        public function exclude_attachments($post_types)
        {
        }
        protected function get_page_slug()
        {
        }
        protected function get_default_tab()
        {
        }
    }
    class WPML_Taxonomy_Translation_Table_Display
    {
        public static function enqueue_taxonomy_table_resources($sitepress)
        {
        }
        public static function wpml_get_table_taxonomies(\SitePress $sitepress)
        {
        }
        public static function wpml_get_terms_and_labels_for_taxonomy_table()
        {
        }
    }
    class WPML_Tax_Menu_Loader
    {
        /** @var wpdb $wpdb */
        public $wpdb;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         * @param string    $taxonomy
         */
        public function __construct($wpdb, $sitepress, $taxonomy)
        {
        }
        public function get_wpdb()
        {
        }
        public function init()
        {
        }
        /**
         * Filters the display of the categories list in order to prevent the default category from being delete-able.
         * This is done by printing a hidden div containing a JSON encoded array with all category id's, the checkboxes of which are to be removed.
         */
        public function category_display_action()
        {
        }
        public function js_scripts_tags()
        {
        }
        function wp_dropdown_cats_select_parent($html, $args)
        {
        }
        /**
         * @param Object $term
         */
        public function wpml_edit_term_form($term)
        {
        }
        function _tax_adding()
        {
        }
        /**
         * If user perform bulk taxonomy deletion when displaying non-default
         * language taxonomies, after deletion should stay with same language
         *
         * @param string $location Url where browser will redirect.
         * @return string Url where browser will redirect.
         */
        public function preserve_lang_param($location)
        {
        }
    }
    class WPML_Taxonomy_Element_Language_Dropdown
    {
        function add_language_selector_to_page($active_languages, $selected_language, $translations, $element_id, $type)
        {
        }
    }
    class WPML_Taxonomy_Translation_Sync_Display
    {
        public function __construct()
        {
        }
        public function ajax_sync_preview()
        {
        }
        public function ajax_sync_save()
        {
        }
    }
    class WPML_Term_Language_Filter extends \WPML_Language_Filter_Bar
    {
        function terms_language_filter($echo = \true)
        {
        }
        protected function get_count_data($taxonomy)
        {
        }
    }
    /**
     * WPML_Element_Translation Class
     *
     * @package wpml-core
     * @abstract
     */
    abstract class WPML_Element_Translation extends \WPML_WPDB_User
    {
        /** @var array[] $element_data */
        protected $element_data = [];
        /** @var array[] $translations */
        protected $translations = [];
        /** @var array[] $trid_groups */
        protected $trid_groups = [];
        /** @var array[] $trid_groups */
        protected $translation_ids_element = [];
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        protected abstract function get_element_join();
        protected abstract function get_type_prefix();
        /**
         * Clears the cached translations.
         */
        public function reload()
        {
        }
        public function get_element_trid($element_id)
        {
        }
        /**
         * @param int        $element_id
         * @param string     $lang
         * @param bool|false $original_fallback if true will return input $element_id if no translation is found
         *
         * @return null|int
         */
        public function element_id_in($element_id, $lang, $original_fallback = \false)
        {
        }
        /**
         * @param int  $element_id
         * @param bool $root if true gets the root element of the trid which itself
         * has no original. Otherwise returns the direct original of the given
         * element_id.
         *
         * @return int|null null if the element has no original
         */
        public function get_original_element($element_id, $root = \false)
        {
        }
        public function get_element_id($lang, $trid)
        {
        }
        /**
         * @param int $element_id
         *
         * @return null|string
         */
        public function get_element_lang_code($element_id)
        {
        }
        /**
         * @param int    $element_id
         * @param string $output
         *
         * @return array|null|stdClass
         */
        public function get_element_language_details($element_id, $output = \OBJECT)
        {
        }
        public function get_source_lang_code($element_id)
        {
        }
        public function get_type($element_id)
        {
        }
        public function get_source_lang_from_translation_id($translation_id)
        {
        }
        public function get_translation_id($element_id)
        {
        }
        public function get_translations_ids()
        {
        }
        /**
         * @param int       $element_id
         * @param int|false $trid
         * @param bool      $actual_translations_only
         *
         * @return array<int,int>
         */
        public function get_element_translations($element_id, $trid = \false, $actual_translations_only = \false)
        {
        }
        public function get_element_from_translation_id($translation_id)
        {
        }
        public function get_trid_from_translation_id($translation_id)
        {
        }
        public function get_trids()
        {
        }
        public function prefetch_ids($element_ids)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public function is_a_duplicate($post_id)
        {
        }
    }
    /**
     * Class WPML_Post_Translation
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    abstract class WPML_Post_Translation extends \WPML_Element_Translation
    {
        protected $settings;
        protected $post_translation_sync;
        public static $defer_term_counting = \false;
        /**
         * @param array $settings
         * @param wpdb  $wpdb
         */
        public function __construct(&$settings, &$wpdb)
        {
        }
        protected function is_setup_complete()
        {
        }
        public function init()
        {
        }
        public function get_original_post_status($trid, $source_lang_code = \null)
        {
        }
        public function get_original_post_ID($trid, $source_lang_code = \null)
        {
        }
        public function get_original_menu_order($trid, $source_lang_code = \null)
        {
        }
        public function get_original_comment_status($trid, $source_lang_code = \null)
        {
        }
        public function get_original_ping_status($trid, $source_lang_code = \null)
        {
        }
        public function get_original_post_format($trid, $source_lang_code = \null)
        {
        }
        /**
         * @param int     $pidd
         * @param WP_Post $post
         *
         * @return void
         */
        public abstract function save_post_actions($pidd, $post);
        /** @param int $post_id */
        public function attachment_actions($post_id)
        {
        }
        public function shutdown_action()
        {
        }
        public function trash_translation($trans_id)
        {
        }
        public function untrash_translation($trans_id)
        {
        }
        function untrashed_post_actions($post_id)
        {
        }
        public function delete_post_translation_entry($post_id)
        {
        }
        public function trashed_post_actions($post_id)
        {
        }
        /**
         * This function holds all actions to be run after deleting a post.
         * 1. Delete the posts entry in icl_translations.
         * 2. Set one of the posts translations or delete all translations of the post, depending on sitepress settings.
         *
         * @param Integer $post_id
         * @param bool $keep_db_entries Sets whether icl_translations entries are to be deleted or kept, when hooking this to
         * post trashing we want them to be kept.
         */
        public function delete_post_actions($post_id, $keep_db_entries = \false)
        {
        }
        /**
         * @param int    $post_id
         * @param string $post_status
         *
         * @return null|int
         */
        abstract function get_save_post_trid($post_id, $post_status);
        /**
         * @param integer $post_id
         * @param SitePress $sitepress
         * @return bool|mixed|null|string|void
         */
        public function get_save_post_lang($post_id, $sitepress)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         * @param string $default_language
         *
         * @return string|null
         */
        protected abstract function get_save_post_source_lang($trid, $language_code, $default_language);
        /**
         * Sets a posts language details, invalidates caches relating to the post and triggers
         * synchronisation actions across translations of the just saved post.
         *
         * @param int     $trid
         * @param array   $post_vars
         * @param string  $language_code
         * @param string  $source_language
         *
         * @used-by \WPML_Post_Translation::save_post_actions as final step of the WPML Core save_post actions
         */
        protected function after_save_post($trid, $post_vars, $language_code, $source_language)
        {
        }
        public function has_save_post_action($post)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        protected function is_editing_different_post($post_id)
        {
        }
        protected function get_element_join()
        {
        }
        protected function get_type_prefix()
        {
        }
        public function is_translated_type($post_type)
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return string[] all language codes the post can be translated into
         */
        public function get_allowed_target_langs($post)
        {
        }
        public function set_debug_backtrace(\WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        /**
         * @return bool
         */
        protected function is_inner_post_insertion()
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return array
         */
        protected function get_post_vars($post)
        {
        }
        protected function defer_term_counting()
        {
        }
        /**
         * @return self|WPML_Frontend_Post_Actions|WPML_Admin_Post_Actions
         */
        public static function getGlobalInstance()
        {
        }
    }
    class WPML_Frontend_Post_Actions extends \WPML_Post_Translation
    {
        public function init()
        {
        }
        /**
         * @param int    $post_id
         * @param string $post_status
         *
         * @return null|int
         */
        function get_save_post_trid($post_id, $post_status)
        {
        }
        /**
         * @param int     $pidd
         * @param WP_Post $post
         *
         * @return void
         */
        public function save_post_actions($pidd, $post)
        {
        }
        protected function get_save_post_source_lang($trid, $language_code, $default_language)
        {
        }
    }
    /**
     * Class WPML_Post_Duplication
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Post_Duplication extends \WPML_WPDB_And_SP_User
    {
        function get_duplicates($master_post_id)
        {
        }
        function make_duplicate($master_post_id, $lang)
        {
        }
    }
    /**
     * Class WPML_Admin_Post_Actions
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Admin_Post_Actions extends \WPML_Post_Translation
    {
        /**
         * @depecated since 4.6.5 You should use constants from WPML\Media\Option
         */
        const DUPLICATE_MEDIA_META_KEY = \WPML\Media\Option::DUPLICATE_MEDIA_KEY;
        const DUPLICATE_FEATURED_META_KEY = \WPML\Media\Option::DUPLICATE_FEATURED_KEY;
        const DUPLICATE_MEDIA_GLOBAL_KEY = 'duplicate_media';
        const DUPLICATE_FEATURED_GLOBAL_KEY = 'duplicate_media';
        public function init()
        {
        }
        /**
         * @param int    $post_id
         * @param string $post_status
         *
         * @return null|int
         */
        function get_save_post_trid($post_id, $post_status)
        {
        }
        /**
         * @param int     $post_id
         * @param WP_Post $post
         */
        public function save_post_actions($post_id, $post)
        {
        }
        /**
         * @param integer   $post_id
         * @param SitePress $sitepress
         *
         * @return null|string
         */
        public function get_save_post_lang($post_id, $sitepress)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         * @param string $default_language
         *
         * @return null|string
         */
        protected function get_save_post_source_lang($trid, $language_code, $default_language)
        {
        }
        public function get_trid_from_referer()
        {
        }
        protected function get_http_referer()
        {
        }
    }
    /**
     * Class WPML_Create_Post_Helper
     *
     * @since 3.2
     */
    class WPML_Create_Post_Helper
    {
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param array       $postarr will be escaped inside the method
         * @param string|null $lang
         * @param bool        $wp_error
         *
         * @return int|WP_Error
         */
        public function insert_post(array $postarr, $lang = \null, $wp_error = \false)
        {
        }
        public function allow_empty_post()
        {
        }
    }
    abstract class WPML_SP_And_PT_User extends \WPML_SP_User
    {
        /** @var  WPML_Post_Translation $post_translation */
        protected $post_translation;
        /**
         * @param WPML_Post_Translation $post_translation
         * @param SitePress             $sitepress
         */
        public function __construct(&$post_translation, &$sitepress)
        {
        }
    }
    /**
     * Class WPML_Post_Synchronization
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Post_Synchronization extends \WPML_SP_And_PT_User
    {
        /**
         * @param array                 $settings
         * @param WPML_Post_Translation $post_translations
         * @param SitePress             $sitepress
         */
        public function __construct(&$settings, &$post_translations, &$sitepress)
        {
        }
        public function sync_with_duplicates($post_id)
        {
        }
        /**
         * @param int  $post_id
         * @param bool $keep_db_entries
         */
        public function delete_post_actions($post_id, $keep_db_entries = \false)
        {
        }
        public function shutdown_action()
        {
        }
        function untrashed_post_actions($post_id)
        {
        }
        public function sync_with_translations($post_id, $post_vars = \false)
        {
        }
    }
}
namespace WPML\Core\PostTranslation {
    class SyncTranslationDocumentStatus implements \IWPML_Action, \IWPML_DIC_Action, \IWPML_Backend_Action, \IWPML_REST_Action
    {
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $newStatus
         * @param string $oldStatus
         * @param \WP_Post $post
         */
        public function onPostStatusChange($newStatus, $oldStatus, $post)
        {
        }
    }
}
namespace {
    class WPML_Comment_Duplication
    {
        public function move_to_original($duplicate_of, $post_duplicates, $comment)
        {
        }
        public function get_correct_parent($comment, $dup_id)
        {
        }
        public function insert_duplicated_comment($comment, $dup_id, $original_cid)
        {
        }
    }
    abstract class WPML_Hierarchy_Sync extends \WPML_WPDB_User
    {
        const CACHE_GROUP = __CLASS__;
        protected $original_elements_table_alias = 'org';
        protected $translated_elements_table_alias = 'tra';
        protected $original_elements_language_table_alias = 'iclo';
        protected $translated_elements_language_table_alias = 'iclt';
        protected $correct_parent_table_alias = 'corr';
        protected $correct_parent_language_table_alias = 'iclc';
        protected $original_parent_table_alias = 'parents';
        protected $original_parent_language_table_alias = 'parent_lang';
        protected $element_id_column;
        protected $parent_element_id_column;
        protected $parent_id_column;
        protected $element_type_column;
        protected $element_type_prefix;
        protected $elements_table;
        protected $lang_info_table;
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        public function clean_cache()
        {
        }
        public function get_unsynced_elements($element_types, $ref_lang_code = \false)
        {
        }
        /**
         * @param string|array $element_types
         * @param bool         $ref_lang_code
         */
        public function sync_element_hierarchy($element_types, $ref_lang_code = \false)
        {
        }
        /**
         * @param string $element_type
         *
         * @return mixed
         */
        public abstract function is_hierarchical($element_type);
    }
    class WPML_Post_Hierarchy_Sync extends \WPML_Hierarchy_Sync
    {
        protected $element_id_column = 'ID';
        protected $parent_element_id_column = 'ID';
        protected $parent_id_column = 'post_parent';
        protected $element_type_column = 'post_type';
        protected $element_type_prefix = 'post_';
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        /**
         * @param string $element_type
         *
         * @return bool
         */
        public function is_hierarchical($element_type)
        {
        }
    }
    class WPML_Root_Page_Actions
    {
        public function __construct(&$sitepress_settings)
        {
        }
        public function delete_root_page_lang()
        {
        }
        /**
         * Checks if a given $url points at the root page
         *
         * @param string $url
         *
         * @return bool
         *
         * @uses \WPML_Root_Page::is_root_page
         */
        public function is_url_root_page($url)
        {
        }
        /**
         * If a page is used as the root page, returns the id of that page, otherwise false.
         *
         * @return int|false
         */
        public function get_root_page_id()
        {
        }
        function wpml_home_url_init()
        {
        }
        function wpml_home_url_exclude_root_page_from_menus($args)
        {
        }
        /**
         * Filters out all page menu items that point to the root page.
         *
         * @param object[] $items
         *
         * @return array
         *
         * @hook wp_get_nav_menu_items
         */
        function exclude_root_page_menu_item($items)
        {
        }
        function wpml_home_url_exclude_root_page($excludes)
        {
        }
        function wpml_home_url_exclude_root_page2($args)
        {
        }
        function wpml_home_url_get_pages($pages)
        {
        }
        function wpml_home_url_language_box_setup()
        {
        }
        function wpml_home_url_language_box($post)
        {
        }
        function wpml_home_url_save_post_actions($pidd, $post)
        {
        }
        function wpml_home_url_setup_root_page()
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return mixed
         */
        function wpml_home_url_parse_query($q, $remove_filter = 'wpml_home_url_parse_query')
        {
        }
        function action_wpml_home_url_parse_query($q)
        {
        }
    }
    /**
     * Class WPML_WordPress_Actions
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_WordPress_Actions
    {
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public static function is_bulk_trash($post_id)
        {
        }
        /**
         * @param int $post_id
         *
         * @return bool
         */
        public static function is_bulk_untrash($post_id)
        {
        }
        public static function is_heartbeat()
        {
        }
        protected static function is_trash_action()
        {
        }
        protected static function is_untrash_action()
        {
        }
        /**
         * @param string $action
         *
         * @return bool
         */
        protected static function is_action($action, $type = 'get')
        {
        }
        /**
         * @param int $post_id
         * @param bool $check_ids
         *
         * @return bool
         */
        protected static function post_id_in_bulk($post_id, $check_ids = \false)
        {
        }
    }
    class WPML_Installation extends \WPML_WPDB_And_SP_User
    {
        const WPML_START_VERSION_KEY = 'wpml_start_version';
        public static function getStartVersion()
        {
        }
        function go_to_setup1()
        {
        }
        public function finish_step2($active_languages)
        {
        }
        public function set_active_languages($arr)
        {
        }
        public function finish_installation()
        {
        }
        public function store_site_key($site_key = \false)
        {
        }
        public function finish_step3()
        {
        }
        public function finish_step1($initial_language_code)
        {
        }
        /**
         * @param string $display_language
         * @param bool   $active_only
         * @param bool   $major_first
         * @param string $order_by
         *
         * @return array<string,\stdClass>
         */
        public function refresh_active_lang_cache($display_language, $active_only = \false, $major_first = \false, $order_by = 'english_name')
        {
        }
        public function update_active_language($lang)
        {
        }
        function reset_language_data()
        {
        }
    }
    class WPML_Settings_Helper
    {
        const KEY_CPT_UNLOCK_OPTION = 'custom_posts_unlocked_option';
        const KEY_TAXONOMY_UNLOCK_OPTION = 'taxonomies_unlocked_option';
        /** @var SitePress */
        protected $sitepress;
        /** @var WPML_Post_Translation */
        protected $post_translation;
        /**
         * @param WPML_Post_Translation $post_translation
         * @param SitePress             $sitepress
         */
        public function __construct(\WPML_Post_Translation $post_translation, \SitePress $sitepress)
        {
        }
        function set_post_type_translatable($post_type)
        {
        }
        function set_post_type_display_as_translated($post_type)
        {
        }
        function set_post_type_not_translatable($post_type)
        {
        }
        function set_taxonomy_translatable($taxonomy)
        {
        }
        function set_taxonomy_display_as_translated($taxonomy)
        {
        }
        function set_taxonomy_translatable_mode($taxonomy, $mode)
        {
        }
        function set_taxonomy_not_translatable($taxonomy)
        {
        }
        function set_post_type_translation_unlocked_option($post_type, $unlocked = \true)
        {
        }
        function set_taxonomy_translation_unlocked_option($taxonomy, $unlocked = \true)
        {
        }
        /**
         * @deprecated use the action `wpml_activate_slug_translation` instead
         *             or `WPML_ST_Post_Slug_Translation_Settings` instead (on ST side)
         *
         * @param string $post_type
         */
        function activate_slug_translation($post_type)
        {
        }
        /**
         * @deprecated use `WPML_ST_Post_Slug_Translation_Settings` instead (on ST side)
         *
         * @param string $post_type
         */
        function deactivate_slug_translation($post_type)
        {
        }
        /**
         * @param array[] $taxs_obj_type
         *
         * @see \WPML_Config::maybe_add_filter
         *
         * @return array
         */
        function _override_get_translatable_taxonomies($taxs_obj_type)
        {
        }
        /**
         * @param array[] $types
         *
         * @see \WPML_Config::maybe_add_filter
         *
         * @return array
         */
        function _override_get_translatable_documents($types)
        {
        }
        /**
         * Updates the custom post type translation settings with new settings.
         *
         * @param array $new_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new custom post type settings after the update
         */
        function update_cpt_sync_settings(array $new_options)
        {
        }
        /**
         * Updates the taxonomy type translation settings with new settings.
         *
         * @param array $new_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new taxonomy type settings after the update
         */
        function update_taxonomy_sync_settings(array $new_options)
        {
        }
        /**
         * Updates the custom post type unlocked settings with new settings.
         *
         * @param array $unlock_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new custom post type unlocked settings after the update
         */
        function update_cpt_unlocked_settings(array $unlock_options)
        {
        }
        /**
         * Updates the taxonomy type unlocked settings with new settings.
         *
         * @param array $unlock_options
         *
         * @uses \SitePress::get_setting
         * @uses \SitePress::save_settings
         *
         * @return array new taxonomy type unlocked settings after the update
         */
        function update_taxonomy_unlocked_settings(array $unlock_options)
        {
        }
        /**
         * @param string $config_type
         */
        function maybe_add_filter($config_type)
        {
        }
    }
    class SitePress_Setup
    {
        static function setup_complete()
        {
        }
        static function languages_complete()
        {
        }
        static function get_charset_collate()
        {
        }
        static function languages_table_is_complete()
        {
        }
        /**
         * @param string $language_name
         *
         * @return string
         */
        protected static function fix_language_name($language_name)
        {
        }
        static function fill_languages()
        {
        }
        static function fill_languages_translations()
        {
        }
        public static function fill_flags()
        {
        }
        public static function insert_default_category($lang_code)
        {
        }
    }
    class WPML_TM_Blog_Translators
    {
        /**
         * @param SitePress               $sitepress
         * @param WPML_TM_Records         $tm_records
         * @param WPML_Translator_Records $translator_records
         * @param WPML_Cache_Factory      $cache_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_TM_Records $tm_records, \WPML_Translator_Records $translator_records, \WPML_Cache_Factory $cache_factory)
        {
        }
        /**
         * It returns true if the site has translators.
         *
         * @return bool
         */
        public function has_translators()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        function get_blog_translators($args = array())
        {
        }
        /**
         * @return array
         */
        public function get_raw_blog_translators()
        {
        }
        /**
         * @param int   $user_id
         * @param array $args
         *
         * @return bool
         */
        function is_translator($user_id, $args = array())
        {
        }
        /**
         * @param int $user_id
         *
         * @return array
         */
        public function get_language_pairs($user_id)
        {
        }
    }
    class TranslationProxy_Translator
    {
        /**
         * Get information about translators from current project. Works only for ICL as a Translation Service
         *
         * @param bool $force
         *
         * @return array|bool
         */
        public static function get_icl_translator_status($force = \false)
        {
        }
        /**
         *
         * Get information about language pairs (including translators). Works only for ICL as a Translation Service
         *
         * @return array
         */
        public static function get_language_pairs()
        {
        }
        /**
         * @param $translator_id
         *
         * @return string|false
         */
        public static function get_translator_name($translator_id)
        {
        }
        /**
         * Synchronizes language pairs with ICL
         *
         * @global object $sitepress
         *
         * @param $project
         * @param $language_pairs
         */
        public static function update_language_pairs($project, $language_pairs)
        {
        }
        public static function flush_website_details_cache()
        {
        }
        public static function flush_website_details_cache_action()
        {
        }
    }
    class TranslationProxy_Api
    {
        const API_VERSION = 1.1;
        public static function proxy_request($path, $params = array(), $method = 'GET', $multi_part = \false, $has_return_value = \true)
        {
        }
        public static function proxy_download($path, $params)
        {
        }
        public static function service_request($url, $params = array(), $method = 'GET', $has_return_value = \true, $json_response = \false, $has_api_response = \false)
        {
        }
        public static function add_parameters_to_url($url, $params)
        {
        }
    }
    /**
     * TranslationProxy_basket collects all static methods to operate on
     * translations basket (cart)
     */
    class TranslationProxy_Basket
    {
        // The name of the option stored in wp_options table and that
        // stores all the basket items
        const ICL_TRANSLATION_JOBS_BASKET = 'icl_translation_jobs_basket';
        public static function add_message($array)
        {
        }
        public static function remove_message($text)
        {
        }
        public static function get_basket($force = \false)
        {
        }
        public static function update_basket($basket_portion = array())
        {
        }
        /**
         * Return number of items in translation basket by key
         *
         * @param string $type
         * @param bool   $skip_cache
         *
         * @return int number of items in translation basket
         */
        public static function get_basket_items_type_count($type, $skip_cache = \false)
        {
        }
        /**
         * Return number of items in translation basket
         *
         * @param bool $skip_cache
         *
         * @return int number of items in translation basket
         */
        public static function get_basket_items_count($skip_cache = \false)
        {
        }
        /**
         * Register notification with number of items in basket and link to basket
         */
        public static function update_basket_notifications()
        {
        }
        /**
         * Displays div with number of items in basket and link to basket
         * Removes notification if basket is empty
         */
        public static function display_basket_items_notification()
        {
        }
        public static function is_in_basket($post_id, $source_language, $target_language, $item_type = 'post')
        {
        }
        /**
         * Checks if post with ID $post_id is in the basket for any language
         *
         * @param int    $post_id
         * @param string $element_type
         * @param array  $check_in_languages
         * @param bool   $original_language_code
         *
         * @return bool
         */
        public static function anywhere_in_basket($post_id, $element_type = 'post', $check_in_languages = array(), $original_language_code = \false)
        {
        }
        public static function is_string_in_basket_anywhere($string_id)
        {
        }
        public static function has_any_string()
        {
        }
        public static function has_any_item_type($item_type)
        {
        }
        /**** adding items to basket ****/
        /**
         * Serves Translation Dashboard form submission and adds posts to basket
         *
         * @param array $data data submitted from form
         *
         * @return boolean
         */
        public static function add_posts_to_basket($data)
        {
        }
        /**
         * Serves WPML > String translation form submission and adds strings to basket
         *
         * @param array           $string_ids identifiers of strings
         * @param       $source_language
         * @param array           $target_languages selected target languages
         * @return bool
         * @todo: [WPML 3.3] move to ST and handle with hooks
         */
        public static function add_strings_to_basket($string_ids, $source_language, $target_languages)
        {
        }
        /**
         * Serves deletion of items from basket, triggered from WPML TM > Translation
         * Jobs
         *
         * @param array $items Array of items ids, in two separate parts: ['post']
         *                     and ['string']
         */
        public static function delete_items_from_basket($items)
        {
        }
        /**
         * Removes one item from basket
         *
         * @param int    $id            Item ID
         * @param string $type          Item type (strings | posts | ...)
         * @param bool   $update_option do update_option('icl_translation_jobs_cart' ?
         */
        public static function delete_item_from_basket($id, $type = 'post', $update_option = \true)
        {
        }
        // TODO: [WPML 3.3] implement this in the troubleshooting page
        public static function delete_all_items_from_basket()
        {
        }
        /**
         * @param WPML_TP_Batch|null $batch
         */
        public static function set_batch_data($batch)
        {
        }
        /**
         * @return false|null|WPML_TP_Batch
         */
        public static function get_batch_data()
        {
        }
        public static function set_basket_name($basket_name)
        {
        }
        public static function get_basket_name()
        {
        }
        public static function set_options(array $options)
        {
        }
        /** @return array */
        public static function get_options()
        {
        }
        public static function get_basket_extra_fields()
        {
        }
        public static function get_basket_items_types()
        {
        }
        /**
         * @param array       $selected_elements
         *
         * @param bool|string $type
         * @return array[]|int[]
         */
        public static function get_elements_ids($selected_elements, $type = \false)
        {
        }
        public static function get_source_language()
        {
        }
        /**
         * @return bool|array
         */
        public static function get_target_languages()
        {
        }
        /**
         * Sets target languages for remote service
         *
         * @param $remote_target_languages
         */
        public static function set_remote_target_languages($remote_target_languages)
        {
        }
        /**
         * Get target languages for remote service
         *
         * @return array | false
         */
        public static function get_remote_target_languages()
        {
        }
        /**
         * @return array
         */
        public static function get_basket_notification_positions()
        {
        }
        public static function get_basket_extra_fields_section()
        {
        }
        public static function get_basket_extra_fields_inputs(array $extra_fields = array(), $force_refresh = \false)
        {
        }
        public static function get_basket_extra_fields_array($force_refresh = \false)
        {
        }
        public static function extra_fields_build_inputs(array $extra_fields)
        {
        }
    }
    class TranslationProxy
    {
        /**
         * @param bool $reload
         *
         * @return WPML_TP_Service[]
         */
        public static function services($reload = \true)
        {
        }
        public static function get_tp_default_suid()
        {
        }
        /**
         * @param string $suid
         * @return 'wpml_list'|'config'|'account'
         */
        public static function get_service_linked_by_suid($suid)
        {
        }
        public static function has_preferred_translation_service()
        {
        }
        public static function clear_preferred_translation_service()
        {
        }
        /**
         * @param int $service_id
         *
         * @return stdClass
         */
        public static function get_service($service_id)
        {
        }
        /**
         * @param int $service_id
         *
         * @return TranslationProxy_Service|WP_Error
         */
        public static function select_service($service_id, $credentials = \null)
        {
        }
        public static function deselect_active_service()
        {
        }
        /**
         * @param      $service
         * @param bool    $custom_fields_data
         *
         * @return mixed
         * @throws \WPMLTranslationProxyApiException
         */
        public static function build_and_store_active_translation_service($service, $custom_fields_data = \false)
        {
        }
        /**
         * @return TranslationProxy_Project|false
         */
        public static function get_current_project()
        {
        }
        public static function get_current_service_info(array $info = array())
        {
        }
        public static function get_service_promo()
        {
        }
        public static function get_service_dashboard_info()
        {
        }
        public static function get_service_translators_info()
        {
        }
        /**
         * @param string   $location
         * @param string   $locale
         * @param callable $popup_link_callback
         * @param int      $max_count
         * @param bool     $paragraph
         *
         * @return string
         */
        public static function get_custom_html($location, $locale, $popup_link_callback, $max_count = 1000, $paragraph = \true)
        {
        }
        public static function get_current_service_name()
        {
        }
        public static function get_current_service_id()
        {
        }
        public static function get_current_service_batch_name_max_length()
        {
        }
        /**
         * @param bool|stdClass|TranslationProxy_Service|WP_Error $service
         *
         * @return bool
         * @throws \InvalidArgumentException
         * @throws \WPMLTranslationProxyApiException
         */
        public static function service_requires_authentication($service = \false)
        {
        }
        /**
         * Return true if $service has been successfully authenticated
         * Services that do not require authentication are by default authenticated
         *
         * @param bool|WP_Error|TranslationProxy_Service $service
         *
         * @return bool
         * @throws \InvalidArgumentException
         */
        public static function is_service_authenticated($service = \false)
        {
        }
        /**
         * @return stdClass|WP_Error|false
         */
        public static function get_current_service()
        {
        }
        /**
         *
         * @return bool
         * @throws \InvalidArgumentException
         */
        public static function is_current_service_active_and_authenticated()
        {
        }
        /**
         * @return mixed
         */
        public static function get_translation_projects()
        {
        }
        public static function get_service_name($service_id = \false)
        {
        }
        public static function has_custom_fields($service_id = \false)
        {
        }
        /**
         * @param int|bool $service_id If not given, will use the current service ID (if any)
         * @param bool     $force_reload Force reload custom fields from Translation Service
         *
         * @throws WPMLTranslationProxyApiException
         * @throws InvalidArgumentException
         * @return array|mixed|null|string
         */
        public static function get_custom_fields($service_id = \false, $force_reload = \false)
        {
        }
        /**
         * @return array
         */
        public static function get_extra_fields_local()
        {
        }
        /**
         * @param $extra_fields
         */
        public static function save_extra_fields($extra_fields)
        {
        }
        public static function maybe_convert_extra_fields($extra_fields)
        {
        }
        public static function get_custom_fields_data()
        {
        }
        /**
         * @return bool true if the current translation service allows selection of specific translators
         * @throws \InvalidArgumentException
         */
        public static function translator_selection_available()
        {
        }
        public static function get_tp_client()
        {
        }
    }
    /**
     * Class TranslationProxy_Project
     */
    class TranslationProxy_Project
    {
        public $id;
        /**
         * @var string
         *
         * `access_key` used when sending **any request** to TP
         */
        public $access_key;
        /**
         * @var int
         *
         * `ts_id` (aka `website_id`) is used **exclusively** when sending request directly to ICL
         */
        public $ts_id;
        /**
         * @var string
         *
         * `ts_access_key` is used **exclusively** when sending request directly to ICL
         */
        public $ts_access_key;
        /**
         * @var object
         */
        public $service;
        /** @var WPML_TP_Client $tp_client */
        public $tp_client;
        public $errors = array();
        /**
         * @param TranslationProxy_Service|stdClass $service
         * @param string                            $delivery
         * @param WPML_TP_Client                    $tp_client
         */
        public function __construct($service, $delivery, \WPML_TP_Client $tp_client)
        {
        }
        /**
         * @return TranslationProxy_Service
         */
        public function service()
        {
        }
        /**
         * Returns the index by which a translation service can be found in the array returned by
         * \TranslationProxy::get_translation_projects
         *
         * @param $service object
         *
         * @return bool|string
         */
        public static function generate_service_index($service)
        {
        }
        /*
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Get information about the project (Translation Service)
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        public function custom_text($location, $locale = 'en')
        {
        }
        function current_service_name()
        {
        }
        function current_service()
        {
        }
        /*
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * IFrames to display project info (Translation Service)
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        public function select_translator_iframe_url($source_language, $target_language)
        {
        }
        public function translator_contact_iframe_url($translator_id)
        {
        }
        /*
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         * Jobs handling (Translation Proxy)
         * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        /**
         * @throws WPML_TP_Batch_Exception
         *
         * @param bool $source_language
         * @param bool $target_languages
         *
         * @internal param bool $name
         * @return false|WPML_TP_Batch
         */
        function get_batch_job($source_language = \false, $target_languages = \false)
        {
        }
        /**
         * @throws WPML_TP_Batch_Exception
         *
         * @return false|int
         */
        function get_batch_job_id()
        {
        }
        /**
         * @throws WPML_TP_Batch_Exception
         *
         * @param bool             $source_language
         * @param      $target_languages
         *
         * @internal param bool $name
         * @return false|WPML_TP_Batch
         */
        public function create_batch_job($source_language, $target_languages)
        {
        }
        /**
         *
         * Add Files Batch Job
         *
         * @throws WPML_TP_Batch_Exception
         *
         * @param string $file
         * @param string $title
         * @param string $cms_id
         * @param string $url
         * @param string $source_language
         * @param string $target_language
         * @param int    $word_count
         * @param int    $translator_id
         * @param string $note
         *
         * @return bool|int
         */
        public function send_to_translation_batch_mode($file, $title, $cms_id, $url, $source_language, $target_language, $word_count, $translator_id = 0, $note = '', $uuid = \null)
        {
        }
        /**
         * @param bool|int $tp_batch_id
         *
         * @link http://git.icanlocalize.com/onthego/translation_proxy/wikis/commit_batch_job
         *
         * @return array|bool|mixed|null|stdClass|string
         */
        function commit_batch_job($tp_batch_id = \false)
        {
        }
        /**
         *
         * @return object[]
         */
        public function jobs()
        {
        }
        /**
         * @return object[]
         */
        public function finished_jobs()
        {
        }
        public function set_delivery_method($method)
        {
        }
        public function fetch_translation($job_id)
        {
        }
        public function update_job($job_id, $url = \null, $state = 'delivered')
        {
        }
    }
    /**
     * @method static int get_batch_id_from_name( string $basket_name )
     */
    class WPML_Translation_Basket
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * Returns an array representation of the current translation basket
         *
         * @param bool|false $force if true reloads the baskets contents from the database
         *
         * @return array
         */
        function get_basket($force = \false)
        {
        }
        /**
         * @return bool|TranslationProxy_Project
         */
        public function get_project()
        {
        }
        function get_item_types()
        {
        }
        /**
         * Returns a batch instance by basket- or batch-name
         *
         * @param string $basket_name
         *
         * @return WPML_Translation_Batch
         */
        function get_basket_batch($basket_name)
        {
        }
        /**
         * Sets the remote target languages before committing the basket to a translation service.
         *
         * @param array $remote_languages
         */
        function set_remote_target_languages($remote_languages)
        {
        }
        /**
         * Removes all items from the current translation basket.
         */
        function delete_all_items()
        {
        }
        /**
         * Returns the name of the current translation basket.
         *
         * @return bool|string
         */
        function get_name()
        {
        }
        function set_name($basket_name)
        {
        }
        function set_options(array $batch_options)
        {
        }
        /** @return array */
        function get_options()
        {
        }
        /**
         * @param string $basket_name
         * @param int    $basket_name_max_length
         *
         * @return array
         */
        function check_basket_name($basket_name, $basket_name_max_length)
        {
        }
        /**
         * Returns a unique name derived from an input name for a Translation Proxy Basket
         *
         * @param string   $name
         * @param bool|int $max_length
         *
         * @return bool|string
         */
        function get_unique_basket_name($name, $max_length)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @param int $package_id
         */
        public function remove_package($package_id)
        {
        }
        /**
         * @param int    $id
         * @param string $kind
         */
        public function remove_item($id, $kind)
        {
        }
        /**
         * Merge the basket portion with the saved basket
         *
         * @param array $basket_portion
         */
        public function update_basket($basket_portion = array())
        {
        }
    }
    /**
     * Class WPML_Translation_Proxy_Basket_Networking
     */
    class WPML_Translation_Proxy_Basket_Networking
    {
        /**
         * @param WPML_Translation_Basket $basket
         * @param TranslationManagement   $tm_instance
         */
        function __construct($basket, &$tm_instance)
        {
        }
        /**
         * @param WPML_TM_Translation_Batch $batch
         *
         * @uses \WPML_Translation_Basket::get_basket Gets the array representation of the translation basket
         * @uses \WPML_Translation_Proxy_Basket_Networking::generate_batch generates the batch in case no chunk was given for the commit from the basket
         * @uses \WPML_Translation_Proxy_Basket_Networking::get_batch_name
         * @uses \WPML_Translation_Proxy_Basket_Networking::send_all_jobs
         *
         * @return array
         */
        function commit_basket_chunk(\WPML_TM_Translation_Batch $batch)
        {
        }
        /**
         * Checks if an array of translators has any remote translators in it.
         *
         * @param array $translators
         *
         * @return bool
         */
        function contains_remote_translators(array $translators)
        {
        }
    }
    /**
     * Class TranslationProxy_Batch
     *
     * @method static callable|int getBatchId( ...$name ) :: string → int
     */
    class TranslationProxy_Batch
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function update_translation_batch($batch_name = \false, $tp_id = \false)
        {
        }
        /**
         * returns the name of a generic batch
         * name is built based on the current's date
         *
         * @param bool $isAuto
         *
         * @return string
         */
        public static function get_generic_batch_name($isAuto = \false)
        {
        }
        public static function maybe_assign_generic_batch($data)
        {
        }
    }
    class TranslationProxy_Service
    {
        public $id;
        public $name;
        public $description;
        public $default_service;
        public $has_translator_selection = \true;
        // Todo: read this from service properties
        public $delivery_method;
        public $project_details_url;
        public $custom_text_url;
        public $has_language_pairs;
        public $languages_map;
        public $url;
        public $logo_url;
        public $create_project_url;
        public $add_language_pair_url;
        public $new_job_url;
        public $custom_fields;
        public $custom_fields_data;
        public $select_translator_iframe_url;
        public $translator_contact_iframe_url;
        public $quote_iframe_url;
        public $batch_name_max_length;
        public static function is_authenticated($service)
        {
        }
        public static function list_services()
        {
        }
        public static function get_service($service_id)
        {
        }
        public static function get_service_by_suid($suid)
        {
        }
        public static function languages_map($service)
        {
        }
        public static function get_language($service, $language)
        {
        }
        /**
         * Returns a WPML readable string that allows to tell translation service and translator id
         * (typically used for translators dropdowns)
         *
         * @param int|float|string|bool $translation_service_id
         * @param int|float|string|bool $translator_id
         *
         * @return string
         */
        public static function get_wpml_translator_id($translation_service_id = \false, $translator_id = \false)
        {
        }
        /**
         * @param string $translator_id
         *
         * @return array Returns a two elements array, respectively containing translation_service and translator_id
         */
        public static function get_translator_data_from_wpml($translator_id)
        {
        }
    }
    class TranslationProxy_Popup
    {
        public static function display()
        {
        }
        public static function get_link($link, $args = array(), $just_url = \false)
        {
        }
    }
    abstract class WPML_TM_Job_Factory_User
    {
        /** @var  WPML_Translation_Job_Factory $tm_job_factory */
        protected $job_factory;
        /**
         * WPML_TM_Xliff_Reader constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct($job_factory)
        {
        }
    }
    /**
     * Class WPML_Pro_Translation
     */
    class WPML_Pro_Translation extends \WPML_TM_Job_Factory_User
    {
        public $errors = array();
        /**
         * WPML_Pro_Translation constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         */
        function __construct(&$job_factory)
        {
        }
        /**
         * @return WPML_TM_CMS_ID
         */
        public function &get_cms_id_helper()
        {
        }
        /**
         * @param string $call
         * @param array  $data
         */
        function ajax_calls($call, $data)
        {
        }
        public function get_current_project()
        {
        }
        /**
         * @param WP_Post|WPML_Package $post
         * @param array                $target_languages
         * @param int                  $translator_id
         * @param int                  $job_id
         *
         * @return bool|int
         */
        function send_post($post, $target_languages, $translator_id, $job_id)
        {
        }
        function server_languages_map($language_name, $server2plugin = \false)
        {
        }
        /**
         * @param $methods
         *
         * @return array
         */
        public function custom_xmlrpc_methods($methods)
        {
        }
        /**
         * @param array $args
         *
         * @return int|IXR_Error
         */
        public function xmlrpc_updated_job_status($args)
        {
        }
        /**
         * @return WPML_WP_API
         */
        function get_wpml_wp_api()
        {
        }
        /**
         *
         * Cancel translation for given cms_id
         *
         * @param $rid
         * @param $cms_id
         *
         * @return bool
         */
        function cancel_translation($rid, $cms_id)
        {
        }
        /**
         *
         * Downloads translation from TP and updates its document
         *
         * @param $translation_proxy_job_id
         * @param $cms_id
         *
         * @return bool|string
         */
        function download_and_process_translation($translation_proxy_job_id, $cms_id)
        {
        }
        /**
         * @param int $translation_id
         * @param int $translation_proxy_job_id
         *
         * @return bool
         */
        function add_translated_document($translation_id, $translation_proxy_job_id)
        {
        }
        public function fix_links_to_translated_content($element_id, $target_lang_code, $element_type = 'post', $preLoaded = [])
        {
        }
        function translation_error_handler($error_number, $error_string, $error_file, $error_line)
        {
        }
        function post_submitbox_start()
        {
        }
        public function gutenberg_minor_edit()
        {
        }
        /**
         * @param $project TranslationProxy_Project
         */
        function enqueue_project_errors($project)
        {
        }
    }
    /**
     * Class WPML_WPDB_And_SP_User
     */
    abstract class WPML_Full_PT_API extends \WPML_WPDB_And_SP_User
    {
        /** @var  WPML_Post_Translation $post_translations */
        protected $post_translations;
        /**
         * @param wpdb                  $wpdb
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         */
        public function __construct(&$wpdb, &$sitepress, &$post_translations)
        {
        }
    }
    /**
     * Class WPML_Slug_Filter
     *
     * @package    wpml-core
     * @subpackage url-handling
     */
    class WPML_Slug_Filter extends \WPML_Full_PT_API
    {
        /**
         * @param wpdb                  $wpdb
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         */
        public function __construct(&$wpdb, &$sitepress, &$post_translations)
        {
        }
        /**
         * @param String $slug
         * @param String $taxonomy
         * Filters slug input, so to ensure uniqueness of term slugs.
         *
         * @return String Either the original slug or a new slug that has been generated from the original one in order to
         *                ensure slug uniqueness.
         */
        public function pre_term_slug_filter($slug, $taxonomy)
        {
        }
        function wp_unique_post_slug($slug_suggested, $post_id, $post_status, $post_type, $post_parent, $slug)
        {
        }
    }
    class WPML_Lang_URL_Validator
    {
        /**
         * @param WPML_URL_Converter $wpml_url_converter
         * @param SitePress          $sitepress
         */
        public function __construct(\WPML_URL_Converter $wpml_url_converter, \SitePress $sitepress)
        {
        }
        public function validate_langs_in_dirs()
        {
        }
        public function print_explanation($sample_lang_code, $root = \false)
        {
        }
    }
    /**
     * Class WPML_Languages
     *
     * @package wpml-core
     */
    class WPML_Languages extends \WPML_SP_And_PT_User
    {
        /**
         * @param WPML_Term_Translation $term_translation
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translation
         */
        public function __construct(&$term_translation, &$sitepress, &$post_translation)
        {
        }
        /**
         * @param WP_Query $wp_query
         * @param WP_Query $_wp_query_back
         * @param WP_Query $saved_query
         *
         * @return array<array<string,\stdClass>, \WP_Query>
         */
        public function get_ls_translations($wp_query, $_wp_query_back, $saved_query)
        {
        }
        /**
         * @param array                              $lang
         * @param array                              $translations
         * @param bool                               $icl_lso_link_empty
         * @param bool                               $skip_lang
         * @param string                             $link_empty_to
         * @param WPML_LS_Display_As_Translated_Link $display_as_translated_ls_link
         *
         * @return array
         */
        public function add_tax_url_to_ls_lang($lang, $translations, $icl_lso_link_empty, $skip_lang, $link_empty_to, \WPML_LS_Display_As_Translated_Link $display_as_translated_ls_link)
        {
        }
        /**
         * @param array          $lang
         * @param object|WP_User $author_data
         * @param bool           $icl_lso_link_empty
         * @param bool           $skip_lang
         * @param bool           $link_empty_to
         *
         * @return array
         */
        public function add_author_url_to_ls_lang($lang, $fallback_lang, $author_data, $icl_lso_link_empty, $skip_lang, $link_empty_to)
        {
        }
        /**
         * @param array    $lang
         * @param string   $fallback_lang
         * @param WP_Query $current_query
         * @param bool     $icl_lso_link_empty
         * @param bool     $skip_lang
         * @param string   $link_empty_to
         *
         * @return array
         */
        public function add_date_or_cpt_url_to_ls_lang($lang, $fallback_lang, $current_query, $icl_lso_link_empty, $skip_lang, $link_empty_to)
        {
        }
        public function get_ls_language($lang_code, $current_language, $language_array = \false)
        {
        }
        public function sort_ls_languages($w_active_languages, $template_args)
        {
        }
    }
    class WPML_Color_Picker
    {
        public function __construct($color_selector_item)
        {
        }
        public function admin_print_scripts()
        {
        }
        public function current_language_color_selector_control()
        {
        }
        public function get_current_language_color_selector_control()
        {
        }
    }
    // phpcs:disable PHPCompatibility.Constants.NewConstants.openssl_raw_dataFound -- This and the following exceptions are made as function and version checks are also made
    // phpcs:disable PHPCompatibility.Constants.RemovedConstants.mcrypt_mode_ecbDeprecatedRemoved
    // phpcs:disable PHPCompatibility.Constants.RemovedConstants.mcrypt_randDeprecatedRemoved
    // phpcs:disable PHPCompatibility.Constants.RemovedConstants.mcrypt_rijndael_256DeprecatedRemoved
    // phpcs:disable PHPCompatibility.Extensions.RemovedExtensions.mcryptDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.NewFunctionParameters.openssl_decrypt_ivFound
    // phpcs:disable PHPCompatibility.FunctionUse.NewFunctionParameters.openssl_encrypt_ivFound
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_create_ivDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_decryptDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_encryptDeprecatedRemoved
    // phpcs:disable PHPCompatibility.FunctionUse.RemovedFunctions.mcrypt_get_iv_sizeDeprecatedRemoved
    class WPML_Data_Encryptor
    {
        const SALT_CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_ []{}<>~`+=,.;:/?|';
        const SALT_LENGTH = 64;
        /**
         * WPML_Data_Encryptor constructor.
         *
         * @param string $key_salt
         * @param string $method
         */
        public function __construct($key_salt = '', $method = 'AES-256-CTR')
        {
        }
        /**
         * @param string $data
         *
         * @return string
         */
        public function encrypt($data)
        {
        }
        /**
         * @param string $encrypted_data
         *
         * @return string
         */
        public function decrypt($encrypted_data)
        {
        }
        /**
         * @param string $library
         */
        public function set_crypt_library($library)
        {
        }
        /**
         * @return string
         */
        public function get_crypt_library()
        {
        }
    }
    class ICL_AdminNotifier
    {
        public static function init()
        {
        }
        public static function add_script()
        {
        }
        /**
         * @param string $message
         * @param string $type
         */
        public static function add_instant_message($message, $type = '')
        {
        }
        /**
         * @param int|string $message_id
         *
         * @return bool|array
         */
        public static function get_message($message_id)
        {
        }
        public static function message_id_exists($message_id)
        {
        }
        /**
         * @param array<mixed> $args
         *    Args attributes:
         *    string        id - An unique identifier for the message
         *    string        msg - The actual message
         *    string        type (optional) - Any string: it will be used as css class fro the message container. A typical value is 'error', but the following strings can be also used: icl-admin-message-information, icl-admin-message-warning
         *    array         classes (optional) - Display the notice only on specific url(s)
         *    bool          hide (optional) - Enable the toggle link to permanently hide the notice
         *    bool          hide_per_user (optional) - Enable the toggle link per user basis (overrides hide option)
         *    bool          dismiss (optional) - Enable the dismiss option
         *    bool          dismiss_per_user (optional) - Enable the dismiss option per user basis (overrides dismiss option)
         *    bool|string   fallback_text (optional) - A message to show when the notice gets hidden
         *    bool|string   fallback_type (optional) - The message type to use in the fallback message (@see $type)
         *    array         fallback_classes (optional) - The message type to use in the fallback message (@see $type)
         *    bool|string   group (optional) - A way to group messages: when displaying messages stored with this method, it's possible to filter them by group (@see ICL_AdminNotifier::displayMessages)
         *    bool          admin_notice (optional) - Hook the rendering to the 'admin_notice' action
         *    string|array  limit_to_page (optional) - Display the notice only on specific page(s)
         */
        public static function add_message($args)
        {
        }
        public static function is_user_dismissed($message_data)
        {
        }
        public static function is_globally_dismissed($message_data)
        {
        }
        public static function is_globally_hidden($message_data)
        {
        }
        public static function process_hide_message()
        {
        }
        public static function hide_message()
        {
        }
        public static function get_message_id()
        {
        }
        public static function process_show_message()
        {
        }
        public static function show_message()
        {
        }
        public static function engage_message()
        {
        }
        public static function remove_message($message_id)
        {
        }
        public static function remove_message_group($message_group)
        {
        }
        public static function display_messages($group = \false)
        {
        }
        /**
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::display_message()
         *
         * @param bool|string $group
         */
        public static function displayMessages($group = \false)
        {
        }
        public static function admin_notices()
        {
        }
        public static function display_instant_message($message, $type = 'information', $class = \false, $return = \false, $fadeout = \false)
        {
        }
        static function troubleshooting_js_data($data)
        {
        }
        static function has_hidden_messages()
        {
        }
        static function troubleshooting()
        {
        }
        public static function process_remove_notifications()
        {
        }
        public static function remove_notifications()
        {
        }
        public static function process_restore_notifications()
        {
        }
        public static function restore_notifications()
        {
        }
        /** Deprecated methods */
        /**
         * @param int|string $message_id
         *
         * @return bool
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::remove_message()
         *
         */
        public static function removeMessage($message_id)
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         */
        public static function hideMessage()
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         *
         * @param string $message
         * @param string $type
         */
        public static function addInstantMessage($message, $type = '')
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         */
        public static function addScript()
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         *
         * @param string      $id               An unique identifier for the message
         * @param string      $msg              The actual message
         * @param string      $type             (optional) Any string: it will be used as css class fro the message container. A typical value is 'error', but the following strings can be also used: icl-admin-message-information, icl-admin-message-warning
         * @param bool        $hide             (optional) Enable the toggle link to permanently hide the notice
         * @param bool        $fallback_message (optional) A message to show when the notice gets hidden
         * @param bool        $fallback_type    (optional) The message type to use in the fallback message (@see $type)
         * @param bool|string $group            (optional) A way to group messages: when displaying messages stored with this method, it's possible to filter them by group (@see ICL_AdminNotifier::displayMessages)
         * @param bool        $admin_notice     (optional) Hook the rendering to the 'admin_notice' action
         */
        public static function addMessage($id, $msg, $type = '', $hide = \true, $fallback_message = \false, $fallback_type = \false, $group = \false, $admin_notice = \false)
        {
        }
        /**
         * @param string $message
         * @param string $type
         * @param bool   $class
         * @param bool   $return
         *
         * @return string
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::display_instant_message()
         *
         */
        public static function displayInstantMessage($message, $type = 'information', $class = \false, $return = \false)
        {
        }
        /**
         * @param string $message
         *
         * @return string
         */
        public static function sanitize_and_format_message($message)
        {
        }
    }
    class WPML_Post_Comments extends \WPML_WPDB_User
    {
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        public function count_orphans_action()
        {
        }
        public function get_orphan_comments($return_count = \false, $limit = 10)
        {
        }
        public function delete_orphans_action()
        {
        }
        /**
         * @param string $hook
         */
        public function enqueue_scripts($hook)
        {
        }
        public function troubleshooting_action()
        {
        }
        /**
         * @param int $how_many
         *
         * @return false|int
         */
        public function delete_orphans($how_many)
        {
        }
    }
    /*
     * NextGen Gallery plugin integration.
     *
     * - Filters the_content
     * -- Adjusts gallery preview image URL from default to current language (2.0.66 <=)
     */
    class WPML_Plugin_Integration_Nexgen_Gallery
    {
        function __construct()
        {
        }
        /**
         * Filters post content and fixes gallery preview images URL.
         *
         * Adjust gallery preview image URL from default to current language.
         * Allows NextGen to match and replace preview images with gallery.
         * NextGen inserts image previews with default language URL.
         *
         * @global SitePress $sitepress
         * @param string $content
         * @return string
         */
        public static function the_content_gallery_preview_images($content)
        {
        }
    }
    /**
     * Class WPML_Slug_Resolution
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    abstract class WPML_Slug_Resolution extends \WPML_WPDB_And_SP_User
    {
        const WPML_BACKUP_KEY = '_wpml_backup';
        /**
         * Returns all active language codes ordered by the language order, but having the current language
         * at the beginning.
         *
         * @return string[]
         *
         * @uses \SitePress::get_setting to get the languages order from the sitepress settings
         */
        protected function get_ordered_langs()
        {
        }
        /**
         * @param string   $key
         * @param WP_Query $wp_query
         */
        protected function set_query_var_to_restore($key, \WP_Query $wp_query)
        {
        }
        /**
         * @param WP_Post[] $posts
         * @param WP_Query  $wp_query
         *
         * @return mixed
         */
        public function restore_query_vars($posts, $wp_query)
        {
        }
    }
    /**
     * Class WPML_Name_Query_Filter
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    abstract class WPML_Name_Query_Filter extends \WPML_Slug_Resolution
    {
        /** @var string $post_type */
        protected $post_type;
        /** @var string[] $indexes */
        protected $indexes = array('name');
        /** @var string $id_index */
        protected $id_index = 'p';
        /** @var string[] $active_languages */
        protected $active_languages = array();
        /** @var string $al_regexp */
        protected $al_regexp;
        /** @var  WPML_Post_Translation $post_translation */
        protected $post_translation;
        protected $is_translated;
        /**
         * @param string                $post_type
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         * @param wpdb                  $wpdb
         */
        public function __construct($post_type, &$sitepress, &$post_translations, &$wpdb)
        {
        }
        /**
         * Looks through the "name" and "pagename" query vars in a given query and identifies the correct page_id
         * corresponding to either of these two and then adjusts the query page_id to point at this correct page_id.
         *
         * @param WP_Query $page_query
         *
         * @return array
         *                  - WP_Query that uses the id index stored in \WPML_Name_Query_Filter::$id_index
         *                  instead of "name" or "pagename" in case a match was found, otherwise
         *                  returns the input query unaltered.
         *                  - int|false the page ID
         */
        public function filter_page_name(\WP_Query $page_query)
        {
        }
        protected abstract function select_best_match($pages_with_name);
        /**
         * @param WP_Query $page_query
         * @param int      $pid
         * @param string   $index
         *
         * @return WP_Query
         */
        protected function maybe_adjust_query_by_pid($page_query, $pid, $index)
        {
        }
        /**
         * Called when the post id is being adjusted. Can be overridden.
         *
         * @param WP_Query $page_query
         *
         * @return WP_Query
         */
        protected function adjusting_id($page_query)
        {
        }
        /**
         * Returns a SQL snippet for joining the posts table with icl translations filtered for the post_type
         * of this class.
         *
         * @return string
         */
        protected abstract function get_from_join_snippet();
    }
    /**
     * Class WPML_Name_Query_Filter_Translated
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    class WPML_Name_Query_Filter_Translated extends \WPML_Name_Query_Filter
    {
        /**
         * @param array $pages_with_name
         *
         * @return int|null|string
         */
        protected function select_best_match($pages_with_name)
        {
        }
        /**
         * Returns a SQL snippet for joining the posts table with icl translations filtered for the post_type
         * of this class.
         *
         * @return string
         */
        protected function get_from_join_snippet()
        {
        }
    }
    /**
     * Class WPML_Name_Query_Filter_Untranslated
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    class WPML_Name_Query_Filter_Untranslated extends \WPML_Name_Query_Filter
    {
        protected function select_best_match($pages_with_name)
        {
        }
        /**
         * Returns a SQL snippet for joining the posts table with icl translations filtered for the post_type
         * of this class.
         *
         * @return string
         */
        protected function get_from_join_snippet()
        {
        }
    }
    /**
     * Class WPML_Page_Name_Query_Filter
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2
     */
    class WPML_Page_Name_Query_Filter extends \WPML_Name_Query_Filter_Translated
    {
        protected $id_index = 'page_id';
        /**
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         * @param wpdb                  $wpdb
         */
        public function __construct(&$sitepress, &$post_translations, &$wpdb)
        {
        }
        /**
         * @param WP_Query $page_query
         * @param int      $pid
         * @param string   $index
         *
         * @return WP_Query
         */
        protected function maybe_adjust_query_by_pid($page_query, $pid, $index)
        {
        }
        /**
         * Called when the post id is being adjusted. Can be overridden.
         *
         * @param WP_Query $page_query
         *
         * @return WP_Query
         */
        protected function adjusting_id($page_query)
        {
        }
    }
    /**
     * Class WPML_Term_Hierarchy_Duplication
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Term_Hierarchy_Duplication extends \WPML_WPDB_And_SP_User
    {
        public function duplicates_require_sync($post_ids, $duplicates_only = \true)
        {
        }
    }
    /**
     * @since      3.2
     *
     * Class WPML_Term_Translation
     *
     * Provides APIs for translating taxonomy terms
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Term_Translation extends \WPML_Element_Translation
    {
        const CACHE_MAX_WARMUP_COUNT = 200;
        const CACHE_EXPIRE = 0;
        const CACHE_GROUP = 'wpml_term_translation';
        /** @var int */
        protected $cache_max_warmup_count = self::CACHE_MAX_WARMUP_COUNT;
        /**
         * @return int
         */
        public function get_cache_max_warmup_count()
        {
        }
        /**
         * @param int $cache_max_warmup_count
         *
         * @return void
         */
        public function set_cache_max_warmup_count($cache_max_warmup_count)
        {
        }
        /**
         * @return void
         */
        public function add_hooks()
        {
        }
        /**
         * @return void
         */
        public function invalidate_cache()
        {
        }
        /**
         * @param int $term_id
         *
         * @return null|string
         */
        public function lang_code_by_termid($term_id)
        {
        }
        /**
         * Converts term_id into term_taxonomy_id
         *
         * @param string|int $term_id
         *
         * @return string|int
         */
        public function adjust_ttid_for_term_id($term_id)
        {
        }
        /**
         * Converts term_taxonomy_id into term_id.
         *
         * @param string|int $ttid
         *
         * @return string|int
         */
        public function adjust_term_id_for_ttid($ttid)
        {
        }
        /**
         * @param int        $term_id
         * @param string     $lang_code
         * @param bool|false $original_fallback if true will return the the input term_id in case no translation is found.
         *
         * @return null|int
         */
        public function term_id_in($term_id, $lang_code, $original_fallback = \false)
        {
        }
        /**
         * @param string|int $term_id
         * @param string     $taxonomy
         *
         * @return string|int|null
         */
        public function trid_from_tax_and_id($term_id, $taxonomy)
        {
        }
        /**
         * Returns all post types to which a taxonomy is linked.
         *
         * @param string $taxonomy
         *
         * @return array
         *
         * @since 3.2.3
         */
        public function get_taxonomy_post_types($taxonomy)
        {
        }
        /**
         * @return string
         */
        protected function get_element_join()
        {
        }
        /**
         * @param string $cols
         *
         * @return string
         */
        protected function get_query_sql($cols = 'wpml_translations.element_id, tax.term_id, tax.taxonomy')
        {
        }
        /**
         * @return string
         */
        protected function get_type_prefix()
        {
        }
        /**
         * @param string $term
         * @param string $slug
         * @param string $taxonomy
         * @param string $lang_code
         *
         * @return string
         */
        public function generate_unique_term_slug($term, $slug, $taxonomy, $lang_code)
        {
        }
        /**
         * @return self
         */
        public static function getGlobalInstance()
        {
        }
    }
    class WPML_Term_Translation_Utils extends \WPML_SP_User
    {
        /**
         * Duplicates all terms, that exist in the given target language,
         * from the original post to the translation in that language.
         *
         * @param int    $original_post_id
         * @param string $lang
         */
        function sync_terms($original_post_id, $lang)
        {
        }
        /**
         * Duplicates all terms on the original post to its translation in the given target language.
         * Missing terms are created with the same name as their originals.
         *
         * @param int    $original_post_id
         * @param string $lang
         */
        function duplicate_terms($original_post_id, $lang)
        {
        }
    }
    class WPML_Full_Translation_API extends \WPML_Full_PT_API
    {
        /** @var  WPML_Term_Translation $term_translations */
        protected $term_translations;
        /**
         * @param SitePress             $sitepress
         * @param wpdb                  $wpdb
         * @param WPML_Post_Translation $post_translations
         * @param WPML_Term_Translation $term_translations
         */
        function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
    }
    /**
     * Class WPML_Nav_Menu_Actions
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Nav_Menu_Actions extends \WPML_Full_Translation_API
    {
        /**
         * @param SitePress             $sitepress
         * @param wpdb                  $wpdb
         * @param WPML_Post_Translation $post_translations
         * @param WPML_Term_Translation $term_translations
         */
        public function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
        public function wp_delete_nav_menu($id)
        {
        }
        function wp_update_nav_menu($menu_id, $menu_data = \null)
        {
        }
        function wp_update_nav_menu_item($menu_id, $menu_item_db_id, $args)
        {
        }
        public function wp_delete_nav_menu_item($menu_item_id)
        {
        }
        public function pre_update_theme_mods_theme($val)
        {
        }
        public function theme_mod_nav_menu_locations($theme_locations)
        {
        }
    }
    /**
     * @since      3.1.8
     *
     * Class WPML_Terms_Translations
     *
     * This class holds some basic functionality for translating taxonomy terms.
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Terms_Translations
    {
        /**
         * @param array<string|\WP_Term> $terms
         * @param string[]|string        $taxonomies This is only used by the WP core AJAX call that fetches the preview
         *                                           auto-complete for flat taxonomy term adding
         *
         * @return array<\WP_Term>
         * @deprecated since Version 3.1.8.3
         */
        public static function get_terms_filter($terms, $taxonomies)
        {
        }
        /**
         * @param string $slug
         * @param string $taxonomy
         * @param string $lang
         * Creates a unique slug for a given term, using a scheme
         * encoding the language code in the slug.
         *
         * @return string
         */
        public static function term_unique_slug($slug, $taxonomy, $lang)
        {
        }
        /**
         * This function provides an action hook only used by WCML.
         * It will be removed in the future and should not be implemented in new spots.
         *
         * @deprecated deprecated since version 3.1.8.3
         *
         * @param string $taxonomy The identifier of the taxonomy the translation was just saved to.
         * @param array $translated_term The associative array holding term taxonomy id and term id,
         *                         as returned by wp_insert_term or wp_update_term.
         */
        public static function icl_save_term_translation_action($taxonomy, $translated_term)
        {
        }
        /**
         * Prints a hidden div, containing the list of allowed terms for a post type in each language.
         * This is used to only display the correct categories and tags in the quick-edit fields of the post table.
         *
         * @param string                   $column_name
         * @param string|string[]|\WP_Post $post_type
         */
        public static function quick_edit_terms_removal($column_name, $post_type)
        {
        }
        /**
         * Creates a new term from an argument array.
         *
         * @param array $args
         * @return array|bool
         * Returns either an array containing the term_id and term_taxonomy_id of the term resulting from this database
         * write or false on error.
         */
        public static function create_new_term($args)
        {
        }
        /**
         * @param array<mixed> $args
         * Creates an automatic translation of a term, the name of which is set as "original" . @ "lang_code" and the slug of which is set as "original_slug" . - . "lang_code".
         *
         * @return array|bool
         */
        public function create_automatic_translation($args)
        {
        }
        /**
         * @param string $taxonomy
         *
         * Sets all taxonomy terms to the correct language on each post, having at least one term from the taxonomy.
         */
        public static function sync_taxonomy_terms_language($taxonomy)
        {
        }
        /**
         * @param int $post_id
         *
         * Sets all taxonomy terms ot the correct language for a given post.
         */
        public static function sync_post_terms_language($post_id)
        {
        }
        /**
         * @param int    $post_id
         * @param string $taxonomy
         * Synchronizes a posts taxonomy term's languages with the posts language for all translations of the post.
         */
        public static function sync_post_and_taxonomy_terms_language($post_id, $taxonomy)
        {
        }
        /**
         * @param int    $post_id    Object ID.
         * @param array  $terms      An array of object terms.
         * @param array  $tt_ids     An array of term taxonomy IDs.
         * @param string $taxonomy   Taxonomy slug.
         * @param bool   $append     Whether to append new terms to the old terms.
         * @param array  $old_tt_ids Old array of term taxonomy IDs.
         */
        public static function set_object_terms_action($post_id, $terms, $tt_ids, $taxonomy, $append, $old_tt_ids)
        {
        }
        /**
         * @param int    $post_id
         * @param string $taxonomy
         * @param array  $changed_ttids
         *
         * Running this function will remove certain issues arising out of bulk adding of terms to posts of various languages.
         * This case can result in situations in which the WP Core functionality adds a term to a post, before the language assignment
         * operations of WPML are triggered. This leads to states in which terms can be assigned to a post even though their language
         * differs from that of the post.
         * This function behaves between hierarchical and flat taxonomies. Hierarchical terms from the wrong taxonomy are simply removed
         * from the post. Flat terms are added with the same name but in the correct language.
         * For flat terms this implies either the use of the existing term or the creation of a new one.
         * This function uses wpdb queries instead of the WordPress API, it is therefore save to be run out of
         * any language setting.
         */
        public static function quick_edited_post_terms($post_id, $taxonomy, $newlyAddedTermIds)
        {
        }
        /**
         * Returns an array of all terms, that have a language suffix on them.
         * This is used by troubleshooting functionality.
         *
         * @return array
         */
        public static function get_all_terms_with_language_suffix()
        {
        }
    }
    class WPML_Frontend_Tax_Filters
    {
        public function __construct()
        {
        }
        /**
         * Adjust template (taxonomy-)$taxonomy-$term.php for translated term slugs and IDs
         *
         * @since 3.1
         *
         * @param string $template
         *
         * @return string The template filename if found.
         */
        function slug_template($template)
        {
        }
    }
    /**
     * WPML_Term_Filters class file.
     *
     * @package    WPML\Core
     * @subpackage taxonomy-term-translation
     */
    /**
     * Class WPML_Term_Filters
     */
    class WPML_Term_Filters extends \WPML_WPDB_And_SP_User
    {
        /**
         * Init class.
         */
        public function init()
        {
        }
        /**
         * @param string       $taxonomy        Taxonomy slug.
         * @param array|string $object_type     Object type or array of object types.
         * @param array        $taxonomy_object Array of taxonomy registration arguments.
         */
        public function registered_taxonomy($taxonomy, $object_type, $taxonomy_object)
        {
        }
        public function update_tax_children_option($taxonomy_input = \false)
        {
        }
        public function pre_option_tax_children()
        {
        }
        /**
         * @param string $taxonomy
         * @param string $lang_code
         *
         * @return array
         */
        public function get_tax_hier_array($taxonomy, $lang_code)
        {
        }
    }
    class WPML_Term_Hierarchy_Sync extends \WPML_Hierarchy_Sync
    {
        protected $element_id_column = 'term_taxonomy_id';
        protected $parent_id_column = 'parent';
        protected $parent_element_id_column = 'term_id';
        protected $element_type_column = 'taxonomy';
        protected $element_type_prefix = 'tax_';
        /**
         * @param wpdb $wpdb
         */
        public function __construct(&$wpdb)
        {
        }
        public function is_need_sync($taxonomy, $ref_lang = \false)
        {
        }
        public function sync_element_hierarchy($element_types, $ref_lang = \false)
        {
        }
        /**
         * @param string $element_type
         *
         * @return bool
         */
        public function is_hierarchical($element_type)
        {
        }
    }
    /**
     * Class WPML_Update_Term_Action
     *
     * This class holds the functionality for creating or editing a taxonomy term.
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Update_Term_Action extends \WPML_WPDB_And_SP_User
    {
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         * @param array     $args
         */
        public function __construct(&$wpdb, &$sitepress, $args)
        {
        }
        /**
         * Writes the term update or creation action saved in this object to the database.
         *
         * @return array|false
         * Returns either an array containing the term_id and term_taxonomy_id of the term resulting from this database
         * write or false on error.
         */
        public function execute()
        {
        }
        /**
         * This action is to be hooked to the WP create_term and edit_term hooks.
         * It sets the correct language information after a term is saved.
         *
         * @param int|string $term_id
         * @param int|string $term_taxonomy_id
         * @param string     $taxonomy
         */
        public function add_term_language_action($term_id, $term_taxonomy_id, $taxonomy)
        {
        }
    }
    class WPML_TM_Action_Helper
    {
        public function get_tm_instance()
        {
        }
        public function create_translation_package($post)
        {
        }
        public function add_translation_job($rid, $translator_id, $translation_package, $batch_options = array())
        {
        }
        /**
         * calculate post md5
         *
         * @param WP_Post|int $post
         *
         * @return string
         * @todo full support for custom posts and custom taxonomies
         */
        public function post_md5($post)
        {
        }
    }
    class WPML_Translation_Job_Helper
    {
        public function encode_field_data($data)
        {
        }
        public function decode_field_data($data, $format)
        {
        }
        protected function get_tm_setting($indexes)
        {
        }
        /**
         * @return TranslationManagement
         */
        public static function get_core_translation_management()
        {
        }
    }
    class WPML_TM_Post_Actions extends \WPML_Translation_Job_Helper
    {
        /**
         * WPML_TM_Post_Actions constructor.
         *
         * @param WPML_TM_Action_Helper    $helper
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param WPML_TM_Records          $tm_records
         */
        public function __construct(\WPML_TM_Action_Helper $helper, \WPML_TM_Blog_Translators $blog_translators, \WPML_TM_Records $tm_records)
        {
        }
        public function save_post_actions($post_id, $post, $force_set_status = \false)
        {
        }
        /**
         * @param int        $post_id
         * @param stdClass[] $translations
         *
         * @return Closure
         */
        public function get_translation_statuses_updater($post_id, $translations)
        {
        }
        /**
         * @param int $post_id
         */
        public function save_translation_priority($post_id)
        {
        }
    }
    class Icl_Stepper
    {
        /**
         * Added dummy element to match number of elements and to cover init action
         *
         * @var array
         */
        protected $_steps = array(\null);
        /**
         * Current step
         *
         * @var int
         */
        protected $_step;
        /**
         * Next step can be forced with Icl_Stepper::setNextStep()
         *
         * @var int
         */
        protected $_nextStep = \null;
        /**
         * Provide current step here
         *
         * @param int $step
         */
        function __construct($step = 0)
        {
        }
        /**
         * Register steps (function names)
         */
        public function registerSteps()
        {
        }
        /**
         * Returns current step
         *
         * @return int
         */
        public function getStep()
        {
        }
        /**
         * Returns next step
         *
         * @return int
         */
        public function getNextStep()
        {
        }
        /**
         * Sets current step
         *
         * @param int $num
         */
        public function setStep($num)
        {
        }
        /**
         * Forcing next step
         *
         * @param int $num
         */
        public function setNextStep($num)
        {
        }
        /**
         * Calculates bar width
         *
         * @return int Should be used as percentage width (%)
         */
        public function barWidth()
        {
        }
        /**
         * Calls current step's function
         *
         * @return mixed
         */
        public function init()
        {
        }
        /**
         * Returns initial HTML formatted screen
         *
         * @param string $message Message to be displayed
         * @return string
         */
        public function render($message = '')
        {
        }
    }
}
namespace WPML\AbsoluteLinks {
    class BlockProtector
    {
        public function protect($text)
        {
        }
        public function unProtect($text)
        {
        }
    }
}
namespace {
    class AbsoluteLinks
    {
        /** @var array */
        public $custom_post_query_vars = [];
        /** @var array */
        public $taxonomies_query_vars = [];
        public function __construct()
        {
        }
        public function init_query_vars()
        {
        }
        public function _process_generic_text($source_text, &$alp_broken_links)
        {
        }
        public function _get_ids_and_post_types($name)
        {
        }
        public function all_rewrite_rules($rewrite)
        {
        }
        public function process_string($st_id)
        {
        }
        public function process_post($post_id)
        {
        }
        public function convert_text($text)
        {
        }
        public function convert_url($url, $lang = \null)
        {
        }
        public function is_home($url)
        {
        }
    }
    /**
     * WPML Sunrise Script - START
     *
     * @author OnTheGoSystems
     * @version 3.7.0
     *
     * Place this script in the wp-content folder and add "define('SUNRISE', 'on');" in wp-config.php
     * in order to enable using different domains for different languages in multisite mode
     *
     * Experimental feature
     */
    /**
     * Class WPML_Sunrise_Lang_In_Domains
     *
     * @author OnTheGoSystems
     */
    class WPML_Sunrise_Lang_In_Domains
    {
        /**
         * Method init
         */
        public function init()
        {
        }
        /**
         * @param string $q
         *
         * @return string
         */
        public function query_filter($q)
        {
        }
    }
    class WPML_Nav_Menu
    {
        /** @var  WPML_Term_Translation $term_translations */
        protected $term_translations;
        /** @var  WPML_Post_Translation $post_translations */
        protected $post_translations;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var wpdb $wpdb */
        public $wpdb;
        /** @var  WPML_Nav_Menu_Actions $nav_menu_actions */
        public $nav_menu_actions;
        function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Post_Translation $post_translations, \WPML_Term_Translation $term_translations)
        {
        }
        public function init_hooks()
        {
        }
        function init()
        {
        }
        function sync_menus_via_ajax()
        {
        }
        public function get_links_for_menu_strings_translation_ajax()
        {
        }
        /**
         * @param string $menu_id
         */
        function admin_menu_setup($menu_id)
        {
        }
        function ajax($data)
        {
        }
        function _get_menu_language($menu_id)
        {
        }
        /**
         *
         * Gets first menu in a specific language
         * used to override nav_menu_recently_edited when a different language is selected
         *
         * @param string $lang
         * @return int
         */
        function _get_first_menu($lang)
        {
        }
        function get_current_menu()
        {
        }
        /**
         * @param bool|int $menu_id
         *
         * @return array
         */
        function _load_menu($menu_id = \false)
        {
        }
        function nav_menu_language_controls()
        {
        }
        function get_menus_without_translation($lang, $trid = 0)
        {
        }
        function get_menus_by_language()
        {
        }
        function languages_menu($echo = \true)
        {
        }
        function get_terms_filter($terms, $taxonomies, $args)
        {
        }
        /**
         * Filter posts by language.
         *
         * @param \WP_Query $q
         *
         * @return \WP_Query
         */
        public function parse_query($q)
        {
        }
        /**
         * @param \WP_Query $q
         *
         * @return void
         */
        public function action_parse_query($q)
        {
        }
        /**
         * @param mixed $val
         *
         * @return mixed
         */
        function option_nav_menu_options($val)
        {
        }
        function wp_nav_menu_args_filter($args)
        {
        }
        function wp_nav_menu_items_filter($items)
        {
        }
        function _set_custom_status_in_theme_location_switcher()
        {
        }
        // on the nav menus when selecting pages using the pagination filter pages > 2 by language
        function _enable_sitepress_query_filters($args)
        {
        }
        function wp_get_nav_menus_filter($menus)
        {
        }
    }
    abstract class WPML_Menu_Sync_Functionality extends \WPML_Full_Translation_API
    {
        const STRING_CONTEXT_SUFFIX = ' menu';
        const STRING_NAME_LABEL_PREFIX = 'Menu Item Label ';
        const STRING_NAME_URL_PREFIX = 'Menu Item URL ';
        /**
         * @param SitePress               $sitepress
         * @param wpdb                    $wpdb
         * @param WPML_Post_Translation   $post_translations
         * @param WPML_Terms_Translations $term_translations
         */
        function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
        function get_menu_items($menu_id, $translations = \true)
        {
        }
        function sync_menu_translations($menu_trans_data, $menus)
        {
        }
        /**
         * @param \stdClass $item
         * @param int       $menu_id
         *
         * @return array
         */
        function get_menu_item_translations($item, $menu_id)
        {
        }
        /**
         * Synchronises a page menu item's translations' trids according to the trids of the pages they link to.
         *
         * @param object $menu_item
         *
         * @return int number of affected menu item translations
         */
        function sync_page_menu_item_trids($menu_item)
        {
        }
        /**
         * @param  int  $menu_id
         * @param bool $include_original
         *
         * @return bool|array
         */
        function get_menu_translations($menu_id, $include_original = \false)
        {
        }
        protected function get_menu_name($menu_id)
        {
        }
        /**
         * @param int          $menu_id
         * @param string|false $language_code
         *
         * @return bool
         */
        protected function get_translated_menu($menu_id, $language_code = \false)
        {
        }
        /**
         * We need to register the string first in the default language
         * to avoid it being "auto-registered" in English
         *
         * @param string           $menu_name
         * @param WP_Post|stdClass $item
         * @param string           $lang
         * @param bool             $has_label_translation
         * @param bool             $has_url_translation
         *
         * @return array
         */
        protected function icl_t_menu_item($menu_name, $item, $lang, &$has_label_translation, &$has_url_translation)
        {
        }
    }
}
namespace WPML\Core\Menu {
    class Translate implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array    $items An array of menu item post objects.
         * @param \WP_Term $menu The menu object.
         *
         * @return array
         */
        public static function translate($items, $menu)
        {
        }
        /**
         * @param \WP_Post $item Menu item - post object.
         *
         * @return bool
         */
        public static function hasTranslation($item)
        {
        }
        /**
         * @param \WP_Post $item Menu item - post object.
         *
         * @return \WP_Post
         */
        public static function translateItem($item)
        {
        }
        /**
         * @param \WP_Post $item Menu item - post object.
         *
         * @return bool
         */
        public static function canView($item)
        {
        }
    }
}
namespace {
    class WPML_Menu_Item_Sync extends \WPML_Menu_Sync_Functionality
    {
        /**
         * @var string
         */
        const MENU_ITEM_POST_TYPE = 'post_nav_menu_item';
        /**
         * @return int the number of removed broken page items
         */
        function cleanup_broken_page_items()
        {
        }
        function sync_deleted_menus($deleted_data)
        {
        }
        function sync_menu_options($options_data)
        {
        }
        public function sync_menu_order(array $menus)
        {
        }
        function sync_added_items(array $added_data, array $menus)
        {
        }
        function sync_moved_items(array $moved_data, array $menus)
        {
        }
        function sync_caption($label_change_data)
        {
        }
        function sync_urls($url_change_data)
        {
        }
        function sync_missing_captions($label_missing)
        {
        }
        function sync_urls_to_add($url_missing_data)
        {
        }
        /**
         * @param array $menus Registered menus.
         */
        public function sync_custom_fields($menus)
        {
        }
    }
    class ICLMenusSync extends \WPML_Menu_Sync_Functionality
    {
        public $menus;
        public $is_preview = \false;
        public $sync_data = \false;
        public $string_translation_links = array();
        public $operations = array();
        /**
         * @param SitePress             $sitepress
         * @param wpdb                  $wpdb
         * @param WPML_Post_Translation $post_translations
         * @param WPML_Term_Translation $term_translations
         */
        function __construct(&$sitepress, &$wpdb, &$post_translations, &$term_translations)
        {
        }
        function init_hooks()
        {
        }
        function init($previous_menu = \false)
        {
        }
        function get_menu_names()
        {
        }
        function get_menus_tree()
        {
        }
        public function add_ghost_entries()
        {
        }
        public function set_new_menu_order()
        {
        }
        function do_sync(array $data)
        {
        }
        function render_items_tree_default($menu_id, $parent = 0, $depth = 0)
        {
        }
        function _item_has_children($menu_id, $item_id)
        {
        }
        function get_item_depth($menu_id, $item_id)
        {
        }
        function admin_notices()
        {
        }
        public function display_menu_links_to_string_translation()
        {
        }
        public function get_links_for_menu_strings_translation()
        {
        }
    }
    // phpcs:disable PEAR.NamingConventions.ValidClassName.Invalid
    // phpcs:disable PEAR.NamingConventions.ValidClassName.StartWithCapital
    /**
     * Class icl_cache
     */
    class icl_cache
    {
        /** @var array */
        protected $data;
        /** @var string */
        protected $name;
        /** @var bool */
        protected $cache_to_option;
        /** @var bool */
        protected $cache_needs_saving;
        public function __construct($name = '', $cache_to_option = \false)
        {
        }
        public function init()
        {
        }
        public function save_cache_if_required()
        {
        }
        public function get($key)
        {
        }
        public function has_key($key)
        {
        }
        public function set($key, $value)
        {
        }
        public function clear()
        {
        }
    }
    /**
     * Represents a helper class for building the SQL statement which retrieves the job,
     * as well as for converting this collection to specific implementations of \WPML_Element_Translation_Job.
     *
     * @package WPML\TM
     */
    class WPML_Abstract_Job_Collection
    {
        /**
         * Instance of \wpdb.
         *
         * @var \wpdb $wpdb
         */
        public $wpdb;
        /**
         * WPML_Abstract_Job_Collection constructor.
         *
         * @param WPDB $wpdb An instance of \wpdb.
         */
        public function __construct(\WPDB $wpdb)
        {
        }
        /**
         * It gets the (INNER) JOIN clause of the query.
         *
         * @param bool   $single                            It should only return the last job revision.
         * @param string $icl_translate_alias               The alias for `{$this->wpdb->prefix}icl_translate_job`.
         * @param string $icl_translations_translated_alias The alias for translated documents in `{$this->wpdb->prefix}icl_translations`.
         * @param string $icl_translations_original_alias   The alias for original documents in `{$this->wpdb->prefix}icl_translations`.
         * @param string $icl_translation_status_alias      The alias for `{$this->wpdb->prefix}icl_translation_status`.
         * @param string $icl_translate_job_alias           The alias for `{$this->wpdb->prefix}icl_translate_job`.
         *
         * @return string
         */
        protected function get_table_join($single = \false, $icl_translate_alias = 'iclt', $icl_translations_translated_alias = 't', $icl_translations_original_alias = 'ito', $icl_translation_status_alias = 's', $icl_translate_job_alias = 'j')
        {
        }
        /**
         * It gets the LEFT JOIN clause of the query.
         *
         * @param string $icl_translations_original_alias The alias for original documents in `{$this->wpdb->prefix}icl_translations`.
         * @param string $posts_alias                     The alias for `{$this->wpdb->prefix}posts`.
         *
         * @return array
         */
        protected function left_join_post($icl_translations_original_alias = 'ito', $posts_alias = 'p')
        {
        }
        /**
         * It converts an array of \stdClass jobs into an array of \WPML_Element_Translation_Job instances.
         *
         * @param array $jobs The array of \stdClass jobs.
         *
         * @return \WPML_Element_Translation_Job[]|\WPML_Post_Translation_Job[]|\WPML_String_Translation_Job[]|\WPML_External_Translation_Job[]
         */
        protected function plain_objects_to_job_instances($jobs)
        {
        }
        /**
         * Optional arguments to filter the results.
         *
         * @param array $args {
         *                    Optional. An array of arguments.
         *
         * @type int    translator_id
         * @type int    status
         * @type int    status__not
         * @type bool   include_unassigned
         * @type int    limit_no
         * @type array  language_pairs
         * @type string service
         * @type string from
         * @type string to
         * @type string type
         * @type bool   overdue
         * @type string   title
         * }
         *
         * @return string
         */
        protected function build_where_clause(array $args)
        {
        }
    }
    class WPML_Translation_Job_Helper_With_API extends \WPML_Translation_Job_Helper
    {
        /** @var  WPML_Element_Translation_Package $package_helper */
        protected $package_helper;
        function __construct()
        {
        }
        protected function get_translation_job($job_id, $include_non_translatable_elements = \false, $revisions = 0)
        {
        }
        protected function get_lang_by_rid($rid)
        {
        }
    }
    abstract class WPML_TM_Update_Translation_Data_Action extends \WPML_Translation_Job_Helper_With_API
    {
        function get_prev_job_data($rid)
        {
        }
        /**
         * Adds a translation job record in icl_translate_job
         *
         * @param mixed               $rid
         * @param mixed               $translator_id
         * @param       $translation_package
         * @param array               $batch_options
         *
         * @return bool|int
         */
        function add_translation_job($rid, $translator_id, array $translation_package, array $batch_options)
        {
        }
        /**
         * @param int   $prev_id
         * @param array $package
         *
         * @return mixed
         */
        protected abstract function populate_prev_translation($prev_id, array $package);
        /**
         * @param int   $rid
         * @param array $package
         *
         * @return mixed
         */
        protected function get_translated_field_values($rid, array $package)
        {
        }
        protected function fire_notification_actions($job_id, $translation_status, $translator_id)
        {
        }
    }
    class WPML_TM_Update_Post_Translation_Data_Action extends \WPML_TM_Update_Translation_Data_Action
    {
        protected function populate_prev_translation($rid, array $package)
        {
        }
    }
}
namespace WPML\Legacy\Translation\Save\SyncParentPost {
    /**
     *
     * Class containing the logic that we run when manipulating translations regarding synchronization of child-parent translated posts.
     */
    class SyncParentPost
    {
        public function __construct(\wpdb $wpdb, \SitePress $sitepress, \WPML_Post_Translation $wpml_post_translations)
        {
        }
        /**
         * @param int|null $original_parent_post_id
         * @param string $language_code
         * @param array $postarr
         * @return array
         */
        public function linkParentTranslatedPostOrFlagOriginal($original_parent_post_id, $language_code, $postarr)
        {
        }
        /**
         * @param int $original_post_id
         * @param string $language_code
         * @param int $translated_post_id
         */
        public function linkUnlinkedChildPosts($original_post_id, $language_code, $translated_post_id)
        {
        }
    }
}
namespace {
    class WPML_Save_Translation_Data_Action extends \WPML_Translation_Job_Helper_With_API
    {
        public function __construct($data, $tm_records)
        {
        }
        function save_translation()
        {
        }
        /**
         * Returns false if after saving the translation no redirection is to happen or the target of the redirection
         * in case saving the data is followed by a redirect.
         *
         * @return false|string
         */
        function get_redirect_target()
        {
        }
    }
    class WPML_TM_Update_External_Translation_Data_Action extends \WPML_TM_Update_Translation_Data_Action
    {
        protected function populate_prev_translation($rid, array $package)
        {
        }
    }
    abstract class WPML_Translation_Job extends \WPML_Translation_Job_Helper
    {
        protected $basic_data;
        protected $element_id = -1;
        protected $status = -1;
        protected $job_id;
        protected $batch_id;
        /** @var  WPML_TM_Blog_Translators $blog_translators */
        protected $blog_translators;
        /**
         * @param  int                      $job_id
         * @param int|null                 $batch_id
         * @param WPML_TM_Blog_Translators $blog_translators
         */
        function __construct($job_id, $batch_id = \null, &$blog_translators = \null)
        {
        }
        public abstract function cancel();
        public abstract function get_original_element_id();
        public abstract function to_array();
        /**
         * @return string
         */
        abstract function get_title();
        public function get_status()
        {
        }
        public function get_status_value()
        {
        }
        public function get_review_status()
        {
        }
        public function get_id()
        {
        }
        public function get_resultant_element_id($force = \false)
        {
        }
        /**
         * Checks whether the input user is allowed to edit this job.
         *
         * If he is an administrator, he is allowed to edit any job.
         * If he is an editor, he is allowed to edit any job as long as he's able to translate such language pair.
         * Otherwise, we check two conditions:
         *  - job needs to be assigned to the user or to no one
         *  - user needs to be able to translate the language pair
         *
         * @param WP_User $user
         *
         * @return bool
         */
        public function user_can_translate($user)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        protected function filter_is_translator_args(array $args)
        {
        }
        public function get_batch_id()
        {
        }
        /**
         * @param bool|false $as_name if true will return the language's display name if applicable
         *
         * @return bool|string
         */
        public function get_language_code($as_name = \false)
        {
        }
        /**
         * @param bool|false $as_name if true will return the language's display name if applicable
         *
         * @return bool|string
         */
        function get_source_language_code($as_name = \false)
        {
        }
        /**
         * @return string|false
         */
        public function get_translator_name()
        {
        }
        /**
         * Returns the id of the assigned translator or 0 if no translator is assigned to the job
         *
         * @return int
         */
        public function get_translator_id()
        {
        }
        public function get_basic_data()
        {
        }
        /**
         * @param  int    $translator_id
         * @param string $service
         *
         * @return bool true on success false on failure
         */
        public function assign_to($translator_id, $service = 'local')
        {
        }
        /**
         * Returns either the translation service id for the job or 'local' for local jobs
         *
         * @return int|string
         */
        public function get_translation_service()
        {
        }
        protected abstract function save_updated_assignment();
        protected abstract function load_resultant_element_id();
        protected abstract function load_status();
        protected abstract function load_job_data($id);
        abstract function get_type();
        protected function basic_data_to_array($job_data)
        {
        }
        protected function maybe_load_basic_data()
        {
        }
        protected function get_translator_html($job)
        {
        }
        /**
         * Retrieves the batch ID associated to the job ID
         */
        protected abstract function load_batch_id();
        /**
         * @return string
         */
        protected function generate_lang_text()
        {
        }
        /**
         * @param string $name
         *
         * @return mixed
         */
        public function get_basic_data_property($name)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         */
        public function set_basic_data_property($name, $value)
        {
        }
    }
    abstract class WPML_Element_Translation_Job extends \WPML_Translation_Job
    {
        protected $original_del_text;
        /** @var  WPML_Translation_Job_Factory $job_factory */
        protected $job_factory;
        /**
         * @param int                               $job_id
         * @param null|int                          $batch_id
         * @param null|TranslationManagement        $tm_instance
         * @param null|WPML_Translation_Job_Factory $job_factory
         */
        function __construct($job_id, $batch_id = \null, &$tm_instance = \null, $job_factory = \null)
        {
        }
        function get_type()
        {
        }
        function to_array()
        {
        }
        function to_xliff_file()
        {
        }
        function get_original_element_id()
        {
        }
        function get_translation_id()
        {
        }
        /**
         * Saves the job data in this object to the database (e.g. to a post)
         *
         * @param bool $complete whether or not to set the status
         *                       of the target element to complete
         */
        public function save_to_element($complete = \false)
        {
        }
        /**
         * @return int
         */
        function estimate_word_count()
        {
        }
        function get_original_fields()
        {
        }
        public function cancel()
        {
        }
        /**
         * @param TranslationProxy_Project $project
         * @param int                      $translator_id
         * @param WPML_TM_CMS_ID           $cms_id_helper
         * @param TranslationManagement    $tm_instance
         * @param null|string              $note
         *
         * @return array
         */
        function send_to_tp($project, $translator_id, &$cms_id_helper, &$tm_instance, $note = \null)
        {
        }
        /**
         * @param bool|false $original
         *
         * @return string
         */
        abstract function get_url($original = \false);
        /**
         * @return WP_Post|WPML_Package|mixed
         */
        abstract function get_original_document();
        protected function load_status()
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool|stdClass|WPML_Element_Translation_Job
         */
        protected function load_job_data($job_id)
        {
        }
        protected function save_updated_assignment()
        {
        }
        /**
         * Retrieves the batch ID for job elements using the
         * `icl_translation_status` and `icl_translate_job` tables
         */
        protected function load_batch_id()
        {
        }
        /**
         * If the job does not have deadline date,
         * we consider that the job was completed on time.
         *
         * @return bool
         */
        public function is_completed_on_time()
        {
        }
        /**
         * @return false|int Negative integer if the job was completed before the deadline, or positive either.
         *                   False is the job has no deadline date
         */
        public function get_number_of_days_overdue()
        {
        }
        /** @return string|null */
        public function get_deadline_date()
        {
        }
        /** @return string|null */
        public function get_completed_date()
        {
        }
        /** @return string|null */
        public function get_manager_id()
        {
        }
        /** @return string|null */
        protected function get_title_from_db()
        {
        }
        /** @return string|null */
        protected function get_uuid()
        {
        }
    }
    class WPML_Package_Translation_Job extends \WPML_Element_Translation_Job
    {
        public function get_original_document()
        {
        }
        public function get_url($original = \false)
        {
        }
        public function get_title()
        {
        }
        public function get_type_title()
        {
        }
        protected function load_resultant_element_id()
        {
        }
    }
    class WPML_String_Translation_Job extends \WPML_Translation_Job
    {
        protected function load_job_data($string_translation_id)
        {
        }
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        public function get_type()
        {
        }
        public function get_original_element_id()
        {
        }
        public function cancel()
        {
        }
        protected function load_status()
        {
        }
        public function to_array()
        {
        }
        protected function load_resultant_element_id()
        {
        }
        protected function save_updated_assignment()
        {
        }
        /**
         * Retrieves the batch ID for a string job
         */
        protected function load_batch_id()
        {
        }
    }
    class WPML_Post_Translation_Job extends \WPML_Element_Translation_Job
    {
        function get_original_document()
        {
        }
        /**
         * @param bool|false $original
         *
         * @return string
         */
        public function get_url($original = \false)
        {
        }
        /**
         * It checks that the post type is translatable.
         *
         * @return bool
         */
        function is_translatable_post_type()
        {
        }
        function update_fields_from_post()
        {
        }
        function save_terms_to_post()
        {
        }
        function load_terms_from_post_into_job($delete = \null)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_type_title()
        {
        }
        /**
         * @return string|false
         */
        public function get_post_type()
        {
        }
        protected function load_resultant_element_id()
        {
        }
        protected function get_terms_in_job_rows()
        {
        }
        /**
         * Retrieves an array of all terms associated with a post. This array is indexed by indexes of the for {t_}{term_taxonomy_id}.
         *
         * @return array
         */
        protected function get_term_field_array_for_post()
        {
        }
        protected function set_translated_term_values($delete)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        protected function filter_is_translator_args(array $args)
        {
        }
    }
    class WPML_External_Translation_Job extends \WPML_Element_Translation_Job
    {
        function get_original_document()
        {
        }
        /**
         * @param bool|false $original
         *
         * @return string
         */
        public function get_url($original = \false)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return string
         */
        public function get_type_title()
        {
        }
        protected function load_resultant_element_id()
        {
        }
    }
    class WPML_Translation_Jobs_Collection extends \WPML_Abstract_Job_Collection
    {
        /**
         * @param wpdb  $wpdb
         * @param array $icl_translation_filter
         */
        public function __construct(&$wpdb, $icl_translation_filter)
        {
        }
        /**
         * @param int $page
         * @param int $per_page
         *
         * @return array
         */
        public function get_paginated_batches($page, $per_page)
        {
        }
        /**
         * Returns the number of jobs that meet the filter \WPML_Translation_Jobs_Collection::$filter in the database
         *
         * @return int
         */
        public function get_count()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         */
        public function add_job($job)
        {
        }
        public function get_jobs(array $args = array())
        {
        }
    }
    class WPML_Translation_Batch_Factory
    {
        /**
         * @param int $id
         *
         * @return WPML_Translation_Batch
         */
        public function create($id)
        {
        }
    }
    class WPML_Translation_Batch extends \WPML_Abstract_Job_Collection
    {
        /**
         * @param wpdb $wpdb
         * @param int  $batch_id
         */
        public function __construct(&$wpdb, $batch_id = 0)
        {
        }
        public function reload()
        {
        }
        public function get_batch_url()
        {
        }
        public function get_batch_meta_array()
        {
        }
        /**
         * Cancels all translation jobs in this batch
         */
        public function cancel_all_jobs()
        {
        }
        // todo: [WPML 3.2.1] This method and other similar methods can likely be removed
        public function get_last_update()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         */
        public function add_job($job)
        {
        }
        public function get_jobs_as_array()
        {
        }
        public function get_item_count()
        {
        }
        public function get_id()
        {
        }
        public function get_batch_name()
        {
        }
        public function get_batch_tp_id()
        {
        }
        public function get_status_array()
        {
        }
        public function clear_batch_data()
        {
        }
    }
    /**
     * Class to create and manage a Zip file.
     *
     * Initially inspired by CreateZipFile by Rochak Chauhan  www.rochakchauhan.com (http://www.phpclasses.org/browse/package/2322.html)
     * and
     * http://www.pkware.com/documents/casestudies/APPNOTE.TXT Zip file specification.
     *
     * License: GNU LGPL 2.1.
     *
     * @author A. Grandt <php@grandt.com>
     * @copyright 2009-2014 A. Grandt
     * @license GNU LGPL 2.1
     * @link http://www.phpclasses.org/package/6110
     * @link https://github.com/Grandt/PHPZip
     * @version 1.62
     */
    class wpml_zip
    {
        const VERSION = 1.62;
        const ZIP_LOCAL_FILE_HEADER = "PK\x03\x04";
        // Local file header signature
        const ZIP_CENTRAL_FILE_HEADER = "PK\x01\x02";
        // Central file header signature
        const ZIP_END_OF_CENTRAL_DIRECTORY = "PK\x05\x06\x00\x00\x00\x00";
        // end of Central directory record
        const EXT_FILE_ATTR_DIR = 010173200020;
        // Permission 755 drwxr-xr-x = (((S_IFDIR | 0755) << 16) | S_DOS_D);
        const EXT_FILE_ATTR_FILE = 020151000040;
        // Permission 644 -rw-r--r-- = (((S_IFREG | 0644) << 16) | S_DOS_A);
        const ATTR_VERSION_TO_EXTRACT = "\x14\x00";
        // Version needed to extract
        const ATTR_MADE_BY_VERSION = "\x1e\x03";
        // Made By Version
        // UID 1000, GID 0
        const EXTRA_FIELD_NEW_UNIX_GUID = "ux\v\x00\x01\x04\xe8\x03\x00\x00\x04\x00\x00\x00\x00";
        // Unix file types
        const S_IFIFO = 010000;
        // named pipe (fifo)
        const S_IFCHR = 020000;
        // character special
        const S_IFDIR = 040000;
        // directory
        const S_IFBLK = 060000;
        // block special
        const S_IFREG = 0100000;
        // regular
        const S_IFLNK = 0120000;
        // symbolic link
        const S_IFSOCK = 0140000;
        // socket
        // setuid/setgid/sticky bits, the same as for chmod:
        const S_ISUID = 04000;
        // set user id on execution
        const S_ISGID = 02000;
        // set group id on execution
        const S_ISTXT = 01000;
        // sticky bit
        // And of course, the other 12 bits are for the permissions, the same as for chmod:
        // When addding these up, you can also just write the permissions as a simgle octal number
        // ie. 0755. The leading 0 specifies octal notation.
        const S_IRWXU = 0700;
        // RWX mask for owner
        const S_IRUSR = 0400;
        // R for owner
        const S_IWUSR = 0200;
        // W for owner
        const S_IXUSR = 0100;
        // X for owner
        const S_IRWXG = 070;
        // RWX mask for group
        const S_IRGRP = 040;
        // R for group
        const S_IWGRP = 020;
        // W for group
        const S_IXGRP = 010;
        // X for group
        const S_IRWXO = 07;
        // RWX mask for other
        const S_IROTH = 04;
        // R for other
        const S_IWOTH = 02;
        // W for other
        const S_IXOTH = 01;
        // X for other
        const S_ISVTX = 01000;
        // save swapped text even after use
        // Filetype, sticky and permissions are added up, and shifted 16 bits left BEFORE adding the DOS flags.
        // DOS file type flags, we really only use the S_DOS_D flag.
        const S_DOS_A = 040;
        // DOS flag for Archive
        const S_DOS_D = 020;
        // DOS flag for Directory
        const S_DOS_V = 010;
        // DOS flag for Volume
        const S_DOS_S = 04;
        // DOS flag for System
        const S_DOS_H = 02;
        // DOS flag for Hidden
        const S_DOS_R = 01;
        /**
         * A custom temporary folder, or a callable that returns a custom temporary file.
         *
         * @var string|callable
         */
        public static $temp = \null;
        /**
         * Constructor.
         *
         * @param boolean $useZipFile Write temp zip data to tempFile? Default FALSE
         */
        function __construct($useZipFile = \false)
        {
        }
        function __destruct()
        {
        }
        /**
         * Set Zip archive comment.
         *
         * @param string $newComment New comment. NULL to clear.
         * @return bool $success
         */
        public function setComment($newComment = \null)
        {
        }
        /**
         * Set zip file to write zip data to.
         * This will cause all present and future data written to this class to be written to this file.
         * This can be used at any time, even after the Zip Archive have been finalized. Any previous file will be closed.
         * Warning: If the given file already exists, it will be overwritten.
         *
         * @param string $fileName
         * @return bool $success
         */
        public function setZipFile($fileName)
        {
        }
        /**
         * Add an empty directory entry to the zip archive.
         * Basically this is only used if an empty directory is added.
         *
         * @param string $directoryPath Directory Path and name to be added to the archive.
         * @param int    $timestamp     (Optional) Timestamp for the added directory, if omitted or set to 0, the current time will be used.
         * @param string $fileComment   (Optional) Comment to be added to the archive for this directory. To use fileComment, timestamp must be given.
         * @param int    $extFileAttr   (Optional) The external file reference, use generateExtAttr to generate this.
         * @return bool $success
         */
        public function addDirectory($directoryPath, $timestamp = 0, $fileComment = \null, $extFileAttr = self::EXT_FILE_ATTR_DIR)
        {
        }
        /**
         * Add a file to the archive at the specified location and file name.
         *
         * @param string $data        File data.
         * @param string $filePath    Filepath and name to be used in the archive.
         * @param int    $timestamp   (Optional) Timestamp for the added file, if omitted or set to 0, the current time will be used.
         * @param string $fileComment (Optional) Comment to be added to the archive for this file. To use fileComment, timestamp must be given.
         * @param bool   $compress    (Optional) Compress file, if set to FALSE the file will only be stored. Default TRUE.
         * @param int    $extFileAttr (Optional) The external file reference, use generateExtAttr to generate this.
         * @return bool $success
         */
        public function addFile($data, $filePath, $timestamp = 0, $fileComment = \null, $compress = \true, $extFileAttr = self::EXT_FILE_ATTR_FILE)
        {
        }
        /**
         * Add a file to the archive at the specified location and file name.
         *
         * @param string $dataFile    File name/path.
         * @param string $filePath    Filepath and name to be used in the archive.
         * @param int    $timestamp   (Optional) Timestamp for the added file, if omitted or set to 0, the current time will be used.
         * @param string $fileComment (Optional) Comment to be added to the archive for this file. To use fileComment, timestamp must be given.
         * @param int    $extFileAttr (Optional) The external file reference, use generateExtAttr to generate this.
         * @return bool $success
         */
        public function addLargeFile($dataFile, $filePath, $timestamp = 0, $fileComment = \null, $extFileAttr = self::EXT_FILE_ATTR_FILE)
        {
        }
        /**
         * Create a stream to be used for large entries.
         *
         * @param string $filePath    Filepath and name to be used in the archive.
         * @param int    $timestamp   (Optional) Timestamp for the added file, if omitted or set to 0, the current time will be used.
         * @param string $fileComment (Optional) Comment to be added to the archive for this file. To use fileComment, timestamp must be given.
         * @param int    $extFileAttr (Optional) The external file reference, use generateExtAttr to generate this.
         * @throws Exception Throws an exception in case of errors
         * @return bool $success
         */
        public function openStream($filePath, $timestamp = 0, $fileComment = \null, $extFileAttr = self::EXT_FILE_ATTR_FILE)
        {
        }
        /**
         * Add data to the open stream.
         *
         * @param string $data
         * @throws Exception Throws an exception in case of errors
         * @return mixed length in bytes added or FALSE if the archive is finalized or there are no open stream.
         */
        public function addStreamData($data)
        {
        }
        /**
         * Close the current stream.
         *
         * @return bool $success
         */
        public function closeStream()
        {
        }
        /**
         * Close the archive.
         * A closed archive can no longer have new files added to it.
         *
         * @return bool $success
         */
        public function finalize()
        {
        }
        /**
         * Get the zip file contents
         * If the zip haven't been finalized yet, this will cause it to become finalized
         *
         * @return string data
         */
        public function getZipData()
        {
        }
        /**
         * Send the archive as a zip download
         *
         * @param String $fileName The name of the Zip archive, in ISO-8859-1 (or ASCII) encoding, ie. "archive.zip". Optional, defaults to NULL, which means that no ISO-8859-1 encoded file name will be specified.
         * @param String $contentType Content mime type. Optional, defaults to "application/zip".
         * @param String $utf8FileName The name of the Zip archive, in UTF-8 encoding. Optional, defaults to NULL, which means that no UTF-8 encoded file name will be specified.
         * @param bool   $inline Use Content-Disposition with "inline" instead of "attached". Optional, defaults to FALSE.
         * @throws Exception Throws an exception in case of errors
         * @return bool Always returns true (for backward compatibility).
         */
        function sendZip($fileName = \null, $contentType = 'application/zip', $utf8FileName = \null, $inline = \false)
        {
        }
        /**
         * Return the current size of the archive
         *
         * @return $size Size of the archive
         */
        public function getArchiveSize()
        {
        }
    }
    class WPML_Translator
    {
        /** @var int */
        public $ID;
        /** @var string */
        public $display_name;
        /** @var string */
        public $user_login;
        /**
         * Array where key represents a source language code and values are codes of target languages.
         *
         * @var array<string, string[]>
         */
        public $language_pairs;
        /**
         * @param string $property
         *
         * @return int
         */
        public function __get($property)
        {
        }
        /**
         * @param string $property
         * @param int $value
         *
         * @return null
         */
        public function __set($property, $value)
        {
        }
    }
    /**
     * Class TranslationManagement
     *
     * Use `wpml_load_core_tm` to get an instance
     *
     * @package wpml-core
     */
    class TranslationManagement
    {
        const INIT_PRIORITY = 1500;
        const DUPLICATE_ELEMENT_ACTION = 2;
        const TRANSLATE_ELEMENT_ACTION = 1;
        public $settings;
        public $admin_texts_to_translate = array();
        function __construct(\WPML_Cookie $wpml_cookie = \null)
        {
        }
        public function wpml_loaded_action()
        {
        }
        public function load_settings_if_required()
        {
        }
        /**
         * @param array $args      {
         *
         * @type string $section
         * @type string $key
         * @type mixed  $value     (when used as translation action: 0: do not translate, 1: copy, 2: translate)
         * @type bool   $read_only Options. Default to true.
         * }
         */
        public function wpml_config_action($args)
        {
        }
        /**
         * @return WPML_Custom_Field_Setting_Factory
         */
        public function settings_factory()
        {
        }
        public function init()
        {
        }
        public function get_settings()
        {
        }
        public function wpml_add_duplicate_check_actions()
        {
        }
        public function wp_loaded()
        {
        }
        public function admin_enqueue_scripts()
        {
        }
        public static function get_batch_name($batch_id)
        {
        }
        public static function get_batch_url($batch_id)
        {
        }
        public static function get_batch_last_update($batch_id)
        {
        }
        public static function get_batch_tp_id($batch_id)
        {
        }
        public static function get_batch_data($batch_id)
        {
        }
        function save_settings()
        {
        }
        /**
         * @return string[]
         */
        public function initial_custom_field_translate_states()
        {
        }
        /**
         * @return string[]
         */
        public function initial_term_custom_field_translate_states()
        {
        }
        function process_request($data)
        {
        }
        function ajax_calls($call, $data)
        {
        }
        /**
         * @param string $element_type_full
         *
         * @return mixed
         */
        public function get_element_prefix($element_type_full)
        {
        }
        /**
         * @param int $job_id
         *
         * @return mixed
         */
        public function get_element_type_prefix_from_job_id($job_id)
        {
        }
        /**
         * @param \stdClass $job
         *
         * @return mixed
         */
        public function get_element_type_prefix_from_job($job)
        {
        }
        /**
         * Display admin notices.
         */
        public function show_messages()
        {
        }
        /* TRANSLATORS */
        /**
         * @deprecated use `WPML_TM_Blog_Translators::get_blog_translators` instead
         *
         * @return bool
         */
        public function has_translators()
        {
        }
        /**
         * @deprecated use `WPML_TM_Blog_Translators::get_blog_translators` instead
         *
         * @param array $args
         *
         * @return array
         */
        public static function get_blog_translators($args = array())
        {
        }
        /**
         * @return WPML_Translator
         */
        function get_selected_translator()
        {
        }
        /**
         * @return WPML_Translator
         */
        function get_current_translator()
        {
        }
        public static function get_translator_edit_url($translator_id)
        {
        }
        /* HOOKS */
        function make_duplicates($data)
        {
        }
        function make_duplicate($master_post_id, $lang)
        {
        }
        function make_duplicates_all($master_post_id)
        {
        }
        function reset_duplicate_flag($post_id)
        {
        }
        function set_duplicate($master_post_id, $post_lang)
        {
        }
        function duplication_delete_comment($comment_id)
        {
        }
        function duplication_edit_comment($comment_id)
        {
        }
        function duplication_status_comment($comment_id, $comment_status)
        {
        }
        function duplication_insert_comment($comment_id)
        {
        }
        /**
         * @param int $post_id Post ID.
         */
        public function delete_post_actions($post_id)
        {
        }
        /* TRANSLATIONS */
        /**
         * calculate post md5
         *
         * @param object|int $post
         *
         * @return string
         */
        function post_md5($post)
        {
        }
        function get_element_translation($element_id, $language, $element_type = 'post_post')
        {
        }
        function get_element_translations($element_id, $element_type = 'post_post', $service = \false)
        {
        }
        /**
         * returns icon class according to status code
         *
         * @param int $status
         * @param int $needs_update
         * @param bool $needs_review
         *
         * @return string
         */
        public function status2icon_class($status, $needs_update = 0, $needs_review = \false)
        {
        }
        public static function status2text($status)
        {
        }
        public function decode_field_data($data, $format)
        {
        }
        /**
         * create translation package
         *
         * @param object|int $post
         *
         * @return array|false
         */
        function create_translation_package($post)
        {
        }
        function messages_by_type($type)
        {
        }
        public function add_basket_message($type, $message, $id = \null)
        {
        }
        function add_message($message)
        {
        }
        /**
         * add/update icl_translation_status record
         *
         * @param array $data
         * @param int   $rid
         *
         * @return array
         */
        function update_translation_status($data, $rid = \null)
        {
        }
        /* TRANSLATION JOBS */
        /**
         * @param \WPML_TM_Translation_Batch $batch
         * @param string $type
         * @param int|null $sendFrom
         *
         * @return void
         */
        public function action_send_jobs(\WPML_TM_Translation_Batch $batch, $type = 'post', $sendFrom = \null)
        {
        }
        /**
         * @param \WPML_TM_Translation_Batch $batch
         * @param string $type
         * @param int|null $sendFrom
         *
         * @return array
         */
        function send_jobs(\WPML_TM_Translation_Batch $batch, $type = 'post', $sendFrom = \null)
        {
        }
        function get_translation_jobs($args = array())
        {
        }
        /**
         * Adds a translation job record in icl_translate_job
         *
         * @depreacted 4.6.7 Use "wpml_tm_add_translation_job" function instead of this one.
         * @param mixed                                     $rid
         * @param mixed                                     $translator_id
         * @param array<string,string|array<string,string>> $translation_package
         * @param array                                     $batch_options
         *
         * @return bool|int false on failure, job_id on success
         */
        function add_translation_job($rid, $translator_id, $translation_package, $batch_options = array())
        {
        }
        /**
         * Clean orphan jobs in posts
         *
         * @param array $posts
         */
        function cleanup_translation_jobs_cart_posts($posts)
        {
        }
        /**
         * Incorporates posts in cart data with post title, post date, post notes,
         * post type, post status
         *
         * @param array $posts
         *
         * @return boolean | array
         */
        function get_translation_jobs_basket_posts($posts)
        {
        }
        /**
         * Incorporates strings in cart data
         *
         * @param array       $strings
         * @param bool|string $source_language
         *
         * @return boolean | array
         */
        function get_translation_jobs_basket_strings($strings, $source_language = \false)
        {
        }
        function get_translation_job($job_id, $include_non_translatable_elements = \false, $auto_assign = \false, $revisions = 0)
        {
        }
        function get_translation_job_id_filter($empty, $args)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return int|null
         */
        public function get_translation_job_id($trid, $language_code)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return string|null
         */
        public function get_translation_job_editor($trid, $language_code)
        {
        }
        function save_translation($data)
        {
        }
        /**
         * Saves the contents a job's post to the job itself
         *
         * @param int $job_id
         *
         * @hook wpml_save_job_fields_from_post
         * @deprecated since WPML 3.2.3 use the action hook wpml_save_job_fields_from_post
         */
        function save_job_fields_from_post($job_id)
        {
        }
        function mark_job_done($job_id)
        {
        }
        function resign_translator($job_id, $skip_notification = \false)
        {
        }
        /**
         * Resign the given translator from all unfinished translation jobs.
         *
         * @param WP_User $translator
         */
        public function resign_translator_from_unfinished_jobs(\WP_User $translator)
        {
        }
        function remove_translation_job($job_id, $new_translation_status = \ICL_TM_WAITING_FOR_TRANSLATOR, $new_translator_id = 0)
        {
        }
        // $translation_id - int or array
        function cancel_translation_request($translation_id, $remove_translation_record = \true)
        {
        }
        function render_option_writes($name, $value, $key = '')
        {
        }
        /**
         * @param array $info
         *
         * @deprecated @since 3.2 Use TranslationProxy::get_current_service_info instead
         * @return array
         */
        public static function current_service_info($info = array())
        {
        }
        // set slug according to user preference
        static function set_page_url($post_id)
        {
        }
        /**
         * @param array<string,mixed> $postarr
         * @param string              $lang
         *
         * @return int|WP_Error
         * @deprecated since 4.2.8 Use directly `wpml_get_create_post_helper()` instead.
         *
         */
        public function icl_insert_post($postarr, $lang)
        {
        }
        /**
         * Add missing language information to entities that don't have this
         * information configured.
         */
        public function add_missing_language_information()
        {
        }
        public static function include_underscore_templates($name)
        {
        }
        public static function get_job_status_string($status_id, $needs_update = \false)
        {
        }
        function display_basket_notification($position)
        {
        }
        public function get_element_type($trid)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function is_external_type($type)
        {
        }
        /**
         * @param int    $post_id
         * @param string $element_type_prefix
         *
         * @return mixed|null|void|WP_Post
         */
        public function get_post($post_id, $element_type_prefix)
        {
        }
        public function init_current_translator()
        {
        }
        public function get_translation_setting_name($section)
        {
        }
        public function get_custom_translation_setting_name($section)
        {
        }
        public function get_custom_readonly_translation_setting_name($section)
        {
        }
        public function get_readonly_translation_setting_name($section)
        {
        }
        /**
         * Save notification settings.
         *
         * @param array $data  Request data
         */
        public function icl_tm_save_notification_settings($data)
        {
        }
        /**
         * Cancel translation jobs.
         *
         * @param array $data  Request data
         */
        public function icl_tm_cancel_jobs($data)
        {
        }
        /** @return int */
        public function get_init_priority()
        {
        }
    }
    class WPML_Post_Edit_Ajax
    {
        const AJAX_ACTION_SWITCH_POST_LANGUAGE = 'wpml_switch_post_language';
        /**
         * For test purposes
         *
         * @var WPML_Custom_Field_Setting_Factory
         */
        public static $post_custom_field_settings;
        /**
         * Ajax handler for adding a term via Ajax.
         */
        public static function wpml_save_term_action()
        {
        }
        /**
         * @param \SitePress           $sitepress
         * @param ?string|false        $lang
         * @param ?string|false        $taxonomy
         * @param ?string|false        $slug
         * @param ?string|false        $name
         * @param ?int|false           $trid
         * @param ?string              $description
         * @param ?array<string,mixed> $meta_data
         *
         * @return \WP_Term|false
         */
        public static function save_term_ajax($sitepress, $lang, $taxonomy, $slug, $name, $trid, $description, $meta_data)
        {
        }
        /**
         * Gets the content of a post, its excerpt as well as its title and returns it as an array
         *
         * @param string $content_type
         * @param string $excerpt_type
         * @param int    $trid
         * @param string $lang
         *
         * @return array containing all the fields information
         */
        public static function copy_from_original_fields($content_type, $excerpt_type, $trid, $lang)
        {
        }
        /**
         * Gets the content of a custom posts custom field , its excerpt as well as its title and returns it as an array
         *
         * @param \WP_Post $post
         *
         * @return array<string,string|array<string,string>>
         */
        public static function copy_from_original_custom_fields($post)
        {
        }
        /**
         * Ajax handler for switching the language of a post.
         */
        public static function wpml_switch_post_language()
        {
        }
        public static function wpml_get_default_lang()
        {
        }
    }
    /**
     * Class SitePressLanguageSwitcher
     *
     * @deprecated since 3.6.0
     */
    class SitePressLanguageSwitcher
    {
        /**
         * @deprecated since 3.6.0
         *
         * @return string
         */
        static function get_language_selector_footer()
        {
        }
        /**
         * @deprecated since 3.6.0
         */
        function language_selector_footer()
        {
        }
        /**
         * @param string $native_name
         * @param bool   $translated_name
         * @param bool   $show_native_name
         * @param bool   $show_translate_name
         * @param bool   $include_html
         *
         * @return string
         * @deprecated since 3.6.0
         *
         */
        public function language_display($native_name, $translated_name = \false, $show_native_name = \false, $show_translate_name = \false, $include_html = \true)
        {
        }
    }
    class WPML_TM_Record_User
    {
        /** @var WPML_TM_Records $tm_records */
        protected $tm_records;
        /**
         * WPML_TM_Record_User constructor.
         *
         * @param WPML_TM_Records $tm_records
         */
        public function __construct(&$tm_records)
        {
        }
    }
    class WPML_TM_Element_Translations extends \WPML_TM_Record_User
    {
        public function init_hooks()
        {
        }
        public function reload()
        {
        }
        public function is_update_needed($trid, $language_code)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return string
         */
        public function get_element_type_prefix($trid, $language_code)
        {
        }
        public function get_translation_status_filter($empty, $args)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return int
         */
        public function get_translation_status($trid, $language_code)
        {
        }
        /**
         * @param int    $trid
         * @param string $language_code
         *
         * @return string|null
         */
        public function get_translation_review_status($trid, $language_code)
        {
        }
        public function init_job_id($trid, $target_lang_code)
        {
        }
        public function init_jobs($trids)
        {
        }
    }
}
namespace OTGS\Installer\Templates\Repository {
    class EndUsers
    {
        public static function render($withProduct, $model)
        {
        }
    }
    class Expired
    {
        public static function render($model)
        {
        }
    }
    class Registered
    {
        public static function render($model)
        {
        }
    }
    class Register
    {
        public static function render($model)
        {
        }
    }
    class RegisteredButtons
    {
        public static function render($model)
        {
        }
    }
    class LegacyFree
    {
        public static function render($model)
        {
        }
    }
    class Refunded
    {
        public static function render($model)
        {
        }
    }
}
namespace OTGS\Installer\Subscription {
    class SubscriptionManager
    {
        /**
         * @param string $repositoryId
         * @param InstallerApiClient $apiClient
         * @param OTGS_Products_Config_Db_Storage $productsConfigStorage
         */
        public function __construct($repositoryId, \OTGS\Installer\Api\InstallerApiClient $apiClient, \OTGS_Products_Config_Db_Storage $productsConfigStorage)
        {
        }
        /**
         * @param string $siteKey
         * @param int $source
         *
         * @throws \OTGS_Installer_Fetch_Subscription_Exception
         * @throws InvalidProductBucketUrl
         */
        public function fetch($siteKey, $source)
        {
        }
        /**
         * @param string $repository_id
         * @param int $fetchVersion
         *
         * @return bool
         */
        public function shouldRefetchProductUrl($repository_id, $fetchVersion)
        {
        }
    }
    class SubscriptionManagerFactory
    {
        /**
         * @param $installerSettings
         */
        public function __construct($installerSettings)
        {
        }
        public function create($repositoryId, $repositoryApiUrl)
        {
        }
    }
}
namespace OTGS\Installer\Recommendations {
    class Storage
    {
        const ADMIN_NOTICES_OPTION = 'otgs_installer_recommendations_admin_notices_v2';
        /**
         * @param string $key
         * @param array $data
         */
        public static function save($key, $data)
        {
        }
        public static function delete($pluginSlug, $repositoryId)
        {
        }
        /**
         * @return array
         */
        public static function getAll()
        {
        }
    }
    class RecommendationsForInstallerPlugins
    {
        /**
         * @param array $pluginsRecommendations
         * @param array $pluginsData
         */
        public function __construct($pluginsRecommendations, $pluginsData)
        {
        }
        /**
         * @return array
         */
        public function getRecommendations()
        {
        }
        /**
         * @return array
         */
        public function getPluginsData()
        {
        }
    }
    class RecommendationsManager
    {
        /**
         * RecommendationsManager constructor.
         *
         * @param \OTGS_Installer_Repositories $repositories
         * @param array $settings
         * @param Storage $settings
         */
        public function __construct(\OTGS_Installer_Repositories $repositories, $settings, \OTGS\Installer\Recommendations\Storage $noticesStorage)
        {
        }
        public function addHooks()
        {
        }
        public function activatedPluginRecommendation($plugin)
        {
        }
        public function deactivatedPluginRecommendation($plugin)
        {
        }
        public function recommendationSuccess()
        {
        }
        /**
         * @return array
         */
        public function getRepositoryPluginsRecommendations()
        {
        }
        public function getRecommendationStoredNotices($existingNotices)
        {
        }
    }
    class GluePluginData
    {
        /**
         * @param string $pluginSlug
         * @param array $gluePluginData
         */
        public function __construct($pluginSlug, $gluePluginData)
        {
        }
        /**
         * @return string
         */
        public function getPluginSlug()
        {
        }
        /**
         * @return array
         */
        public function getGluePluginData()
        {
        }
    }
}
namespace OTGS\Installer\Api\Exception {
    class InvalidSubscription extends \Exception
    {
        public function __construct($details)
        {
        }
    }
    class InvalidProductsResponseException extends \Exception
    {
        public function __construct()
        {
        }
    }
    class InvalidResponseException extends \Exception
    {
        public function __construct()
        {
        }
    }
    class InvalidProductBucketUrl extends \Exception
    {
        public function __construct($details)
        {
        }
    }
    class ClientException extends \Exception
    {
        public function __construct($details)
        {
        }
    }
    class InvalidSubscriptionResponseException extends \Exception
    {
        public function __construct()
        {
        }
    }
}
namespace OTGS\Installer\Api {
    class InstallerApiClient
    {
        /**
         * @param OTGS_Installer_Logger_Storage $loggerStorage
         * @param Client $client
         * @param SubscriptionEndpoint $subscription
         * @param ProductBucketUrlEndpoint $productBucketUrl
         */
        public function __construct(\OTGS_Installer_Logger_Storage $loggerStorage, \OTGS\Installer\Api\Client\Client $client, \OTGS\Installer\Api\Endpoint\Subscription $subscription, \OTGS\Installer\Api\Endpoint\ProductBucketUrl $productBucketUrl)
        {
        }
        /**
         * @param string $siteKey
         * @param string $source
         *
         * @throws \OTGS_Installer_Fetch_Subscription_Exception
         */
        public function fetchSubscription($siteKey, $source)
        {
        }
        /**
         * @param string $siteKey
         *
         */
        public function fetchProductUrl($siteKey)
        {
        }
    }
    class SiteUrl
    {
        /**
         * @param array $repositoriesSettings
         */
        public function __construct($repositoriesSettings)
        {
        }
        /**
         * @copied \WP_Installer::get_installer_site_url
         * @copied \OTGS_Installer_Fetch_Subscription::get_installer_site_url
         *
         * @param string $repository_id
         *
         * @return mixed
         */
        public function get($repository_id = false)
        {
        }
    }
}
namespace OTGS\Installer\Api\Client {
    class Client
    {
        const TIMEOUT = 45;
        /**
         * @param \WP_Http $http
         * @param string $url
         */
        public function __construct(\WP_Http $http, $url)
        {
        }
        /**
         * @param array $body
         *
         * @return mixed
         * @throws ClientException
         */
        public function post($body)
        {
        }
    }
}
namespace OTGS\Installer\Api\Endpoint {
    class ProductBucketUrl
    {
        /**
         * @param string $repositoryId
         * @param SiteUrl $siteUrl
         */
        public function __construct($repositoryId, \OTGS\Installer\Api\SiteUrl $siteUrl)
        {
        }
        /**
         * @param string $siteKey
         *
         * @return array
         */
        public function prepareRequest($siteKey)
        {
        }
        /**
         * @param array $response
         * @throws InvalidProductsResponseException
         */
        public function parseResponse($response)
        {
        }
    }
    class Subscription
    {
        /**
         * @param string $repositoryId
         * @param SiteUrl $siteUrl
         * @param OTGS_Installer_Plugin_Finder $plugin_finder
         */
        public function __construct($repositoryId, \OTGS\Installer\Api\SiteUrl $siteUrl, \OTGS_Installer_Plugin_Finder $plugin_finder)
        {
        }
        /**
         * @param string $siteKey
         * @param int $source
         *
         * @return array
         */
        public function prepareRequest($siteKey, $source)
        {
        }
        /**
         * @throws \Exception
         * @return \stdClass
         * @param array $response
         */
        public function parseResponse($response)
        {
        }
    }
}
namespace OTGS\Installer\Api {
    class InstallerApiClientFactory
    {
        /**
         * @param array $installerSettings
         * @param string $repositoryId
         * @param string $repositoryApiUrl
         *
         * @return InstallerApiClient
         */
        public static function create(\OTGS_Installer_Logger_Storage $loggerStorage, $installerSettings, $repositoryId, $repositoryApiUrl)
        {
        }
    }
}
namespace {
    class OTGS_Installer_PHP_Functions
    {
        /**
         * @param string $constant_name
         *
         * @return bool
         */
        public function defined($constant_name)
        {
        }
        /**
         * @param string $constant_name
         *
         * @return string|int|null
         */
        public function constant($constant_name)
        {
        }
        /**
         * @return int
         */
        public function time()
        {
        }
        public function phpversion()
        {
        }
    }
    class OTGS_Installer_Plugins_Update_Cache_Cleaner
    {
        public function add_hooks()
        {
        }
        public function clean_plugins_update_cache()
        {
        }
    }
    class Installer_Dependencies
    {
        function __construct()
        {
        }
        public function is_win_paths_exception($repository_id)
        {
        }
        public function is_uploading_allowed()
        {
        }
        public function cant_download($repository_id)
        {
        }
        public function win_paths_exception_message()
        {
        }
        public function prevent_plugins_update_on_plugins_page()
        {
        }
        public function wp_plugin_update_row_win_exception()
        {
        }
        public function prevent_plugins_update_on_updates_screen()
        {
        }
        public function php_libraries_missing()
        {
        }
        public function missing_php_functions_notice()
        {
        }
    }
    class WP_Installer
    {
        const TOOLSET_TYPES = 'Toolset Types';
        const LEGACY_FREE_TYPES_SUBSCRIPTION_ID = 5495;
        const GRACE_TIME = \MONTH_IN_SECONDS;
        protected static $_instance = \null;
        public $settings = array();
        protected $api_debug = '';
        protected $_plugins_renew_warnings = array();
        /**
         * @phpstan-ignore-next-line
         * @var Installer_Embedded_Plugins|null
         */
        public $installer_embedded_plugins;
        const SITE_KEY_VALIDATION_SOURCE_OTHER = 0;
        const SITE_KEY_VALIDATION_SOURCE_DOWNLOAD_SPECIFIC = 1;
        const SITE_KEY_VALIDATION_SOURCE_DOWNLOAD_REPORT = 2;
        const SITE_KEY_VALIDATION_SOURCE_REGISTRATION = 3;
        const SITE_KEY_VALIDATION_SOURCE_REVALIDATION = 4;
        const SITE_KEY_VALIDATION_SOURCE_UPDATES_CHECK = 5;
        const SITE_KEY_VALIDATION_SOURCE_REVALIDATION_DAILY = 6;
        public $dependencies;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function get_repositories()
        {
        }
        /**
         * @return OTGS_Products_Manager|null
         */
        public function get_products_manager()
        {
        }
        public function set_config($key, $value)
        {
        }
        public function init()
        {
        }
        public function get_last_subscriptions_refresh()
        {
        }
        public function log($message)
        {
        }
        public function register_admin_message($text, $type = 'updated')
        {
        }
        public function show_admin_messages()
        {
        }
        public function load_locale()
        {
        }
        public function load_embedded_plugins()
        {
        }
        public function menu_setup()
        {
        }
        public static function menu_url()
        {
        }
        public function setup_plugins_action_links()
        {
        }
        public function types_upgrade_link($links)
        {
        }
        public function plugins_action_links_registered($links)
        {
        }
        public function plugins_action_links_not_registered($links)
        {
        }
        /**
         * Repository has valid subscription AND plugin is available for this subscription.
         * @param $repository_id
         * @param $slug
         *
         * @return bool
         */
        public function plugin_is_registered($repository_id, $slug)
        {
        }
        public function version()
        {
        }
        public function plugin_path()
        {
        }
        public function plugin_url()
        {
        }
        public function vendor_url()
        {
        }
        public function get_embedded_at()
        {
        }
        public function is_repositories_page()
        {
        }
        public function res_url()
        {
        }
        public function save_settings()
        {
        }
        public function get_settings($refresh = \false, $shouldLoadHardcodedSiteKeys = \true)
        {
        }
        public static function get_repository_hardcoded_site_key($repository_id)
        {
        }
        public function get_installer_site_url($repository_id = \false)
        {
        }
        /**
         * @param string $repository_id
         *
         * @return string|null
         */
        public function get_registered_site_url($repository_id)
        {
        }
        public function get_site_key_nags_config()
        {
        }
        /**
         * @return array
         */
        public function getRepositories()
        {
        }
        public function add_install_plugins_tab($tabs)
        {
        }
        public function load_repositories_list()
        {
        }
        /**
         * @return string|null
         */
        public function get_xml_config_file()
        {
        }
        public function filter_repositories_list()
        {
        }
        public function refresh_subscriptions_data()
        {
        }
        public function shouldDisplayConnectionIssueMessage($repositoryId)
        {
        }
        public function get_recommendations($repository_id)
        {
        }
        public function refresh_repositories_data($bypass_bucket = \false)
        {
        }
        public function show_products($args = array())
        {
        }
        /**
         * @param string $repositoryId
         * @param array $downloads List of plugins data that are available for subscription type and used on commercial tab.
         *
         * @return array
         */
        public function get_plugins_sections($repositoryId, $downloads)
        {
        }
        public function get_product_price($repository_id, $package_id, $product_id, $incl_discount = \false)
        {
        }
        public function get_product_data($repository_id, $data_type)
        {
        }
        /**
         * @param array $products
         * @param array $product
         *
         * @return string
         */
        public function getProductPriceWithDiscountString($products, $product)
        {
        }
        /**
         * @param array           $repository
         * @param array           $packages
         * @param int|string|null $subscription_type
         * @param bool            $expired
         * @param array|null      $upgrade_options
         * @param string          $repository_id
         *
         * @return array
         */
        public function getRenderProductPackagesData($repository, $packages, $subscription_type, $expired, $upgrade_options, $repository_id)
        {
        }
        public function get_end_user_renewal_url($repository_id)
        {
        }
        public function get_extra_url_parameters()
        {
        }
        public function append_parameters_to_buy_url($url, $repository_id, $args = array())
        {
        }
        public function save_site_key($args = array())
        {
        }
        /**
         * Alias for WP_Installer::get_repository_site_key
         * @see WP_Installer::get_repository_site_key()
         *
         * @param string $repository_id
         *
         * @return string|false (site key) or false
         */
        public function get_site_key($repository_id)
        {
        }
        public function remove_site_key($repository_id, $refresh_repositories_data = \true)
        {
        }
        public function validate_repository_subscription()
        {
        }
        public function api_debug_log($text)
        {
        }
        public function get_repository_site_key($repository_id)
        {
        }
        /**
         * @param $repository_id
         *
         * @return OTGS_Installer_Subscription
         */
        public function get_subscription($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param int $expiredForPeriod
         *
         * @return bool
         */
        public function repository_has_valid_subscription($repository_id, $expiredForPeriod = 0)
        {
        }
        /**
         * @param string $repository_id
         * @param int $expiredForPeriod
         *
         * @return bool
         */
        public function repository_is_in_grace_period($repository_id, $expiredForPeriod = 0)
        {
        }
        /**
         * @param string $repository_id
         *
         * @return bool
         */
        public function repository_has_refunded_subscription($repository_id)
        {
        }
        /**
         * @return bool
         */
        public function should_display_unregister_link_on_refund_notice()
        {
        }
        public function set_hide_unregister_link_on_refund_notice_date($hide_till_date)
        {
        }
        public function repository_has_subscription($repository_id)
        {
        }
        public function repository_has_development_site_key($repository_id)
        {
        }
        public function repository_has_legacy_free_subscription($repository_id)
        {
        }
        public function repository_has_expired_subscription($repository_id, $expiredForPeriod = 0)
        {
        }
        public function repository_has_in_grace_subscription($repository_id, $expiredForPeriod = 0)
        {
        }
        public function get_generic_product_name($repository_id)
        {
        }
        public function show_subscription_renew_warning($repository_id, $subscription_id)
        {
        }
        public function setup_plugins_renew_warnings()
        {
        }
        public function queue_plugins_renew_warnings()
        {
        }
        public function plugins_renew_warning($plugin_file, $plugin_data, $status)
        {
        }
        public function get_subscription_type_for_repository($repository_id)
        {
        }
        public function have_superior_subscription($subscription_type, $product)
        {
        }
        public function is_product_available_for_download($product_name, $repository_id)
        {
        }
        public function get_upgrade_options($repository_id)
        {
        }
        public function append_site_key_to_download_url($url, $key, $repository_id)
        {
        }
        public function plugin_is_installed($name, $slug, $version = \null)
        {
        }
        public function plugin_is_embedded_version($name, $slug)
        {
        }
        //Alias for plugin_is_installed
        public function get_plugin_installed_version($name, $slug)
        {
        }
        public function get_plugin_repository_version($repository_id, $slug)
        {
        }
        public function is_uploading_allowed()
        {
        }
        public function download_plugin_ajax_handler()
        {
        }
        public function download_plugin($slug, $url)
        {
        }
        public function activate_plugin()
        {
        }
        public function custom_plugins_api_call($result, $action, $args)
        {
        }
        public function setup_plugins_page_notices()
        {
        }
        public function localize_strings()
        {
        }
        public function get_matching_cp($repository, $args = array())
        {
        }
        public function set_filtered_prices($args = array())
        {
        }
        public function set_hierarchy_and_order()
        {
        }
        public function compare_package_order($a, $b)
        {
        }
        public function get_support_tag_by_name($name, $repository)
        {
        }
        public function plugin_upgrade_custom_errors()
        {
        }
        public function get_api_debug()
        {
        }
    }
    class OTGS_Installer_Instances_Factory
    {
        public function create()
        {
        }
    }
    class OTGS_Installer_Instance
    {
        /**
         * @var string
         */
        public $bootfile;
        /**
         * @var string
         */
        public $version;
        /**
         * @var string|bool
         */
        public $high_priority;
        /**
         * @var bool
         */
        public $delegated;
        /**
         * @param string $bootfile
         *
         * @return $this
         */
        public function set_bootfile($bootfile)
        {
        }
        /**
         * @param string|bool $high_priority
         *
         * @return $this
         */
        public function set_high_priority($high_priority)
        {
        }
        /**
         * @param string $version
         *
         * @return $this
         */
        public function set_version($version)
        {
        }
        /**
         * @param bool $delegated
         *
         * @return $this
         */
        public function set_delegated($delegated)
        {
        }
    }
    class OTGS_Installer_Instances
    {
        public function __construct($instances)
        {
        }
        public function get()
        {
        }
    }
    /**
     * Installer_Theme_Class
     */
    class Installer_Theme_Class
    {
        /** The Themes Option */
        protected $installer_themes_option;
        /** Update settings */
        protected $installer_themes_available_updates;
        /** The Themes */
        protected $installer_themes = array();
        /** Repository with themes */
        protected $installer_repo_with_themes;
        /** Active tab */
        protected $installer_theme_active_tab;
        /** Theme user registration */
        protected $theme_user_registration;
        /** Client active subscription */
        protected $installer_theme_subscription_type;
        public function __construct()
        {
        }
        /** Init */
        public function init()
        {
        }
        /** Enqueue scripts */
        public function installer_theme_enqueue_scripts()
        {
        }
        /** Case where user is subscribed to a subscription that does not have themes */
        protected function installer_theme_subscription_does_not_have_theme($js_array)
        {
        }
        /** Override WordPress Themes API */
        public function installer_theme_api_override($api_boolean, $action, $args)
        {
        }
        /** Override WordPress Themes API response with our own themes API*/
        public function installer_theme_api_override_response($res, $action, $args)
        {
        }
        /** Theme upgrade check */
        public function installer_theme_upgrade_check($the_value)
        {
        }
        /** When WordPress queries its own Themes API, we sync with our own */
        public function installer_theme_sync_native_wp_api($response, $responsetext, $class, $args, $url)
        {
        }
        /** Sets active tab on init */
        public function installer_theme_sets_active_tab_on_init()
        {
        }
        /** WP Theme API compatibility- added num ratings */
        /** Installer 1.7.6+ Added updated 'rating' field */
        public function installer_theme_add_num_ratings($themes)
        {
        }
        /** When WordPress.org makes a call to its repository, let's run our own upgrade checks too */
        public function installer_theme_sync_call_wp_theme_api($locales)
        {
        }
        /** When the user is on Themes install page OTG themes repository, let's the currently selected tab */
        public function installer_theme_add_query_arg_tab($url, $path, $blog_id = \null)
        {
        }
        /** Save frontend theme tab selected */
        public function installer_theme_frontend_selected_tab()
        {
        }
        /** Installer loaded aux hooks */
        public function installer_theme_loaded_hooks()
        {
        }
        /** Get themes by subscription type */
        protected function installer_theme_get_themes_by_subscription($subscription_type, $repo)
        {
        }
        /** Filter API theme response according to user subscription */
        public function installer_theme_filter_themes_by_subscription($themes, $active_tab)
        {
        }
        /** Hook to wp_loaded, fires when all Installer theme class is ready */
        public function installer_themes_support_set_up_func()
        {
        }
    }
    class OTGS_Installer_WP_Components_Storage
    {
        const COMPONENTS_CACHE_OPTION_KEY = 'otgs_active_components';
        public function refresh_cache()
        {
        }
        public function is_outdated()
        {
        }
        public function get()
        {
        }
        /**
         * @return array
         */
        public function get_plugins()
        {
        }
    }
    class OTGS_Installer_Site_Key_Ajax
    {
        public function __construct(\OTGS_Installer_Logger $logger, \OTGS_Installer_Repositories $repositories, \OTGS_Installer_Subscription_Factory $subscription_factory, \OTGS\Installer\Subscription\SubscriptionManagerFactory $subscriptionManagerFactory)
        {
        }
        public function add_hooks()
        {
        }
        public function save()
        {
        }
        public function remove()
        {
        }
        public function update()
        {
        }
        public function find()
        {
        }
    }
    class OTGS_Installer_Package_Product
    {
        public function __construct(array $params = array())
        {
        }
        public function get_id()
        {
        }
        public function get_name()
        {
        }
        public function get_description()
        {
        }
        public function get_price()
        {
        }
        public function get_subscription_type()
        {
        }
        public function get_subscription_type_text()
        {
        }
        public function get_subscription_info()
        {
        }
        public function get_subscription_type_equivalent()
        {
        }
        public function get_url()
        {
        }
        public function get_renewals()
        {
        }
        public function get_upgrades()
        {
        }
        public function get_plugins()
        {
        }
        /**
         * @param string $slug
         *
         * @return bool
         */
        public function is_plugin_registered($slug)
        {
        }
        public function get_downloads()
        {
        }
    }
}
namespace OTGS\Installer {
    class Settings
    {
        public static function load()
        {
        }
        public static function save($settings)
        {
        }
        public static function is_gz_on()
        {
        }
    }
}
namespace OTGS\Installer\Loader {
    class Config
    {
        public static function merge(array $delegate, array $wpInstallerInstances)
        {
        }
    }
}
namespace {
    class Translation_Service_Info
    {
        public function add_hooks()
        {
        }
        public function save_info($data, $repository_id)
        {
        }
    }
}
namespace OTGS\Installer\Collect\Support {
    trait Macroable
    {
        /**
         * The registered string macros.
         *
         * @var callable[]
         */
        protected static $macros = [];
        /**
         * Register a custom macro.
         *
         * @param string $name
         * @param callable $macro
         *
         * @return void
         */
        public static function macro($name, callable $macro)
        {
        }
        /**
         * Checks if macro is registered.
         *
         * @param string $name
         *
         * @return bool
         */
        public static function hasMacro($name)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param string $method
         * @param mixed[] $parameters
         *
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public static function __callStatic($method, $parameters)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param string $method
         * @param mixed[] $parameters
         *
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public function __call($method, $parameters)
        {
        }
    }
}
namespace OTGS\Installer\FP {
    /**
     * @method static callable|mixed value(mixed ...$data) - Curried :: a|(*→a) → a
     */
    class Fns
    {
        use \OTGS\Installer\Collect\Support\Macroable;
        const __ = '__CURRIED_PLACEHOLDER__';
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|bool not( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isNotNull( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|mixed ifElse( ...$predicate, ...$first, ...$second, ...$data ) - Curried :: ( a->bool )->callable->callable->callable
     * @method static callable when( ...$predicate, ...$fn ) - Curried :: ( a->bool )->callable->callable
     * @method static callable unless( ...$predicate, ...$fn ) - Curried :: ( a->bool )->callable->callable
     * @method static callable cond( ...$conditions, ...$fn ) - Curried :: [( a->bool ), callable]->callable
     * @method static callable both( ...$a, ...$b, ...$data ) - Curried :: ( a → bool ) → ( a → bool ) → a → bool
     * @method static callable|bool allPass( ...$predicates, ...$data ) - Curried :: [( *… → bool )] → ( *… → bool )
     * @method static callable|bool anyPass( ...$predicates, ...$data ) - Curried :: [( *… → bool )] → ( *… → bool )
     * @method static callable complement( ...$fn ) - Curried :: ( *… → * ) → ( *… → bool )
     * @method static callable|mixed defaultTo( ...$a, ...$b ) - Curried :: a → b → a | b
     * @method static callable|bool either( ...$a, ...$b ) - Curried :: ( *… → bool ) → ( *… → bool ) → ( *… → bool )
     * @method static callable|mixed until ( ...$predicate, ...$transform, ...$data ) - Curried :: ( a → bool ) → ( a → a ) → a → a
     * @method static callable|bool propSatisfies( ...$predicate, ...$prop, ...$data ) - Curried :: ( a → bool ) → String → [String => a] → bool
     * @method static callable|bool isArray ( ...$a ) - Curried :: a → bool
     * @method static callable|bool isMappable ( ...$a ) - Curried :: a → bool
     * @method static callable|bool isEmpty( ...$a ) - Curried:: a → bool
     * @method static callable|mixed firstSatisfying( ...$predicate, ...$functions, ...$data ) - Curried:: callable->callable[]->mixed->mixed
     * @method static callable|bool isTruthy( ...$data ) - Curried:: mixed->bool
     */
    class Logic
    {
        use \OTGS\Installer\Collect\Support\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    class _Invoker
    {
        /**
         * _Invoker constructor.
         *
         * @param string $fnName
         */
        public function __construct($fnName)
        {
        }
        /**
         * @param mixed ...$args
         *
         * @return _Invoker
         */
        public function with(...$args)
        {
        }
        /**
         * @param mixed $instance
         *
         * @return mixed
         */
        public function __invoke($instance)
        {
        }
    }
    /**
     * @method static callable|mixed prop( ...$key, ...$obj ) - Curried :: string->Collection|array|object->mixed|null
     * @method static callable|mixed propOr( ...$default, ...$key, ...$obj ) - Curried :: mixed->string->Collection|array|object->mixed|null
     * @method static callable|mixed path( ...$path, ...$obj ) - Curried :: array->Collection|array|object->mixed|null
     * @method static callable|mixed pathOr( ...$default, ...$path, ...$obj ) - Curried :: mixed → array → Collection|array|object → mixed
     * @method static callable|bool has( ...$prop, ...$item ) - Curried :: string → a → bool
     * @method static callable|bool hasPath( ...$path, ...$item ) - Curried :: array<string> → a → bool
     */
    class Obj
    {
        use \OTGS\Installer\Collect\Support\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
}
namespace OTGS\Installer\FP\Traits {
    trait Functor
    {
        /** @var mixed */
        protected $value;
        /**
         * @param mixed $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
        /**
         * @param callable $callback
         *
         * @return \WPML\FP\Either
         */
        public abstract function map(callable $callback);
    }
    trait Pointed
    {
        /**
         * of :: a -> M a
         *
         * Curried function that returns an instance of the derived class
         *
         * @param mixed $value (optional)
         *
         * @return mixed|callable
         */
        public static function of($value = null)
        {
        }
    }
    trait ConstApplicative
    {
        /**
         * @param mixed $otherContainer
         *
         * @return mixed
         */
        public function ap($otherContainer)
        {
        }
    }
    trait Applicative
    {
        /**
         * @param mixed $otherContainer
         *
         * @return mixed
         */
        public function ap($otherContainer)
        {
        }
    }
}
namespace OTGS\Installer\FP {
    /**
     * Class Either
     * @package WPML\FP
     *
     * @method static callable|Right of( ...$value ) - Curried :: a → Right a
     *
     * @method static callable|Left left( ...$value ) - Curried :: a → Left a
     *
     * @method static callable|Right right( ...$value ) - Curried :: a → Right a
     *
     * @method static callable|Left|Right fromNullable( ...$value ) - Curried :: a → Either a
     *
     * @method static callable|Left|Right fromBool( ...$value ) - Curried :: a → Either a
     *
     * @method static Either tryCatch( ...$fn ) - Curried :: a → Either a
     *
     * @method static mixed getOrElse( ...$other )
     */
    abstract class Either
    {
        use \OTGS\Installer\FP\Traits\Functor;
        use \OTGS\Installer\Collect\Support\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @return Either
         */
        public function join()
        {
        }
        /**
         * @param callable $fn
         *
         * @return mixed
         */
        public abstract function chain(callable $fn);
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public abstract function bichain(callable $leftFn, callable $rightFn);
        /**
         * @param callable $fn
         *
         * @return mixed
         */
        public abstract function orElse(callable $fn);
        public abstract function bimap(callable $leftFn, callable $rightFn);
        public abstract function coalesce(callable $leftFn, callable $rightFn);
        public abstract function alt(\OTGS\Installer\FP\Either $alt);
        public abstract function filter(callable $fn);
    }
    class Left extends \OTGS\Installer\FP\Either
    {
        use \OTGS\Installer\FP\Traits\ConstApplicative;
        use \OTGS\Installer\FP\Traits\Pointed;
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function map(callable $fn)
        {
        }
        public function bimap(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Right
         */
        public function coalesce(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @return void
         * @throws \Exception
         */
        public function get()
        {
        }
        /**
         * @param mixed $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Right
         */
        public function orElse(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public function bichain(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         * @throws \Exception
         */
        public function getOrElseThrow($value)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function tryCatch(callable $fn)
        {
        }
        public function alt(\OTGS\Installer\FP\Either $alt)
        {
        }
    }
    class Right extends \OTGS\Installer\FP\Either
    {
        use \OTGS\Installer\FP\Traits\Applicative;
        use \OTGS\Installer\FP\Traits\Pointed;
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function map(callable $fn)
        {
        }
        public function bimap(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Right
         */
        public function coalesce(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param Either $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function orElse(callable $fn)
        {
        }
        /**
         * @param mixed $value
         *
         * @return mixed
         */
        public function getOrElseThrow($value)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public function bichain(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function tryCatch(callable $fn)
        {
        }
        public function alt(\OTGS\Installer\FP\Either $alt)
        {
        }
    }
    /**
     * @method static callable|bool equals( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool lt( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool lte( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool gt( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool gte( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool propEq( ...$prop, ...$value, ...$obj ) - Curried :: String → a → array → bool
     */
    class Relation
    {
        use \OTGS\Installer\Collect\Support\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|string len( ...$str ) - Curried :: string → int
     */
    class Str
    {
        use \OTGS\Installer\Collect\Support\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * Class Undefined
     * @package OTGS\Installer\FP
     *
     * Class represents Undefined value. It let us handle correctly expected, but falsy values like null, 0 or false.
     */
    class Undefined
    {
    }
}
namespace OTGS\Installer {
    class Collection
    {
        /**
         * The items contained in the collection.
         *
         * @var mixed[]
         */
        protected $items = [];
        /**
         * @param array $array
         *
         * @return Collection
         */
        public static function of(array $array)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Collection
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Collection
         */
        public function map(callable $fn)
        {
        }
        /**
         * Converts array from key => vales to an array of pairs [ key, value ]
         * @return Collection
         */
        public function entities()
        {
        }
        /**
         * @param string $column
         *
         * @return Collection
         */
        public function pluck($column)
        {
        }
        /**
         * @param callable $fn
         * @param mixed    $initial
         *
         * @return mixed
         */
        public function reduce(callable $fn, $initial = 0)
        {
        }
        /**
         * @return Collection
         */
        public function values()
        {
        }
        /**
         * @param array $other
         *
         * @return Collection
         */
        public function mergeRecursive(array $other)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|Collection|NullCollection|array
         */
        public function get($key = null)
        {
        }
        public function getOrNull($key = null)
        {
        }
        public function contains($value)
        {
        }
        public function head()
        {
        }
        /**
         * Determine if an item exists at an offset.
         *
         * @param  mixed  $key
         * @return bool
         */
        public function offsetExists($key)
        {
        }
        /**
         * Determine if an item exists in the collection by key.
         *
         * @param  mixed  $key
         * @return bool
         */
        public function has($key)
        {
        }
    }
    class NullCollection
    {
        public function map(callable $fn)
        {
        }
        public function filter(callable $fn)
        {
        }
        public function head()
        {
        }
        public function pluck()
        {
        }
        public function get()
        {
        }
        public function getOrNull()
        {
        }
    }
}
namespace {
    class OTGS_Installer_WP_Share_Local_Components_Setting_Hooks
    {
        const TEMPLATE_CHECKBOX = 'share-local-data-setting';
        const TEMPLATE_RADIO = 'share-local-data-setting-radio';
        public function __construct(\OTGS_Template_Service $template_service, \OTGS_Installer_WP_Share_Local_Components_Setting $setting)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $args
         *
         * @throws \InvalidArgumentException
         */
        public function render_local_components_setting(array $args)
        {
        }
        /**
         * @param $ignore
         * @param string $repo (wpml|toolset)
         *
         * @return bool
         */
        public function has_local_components_setting_filter($ignore, $repo)
        {
        }
        public function get_installer_repository_subscription_status($ignore, $repo)
        {
        }
    }
    class OTGS_Installer_Plugins_Page_Notice
    {
        const TEMPLATE = 'plugins-page';
        const DISPLAY_SUBSCRIPTION_NOTICE_KEY = 'display_subscription_notice';
        const DISPLAY_SETTING_NOTICE_KEY = 'display_setting_notice';
        public function __construct(\OTGS_Template_Service $template_service, \OTGS_Installer_Plugin_Finder $plugin_finder)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return array
         */
        public function get_plugins()
        {
        }
        public function add_plugin($plugin_id, $plugin_data)
        {
        }
        /**
         * @param string $plugin_file
         */
        public function show_purchase_notice_under_plugin($plugin_file, $plugin_data)
        {
        }
    }
    class OTGS_Installer_Logger_Storage
    {
        const MAX_SIZE = 50;
        const OPTION_KEY = 'otgs-installer-log';
        const COMPONENT_SUBSCRIPTION = 'subscription-fetching';
        const COMPONENT_PRODUCTS_URL = 'products-url-fetching';
        const COMPONENT_DOWNLOAD = 'download';
        const COMPONENT_REPOSITORIES = 'repositories-fetching';
        const COMPONENT_PRODUCTS_PARSING = 'products-parsing';
        const API_CONNECTION_TEST = 'api-connection-test';
        const PRODUCTS_FILE_CONNECTION_TEST = 'products-connection-test';
        public function __construct(\OTGS_Installer_Log_Factory $log_factory, $max_size = self::MAX_SIZE)
        {
        }
        /**
         * @return array|OTGS_Installer_Log[]
         */
        public function get()
        {
        }
        public function add(\OTGS_Installer_Log $log)
        {
        }
    }
    class OTGS_Installer_Log_Factory
    {
        /**
         * @return OTGS_Installer_Log
         */
        public function create()
        {
        }
    }
    class OTGS_Installer_Logger
    {
        public function __construct(\WP_Installer $installer, \OTGS_Installer_Logger_Storage $storage)
        {
        }
        public function get_api_log()
        {
        }
        public function add_api_log($log)
        {
        }
        public function save_log(\OTGS_Installer_Log $log)
        {
        }
        public function add_log($log)
        {
        }
    }
    class OTGS_Installer_Log
    {
        /**
         * @return string
         */
        public function get_time()
        {
        }
        /**
         * @param string $time
         *
         * @return $this
         */
        public function set_time($time)
        {
        }
        /**
         * @return string
         */
        public function get_request_url()
        {
        }
        /**
         * @param string $request_url
         *
         * @return $this
         */
        public function set_request_url($request_url)
        {
        }
        /**
         * @return array
         */
        public function get_request_args()
        {
        }
        /**
         * @param array $request_args
         *
         * @return $this
         */
        public function set_request_args($request_args)
        {
        }
        /**
         * @return string
         */
        public function get_response()
        {
        }
        /**
         * @param string $response
         *
         * @return $this
         */
        public function set_response($response)
        {
        }
        /**
         * @return string
         */
        public function get_component()
        {
        }
        /**
         * @param string $component
         *
         * @return $this
         */
        public function set_component($component)
        {
        }
    }
    /**
     * Class WP_Installer_Channels
     * @since 1.8
     */
    class WP_Installer_Channels
    {
        const CHANNEL_PRODUCTION = 'production';
        const CHANNEL_BETA = 'beta';
        const CHANNEL_DEVELOPMENT = 'development';
        protected static $_instance = \null;
        function __construct()
        {
        }
        /**
         * @return null|WP_Installer_Channels
         */
        public static function instance()
        {
        }
        /**
         * Get the channel literal id based on the numeric id
         *
         * @param mixed $id
         *
         * @return string
         */
        public static function channel_name_by_id($id)
        {
        }
        /**
         * Initialization
         */
        public function init()
        {
        }
        /**
         * Ajax handler for channel switching
         */
        public function set_channel()
        {
        }
        /**
         * @param string $repository_id
         *
         * @return int
         */
        public function get_channel($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param array $downloads
         */
        public function load_channel_selector($repository_id, $downloads)
        {
        }
        /**
         * The beta and development channels can be used only when already using the most up to date versions
         * @param array $downloads
         *
         * @return bool
         */
        public function can_use_unstable_channels($downloads)
        {
        }
        /**
         * Get available updates channels. Only include channels with actual downloads available.
         *
         * @param string $repository_id
         *
         * @return array
         */
        public function get_available_channels($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param array $downloads
         *
         * @return array
         */
        public function filter_downloads_by_channel($repository_id, $downloads)
        {
        }
        /**
         * Get the source channel for the installed version when on the Beta or Development channel
         * @param string $version
         * @param string $repository_id
         * @param string $download_id
         * @param string $download_kind
         *
         * @return string
         */
        public function get_download_source_channel($version, $repository_id, $download_id, $download_kind)
        {
        }
    }
    class OTGS_Installer_WP_Components_Sender
    {
        public function __construct(\WP_Installer $installer, \OTGS_Installer_WP_Share_Local_Components_Setting $settings)
        {
        }
        public function send(array $components, $force = \false)
        {
        }
    }
    class OTGS_Installer_Source
    {
        public function __construct(\WP_Installer $installer, \WP_Filesystem_Base $file_system)
        {
        }
        /**
         * @return array|null
         */
        public function get()
        {
        }
    }
    class OTGS_Installer_Support_Template
    {
        const TEMPLATE_FILE = 'installer-support';
        const SUPPORT_LINK = 'support-link';
        public function __construct(\OTGS_Template_Service $template_service, \OTGS_Installer_Logger_Storage $logger_storage, \OTGS_Installer_Requirements $requirements, \OTGS_Installer_Instances $instances)
        {
        }
        public function show()
        {
        }
        public function render_support_link($args = array())
        {
        }
    }
    class OTGS_Installer_Requirements
    {
        public function get()
        {
        }
    }
    class OTGS_Installer_Connection_Test_Ajax
    {
        const ACTION = 'otgs_installer_test_connection';
        public function __construct(\OTGS_Installer_Connection_Test $connection_test)
        {
        }
        public function add_hooks()
        {
        }
        public function test_connection()
        {
        }
    }
    class OTGS_Installer_Connection_Test_Exception extends \Exception
    {
    }
    class OTGS_Installer_Connection_Test
    {
        public function __construct(\OTGS_Installer_Repositories $repositories, \OTGS_Installer_Upgrade_Response $upgrade_response, \OTGS_Installer_Logger_Storage $logger_storage, \OTGS_Installer_Log_Factory $log_factory)
        {
        }
        /**
         * @param string $repo_id
         *
         * @return null|string
         */
        public function get_api_status($repo_id)
        {
        }
        /**
         * @param string $plugin_id
         *
         * @return bool|string
         */
        public function get_download_status($plugin_id)
        {
        }
    }
    class OTGS_Installer_Support_Hooks
    {
        public function __construct(\OTGS_Installer_Support_Template_Factory $template_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function add_support_page()
        {
        }
        public function render_support_page()
        {
        }
        public function enqueue_scripts($hook)
        {
        }
        public function render_link($args = array())
        {
        }
    }
    class OTGS_Installer_Support_Template_Factory
    {
        public function __construct($installer_path)
        {
        }
        /**
         * @return OTGS_Installer_Support_Template
         */
        public function create()
        {
        }
    }
    class OTGS_Installer_Repository
    {
        public function __construct(array $params = array())
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_product_name()
        {
        }
        /**
         * @param bool $ssl
         *
         * @return string
         */
        public function get_api_url($ssl = \true)
        {
        }
        /**
         * @return OTGS_Installer_Subscription
         */
        public function get_subscription()
        {
        }
        /**
         * @return array
         */
        public function get_packages()
        {
        }
        /**
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_by_subscription_type()
        {
        }
        /**
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_by_subscription_type_equivalent()
        {
        }
        /**
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_by_subscription_type_on_upgrades()
        {
        }
        public function set_subscription(\OTGS_Installer_Subscription $subscription = \null)
        {
        }
    }
    class OTGS_Installer_Repositories
    {
        public function __construct(\WP_Installer $installer, \OTGS_Installer_Repository_Factory $repository_factory, \OTGS_Installer_Subscription_Factory $subscription_factory)
        {
        }
        public function get_all()
        {
        }
        /**
         * @param $id
         *
         * @return null|OTGS_Installer_Repository
         */
        public function get($id)
        {
        }
        public function refresh($bypass_bucket = \false)
        {
        }
        public function save_subscription(\OTGS_Installer_Repository $repository)
        {
        }
    }
    class OTGS_Installer_Repositories_Factory
    {
        public function create(\WP_Installer $installer)
        {
        }
    }
    class OTGS_Installer_Repository_Factory
    {
        public function create_repository($params)
        {
        }
        public function create_package($params)
        {
        }
        public function create_product($params)
        {
        }
    }
    class OTGS_Installer_Package_Product_Finder
    {
        /**
         * @param OTGS_Installer_Repository $repository
         * @param OTGS_Installer_Subscription $subscription
         *
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_in_repository_by_subscription(\OTGS_Installer_Repository $repository, \OTGS_Installer_Subscription $subscription = \null)
        {
        }
    }
    class OTGS_Installer_Icons
    {
        public function __construct(\WP_Installer $installer)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param stdClass $response
         * @param string $name
         *
         * @return stdClass
         */
        public function add_icons_on_response($response, $name)
        {
        }
    }
    class OTGS_Installer_Subscription
    {
        const SUBSCRIPTION_STATUS_INACTIVE = 0;
        const SUBSCRIPTION_STATUS_ACTIVE = 1;
        const SUBSCRIPTION_STATUS_EXPIRED = 2;
        const SUBSCRIPTION_STATUS_INACTIVE_UPGRADED = 3;
        const SUBSCRIPTION_STATUS_ACTIVE_NO_EXPIRATION = 4;
        const SITE_KEY_TYPE_PRODUCTION = 0;
        const SITE_KEY_TYPE_DEVELOPMENT = 1;
        const SUBSCRIPTION_STATUS_TEXT_EXPIRED = 'expired';
        const SUBSCRIPTION_STATUS_TEXT_VALID = 'valid';
        const SUBSCRIPTION_STATUS_TEXT_REFUNDED = 'refunded';
        const SUBSCRIPTION_STATUS_TEXT_MISSING = 'missing';
        /**
         * WPML_Installer_Subscription constructor.
         *
         * @param array|null $subscription
         */
        public function __construct($subscription = array())
        {
        }
        public function get_subscription_status_text()
        {
        }
        public function get_site_key()
        {
        }
        public function get_site_url()
        {
        }
        public function get_type()
        {
        }
        public function get_site_key_type()
        {
        }
        public function get_registered_by()
        {
        }
        public function get_data()
        {
        }
        /**
         * @param int $expiredForPeriod
         * @return bool
         */
        public function is_valid($expiredForPeriod = 0)
        {
        }
        /**
         * @param int $expiredForPeriod
         * @return bool
         */
        public function is_in_grace($expiredForPeriod = 0)
        {
        }
        public function is_refunded()
        {
        }
    }
    class OTGS_Installer_Source_Factory
    {
        public function create()
        {
        }
    }
    class OTGS_Products_Manager_Factory
    {
        /**
         * @param OTGS_Products_Config_Xml $repositories_config
         * @param OTGS_Installer_Logger_Storage $logger_storage
         *
         * @return OTGS_Products_Manager
         */
        public static function create(\OTGS_Products_Config_Xml $repositories_config, \OTGS_Installer_Logger_Storage $logger_storage)
        {
        }
    }
    class OTGS_Products_Config_Xml
    {
        /**
         * @param string $xml_file
         */
        public function __construct($xml_file)
        {
        }
        /**
         * @param $repository_id
         *
         * @return string|null
         */
        public function get_repository_products_url($repository_id)
        {
        }
        public function get_repository_products_default_data()
        {
        }
        /**
         * @return array
         */
        public function get_products_api_urls()
        {
        }
    }
    class OTGS_Installer_Products_Parser
    {
        public function __construct(\WP_Installer_Channels $installerChannels, \OTGS_Products_Config_Xml $productsConfigXml, \OTGS_Installer_Logger_Storage $logger)
        {
        }
        /**
         * @param string         $products_url
         * @param string         $repository_id
         * @param array|WP_Error $response
         *
         * @return array
         * @throws OTGS_Installer_Products_Parsing_Exception
         */
        public function get_products_from_response($products_url, $repository_id, $response)
        {
        }
        public function get_default_products($repository_id)
        {
        }
        /**
         * @return array
         */
        public function get_product_notices()
        {
        }
    }
    class OTGS_Products_Bucket_Repository
    {
        /**
         * @param string $api_url
         * @param string $site_key
         * @param string $site_url
         *
         * @return string|null
         */
        public function get_products_bucket_url($api_url, $site_key, $site_url)
        {
        }
    }
}
namespace OTGS\Installer\Products {
    class ExternalProductsUrls
    {
        public function __construct(\OTGS_Products_Config_Db_Storage $products_config_storage, \OTGS_Products_Bucket_Repository $products_bucket_repository)
        {
        }
        /**
         * @param string $repository_id
         * @param string $site_key
         * @param string $site_url
         *
         * @return string|null
         */
        public function fetchProductUrl($repository_id, $api_url, $site_key, $site_url)
        {
        }
    }
}
namespace {
    class OTGS_Products_Manager
    {
        /**
         * @param OTGS_Products_Config_Xml $products_config_xml
         * @param WP_Installer_Channels $installer_channels
         * @param OTGS_Installer_Logger_Storage $logger_storage
         */
        public function __construct(\OTGS_Products_Config_Xml $products_config_xml, \WP_Installer_Channels $installer_channels, \OTGS_Installer_Logger_Storage $logger_storage, \OTGS\Installer\Products\ExternalProductsUrls $externalProductUrls)
        {
        }
        /**
         * @param string       $repository_id
         * @param string|false $site_key
         * @param string       $site_url
         * @param bool         $bypass_buckets
         *
         * @return string|null
         */
        public function get_products_url($repository_id, $site_key, $site_url, $bypass_buckets)
        {
        }
    }
    class OTGS_Products_Config_Db_Storage
    {
        const PRODUCTS_CONFIG_KEY = 'otgs_installer_products_urls';
        const PRODUCT_VERSIONS_CONFIG_KEY = 'otgs_installer_products_urls_version';
        /**
         * @param string $repository_id
         *
         * @return string|null
         */
        public function get_repository_products_url($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param string $repository_products_url
         *
         * @return bool
         */
        public function store_repository_products_url($repository_id, $repository_products_url)
        {
        }
        /**
         * @param string $repository_id
         *
         * @return bool
         */
        public function clear_repository_products_url($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @return bool
         */
        public function clear_repository_product_version($repository_id)
        {
        }
        /**
         * @param $repository_id
         *
         * @return int|null
         */
        public function get_repository_product_version($repository_id)
        {
        }
        /**
         * @param $repository_id
         * @param $repository_product_version
         *
         * @return mixed
         */
        public function update_repository_product_version($repository_id, $repository_product_version)
        {
        }
    }
}
namespace OTGS\Installer\CommercialTab {
    class SectionsManager
    {
        const SECTION_GENERAL = 'general';
        const SECTION_LEGACY = 'legacy';
        /**
         * @param array $settings
         */
        public function __construct($settings)
        {
        }
        /**
         * @param string $repositoryId
         * @param array $downloads
         *
         * @return array
         */
        public function getPluginsSections($repositoryId, $downloads)
        {
        }
    }
    class DownloadFilter
    {
        public static function shouldDisplayRecord($productSlug)
        {
        }
    }
    class DownloadsList
    {
        public static function getDownloadRow($download_id, $download, $site_key, $repository_id)
        {
        }
    }
}
namespace {
    class OTGS_Installer_WP_Components_Setting_Ajax
    {
        const AJAX_ACTION = 'otgs_save_setting_share_local_components';
        const SAVE_SETTING_PRIORITY = 1;
        public function __construct(\OTGS_Installer_WP_Share_Local_Components_Setting $setting, \WP_Installer $installer)
        {
        }
        public function add_hooks()
        {
        }
        public function save()
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices {
    class MessageTexts
    {
        /**
         * MessageTexts constructor.
         *
         * @param array $messages
         */
        public function __construct(array $messages)
        {
        }
        /**
         * @param string $repo
         * @param string $messageId
         *
         * @return string|null
         */
        public function get($repo, $messageId, $parameters = [])
        {
        }
    }
    class Store
    {
        const ADMIN_NOTICES_OPTION = 'otgs_installer_admin_notices';
        /**
         * @param string $key
         * @param $data
         */
        public function save($key, $data)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function get($key, $default)
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices\Notices {
    class Hooks
    {
        public static function addHooks($class, \WP_Installer $installer)
        {
        }
    }
    class Texts
    {
        protected static $repo;
        protected static $product;
        protected static $productURL;
        protected static $apiHost;
        protected static $communicationDetailsLink;
        protected static $supportLink;
        protected static $publishLink;
        protected static $learnMoreDevKeysLink;
        public static function notRegistered()
        {
        }
        public static function expired()
        {
        }
        public static function inGrace()
        {
        }
        public static function developmentBanner()
        {
        }
        public static function refunded()
        {
        }
        public static function connectionIssues()
        {
        }
        public static function pluginActivatedRecommendation($parameters)
        {
        }
        /**
         * @param string $type The type is used as a suffix of the `otgs-installer-notice-` CSS class.
         * @param string $html An unescaped HTML string but with escaped data (e.g. attributes, URLs, or strings in the HTML produced from any input).
         *
         * @return string
         */
        protected static function insideDiv($type, $html)
        {
        }
        /**
         * @return string
         */
        protected static function getNotRegisteredButtons()
        {
        }
        /**
         * @return string
         */
        protected static function getExpiredButtons()
        {
        }
        /**
         * @return string
         */
        protected static function getInGraceButtons()
        {
        }
        /**
         * @param string $notice_type The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getDismissHTML($notice_type)
        {
        }
        /**
         * @param string $url The method takes care of escaping the string.
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getPrimaryButtonHTML($url, $text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         * @param array $parameters
         *
         * @return string
         */
        protected static function getRecommendationInstallButtonHTML($text, $parameters)
        {
        }
        /**
         * @param string $url The method takes care of escaping the string.
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getRefreshButtonHTML($url, $text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getStatusHTML($text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getRecommendationDismissHTML($text, $parameters)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *                      If the string contains a placeholder, it will be replaced with the value of `static::$product`.
         *
         * @return string
         */
        protected static function getHeadingHTML($text)
        {
        }
        /**
         * @param string $text
         *
         * @return string
         */
        protected static function getConnectionIssueHeadingHTML($text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *                      If the string contains a placeholder, it will be replaced with the value of `static::$product`.
         *
         * @return string
         */
        protected static function getBodyHTML($text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *                      If the string contains a placeholder, it will be replaced with the value of `static::$product`.
         *
         * @return string
         */
        protected static function getConnectionIssueBodyHTML($text)
        {
        }
    }
    class ToolsetTexts extends \OTGS\Installer\AdminNotices\Notices\Texts
    {
        protected static $repo = 'toolset';
        protected static $product = 'Toolset';
        protected static $productURL = 'Toolset.com';
        protected static $apiHost = 'toolset.com';
        protected static $communicationDetailsLink = '/admin.php?page=otgs-installer-support';
        protected static $supportLink = 'https://toolset.com/forums/forum/professional-support/';
        protected static $publishLink = 'https://toolset.com/account/sites/?publish=';
        protected static $learnMoreDevKeysLink = 'https://toolset.com/faq/how-to-install-and-register-toolset/?utm_source=plugin&utm_medium=gui&utm_campaign=types#registering-toolset-in-a-development-environment';
    }
    class WPMLTexts extends \OTGS\Installer\AdminNotices\Notices\Texts
    {
        protected static $repo = 'wpml';
        protected static $product = 'WPML';
        protected static $productURL = 'WPML.org';
        protected static $apiHost = 'wpml.org';
        protected static $communicationDetailsLink = '/admin.php?page=otgs-installer-support';
        protected static $supportLink = 'https://wpml.org/forums/';
        protected static $publishLink = 'https://wpml.org/account/sites/?publish=';
        protected static $learnMoreDevKeysLink = 'https://wpml.org/faq/install-wpml/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmlcore/#register-development-sites';
    }
    class Dismissions
    {
        /**
         * @param array $dismissed already dismissed notices.
         * @param array $data dismissed notice parameters.
         *
         * @return array
         */
        public static function dismissAccountNotice($dismissed, $data)
        {
        }
        /**
         * @param array $dismissed already dismissed notices.
         * @param array $data dismissed notice parameters.
         *
         * @return array
         */
        public static function dismissRecommendationNotice($dismissed, $data)
        {
        }
    }
    class Notice
    {
        /**
         * @param \WP_Installer $installer
         * @param array $config
         *
         * @return \Closure
         */
        public static function addNoticesForType($installer, $config)
        {
        }
        /**
         * @param string $noticeId
         * @param array $notices
         * @param string $repoId
         *
         * @return array
         */
        public static function addNotice($noticeId, array $notices, $repoId)
        {
        }
    }
    class ApiConnection
    {
        const CONNECTION_ISSUES = 'connection-issues';
        /**
         * @param \WP_Installer $installer
         * @param array $initialNotices
         *
         * @return array
         */
        public static function getCurrentNotices(\WP_Installer $installer, array $initialNotices)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowConnectionIssues(\WP_Installer $installer, array $nag)
        {
        }
        public static function config(array $initialConfig)
        {
        }
        public static function pages(array $initialPages)
        {
        }
        public static function screens(array $screens)
        {
        }
        public static function texts(array $initialTexts)
        {
        }
        public static function dismissions(array $initialDismissions)
        {
        }
    }
    class Recommendation
    {
        const PLUGIN_ACTIVATED = 'plugin-activated';
        public static function addHooks()
        {
        }
        /**
         * @param array $initialNotices
         *
         * @return array
         */
        public static function getCurrentNotices(array $initialNotices)
        {
        }
        /**
         * @param array $initialConfig
         *
         * @return array
         */
        public static function config(array $initialConfig)
        {
        }
        /**
         * @param array $screens
         *
         * @return array
         */
        public static function screens(array $screens)
        {
        }
        /**
         * @param array $initialTexts
         *
         * @return array
         */
        public static function texts(array $initialTexts)
        {
        }
        /**
         * @param array $initialDismissions
         *
         * @return array
         */
        public static function dismissions(array $initialDismissions)
        {
        }
    }
    class Account
    {
        const NOT_REGISTERED = 'not-registered';
        const EXPIRED = 'expired';
        const IN_GRACE = 'in-grace';
        const REFUNDED = 'refunded';
        const GET_FIRST_INSTALL_TIME = 'get_first_install_time';
        const DEVELOPMENT_MODE = 'development_mode';
        /**
         * @param \WP_Installer $installer
         * @param array $initialNotices
         *
         * @return array
         */
        public static function getCurrentNotices(\WP_Installer $installer, array $initialNotices)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowNotRegistered(\WP_Installer $installer, array $nag)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowExpired(\WP_Installer $installer, array $nag)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowInGrace(\WP_Installer $installer, array $nag)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowDevelopmentBanner(\WP_Installer $installer, array $nag)
        {
        }
        public static function addWpmlDevelopmentAdminBar()
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowRefunded(\WP_Installer $installer, array $nag)
        {
        }
        public static function config(array $initialConfig)
        {
        }
        public static function pages(array $initialPages)
        {
        }
        public static function screens(array $screens)
        {
        }
        public static function texts(array $initialTexts)
        {
        }
        public static function dismissions(array $initialDismissions)
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices {
    class Loader
    {
        /**
         * @param bool $isAjax
         */
        public static function addHooks($isAjax)
        {
        }
        public static function initDisplay()
        {
        }
        public static function isDismissed($repository_id, $notice_id)
        {
        }
        /**
         * @param int $start
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public static function timeOut($start, $repo, $id)
        {
        }
    }
    class Display
    {
        public function __construct(array $currentNotices, array $config, \OTGS\Installer\AdminNotices\MessageTexts $messageTexts, callable $isDismissed)
        {
        }
        public function addHooks()
        {
        }
        public function addNotices()
        {
        }
        public function addScripts()
        {
        }
    }
    class Dismissed
    {
        const STORE_KEY = 'dismissed';
        /**
         * @param array $dismissedNotices
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public static function isDismissed(array $dismissedNotices, $repo, $id)
        {
        }
        /**
         * @param string $plugin_slug
         * @param bool $network
         * @return void
         */
        public static function dismissNoticeOnPluginActivation($plugin_slug, $network)
        {
        }
        /**
         * @param array $dismissedNotices
         * @param callable $timeOut - int -> string -> string -> bool
         *
         * @return mixed
         */
        public static function clearExpired(array $dismissedNotices, callable $timeOut)
        {
        }
        public static function dismissNotice()
        {
        }
        public static function dismissRecommendationNoticeByPluginSlug($dismissed, $data)
        {
        }
    }
    class ToolsetConfig
    {
        public static function pages()
        {
        }
    }
    class TMConfig
    {
        public static function pages()
        {
        }
    }
    class WPMLConfig
    {
        public static function pages()
        {
        }
    }
    class Config
    {
        /**
         * @var array
         */
        protected $config;
        public function __construct(array $config)
        {
        }
        /**
         * @param array $messages
         * @param string $item
         * @param string $type
         *
         * @return bool
         */
        protected function hasItem(array $messages, $item, $type)
        {
        }
    }
    class PageConfig extends \OTGS\Installer\AdminNotices\Config
    {
        /**
         * @param array $messages
         *
         * @return bool
         */
        public function isAnyMessageOnPage(array $messages)
        {
        }
        /**
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public function shouldShowMessage($repo, $id)
        {
        }
    }
    class ScreenConfig extends \OTGS\Installer\AdminNotices\Config
    {
        /**
         * @param array $messages
         *
         * @return bool
         */
        public function isAnyMessageOnPage(array $messages)
        {
        }
        /**
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public function shouldShowMessage($repo, $id)
        {
        }
    }
}
namespace {
    class OTGS_Installer_Upgrade_Response
    {
        public function __construct(array $plugins, \OTGS_Installer_Repositories $repositories, \OTGS_Installer_Source_Factory $source_factory, \OTGS_Installer_Package_Product_Finder $product_finder)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param stdClass|null $update_plugins
         * @return mixed
         */
        public function modify_upgrade_response($update_plugins)
        {
        }
    }
}
namespace OTGS\Installer\Upgrade {
    class InstallerPlugins
    {
        public function __construct(\WP_Installer $installer, \OTGS_Installer_Plugin_Finder $installerPluginsFinder)
        {
        }
        /**
         * @return array
         */
        public function getFilteredInstallerPlugins()
        {
        }
        /**
         * @param $repositoryId
         * @param $pluginId
         *
         * @return array|null
         */
        public function getPluginData($repositoryId, $pluginId)
        {
        }
    }
    class AutoUpgrade
    {
        public function __construct(\WP_Installer $installer, \OTGS_Installer_Plugin_Finder $installerPluginsFinder, \OTGS\Installer\Upgrade\InstallerPlugins $installerPlugins)
        {
        }
        public function addHooks()
        {
        }
        /**
         * @param array $value
         * @param array $oldValue
         *
         * @return array
         */
        public function modifyAutoUpdatePluginsOption($value, $oldValue)
        {
        }
        public function modifyAutoUpdateSettingHtml($html, $pluginFile)
        {
        }
    }
    class IncludeAutoUpgrade
    {
        public function __construct(array $settings, $repositoryId)
        {
        }
        public function includeDuringInstall($pluginId)
        {
        }
    }
}
namespace {
    class OTGS_Installer_Package
    {
        public function __construct(array $params = array())
        {
        }
        public function get_key()
        {
        }
        public function get_products()
        {
        }
        public function get_product_by_subscription_type($type)
        {
        }
        public function get_product_by_subscription_type_equivalent($type)
        {
        }
        public function get_product_by($function, $type)
        {
        }
        public function get_product_by_subscription_type_on_upgrades($type)
        {
        }
        public function get_id()
        {
        }
        public function get_name()
        {
        }
        public function get_description()
        {
        }
        public function get_image_url()
        {
        }
        public function get_order()
        {
        }
        public function get_parent()
        {
        }
    }
    class OTGS_Installer_WP_Components_Setting_Resources
    {
        const HANDLES_OTGS_INSTALLER_UI = 'otgs-installer-ui';
        public function __construct(\WP_Installer $installer)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_resources()
        {
        }
    }
    class OTGS_Installer_Plugin
    {
        public function __construct(array $params = array())
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * @return string
         */
        public function get_changelog()
        {
        }
        /**
         * @return string
         */
        public function get_version()
        {
        }
        /**
         * @return string
         */
        public function get_date()
        {
        }
        /**
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * @return string
         */
        public function get_repo()
        {
        }
        /**
         * @return bool
         */
        public function is_free_on_wporg()
        {
        }
        /**
         * @return bool
         */
        public function has_fallback_on_wporg()
        {
        }
        /**
         * @return string
         */
        public function get_basename()
        {
        }
        /**
         * @return string
         */
        public function get_external_repo()
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_installed_version()
        {
        }
        /**
         * @return string
         */
        public function get_channel()
        {
        }
        /**
         * @return string
         */
        public function get_tested()
        {
        }
        /**
         * @return string
         */
        public function is_lite()
        {
        }
    }
    class Installer_Upgrader_Skins extends \WP_Upgrader_Skin
    {
        /** @var WP_Error|null */
        public $installer_error;
        function __construct($args = array())
        {
        }
        function header()
        {
        }
        function footer()
        {
        }
        function error($error)
        {
        }
        function add_strings()
        {
        }
        function feedback($string, ...$args)
        {
        }
        function before()
        {
        }
        function after()
        {
        }
        public function request_filesystem_credentials($error = \false, $context = '', $allow_relaxed_file_ownership = \false)
        {
        }
    }
}
namespace OTGS\Installer\Rest {
    class Push
    {
        const REFRESH_INTERVAL = 7200;
        //2 hours
        const REST_NAMESPACE = 'otgs/installer/v1';
        public static function register_routes()
        {
        }
        public static function fetch_subscription()
        {
        }
    }
}
namespace {
    class OTGS_Installer_Factory
    {
        public function __construct(\WP_Installer $installer)
        {
        }
        /**
         * @return OTGS_Installer_Filename_Hooks
         */
        public function create_filename_hooks()
        {
        }
        public function load_filename_hooks()
        {
        }
        /**
         * @return OTGS_Installer_Icons
         */
        public function create_icons()
        {
        }
        public function load_icons()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Setting_Ajax
         */
        public function create_local_components_ajax_setting()
        {
        }
        public function load_local_components_ajax_settings()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Setting_Resources
         */
        public function create_resources()
        {
        }
        public function load_resources()
        {
        }
        /**
         * @return OTGS_Installer_WP_Share_Local_Components_Setting_Hooks
         */
        public function create_settings_hooks()
        {
        }
        public function load_settings_hooks()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Hooks
         */
        public function create_wp_components_hooks()
        {
        }
        public function load_wp_components_hooks()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Storage
         */
        public function create_wp_components_storage()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Sender
         */
        public function create_wp_components_sender()
        {
        }
        /**
         * @return OTGS_Installer_PHP_Functions
         */
        public function create_installer_php_functions()
        {
        }
        /**
         * @return OTGS_Installer_Debug_Info
         */
        public function create_debug_info_hook()
        {
        }
        public function load_debug_info_hooks()
        {
        }
        /**
         * @return OTGS_Installer_Plugin_Factory
         */
        public function get_plugin_factory()
        {
        }
        /**
         * @return OTGS_Installer_Plugin_Finder
         */
        public function get_plugin_finder()
        {
        }
        /**
         * @return OTGS_Installer_Upgrade_Response
         */
        public function create_upgrade_response()
        {
        }
        public function load_upgrade_response()
        {
        }
        /**
         * @return OTGS_Installer_Site_Key_Ajax
         */
        public function create_site_key_ajax_handler()
        {
        }
        public function load_site_key_ajax_handler()
        {
        }
        public function load_installer_support_hooks()
        {
        }
        public function load_translation_service_info_hooks()
        {
        }
        /**
         * @return $this
         */
        public function load_plugins_update_cache_cleaner()
        {
        }
        public function load_buy_url_hooks()
        {
        }
        public function load_admin_notice_hooks()
        {
        }
        public function load_auto_upgrade_hooks()
        {
        }
    }
    class OTGS_Installer_WP_Components_Hooks
    {
        const EVENT_SEND_COMPONENTS_MONTHLY = 'otgs_send_components_data';
        const EVENT_SEND_COMPONENTS_AFTER_REGISTRATION = 'otgs_send_components_data_on_product_registration';
        const REPORT_SCHEDULING_PERIOD = '+1 month';
        const MONTHLY_CRON = 'monthly';
        public function __construct(\OTGS_Installer_WP_Components_Storage $storage, \OTGS_Installer_WP_Components_Sender $sender, \OTGS_Installer_WP_Share_Local_Components_Setting $setting, \OTGS_Installer_PHP_Functions $php_functions)
        {
        }
        public function add_hooks()
        {
        }
        public function schedule_components_report()
        {
        }
        public function process_report_instantly()
        {
        }
        public function force_send_components_data()
        {
        }
        public function send_components_data()
        {
        }
        /**
         * @return array {
         *     The array of cron schedules keyed by the schedule name.
         *
         *     @type int $interval The schedule interval in seconds.
         *     @type string $display The schedule display name.
         * }
         */
        public function custom_monthly_cron_schedule($schedules)
        {
        }
    }
    class OTGS_Installer_Filename_Hooks
    {
        public function __construct(\OTGS_Installer_PHP_Functions $built_in_functions)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $filename
         * @param string $ext
         * @param string $dir
         *
         * @return string
         */
        public function fix_filename_for_win($filename, $ext, $dir)
        {
        }
    }
    class OTGS_Installer_Plugin_Factory
    {
        /**
         * @param array $params
         *
         * @return OTGS_Installer_Plugin
         */
        public function create(array $params = array())
        {
        }
    }
    class OTGS_Installer_Plugin_Finder
    {
        public function __construct(\OTGS_Installer_Plugin_Factory $plugin_factory, array $repositories)
        {
        }
        /**
         * @return OTGS_Installer_Plugin[]
         */
        public function get_all()
        {
        }
        /**
         * @return array<string, string>
         */
        public function getLocalPluginVersions()
        {
        }
        public function get_otgs_installed_plugins_by_repository()
        {
        }
        /**
         * @param string|int $slug
         * @param string     $repo
         *
         * @return null|OTGS_Installer_Plugin
         */
        public function get_plugin($slug, $repo = '')
        {
        }
        /**
         * @param string $name
         *
         * @return null|OTGS_Installer_Plugin
         */
        public function get_plugin_by_name($name)
        {
        }
    }
    class WP_Installer_API
    {
        public static function get_product_installer_link($repository_id, $package_id = \false)
        {
        }
        public static function get_product_price($repository_id, $package_id, $product_id, $incl_discount = \false)
        {
        }
        /**
         * Retrieve the preferred translation service.
         *
         * @since 1.6.5
         *
         * @param string $repository_id The repository id (e.g. wpml)
         * @return string|false The translation service id or false if none is set
         */
        public static function get_preferred_ts($repository_id = 'wpml')
        {
        }
        /**
         * Set the preferred translation service.
         *
         * @since 1.6.5
         *
         * @param string $value The translation service id
         * @param string $repository_id The repository id (e.g. wpml)
         */
        public static function set_preferred_ts($value, $repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the referring translation service (if any)
         *
         * @since 1.6.5
         *
         * @param string $repository_id The repository id (e.g. wpml)
         * @return string The translation service id or false
         */
        public static function get_ts_referal($repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the translation services client id for a specific repository (if any)
         *
         * @since 1.7.9
         *
         * @param string $repository_id The repository id (e.g. wpml)
         * @return string|false The client id or false
         */
        public static function get_ts_client_id($repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the site key corresponding to a repository.
         * This is a wrapper of WP_Installer::get_site_key()
         * @see WP_Installer::get_site_key()
         *
         * @since 1.7.9
         *
         * @param string $repository_id The repository id (e.g. wpml)
         * @return string The site key (or false)
         */
        public static function get_site_key($repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the ID of the last user who registered a repository.
         *
         * @since 1.7.16
         *
         * @param string $repository_id The repository id (e.g. wpml)
         * @return int The user id (or zero)
         */
        public static function get_registering_user_id($repository_id = 'wpml')
        {
        }
    }
    class OTGS_Installer_Debug_Info
    {
        public function __construct(\WP_Installer $installer, \OTGS_Products_Config_Db_Storage $products_config_storage)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function add_installer_config_in_debug_information($data)
        {
        }
    }
    class OTGS_Installer_WP_Share_Local_Components_Setting
    {
        const OPTION_KEY = 'otgs_share_local_components';
        public function save(array $repos)
        {
        }
        /**
         * @param string $repo
         *
         * @return bool
         */
        public function is_repo_allowed($repo)
        {
        }
        public function has_setting($repo)
        {
        }
        public static function get_setting($repo)
        {
        }
    }
    interface OTGS_Template_Service
    {
        public function show($model, $template);
    }
    class OTGS_Template_Service_Php_Model
    {
        /**
         * @param array $data
         */
        public function __construct($data = [])
        {
        }
        /**
         * If a property does not exist, the method will create it as an "empty" instance of `Model`
         * so that children properties can be called without throwing errors.
         *
         * @param string $name
         *
         * @return mixed|null
         * @see OTGS_Template_Service_Php_Model::__toString
         */
        public function __get($name)
        {
        }
        /**
         * It ensures that $value is always either an array or a primitive type.
         *
         * @param string $name
         * @param mixed  $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasValue($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isNull($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isEmpty($name)
        {
        }
        /**
         * @return mixed[]|OTGS_Template_Service_Php_Model[]
         */
        public function getAttributes()
        {
        }
        /**
         * This logic allows using the model in a template even when referring to properties which do no exist.
         *
         * Example:
         * `<h1><?php echo esc_html( $model->non_existing_property->title ); ?></h1>` Will output an empty string instead of throwing an error
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
    interface OTGS_Template_Service_Loader
    {
        /**
         * @return OTGS_Template_Service
         */
        public function get_service();
    }
    class OTGS_Template_Service_Factory
    {
        /**
         * @param string $template_dir
         * @return OTGS_Php_Template_Service
         */
        public static function create($template_dir)
        {
        }
    }
    class OTGS_Php_Template_Service implements \OTGS_Template_Service
    {
        const FILE_EXTENSION = '.php';
        /**
         * @param string $template_dir
         */
        public function __construct($template_dir)
        {
        }
        /**
         * @param array $model_params
         * @param string $template
         */
        public function show($model_params, $template)
        {
        }
    }
    class OTGS_Php_Template_Service_Loader implements \OTGS_Template_Service_Loader
    {
        /**
         * @param string $template_dir
         */
        public function __construct($template_dir)
        {
        }
        /**
         * @return OTGS_Php_Template_Service
         */
        public function get_service()
        {
        }
    }
    class OTGS_Installer_Subscription_Factory
    {
        public function create($params = array())
        {
        }
    }
    class OTGS_Installer_Fetch_Subscription_Exception extends \Exception
    {
    }
    class OTGS_Installer_Site_Key_Exception extends \Exception
    {
    }
    class OTGS_Installer_Products_Parsing_Exception extends \Exception
    {
        const RESPONSE_PARSING_ERROR_MESSAGE = 'Error in response parsing from %s.';
        public static function createForResponse($products_url)
        {
        }
    }
    class OTGS_Installer_Loader
    {
        public function __construct(\OTGS_Installer_Factory $installer_factory)
        {
        }
        public function init()
        {
        }
        public function load_actions_after_installer_init()
        {
        }
    }
    class OTGS_Installer_Buy_URL_Hooks
    {
        public function __construct($embedded_at)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function append_installer_source($url)
        {
        }
    }
}
namespace OTGS\Installer {
    class Subscription_Warning_Message
    {
        public function __construct(\WP_Installer $wpInstaller)
        {
        }
        public function get($repositoryId, $subscriptionId)
        {
        }
    }
}
namespace {
    class OTGS_Installer_Autoloader
    {
        public function initialize()
        {
        }
        public function autoload($class_name)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class OTGS_UI_Assets
    {
        const ASSETS_TYPES_SCRIPT = 'script';
        const ASSETS_TYPES_STYLE = 'style';
        /**
         * OTGS_UI_Assets constructor.
         *
         * @param string             $assets_root_url Root URL for the dist directory on this vendor library.
         * @param \OTGS_Assets_Store $assets_store
         */
        public function __construct($assets_root_url, \OTGS_Assets_Store $assets_store)
        {
        }
        /**
         * Registers both scripts and styles
         */
        public function register()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class OTGS_UI_Loader
    {
        /**
         * OTGS_UI_Loader constructor.
         *
         * @param \OTGS_Assets_Store $locator
         * @param \OTGS_UI_Assets    $assets
         *
         * @throws InvalidArgumentException
         */
        public function __construct(\OTGS_Assets_Store $locator = \null, \OTGS_UI_Assets $assets = \null)
        {
        }
        /**
         * Hooks to the registration of all assets to the `ìnit` action
         */
        public function load()
        {
        }
        /**
         * Adds the assets and registers them
         */
        public function register()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class OTGS_Assets_Store
    {
        /**
         * @param string $type
         * @param null   $handle
         *
         * @return array|mixed
         */
        public function get($type, $handle = \null)
        {
        }
        /**
         * @param string $path
         */
        public function add_assets_location($path)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class OTGS_Assets_Handles
    {
        const POPOVER_TOOLTIP = 'otgsPopoverTooltip';
        const SWITCHER = 'otgsSwitcher';
        const TABLE_STICKY_HEADER = 'otgsTableStickyHeader';
    }
}
namespace WPML\Auryn {
    class InjectorException extends \Exception
    {
    }
    class ConfigException extends \WPML\Auryn\InjectorException
    {
    }
    interface Reflector
    {
        /**
         * Retrieves ReflectionClass instances, caching them for future retrieval
         *
         * @param string $class
         * @return \ReflectionClass
         */
        public function getClass($class);
        /**
         * Retrieves and caches the constructor (ReflectionMethod) for the specified class
         *
         * @param string $class
         * @return \ReflectionMethod
         */
        public function getCtor($class);
        /**
         * Retrieves and caches an array of constructor parameters for the given class
         *
         * @param string $class
         * @return \ReflectionParameter[]
         */
        public function getCtorParams($class);
        /**
         * Retrieves the class type-hint from a given ReflectionParameter
         *
         * There is no way to directly access a parameter's type-hint without
         * instantiating a new ReflectionClass instance and calling its getName()
         * method. This method stores the results of this approach so that if
         * the same parameter type-hint or ReflectionClass is needed again we
         * already have it cached.
         *
         * @param \ReflectionFunctionAbstract $function
         * @param \ReflectionParameter $param
         */
        public function getParamTypeHint(\ReflectionFunctionAbstract $function, \ReflectionParameter $param);
        /**
         * Retrieves and caches a reflection for the specified function
         *
         * @param string $functionName
         * @return \ReflectionFunction
         */
        public function getFunction($functionName);
        /**
         * Retrieves and caches a reflection for the specified class method
         *
         * @param mixed $classNameOrInstance
         * @param string $methodName
         * @return \ReflectionMethod
         */
        public function getMethod($classNameOrInstance, $methodName);
    }
    class StandardReflector implements \WPML\Auryn\Reflector
    {
        public function getClass($class)
        {
        }
        public function getCtor($class)
        {
        }
        public function getCtorParams($class)
        {
        }
        public function getParamTypeHint(\ReflectionFunctionAbstract $function, \ReflectionParameter $param)
        {
        }
        public function getFunction($functionName)
        {
        }
        public function getMethod($classNameOrInstance, $methodName)
        {
        }
    }
    interface ReflectionCache
    {
        public function fetch($key);
        public function store($key, $data);
    }
    class ReflectionCacheArray implements \WPML\Auryn\ReflectionCache
    {
        public function fetch($key)
        {
        }
        public function store($key, $data)
        {
        }
    }
    class ReflectionCacheApc implements \WPML\Auryn\ReflectionCache
    {
        public function __construct(\WPML\Auryn\ReflectionCache $localCache = null)
        {
        }
        public function setTimeToLive($seconds)
        {
        }
        public function fetch($key)
        {
        }
        public function store($key, $data)
        {
        }
    }
    class CachingReflector implements \WPML\Auryn\Reflector
    {
        const CACHE_KEY_CLASSES = 'auryn.refls.classes.';
        const CACHE_KEY_CTORS = 'auryn.refls.ctors.';
        const CACHE_KEY_CTOR_PARAMS = 'auryn.refls.ctor-params.';
        const CACHE_KEY_FUNCS = 'auryn.refls.funcs.';
        const CACHE_KEY_METHODS = 'auryn.refls.methods.';
        public function __construct(\WPML\Auryn\Reflector $reflector = null, \WPML\Auryn\ReflectionCache $cache = null)
        {
        }
        public function getClass($class)
        {
        }
        public function getCtor($class)
        {
        }
        public function getCtorParams($class)
        {
        }
        public function getParamTypeHint(\ReflectionFunctionAbstract $function, \ReflectionParameter $param)
        {
        }
        public function getFunction($functionName)
        {
        }
        public function getMethod($classNameOrInstance, $methodName)
        {
        }
    }
    class Executable
    {
        public function __construct(\ReflectionFunctionAbstract $reflFunc, $invocationObject = null)
        {
        }
        public function __invoke()
        {
        }
        public function getCallableReflection()
        {
        }
        public function getInvocationObject()
        {
        }
        public function isInstanceMethod()
        {
        }
    }
    class InjectionException extends \WPML\Auryn\InjectorException
    {
        public $dependencyChain;
        public function __construct(array $inProgressMakes, $message = "", $code = 0, \Exception $previous = null)
        {
        }
        /**
         * Add a human readable version of the invalid callable to the standard 'invalid invokable' message.
         */
        public static function fromInvalidCallable(array $inProgressMakes, $callableOrMethodStr, \Exception $previous = null)
        {
        }
        /**
         * Returns the hierarchy of dependencies that were being created when
         * the exception occurred.
         * @return array
         */
        public function getDependencyChain()
        {
        }
    }
    class Injector
    {
        const A_RAW = ':';
        const A_DELEGATE = '+';
        const A_DEFINE = '@';
        const I_BINDINGS = 1;
        const I_DELEGATES = 2;
        const I_PREPARES = 4;
        const I_ALIASES = 8;
        const I_SHARES = 16;
        const I_ALL = 31;
        const E_NON_EMPTY_STRING_ALIAS = 1;
        const M_NON_EMPTY_STRING_ALIAS = "Invalid alias: non-empty string required at arguments 1 and 2";
        const E_SHARED_CANNOT_ALIAS = 2;
        const M_SHARED_CANNOT_ALIAS = "Cannot alias class %s to %s because it is currently shared";
        const E_SHARE_ARGUMENT = 3;
        const M_SHARE_ARGUMENT = "%s::share() requires a string class name or object instance at Argument 1; %s specified";
        const E_ALIASED_CANNOT_SHARE = 4;
        const M_ALIASED_CANNOT_SHARE = "Cannot share class %s because it is currently aliased to %s";
        const E_INVOKABLE = 5;
        const M_INVOKABLE = "Invalid invokable: callable or provisional string required";
        const E_NON_PUBLIC_CONSTRUCTOR = 6;
        const M_NON_PUBLIC_CONSTRUCTOR = "Cannot instantiate protected/private constructor in class %s";
        const E_NEEDS_DEFINITION = 7;
        const M_NEEDS_DEFINITION = "Injection definition required for %s %s";
        const E_MAKE_FAILURE = 8;
        const M_MAKE_FAILURE = "Could not make %s: %s";
        const E_UNDEFINED_PARAM = 9;
        const M_UNDEFINED_PARAM = "No definition available to provision typeless parameter \$%s at position %d in %s()%s";
        const E_DELEGATE_ARGUMENT = 10;
        const M_DELEGATE_ARGUMENT = "%s::delegate expects a valid callable or executable class::method string at Argument 2%s";
        const E_CYCLIC_DEPENDENCY = 11;
        const M_CYCLIC_DEPENDENCY = "Detected a cyclic dependency while provisioning %s";
        const E_MAKING_FAILED = 12;
        const M_MAKING_FAILED = "Making %s did not result in an object, instead result is of type '%s'";
        public function __construct(\WPML\Auryn\Reflector $reflector = null)
        {
        }
        public function __clone()
        {
        }
        /**
         * Define instantiation directives for the specified class
         *
         * @param string $name The class (or alias) whose constructor arguments we wish to define
         * @param array $args An array mapping parameter names to values/instructions
         * @return self
         */
        public function define($name, array $args)
        {
        }
        /**
         * Assign a global default value for all parameters named $paramName
         *
         * Global parameter definitions are only used for parameters with no typehint, pre-defined or
         * call-time definition.
         *
         * @param string $paramName The parameter name for which this value applies
         * @param mixed $value The value to inject for this parameter name
         * @return self
         */
        public function defineParam($paramName, $value)
        {
        }
        /**
         * Define an alias for all occurrences of a given typehint
         *
         * Use this method to specify implementation classes for interface and abstract class typehints.
         *
         * @param string $original The typehint to replace
         * @param string $alias The implementation name
         * @throws ConfigException if any argument is empty or not a string
         * @return self
         */
        public function alias($original, $alias)
        {
        }
        /**
         * Share the specified class/instance across the Injector context
         *
         * @param mixed $nameOrInstance The class or object to share
         * @throws ConfigException if $nameOrInstance is not a string or an object
         * @return self
         */
        public function share($nameOrInstance)
        {
        }
        /**
         * Register a prepare callable to modify/prepare objects of type $name after instantiation
         *
         * Any callable or provisionable invokable may be specified. Preparers are passed two
         * arguments: the instantiated object to be mutated and the current Injector instance.
         *
         * @param string $name
         * @param mixed $callableOrMethodStr Any callable or provisionable invokable method
         * @throws InjectionException if $callableOrMethodStr is not a callable.
         *                            See https://github.com/rdlowrey/auryn#injecting-for-execution
         * @return self
         */
        public function prepare($name, $callableOrMethodStr)
        {
        }
        /**
         * Delegate the creation of $name instances to the specified callable
         *
         * @param string $name
         * @param mixed $callableOrMethodStr Any callable or provisionable invokable method
         * @throws ConfigException if $callableOrMethodStr is not a callable.
         * @return self
         */
        public function delegate($name, $callableOrMethodStr)
        {
        }
        /**
         * Retrieve stored data for the specified definition type
         *
         * Exposes introspection of existing binds/delegates/shares/etc for decoration and composition.
         *
         * @param string $nameFilter An optional class name filter
         * @param int $typeFilter A bitmask of Injector::* type constant flags
         * @return array
         */
        public function inspect($nameFilter = null, $typeFilter = null)
        {
        }
        /**
         * Instantiate/provision a class instance
         *
         * @param string $name
         * @param array $args
         * @throws InjectionException if a cyclic gets detected when provisioning
         * @return mixed
         */
        public function make($name, array $args = array())
        {
        }
        /**
         * Invoke the specified callable or class::method string, provisioning dependencies along the way
         *
         * @param mixed $callableOrMethodStr A valid PHP callable or a provisionable ClassName::methodName string
         * @param array $args Optional array specifying params with which to invoke the provisioned callable
         * @throws \Auryn\InjectionException
         * @return mixed Returns the invocation result returned from calling the generated executable
         */
        public function execute($callableOrMethodStr, array $args = array())
        {
        }
        /**
         * Provision an Executable instance from any valid callable or class::method string
         *
         * @param mixed $callableOrMethodStr A valid PHP callable or a provisionable ClassName::methodName string
         * @return \Auryn\Executable
         */
        public function buildExecutable($callableOrMethodStr)
        {
        }
    }
}
namespace {
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * A class to dismiss messages.
     */
    class Whip_MessageDismisser
    {
        /**
         * Storage object to manage the dismissal state.
         *
         * @var Whip_DismissStorage
         */
        protected $storage;
        /**
         * The current time.
         *
         * @var string
         */
        protected $currentTime;
        /**
         * The number of seconds the message will be dismissed.
         *
         * @var int
         */
        protected $threshold;
        /**
         * Whip_MessageDismisser constructor.
         *
         * @param int                 $currentTime The current time.
         * @param int                 $threshold   The number of seconds the message will be dismissed.
         * @param Whip_DismissStorage $storage     Storage object to manage the dismissal state.
         */
        public function __construct($currentTime, $threshold, \Whip_DismissStorage $storage)
        {
        }
        /**
         * Saves the version number to the storage to indicate the message as being dismissed.
         */
        public function dismiss()
        {
        }
        /**
         * Checks if the current time is lower than the stored time extended by the threshold.
         *
         * @return bool True when current time is lower than stored value + threshold.
         */
        public function isDismissed()
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Interface Whip_DismissStorage.
     */
    interface Whip_DismissStorage
    {
        /**
         * Saves the value.
         *
         * @param int $dismissedValue The value to save.
         *
         * @return bool True when successful.
         */
        public function set($dismissedValue);
        /**
         * Returns the value.
         *
         * @return int The stored value.
         */
        public function get();
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Represents the WordPress option for saving the dismissed messages.
     */
    class Whip_WPDismissOption implements \Whip_DismissStorage
    {
        /**
         * WordPress option name.
         *
         * @var string
         */
        protected $optionName = 'whip_dismiss_timestamp';
        /**
         * Saves the value to the options.
         *
         * @param int $dismissedValue The value to save.
         *
         * @return bool True when successful.
         */
        public function set($dismissedValue)
        {
        }
        /**
         * Returns the value of the whip_dismissed option.
         *
         * @return int Returns the value of the option or an empty string when not set.
         */
        public function get()
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * A helper class to format messages.
     */
    final class Whip_MessageFormatter
    {
        /**
         * Wraps a piece of text in HTML strong tags.
         *
         * @param string $toWrap The text to wrap.
         * @return string The wrapped text.
         */
        public static function strong($toWrap)
        {
        }
        /**
         * Wraps a piece of text in HTML p tags.
         *
         * @param string $toWrap The text to wrap.
         * @return string The wrapped text.
         */
        public static function paragraph($toWrap)
        {
        }
        /**
         * Wraps a piece of text in HTML p and strong tags.
         *
         * @param string $toWrap The text to wrap.
         * @return string The wrapped text.
         */
        public static function strongParagraph($toWrap)
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Interface Whip_Requirement.
     */
    interface Whip_Requirement
    {
        /**
         * Retrieves the component name defined for the requirement.
         *
         * @return string The component name.
         */
        public function component();
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * A value object containing a version requirement for a component version.
     */
    class Whip_VersionRequirement implements \Whip_Requirement
    {
        /**
         * Whip_Requirement constructor.
         *
         * @param string $component The component name.
         * @param string $version   The component version.
         * @param string $operator  The operator to use when comparing version.
         */
        public function __construct($component, $version, $operator = '=')
        {
        }
        /**
         * Retrieves the component name defined for the requirement.
         *
         * @return string The component name.
         */
        public function component()
        {
        }
        /**
         * Gets the components version defined for the requirement.
         *
         * @return string
         */
        public function version()
        {
        }
        /**
         * Gets the operator to use when comparing version numbers.
         *
         * @return string The comparison operator.
         */
        public function operator()
        {
        }
        /**
         * Creates a new version requirement from a comparison string.
         *
         * @param string $component        The component for this version requirement.
         * @param string $comparisonString The comparison string for this version requirement.
         *
         * @return Whip_VersionRequirement The parsed version requirement.
         *
         * @throws Whip_InvalidVersionComparisonString When an invalid version comparison string is passed.
         */
        public static function fromCompareString($component, $comparisonString)
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Manages messages using a global to prevent duplicate messages.
     */
    class Whip_MessagesManager
    {
        /**
         * Whip_MessagesManager constructor.
         */
        public function __construct()
        {
        }
        /**
         * Adds a message to the Messages Manager.
         *
         * @param Whip_Message $message The message to add.
         */
        public function addMessage(\Whip_Message $message)
        {
        }
        /**
         * Determines whether or not there are messages available.
         *
         * @return bool Whether or not there are messages available.
         */
        public function hasMessages()
        {
        }
        /**
         * Lists the messages that are currently available.
         *
         * @return array The messages that are currently set.
         */
        public function listMessages()
        {
        }
        /**
         * Deletes all messages.
         */
        public function deleteMessages()
        {
        }
        /**
         * Gets the latest message.
         *
         * @return Whip_Message The message. Returns a NullMessage if none is found.
         */
        public function getLatestMessage()
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Interface Whip_Listener.
     */
    interface Whip_Listener
    {
        /**
         * Method that should implement the listen functionality.
         *
         * @return void
         */
        public function listen();
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Listener for dismissing a message.
     */
    class Whip_WPMessageDismissListener implements \Whip_Listener
    {
        /**
         * The name of the dismiss action expected to be passed via $_GET.
         *
         * @var string
         */
        const ACTION_NAME = 'whip_dismiss';
        /**
         * The object for dismissing a message.
         *
         * @var Whip_MessageDismisser
         */
        protected $dismisser;
        /**
         * Sets the dismisser attribute.
         *
         * @param Whip_MessageDismisser $dismisser The object for dismissing a message.
         */
        public function __construct(\Whip_MessageDismisser $dismisser)
        {
        }
        /**
         * Listens to a GET request to fetch the required attributes.
         *
         * @return void
         */
        public function listen()
        {
        }
        /**
         * Creates an url for dismissing the notice.
         *
         * @return string The url for dismissing the message.
         */
        public function getDismissURL()
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Represents a host.
     */
    class Whip_Host
    {
        /**
         * Key to an environment variable which should be set to the name of the host.
         *
         * @var string
         */
        const HOST_NAME_KEY = 'WHIP_NAME_OF_HOST';
        /**
         * Filter name for the filter which allows for pointing to the WP hosting page instead of the Yoast version.
         *
         * @var string
         */
        const HOSTING_PAGE_FILTER_KEY = 'whip_hosting_page_url_wordpress';
        /**
         * Retrieves the name of the host if set.
         *
         * @return string The name of the host.
         */
        public static function name()
        {
        }
        /**
         * Retrieves the message from the host if set.
         *
         * @param string $messageKey The key to use as the environment variable.
         *
         * @return string The message as set by the host.
         */
        public static function message($messageKey)
        {
        }
        /**
         * Returns the URL for the hosting page.
         *
         * @return string The URL to the hosting overview page.
         */
        public static function hostingPageUrl()
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Interface Whip_MessagePresenter.
     */
    interface Whip_MessagePresenter
    {
        /**
         * Renders the message.
         */
        public function renderMessage();
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * A message presenter to show a WordPress notice.
     */
    class Whip_WPMessagePresenter implements \Whip_MessagePresenter
    {
        /**
         * Whip_WPMessagePresenter constructor.
         *
         * @param Whip_Message          $message        The message to use in the presenter.
         * @param Whip_MessageDismisser $dismisser      Dismisser object.
         * @param string                $dismissMessage The copy to show to dismiss the message.
         */
        public function __construct(\Whip_Message $message, \Whip_MessageDismisser $dismisser, $dismissMessage)
        {
        }
        /**
         * Registers hooks to WordPress.
         *
         * This is a separate function so you can control when the hooks are registered.
         */
        public function registerHooks()
        {
        }
        /**
         * Registers hooks to WordPress.
         *
         * @deprecated 1.2.0 Use the Whip_WPMessagePresenter::registerHooks() method instead.
         * @codeCoverageIgnore
         * @phpcs:disable Generic.NamingConventions.CamelCapsFunctionName
         */
        public function register_hooks()
        {
        }
        /**
         * Renders the messages present in the global to notices.
         */
        public function renderMessage()
        {
        }
        /**
         * Removes content from the message that we don't want to show.
         *
         * @param string $message The message to clean.
         *
         * @return string The cleaned message.
         */
        public function kses($message)
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Exception for an invalid version comparison string.
     */
    class Whip_InvalidVersionComparisonString extends \Exception
    {
        /**
         * InvalidVersionComparisonString constructor.
         *
         * @param string $value The passed version comparison string.
         */
        public function __construct($value)
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Class EmptyProperty.
     */
    class Whip_EmptyProperty extends \Exception
    {
        /**
         * EmptyProperty constructor.
         *
         * @param string $property Property name.
         */
        public function __construct($property)
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Class InvalidOperatorType.
     */
    class Whip_InvalidOperatorType extends \Exception
    {
        /**
         * InvalidOperatorType constructor.
         *
         * @param string   $value          Invalid operator.
         * @param string[] $validOperators Valid operators.
         */
        public function __construct($value, $validOperators = array('=', '==', '===', '<', '>', '<=', '>='))
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Class InvalidType.
     */
    class Whip_InvalidType extends \Exception
    {
        /**
         * InvalidType constructor.
         *
         * @param string $property     Property name.
         * @param string $value        Property value.
         * @param string $expectedType Expected property type.
         */
        public function __construct($property, $value, $expectedType)
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Interface Whip_Message.
     */
    interface Whip_Message
    {
        /**
         * Retrieves the message body.
         *
         * @return string Message.
         */
        public function body();
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * An interface that represents a version detector and message.
     */
    interface Whip_VersionDetector
    {
        /**
         * Detects the version of the installed software.
         *
         * @return string
         */
        public function detect();
        /**
         * Returns the message that should be shown if a version is not deemed appropriate by the implementation.
         *
         * @return string
         */
        public function getMessage();
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Class Whip_Configuration.
     */
    class Whip_Configuration
    {
        /**
         * Whip_Configuration constructor.
         *
         * @param array $configuration The configuration to use.
         *
         * @throws Whip_InvalidType When the $configuration parameter is not of the expected type.
         */
        public function __construct($configuration = array())
        {
        }
        /**
         * Retrieves the configured version of a particular requirement.
         *
         * @param Whip_Requirement $requirement The requirement to check.
         *
         * @return string|int The version of the passed requirement that was detected as a string.
         *                    If the requirement does not exist, this returns int -1.
         */
        public function configuredVersion(\Whip_Requirement $requirement)
        {
        }
        /**
         * Determines whether the passed requirement is present in the configuration.
         *
         * @param Whip_Requirement $requirement The requirement to check.
         *
         * @return bool Whether or not the requirement is present in the configuration.
         */
        public function hasRequirementConfigured(\Whip_Requirement $requirement)
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Main controller class to require a certain version of software.
     */
    class Whip_RequirementsChecker
    {
        /**
         * Whip_RequirementsChecker constructor.
         *
         * @param array  $configuration The configuration to check.
         * @param string $textdomain    The text domain to use for translations.
         *
         * @throws Whip_InvalidType When the $configuration parameter is not of the expected type.
         */
        public function __construct($configuration = array(), $textdomain = 'default')
        {
        }
        /**
         * Adds a requirement to the list of requirements if it doesn't already exist.
         *
         * @param Whip_Requirement $requirement The requirement to add.
         */
        public function addRequirement(\Whip_Requirement $requirement)
        {
        }
        /**
         * Determines whether or not there are requirements available.
         *
         * @return bool Whether or not there are requirements.
         */
        public function hasRequirements()
        {
        }
        /**
         * Gets the total amount of requirements.
         *
         * @return int The total amount of requirements.
         */
        public function totalRequirements()
        {
        }
        /**
         * Determines whether or not a requirement exists for a particular component.
         *
         * @param string $component The component to check for.
         *
         * @return bool Whether or not the component has a requirement defined.
         */
        public function requirementExistsForComponent($component)
        {
        }
        /**
         * Checks if all requirements are fulfilled and adds a message to the message manager if necessary.
         */
        public function check()
        {
        }
        /**
         * Determines whether or not there are messages available.
         *
         * @return bool Whether or not there are messages to display.
         */
        public function hasMessages()
        {
        }
        /**
         * Gets the most recent message from the message manager.
         *
         * @return Whip_Message The latest message.
         */
        public function getMostRecentMessage()
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Class Whip_UpgradePhpMessage
     */
    class Whip_UpgradePhpMessage implements \Whip_Message
    {
        /**
         * Whip_UpgradePhpMessage constructor.
         *
         * @param string $textdomain The text domain to use for the translations.
         */
        public function __construct($textdomain)
        {
        }
        /**
         * Retrieves the message body to display.
         *
         * @return string The message to display.
         */
        public function body()
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Class Whip_InvalidVersionMessage.
     */
    class Whip_InvalidVersionRequirementMessage implements \Whip_Message
    {
        /**
         * Whip_InvalidVersionRequirementMessage constructor.
         *
         * @param Whip_VersionRequirement $requirement Object containing the version requirement for a component.
         * @param string|int              $detected    Detected version requirement or -1 if not found.
         */
        public function __construct(\Whip_VersionRequirement $requirement, $detected)
        {
        }
        /**
         * Retrieves the message body.
         *
         * @return string Message.
         */
        public function body()
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Class Whip_Message.
     */
    class Whip_NullMessage implements \Whip_Message
    {
        /**
         * Retrieves the message body.
         *
         * @return string Message.
         */
        public function body()
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Class Whip_HostMessage.
     */
    class Whip_HostMessage implements \Whip_Message
    {
        /**
         * Whip_Message constructor.
         *
         * @param string $messageKey The environment key to use to retrieve the message from.
         * @param string $textdomain The text domain to use for translations.
         */
        public function __construct($messageKey, $textdomain)
        {
        }
        /**
         * Retrieves the message body.
         *
         * @return string The message body.
         */
        public function body()
        {
        }
        /**
         * Renders the message title.
         *
         * @return string The message title.
         */
        public function title()
        {
        }
    }
    /**
     * WHIP libary file.
     *
     * @package Yoast\WHIP
     */
    /**
     * Class Whip_Message.
     */
    class Whip_BasicMessage implements \Whip_Message
    {
        /**
         * Whip_Message constructor.
         *
         * @param string $body Message body.
         */
        public function __construct($body)
        {
        }
        /**
         * Retrieves the message body.
         *
         * @return string Message.
         */
        public function body()
        {
        }
    }
}
namespace Composer\Installers {
    abstract class BaseInstaller
    {
        protected $locations = array();
        protected $composer;
        protected $package;
        protected $io;
        /**
         * Initializes base installer.
         *
         * @param PackageInterface $package
         * @param Composer         $composer
         * @param IOInterface      $io
         */
        public function __construct(\Composer\Package\PackageInterface $package = null, \Composer\Composer $composer = null, \Composer\IO\IOInterface $io = null)
        {
        }
        /**
         * Return the install path based on package type.
         *
         * @param  PackageInterface $package
         * @param  string           $frameworkType
         * @return string
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
        /**
         * For an installer to override to modify the vars per installer.
         *
         * @param  array<string, string> $vars This will normally receive array{name: string, vendor: string, type: string}
         * @return array<string, string>
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * Gets the installer's locations
         *
         * @return array<string, string> map of package types => install path
         */
        public function getLocations()
        {
        }
        /**
         * Replace vars in a path
         *
         * @param  string                $path
         * @param  array<string, string> $vars
         * @return string
         */
        protected function templatePath($path, array $vars = array())
        {
        }
        /**
         * Search through a passed paths array for a custom install path.
         *
         * @param  array  $paths
         * @param  string $name
         * @param  string $type
         * @param  string $vendor = NULL
         * @return string|false
         */
        protected function mapCustomInstallPaths(array $paths, $name, $type, $vendor = NULL)
        {
        }
    }
    /**
     * Plugin/theme installer for majima
     * @author David Neustadt
     */
    class MajimaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Transforms the names
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class AsgardInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'Modules/{$name}/', 'theme' => 'Themes/{$name}/');
        /**
         * Format package name.
         *
         * For package type asgard-module, cut off a trailing '-plugin' if present.
         *
         * For package type asgard-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class WHMCSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('addons' => 'modules/addons/{$vendor}_{$name}/', 'fraud' => 'modules/fraud/{$vendor}_{$name}/', 'gateways' => 'modules/gateways/{$vendor}_{$name}/', 'notifications' => 'modules/notifications/{$vendor}_{$name}/', 'registrars' => 'modules/registrars/{$vendor}_{$name}/', 'reports' => 'modules/reports/{$vendor}_{$name}/', 'security' => 'modules/security/{$vendor}_{$name}/', 'servers' => 'modules/servers/{$vendor}_{$name}/', 'social' => 'modules/social/{$vendor}_{$name}/', 'support' => 'modules/support/{$vendor}_{$name}/', 'templates' => 'templates/{$vendor}_{$name}/', 'includes' => 'includes/{$vendor}_{$name}/');
    }
    class SyliusInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('theme' => 'themes/{$name}/');
    }
    class EliasisInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('component' => 'components/{$name}/', 'module' => 'modules/{$name}/', 'plugin' => 'plugins/{$name}/', 'template' => 'templates/{$name}/');
    }
    class OxidInstaller extends \Composer\Installers\BaseInstaller
    {
        const VENDOR_PATTERN = '/^modules\\/(?P<vendor>.+)\\/.+/';
        protected $locations = array('module' => 'modules/{$name}/', 'theme' => 'application/views/{$name}/', 'out' => 'out/{$name}/');
        /**
         * getInstallPath
         *
         * @param PackageInterface $package
         * @param string $frameworkType
         * @return string
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
        /**
         * prepareVendorDirectory
         *
         * Makes sure there is a vendormetadata.php file inside
         * the vendor folder if there is a vendor folder.
         *
         * @param string $installPath
         * @return void
         */
        protected function prepareVendorDirectory($installPath)
        {
        }
    }
    class ZendInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'library/{$name}/', 'extra' => 'extras/library/{$name}/', 'module' => 'module/{$name}/');
    }
    /**
     * Class DolibarrInstaller
     *
     * @package Composer\Installers
     * @author  Raphaël Doursenaud <rdoursenaud@gpcsolutions.fr>
     */
    class DolibarrInstaller extends \Composer\Installers\BaseInstaller
    {
        //TODO: Add support for scripts and themes
        protected $locations = array('module' => 'htdocs/custom/{$name}/');
    }
    class MauticInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'theme' => 'themes/{$name}/', 'core' => 'app/');
        /**
         * Format package name of mautic-plugins to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    /**
     * Extension installer for TYPO3 CMS
     *
     * @deprecated since 1.0.25, use https://packagist.org/packages/typo3/cms-composer-installers instead
     *
     * @author Sascha Egerer <sascha.egerer@dkd.de>
     */
    class TYPO3CmsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'typo3conf/ext/{$name}/');
    }
    class KnownInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'IdnoPlugins/{$name}/', 'theme' => 'Themes/{$name}/', 'console' => 'ConsolePlugins/{$name}/');
    }
    class SMFInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'Sources/{$name}/', 'theme' => 'Themes/{$name}/');
    }
    class OctoberInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'plugin' => 'plugins/{$vendor}/{$name}/', 'theme' => 'themes/{$vendor}-{$name}/');
        /**
         * Format package name.
         *
         * For package type october-plugin, cut off a trailing '-plugin' if present.
         *
         * For package type october-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class CroogoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'Plugin/{$name}/', 'theme' => 'View/Themed/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class AglInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'More/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class MagentoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('theme' => 'app/design/frontend/{$name}/', 'skin' => 'skin/frontend/default/{$name}/', 'library' => 'lib/{$name}/');
    }
    class LaravelInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'libraries/{$name}/');
    }
    /**
     * An installer to handle TAO extensions.
     */
    class TaoInstaller extends \Composer\Installers\BaseInstaller
    {
        const EXTRA_TAO_EXTENSION_NAME = 'tao-extension-name';
        protected $locations = array('extension' => '{$name}');
        public function inflectPackageVars($vars)
        {
        }
    }
    class HuradInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'theme' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class WolfCMSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'wolf/plugins/{$name}/');
    }
    /**
     * Plugin installer for symfony 1.x
     *
     * @author Jérôme Tamarelle <jerome@tamarelle.net>
     */
    class Symfony1Installer extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PimcoreInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class MakoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'app/packages/{$name}/');
    }
    class SyDESInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'app/modules/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format module name.
         *
         * Strip `sydes-` prefix and a trailing '-theme' or '-module' from package name if present.
         *
         * {@inerhitDoc}
         */
        public function inflectPackageVars($vars)
        {
        }
        public function inflectModuleVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class VgmcpInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('bundle' => 'src/{$vendor}/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * For package type vgmcp-bundle, cut off a trailing '-bundle' if present.
         *
         * For package type vgmcp-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class ExpressionEngineInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array();
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
    }
    class OntoWikiInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'extensions/{$name}/', 'theme' => 'extensions/themes/{$name}/', 'translation' => 'extensions/translations/{$name}/');
        /**
         * Format package name to lower case and remove ".ontowiki" suffix
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ReIndexInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('theme' => 'themes/{$name}/', 'plugin' => 'plugins/{$name}/');
    }
    class MicroweberInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'userfiles/modules/{$install_item_dir}/', 'module-skin' => 'userfiles/modules/{$install_item_dir}/templates/', 'template' => 'userfiles/templates/{$install_item_dir}/', 'element' => 'userfiles/elements/{$install_item_dir}/', 'vendor' => 'vendor/{$install_item_dir}/', 'components' => 'components/{$install_item_dir}/');
        /**
         * Format package name.
         *
         * For package type microweber-module, cut off a trailing '-module' if present
         *
         * For package type microweber-template, cut off a trailing '-template' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectTemplateVars($vars)
        {
        }
        protected function inflectTemplatesVars($vars)
        {
        }
        protected function inflectCoreVars($vars)
        {
        }
        protected function inflectModuleVars($vars)
        {
        }
        protected function inflectModulesVars($vars)
        {
        }
        protected function inflectSkinVars($vars)
        {
        }
        protected function inflectElementVars($vars)
        {
        }
    }
    class ItopInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'extensions/{$name}/');
    }
    class PlentymarketsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => '{$name}/');
        /**
         * Remove hyphen, "plugin" and format to camelcase
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PuppetInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    /**
     * Composer installer for 3rd party Tusk utilities
     * @author Drew Ewing <drew@phenocode.com>
     */
    class TuskInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('task' => '.tusk/tasks/{$name}/', 'command' => '.tusk/commands/{$name}/', 'asset' => 'assets/tusk/{$name}/');
    }
    /**
     * An installer to handle TYPO3 Flow specifics when installing packages.
     */
    class TYPO3FlowInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'Packages/Application/{$name}/', 'framework' => 'Packages/Framework/{$name}/', 'plugin' => 'Packages/Plugins/{$name}/', 'site' => 'Packages/Sites/{$name}/', 'boilerplate' => 'Packages/Boilerplates/{$name}/', 'build' => 'Build/{$name}/');
        /**
         * Modify the package name to be a TYPO3 Flow style key.
         *
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ProcessWireInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'site/modules/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class UserFrostingInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('sprinkle' => 'app/sprinkles/{$name}/');
    }
    class RedaxoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('addon' => 'redaxo/include/addons/{$name}/', 'bestyle-plugin' => 'redaxo/include/addons/be_style/plugins/{$name}/');
    }
    class MiaoxingInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
    }
    /**
     * Installer for Craft Plugins
     */
    class CraftInstaller extends \Composer\Installers\BaseInstaller
    {
        const NAME_PREFIX = 'craft';
        const NAME_SUFFIX = 'plugin';
        protected $locations = array('plugin' => 'craft/plugins/{$name}/');
        /**
         * Strip `craft-` prefix and/or `-plugin` suffix from package names
         *
         * @param  array $vars
         *
         * @return array
         */
        public final function inflectPackageVars($vars)
        {
        }
    }
    class AttogramInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    class MODULEWorkInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    /**
     * An installer to handle MODX Evolution specifics when installing packages.
     */
    class MODXEvoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('snippet' => 'assets/snippets/{$name}/', 'plugin' => 'assets/plugins/{$name}/', 'module' => 'assets/modules/{$name}/', 'template' => 'assets/templates/{$name}/', 'lib' => 'assets/lib/{$name}/');
    }
    class FuelInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'fuel/app/modules/{$name}/', 'package' => 'fuel/packages/{$name}/', 'theme' => 'fuel/app/themes/{$name}/');
    }
    class KodiCMSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'cms/plugins/{$name}/', 'media' => 'cms/media/vendor/{$name}/');
    }
    class YawikInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'module/{$name}/');
        /**
         * Format package name to CamelCase
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class CodeIgniterInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'application/libraries/{$name}/', 'third-party' => 'application/third_party/{$name}/', 'module' => 'application/modules/{$name}/');
    }
    class PhiftyInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('bundle' => 'bundles/{$name}/', 'library' => 'libraries/{$name}/', 'framework' => 'frameworks/{$name}/');
    }
    class Installer extends \Composer\Installer\LibraryInstaller
    {
        /**
         * Installer constructor.
         *
         * Disables installers specified in main composer extra installer-disable
         * list
         *
         * @param IOInterface          $io
         * @param Composer             $composer
         * @param string               $type
         * @param Filesystem|null      $filesystem
         * @param BinaryInstaller|null $binaryInstaller
         */
        public function __construct(\Composer\IO\IOInterface $io, \Composer\Composer $composer, $type = 'library', \Composer\Util\Filesystem $filesystem = null, \Composer\Installer\BinaryInstaller $binaryInstaller = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package)
        {
        }
        public function uninstall(\Composer\Repository\InstalledRepositoryInterface $repo, \Composer\Package\PackageInterface $package)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function supports($packageType)
        {
        }
        /**
         * Finds a supported framework type if it exists and returns it
         *
         * @param  string       $type
         * @return string|false
         */
        protected function findFrameworkType($type)
        {
        }
        /**
         * Get the second part of the regular expression to check for support of a
         * package type
         *
         * @param  string $frameworkType
         * @return string
         */
        protected function getLocationPattern($frameworkType)
        {
        }
        /**
         * Look for installers set to be disabled in composer's extra config and
         * remove them from the list of supported installers.
         *
         * Globals:
         *  - true, "all", and "*" - disable all installers.
         *  - false - enable all installers (useful with
         *     wikimedia/composer-merge-plugin or similar)
         *
         * @return void
         */
        protected function removeDisabledInstallers()
        {
        }
    }
    class BonefishInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'Packages/{$vendor}/{$name}/');
    }
    class SiteDirectInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$vendor}/{$name}/', 'plugin' => 'plugins/{$vendor}/{$name}/');
        public function inflectPackageVars($vars)
        {
        }
        protected function parseVars($vars)
        {
        }
    }
    class AnnotateCmsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'addons/modules/{$name}/', 'component' => 'addons/components/{$name}/', 'service' => 'addons/services/{$name}/');
    }
    class ClanCatsFrameworkInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('ship' => 'CCF/orbit/{$name}/', 'theme' => 'CCF/app/themes/{$name}/');
    }
    class DokuWikiInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'lib/plugins/{$name}/', 'template' => 'lib/tpl/{$name}/');
        /**
         * Format package name.
         *
         * For package type dokuwiki-plugin, cut off a trailing '-plugin', 
         * or leading dokuwiki_ if present.
         * 
         * For package type dokuwiki-template, cut off a trailing '-template' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectTemplateVars($vars)
        {
        }
    }
    class PPIInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    class CakePHPInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'Plugin/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * Change the default plugin location when cakephp >= 3.0
         */
        public function getLocations()
        {
        }
        /**
         * Check if CakePHP version matches against a version
         *
         * @param string $matcher
         * @param string $version
         * @return bool
         * @phpstan-param Constraint::STR_OP_* $matcher
         */
        protected function matchesCakeVersion($matcher, $version)
        {
        }
    }
    class MediaWikiInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('core' => 'core/', 'extension' => 'extensions/{$name}/', 'skin' => 'skins/{$name}/');
        /**
         * Format package name.
         *
         * For package type mediawiki-extension, cut off a trailing '-extension' if present and transform
         * to CamelCase keeping existing uppercase chars.
         *
         * For package type mediawiki-skin, cut off a trailing '-skin' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectExtensionVars($vars)
        {
        }
        protected function inflectSkinVars($vars)
        {
        }
    }
    class DecibelInstaller extends \Composer\Installers\BaseInstaller
    {
        /** @var array */
        protected $locations = array('app' => 'app/{$name}/');
    }
    class KohanaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    class JoomlaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('component' => 'components/{$name}/', 'module' => 'modules/{$name}/', 'template' => 'templates/{$name}/', 'plugin' => 'plugins/{$name}/', 'library' => 'libraries/{$name}/');
        // TODO: Add inflector for mod_ and com_ names
    }
    class PxcmsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'app/Modules/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * For package type pxcms-module, cut off a trailing '-plugin' if present.
         *
         * return string
         */
        protected function inflectModuleVars($vars)
        {
        }
        /**
         * For package type pxcms-module, cut off a trailing '-plugin' if present.
         *
         * return string
         */
        protected function inflectThemeVars($vars)
        {
        }
    }
    class OsclassInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'oc-content/plugins/{$name}/', 'theme' => 'oc-content/themes/{$name}/', 'language' => 'oc-content/languages/{$name}/');
    }
    class PortoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('container' => 'app/Containers/{$name}/');
    }
    class StarbugInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'theme' => 'themes/{$name}/', 'custom-module' => 'app/modules/{$name}/', 'custom-theme' => 'app/themes/{$name}/');
    }
    class AimeosInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'ext/{$name}/');
    }
    class TastyIgniterInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'extensions/{$vendor}/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * Cut off leading 'ti-ext-' or 'ti-theme-' if present.
         * Strip vendor name of characters that is not alphanumeric or an underscore
         *
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PrestashopInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'theme' => 'themes/{$name}/');
    }
    class KirbyInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'site/plugins/{$name}/', 'field' => 'site/fields/{$name}/', 'tag' => 'site/tags/{$name}/');
    }
    class Plugin implements \Composer\Plugin\PluginInterface
    {
        public function activate(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
        public function deactivate(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
        public function uninstall(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
    }
    class CiviCrmInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('ext' => 'ext/{$name}/');
    }
    class DframeInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$vendor}/{$name}/');
    }
    class RoundcubeInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Lowercase name and changes the name to a underscores
         *
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class GravInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'user/plugins/{$name}/', 'theme' => 'user/themes/{$name}/');
        /**
         * Format package name
         *
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class WinterInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'plugin' => 'plugins/{$vendor}/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * For package type winter-plugin, cut off a trailing '-plugin' if present.
         *
         * For package type winter-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectModuleVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class EzPlatformInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('meta-assets' => 'web/assets/ezplatform/', 'assets' => 'web/assets/ezplatform/{$name}/');
    }
    class MantisBTInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    /**
     *
     * Installer for kanboard plugins
     *
     * kanboard.net
     *
     * Class KanboardInstaller
     * @package Composer\Installers
     */
    class KanboardInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
    }
    /**
     * Class PiwikInstaller
     *
     * @package Composer\Installers
     */
    class PiwikInstaller extends \Composer\Installers\BaseInstaller
    {
        /**
         * @var array
         */
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ZikulaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$vendor}-{$name}/', 'theme' => 'themes/{$vendor}-{$name}/');
    }
    class FuelphpInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('component' => 'components/{$name}/');
    }
    class ChefInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('cookbook' => 'Chef/{$vendor}/{$name}/', 'role' => 'Chef/roles/{$name}/');
    }
    class PantheonInstaller extends \Composer\Installers\BaseInstaller
    {
        /** @var array<string, string> */
        protected $locations = array('script' => 'web/private/scripts/quicksilver/{$name}', 'module' => 'web/private/scripts/quicksilver/{$name}');
    }
    /**
     * Installer for Bitrix Framework. Supported types of extensions:
     * - `bitrix-d7-module` — copy the module to directory `bitrix/modules/<vendor>.<name>`.
     * - `bitrix-d7-component` — copy the component to directory `bitrix/components/<vendor>/<name>`.
     * - `bitrix-d7-template` — copy the template to directory `bitrix/templates/<vendor>_<name>`.
     * 
     * You can set custom path to directory with Bitrix kernel in `composer.json`:
     * 
     * ```json
     * {
     *      "extra": {
     *          "bitrix-dir": "s1/bitrix"
     *      }
     * }
     * ```
     *
     * @author Nik Samokhvalov <nik@samokhvalov.info>
     * @author Denis Kulichkin <onexhovia@gmail.com>
     */
    class BitrixInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array(
            'module' => '{$bitrix_dir}/modules/{$name}/',
            // deprecated, remove on the major release (Backward compatibility will be broken)
            'component' => '{$bitrix_dir}/components/{$name}/',
            // deprecated, remove on the major release (Backward compatibility will be broken)
            'theme' => '{$bitrix_dir}/templates/{$name}/',
            // deprecated, remove on the major release (Backward compatibility will be broken)
            'd7-module' => '{$bitrix_dir}/modules/{$vendor}.{$name}/',
            'd7-component' => '{$bitrix_dir}/components/{$vendor}/{$name}/',
            'd7-template' => '{$bitrix_dir}/templates/{$vendor}_{$name}/',
        );
        /**
         * {@inheritdoc}
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function templatePath($path, array $vars = array())
        {
        }
        /**
         * Duplicates search packages.
         *
         * @param string $path
         * @param array $vars
         */
        protected function checkDuplicates($path, array $vars = array())
        {
        }
    }
    class LavaLiteInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'packages/{$vendor}/{$name}/', 'theme' => 'public/themes/{$name}/');
    }
    class Concrete5Installer extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('core' => 'concrete/', 'block' => 'application/blocks/{$name}/', 'package' => 'packages/{$name}/', 'theme' => 'application/themes/{$name}/', 'update' => 'updates/{$name}/');
    }
    class MoodleInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('mod' => 'mod/{$name}/', 'admin_report' => 'admin/report/{$name}/', 'atto' => 'lib/editor/atto/plugins/{$name}/', 'tool' => 'admin/tool/{$name}/', 'assignment' => 'mod/assignment/type/{$name}/', 'assignsubmission' => 'mod/assign/submission/{$name}/', 'assignfeedback' => 'mod/assign/feedback/{$name}/', 'auth' => 'auth/{$name}/', 'availability' => 'availability/condition/{$name}/', 'block' => 'blocks/{$name}/', 'booktool' => 'mod/book/tool/{$name}/', 'cachestore' => 'cache/stores/{$name}/', 'cachelock' => 'cache/locks/{$name}/', 'calendartype' => 'calendar/type/{$name}/', 'fileconverter' => 'files/converter/{$name}/', 'format' => 'course/format/{$name}/', 'coursereport' => 'course/report/{$name}/', 'customcertelement' => 'mod/customcert/element/{$name}/', 'datafield' => 'mod/data/field/{$name}/', 'datapreset' => 'mod/data/preset/{$name}/', 'editor' => 'lib/editor/{$name}/', 'enrol' => 'enrol/{$name}/', 'filter' => 'filter/{$name}/', 'gradeexport' => 'grade/export/{$name}/', 'gradeimport' => 'grade/import/{$name}/', 'gradereport' => 'grade/report/{$name}/', 'gradingform' => 'grade/grading/form/{$name}/', 'local' => 'local/{$name}/', 'logstore' => 'admin/tool/log/store/{$name}/', 'ltisource' => 'mod/lti/source/{$name}/', 'ltiservice' => 'mod/lti/service/{$name}/', 'message' => 'message/output/{$name}/', 'mnetservice' => 'mnet/service/{$name}/', 'plagiarism' => 'plagiarism/{$name}/', 'portfolio' => 'portfolio/{$name}/', 'qbehaviour' => 'question/behaviour/{$name}/', 'qformat' => 'question/format/{$name}/', 'qtype' => 'question/type/{$name}/', 'quizaccess' => 'mod/quiz/accessrule/{$name}/', 'quiz' => 'mod/quiz/report/{$name}/', 'report' => 'report/{$name}/', 'repository' => 'repository/{$name}/', 'scormreport' => 'mod/scorm/report/{$name}/', 'search' => 'search/engine/{$name}/', 'theme' => 'theme/{$name}/', 'tinymce' => 'lib/editor/tinymce/plugins/{$name}/', 'profilefield' => 'user/profile/field/{$name}/', 'webservice' => 'webservice/{$name}/', 'workshopallocation' => 'mod/workshop/allocation/{$name}/', 'workshopeval' => 'mod/workshop/eval/{$name}/', 'workshopform' => 'mod/workshop/form/{$name}/');
    }
    class ImageCMSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('template' => 'templates/{$name}/', 'module' => 'application/modules/{$name}/', 'library' => 'application/libraries/{$name}/');
    }
    /**
     * An installer to handle MODX specifics when installing packages.
     */
    class ModxInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extra' => 'core/packages/{$name}/');
    }
    class VanillaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'theme' => 'themes/{$name}/');
    }
    class TheliaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'local/modules/{$name}/', 'frontoffice-template' => 'templates/frontOffice/{$name}/', 'backoffice-template' => 'templates/backOffice/{$name}/', 'email-template' => 'templates/email/{$name}/');
    }
    class DrupalInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('core' => 'core/', 'module' => 'modules/{$name}/', 'theme' => 'themes/{$name}/', 'library' => 'libraries/{$name}/', 'profile' => 'profiles/{$name}/', 'database-driver' => 'drivers/lib/Drupal/Driver/Database/{$name}/', 'drush' => 'drush/{$name}/', 'custom-theme' => 'themes/custom/{$name}/', 'custom-module' => 'modules/custom/{$name}/', 'custom-profile' => 'profiles/custom/{$name}/', 'drupal-multisite' => 'sites/{$name}/', 'console' => 'console/{$name}/', 'console-language' => 'console/language/{$name}/', 'config' => 'config/sync/');
    }
    class WordPressInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'wp-content/plugins/{$name}/', 'theme' => 'wp-content/themes/{$name}/', 'muplugin' => 'wp-content/mu-plugins/{$name}/', 'dropin' => 'wp-content/{$name}/');
    }
    class CockpitInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'cockpit/modules/addons/{$name}/');
        /**
         * Format module name.
         *
         * Strip `module-` prefix from package name.
         *
         * {@inheritDoc}
         */
        public function inflectPackageVars($vars)
        {
        }
        public function inflectModuleVars($vars)
        {
        }
    }
    class SilverStripeInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => '{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Return the install path based on package type.
         *
         * Relies on built-in BaseInstaller behaviour with one exception: silverstripe/framework
         * must be installed to 'sapphire' and not 'framework' if the version is <3.0.0
         *
         * @param  PackageInterface $package
         * @param  string           $frameworkType
         * @return string
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
    }
    /**
     * Plugin/theme installer for shopware
     * @author Benjamin Boit
     */
    class ShopwareInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('backend-plugin' => 'engine/Shopware/Plugins/Local/Backend/{$name}/', 'core-plugin' => 'engine/Shopware/Plugins/Local/Core/{$name}/', 'frontend-plugin' => 'engine/Shopware/Plugins/Local/Frontend/{$name}/', 'theme' => 'templates/{$name}/', 'plugin' => 'custom/plugins/{$name}/', 'frontend-theme' => 'themes/Frontend/{$name}/');
        /**
         * Transforms the names
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PhpBBInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'ext/{$vendor}/{$name}/', 'language' => 'language/{$name}/', 'style' => 'styles/{$name}/');
    }
    class LanManagementSystemInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'template' => 'templates/{$name}/', 'document-template' => 'documents/templates/{$name}/', 'userpanel-module' => 'userpanel/modules/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ElggInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'mod/{$name}/');
    }
    class Redaxo5Installer extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('addon' => 'redaxo/src/addons/{$name}/', 'bestyle-plugin' => 'redaxo/src/addons/be_style/plugins/{$name}/');
    }
    class RadPHPInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('bundle' => 'src/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class LithiumInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'libraries/{$name}/', 'source' => 'libraries/_source/{$name}/');
    }
    class MayaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
        /**
         * Format package name.
         *
         * For package type maya-module, cut off a trailing '-module' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectModuleVars($vars)
        {
        }
    }
}
namespace {
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInitd32b990c0cd3cc6015d4bae6724d5ec7
    {
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInitd32b990c0cd3cc6015d4bae6724d5ec7
    {
        public static $files = array('b45b351e6b6f7487d819961fef2fda77' => __DIR__ . '/..' . '/jakeasmith/http_build_url/src/http_build_url.php', '0e6d7bf4a5811bfa5cf40c5ccd6fae6a' => __DIR__ . '/..' . '/symfony/polyfill-mbstring/bootstrap.php', '320cde22f66dd4f5d3fd621d3e88b98f' => __DIR__ . '/..' . '/symfony/polyfill-ctype/bootstrap.php', 'def43f6c87e4f8dfd0c9e1b1bab14fe8' => __DIR__ . '/..' . '/symfony/polyfill-iconv/bootstrap.php', '5f5b8f7c1db2e892006e8805f0ed573c' => __DIR__ . '/..' . '/wpml/collect/src/Illuminate/Support/helpers.php', '914c4a8cb7e06f7d6e1ddf6997c1785f' => __DIR__ . '/..' . '/wpml/fp/core/functions.php', '348332d63f916da7598941d18c24311d' => __DIR__ . '/..' . '/wpml/fp/core/strings_functions.php', '766b758ee51e52c53cf3312a1dba9e34' => __DIR__ . '/..' . '/wpml/fp/core/system.php', '995b589e693a50f54393aa31ee1c3763' => __DIR__ . '/..' . '/yoast/whip/src/facades/wordpress.php');
        public static $prefixLengthsPsr4 = array('W' => array('WPML\\Collect\\' => 13, 'WPML\\Auryn\\' => 11), 'S' => array('Symfony\\Polyfill\\Mbstring\\' => 26, 'Symfony\\Polyfill\\Iconv\\' => 23, 'Symfony\\Polyfill\\Ctype\\' => 23), 'P' => array('Psr\\Log\\' => 8, 'PhpMyAdmin\\SqlParser\\' => 21), 'C' => array('Composer\\Installers\\' => 20));
        public static $prefixDirsPsr4 = array('WPML\\Collect\\' => array(0 => __DIR__ . '/..' . '/wpml/collect/src/Illuminate'), 'WPML\\Auryn\\' => array(0 => __DIR__ . '/..' . '/otgs/auryn/lib'), 'Symfony\\Polyfill\\Mbstring\\' => array(0 => __DIR__ . '/..' . '/symfony/polyfill-mbstring'), 'Symfony\\Polyfill\\Iconv\\' => array(0 => __DIR__ . '/..' . '/symfony/polyfill-iconv'), 'Symfony\\Polyfill\\Ctype\\' => array(0 => __DIR__ . '/..' . '/symfony/polyfill-ctype'), 'Psr\\Log\\' => array(0 => __DIR__ . '/..' . '/psr/log/Psr/Log'), 'PhpMyAdmin\\SqlParser\\' => array(0 => __DIR__ . '/..' . '/wpml/sql-parser/src'), 'Composer\\Installers\\' => array(0 => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers'));
        public static $classMap = array('AbsoluteLinks' => __DIR__ . '/../..' . '/inc/absolute-links/absolute-links.class.php', 'AddTMAllowedOption' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddTMAllowedOption.php', 'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php', 'ICLMenusSync' => __DIR__ . '/../..' . '/inc/wp-nav-menus/menus-sync.php', 'ICL_AdminNotifier' => __DIR__ . '/../..' . '/inc/icl-admin-notifier.php', 'ICanLocalizeQuery' => __DIR__ . '/../..' . '/lib/icl_api.php', 'IWPML_AJAX_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-ajax-action.php', 'IWPML_AJAX_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-ajax-action-loader.php', 'IWPML_AJAX_Action_Run' => __DIR__ . '/../..' . '/classes/ajax/interface-wpml-ajax-action-run.php', 'IWPML_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-action.php', 'IWPML_Action_Loader_Factory' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-action-loader-factory.php', 'IWPML_Backend_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-backend-action.php', 'IWPML_Backend_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-backend-action-loader.php', 'IWPML_CLI_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-cli-action.php', 'IWPML_CLI_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-cli-action-loader.php', 'IWPML_Current_Language' => __DIR__ . '/../..' . '/classes/languages/interface-iwpml-current-language.php', 'IWPML_DIC_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-dic-action.php', 'IWPML_Deferred_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-deferred-action-loader.php', 'IWPML_Frontend_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-frontend-action.php', 'IWPML_Frontend_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-frontend-action-loader.php', 'IWPML_Integration_Requirements_Module' => __DIR__ . '/../..' . '/classes/requirements/modules/interface-iwpml-integration-requirements-module.php', 'IWPML_REST_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-rest-action.php', 'IWPML_REST_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-rest-action-loader.php', 'IWPML_Resolve_Object_Url' => __DIR__ . '/../..' . '/classes/url-handling/resolver/iwpml-resolve-object-url.php', 'IWPML_TF_Collection_Filter' => __DIR__ . '/../..' . '/classes/translation-feedback/model/iwpml-tf-collection-filter.php', 'IWPML_TF_Data_Object' => __DIR__ . '/../..' . '/classes/translation-feedback/model/iwpml-tf-data-object.php', 'IWPML_TF_Settings' => __DIR__ . '/../..' . '/classes/translation-feedback/settings/iwpml-tf-settings.php', 'IWPML_TM_Admin_Section' => __DIR__ . '/../..' . '/classes/menu/iwpml-tm-admin-section.php', 'IWPML_TM_Admin_Section_Factory' => __DIR__ . '/../..' . '/classes/menu/iwpml-tm-admin-section-factory.php', 'IWPML_TM_Count' => __DIR__ . '/../..' . '/classes/words-count/count/iwpml-tm-count.php', 'IWPML_TM_Word_Calculator_Post' => __DIR__ . '/../..' . '/classes/words-count/processor/calculator/post/iwpml-tm-word-calculator-post.php', 'IWPML_TM_Word_Count_Queue_Items' => __DIR__ . '/../..' . '/classes/words-count/queue/items/iwpml-tm-word-count-queue-items.php', 'IWPML_TM_Word_Count_Set' => __DIR__ . '/../..' . '/classes/words-count/processor/iwpml-tm-word-count-set.php', 'IWPML_Taxonomy_State' => __DIR__ . '/../..' . '/classes/taxonomy/interface-iwpml-taxomony-state.php', 'IWPML_Template_Service' => __DIR__ . '/../..' . '/classes/templates/interface-iwpml-template-service.php', 'IWPML_Theme_Plugin_Localization_UI_Strategy' => __DIR__ . '/../..' . '/classes/theme-plugin-localization/strategy/interface-wpml-theme-plugin-localization-ui-strategy.php', 'IWPML_URL_Converter_Strategy' => __DIR__ . '/../..' . '/classes/url-handling/converter/strategy/interface-iwpml-url-converter-strategy.php', 'IWPML_Upgrade_Command' => __DIR__ . '/../..' . '/classes/upgrade/interface-iwpml-upgrade-command.php', 'IWPML_WP_Element_Type' => __DIR__ . '/../..' . '/classes/wpml-wp/iwpml-wp-element-type.php', 'Icl_Stepper' => __DIR__ . '/../..' . '/inc/upgrade-functions/2.0.0/stepper.php', 'OTGS_Assets_Handles' => __DIR__ . '/..' . '/otgs/ui/src/php/OTGS_Assets_Handles.php', 'OTGS_Assets_Store' => __DIR__ . '/..' . '/otgs/ui/src/php/OTGS_Assets_Store.php', 'OTGS_UI_Assets' => __DIR__ . '/..' . '/otgs/ui/src/php/OTGS_UI_Assets.php', 'OTGS_UI_Loader' => __DIR__ . '/..' . '/otgs/ui/src/php/OTGS_UI_Loader.php', 'SitePress' => __DIR__ . '/../..' . '/sitepress.class.php', 'SitePressLanguageSwitcher' => __DIR__ . '/../..' . '/inc/language-switcher.php', 'SitePress_EditLanguages' => __DIR__ . '/../..' . '/menu/edit-languages.php', 'SitePress_Setup' => __DIR__ . '/../..' . '/inc/setup/sitepress-setup.class.php', 'SitePress_Table' => __DIR__ . '/../..' . '/menu/sitepress-table.class.php', 'SitePress_Table_Basket' => __DIR__ . '/../..' . '/classes/menu/translation-basket/sitepress-table-basket.class.php', 'TranslationManagement' => __DIR__ . '/../..' . '/inc/translation-management/translation-management.class.php', 'TranslationProxy' => __DIR__ . '/../..' . '/inc/translation-proxy/translationproxy.class.php', 'TranslationProxy_Api' => __DIR__ . '/../..' . '/inc/translation-proxy/translationproxy-api.class.php', 'TranslationProxy_Basket' => __DIR__ . '/../..' . '/inc/translation-proxy/translationproxy-basket.class.php', 'TranslationProxy_Batch' => __DIR__ . '/../..' . '/inc/translation-proxy/translationproxy-batch.class.php', 'TranslationProxy_Popup' => __DIR__ . '/../..' . '/inc/translation-proxy/translationproxy-popup.class.php', 'TranslationProxy_Project' => __DIR__ . '/../..' . '/inc/translation-proxy/translationproxy-project.class.php', 'TranslationProxy_Service' => __DIR__ . '/../..' . '/inc/translation-proxy/translationproxy-service.class.php', 'TranslationProxy_Translator' => __DIR__ . '/../..' . '/inc/translation-proxy/translationproxy-translator.class.php', 'WPMLTranslationProxyApiException' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-translation-proxy-api-exception.php', 'WPML\\API\\PostTypes' => __DIR__ . '/..' . '/wpml/core-api/core/PostTypes.php', 'WPML\\API\\Sanitize' => __DIR__ . '/..' . '/wpml/core-api/core/Sanitize.php', 'WPML\\API\\Settings' => __DIR__ . '/..' . '/wpml/core-api/core/Settings.php', 'WPML\\API\\Version' => __DIR__ . '/..' . '/wpml/core-api/core/Version.php', 'WPML\\ATE\\Proxies\\Widget' => __DIR__ . '/../..' . '/classes/ATE/proxies/Widget.php', 'WPML\\AbsoluteLinks\\BlockProtector' => __DIR__ . '/../..' . '/inc/absolute-links/BlockProtector.php', 'WPML\\Action\\Type' => __DIR__ . '/../..' . '/classes/action-filter-loader/class-wpml-action-type.php', 'WPML\\AdminLanguageSwitcher\\AdminLanguageSwitcher' => __DIR__ . '/../..' . '/classes/admin-language-switcher/AdminLanguageSwitcher.php', 'WPML\\AdminLanguageSwitcher\\AdminLanguageSwitcherRenderer' => __DIR__ . '/../..' . '/classes/admin-language-switcher/AdminLanguageSwitcherRenderer.php', 'WPML\\AdminLanguageSwitcher\\DisableWpLanguageSwitcher' => __DIR__ . '/../..' . '/classes/admin-language-switcher/DisableWpLanguageSwitcher.php', 'WPML\\AdminMenu\\Redirect' => __DIR__ . '/../..' . '/classes/admin-menu/Redirect.php', 'WPML\\Ajax\\Endpoint\\Upload' => __DIR__ . '/../..' . '/classes/ajax/endpoints/Upload.php', 'WPML\\Ajax\\Factory' => __DIR__ . '/../..' . '/classes/ajax/Factory.php', 'WPML\\Ajax\\IHandler' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/ajax/Handler.php', 'WPML\\Ajax\\Locale' => __DIR__ . '/../..' . '/classes/ajax/Locale.php', 'WPML\\BackgroundTask\\AbstractTaskEndpoint' => __DIR__ . '/../..' . '/classes/background-task/AbstractTaskEndpoint.php', 'WPML\\BackgroundTask\\BackgroundTaskLoader' => __DIR__ . '/../..' . '/classes/background-task/BackgroundTaskLoader.php', 'WPML\\BackgroundTask\\BackgroundTaskViewModel' => __DIR__ . '/../..' . '/classes/background-task/BackgroundTaskViewModel.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Model\\Label\\BothLanguages' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Model/LabelTemplate/BothLanguages.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Model\\Label\\CurrentLanguage' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Model/LabelTemplate/CurrentLanguage.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Model\\Label\\LabelTemplateInterface' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Model/LabelTemplate/LabelTemplateInterface.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Model\\Label\\LanguageCode' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Model/LabelTemplate/LanguageCode.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Model\\Label\\NativeLanguage' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Model/LabelTemplate/NativeLanguage.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Model\\LanguageItem' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Model/LanguageItem.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Model\\LanguageItemTemplate' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Model/LanguageItemTemplate.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Model\\LanguageSwitcher' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Model/LanguageSwitcher.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Model\\LanguageSwitcherTemplate' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Model/LanguageSwitcherTemplate.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Parser' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Parser.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Render' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Render.php', 'WPML\\BlockEditor\\Blocks\\LanguageSwitcher\\Repository' => __DIR__ . '/../..' . '/classes/block-editor/Blocks/LanguageSwitcher/Repository.php', 'WPML\\BlockEditor\\Loader' => __DIR__ . '/../..' . '/classes/block-editor/Loader.php', 'WPML\\BrowserLanguageRedirect\\Dialog' => __DIR__ . '/../..' . '/classes/browser-language-redirect/wpml-browser-language-redirect-dialog.php', 'WPML\\CLI\\Core\\BootStrap' => __DIR__ . '/../..' . '/classes/wp-cli/BootStrap.php', 'WPML\\CLI\\Core\\Commands\\ClearCache' => __DIR__ . '/../..' . '/classes/wp-cli/commands/ClearCache.php', 'WPML\\CLI\\Core\\Commands\\ClearCacheFactory' => __DIR__ . '/../..' . '/classes/wp-cli/factories/ClearCacheFactory.php', 'WPML\\CLI\\Core\\Commands\\ICommand' => __DIR__ . '/../..' . '/classes/wp-cli/commands/ICommand.php', 'WPML\\CLI\\Core\\Commands\\IWPML_Command_Factory' => __DIR__ . '/../..' . '/classes/wp-cli/factories/IWPML_Command_Factory.php', 'WPML\\CLI\\Core\\Commands\\IWPML_Core' => __DIR__ . '/../..' . '/classes/wp-cli/IWPML_Core.php', 'WPML\\Compatibility\\GoogleSiteKit\\Hooks' => __DIR__ . '/../..' . '/compatibility/GoogleSiteKit/Hooks.php', 'WPML\\Container\\Config' => __DIR__ . '/../..' . '/classes/container/class-config.php', 'WPML\\Container\\Container' => __DIR__ . '/../..' . '/classes/container/class-wpml-container.php', 'WPML\\Convert\\Ids' => __DIR__ . '/..' . '/wpml/core-api/core/Convert/Ids.php', 'WPML\\Core\\BackgroundTask\\Command\\PersistBackgroundTask' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Command/PersistBackgroundTask.php', 'WPML\\Core\\BackgroundTask\\Command\\UpdateBackgroundTask' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Command/UpdateBackgroundTask.php', 'WPML\\Core\\BackgroundTask\\Exception\\TaskIsNotRunnableException' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Exception/TaskIsNotRunnableException.php', 'WPML\\Core\\BackgroundTask\\Exception\\TaskNotRunnable\\ExceededMaxRetriesException' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Exception/TaskNotRunnable/ExceededMaxRetriesException.php', 'WPML\\Core\\BackgroundTask\\Exception\\TaskNotRunnable\\TaskIsCompletedException' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Exception/TaskNotRunnable/TaskIsCompletedException.php', 'WPML\\Core\\BackgroundTask\\Exception\\TaskNotRunnable\\TaskIsPausedException' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Exception/TaskNotRunnable/TaskIsPausedException.php', 'WPML\\Core\\BackgroundTask\\Model\\BackgroundTask' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Model/BackgroundTask.php', 'WPML\\Core\\BackgroundTask\\Model\\TaskEndpointInterface' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Model/TaskEndpointInterface.php', 'WPML\\Core\\BackgroundTask\\Repository\\BackgroundTaskRepository' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Repository/BackgroundTaskRepository.php', 'WPML\\Core\\BackgroundTask\\Service\\BackgroundTaskService' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Service/BackgroundTaskService.php', 'WPML\\Core\\ISitePress' => __DIR__ . '/../..' . '/classes/ISitePress.php', 'WPML\\Core\\LanguageNegotiation' => __DIR__ . '/../..' . '/classes/LanguageNegotiation.php', 'WPML\\Core\\Menu\\Translate' => __DIR__ . '/../..' . '/inc/wp-nav-menus/TranslateMenu.php', 'WPML\\Core\\PostTranslation\\SyncTranslationDocumentStatus' => __DIR__ . '/../..' . '/inc/post-translation/SyncTranslationDocumentStatus.php', 'WPML\\Core\\REST\\RewriteRules' => __DIR__ . '/../..' . '/classes/REST/RewriteRules.php', 'WPML\\Core\\REST\\Status' => __DIR__ . '/../..' . '/classes/REST/Status.php', 'WPML\\Core\\Twig\\Cache\\CacheInterface' => __DIR__ . '/../..' . '/lib/twig/src/Cache/CacheInterface.php', 'WPML\\Core\\Twig\\Cache\\FilesystemCache' => __DIR__ . '/../..' . '/lib/twig/src/Cache/FilesystemCache.php', 'WPML\\Core\\Twig\\Cache\\NullCache' => __DIR__ . '/../..' . '/lib/twig/src/Cache/NullCache.php', 'WPML\\Core\\Twig\\Compiler' => __DIR__ . '/../..' . '/lib/twig/src/Compiler.php', 'WPML\\Core\\Twig\\Environment' => __DIR__ . '/../..' . '/lib/twig/src/Environment.php', 'WPML\\Core\\Twig\\Error\\Error' => __DIR__ . '/../..' . '/lib/twig/src/Error/Error.php', 'WPML\\Core\\Twig\\Error\\LoaderError' => __DIR__ . '/../..' . '/lib/twig/src/Error/LoaderError.php', 'WPML\\Core\\Twig\\Error\\RuntimeError' => __DIR__ . '/../..' . '/lib/twig/src/Error/RuntimeError.php', 'WPML\\Core\\Twig\\Error\\SyntaxError' => __DIR__ . '/../..' . '/lib/twig/src/Error/SyntaxError.php', 'WPML\\Core\\Twig\\ExpressionParser' => __DIR__ . '/../..' . '/lib/twig/src/ExpressionParser.php', 'WPML\\Core\\Twig\\Extension\\AbstractExtension' => __DIR__ . '/../..' . '/lib/twig/src/Extension/AbstractExtension.php', 'WPML\\Core\\Twig\\Extension\\CoreExtension' => __DIR__ . '/../..' . '/lib/twig/src/Extension/CoreExtension.php', 'WPML\\Core\\Twig\\Extension\\DebugExtension' => __DIR__ . '/../..' . '/lib/twig/src/Extension/DebugExtension.php', 'WPML\\Core\\Twig\\Extension\\EscaperExtension' => __DIR__ . '/../..' . '/lib/twig/src/Extension/EscaperExtension.php', 'WPML\\Core\\Twig\\Extension\\ExtensionInterface' => __DIR__ . '/../..' . '/lib/twig/src/Extension/ExtensionInterface.php', 'WPML\\Core\\Twig\\Extension\\GlobalsInterface' => __DIR__ . '/../..' . '/lib/twig/src/Extension/GlobalsInterface.php', 'WPML\\Core\\Twig\\Extension\\InitRuntimeInterface' => __DIR__ . '/../..' . '/lib/twig/src/Extension/InitRuntimeInterface.php', 'WPML\\Core\\Twig\\Extension\\OptimizerExtension' => __DIR__ . '/../..' . '/lib/twig/src/Extension/OptimizerExtension.php', 'WPML\\Core\\Twig\\Extension\\ProfilerExtension' => __DIR__ . '/../..' . '/lib/twig/src/Extension/ProfilerExtension.php', 'WPML\\Core\\Twig\\Extension\\RuntimeExtensionInterface' => __DIR__ . '/../..' . '/lib/twig/src/Extension/RuntimeExtensionInterface.php', 'WPML\\Core\\Twig\\Extension\\SandboxExtension' => __DIR__ . '/../..' . '/lib/twig/src/Extension/SandboxExtension.php', 'WPML\\Core\\Twig\\Extension\\StagingExtension' => __DIR__ . '/../..' . '/lib/twig/src/Extension/StagingExtension.php', 'WPML\\Core\\Twig\\Extension\\StringLoaderExtension' => __DIR__ . '/../..' . '/lib/twig/src/Extension/StringLoaderExtension.php', 'WPML\\Core\\Twig\\FileExtensionEscapingStrategy' => __DIR__ . '/../..' . '/lib/twig/src/FileExtensionEscapingStrategy.php', 'WPML\\Core\\Twig\\Lexer' => __DIR__ . '/../..' . '/lib/twig/src/Lexer.php', 'WPML\\Core\\Twig\\Loader\\ArrayLoader' => __DIR__ . '/../..' . '/lib/twig/src/Loader/ArrayLoader.php', 'WPML\\Core\\Twig\\Loader\\ChainLoader' => __DIR__ . '/../..' . '/lib/twig/src/Loader/ChainLoader.php', 'WPML\\Core\\Twig\\Loader\\ExistsLoaderInterface' => __DIR__ . '/../..' . '/lib/twig/src/Loader/ExistsLoaderInterface.php', 'WPML\\Core\\Twig\\Loader\\FilesystemLoader' => __DIR__ . '/../..' . '/lib/twig/src/Loader/FilesystemLoader.php', 'WPML\\Core\\Twig\\Loader\\LoaderInterface' => __DIR__ . '/../..' . '/lib/twig/src/Loader/LoaderInterface.php', 'WPML\\Core\\Twig\\Loader\\SourceContextLoaderInterface' => __DIR__ . '/../..' . '/lib/twig/src/Loader/SourceContextLoaderInterface.php', 'WPML\\Core\\Twig\\Markup' => __DIR__ . '/../..' . '/lib/twig/src/Markup.php', 'WPML\\Core\\Twig\\NodeTraverser' => __DIR__ . '/../..' . '/lib/twig/src/NodeTraverser.php', 'WPML\\Core\\Twig\\NodeVisitor\\AbstractNodeVisitor' => __DIR__ . '/../..' . '/lib/twig/src/NodeVisitor/AbstractNodeVisitor.php', 'WPML\\Core\\Twig\\NodeVisitor\\EscaperNodeVisitor' => __DIR__ . '/../..' . '/lib/twig/src/NodeVisitor/EscaperNodeVisitor.php', 'WPML\\Core\\Twig\\NodeVisitor\\NodeVisitorInterface' => __DIR__ . '/../..' . '/lib/twig/src/NodeVisitor/NodeVisitorInterface.php', 'WPML\\Core\\Twig\\NodeVisitor\\OptimizerNodeVisitor' => __DIR__ . '/../..' . '/lib/twig/src/NodeVisitor/OptimizerNodeVisitor.php', 'WPML\\Core\\Twig\\NodeVisitor\\SafeAnalysisNodeVisitor' => __DIR__ . '/../..' . '/lib/twig/src/NodeVisitor/SafeAnalysisNodeVisitor.php', 'WPML\\Core\\Twig\\NodeVisitor\\SandboxNodeVisitor' => __DIR__ . '/../..' . '/lib/twig/src/NodeVisitor/SandboxNodeVisitor.php', 'WPML\\Core\\Twig\\Node\\AutoEscapeNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/AutoEscapeNode.php', 'WPML\\Core\\Twig\\Node\\BlockNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/BlockNode.php', 'WPML\\Core\\Twig\\Node\\BlockReferenceNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/BlockReferenceNode.php', 'WPML\\Core\\Twig\\Node\\BodyNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/BodyNode.php', 'WPML\\Core\\Twig\\Node\\CheckSecurityNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/CheckSecurityNode.php', 'WPML\\Core\\Twig\\Node\\CheckToStringNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/CheckToStringNode.php', 'WPML\\Core\\Twig\\Node\\DeprecatedNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/DeprecatedNode.php', 'WPML\\Core\\Twig\\Node\\DoNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/DoNode.php', 'WPML\\Core\\Twig\\Node\\EmbedNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/EmbedNode.php', 'WPML\\Core\\Twig\\Node\\Expression\\AbstractExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/AbstractExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\ArrayExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/ArrayExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\ArrowFunctionExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/ArrowFunctionExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\AssignNameExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/AssignNameExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\AbstractBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/AbstractBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\AddBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/AddBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\AndBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/AndBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\BitwiseAndBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/BitwiseAndBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\BitwiseOrBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/BitwiseOrBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\BitwiseXorBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/BitwiseXorBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\ConcatBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/ConcatBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\DivBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/DivBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\EndsWithBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/EndsWithBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\EqualBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/EqualBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\FloorDivBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/FloorDivBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\GreaterBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/GreaterBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\GreaterEqualBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/GreaterEqualBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\InBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/InBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\LessBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/LessBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\LessEqualBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/LessEqualBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\MatchesBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/MatchesBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\ModBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/ModBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\MulBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/MulBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\NotEqualBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/NotEqualBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\NotInBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/NotInBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\OrBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/OrBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\PowerBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/PowerBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\RangeBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/RangeBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\StartsWithBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/StartsWithBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\SubBinary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Binary/SubBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\BlockReferenceExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/BlockReferenceExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\CallExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/CallExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\ConditionalExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/ConditionalExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\ConstantExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/ConstantExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\FilterExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/FilterExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\Filter\\DefaultFilter' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Filter/DefaultFilter.php', 'WPML\\Core\\Twig\\Node\\Expression\\FunctionExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/FunctionExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\GetAttrExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/GetAttrExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\InlinePrint' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/InlinePrint.php', 'WPML\\Core\\Twig\\Node\\Expression\\MethodCallExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/MethodCallExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\NameExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/NameExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\NullCoalesceExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/NullCoalesceExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\ParentExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/ParentExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\TempNameExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/TempNameExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\TestExpression' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/TestExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\ConstantTest' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Test/ConstantTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\DefinedTest' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Test/DefinedTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\DivisiblebyTest' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Test/DivisiblebyTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\EvenTest' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Test/EvenTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\NullTest' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Test/NullTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\OddTest' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Test/OddTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\SameasTest' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Test/SameasTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Unary\\AbstractUnary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Unary/AbstractUnary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Unary\\NegUnary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Unary/NegUnary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Unary\\NotUnary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Unary/NotUnary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Unary\\PosUnary' => __DIR__ . '/../..' . '/lib/twig/src/Node/Expression/Unary/PosUnary.php', 'WPML\\Core\\Twig\\Node\\FlushNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/FlushNode.php', 'WPML\\Core\\Twig\\Node\\ForLoopNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/ForLoopNode.php', 'WPML\\Core\\Twig\\Node\\ForNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/ForNode.php', 'WPML\\Core\\Twig\\Node\\IfNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/IfNode.php', 'WPML\\Core\\Twig\\Node\\ImportNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/ImportNode.php', 'WPML\\Core\\Twig\\Node\\IncludeNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/IncludeNode.php', 'WPML\\Core\\Twig\\Node\\MacroNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/MacroNode.php', 'WPML\\Core\\Twig\\Node\\ModuleNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/ModuleNode.php', 'WPML\\Core\\Twig\\Node\\Node' => __DIR__ . '/../..' . '/lib/twig/src/Node/Node.php', 'WPML\\Core\\Twig\\Node\\NodeCaptureInterface' => __DIR__ . '/../..' . '/lib/twig/src/Node/NodeCaptureInterface.php', 'WPML\\Core\\Twig\\Node\\NodeOutputInterface' => __DIR__ . '/../..' . '/lib/twig/src/Node/NodeOutputInterface.php', 'WPML\\Core\\Twig\\Node\\PrintNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/PrintNode.php', 'WPML\\Core\\Twig\\Node\\SandboxNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/SandboxNode.php', 'WPML\\Core\\Twig\\Node\\SandboxedPrintNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/SandboxedPrintNode.php', 'WPML\\Core\\Twig\\Node\\SetNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/SetNode.php', 'WPML\\Core\\Twig\\Node\\SetTempNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/SetTempNode.php', 'WPML\\Core\\Twig\\Node\\SpacelessNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/SpacelessNode.php', 'WPML\\Core\\Twig\\Node\\TextNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/TextNode.php', 'WPML\\Core\\Twig\\Node\\WithNode' => __DIR__ . '/../..' . '/lib/twig/src/Node/WithNode.php', 'WPML\\Core\\Twig\\Parser' => __DIR__ . '/../..' . '/lib/twig/src/Parser.php', 'WPML\\Core\\Twig\\Profiler\\Dumper\\BaseDumper' => __DIR__ . '/../..' . '/lib/twig/src/Profiler/Dumper/BaseDumper.php', 'WPML\\Core\\Twig\\Profiler\\Dumper\\BlackfireDumper' => __DIR__ . '/../..' . '/lib/twig/src/Profiler/Dumper/BlackfireDumper.php', 'WPML\\Core\\Twig\\Profiler\\Dumper\\HtmlDumper' => __DIR__ . '/../..' . '/lib/twig/src/Profiler/Dumper/HtmlDumper.php', 'WPML\\Core\\Twig\\Profiler\\Dumper\\TextDumper' => __DIR__ . '/../..' . '/lib/twig/src/Profiler/Dumper/TextDumper.php', 'WPML\\Core\\Twig\\Profiler\\NodeVisitor\\ProfilerNodeVisitor' => __DIR__ . '/../..' . '/lib/twig/src/Profiler/NodeVisitor/ProfilerNodeVisitor.php', 'WPML\\Core\\Twig\\Profiler\\Node\\EnterProfileNode' => __DIR__ . '/../..' . '/lib/twig/src/Profiler/Node/EnterProfileNode.php', 'WPML\\Core\\Twig\\Profiler\\Node\\LeaveProfileNode' => __DIR__ . '/../..' . '/lib/twig/src/Profiler/Node/LeaveProfileNode.php', 'WPML\\Core\\Twig\\Profiler\\Profile' => __DIR__ . '/../..' . '/lib/twig/src/Profiler/Profile.php', 'WPML\\Core\\Twig\\RuntimeLoader\\ContainerRuntimeLoader' => __DIR__ . '/../..' . '/lib/twig/src/RuntimeLoader/ContainerRuntimeLoader.php', 'WPML\\Core\\Twig\\RuntimeLoader\\FactoryRuntimeLoader' => __DIR__ . '/../..' . '/lib/twig/src/RuntimeLoader/FactoryRuntimeLoader.php', 'WPML\\Core\\Twig\\RuntimeLoader\\RuntimeLoaderInterface' => __DIR__ . '/../..' . '/lib/twig/src/RuntimeLoader/RuntimeLoaderInterface.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityError' => __DIR__ . '/../..' . '/lib/twig/src/Sandbox/SecurityError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityNotAllowedFilterError' => __DIR__ . '/../..' . '/lib/twig/src/Sandbox/SecurityNotAllowedFilterError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityNotAllowedFunctionError' => __DIR__ . '/../..' . '/lib/twig/src/Sandbox/SecurityNotAllowedFunctionError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityNotAllowedMethodError' => __DIR__ . '/../..' . '/lib/twig/src/Sandbox/SecurityNotAllowedMethodError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityNotAllowedPropertyError' => __DIR__ . '/../..' . '/lib/twig/src/Sandbox/SecurityNotAllowedPropertyError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityNotAllowedTagError' => __DIR__ . '/../..' . '/lib/twig/src/Sandbox/SecurityNotAllowedTagError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityPolicy' => __DIR__ . '/../..' . '/lib/twig/src/Sandbox/SecurityPolicy.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityPolicyInterface' => __DIR__ . '/../..' . '/lib/twig/src/Sandbox/SecurityPolicyInterface.php', 'WPML\\Core\\Twig\\Source' => __DIR__ . '/../..' . '/lib/twig/src/Source.php', 'WPML\\Core\\Twig\\Template' => __DIR__ . '/../..' . '/lib/twig/src/Template.php', 'WPML\\Core\\Twig\\TemplateWrapper' => __DIR__ . '/../..' . '/lib/twig/src/TemplateWrapper.php', 'WPML\\Core\\Twig\\Test\\IntegrationTestCase' => __DIR__ . '/../..' . '/lib/twig/src/Test/IntegrationTestCase.php', 'WPML\\Core\\Twig\\Test\\NodeTestCase' => __DIR__ . '/../..' . '/lib/twig/src/Test/NodeTestCase.php', 'WPML\\Core\\Twig\\Token' => __DIR__ . '/../..' . '/lib/twig/src/Token.php', 'WPML\\Core\\Twig\\TokenParser\\AbstractTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/AbstractTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\ApplyTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/ApplyTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\AutoEscapeTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/AutoEscapeTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\BlockTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/BlockTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\DeprecatedTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/DeprecatedTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\DoTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/DoTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\EmbedTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/EmbedTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\ExtendsTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/ExtendsTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\FilterTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/FilterTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\FlushTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/FlushTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\ForTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/ForTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\FromTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/FromTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\IfTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/IfTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\ImportTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/ImportTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\IncludeTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/IncludeTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\MacroTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/MacroTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\SandboxTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/SandboxTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\SetTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/SetTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\SpacelessTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/SpacelessTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\TokenParserInterface' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/TokenParserInterface.php', 'WPML\\Core\\Twig\\TokenParser\\UseTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/UseTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\WithTokenParser' => __DIR__ . '/../..' . '/lib/twig/src/TokenParser/WithTokenParser.php', 'WPML\\Core\\Twig\\TokenStream' => __DIR__ . '/../..' . '/lib/twig/src/TokenStream.php', 'WPML\\Core\\Twig\\TwigFilter' => __DIR__ . '/../..' . '/lib/twig/src/TwigFilter.php', 'WPML\\Core\\Twig\\TwigFunction' => __DIR__ . '/../..' . '/lib/twig/src/TwigFunction.php', 'WPML\\Core\\Twig\\TwigTest' => __DIR__ . '/../..' . '/lib/twig/src/TwigTest.php', 'WPML\\Core\\Twig\\Util\\DeprecationCollector' => __DIR__ . '/../..' . '/lib/twig/src/Util/DeprecationCollector.php', 'WPML\\Core\\Twig\\Util\\TemplateDirIterator' => __DIR__ . '/../..' . '/lib/twig/src/Util/TemplateDirIterator.php', 'WPML\\Core\\Twig_Autoloader' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Autoloader.php', 'WPML\\Core\\Twig_BaseNodeVisitor' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/BaseNodeVisitor.php', 'WPML\\Core\\Twig_CacheInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/CacheInterface.php', 'WPML\\Core\\Twig_Cache_Filesystem' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Cache/Filesystem.php', 'WPML\\Core\\Twig_Cache_Null' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Cache/Null.php', 'WPML\\Core\\Twig_Compiler' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Compiler.php', 'WPML\\Core\\Twig_CompilerInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/CompilerInterface.php', 'WPML\\Core\\Twig_ContainerRuntimeLoader' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/ContainerRuntimeLoader.php', 'WPML\\Core\\Twig_Environment' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Environment.php', 'WPML\\Core\\Twig_Error' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Error.php', 'WPML\\Core\\Twig_Error_Loader' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Error/Loader.php', 'WPML\\Core\\Twig_Error_Runtime' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Error/Runtime.php', 'WPML\\Core\\Twig_Error_Syntax' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Error/Syntax.php', 'WPML\\Core\\Twig_ExistsLoaderInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/ExistsLoaderInterface.php', 'WPML\\Core\\Twig_ExpressionParser' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/ExpressionParser.php', 'WPML\\Core\\Twig_Extension' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension.php', 'WPML\\Core\\Twig_ExtensionInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/ExtensionInterface.php', 'WPML\\Core\\Twig_Extension_Core' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension/Core.php', 'WPML\\Core\\Twig_Extension_Debug' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension/Debug.php', 'WPML\\Core\\Twig_Extension_Escaper' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension/Escaper.php', 'WPML\\Core\\Twig_Extension_GlobalsInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension/GlobalsInterface.php', 'WPML\\Core\\Twig_Extension_InitRuntimeInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension/InitRuntimeInterface.php', 'WPML\\Core\\Twig_Extension_Optimizer' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension/Optimizer.php', 'WPML\\Core\\Twig_Extension_Profiler' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension/Profiler.php', 'WPML\\Core\\Twig_Extension_Sandbox' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension/Sandbox.php', 'WPML\\Core\\Twig_Extension_Staging' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension/Staging.php', 'WPML\\Core\\Twig_Extension_StringLoader' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Extension/StringLoader.php', 'WPML\\Core\\Twig_FactoryRuntimeLoader' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/FactoryRuntimeLoader.php', 'WPML\\Core\\Twig_FileExtensionEscapingStrategy' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/FileExtensionEscapingStrategy.php', 'WPML\\Core\\Twig_Filter' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Filter.php', 'WPML\\Core\\Twig_FilterCallableInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/FilterCallableInterface.php', 'WPML\\Core\\Twig_FilterInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/FilterInterface.php', 'WPML\\Core\\Twig_Filter_Function' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Filter/Function.php', 'WPML\\Core\\Twig_Filter_Method' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Filter/Method.php', 'WPML\\Core\\Twig_Filter_Node' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Filter/Node.php', 'WPML\\Core\\Twig_Function' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Function.php', 'WPML\\Core\\Twig_FunctionCallableInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/FunctionCallableInterface.php', 'WPML\\Core\\Twig_FunctionInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/FunctionInterface.php', 'WPML\\Core\\Twig_Function_Function' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Function/Function.php', 'WPML\\Core\\Twig_Function_Method' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Function/Method.php', 'WPML\\Core\\Twig_Function_Node' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Function/Node.php', 'WPML\\Core\\Twig_Lexer' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Lexer.php', 'WPML\\Core\\Twig_LexerInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/LexerInterface.php', 'WPML\\Core\\Twig_LoaderInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/LoaderInterface.php', 'WPML\\Core\\Twig_Loader_Array' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Loader/Array.php', 'WPML\\Core\\Twig_Loader_Chain' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Loader/Chain.php', 'WPML\\Core\\Twig_Loader_Filesystem' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Loader/Filesystem.php', 'WPML\\Core\\Twig_Loader_String' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Loader/String.php', 'WPML\\Core\\Twig_Markup' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Markup.php', 'WPML\\Core\\Twig_Node' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node.php', 'WPML\\Core\\Twig_NodeCaptureInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/NodeCaptureInterface.php', 'WPML\\Core\\Twig_NodeInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/NodeInterface.php', 'WPML\\Core\\Twig_NodeOutputInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/NodeOutputInterface.php', 'WPML\\Core\\Twig_NodeTraverser' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/NodeTraverser.php', 'WPML\\Core\\Twig_NodeVisitorInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/NodeVisitorInterface.php', 'WPML\\Core\\Twig_NodeVisitor_Escaper' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/NodeVisitor/Escaper.php', 'WPML\\Core\\Twig_NodeVisitor_Optimizer' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/NodeVisitor/Optimizer.php', 'WPML\\Core\\Twig_NodeVisitor_SafeAnalysis' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/NodeVisitor/SafeAnalysis.php', 'WPML\\Core\\Twig_NodeVisitor_Sandbox' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/NodeVisitor/Sandbox.php', 'WPML\\Core\\Twig_Node_AutoEscape' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/AutoEscape.php', 'WPML\\Core\\Twig_Node_Block' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Block.php', 'WPML\\Core\\Twig_Node_BlockReference' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/BlockReference.php', 'WPML\\Core\\Twig_Node_Body' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Body.php', 'WPML\\Core\\Twig_Node_CheckSecurity' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/CheckSecurity.php', 'WPML\\Core\\Twig_Node_Deprecated' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Deprecated.php', 'WPML\\Core\\Twig_Node_Do' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Do.php', 'WPML\\Core\\Twig_Node_Embed' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Embed.php', 'WPML\\Core\\Twig_Node_Expression' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression.php', 'WPML\\Core\\Twig_Node_Expression_Array' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Array.php', 'WPML\\Core\\Twig_Node_Expression_AssignName' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/AssignName.php', 'WPML\\Core\\Twig_Node_Expression_Binary' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Add' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Add.php', 'WPML\\Core\\Twig_Node_Expression_Binary_And' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/And.php', 'WPML\\Core\\Twig_Node_Expression_Binary_BitwiseAnd' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/BitwiseAnd.php', 'WPML\\Core\\Twig_Node_Expression_Binary_BitwiseOr' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/BitwiseOr.php', 'WPML\\Core\\Twig_Node_Expression_Binary_BitwiseXor' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/BitwiseXor.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Concat' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Concat.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Div' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Div.php', 'WPML\\Core\\Twig_Node_Expression_Binary_EndsWith' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/EndsWith.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Equal' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Equal.php', 'WPML\\Core\\Twig_Node_Expression_Binary_FloorDiv' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/FloorDiv.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Greater' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Greater.php', 'WPML\\Core\\Twig_Node_Expression_Binary_GreaterEqual' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/GreaterEqual.php', 'WPML\\Core\\Twig_Node_Expression_Binary_In' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/In.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Less' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Less.php', 'WPML\\Core\\Twig_Node_Expression_Binary_LessEqual' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/LessEqual.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Matches' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Matches.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Mod' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Mod.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Mul' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Mul.php', 'WPML\\Core\\Twig_Node_Expression_Binary_NotEqual' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/NotEqual.php', 'WPML\\Core\\Twig_Node_Expression_Binary_NotIn' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/NotIn.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Or' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Or.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Power' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Power.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Range' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Range.php', 'WPML\\Core\\Twig_Node_Expression_Binary_StartsWith' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/StartsWith.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Sub' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Binary/Sub.php', 'WPML\\Core\\Twig_Node_Expression_BlockReference' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/BlockReference.php', 'WPML\\Core\\Twig_Node_Expression_Call' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Call.php', 'WPML\\Core\\Twig_Node_Expression_Conditional' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Conditional.php', 'WPML\\Core\\Twig_Node_Expression_Constant' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Constant.php', 'WPML\\Core\\Twig_Node_Expression_ExtensionReference' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/ExtensionReference.php', 'WPML\\Core\\Twig_Node_Expression_Filter' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Filter.php', 'WPML\\Core\\Twig_Node_Expression_Filter_Default' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Filter/Default.php', 'WPML\\Core\\Twig_Node_Expression_Function' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Function.php', 'WPML\\Core\\Twig_Node_Expression_GetAttr' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/GetAttr.php', 'WPML\\Core\\Twig_Node_Expression_MethodCall' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/MethodCall.php', 'WPML\\Core\\Twig_Node_Expression_Name' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Name.php', 'WPML\\Core\\Twig_Node_Expression_NullCoalesce' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/NullCoalesce.php', 'WPML\\Core\\Twig_Node_Expression_Parent' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Parent.php', 'WPML\\Core\\Twig_Node_Expression_TempName' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/TempName.php', 'WPML\\Core\\Twig_Node_Expression_Test' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Test.php', 'WPML\\Core\\Twig_Node_Expression_Test_Constant' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Test/Constant.php', 'WPML\\Core\\Twig_Node_Expression_Test_Defined' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Test/Defined.php', 'WPML\\Core\\Twig_Node_Expression_Test_Divisibleby' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Test/Divisibleby.php', 'WPML\\Core\\Twig_Node_Expression_Test_Even' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Test/Even.php', 'WPML\\Core\\Twig_Node_Expression_Test_Null' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Test/Null.php', 'WPML\\Core\\Twig_Node_Expression_Test_Odd' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Test/Odd.php', 'WPML\\Core\\Twig_Node_Expression_Test_Sameas' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Test/Sameas.php', 'WPML\\Core\\Twig_Node_Expression_Unary' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Unary.php', 'WPML\\Core\\Twig_Node_Expression_Unary_Neg' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Unary/Neg.php', 'WPML\\Core\\Twig_Node_Expression_Unary_Not' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Unary/Not.php', 'WPML\\Core\\Twig_Node_Expression_Unary_Pos' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Expression/Unary/Pos.php', 'WPML\\Core\\Twig_Node_Flush' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Flush.php', 'WPML\\Core\\Twig_Node_For' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/For.php', 'WPML\\Core\\Twig_Node_ForLoop' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/ForLoop.php', 'WPML\\Core\\Twig_Node_If' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/If.php', 'WPML\\Core\\Twig_Node_Import' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Import.php', 'WPML\\Core\\Twig_Node_Include' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Include.php', 'WPML\\Core\\Twig_Node_Macro' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Macro.php', 'WPML\\Core\\Twig_Node_Module' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Module.php', 'WPML\\Core\\Twig_Node_Print' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Print.php', 'WPML\\Core\\Twig_Node_Sandbox' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Sandbox.php', 'WPML\\Core\\Twig_Node_SandboxedPrint' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/SandboxedPrint.php', 'WPML\\Core\\Twig_Node_Set' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Set.php', 'WPML\\Core\\Twig_Node_SetTemp' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/SetTemp.php', 'WPML\\Core\\Twig_Node_Spaceless' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Spaceless.php', 'WPML\\Core\\Twig_Node_Text' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/Text.php', 'WPML\\Core\\Twig_Node_With' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Node/With.php', 'WPML\\Core\\Twig_Parser' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Parser.php', 'WPML\\Core\\Twig_ParserInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/ParserInterface.php', 'WPML\\Core\\Twig_Profiler_Dumper_Base' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Profiler/Dumper/Base.php', 'WPML\\Core\\Twig_Profiler_Dumper_Blackfire' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Profiler/Dumper/Blackfire.php', 'WPML\\Core\\Twig_Profiler_Dumper_Html' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Profiler/Dumper/Html.php', 'WPML\\Core\\Twig_Profiler_Dumper_Text' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Profiler/Dumper/Text.php', 'WPML\\Core\\Twig_Profiler_NodeVisitor_Profiler' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Profiler/NodeVisitor/Profiler.php', 'WPML\\Core\\Twig_Profiler_Node_EnterProfile' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Profiler/Node/EnterProfile.php', 'WPML\\Core\\Twig_Profiler_Node_LeaveProfile' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Profiler/Node/LeaveProfile.php', 'WPML\\Core\\Twig_Profiler_Profile' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Profiler/Profile.php', 'WPML\\Core\\Twig_RuntimeLoaderInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/RuntimeLoaderInterface.php', 'WPML\\Core\\Twig_Sandbox_SecurityError' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Sandbox/SecurityError.php', 'WPML\\Core\\Twig_Sandbox_SecurityNotAllowedFilterError' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Sandbox/SecurityNotAllowedFilterError.php', 'WPML\\Core\\Twig_Sandbox_SecurityNotAllowedFunctionError' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Sandbox/SecurityNotAllowedFunctionError.php', 'WPML\\Core\\Twig_Sandbox_SecurityNotAllowedMethodError' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Sandbox/SecurityNotAllowedMethodError.php', 'WPML\\Core\\Twig_Sandbox_SecurityNotAllowedPropertyError' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Sandbox/SecurityNotAllowedPropertyError.php', 'WPML\\Core\\Twig_Sandbox_SecurityNotAllowedTagError' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Sandbox/SecurityNotAllowedTagError.php', 'WPML\\Core\\Twig_Sandbox_SecurityPolicy' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Sandbox/SecurityPolicy.php', 'WPML\\Core\\Twig_Sandbox_SecurityPolicyInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Sandbox/SecurityPolicyInterface.php', 'WPML\\Core\\Twig_SimpleFilter' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/SimpleFilter.php', 'WPML\\Core\\Twig_SimpleFunction' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/SimpleFunction.php', 'WPML\\Core\\Twig_SimpleTest' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/SimpleTest.php', 'WPML\\Core\\Twig_Source' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Source.php', 'WPML\\Core\\Twig_SourceContextLoaderInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/SourceContextLoaderInterface.php', 'WPML\\Core\\Twig_Template' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Template.php', 'WPML\\Core\\Twig_TemplateInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TemplateInterface.php', 'WPML\\Core\\Twig_TemplateWrapper' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TemplateWrapper.php', 'WPML\\Core\\Twig_Test' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Test.php', 'WPML\\Core\\Twig_TestCallableInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TestCallableInterface.php', 'WPML\\Core\\Twig_TestInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TestInterface.php', 'WPML\\Core\\Twig_Test_Function' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Test/Function.php', 'WPML\\Core\\Twig_Test_IntegrationTestCase' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Test/IntegrationTestCase.php', 'WPML\\Core\\Twig_Test_Method' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Test/Method.php', 'WPML\\Core\\Twig_Test_Node' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Test/Node.php', 'WPML\\Core\\Twig_Test_NodeTestCase' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Test/NodeTestCase.php', 'WPML\\Core\\Twig_Token' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Token.php', 'WPML\\Core\\Twig_TokenParser' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser.php', 'WPML\\Core\\Twig_TokenParserBroker' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParserBroker.php', 'WPML\\Core\\Twig_TokenParserBrokerInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParserBrokerInterface.php', 'WPML\\Core\\Twig_TokenParserInterface' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParserInterface.php', 'WPML\\Core\\Twig_TokenParser_AutoEscape' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/AutoEscape.php', 'WPML\\Core\\Twig_TokenParser_Block' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Block.php', 'WPML\\Core\\Twig_TokenParser_Deprecated' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Deprecated.php', 'WPML\\Core\\Twig_TokenParser_Do' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Do.php', 'WPML\\Core\\Twig_TokenParser_Embed' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Embed.php', 'WPML\\Core\\Twig_TokenParser_Extends' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Extends.php', 'WPML\\Core\\Twig_TokenParser_Filter' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Filter.php', 'WPML\\Core\\Twig_TokenParser_Flush' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Flush.php', 'WPML\\Core\\Twig_TokenParser_For' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/For.php', 'WPML\\Core\\Twig_TokenParser_From' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/From.php', 'WPML\\Core\\Twig_TokenParser_If' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/If.php', 'WPML\\Core\\Twig_TokenParser_Import' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Import.php', 'WPML\\Core\\Twig_TokenParser_Include' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Include.php', 'WPML\\Core\\Twig_TokenParser_Macro' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Macro.php', 'WPML\\Core\\Twig_TokenParser_Sandbox' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Sandbox.php', 'WPML\\Core\\Twig_TokenParser_Set' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Set.php', 'WPML\\Core\\Twig_TokenParser_Spaceless' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Spaceless.php', 'WPML\\Core\\Twig_TokenParser_Use' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/Use.php', 'WPML\\Core\\Twig_TokenParser_With' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenParser/With.php', 'WPML\\Core\\Twig_TokenStream' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/TokenStream.php', 'WPML\\Core\\Twig_Util_DeprecationCollector' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Util/DeprecationCollector.php', 'WPML\\Core\\Twig_Util_TemplateDirIterator' => __DIR__ . '/../..' . '/lib/twig/lib/Twig/Util/TemplateDirIterator.php', 'WPML\\Core\\WP\\App\\Resources' => __DIR__ . '/../..' . '/classes/utilities/Resources.php', 'WPML\\DatabaseQueries\\TranslatedPosts' => __DIR__ . '/../..' . '/classes/database-queries/translated-posts.php', 'WPML\\DefaultCapabilities' => __DIR__ . '/../..' . '/classes/roles/DefaultCapabilities.php', 'WPML\\DocPage' => __DIR__ . '/..' . '/wpml/core-api/core/DocPage.php', 'WPML\\Element\\API\\Entity\\LanguageMapping' => __DIR__ . '/..' . '/wpml/core-api/core/Entity/LanguageMapping.php', 'WPML\\Element\\API\\IfOriginalPost' => __DIR__ . '/..' . '/wpml/core-api/core/IfOriginalPost.php', 'WPML\\Element\\API\\Languages' => __DIR__ . '/..' . '/wpml/core-api/core/Languages.php', 'WPML\\Element\\API\\Post' => __DIR__ . '/..' . '/wpml/core-api/core/Post.php', 'WPML\\Element\\API\\PostTranslations' => __DIR__ . '/..' . '/wpml/core-api/core/PostTranslations.php', 'WPML\\Element\\API\\Translations' => __DIR__ . '/..' . '/wpml/core-api/core/Translations.php', 'WPML\\Element\\API\\TranslationsRepository' => __DIR__ . '/..' . '/wpml/core-api/core/TranslationsRepository.php', 'WPML\\FP\\Applicative' => __DIR__ . '/..' . '/wpml/fp/core/Functor/Applicative.php', 'WPML\\FP\\Cast' => __DIR__ . '/..' . '/wpml/fp/core/Cast.php', 'WPML\\FP\\ConstApplicative' => __DIR__ . '/..' . '/wpml/fp/core/Functor/ConstApplicative.php', 'WPML\\FP\\Curryable' => __DIR__ . '/..' . '/wpml/fp/core/traits/Curryable.php', 'WPML\\FP\\Debug' => __DIR__ . '/..' . '/wpml/fp/core/Debug.php', 'WPML\\FP\\Either' => __DIR__ . '/..' . '/wpml/fp/core/Either.php', 'WPML\\FP\\FP' => __DIR__ . '/..' . '/wpml/fp/core/FP.php', 'WPML\\FP\\Fns' => __DIR__ . '/..' . '/wpml/fp/core/Fns.php', 'WPML\\FP\\Functor\\ConstFunctor' => __DIR__ . '/..' . '/wpml/fp/core/Functor/ConstFunctor.php', 'WPML\\FP\\Functor\\Functor' => __DIR__ . '/..' . '/wpml/fp/core/Functor/Functor.php', 'WPML\\FP\\Functor\\IdentityFunctor' => __DIR__ . '/..' . '/wpml/fp/core/Functor/IdentityFunctor.php', 'WPML\\FP\\Functor\\Pointed' => __DIR__ . '/..' . '/wpml/fp/core/Functor/Pointed.php', 'WPML\\FP\\Invoker\\BeforeAfter' => __DIR__ . '/..' . '/wpml/fp/core/Invoker/BeforeAfter.php', 'WPML\\FP\\Invoker\\_Invoker' => __DIR__ . '/..' . '/wpml/fp/core/Invoker/Invoker.php', 'WPML\\FP\\Json' => __DIR__ . '/..' . '/wpml/fp/core/Json.php', 'WPML\\FP\\Just' => __DIR__ . '/..' . '/wpml/fp/core/Maybe.php', 'WPML\\FP\\Left' => __DIR__ . '/..' . '/wpml/fp/core/Either.php', 'WPML\\FP\\Lens' => __DIR__ . '/..' . '/wpml/fp/core/Lens.php', 'WPML\\FP\\Logic' => __DIR__ . '/..' . '/wpml/fp/core/Logic.php', 'WPML\\FP\\Lst' => __DIR__ . '/..' . '/wpml/fp/core/Lst.php', 'WPML\\FP\\Math' => __DIR__ . '/..' . '/wpml/fp/core/Math.php', 'WPML\\FP\\Maybe' => __DIR__ . '/..' . '/wpml/fp/core/Maybe.php', 'WPML\\FP\\Monoid\\All' => __DIR__ . '/..' . '/wpml/fp/core/monoid/All.php', 'WPML\\FP\\Monoid\\Any' => __DIR__ . '/..' . '/wpml/fp/core/monoid/Any.php', 'WPML\\FP\\Monoid\\Monoid' => __DIR__ . '/..' . '/wpml/fp/core/monoid/Monoid.php', 'WPML\\FP\\Monoid\\Str' => __DIR__ . '/..' . '/wpml/fp/core/monoid/Str.php', 'WPML\\FP\\Monoid\\Sum' => __DIR__ . '/..' . '/wpml/fp/core/monoid/Sum.php', 'WPML\\FP\\Nothing' => __DIR__ . '/..' . '/wpml/fp/core/Maybe.php', 'WPML\\FP\\Obj' => __DIR__ . '/..' . '/wpml/fp/core/Obj.php', 'WPML\\FP\\Promise' => __DIR__ . '/..' . '/wpml/fp/core/Promise.php', 'WPML\\FP\\Relation' => __DIR__ . '/..' . '/wpml/fp/core/Relation.php', 'WPML\\FP\\Right' => __DIR__ . '/..' . '/wpml/fp/core/Either.php', 'WPML\\FP\\Str' => __DIR__ . '/..' . '/wpml/fp/core/Strings.php', 'WPML\\FP\\System\\System' => __DIR__ . '/..' . '/wpml/fp/core/SystemClass.php', 'WPML\\FP\\System\\_Filter' => __DIR__ . '/..' . '/wpml/fp/core/Filter.php', 'WPML\\FP\\System\\_Validator' => __DIR__ . '/..' . '/wpml/fp/core/Validator.php', 'WPML\\FP\\Type' => __DIR__ . '/..' . '/wpml/fp/core/Type.php', 'WPML\\FP\\Undefined' => __DIR__ . '/..' . '/wpml/fp/core/Undefined.php', 'WPML\\FP\\Wrapper' => __DIR__ . '/..' . '/wpml/fp/core/Wrapper.php', 'WPML\\FullSiteEditing\\BlockTemplates' => __DIR__ . '/../..' . '/classes/full-site-editing/BlockTemplates.php', 'WPML\\ICLToATEMigration\\Data' => __DIR__ . '/../..' . '/classes/icl-to-ate-migration/Data.php', 'WPML\\ICLToATEMigration\\Endpoints\\AuthenticateICL' => __DIR__ . '/../..' . '/classes/icl-to-ate-migration/endpoints/AuthenticateICL.php', 'WPML\\ICLToATEMigration\\Endpoints\\DeactivateICL' => __DIR__ . '/../..' . '/classes/icl-to-ate-migration/endpoints/DeactivateICL.php', 'WPML\\ICLToATEMigration\\Endpoints\\TranslationMemory\\CheckMigrationStatus' => __DIR__ . '/../..' . '/classes/icl-to-ate-migration/endpoints/TranslationMemory/CheckMigrationStatus.php', 'WPML\\ICLToATEMigration\\Endpoints\\TranslationMemory\\StartMigration' => __DIR__ . '/../..' . '/classes/icl-to-ate-migration/endpoints/TranslationMemory/StartMigration.php', 'WPML\\ICLToATEMigration\\Endpoints\\Translators\\GetFromICL' => __DIR__ . '/../..' . '/classes/icl-to-ate-migration/endpoints/Translators/GetFromICL.php', 'WPML\\ICLToATEMigration\\Endpoints\\Translators\\GetFromICLResponseMapper' => __DIR__ . '/../..' . '/classes/icl-to-ate-migration/endpoints/Translators/GetFromICLResponseMapper.php', 'WPML\\ICLToATEMigration\\Endpoints\\Translators\\Save' => __DIR__ . '/../..' . '/classes/icl-to-ate-migration/endpoints/Translators/Save.php', 'WPML\\ICLToATEMigration\\ICLStatus' => __DIR__ . '/../..' . '/classes/icl-to-ate-migration/ICLStatus.php', 'WPML\\ICLToATEMigration\\Loader' => __DIR__ . '/../..' . '/classes/icl-to-ate-migration/Loader.php', 'WPML\\Installer\\AddSiteUrl' => __DIR__ . '/../..' . '/classes/Installer/AddSiteUrl.php', 'WPML\\Installer\\DisableRegisterNow' => __DIR__ . '/../..' . '/classes/Installer/DisableRegisterNow.php', 'WPML\\LIB\\WP\\App\\Resources' => __DIR__ . '/..' . '/wpml/wp/classes/Resources.php', 'WPML\\LIB\\WP\\Attachment' => __DIR__ . '/..' . '/wpml/wp/classes/Attachment.php', 'WPML\\LIB\\WP\\Cache' => __DIR__ . '/..' . '/wpml/wp/classes/Cache.php', 'WPML\\LIB\\WP\\Gutenberg' => __DIR__ . '/..' . '/wpml/wp/classes/Gutenberg.php', 'WPML\\LIB\\WP\\Hooks' => __DIR__ . '/..' . '/wpml/wp/classes/Hooks.php', 'WPML\\LIB\\WP\\Http' => __DIR__ . '/..' . '/wpml/wp/classes/Http.php', 'WPML\\LIB\\WP\\Nonce' => __DIR__ . '/..' . '/wpml/wp/classes/Nonce.php', 'WPML\\LIB\\WP\\Option' => __DIR__ . '/..' . '/wpml/wp/classes/Option.php', 'WPML\\LIB\\WP\\Post' => __DIR__ . '/..' . '/wpml/wp/classes/Post.php', 'WPML\\LIB\\WP\\PostType' => __DIR__ . '/..' . '/wpml/wp/classes/PostType.php', 'WPML\\LIB\\WP\\Roles' => __DIR__ . '/..' . '/wpml/wp/classes/Roles.php', 'WPML\\LIB\\WP\\Transient' => __DIR__ . '/..' . '/wpml/wp/classes/Transient.php', 'WPML\\LIB\\WP\\Url' => __DIR__ . '/..' . '/wpml/wp/classes/Url.php', 'WPML\\LIB\\WP\\User' => __DIR__ . '/..' . '/wpml/wp/classes/User.php', 'WPML\\LIB\\WP\\WPDB' => __DIR__ . '/..' . '/wpml/wp/classes/WPDB.php', 'WPML\\LIB\\WP\\WordPress' => __DIR__ . '/..' . '/wpml/wp/classes/WP.php', 'WPML\\LanguageSwitcher\\AjaxNavigation\\Hooks' => __DIR__ . '/../..' . '/classes/language-switcher/AjaxNavigation/Hooks.php', 'WPML\\LanguageSwitcher\\LsTemplateDomainUpdater' => __DIR__ . '/../..' . '/classes/language-switcher/LsTemplateDomainUpdater.php', 'WPML\\Language\\Detection\\Ajax' => __DIR__ . '/../..' . '/classes/language/Detection/Ajax.php', 'WPML\\Language\\Detection\\Backend' => __DIR__ . '/../..' . '/classes/language/Detection/Backend.php', 'WPML\\Language\\Detection\\CookieLanguage' => __DIR__ . '/../..' . '/classes/language/Detection/CookieLanguage.php', 'WPML\\Language\\Detection\\Frontend' => __DIR__ . '/../..' . '/classes/language/Detection/Frontend.php', 'WPML\\Language\\Detection\\Rest' => __DIR__ . '/../..' . '/classes/language/Detection/Rest.php', 'WPML\\Languages\\UI' => __DIR__ . '/../..' . '/classes/languages/UI.php', 'WPML\\Legacy\\Translation\\Save\\SyncParentPost\\SyncParentPost' => __DIR__ . '/../..' . '/inc/translation-jobs/helpers/save-translation/SyncParentPost.php', 'WPML\\MediaTranslation\\AddMediaDataToTranslationPackage' => __DIR__ . '/../..' . '/classes/media-translation/AddMediaDataToTranslationPackage.php', 'WPML\\MediaTranslation\\AddMediaDataToTranslationPackageFactory' => __DIR__ . '/../..' . '/classes/media-translation/AddMediaDataToTranslationPackageFactory.php', 'WPML\\MediaTranslation\\MediaAttachmentByUrl' => __DIR__ . '/../..' . '/classes/media-translation/MediaAttachmentByUrl.php', 'WPML\\MediaTranslation\\MediaAttachmentByUrlFactory' => __DIR__ . '/../..' . '/classes/media-translation/MediaAttachmentByUrlFactory.php', 'WPML\\MediaTranslation\\MediaCaption' => __DIR__ . '/../..' . '/classes/media-translation/MediaCaption.php', 'WPML\\MediaTranslation\\MediaCaptionTagsParse' => __DIR__ . '/../..' . '/classes/media-translation/MediaCaptionTagsParse.php', 'WPML\\MediaTranslation\\MediaImgParse' => __DIR__ . '/../..' . '/classes/media-translation/MediaImgParse.php', 'WPML\\MediaTranslation\\MediaSettings' => __DIR__ . '/../..' . '/classes/media-translation/MediaSettings.php', 'WPML\\MediaTranslation\\MediaTranslationEditorLayout' => __DIR__ . '/../..' . '/classes/media-translation/MediaTranslationEditorLayout.php', 'WPML\\MediaTranslation\\MediaTranslationEditorLayoutFactory' => __DIR__ . '/../..' . '/classes/media-translation/MediaTranslationEditorLayoutFactory.php', 'WPML\\MediaTranslation\\MediaTranslationStatus' => __DIR__ . '/../..' . '/classes/media-translation/MediaTranslationStatus.php', 'WPML\\MediaTranslation\\MediaTranslationStatusFactory' => __DIR__ . '/../..' . '/classes/media-translation/MediaTranslationStatusFactory.php', 'WPML\\MediaTranslation\\PostWithMediaFiles' => __DIR__ . '/../..' . '/classes/media-translation/PostWithMediaFiles.php', 'WPML\\MediaTranslation\\PostWithMediaFilesFactory' => __DIR__ . '/../..' . '/classes/media-translation/PostWithMediaFilesFactory.php', 'WPML\\Media\\Duplication\\AbstractFactory' => __DIR__ . '/../..' . '/classes/media/duplication/AbstractFactory.php', 'WPML\\Media\\Duplication\\Hooks' => __DIR__ . '/../..' . '/classes/media/duplication/Hooks.php', 'WPML\\Media\\Duplication\\HooksFactory' => __DIR__ . '/../..' . '/classes/media/duplication/HooksFactory.php', 'WPML\\Media\\FrontendHooks' => __DIR__ . '/../..' . '/classes/media/FrontendHooks.php', 'WPML\\Media\\Loader' => __DIR__ . '/../..' . '/classes/media/Loader.php', 'WPML\\Media\\Option' => __DIR__ . '/..' . '/wpml/core-api/core/media/Option.php', 'WPML\\Media\\Setup\\Endpoint\\PerformSetup' => __DIR__ . '/../..' . '/classes/media/setup/endpoints/PerformSetup.php', 'WPML\\Media\\Setup\\Endpoint\\PrepareSetup' => __DIR__ . '/../..' . '/classes/media/setup/endpoints/PrepareSetup.php', 'WPML\\Media\\Translate\\Endpoint\\DuplicateFeaturedImages' => __DIR__ . '/../..' . '/classes/media/translate/endpoints/DuplicateFeaturedImages.php', 'WPML\\Media\\Translate\\Endpoint\\FinishMediaTranslation' => __DIR__ . '/../..' . '/classes/media/translate/endpoints/FinishMediaTranslation.php', 'WPML\\Media\\Translate\\Endpoint\\PrepareForTranslation' => __DIR__ . '/../..' . '/classes/media/translate/endpoints/PrepareForTranslation.php', 'WPML\\Media\\Translate\\Endpoint\\TranslateExistingMedia' => __DIR__ . '/../..' . '/classes/media/translate/endpoints/TranslateExistingMedia.php', 'WPML\\Notices\\DismissNotices' => __DIR__ . '/../..' . '/classes/notices/DismissNotices.php', 'WPML\\Notices\\ExportImport\\Notice' => __DIR__ . '/../..' . '/classes/notices/export-import/Notice.php', 'WPML\\Options\\Reset' => __DIR__ . '/../..' . '/classes/options/Reset.php', 'WPML\\Plugins' => __DIR__ . '/../..' . '/classes/plugins/Plugins.php', 'WPML\\PostTranslation\\SpecialPage\\Hooks' => __DIR__ . '/../..' . '/classes/post-translation/SpecialPage/Hooks.php', 'WPML\\Posts\\CountPerPostType' => __DIR__ . '/../..' . '/classes/post-translation/endpoints/CountPerPostType.php', 'WPML\\Posts\\DeleteTranslatedContentOfLanguages' => __DIR__ . '/../..' . '/classes/post-translation/endpoints/DeleteTranslatedContentOfLanguages.php', 'WPML\\Posts\\UntranslatedCount' => __DIR__ . '/../..' . '/classes/post-translation/endpoints/UntranslatedCount.php', 'WPML\\REST\\XMLConfig\\Custom\\Actions' => __DIR__ . '/../..' . '/classes/API/REST/CustomXMLConfig/Actions.php', 'WPML\\REST\\XMLConfig\\Custom\\Factory' => __DIR__ . '/../..' . '/classes/API/REST/CustomXMLConfig/Factory.php', 'WPML\\Records\\Translations' => __DIR__ . '/..' . '/wpml/core-api/core/Records/Translations.php', 'WPML\\Requirements\\WordPress' => __DIR__ . '/../..' . '/classes/requirements/WordPress.php', 'WPML\\Rest\\Adaptor' => __DIR__ . '/../..' . '/classes/API/REST/Adaptor.php', 'WPML\\Rest\\Base' => __DIR__ . '/../..' . '/classes/API/REST/Base.php', 'WPML\\Rest\\ITarget' => __DIR__ . '/../..' . '/classes/API/REST/Target.php', 'WPML\\Roles' => __DIR__ . '/../..' . '/classes/roles/Roles.php', 'WPML\\Settings\\LanguageNegotiation' => __DIR__ . '/..' . '/wpml/core-api/core/settings/LanguageNegotiation.php', 'WPML\\Settings\\PostType\\Automatic' => __DIR__ . '/..' . '/wpml/core-api/core/settings/Automatic.php', 'WPML\\Settings\\PostTypesUI' => __DIR__ . '/../..' . '/classes/menu-elements/PostTypesUI.php', 'WPML\\Settings\\UI' => __DIR__ . '/../..' . '/classes/settings/UI.php', 'WPML\\Setup\\DisableNotices' => __DIR__ . '/../..' . '/classes/setup/DisableNotices.php', 'WPML\\Setup\\Endpoint\\AddLanguages' => __DIR__ . '/../..' . '/classes/setup/endpoints/AddLanguages.php', 'WPML\\Setup\\Endpoint\\AddressStep' => __DIR__ . '/../..' . '/classes/setup/endpoints/AddressStep.php', 'WPML\\Setup\\Endpoint\\CheckTMAllowed' => __DIR__ . '/../..' . '/classes/setup/endpoints/CheckTMAllowed.php', 'WPML\\Setup\\Endpoint\\CurrentStep' => __DIR__ . '/../..' . '/classes/setup/endpoints/CurrentStep.php', 'WPML\\Setup\\Endpoint\\FinishStep' => __DIR__ . '/../..' . '/classes/setup/endpoints/FinishStep.php', 'WPML\\Setup\\Endpoint\\LicenseStep' => __DIR__ . '/../..' . '/classes/setup/endpoints/LicenseStep.php', 'WPML\\Setup\\Endpoint\\RecommendedPlugins' => __DIR__ . '/../..' . '/classes/setup/endpoints/RecommendedPlugins.php', 'WPML\\Setup\\Endpoint\\SetOriginalLanguage' => __DIR__ . '/../..' . '/classes/setup/endpoints/SetOriginalLanguage.php', 'WPML\\Setup\\Endpoint\\SetSecondaryLanguages' => __DIR__ . '/../..' . '/classes/setup/endpoints/SetSecondaryLanguages.php', 'WPML\\Setup\\Endpoint\\SetSupport' => __DIR__ . '/../..' . '/classes/setup/endpoints/SetSupport.php', 'WPML\\Setup\\Endpoint\\TranslationServices' => __DIR__ . '/../..' . '/classes/setup/endpoints/TranslationServices.php', 'WPML\\Setup\\Endpoint\\TranslationStep' => __DIR__ . '/../..' . '/classes/setup/endpoints/TranslationStep.php', 'WPML\\Setup\\Initializer' => __DIR__ . '/../..' . '/classes/setup/Initializer.php', 'WPML\\Setup\\Option' => __DIR__ . '/..' . '/wpml/core-api/core/setup/Option.php', 'WPML\\SuperGlobals\\Server' => __DIR__ . '/../..' . '/classes/super-globals/Server.php', 'WPML\\Support\\ATE\\Hooks' => __DIR__ . '/../..' . '/classes/support/ATE/Hooks.php', 'WPML\\Support\\ATE\\View' => __DIR__ . '/../..' . '/classes/support/ATE/View.php', 'WPML\\Support\\ATE\\ViewFactory' => __DIR__ . '/../..' . '/classes/support/ATE/ViewFactory.php', 'WPML\\TM\\API\\ATE' => __DIR__ . '/../..' . '/API/ATE.php', 'WPML\\TM\\API\\ATE\\Account' => __DIR__ . '/../..' . '/API/ATE/Account.php', 'WPML\\TM\\API\\ATE\\CachedLanguageMappings' => __DIR__ . '/../..' . '/API/ATE/CachedLanguageMappings.php', 'WPML\\TM\\API\\ATE\\LanguageMappings' => __DIR__ . '/../..' . '/API/ATE/LanguageMappings.php', 'WPML\\TM\\API\\Basket' => __DIR__ . '/../..' . '/API/Basket.php', 'WPML\\TM\\API\\Batch' => __DIR__ . '/../..' . '/API/Batch.php', 'WPML\\TM\\API\\Job\\Map' => __DIR__ . '/../..' . '/API/Job/Map.php', 'WPML\\TM\\API\\Jobs' => __DIR__ . '/../..' . '/API/Jobs.php', 'WPML\\TM\\API\\TranslationServices' => __DIR__ . '/../..' . '/API/TranslationServices.php', 'WPML\\TM\\API\\Translators' => __DIR__ . '/../..' . '/API/Translators.php', 'WPML\\TM\\ATE\\API\\CacheStorage\\StaticVariable' => __DIR__ . '/../..' . '/classes/ATE/API/CacheStorage/StaticVariable.php', 'WPML\\TM\\ATE\\API\\CacheStorage\\Storage' => __DIR__ . '/../..' . '/classes/ATE/API/CacheStorage/Storage.php', 'WPML\\TM\\ATE\\API\\CacheStorage\\Transient' => __DIR__ . '/../..' . '/classes/ATE/API/CacheStorage/Transient.php', 'WPML\\TM\\ATE\\API\\CachedATEAPI' => __DIR__ . '/../..' . '/classes/ATE/API/CachedATEAPI.php', 'WPML\\TM\\ATE\\API\\ErrorMessages' => __DIR__ . '/../..' . '/classes/ATE/API/ErrorMessages.php', 'WPML\\TM\\ATE\\API\\FingerprintGenerator' => __DIR__ . '/../..' . '/classes/ATE/API/FingerprintGenerator.php', 'WPML\\TM\\ATE\\API\\RequestException' => __DIR__ . '/../..' . '/classes/ATE/API/RequestException.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\ActivateLanguage' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/ActivateLanguage.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\AutoTranslate' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/AutoTranslate.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\CancelJobs' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/CancelJobs.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\CheckLanguageSupport' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/CheckLanguageSupport.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\CountJobsInProgress' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/CountJobsInProgress.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\EnableATE' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/EnableATE.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\GetATEJobsToSync' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/GetATEJobsToSync.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\GetCredits' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/GetCredits.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\GetNumberOfPosts' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/GetNumberOfPosts.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\Languages' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/Languages.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\ResumeAll' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/ResumeAll.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\SetForPostType' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/SetForPostType.php', 'WPML\\TM\\ATE\\AutoTranslate\\Endpoint\\SyncLock' => __DIR__ . '/../..' . '/classes/ATE/auto-translate/endpoints/SyncLock.php', 'WPML\\TM\\ATE\\ClonedSites\\ApiCommunication' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/ApiCommunication.php', 'WPML\\TM\\ATE\\ClonedSites\\Endpoints\\Copy' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/Endpoints/Copy.php', 'WPML\\TM\\ATE\\ClonedSites\\Endpoints\\CopyWithCredits' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/Endpoints/CopyWithCredits.php', 'WPML\\TM\\ATE\\ClonedSites\\Endpoints\\GetCredits' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/Endpoints/GetCredits.php', 'WPML\\TM\\ATE\\ClonedSites\\Endpoints\\GetCredits\\AMSAPIFactory' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/Endpoints/GetCredits/AMSAPIFactory.php', 'WPML\\TM\\ATE\\ClonedSites\\Endpoints\\Move' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/Endpoints/Move.php', 'WPML\\TM\\ATE\\ClonedSites\\FingerprintGeneratorForOriginalSite' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/FingerprintGeneratorForOriginalSite.php', 'WPML\\TM\\ATE\\ClonedSites\\Loader' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/Loader.php', 'WPML\\TM\\ATE\\ClonedSites\\Lock' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/Lock.php', 'WPML\\TM\\ATE\\ClonedSites\\Report' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/Report.php', 'WPML\\TM\\ATE\\ClonedSites\\SecondaryDomains' => __DIR__ . '/../..' . '/classes/ATE/API/ClonedSites/SecondaryDomains.php', 'WPML\\TM\\ATE\\Download\\Consumer' => __DIR__ . '/../..' . '/classes/ATE/Download/Consumer.php', 'WPML\\TM\\ATE\\Download\\Job' => __DIR__ . '/../..' . '/classes/ATE/Download/Job.php', 'WPML\\TM\\ATE\\Download\\Process' => __DIR__ . '/../..' . '/classes/ATE/Download/Process.php', 'WPML\\TM\\ATE\\Factories\\Proxy' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-ate-proxy-factory.php', 'WPML\\TM\\ATE\\Hooks\\JobActions' => __DIR__ . '/../..' . '/classes/ATE/Hooks/JobActions.php', 'WPML\\TM\\ATE\\Hooks\\JobActionsFactory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/JobActionsFactory.php', 'WPML\\TM\\ATE\\Hooks\\LanguageMappingCache' => __DIR__ . '/../..' . '/classes/ATE/Hooks/LanguageMappingCache.php', 'WPML\\TM\\ATE\\Hooks\\ReturnedJobActions' => __DIR__ . '/../..' . '/classes/ATE/Hooks/ReturnedJobActions.php', 'WPML\\TM\\ATE\\Hooks\\ReturnedJobActionsFactory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/ReturnedJobActionsFactory.php', 'WPML\\TM\\ATE\\JobRecord' => __DIR__ . '/../..' . '/classes/ATE/JobRecord.php', 'WPML\\TM\\ATE\\JobRecords' => __DIR__ . '/../..' . '/classes/ATE/JobRecords.php', 'WPML\\TM\\ATE\\Jobs' => __DIR__ . '/../..' . '/classes/ATE/Jobs.php', 'WPML\\TM\\ATE\\LanguageMapping\\InvalidateCacheEndpoint' => __DIR__ . '/../..' . '/classes/ATE/LanguageMapping/InvalidateCacheEndpoint.php', 'WPML\\TM\\ATE\\Loader' => __DIR__ . '/../..' . '/classes/ATE/Loader.php', 'WPML\\TM\\ATE\\Log\\Entry' => __DIR__ . '/../..' . '/classes/ATE/Log/Entry.php', 'WPML\\TM\\ATE\\Log\\EventsTypes' => __DIR__ . '/../..' . '/classes/ATE/Log/EventsTypes.php', 'WPML\\TM\\ATE\\Log\\Hooks' => __DIR__ . '/../..' . '/classes/ATE/Log/Hooks.php', 'WPML\\TM\\ATE\\Log\\Storage' => __DIR__ . '/../..' . '/classes/ATE/Log/Storage.php', 'WPML\\TM\\ATE\\Log\\View' => __DIR__ . '/../..' . '/classes/ATE/Log/View.php', 'WPML\\TM\\ATE\\Log\\ViewFactory' => __DIR__ . '/../..' . '/classes/ATE/Log/ViewFactory.php', 'WPML\\TM\\ATE\\NoCreditPopup' => __DIR__ . '/../..' . '/classes/ATE/NoCreditPopup.php', 'WPML\\TM\\ATE\\Proxy' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-ate-proxy.php', 'WPML\\TM\\ATE\\REST\\Download' => __DIR__ . '/../..' . '/classes/ATE/REST/Download.php', 'WPML\\TM\\ATE\\REST\\FixJob' => __DIR__ . '/../..' . '/classes/ATE/REST/FixJob.php', 'WPML\\TM\\ATE\\REST\\PublicReceive' => __DIR__ . '/../..' . '/classes/ATE/REST/PublicReceive.php', 'WPML\\TM\\ATE\\REST\\Retry' => __DIR__ . '/../..' . '/classes/ATE/REST/Retry.php', 'WPML\\TM\\ATE\\REST\\Sync' => __DIR__ . '/../..' . '/classes/ATE/REST/Sync.php', 'WPML\\TM\\ATE\\Retranslation\\Endpoint' => __DIR__ . '/../..' . '/classes/ATE/Retranslation/Endpoint.php', 'WPML\\TM\\ATE\\Retranslation\\JobsCollector' => __DIR__ . '/../..' . '/classes/ATE/Retranslation/JobsCollector.php', 'WPML\\TM\\ATE\\Retranslation\\JobsCollector\\ATEResponse' => __DIR__ . '/../..' . '/classes/ATE/Retranslation/JobsCollector/ATEResponse.php', 'WPML\\TM\\ATE\\Retranslation\\RetranslationPreparer' => __DIR__ . '/../..' . '/classes/ATE/Retranslation/RetranslationPreparer.php', 'WPML\\TM\\ATE\\Retranslation\\Scheduler' => __DIR__ . '/../..' . '/classes/ATE/Retranslation/Scheduler.php', 'WPML\\TM\\ATE\\Retranslation\\SinglePageBatchHandler' => __DIR__ . '/../..' . '/classes/ATE/Retranslation/SinglePageBatchHandler.php', 'WPML\\TM\\ATE\\Retry\\Process' => __DIR__ . '/../..' . '/classes/ATE/Retry/Process.php', 'WPML\\TM\\ATE\\Retry\\Result' => __DIR__ . '/../..' . '/classes/ATE/Retry/Result.php', 'WPML\\TM\\ATE\\Retry\\Trigger' => __DIR__ . '/../..' . '/classes/ATE/Retry/Trigger.php', 'WPML\\TM\\ATE\\ReturnedJobsQueue' => __DIR__ . '/../..' . '/classes/ATE/ReturnedJobsQueue.php', 'WPML\\TM\\ATE\\Review\\AcceptTranslation' => __DIR__ . '/../..' . '/classes/ATE/Review/AcceptTranslation.php', 'WPML\\TM\\ATE\\Review\\ApplyJob' => __DIR__ . '/../..' . '/classes/ATE/Review/ApplyJob.php', 'WPML\\TM\\ATE\\Review\\ApproveTranslations' => __DIR__ . '/../..' . '/classes/ATE/Review/ApproveTranslations.php', 'WPML\\TM\\ATE\\Review\\Cancel' => __DIR__ . '/../..' . '/classes/ATE/Review/Cancel.php', 'WPML\\TM\\ATE\\Review\\NextTranslationLink' => __DIR__ . '/../..' . '/classes/ATE/Review/NextTranslationLink.php', 'WPML\\TM\\ATE\\Review\\NonPublicCPTPreview' => __DIR__ . '/../..' . '/classes/ATE/Review/NonPublicCPTPreview.php', 'WPML\\TM\\ATE\\Review\\PackageJob' => __DIR__ . '/../..' . '/classes/ATE/Review/PackageJob.php', 'WPML\\TM\\ATE\\Review\\PreviewLink' => __DIR__ . '/../..' . '/classes/ATE/Review/PreviewLink.php', 'WPML\\TM\\ATE\\Review\\ReviewCompletedNotice' => __DIR__ . '/../..' . '/classes/ATE/Review/ReviewCompletedNotice.php', 'WPML\\TM\\ATE\\Review\\ReviewStatus' => __DIR__ . '/../..' . '/classes/ATE/Review/ReviewStatus.php', 'WPML\\TM\\ATE\\Review\\ReviewTranslation' => __DIR__ . '/../..' . '/classes/ATE/Review/ReviewTranslation.php', 'WPML\\TM\\ATE\\Review\\StatusIcons' => __DIR__ . '/../..' . '/classes/ATE/Review/StatusIcons.php', 'WPML\\TM\\ATE\\Review\\UpdateTranslation' => __DIR__ . '/../..' . '/classes/ATE/Review/UpdateTranslation.php', 'WPML\\TM\\ATE\\Sitekey\\Endpoint' => __DIR__ . '/../..' . '/classes/ATE/sitekey/Endpoint.php', 'WPML\\TM\\ATE\\Sitekey\\Sync' => __DIR__ . '/../..' . '/classes/ATE/sitekey/Sync.php', 'WPML\\TM\\ATE\\StatusBar' => __DIR__ . '/../..' . '/classes/ATE/StatusBar.php', 'WPML\\TM\\ATE\\StatusIcons' => __DIR__ . '/../..' . '/classes/ATE/StatusIcons.php', 'WPML\\TM\\ATE\\SyncLock' => __DIR__ . '/../..' . '/classes/ATE/SyncLock.php', 'WPML\\TM\\ATE\\Sync\\Arguments' => __DIR__ . '/../..' . '/classes/ATE/Sync/Arguments.php', 'WPML\\TM\\ATE\\Sync\\Process' => __DIR__ . '/../..' . '/classes/ATE/Sync/Process.php', 'WPML\\TM\\ATE\\Sync\\Result' => __DIR__ . '/../..' . '/classes/ATE/Sync/Result.php', 'WPML\\TM\\ATE\\TranslateEverything' => __DIR__ . '/../..' . '/classes/ATE/TranslateEverything.php', 'WPML\\TM\\ATE\\TranslateEverything\\Pause\\PauseAndResume' => __DIR__ . '/../..' . '/classes/ATE/TranslateEverything/Pause/PauseAndResume.php', 'WPML\\TM\\ATE\\TranslateEverything\\Pause\\UserAuthorisation' => __DIR__ . '/../..' . '/classes/ATE/TranslateEverything/Pause/UserAuthorisation.php', 'WPML\\TM\\ATE\\TranslateEverything\\Pause\\View' => __DIR__ . '/../..' . '/classes/ATE/TranslateEverything/Pause/View.php', 'WPML\\TM\\ATE\\TranslateEverything\\TranslatableData\\Calculate' => __DIR__ . '/../..' . '/classes/ATE/TranslateEverything/TranslatableData/Calculate.php', 'WPML\\TM\\ATE\\TranslateEverything\\TranslatableData\\DataPreSetup' => __DIR__ . '/../..' . '/classes/ATE/TranslateEverything/TranslatableData/DataPreSetup.php', 'WPML\\TM\\ATE\\TranslateEverything\\TranslatableData\\Stack' => __DIR__ . '/../..' . '/classes/ATE/TranslateEverything/TranslatableData/Stack.php', 'WPML\\TM\\ATE\\TranslateEverything\\TranslatableData\\View' => __DIR__ . '/../..' . '/classes/ATE/TranslateEverything/TranslatableData/View.php', 'WPML\\TM\\ATE\\TranslateEverything\\UntranslatedPosts' => __DIR__ . '/../..' . '/classes/ATE/TranslateEverything/UntranslatedPosts.php', 'WPML\\TM\\AdminBar\\Hooks' => __DIR__ . '/../..' . '/classes/admin-bar/Hooks.php', 'WPML\\TM\\AutomaticTranslation\\Actions\\Actions' => __DIR__ . '/../..' . '/classes/automatic-translation/Actions.php', 'WPML\\TM\\AutomaticTranslation\\Actions\\ActionsFactory' => __DIR__ . '/../..' . '/classes/automatic-translation/ActionsFactory.php', 'WPML\\TM\\Container\\Config' => __DIR__ . '/../..' . '/classes/container/class-config-tm.php', 'WPML\\TM\\Editor\\ATEDetailedErrorMessage' => __DIR__ . '/../..' . '/classes/editor/ATEDetailedErrorMessage.php', 'WPML\\TM\\Editor\\ATERetry' => __DIR__ . '/../..' . '/classes/editor/ATERetry.php', 'WPML\\TM\\Editor\\ClassicEditorActions' => __DIR__ . '/../..' . '/classes/editor/ClassicEditorActions.php', 'WPML\\TM\\Editor\\Editor' => __DIR__ . '/../..' . '/classes/editor/Editor.php', 'WPML\\TM\\Editor\\ManualJobCreationErrorNotice' => __DIR__ . '/../..' . '/classes/editor/ManualJobCreationErrorNotice.php', 'WPML\\TM\\Geolocalization' => __DIR__ . '/../..' . '/classes/Geolocalization.php', 'WPML\\TM\\Jobs\\Dispatch\\BatchBuilder' => __DIR__ . '/../..' . '/classes/translation-jobs/Dispatch/BatchBuilder.php', 'WPML\\TM\\Jobs\\Dispatch\\Elements' => __DIR__ . '/../..' . '/classes/translation-jobs/Dispatch/Elements.php', 'WPML\\TM\\Jobs\\Dispatch\\Messages' => __DIR__ . '/../..' . '/classes/translation-jobs/Dispatch/Messages.php', 'WPML\\TM\\Jobs\\Dispatch\\Packages' => __DIR__ . '/../..' . '/classes/translation-jobs/Dispatch/Packages.php', 'WPML\\TM\\Jobs\\Dispatch\\Posts' => __DIR__ . '/../..' . '/classes/translation-jobs/Dispatch/Posts.php', 'WPML\\TM\\Jobs\\Dispatch\\Strings' => __DIR__ . '/../..' . '/classes/translation-jobs/Dispatch/Strings.php', 'WPML\\TM\\Jobs\\Endpoint\\Resign' => __DIR__ . '/../..' . '/classes/jobs/endpoint/Resign.php', 'WPML\\TM\\Jobs\\ExtraFieldDataInEditor' => __DIR__ . '/../..' . '/classes/translation-jobs/ExtraFieldDataInEditor.php', 'WPML\\TM\\Jobs\\ExtraFieldDataInEditorFactory' => __DIR__ . '/../..' . '/classes/translation-jobs/ExtraFieldDataInEditorFactory.php', 'WPML\\TM\\Jobs\\FieldId' => __DIR__ . '/../..' . '/classes/translation-jobs/FieldId.php', 'WPML\\TM\\Jobs\\Loader' => __DIR__ . '/../..' . '/classes/jobs/Loader.php', 'WPML\\TM\\Jobs\\Manual' => __DIR__ . '/../..' . '/classes/jobs/Manual.php', 'WPML\\TM\\Jobs\\Query\\AbstractQuery' => __DIR__ . '/../..' . '/classes/jobs/query/AbstractQuery.php', 'WPML\\TM\\Jobs\\Query\\CompositeQuery' => __DIR__ . '/../..' . '/classes/jobs/query/CompositeQuery.php', 'WPML\\TM\\Jobs\\Query\\LimitQueryHelper' => __DIR__ . '/../..' . '/classes/jobs/query/LimitQueryHelper.php', 'WPML\\TM\\Jobs\\Query\\OrderQueryHelper' => __DIR__ . '/../..' . '/classes/jobs/query/OrderQueryHelper.php', 'WPML\\TM\\Jobs\\Query\\PackageQuery' => __DIR__ . '/../..' . '/classes/jobs/query/PackageQuery.php', 'WPML\\TM\\Jobs\\Query\\PostQuery' => __DIR__ . '/../..' . '/classes/jobs/query/PostQuery.php', 'WPML\\TM\\Jobs\\Query\\Query' => __DIR__ . '/../..' . '/classes/jobs/query/Query.php', 'WPML\\TM\\Jobs\\Query\\QueryBuilder' => __DIR__ . '/../..' . '/classes/jobs/query/QueryBuilder.php', 'WPML\\TM\\Jobs\\Query\\StringQuery' => __DIR__ . '/../..' . '/classes/jobs/query/StringQuery.php', 'WPML\\TM\\Jobs\\Query\\StringsBatchQuery' => __DIR__ . '/../..' . '/classes/jobs/query/StringsBatchQuery.php', 'WPML\\TM\\Jobs\\TermMeta' => __DIR__ . '/../..' . '/classes/translation-jobs/TermMeta.php', 'WPML\\TM\\Jobs\\Utils' => __DIR__ . '/../..' . '/classes/translation-jobs/Utils.php', 'WPML\\TM\\Jobs\\Utils\\ElementLink' => __DIR__ . '/../..' . '/classes/jobs/utils/ElementLink.php', 'WPML\\TM\\Jobs\\Utils\\ElementLinkFactory' => __DIR__ . '/../..' . '/classes/jobs/utils/ElementLinkFactory.php', 'WPML\\TM\\Menu\\Dashboard\\PostJobsRepository' => __DIR__ . '/../..' . '/classes/menu/dashboard/PostJobsRepository.php', 'WPML\\TM\\Menu\\McSetup\\CfMetaBoxOption' => __DIR__ . '/../..' . '/classes/menu/mcsetup/CfMetaBoxOption.php', 'WPML\\TM\\Menu\\PostLinkUrl' => __DIR__ . '/../..' . '/classes/menu-elements/PostLinkUrl.php', 'WPML\\TM\\Menu\\TranslationBasket\\Strings' => __DIR__ . '/../..' . '/classes/menu/translation-basket/Strings.php', 'WPML\\TM\\Menu\\TranslationBasket\\Utility' => __DIR__ . '/../..' . '/classes/menu/translation-basket/Utility.php', 'WPML\\TM\\Menu\\TranslationMethod\\TranslationMethodSettings' => __DIR__ . '/../..' . '/classes/menu/translation-method/TranslationMethodSettings.php', 'WPML\\TM\\Menu\\TranslationQueue\\CloneJobs' => __DIR__ . '/../..' . '/classes/menu/translation-queue/CloneJobs.php', 'WPML\\TM\\Menu\\TranslationQueue\\PostTypeFilters' => __DIR__ . '/../..' . '/classes/menu/translation-queue/PostTypeFilters.php', 'WPML\\TM\\Menu\\TranslationRoles\\RoleValidator' => __DIR__ . '/../..' . '/classes/menu/translation-roles/RoleValidator.php', 'WPML\\TM\\Menu\\TranslationServices\\ActivationAjax' => __DIR__ . '/../..' . '/classes/menu/translation-services/ActivationAjax.php', 'WPML\\TM\\Menu\\TranslationServices\\ActivationAjaxFactory' => __DIR__ . '/../..' . '/classes/menu/translation-services/ActivationAjaxFactory.php', 'WPML\\TM\\Menu\\TranslationServices\\ActiveServiceRepository' => __DIR__ . '/../..' . '/classes/menu/translation-services/ActiveServiceRepository.php', 'WPML\\TM\\Menu\\TranslationServices\\ActiveServiceTemplate' => __DIR__ . '/../..' . '/classes/menu/translation-services/ActiveServiceTemplate.php', 'WPML\\TM\\Menu\\TranslationServices\\ActiveServiceTemplateFactory' => __DIR__ . '/../..' . '/classes/menu/translation-services/ActiveServiceTemplateFactory.php', 'WPML\\TM\\Menu\\TranslationServices\\AuthenticationAjax' => __DIR__ . '/../..' . '/classes/menu/translation-services/AuthenticationAjax.php', 'WPML\\TM\\Menu\\TranslationServices\\AuthenticationAjaxFactory' => __DIR__ . '/../..' . '/classes/menu/translation-services/AuthenticationAjaxFactory.php', 'WPML\\TM\\Menu\\TranslationServices\\Endpoints\\Activate' => __DIR__ . '/../..' . '/classes/menu/translation-services/endpoints/Activate.php', 'WPML\\TM\\Menu\\TranslationServices\\Endpoints\\Deactivate' => __DIR__ . '/../..' . '/classes/menu/translation-services/endpoints/Deactivate.php', 'WPML\\TM\\Menu\\TranslationServices\\Endpoints\\Select' => __DIR__ . '/../..' . '/classes/menu/translation-services/endpoints/Select.php', 'WPML\\TM\\Menu\\TranslationServices\\MainLayoutTemplate' => __DIR__ . '/../..' . '/classes/menu/translation-services/MainLayoutTemplate.php', 'WPML\\TM\\Menu\\TranslationServices\\NoSiteKeyTemplate' => __DIR__ . '/../..' . '/classes/menu/translation-services/NoSiteKeyTemplate.php', 'WPML\\TM\\Menu\\TranslationServices\\Resources' => __DIR__ . '/../..' . '/classes/menu/translation-services/Resources.php', 'WPML\\TM\\Menu\\TranslationServices\\Section' => __DIR__ . '/../..' . '/classes/menu/translation-services/Section.php', 'WPML\\TM\\Menu\\TranslationServices\\SectionFactory' => __DIR__ . '/../..' . '/classes/menu/translation-services/SectionFactory.php', 'WPML\\TM\\Menu\\TranslationServices\\ServiceMapper' => __DIR__ . '/../..' . '/classes/menu/translation-services/ServiceMapper.php', 'WPML\\TM\\Menu\\TranslationServices\\ServicesRetriever' => __DIR__ . '/../..' . '/classes/menu/translation-services/ServicesRetriever.php', 'WPML\\TM\\Menu\\TranslationServices\\Troubleshooting\\RefreshServices' => __DIR__ . '/../..' . '/classes/menu/translation-services/troubleshooting/RefreshServices.php', 'WPML\\TM\\Menu\\TranslationServices\\Troubleshooting\\RefreshServicesFactory' => __DIR__ . '/../..' . '/classes/menu/translation-services/troubleshooting/RefreshServicesFactory.php', 'WPML\\TM\\PostEditScreen\\Endpoints\\SetEditorMode' => __DIR__ . '/../..' . '/classes/post-edit-screen/endpoints/SetEditorMode.php', 'WPML\\TM\\PostEditScreen\\TranslationEditorPostSettings' => __DIR__ . '/../..' . '/classes/post-edit-screen/TranslationEditorPostSettings.php', 'WPML\\TM\\REST\\Base' => __DIR__ . '/../..' . '/classes/API/REST/BaseTM.php', 'WPML\\TM\\REST\\FactoryLoader' => __DIR__ . '/../..' . '/classes/API/REST/FactoryLoader.php', 'WPML\\TM\\Settings\\CustomFieldChangeDetector' => __DIR__ . '/../..' . '/classes/settings/CustomFieldChangeDetector.php', 'WPML\\TM\\Settings\\Flags\\Command\\ConvertFlags' => __DIR__ . '/../..' . '/classes/settings/Flags/Command/ConvertFlags.php', 'WPML\\TM\\Settings\\Flags\\Endpoints\\SetFormat' => __DIR__ . '/../..' . '/classes/settings/Flags/Endpoints/SetFormat.php', 'WPML\\TM\\Settings\\Flags\\FlagsRepository' => __DIR__ . '/../..' . '/classes/settings/Flags/FlagsRepository.php', 'WPML\\TM\\Settings\\Flags\\Options' => __DIR__ . '/../..' . '/classes/settings/Flags/Options.php', 'WPML\\TM\\Settings\\ProcessNewTranslatableFields' => __DIR__ . '/../..' . '/classes/settings/ProcessNewTranslatableFields.php', 'WPML\\TM\\Settings\\Repository' => __DIR__ . '/../..' . '/classes/settings/Repository.php', 'WPML\\TM\\StringTranslation\\StringTranslationRequest' => __DIR__ . '/../..' . '/classes/wpml-st/StringTranslationRequest.php', 'WPML\\TM\\TranslationDashboard\\EncodedFieldsValidation\\ErrorEntry' => __DIR__ . '/../..' . '/classes/translation-dashboard/EncodedFieldsValidation/ErrorEntry.php', 'WPML\\TM\\TranslationDashboard\\EncodedFieldsValidation\\FieldTitle' => __DIR__ . '/../..' . '/classes/translation-dashboard/EncodedFieldsValidation/FieldTitle.php', 'WPML\\TM\\TranslationDashboard\\EncodedFieldsValidation\\Validator' => __DIR__ . '/../..' . '/classes/translation-dashboard/EncodedFieldsValidation/Validator.php', 'WPML\\TM\\TranslationDashboard\\Endpoints\\DisplayNeedSyncMessage' => __DIR__ . '/../..' . '/classes/translation-dashboard/Endpoints/DisplayNeedSyncMessage.php', 'WPML\\TM\\TranslationDashboard\\Endpoints\\Duplicate' => __DIR__ . '/../..' . '/classes/translation-dashboard/Endpoints/Duplicate.php', 'WPML\\TM\\TranslationDashboard\\FiltersStorage' => __DIR__ . '/../..' . '/classes/translation-dashboard/FiltersStorage.php', 'WPML\\TM\\TranslationDashboard\\SentContentMessages' => __DIR__ . '/../..' . '/classes/translation-dashboard/SentContentMessages.php', 'WPML\\TM\\TranslationProxy\\Services\\Authorization' => __DIR__ . '/../..' . '/classes/translation-proxy/services/Authorization.php', 'WPML\\TM\\TranslationProxy\\Services\\AuthorizationFactory' => __DIR__ . '/../..' . '/classes/translation-proxy/services/AuthorizationFactory.php', 'WPML\\TM\\TranslationProxy\\Services\\Project\\Manager' => __DIR__ . '/../..' . '/classes/translation-proxy/services/Project/Manager.php', 'WPML\\TM\\TranslationProxy\\Services\\Project\\Project' => __DIR__ . '/../..' . '/classes/translation-proxy/services/Project/Project.php', 'WPML\\TM\\TranslationProxy\\Services\\Project\\SiteDetails' => __DIR__ . '/../..' . '/classes/translation-proxy/services/Project/SiteDetails.php', 'WPML\\TM\\TranslationProxy\\Services\\Project\\Storage' => __DIR__ . '/../..' . '/classes/translation-proxy/services/Project/Storage.php', 'WPML\\TM\\TranslationProxy\\Services\\Storage' => __DIR__ . '/../..' . '/classes/translation-proxy/services/Storage.php', 'WPML\\TM\\Troubleshooting\\Endpoints\\ATESecondaryDomains\\EnableSecondaryDomain' => __DIR__ . '/../..' . '/classes/troubleshoot/Endpoints/ATESecondaryDomains/EnableSecondaryDomain.php', 'WPML\\TM\\Troubleshooting\\Loader' => __DIR__ . '/../..' . '/classes/troubleshoot/Loader.php', 'WPML\\TM\\Troubleshooting\\ResetPreferredTranslationService' => __DIR__ . '/../..' . '/classes/troubleshooting/ResetPreferredTranslationService.php', 'WPML\\TM\\Troubleshooting\\SynchronizeSourceIdOfATEJobs\\TriggerSynchronization' => __DIR__ . '/../..' . '/classes/troubleshooting/SynchronizeSourceIdOfATEJobs/TriggerSynchronization.php', 'WPML\\TM\\Upgrade\\Commands\\ATEProxyUpdateRewriteRules' => __DIR__ . '/../..' . '/classes/upgrade/commands/ATEProxyUpdateRewriteRules.php', 'WPML\\TM\\Upgrade\\Commands\\AddAteCommunicationRetryColumnToTranslationStatus' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddAteCommunicationRetryColumnToTranslationStatus.php', 'WPML\\TM\\Upgrade\\Commands\\AddAteSyncCountToTranslationJob' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddAteSyncCountToTranslationJob.php', 'WPML\\TM\\Upgrade\\Commands\\AddReviewStatusColumnToTranslationStatus' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddReviewStatusColumnToTranslationStatus.php', 'WPML\\TM\\Upgrade\\Commands\\CreateAteDownloadQueueTable' => __DIR__ . '/../..' . '/classes/upgrade/commands/CreateAteDownloadQueueTable.php', 'WPML\\TM\\Upgrade\\Commands\\MigrateAteRepository' => __DIR__ . '/../..' . '/classes/upgrade/commands/MigrateAteRepository.php', 'WPML\\TM\\Upgrade\\Commands\\RefreshTranslationServices' => __DIR__ . '/../..' . '/classes/upgrade/commands/RefreshTranslationServices.php', 'WPML\\TM\\Upgrade\\Commands\\ResetTranslatorOfAutomaticJobs' => __DIR__ . '/../..' . '/classes/upgrade/commands/ResetTranslatorOfAutomaticJobs.php', 'WPML\\TM\\Upgrade\\Commands\\SynchronizeSourceIdOfATEJobs\\Command' => __DIR__ . '/../..' . '/classes/upgrade/commands/SynchronizeSourceIdOfATEJobs/Command.php', 'WPML\\TM\\Upgrade\\Commands\\SynchronizeSourceIdOfATEJobs\\CommandFactory' => __DIR__ . '/../..' . '/classes/upgrade/commands/SynchronizeSourceIdOfATEJobs/CommandFactory.php', 'WPML\\TM\\Upgrade\\Commands\\SynchronizeSourceIdOfATEJobs\\Repository' => __DIR__ . '/../..' . '/classes/upgrade/commands/SynchronizeSourceIdOfATEJobs/Repository.php', 'WPML\\TM\\User\\Hooks' => __DIR__ . '/../..' . '/classes/user/Hooks.php', 'WPML\\TaxonomyTermTranslation\\AutoSync' => __DIR__ . '/../..' . '/classes/taxonomy-term-translation/AutoSync.php', 'WPML\\TaxonomyTermTranslation\\Hooks' => __DIR__ . '/../..' . '/classes/taxonomy-term-translation/Hooks.php', 'WPML\\Timer' => __DIR__ . '/..' . '/wpml/core-api/core/Timer.php', 'WPML\\TranslateLinkTargets\\Hooks' => __DIR__ . '/../..' . '/classes/translate_link_targets/Hooks.php', 'WPML\\TranslationMode\\Endpoint\\SetTranslateEverything' => __DIR__ . '/../..' . '/classes/translation-mode/endpoints/SetTranslateEverything.php', 'WPML\\TranslationRoles\\FindAvailableByRole' => __DIR__ . '/../..' . '/classes/translation-roles/endpoints/FindAvailableByRole.php', 'WPML\\TranslationRoles\\GetManagerRecords' => __DIR__ . '/../..' . '/classes/translation-roles/endpoints/GetManagerRecords.php', 'WPML\\TranslationRoles\\GetTranslatorRecords' => __DIR__ . '/../..' . '/classes/translation-roles/endpoints/GetTranslatorRecords.php', 'WPML\\TranslationRoles\\Remove' => __DIR__ . '/../..' . '/classes/translation-roles/endpoints/Remove.php', 'WPML\\TranslationRoles\\RemoveManager' => __DIR__ . '/../..' . '/classes/translation-roles/endpoints/RemoveManager.php', 'WPML\\TranslationRoles\\RemoveTranslator' => __DIR__ . '/../..' . '/classes/translation-roles/endpoints/RemoveTranslator.php', 'WPML\\TranslationRoles\\SaveManager' => __DIR__ . '/../..' . '/classes/translation-roles/endpoints/SaveManager.php', 'WPML\\TranslationRoles\\SaveTranslator' => __DIR__ . '/../..' . '/classes/translation-roles/endpoints/SaveTranslator.php', 'WPML\\TranslationRoles\\SaveUser' => __DIR__ . '/../..' . '/classes/translation-roles/endpoints/SaveUser.php', 'WPML\\TranslationRoles\\UI\\Initializer' => __DIR__ . '/../..' . '/classes/translation-roles/UI/Initializer.php', 'WPML\\Troubleshooting\\AssignTranslationStatusToDuplicates' => __DIR__ . '/../..' . '/classes/troubleshoot/AssignTranslationStatusToDuplicates.php', 'WPML\\UIPage' => __DIR__ . '/..' . '/wpml/core-api/core/UIPage.php', 'WPML\\Upgrade\\Command\\DisableOptionsAutoloading' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-disable-options-autoloading.php', 'WPML\\Upgrade\\CommandsStatus' => __DIR__ . '/../..' . '/classes/upgrade/CommandsStatus.php', 'WPML\\Upgrade\\Commands\\AddAutomaticColumnToIclTranslateJob' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddAutomaticColumnToIclTranslateJob.php', 'WPML\\Upgrade\\Commands\\AddContextIndexToStrings' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddContextIndexToStrings.php', 'WPML\\Upgrade\\Commands\\AddCountryColumnToLanguages' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddCountryColumnToLanguages.php', 'WPML\\Upgrade\\Commands\\AddIndexToTable' => __DIR__ . '/../..' . '/classes/upgrade/commands/abstracts/class-add-index-to-table.php', 'WPML\\Upgrade\\Commands\\AddPrimaryKeyToLocaleMap' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddPrimaryKeyToLocaleMap.php', 'WPML\\Upgrade\\Commands\\AddPrimaryKeyToTable' => __DIR__ . '/../..' . '/classes/upgrade/commands/abstracts/AddPrimaryKeyToTable.php', 'WPML\\Upgrade\\Commands\\AddStatusIndexToStringTranslations' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddStatusIndexToStringTranslations.php', 'WPML\\Upgrade\\Commands\\AddStringPackageIdIndexToStrings' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddStringPackageIdtIndexToStrings.php', 'WPML\\Upgrade\\Commands\\AddTranslationManagerCapToAdmin' => __DIR__ . '/../..' . '/classes/upgrade/commands/AddTranslationManagerCapToAdmin.php', 'WPML\\Upgrade\\Commands\\CreateBackgroundTaskTable' => __DIR__ . '/../..' . '/classes/upgrade/commands/CreateBackgroundTaskTable.php', 'WPML\\Upgrade\\Commands\\DropCodeLocaleIndexFromLocaleMap' => __DIR__ . '/../..' . '/classes/upgrade/commands/DropCodeLocaleIndexFromLocaleMap.php', 'WPML\\Upgrade\\Commands\\DropIndexFromTable' => __DIR__ . '/../..' . '/classes/upgrade/commands/abstracts/DropIndexFromTable.php', 'WPML\\Upgrade\\Commands\\RemoveEndpointsOption' => __DIR__ . '/../..' . '/classes/upgrade/commands/RemoveEndpointsOption.php', 'WPML\\Upgrade\\Commands\\RemoveRestDisabledNotice' => __DIR__ . '/../..' . '/classes/upgrade/commands/RemoveRestDisabledNotice.php', 'WPML\\Upgrade\\Commands\\RemoveTmWcmlPromotionNotice' => __DIR__ . '/../..' . '/classes/upgrade/commands/RemoveTmWcmlPromotionNotice.php', 'WPML\\UrlHandling\\WPLoginUrlConverter' => __DIR__ . '/../..' . '/classes/url-handling/wpml-wp-login-url-converter.php', 'WPML\\UrlHandling\\WPLoginUrlConverterFactory' => __DIR__ . '/../..' . '/classes/url-handling/wpml-wp-login-url-converter-factory.php', 'WPML\\UrlHandling\\WPLoginUrlConverterRules' => __DIR__ . '/../..' . '/classes/url-handling/WPLoginUrlConverterRules.php', 'WPML\\User\\LanguagePairs\\ILanguagePairs' => __DIR__ . '/../..' . '/classes/user/LanguagePairs/ILanguagePairs.php', 'WPML\\User\\UsersByCapsRepository' => __DIR__ . '/../..' . '/classes/user/UsersByCapsRepository.php', 'WPML\\Utilities\\DebugLog' => __DIR__ . '/../..' . '/classes/utilities/DebugLog.php', 'WPML\\Utilities\\ILock' => __DIR__ . '/..' . '/wpml/core-api/core/utility/ILock.php', 'WPML\\Utilities\\KeyedLock' => __DIR__ . '/../..' . '/classes/utilities/lock/KeyedLock.php', 'WPML\\Utilities\\Lock' => __DIR__ . '/..' . '/wpml/core-api/core/utility/Lock.php', 'WPML\\Utilities\\Logger' => __DIR__ . '/..' . '/wpml/core-api/core/utility/Logger.php', 'WPML\\Utilities\\NullLock' => __DIR__ . '/../..' . '/classes/utilities/lock/class-wpml-null-lock.php', 'WPML\\Utils\\AutoAdjustIds' => __DIR__ . '/../..' . '/classes/utilities/AutoAdjustIds.php', 'WPML\\Utils\\AutoAdjustIdsFactory' => __DIR__ . '/../..' . '/classes/utilities/AutoAdjustIdsFactory.php', 'WPML\\Utils\\DebugBackTrace' => __DIR__ . '/../..' . '/classes/utilities/class-debug-backtrace.php', 'WPML\\Utils\\Pager' => __DIR__ . '/../..' . '/classes/utilities/Pager.php', 'WPML\\WP\\OptionManager' => __DIR__ . '/..' . '/wpml/core-api/core/OptionManager.php', 'WPML_404_Guess' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-404-guess.php', 'WPML_AJAX_Action_Validation' => __DIR__ . '/../..' . '/classes/action-filter-loader/class-wpml-ajax-action-validation.php', 'WPML_AJAX_Base_Factory' => __DIR__ . '/../..' . '/classes/action-filter-loader/class-wpml-ajax-action-base-factory.php', 'WPML_API_Hook_Copy_Post_To_Language' => __DIR__ . '/../..' . '/classes/API/Hooks/class-wpml-api-hook-copy-post-to-language.php', 'WPML_API_Hook_Links' => __DIR__ . '/../..' . '/classes/API/Hooks/class-wpml-api-hook-links.php', 'WPML_API_Hook_Permalink' => __DIR__ . '/../..' . '/classes/API/Hooks/class-wpml-api-hook-permalink.php', 'WPML_API_Hook_Sync_Custom_Fields' => __DIR__ . '/../..' . '/classes/API/Hooks/class-wpml-api-hook-sync-custom-fields.php', 'WPML_API_Hook_Translation_Element' => __DIR__ . '/../..' . '/classes/API/Hooks/class-wpml-api-hook-translation-element.php', 'WPML_API_Hook_Translation_Mode' => __DIR__ . '/../..' . '/classes/API/Hooks/class-wpml-api-hook-translation-mode.php', 'WPML_API_Hooks_Factory' => __DIR__ . '/../..' . '/classes/API/Hooks/class-wpml-api-hooks-factory.php', 'WPML_Absolute_Links_Blacklist' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-absolute-links-blacklist.php', 'WPML_Absolute_To_Permalinks' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-absolute-to-permalinks.php', 'WPML_Absolute_Url_Persisted' => __DIR__ . '/../..' . '/classes/url-handling/resolver/wpml-absolute-url-persisted.php', 'WPML_Absolute_Url_Persisted_Filters' => __DIR__ . '/../..' . '/classes/url-handling/resolver/filters/wpml-absolute-url-persisted-filters.php', 'WPML_Absolute_Url_Persisted_Filters_Factory' => __DIR__ . '/../..' . '/classes/url-handling/resolver/filters/wpml-absolute-url-persisted-filters-factory.php', 'WPML_Abstract_Job_Collection' => __DIR__ . '/../..' . '/inc/translation-jobs/collections/class-wpml-abstract-job-collection.php', 'WPML_Action_Filter_Loader' => __DIR__ . '/../..' . '/classes/action-filter-loader/class-wpml-action-filter-loader.php', 'WPML_Active_Plugin_Provider' => __DIR__ . '/../..' . '/classes/class-wpml-active-plugin-provider.php', 'WPML_Add_UUID_Column_To_Translation_Status' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-add-uuid-column-to-translation-status.php', 'WPML_Adjacent_Links_Hooks' => __DIR__ . '/../..' . '/classes/hooks/adjacent-links/class-wpml-adjacent-links-hooks.php', 'WPML_Adjacent_Links_Hooks_Factory' => __DIR__ . '/../..' . '/classes/hooks/adjacent-links/class-wpml-adjacent-links-hooks-factory.php', 'WPML_Admin_Language_Switcher' => __DIR__ . '/../..' . '/menu/wpml-admin-lang-switcher.class.php', 'WPML_Admin_Menu_Item' => __DIR__ . '/../..' . '/classes/admin-menu/class-wpml-admin-menu-item.php', 'WPML_Admin_Menu_Root' => __DIR__ . '/../..' . '/classes/admin-menu/class-wpml-admin-menu-root.php', 'WPML_Admin_Pagination' => __DIR__ . '/../..' . '/classes/utilities/admin/wpml-admin-pagination.php', 'WPML_Admin_Pagination_Factory' => __DIR__ . '/../..' . '/classes/utilities/admin/wpml-admin-pagination-factory.php', 'WPML_Admin_Pagination_Render' => __DIR__ . '/../..' . '/classes/utilities/admin/wpml-admin-pagination-render.php', 'WPML_Admin_Post_Actions' => __DIR__ . '/../..' . '/inc/post-translation/wpml-admin-post-actions.class.php', 'WPML_Admin_Resources_Hooks' => __DIR__ . '/../..' . '/classes/admin-resources/class-wpml-admin-resources-hooks.php', 'WPML_Admin_Scripts_Setup' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-admin-scripts-setup.php', 'WPML_Admin_Table_Sort' => __DIR__ . '/../..' . '/classes/utilities/admin/wpml-admin-table-sort.php', 'WPML_Admin_URL' => __DIR__ . '/../..' . '/classes/utilities/admin/class-wpml-admin-url.php', 'WPML_Ajax' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-ajax.php', 'WPML_Ajax_Factory' => __DIR__ . '/../..' . '/classes/ajax/class-wpml-ajax-factory.php', 'WPML_Ajax_Response' => __DIR__ . '/../..' . '/classes/ajax/class-wpml-ajax-response.php', 'WPML_Ajax_Route' => __DIR__ . '/../..' . '/classes/ajax/class-wpml-ajax-route.php', 'WPML_Ajax_Update_Link_Targets_In_Content' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-ajax-update-link-targets-in-content.php', 'WPML_Ajax_Update_Link_Targets_In_Posts' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-ajax-update-link-targets-in-posts.php', 'WPML_Ajax_Update_Link_Targets_In_Strings' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-ajax-update-link-targets-in-strings.php', 'WPML_All_Language_Pairs' => __DIR__ . '/../..' . '/classes/language/class-wpml-all-language-pairs.php', 'WPML_All_Translation_Jobs_Migration_Notice' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-all-translation-jobs-migration-notice.php', 'WPML_Allowed_Redirect_Hosts' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-allowed-redirect-hosts.php', 'WPML_Archives_Query' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-archives-query.php', 'WPML_Attachment_Action' => __DIR__ . '/../..' . '/classes/media/class-wpml-attachment-action.php', 'WPML_Attachment_Action_Factory' => __DIR__ . '/../..' . '/classes/media/class-wpml-attachment-action-factory.php', 'WPML_Attachments_Urls_With_Identical_Slugs' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-attachments-urls-with-identical-slugs.php', 'WPML_Attachments_Urls_With_Identical_Slugs_Factory' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-attachments-urls-with-identical-slugs-factory.php', 'WPML_BBPress_API' => __DIR__ . '/../..' . '/classes/compatibility/bbpress/class-wpml-bbpress-api.php', 'WPML_BBPress_Filters' => __DIR__ . '/../..' . '/classes/compatibility/bbpress/class-wpml-bbpress-filters.php', 'WPML_Backend_Request' => __DIR__ . '/../..' . '/classes/request-handling/wpml-backend-request.class.php', 'WPML_Basket_Tab_Ajax' => __DIR__ . '/../..' . '/classes/menu/translation-basket/wpml-basket-tab-ajax.class.php', 'WPML_Block_Editor_Helper' => __DIR__ . '/../..' . '/classes/block-editor/class-wpml-block-editor-helper.php', 'WPML_Browser_Redirect' => __DIR__ . '/../..' . '/classes/class-wpml-browser-redirect.php', 'WPML_Cache_Directory' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-cache/src/cache/class-wpml-cache-directory.php', 'WPML_Cache_Factory' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-cache-factory.php', 'WPML_Canonicals' => __DIR__ . '/../..' . '/classes/canonicals/class-wpml-canonicals.php', 'WPML_Canonicals_Hooks' => __DIR__ . '/../..' . '/classes/canonicals/class-wpml-canonicals-hooks.php', 'WPML_Color_Picker' => __DIR__ . '/../..' . '/inc/utilities/wpml-color-picker.class.php', 'WPML_Comment_Duplication' => __DIR__ . '/../..' . '/inc/post-translation/wpml-comment-duplication.class.php', 'WPML_Compatibility_2017' => __DIR__ . '/../..' . '/compatibility/twentyseventeen/class-wpml-compatibility-2017.php', 'WPML_Compatibility_Disqus' => __DIR__ . '/../..' . '/compatibility/disqus/wpml-compatibility-disqus.php', 'WPML_Compatibility_Disqus_Factory' => __DIR__ . '/../..' . '/compatibility/disqus/wpml-compatibility-disqus-factory.php', 'WPML_Compatibility_Factory' => __DIR__ . '/../..' . '/compatibility/wpml-compatibility-factory.php', 'WPML_Compatibility_Gutenberg' => __DIR__ . '/../..' . '/compatibility/gutenberg/wpml-compatibility-gutenberg.php', 'WPML_Compatibility_Jetpack' => __DIR__ . '/../..' . '/compatibility/jetpack/class-wpml-compatibility-jetpack.php', 'WPML_Compatibility_Tiny_Compress_Images' => __DIR__ . '/../..' . '/compatibility/tiny-compress-images/class-wpml-compatibility-tiny-compress-images.php', 'WPML_Compatibility_Tiny_Compress_Images_Factory' => __DIR__ . '/../..' . '/compatibility/tiny-compress-images/class-wpml-compatibility-tiny-compress-images-factory.php', 'WPML_Config' => __DIR__ . '/../..' . '/classes/xml-config/class-wpml-config.php', 'WPML_Config_Built_With_Page_Builders' => __DIR__ . '/../..' . '/classes/xml-config/class-wpml-config-built-with-page-builders.php', 'WPML_Config_Display_As_Translated' => __DIR__ . '/../..' . '/classes/xml-config/class-wpml-config-display-as-translated.php', 'WPML_Config_Shortcode_List' => __DIR__ . '/../..' . '/classes/xml-config/class-wpml-config-shortcode-list.php', 'WPML_Config_Update' => __DIR__ . '/../..' . '/classes/class-wpml-config-update.php', 'WPML_Config_Update_Integrator' => __DIR__ . '/../..' . '/classes/class-wpml-config-update-integrator.php', 'WPML_Config_Update_Log' => __DIR__ . '/../..' . '/classes/xml-config/class-wpml-config-update-log.php', 'WPML_Cookie' => __DIR__ . '/../..' . '/classes/cookie/class-wpml-cookie.php', 'WPML_Cookie_Admin_Scripts' => __DIR__ . '/../..' . '/classes/cookie/class-wpml-cookie-admin-scripts.php', 'WPML_Cookie_Admin_UI' => __DIR__ . '/../..' . '/classes/cookie/class-wpml-cookie-admin-ui.php', 'WPML_Cookie_Scripts' => __DIR__ . '/../..' . '/classes/cookie/class-wpml-cookie-scripts.php', 'WPML_Cookie_Setting' => __DIR__ . '/../..' . '/classes/cookie/class-wpml-cookie-setting.php', 'WPML_Cookie_Setting_Ajax' => __DIR__ . '/../..' . '/classes/cookie/class-wpml-cookie-setting-ajax.php', 'WPML_Copy_Once_Custom_Field' => __DIR__ . '/../..' . '/classes/custom-field-translation/class-wpml-copy-once-custom-field.php', 'WPML_Core_Privacy_Content' => __DIR__ . '/../..' . '/classes/privacy/class-wpml-core-privacy-content.php', 'WPML_Core_Version_Check' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-dependencies/src/dependencies/class-wpml-core-version-check.php', 'WPML_Create_Post_Helper' => __DIR__ . '/../..' . '/inc/post-translation/wpml-create-post-helper.class.php', 'WPML_Current_Screen' => __DIR__ . '/../..' . '/classes/class-wpml-current-screen.php', 'WPML_Current_Screen_Loader_Factory' => __DIR__ . '/../..' . '/classes/action-filter-loader/class-wpml-current-screen-loader-factory.php', 'WPML_Custom_Columns' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-custom-columns.php', 'WPML_Custom_Columns_Factory' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-custom-columns-factory.php', 'WPML_Custom_Field_Editor_Settings' => __DIR__ . '/../..' . '/classes/menu/translation-editor/class-wpml-custom-field-editor-settings.php', 'WPML_Custom_Field_Setting' => __DIR__ . '/../..' . '/classes/settings/class-wpml-custom-field-setting.php', 'WPML_Custom_Field_Setting_Factory' => __DIR__ . '/../..' . '/classes/settings/class-wpml-custom-field-setting-factory.php', 'WPML_Custom_Field_Setting_Query' => __DIR__ . '/../..' . '/classes/settings/class-wpml-custom-field-setting-query.php', 'WPML_Custom_Field_Setting_Query_Factory' => __DIR__ . '/../..' . '/classes/settings/class-wpml-custom-field-setting-query-factory.php', 'WPML_Custom_Field_XML_Settings_Import' => __DIR__ . '/../..' . '/classes/settings/class-wpml-custom-field-xml-settings-import.php', 'WPML_Custom_Fields_Post_Meta_Info' => __DIR__ . '/../..' . '/classes/custom-field-translation/class-wpml-custom-fields-post-meta-info.php', 'WPML_Custom_Fields_Post_Meta_Info_Factory' => __DIR__ . '/../..' . '/classes/custom-field-translation/class-wpml-custom-fields-post-meta-info-factory.php', 'WPML_Custom_Types_Translation_UI' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-custom-types-translation-ui.php', 'WPML_Custom_XML' => __DIR__ . '/../..' . '/classes/xml-config/class-wpml-custom-xml.php', 'WPML_Custom_XML_Factory' => __DIR__ . '/../..' . '/classes/custom-xml-config/class-wpml-custom-xml-factory.php', 'WPML_Custom_XML_UI_Hooks' => __DIR__ . '/../..' . '/classes/custom-xml-config/class-wpml-custom-xml-ui-hooks.php', 'WPML_Custom_XML_UI_Resources' => __DIR__ . '/../..' . '/classes/custom-xml-config/class-wpml-custom-xml-ui-resources.php', 'WPML_DB_Chunk' => __DIR__ . '/../..' . '/classes/class-wpml-db-chunk.php', 'WPML_Dashboard_Ajax' => __DIR__ . '/../..' . '/menu/dashboard/wpml-tm-dashboard-ajax.class.php', 'WPML_Data_Encryptor' => __DIR__ . '/../..' . '/inc/utilities/wpml-data-encryptor.class.php', 'WPML_Deactivate_Old_Media' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-deactivate-old-media.php', 'WPML_Deactivate_Old_Media_Factory' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-deactivate-old-media-factory.php', 'WPML_Debug_BackTrace' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-debug-backtrace.php', 'WPML_Debug_Information' => __DIR__ . '/../..' . '/classes/troubleshoot/class-wpml-debug-information.php', 'WPML_Dependencies' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-dependencies/src/dependencies/class-wpml-dependencies.php', 'WPML_Display_As_Translated_Attachments_Query' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-display-as-translated-attachments-query.php', 'WPML_Display_As_Translated_Attachments_Query_Factory' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-display-as-translated-attachments-query-factory.php', 'WPML_Display_As_Translated_Default_Lang_Messages' => __DIR__ . '/../..' . '/classes/display-as-translated/class-wpml-display-as-translated-default-lang-messages.php', 'WPML_Display_As_Translated_Default_Lang_Messages_Factory' => __DIR__ . '/../..' . '/classes/display-as-translated/class-wpml-display-as-translated-default-lang-messages-factory.php', 'WPML_Display_As_Translated_Default_Lang_Messages_View' => __DIR__ . '/../..' . '/classes/display-as-translated/class-wpml-display-as-translated-default-lang-messages-view.php', 'WPML_Display_As_Translated_Message_For_New_Post' => __DIR__ . '/../..' . '/classes/display-as-translated/class-wpml-display-as-translated-message-for-new-post.php', 'WPML_Display_As_Translated_Message_For_New_Post_Factory' => __DIR__ . '/../..' . '/classes/display-as-translated/class-wpml-display-as-translated-message-for-new-post-factory.php', 'WPML_Display_As_Translated_Posts_Query' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-display-as-translated-posts-query.php', 'WPML_Display_As_Translated_Query' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-display-as-translated-query.php', 'WPML_Display_As_Translated_Snippet_Filters' => __DIR__ . '/../..' . '/classes/display-as-translated/class-wpml-display-as-translated-snippet-filters.php', 'WPML_Display_As_Translated_Snippet_Filters_Factory' => __DIR__ . '/../..' . '/classes/display-as-translated/class-wpml-display-as-translated-snippet-filters-factory.php', 'WPML_Display_As_Translated_Tax_Query' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-display-as-translated-tax-query.php', 'WPML_Display_As_Translated_Tax_Query_Factory' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-display-as-translated-tax-query-factory.php', 'WPML_Display_As_Translated_Taxonomy_Query' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-display-as-translated-taxonomy-query.php', 'WPML_Download_Localization' => __DIR__ . '/../..' . '/classes/localization/class-wpml-download-localization.php', 'WPML_Duplicable_Element' => __DIR__ . '/../..' . '/classes/translations/interface-wpml-duplicable-element.php', 'WPML_Editor_UI_Field' => __DIR__ . '/../..' . '/classes/menu/translation-editor/fields/model/class-wpml-editor-ui-field.php', 'WPML_Editor_UI_Field_Group' => __DIR__ . '/../..' . '/classes/menu/translation-editor/fields/model/class-wpml-editor-ui-field-group.php', 'WPML_Editor_UI_Field_Image' => __DIR__ . '/../..' . '/classes/menu/translation-editor/fields/model/class-wpml-editor-ui-field-image.php', 'WPML_Editor_UI_Field_Section' => __DIR__ . '/../..' . '/classes/menu/translation-editor/fields/model/class-wpml-editor-ui-field-section.php', 'WPML_Editor_UI_Fields' => __DIR__ . '/../..' . '/classes/menu/translation-editor/fields/model/class-wpml-editor-ui-fields.php', 'WPML_Editor_UI_Job' => __DIR__ . '/../..' . '/classes/menu/translation-editor/class-wpml-editor-ui-job.php', 'WPML_Editor_UI_Single_Line_Field' => __DIR__ . '/../..' . '/classes/menu/translation-editor/fields/model/class-wpml-editor-ui-single-line-field.php', 'WPML_Editor_UI_TextArea_Field' => __DIR__ . '/../..' . '/classes/menu/translation-editor/fields/model/class-wpml-editor-ui-textarea-field.php', 'WPML_Editor_UI_WYSIWYG_Field' => __DIR__ . '/../..' . '/classes/menu/translation-editor/fields/model/class-wpml-editor-ui-wysiwyg-field.php', 'WPML_Element_Sync_Settings' => __DIR__ . '/../..' . '/classes/settings/class-wpml-element-sync-settings.php', 'WPML_Element_Sync_Settings_Factory' => __DIR__ . '/../..' . '/classes/settings/class-wpml-element-sync-settings-factory.php', 'WPML_Element_Translation' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-element-translation.php', 'WPML_Element_Translation_Job' => __DIR__ . '/../..' . '/inc/translation-jobs/jobs/wpml-element-translation-job.class.php', 'WPML_Element_Translation_Package' => __DIR__ . '/../..' . '/classes/translation-jobs/class-wpml-element-translation-package.php', 'WPML_Element_Type_Translation' => __DIR__ . '/../..' . '/classes/translations/class-wpml-element-type-translation.php', 'WPML_Encoding' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-encoding.php', 'WPML_Encoding_Validation' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-encoding-validation.php', 'WPML_Endpoints_Support' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-endpoints-support.php', 'WPML_Endpoints_Support_Factory' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-endpoints-support-factory.php', 'WPML_External_Translation_Job' => __DIR__ . '/../..' . '/inc/translation-jobs/jobs/wpml-external-translation-job.class.php', 'WPML_File' => __DIR__ . '/../..' . '/classes/class-wpml-file.php', 'WPML_Fix_Links_In_Display_As_Translated_Content' => __DIR__ . '/../..' . '/classes/display-as-translated/class-wpml-fix-links-in-display-as-translated-content.php', 'WPML_Fix_Type_Assignments' => __DIR__ . '/../..' . '/classes/troubleshoot/class-wpml-fix-type-assignments.php', 'WPML_Flags' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-flags.php', 'WPML_Flags_Factory' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-flags-factory.php', 'WPML_Frontend_Post_Actions' => __DIR__ . '/../..' . '/inc/post-translation/wpml-frontend-post-actions.class.php', 'WPML_Frontend_Redirection' => __DIR__ . '/../..' . '/classes/request-handling/class-wpml-frontend-redirection.php', 'WPML_Frontend_Redirection_Url' => __DIR__ . '/../..' . '/classes/request-handling/class-wpml-frontend-redirection-url.php', 'WPML_Frontend_Request' => __DIR__ . '/../..' . '/classes/request-handling/class-wpml-frontend-request.php', 'WPML_Frontend_Tax_Filters' => __DIR__ . '/../..' . '/inc/taxonomy-term-translation/wpml-frontend-tax-filters.class.php', 'WPML_Full_PT_API' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-full-pt-api.php', 'WPML_Full_Translation_API' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-full-translation-api.php', 'WPML_Get_LS_Languages_Status' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-get-ls-languages-status.php', 'WPML_Get_Page_By_Path' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-get-page-by-path.php', 'WPML_Global_AJAX' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-global-ajax.php', 'WPML_Google_Sitemap_Generator' => __DIR__ . '/../..' . '/compatibility/google-sitemap-generator/class-wpml-google-sitemap-generator.php', 'WPML_Hierarchy_Sync' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-hierarchy-sync.php', 'WPML_Home_Url_Filter_Context' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-home-url-filter-context.php', 'WPML_ICL_Client' => __DIR__ . '/../..' . '/classes/icl/class-wpml-icl-client.php', 'WPML_Inactive_Content' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-inactive-content.php', 'WPML_Inactive_Content_Render' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-inactive-content-render.php', 'WPML_Include_Url' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-include-url.php', 'WPML_Initialize_Language_For_Post_Type' => __DIR__ . '/../..' . '/classes/records/class-wpml-initialize-language-for-post-type.php', 'WPML_Installation' => __DIR__ . '/../..' . '/inc/setup/wpml-installation.class.php', 'WPML_Installer_Domain_URL' => __DIR__ . '/../..' . '/classes/Installer/class-wpml-installer-domain-url.php', 'WPML_Installer_Domain_URL_Factory' => __DIR__ . '/../..' . '/classes/Installer/class-wpml-installer-domain-url-factory.php', 'WPML_Installer_Gateway' => __DIR__ . '/../..' . '/classes/Installer/class-wpml-installer-gateway.php', 'WPML_Integration_Requirements_Block_Editor' => __DIR__ . '/../..' . '/classes/requirements/modules/class-wpml-integration-requirement-block-editor.php', 'WPML_Integrations' => __DIR__ . '/../..' . '/classes/requirements/class-wpml-integrations.php', 'WPML_Integrations_Requirements' => __DIR__ . '/../..' . '/classes/requirements/class-wpml-integrations-requirements.php', 'WPML_Integrations_Requirements_Scripts' => __DIR__ . '/../..' . '/classes/requirements/wpml-integrations-requirements-scripts.php', 'WPML_LS_Actions' => __DIR__ . '/../..' . '/classes/language-switcher/public-api/class-wpml-ls-actions.php', 'WPML_LS_Admin_UI' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-admin-ui.php', 'WPML_LS_Assets' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-assets.php', 'WPML_LS_Dependencies_Factory' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-dependencies-factory.php', 'WPML_LS_Display_As_Translated_Link' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-display-as-translated-link.php', 'WPML_LS_Footer_Slot' => __DIR__ . '/../..' . '/classes/language-switcher/slots/class-wpml-ls-footer-slot.php', 'WPML_LS_Inline_Styles' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-inline-styles.php', 'WPML_LS_Languages_Cache' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-languages-cache.php', 'WPML_LS_Menu_Item' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-menu-item.php', 'WPML_LS_Menu_Slot' => __DIR__ . '/../..' . '/classes/language-switcher/slots/class-wpml-ls-menu-slot.php', 'WPML_LS_Migration' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-migration.php', 'WPML_LS_Model_Build' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-model-build.php', 'WPML_LS_Post_Translations_Slot' => __DIR__ . '/../..' . '/classes/language-switcher/slots/class-wpml-ls-post-translations-slot.php', 'WPML_LS_Public_API' => __DIR__ . '/../..' . '/classes/language-switcher/public-api/class-wpml-ls-public-api.php', 'WPML_LS_Render' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-render.php', 'WPML_LS_Settings' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-settings.php', 'WPML_LS_Settings_Color_Presets' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-settings-color-presets.php', 'WPML_LS_Settings_Sanitize' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-settings-sanitize.php', 'WPML_LS_Settings_Strings' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-settings-strings.php', 'WPML_LS_Shortcode_Actions_Slot' => __DIR__ . '/../..' . '/classes/language-switcher/slots/class-wpml-ls-shortcode-actions-slot.php', 'WPML_LS_Shortcodes' => __DIR__ . '/../..' . '/classes/language-switcher/public-api/class-wpml-ls-shortcodes.php', 'WPML_LS_Sidebar_Slot' => __DIR__ . '/../..' . '/classes/language-switcher/slots/class-wpml-ls-sidebar-slot.php', 'WPML_LS_Slot' => __DIR__ . '/../..' . '/classes/language-switcher/slots/class-wpml-ls-slot.php', 'WPML_LS_Slot_Factory' => __DIR__ . '/../..' . '/classes/language-switcher/slots/class-wpml-ls-slot-factory.php', 'WPML_LS_Template' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-template.php', 'WPML_LS_Templates' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-templates.php', 'WPML_LS_Widget' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-ls-widget.php', 'WPML_Lang_Domain_Filters' => __DIR__ . '/../..' . '/classes/url-handling/converter/filters/class-wpml-lang-domain-filters.php', 'WPML_Lang_Domains_Box' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-lang-domains-box.php', 'WPML_Lang_Parameter_Filters' => __DIR__ . '/../..' . '/classes/url-handling/converter/filters/class-wpml-lang-parameter-filters.php', 'WPML_Lang_URL_Validator' => __DIR__ . '/../..' . '/inc/url-handling/wpml-lang-url-validator.class.php', 'WPML_Language' => __DIR__ . '/../..' . '/classes/languages/class-wpml-language.php', 'WPML_Language_Code' => __DIR__ . '/../..' . '/classes/user-language/class-wpml-language-code.php', 'WPML_Language_Collection' => __DIR__ . '/../..' . '/classes/languages/class-wpml-language-collection.php', 'WPML_Language_Domain_Validation' => __DIR__ . '/../..' . '/classes/request-handling/class-wpml-language-domain-validation.php', 'WPML_Language_Domains' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-language-domains.php', 'WPML_Language_Filter_Bar' => __DIR__ . '/../..' . '/menu/wpml-language-filter-bar.class.php', 'WPML_Language_Pair_Records' => __DIR__ . '/../..' . '/classes/language/class-wpml-language-pair-records.php', 'WPML_Language_Per_Domain_SSO' => __DIR__ . '/../..' . '/classes/request-handling/class-wpml-language-per-domain-sso.php', 'WPML_Language_Records' => __DIR__ . '/../..' . '/classes/languages/class-wpml-language-records.php', 'WPML_Language_Resolution' => __DIR__ . '/../..' . '/classes/request-handling/class-wpml-language-resolution.php', 'WPML_Language_Switcher' => __DIR__ . '/../..' . '/classes/language-switcher/class-wpml-language-switcher.php', 'WPML_Language_Where_Clause' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-language-where-clause.php', 'WPML_Languages' => __DIR__ . '/../..' . '/inc/utilities/wpml-languages.class.php', 'WPML_Languages_AJAX' => __DIR__ . '/../..' . '/classes/languages/class-wpml-languages-ajax.php', 'WPML_Languages_Notices' => __DIR__ . '/../..' . '/classes/utilities/wpml-languages-notices.php', 'WPML_Links_Fixed_Status' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-links-fixed-status.php', 'WPML_Links_Fixed_Status_Factory' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-links-fixed-status-factory.php', 'WPML_Links_Fixed_Status_For_Posts' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-links-fixed-status-for-posts.php', 'WPML_Links_Fixed_Status_For_Strings' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-links-fixed-status-for-strings.php', 'WPML_Locale' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-locale.php', 'WPML_Log' => __DIR__ . '/../..' . '/classes/logging/interface-wpml-log.php', 'WPML_MO_File_Search' => __DIR__ . '/../..' . '/classes/class-wpml-mo-file-search.php', 'WPML_Main_Admin_Menu' => __DIR__ . '/../..' . '/classes/admin-menu/configurations/class-wpml-main-admin-menu.php', 'WPML_Media_Attachments_Duplication' => __DIR__ . '/../..' . '/classes/media/duplication/class-wpml-media-attachments-duplication.php', 'WPML_Media_Attachments_Duplication_Factory' => __DIR__ . '/../..' . '/classes/media/duplication/class-wpml-media-attachments-duplication-factory.php', 'WPML_Media_Exception' => __DIR__ . '/../..' . '/classes/media/class-wpml-media-exception.php', 'WPML_Media_Settings' => __DIR__ . '/../..' . '/classes/media/settings/class-wpml-media-settings.php', 'WPML_Media_Settings_Factory' => __DIR__ . '/../..' . '/classes/media/settings/class-wpml-media-settings-factory.php', 'WPML_Menu_Element' => __DIR__ . '/../..' . '/classes/translations/class-wpml-menu-element.php', 'WPML_Menu_Item_Sync' => __DIR__ . '/../..' . '/inc/wp-nav-menus/menu-item-sync.class.php', 'WPML_Menu_Sync_Display' => __DIR__ . '/../..' . '/menu/menu-sync/wpml-menu-sync-display.class.php', 'WPML_Menu_Sync_Functionality' => __DIR__ . '/../..' . '/inc/wp-nav-menus/wpml-menu-sync-functionality.class.php', 'WPML_Meta_Boxes_Post_Edit_Ajax' => __DIR__ . '/../..' . '/menu/post-menus/post-edit-screen/class-wpml-meta-boxes-post-edit-ajax.php', 'WPML_Meta_Boxes_Post_Edit_Ajax_Factory' => __DIR__ . '/../..' . '/menu/post-menus/post-edit-screen/class-wpml-meta-boxes-post-edit-ajax-factory.php', 'WPML_Meta_Boxes_Post_Edit_HTML' => __DIR__ . '/../..' . '/menu/post-menus/post-edit-screen/wpml-meta-boxes-post-edit-html.class.php', 'WPML_Mobile_Detect' => __DIR__ . '/../..' . '/lib/mobile-detect.php', 'WPML_Model_Attachments' => __DIR__ . '/../..' . '/classes/media/class-wpml-model-attachments.php', 'WPML_Multilingual_Options' => __DIR__ . '/../..' . '/classes/options/class-wpml-multilingual-options.php', 'WPML_Multilingual_Options_Array_Helper' => __DIR__ . '/../..' . '/classes/options/class-wpml-multilingual-options-array-helper.php', 'WPML_Multilingual_Options_Utils' => __DIR__ . '/../..' . '/classes/options/class-wpml-multilingual-options-utils.php', 'WPML_Name_Query_Filter' => __DIR__ . '/../..' . '/inc/query-filtering/wpml-name-query-filter.class.php', 'WPML_Name_Query_Filter_Translated' => __DIR__ . '/../..' . '/inc/query-filtering/wpml-name-query-filter-translated.class.php', 'WPML_Name_Query_Filter_Untranslated' => __DIR__ . '/../..' . '/inc/query-filtering/wpml-name-query-filter-untranslated.class.php', 'WPML_Nav_Menu' => __DIR__ . '/../..' . '/inc/wp-nav-menus/class-wpml-nav-menu.php', 'WPML_Nav_Menu_Actions' => __DIR__ . '/../..' . '/inc/taxonomy-term-translation/nav-menu-translation/wpml-nav-menu-actions.class.php', 'WPML_Non_Persistent_Cache' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-non-persistent-cache.php', 'WPML_Not_Doing_Ajax_On_Send_Exception' => __DIR__ . '/../..' . '/classes/ajax/class-wpml-ajax-response.php', 'WPML_Notice' => __DIR__ . '/../..' . '/classes/notices/class-wpml-notice.php', 'WPML_Notice_Action' => __DIR__ . '/../..' . '/classes/notices/class-wpml-notice-action.php', 'WPML_Notice_Render' => __DIR__ . '/../..' . '/classes/notices/class-wpml-notice-render.php', 'WPML_Notice_Show_On_Dashboard_And_WPML_Pages' => __DIR__ . '/../..' . '/classes/notices/pages/class-wpml-notice-show-on-dashboard-and-wpml-pages.php', 'WPML_Notices' => __DIR__ . '/../..' . '/classes/notices/class-wpml-notices.php', 'WPML_PHP_Functions' => __DIR__ . '/../..' . '/classes/wpml-wp/wpml-php-functions.php', 'WPML_PHP_Version_Check' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-dependencies/src/dependencies/class-wpml-php-version-check.php', 'WPML_Package_Translation_Job' => __DIR__ . '/../..' . '/inc/translation-jobs/jobs/wpml-package-translation-job.class.php', 'WPML_Page_Builder_Settings' => __DIR__ . '/../..' . '/classes/settings/class-wpml-page-builder-settings.php', 'WPML_Page_Name_Query_Filter' => __DIR__ . '/../..' . '/inc/query-filtering/wpml-pagename-query-filter.class.php', 'WPML_Plugin_Integration_Nexgen_Gallery' => __DIR__ . '/../..' . '/inc/plugin-integration-nextgen.php', 'WPML_Plugins_Check' => __DIR__ . '/../..' . '/classes/plugins/wpml-plugins-check.php', 'WPML_Post_Comments' => __DIR__ . '/../..' . '/inc/wpml-post-comments.class.php', 'WPML_Post_Custom_Field_Setting' => __DIR__ . '/../..' . '/classes/settings/class-wpml-post-custom-field-setting.php', 'WPML_Post_Custom_Field_Setting_Keys' => __DIR__ . '/../..' . '/classes/settings/class-wpml-post-custom-field-setting-keys.php', 'WPML_Post_Duplication' => __DIR__ . '/../..' . '/inc/post-translation/wpml-post-duplication.class.php', 'WPML_Post_Edit_Ajax' => __DIR__ . '/../..' . '/inc/wpml-post-edit-ajax.class.php', 'WPML_Post_Edit_Screen' => __DIR__ . '/../..' . '/classes/menu-elements/post-edit-screen/wpml-post-edit-screen.class.php', 'WPML_Post_Edit_Terms_Hooks' => __DIR__ . '/../..' . '/classes/post-translation/class-wpml-post-edit-terms-hooks.php', 'WPML_Post_Edit_Terms_Hooks_Factory' => __DIR__ . '/../..' . '/classes/post-translation/class-wpml-post-edit-terms-hooks-factory.php', 'WPML_Post_Element' => __DIR__ . '/../..' . '/classes/translations/class-wpml-post-element.php', 'WPML_Post_Hierarchy_Sync' => __DIR__ . '/../..' . '/inc/post-translation/wpml-post-hierarchy-sync.class.php', 'WPML_Post_Language_Filter' => __DIR__ . '/../..' . '/menu/post-menus/wpml-post-language-filter.class.php', 'WPML_Post_Status' => __DIR__ . '/../..' . '/classes/post-translation/class-wpml-post-status.php', 'WPML_Post_Status_Display' => __DIR__ . '/../..' . '/menu/wpml-post-status-display.class.php', 'WPML_Post_Status_Display_Factory' => __DIR__ . '/../..' . '/menu/class-wpml-post-status-display-factory.php', 'WPML_Post_Synchronization' => __DIR__ . '/../..' . '/inc/post-translation/wpml-post-synchronization.class.php', 'WPML_Post_Translation' => __DIR__ . '/../..' . '/inc/post-translation/wpml-post-translation.class.php', 'WPML_Post_Translation_Job' => __DIR__ . '/../..' . '/inc/translation-jobs/jobs/wpml-post-translation-job.class.php', 'WPML_Post_Types' => __DIR__ . '/../..' . '/classes/post-types/class-wpml-post-types.php', 'WPML_Posts_Listing_Page' => __DIR__ . '/../..' . '/menu/post-menus/wpml-posts-listing-page.class.php', 'WPML_Pre_Option_Page' => __DIR__ . '/../..' . '/classes/post-translation/class-wpml-pre-option-page.php', 'WPML_Privacy_Content' => __DIR__ . '/../..' . '/classes/privacy/class-wpml-privacy-content.php', 'WPML_Privacy_Content_Factory' => __DIR__ . '/../..' . '/classes/privacy/class-wpml-privacy-content-factory.php', 'WPML_Pro_Translation' => __DIR__ . '/../..' . '/inc/translation-proxy/wpml-pro-translation.class.php', 'WPML_Queried_Object' => __DIR__ . '/../..' . '/classes/utilities/wpml-queried-object.php', 'WPML_Query_Filter' => __DIR__ . '/../..' . '/classes/query-filtering/wpml-query-filter.class.php', 'WPML_Query_Parser' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-query-parser.php', 'WPML_Query_Utils' => __DIR__ . '/../..' . '/classes/query-filtering/wpml-query-utils.class.php', 'WPML_REST_Arguments_Sanitation' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-rest-arguments-sanitation.php', 'WPML_REST_Arguments_Validation' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-rest-arguments-validation.php', 'WPML_REST_Base' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-rest-base.php', 'WPML_REST_Extend_Args' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-rest-extend-args.php', 'WPML_REST_Extend_Args_Factory' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-rest-extend-args-factory.php', 'WPML_REST_Factory_Loader' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-rest-factory-loader.php', 'WPML_REST_Posts_Hooks' => __DIR__ . '/../..' . '/classes/REST-hooks/class-wpml-rest-posts-hooks.php', 'WPML_REST_Posts_Hooks_Factory' => __DIR__ . '/../..' . '/classes/REST-hooks/class-wpml-rest-posts-hooks-factory.php', 'WPML_REST_Request_Analyze' => __DIR__ . '/../..' . '/classes/request-handling/class-wpml-rest-request-analyze.php', 'WPML_REST_Request_Analyze_Factory' => __DIR__ . '/../..' . '/classes/request-handling/class-wpml-rest-request-analyze-factory.php', 'WPML_Redirect_By_Domain' => __DIR__ . '/../..' . '/classes/request-handling/redirection/wpml-redirect-by-domain.class.php', 'WPML_Redirect_By_Param' => __DIR__ . '/../..' . '/classes/request-handling/redirection/wpml-redirect-by-param.class.php', 'WPML_Redirect_By_Subdir' => __DIR__ . '/../..' . '/classes/request-handling/redirection/wpml-redirect-by-subdir.class.php', 'WPML_Redirection' => __DIR__ . '/../..' . '/classes/request-handling/redirection/wpml-redirection.class.php', 'WPML_Remote_String_Translation' => __DIR__ . '/../..' . '/classes/wpml-st/class-wpml-remote-string-translation.php', 'WPML_Remove_Pages_Not_In_Current_Language' => __DIR__ . '/../..' . '/classes/wp-core-hooks/post/class-wpml-remove-pages-not-in-current-language.php', 'WPML_Request' => __DIR__ . '/../..' . '/classes/request-handling/wpml-request.class.php', 'WPML_Requirements' => __DIR__ . '/../..' . '/classes/requirements/class-wpml-requirements.php', 'WPML_Requirements_Notification' => __DIR__ . '/../..' . '/classes/requirements/class-wpml-requirements-notifications.php', 'WPML_Resolve_Absolute_Url' => __DIR__ . '/../..' . '/classes/url-handling/resolver/wpml-resolve-absolute-url.php', 'WPML_Resolve_Absolute_Url_Cached' => __DIR__ . '/../..' . '/classes/url-handling/resolver/wpml-resolve-absolute-url-cached.php', 'WPML_Resolve_Object_Url_Helper' => __DIR__ . '/../..' . '/classes/url-handling/resolver/class-wpml-resolve-object-url-helper.php', 'WPML_Resolve_Object_Url_Helper_Factory' => __DIR__ . '/../..' . '/classes/url-handling/resolver/class-wpml-resolve-object-url-helper-factory.php', 'WPML_Rest' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-rest.php', 'WPML_Rewrite_Rules_Filter' => __DIR__ . '/../..' . '/classes/url-handling/converter/class-wpml-rewrite-rules-filter.php', 'WPML_Root_Page' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-root-page.php', 'WPML_Root_Page_Actions' => __DIR__ . '/../..' . '/inc/post-translation/wpml-root-page-actions.class.php', 'WPML_Rootpage_Redirect_By_Subdir' => __DIR__ . '/../..' . '/classes/request-handling/redirection/wpml-rootpage-redirect-by-subdir.class.php', 'WPML_SEO_HeadLangs' => __DIR__ . '/../..' . '/classes/seo/class-wpml-seo-headlangs.php', 'WPML_SP_And_PT_User' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-sp-and-pt-user.php', 'WPML_SP_User' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-sp-user.php', 'WPML_Save_Themes_Plugins_Localization_Options' => __DIR__ . '/../..' . '/classes/theme-plugin-localization/class-wpml-save-themes-plugins-localization-options.php', 'WPML_Save_Translation_Data_Action' => __DIR__ . '/../..' . '/inc/translation-jobs/helpers/wpml-save-translation-data-action.class.php', 'WPML_Score_Hierarchy' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-score-hierarchy.php', 'WPML_Set_Language' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-set-language.php', 'WPML_Settings_Filters' => __DIR__ . '/../..' . '/classes/settings/class-wpml-settings-filters.php', 'WPML_Settings_Helper' => __DIR__ . '/../..' . '/inc/setup/wpml-settings-helper.class.php', 'WPML_Simple_Language_Selector' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-simple-language-selector.php', 'WPML_Site_ID' => __DIR__ . '/../..' . '/classes/class-wpml-site-id.php', 'WPML_Slash_Management' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-slash-management.php', 'WPML_Slug_Filter' => __DIR__ . '/../..' . '/inc/url-handling/wpml-slug-filter.class.php', 'WPML_Slug_Resolution' => __DIR__ . '/../..' . '/inc/query-filtering/wpml-slug-resolution.class.php', 'WPML_Sticky_Posts_Lang_Filter' => __DIR__ . '/../..' . '/classes/sticky-posts/wpml-sticky-posts-lang-filter.php', 'WPML_Sticky_Posts_Loader' => __DIR__ . '/../..' . '/classes/sticky-posts/wpml-sticky-posts-loader.php', 'WPML_Sticky_Posts_Sync' => __DIR__ . '/../..' . '/classes/sticky-posts/wpml-sticky-posts-sync.php', 'WPML_String_Functions' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-string-functions.php', 'WPML_String_Translation_Job' => __DIR__ . '/../..' . '/inc/translation-jobs/jobs/wpml-string-translation-job.class.php', 'WPML_Sunrise_Lang_In_Domains' => __DIR__ . '/../..' . '/inc/tools/sunrise.php', 'WPML_Super_Globals_Validation' => __DIR__ . '/../..' . '/classes/request-handling/class-wpml-super-globals-validation.php', 'WPML_Support_Info' => __DIR__ . '/../..' . '/classes/support/class-wpml-support-info.php', 'WPML_Support_Info_UI' => __DIR__ . '/../..' . '/classes/support/class-wpml-support-info-ui.php', 'WPML_Support_Info_UI_Factory' => __DIR__ . '/../..' . '/classes/support/class-wpml-support-info-ui-factory.php', 'WPML_Support_Page' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-support-page.php', 'WPML_Sync_Custom_Field_Note' => __DIR__ . '/../..' . '/menu/post-menus/post-edit-screen/wpml-sync-custom-field-note.class.php', 'WPML_Sync_Custom_Fields' => __DIR__ . '/../..' . '/classes/custom-field-translation/class-wpml-sync-custom-fields.php', 'WPML_Sync_Term_Meta_Action' => __DIR__ . '/../..' . '/classes/taxonomy-term-translation/class-wpml-sync-term-meta-action.php', 'WPML_TF_AJAX_Exception' => __DIR__ . '/../..' . '/classes/translation-feedback/exceptions/wpml-tf-ajax-exception.php', 'WPML_TF_Backend_AJAX_Feedback_Edit_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-backend-ajax-feedback-edit-hooks.php', 'WPML_TF_Backend_AJAX_Feedback_Edit_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-backend-ajax-feedback-edit-hooks-factory.php', 'WPML_TF_Backend_Bulk_Actions' => __DIR__ . '/../..' . '/classes/translation-feedback/bulk-actions/wpml-tf-backend-bulk-actions.php', 'WPML_TF_Backend_Bulk_Actions_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/wpml-tf-backend-bulk-actions-factory.php', 'WPML_TF_Backend_Document_Information' => __DIR__ . '/../..' . '/classes/translation-feedback/utils/wpml-tf-backend-document-information.php', 'WPML_TF_Backend_Feedback_List_View' => __DIR__ . '/../..' . '/classes/translation-feedback/views/wpml-tf-backend-feedback-list-view.php', 'WPML_TF_Backend_Feedback_List_View_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/wpml-tf-backend-feedback-list-view-factory.php', 'WPML_TF_Backend_Feedback_Row_View' => __DIR__ . '/../..' . '/classes/translation-feedback/views/wpml-tf-backend-feedback-row-view.php', 'WPML_TF_Backend_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-backend-hooks.php', 'WPML_TF_Backend_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-backend-hooks-factory.php', 'WPML_TF_Backend_Notices' => __DIR__ . '/../..' . '/classes/translation-feedback/notices/wpml-tf-backend-notices.php', 'WPML_TF_Backend_Options_AJAX_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-backend-options-ajax-hooks.php', 'WPML_TF_Backend_Options_AJAX_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-backend-options-ajax-hooks-factory.php', 'WPML_TF_Backend_Options_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-backend-options-hooks.php', 'WPML_TF_Backend_Options_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-backend-options-hooks-factory.php', 'WPML_TF_Backend_Options_Scripts' => __DIR__ . '/../..' . '/classes/translation-feedback/scripts/wpml-tf-backend-options-scripts.php', 'WPML_TF_Backend_Options_Styles' => __DIR__ . '/../..' . '/classes/translation-feedback/styles/wpml-tf-backend-options-styles.php', 'WPML_TF_Backend_Options_View' => __DIR__ . '/../..' . '/classes/translation-feedback/views/wpml-tf-backend-options-view.php', 'WPML_TF_Backend_Post_List_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-backend-post-list-hooks.php', 'WPML_TF_Backend_Post_List_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-backend-post-list-hooks-factory.php', 'WPML_TF_Backend_Promote_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-backend-promote-hooks.php', 'WPML_TF_Backend_Promote_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-backend-promote-hooks-factory.php', 'WPML_TF_Backend_Scripts' => __DIR__ . '/../..' . '/classes/translation-feedback/scripts/wpml-tf-backend-scripts.php', 'WPML_TF_Backend_Styles' => __DIR__ . '/../..' . '/classes/translation-feedback/styles/wpml-tf-backend-styles.php', 'WPML_TF_Collection' => __DIR__ . '/../..' . '/classes/translation-feedback/model/wpml-tf-collection.php', 'WPML_TF_Collection_Filter_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/model/wpml-tf-collection-filter-factory.php', 'WPML_TF_Common_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-common-hooks.php', 'WPML_TF_Common_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-common-hooks-factory.php', 'WPML_TF_Data_Object_Post_Convert' => __DIR__ . '/../..' . '/classes/translation-feedback/model/wpml-tf-data-object-post-convert.php', 'WPML_TF_Data_Object_Storage' => __DIR__ . '/../..' . '/classes/translation-feedback/model/wpml-tf-data-object-storage.php', 'WPML_TF_Document_Information' => __DIR__ . '/../..' . '/classes/translation-feedback/utils/wpml-tf-document-information.php', 'WPML_TF_Feedback' => __DIR__ . '/../..' . '/classes/translation-feedback/model/feedback/wpml-tf-feedback.php', 'WPML_TF_Feedback_Collection' => __DIR__ . '/../..' . '/classes/translation-feedback/model/feedback/wpml-tf-feedback-collection.php', 'WPML_TF_Feedback_Collection_Filter' => __DIR__ . '/../..' . '/classes/translation-feedback/model/feedback/wpml-tf-feedback-collection-filter.php', 'WPML_TF_Feedback_Edit' => __DIR__ . '/../..' . '/classes/translation-feedback/model/wpml-tf-feedback-edit.php', 'WPML_TF_Feedback_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/model/feedback/wpml-tf-feedback-factory.php', 'WPML_TF_Feedback_Page_Filter' => __DIR__ . '/../..' . '/classes/translation-feedback/utils/wpml-tf-feedback-page-filter.php', 'WPML_TF_Feedback_Post_Convert' => __DIR__ . '/../..' . '/classes/translation-feedback/model/feedback/wpml-tf-feedback-post-convert.php', 'WPML_TF_Feedback_Query' => __DIR__ . '/../..' . '/classes/translation-feedback/model/wpml-tf-feedback-query.php', 'WPML_TF_Feedback_Reviewer' => __DIR__ . '/../..' . '/classes/translation-feedback/model/feedback/wpml-tf-feedback-reviewer.php', 'WPML_TF_Feedback_Status' => __DIR__ . '/../..' . '/classes/translation-feedback/model/feedback/wpml-tf-feedback-status.php', 'WPML_TF_Feedback_Update_Exception' => __DIR__ . '/../..' . '/classes/translation-feedback/exceptions/wpml-tf-feedback-update-exception.php', 'WPML_TF_Frontend_AJAX_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-frontend-ajax-hooks.php', 'WPML_TF_Frontend_AJAX_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-frontend-ajax-hooks-factory.php', 'WPML_TF_Frontend_Display_Requirements' => __DIR__ . '/../..' . '/classes/translation-feedback/utils/wpml-tf-frontend-display-requirements.php', 'WPML_TF_Frontend_Feedback_View' => __DIR__ . '/../..' . '/classes/translation-feedback/views/wpml-tf-frontend-feedback-view.php', 'WPML_TF_Frontend_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-frontend-hooks.php', 'WPML_TF_Frontend_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-frontend-hooks-factory.php', 'WPML_TF_Frontend_Scripts' => __DIR__ . '/../..' . '/classes/translation-feedback/scripts/wpml-tf-frontend-scripts.php', 'WPML_TF_Frontend_Styles' => __DIR__ . '/../..' . '/classes/translation-feedback/styles/wpml-tf-frontend-styles.php', 'WPML_TF_Message' => __DIR__ . '/../..' . '/classes/translation-feedback/model/message/wpml-tf-message.php', 'WPML_TF_Message_Collection' => __DIR__ . '/../..' . '/classes/translation-feedback/model/message/wpml-tf-message-collection.php', 'WPML_TF_Message_Collection_Filter' => __DIR__ . '/../..' . '/classes/translation-feedback/model/message/wpml-tf-message-collection-filter.php', 'WPML_TF_Message_Post_Convert' => __DIR__ . '/../..' . '/classes/translation-feedback/model/message/wpml-tf-message-post-convert.php', 'WPML_TF_Module' => __DIR__ . '/../..' . '/classes/translation-feedback/wpml-tf-module.php', 'WPML_TF_Post_Rating_Metrics' => __DIR__ . '/../..' . '/classes/translation-feedback/utils/wpml-tf-post-rating-metrics.php', 'WPML_TF_Promote_Notices' => __DIR__ . '/../..' . '/classes/translation-feedback/notices/wpml-tf-promote-notices.php', 'WPML_TF_Settings' => __DIR__ . '/../..' . '/classes/translation-feedback/settings/wpml-tf-settings.php', 'WPML_TF_Settings_Handler' => __DIR__ . '/../..' . '/classes/translation-feedback/settings/wpml-tf-settings-handler.php', 'WPML_TF_Settings_Read' => __DIR__ . '/../..' . '/classes/translation-feedback/settings/wpml-tf-settings-read.php', 'WPML_TF_Settings_Write' => __DIR__ . '/../..' . '/classes/translation-feedback/settings/wpml-tf-settings-write.php', 'WPML_TF_TP_Ratings_Synchronize' => __DIR__ . '/../..' . '/classes/translation-feedback/cron/actions/wpml-tf-tp-ratings-synchronize.php', 'WPML_TF_TP_Ratings_Synchronize_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/wpml-tf-tp-ratings-synchronize-factory.php', 'WPML_TF_TP_Responses' => __DIR__ . '/../..' . '/classes/translation-feedback/model/feedback/wpml-tf-tp-responses.php', 'WPML_TF_Translation_Queue_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-translation-queue-hooks.php', 'WPML_TF_Translation_Queue_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-translation-queue-hooks-factory.php', 'WPML_TF_Translation_Service' => __DIR__ . '/../..' . '/classes/translation-feedback/utils/wpml-tf-translation-service.php', 'WPML_TF_Translation_Service_Change_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-translation-service-change-hooks.php', 'WPML_TF_Translation_Service_Change_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-translation-service-change-hooks-factory.php', 'WPML_TF_WP_Cron_Events' => __DIR__ . '/../..' . '/classes/translation-feedback/cron/wpml-tf-wp-cron-events.php', 'WPML_TF_WP_Cron_Events_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-wp-cron-event-factory.php', 'WPML_TF_XML_RPC_Feedback_Update' => __DIR__ . '/../..' . '/classes/translation-feedback/xml-rpc/wpml-tf-xml-rpc-feedback-update.php', 'WPML_TF_XML_RPC_Feedback_Update_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/wpml-tf-xml-rpc-feedback-update-factory.php', 'WPML_TF_XML_RPC_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tf-xml-rpc-hooks.php', 'WPML_TF_XML_RPC_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tf-xml-rpc-hooks-factory.php', 'WPML_TM_AJAX' => __DIR__ . '/../..' . '/classes/ajax/class-wpml-tm-ajax.php', 'WPML_TM_AJAX_Factory_Obsolete' => __DIR__ . '/../..' . '/classes/class-wpml-tm-ajax-factory.php', 'WPML_TM_AMS_API' => __DIR__ . '/../..' . '/classes/ATE/API/class-wpml-tm-ams-api.php', 'WPML_TM_AMS_ATE_Console_Section' => __DIR__ . '/../..' . '/classes/menu/ams-ate-console/class-wpml-tm-ams-ate-console-section.php', 'WPML_TM_AMS_ATE_Console_Section_Factory' => __DIR__ . '/../..' . '/classes/menu/ams-ate-console/class-wpml-tm-ams-ate-console-section-factory.php', 'WPML_TM_AMS_ATE_Factories' => __DIR__ . '/../..' . '/classes/ATE/class-wpml-tm-ams-ate-factories.php', 'WPML_TM_AMS_Synchronize_Actions' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ams-synchronize-actions.php', 'WPML_TM_AMS_Synchronize_Actions_Factory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ams-synchronize-actions-factory.php', 'WPML_TM_AMS_Synchronize_Users_On_Access_Denied' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ams-synchronize-users-on-access-denied.php', 'WPML_TM_AMS_Synchronize_Users_On_Access_Denied_Factory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ams-synchronize-users-on-access-denied-factory.php', 'WPML_TM_AMS_Translator_Activation_Records' => __DIR__ . '/../..' . '/classes/ATE/class-wpml-tm-ams-translator-activation-records.php', 'WPML_TM_AMS_Users' => __DIR__ . '/../..' . '/classes/ATE/class-wpml-tm-ams-users.php', 'WPML_TM_API' => __DIR__ . '/../..' . '/classes/class-wpml-tm-api.php', 'WPML_TM_API_Hook_Links' => __DIR__ . '/../..' . '/classes/API/Hooks/class-wpml-tm-api-hook-links.php', 'WPML_TM_API_Hooks_Factory' => __DIR__ . '/../..' . '/classes/API/Hooks/class-wpml-tm-api-hooks-factory.php', 'WPML_TM_ATE' => __DIR__ . '/../..' . '/classes/ATE/class-wpml-tm-ate.php', 'WPML_TM_ATE_AMS_Endpoints' => __DIR__ . '/../..' . '/classes/ATE/class-wpml-tm-ate-ams-endpoints.php', 'WPML_TM_ATE_API' => __DIR__ . '/../..' . '/classes/ATE/API/class-wpml-tm-ate-api.php', 'WPML_TM_ATE_API_Error' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-api-error.php', 'WPML_TM_ATE_Authentication' => __DIR__ . '/../..' . '/classes/ATE/API/class-wpml-tm-ate-authentication.php', 'WPML_TM_ATE_Job' => __DIR__ . '/../..' . '/classes/ATE/class-wpml-tm-ate-job.php', 'WPML_TM_ATE_Job_Data_Fallback' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-job-data-fallback-action.php', 'WPML_TM_ATE_Job_Data_Fallback_Factory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-job-data-fallback-action-factory.php', 'WPML_TM_ATE_Job_Repository' => __DIR__ . '/../..' . '/classes/ATE/models/class-wpml-tm-ate-job-repository.php', 'WPML_TM_ATE_Jobs' => __DIR__ . '/../..' . '/classes/ATE/class-wpml-tm-ate-jobs.php', 'WPML_TM_ATE_Jobs_Actions' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-jobs-actions.php', 'WPML_TM_ATE_Jobs_Actions_Factory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-jobs-actions-factory.php', 'WPML_TM_ATE_Jobs_Store_Actions' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-jobs-store-actions.php', 'WPML_TM_ATE_Jobs_Store_Actions_Factory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-jobs-store-actions-factory.php', 'WPML_TM_ATE_Models_Job_Create' => __DIR__ . '/../..' . '/classes/ATE/models/class-wpml-tm-ate-models-job-create.php', 'WPML_TM_ATE_Models_Job_File' => __DIR__ . '/../..' . '/classes/ATE/models/class-wpml-tm-ate-models-job-file.php', 'WPML_TM_ATE_Models_Language' => __DIR__ . '/../..' . '/classes/ATE/models/class-wpml-tm-ate-models-language.php', 'WPML_TM_ATE_Post_Edit_Actions' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-post-edit-actions.php', 'WPML_TM_ATE_Post_Edit_Actions_Factory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-post-edit-actions-factory.php', 'WPML_TM_ATE_Request_Activation_Email' => __DIR__ . '/../..' . '/classes/emails/ATE/class-wpml-tm-ate-request-activation-email.php', 'WPML_TM_ATE_Required_Actions_Base' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-required-actions-base.php', 'WPML_TM_ATE_Required_Rest_Base' => __DIR__ . '/../..' . '/classes/ATE/REST/class-wpml-tm-ate-required-rest-base.php', 'WPML_TM_ATE_Status' => __DIR__ . '/../..' . '/classes/ATE/class-wpml-tm-ate-status.php', 'WPML_TM_ATE_Translator_Login' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-translator-login.php', 'WPML_TM_ATE_Translator_Login_Factory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-translator-login-factory.php', 'WPML_TM_ATE_Translator_Message_Classic_Editor' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-translator-message-classic-editor.php', 'WPML_TM_ATE_Translator_Message_Classic_Editor_Factory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-ate-translator-message-classic-editor-factory.php', 'WPML_TM_Action_Helper' => __DIR__ . '/../..' . '/inc/actions/wpml-tm-action-helper.class.php', 'WPML_TM_Add_TP_ID_Column_To_Translation_Status' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-tm-add-tpid-column-to-translation-status.php', 'WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Core_Status' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-tm-add-tp-revision-and-ts-status-columns-to-core-status.php', 'WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Translation_Status' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-tm-add-tp-revision-and-ts-status-columns-to-translation-status.php', 'WPML_TM_Admin_Menus_Factory' => __DIR__ . '/../..' . '/classes/menu/wpml-tm-admin-menus-factory.php', 'WPML_TM_Admin_Menus_Hooks' => __DIR__ . '/../..' . '/classes/menu/wpml-tm-admin-menus-hooks.php', 'WPML_TM_Admin_Sections' => __DIR__ . '/../..' . '/classes/menu/class-wpml-tm-admin-sections.php', 'WPML_TM_Ajax_Factory' => __DIR__ . '/../..' . '/classes/class-wpml-tm-ajax-factory-2.php', 'WPML_TM_Array_Search' => __DIR__ . '/../..' . '/classes/utils/class-wpml-array-search.php', 'WPML_TM_Batch_Report' => __DIR__ . '/../..' . '/classes/emails/report/class-wpml-tm-batch-report.php', 'WPML_TM_Batch_Report_Email_Builder' => __DIR__ . '/../..' . '/classes/emails/report/class-wpml-tm-batch-report-email-builder.php', 'WPML_TM_Batch_Report_Email_Process' => __DIR__ . '/../..' . '/classes/emails/report/class-wpml-tm-batch-report-email-process.php', 'WPML_TM_Batch_Report_Hooks' => __DIR__ . '/../..' . '/classes/emails/report/class-wpml-tm-batch-report-hooks.php', 'WPML_TM_Blog_Translators' => __DIR__ . '/../..' . '/inc/local-translation/wpml-tm-blog-translators.class.php', 'WPML_TM_CMS_ID' => __DIR__ . '/../..' . '/classes/translation-proxy/class-wpml-tm-cms-id.php', 'WPML_TM_Count' => __DIR__ . '/../..' . '/classes/words-count/count/wpml-tm-count.php', 'WPML_TM_Count_Composite' => __DIR__ . '/../..' . '/classes/words-count/count/wpml-tm-count-composite.php', 'WPML_TM_Dashboard' => __DIR__ . '/../..' . '/menu/dashboard/wpml-tm-dashboard.class.php', 'WPML_TM_Dashboard_Display_Filter' => __DIR__ . '/../..' . '/classes/menu/dashboard/class-wpml-tm-dashboard-display-filter.php', 'WPML_TM_Dashboard_Document_Row' => __DIR__ . '/../..' . '/classes/menu/dashboard/class-wpml-tm-dashboard-document-row.php', 'WPML_TM_Dashboard_Pagination' => __DIR__ . '/../..' . '/classes/menu/dashboard/class-wpml-tm-dashboard-pagination.php', 'WPML_TM_Default_Settings' => __DIR__ . '/../..' . '/classes/settings/wpml-tm-default-settings.php', 'WPML_TM_Default_Settings_Factory' => __DIR__ . '/../..' . '/classes/settings/wpml-tm-default-settings-factory.php', 'WPML_TM_Editor_Job_Save' => __DIR__ . '/../..' . '/classes/menu/translation-editor/class-wpml-tm-editor-job-save.php', 'WPML_TM_Editor_Notice' => __DIR__ . '/../..' . '/classes/requirements/class-wpml-tm-editor-notice.php', 'WPML_TM_Editor_Save_Ajax_Action' => __DIR__ . '/../..' . '/classes/menu/translation-editor/class-wpml-tm-editor-save-ajax-action.php', 'WPML_TM_Editors' => __DIR__ . '/../..' . '/classes/editor/class-wpml-tm-editors.php', 'WPML_TM_Element_Translations' => __DIR__ . '/../..' . '/inc/core/wpml-tm-element-translations.class.php', 'WPML_TM_Email_Jobs_Summary_View' => __DIR__ . '/../..' . '/classes/emails/report/class-wpml-tm-email-jobs-summary-view.php', 'WPML_TM_Email_Notification_View' => __DIR__ . '/../..' . '/classes/emails/notification/wpml-tm-email-notification-view.php', 'WPML_TM_Email_Twig_Template_Factory' => __DIR__ . '/../..' . '/classes/emails/wpml-tm-email-twig-template-factory.php', 'WPML_TM_Email_View' => __DIR__ . '/../..' . '/classes/emails/wpml-tm-email-view.php', 'WPML_TM_Emails_Settings' => __DIR__ . '/../..' . '/classes/menu/translation-notifications/class-wpml-tm-emails-settings.php', 'WPML_TM_Emails_Settings_Factory' => __DIR__ . '/../..' . '/classes/menu/translation-notifications/class-wpml-tm-emails-settings-factory.php', 'WPML_TM_Field_Content_Action' => __DIR__ . '/../..' . '/classes/translation-jobs/class-wpml-tm-field-content-action.php', 'WPML_TM_Field_Type_Encoding' => __DIR__ . '/../..' . '/classes/translation-jobs/class-wpml-tm-field-type-encoding.php', 'WPML_TM_Field_Type_Sanitizer' => __DIR__ . '/../..' . '/classes/menu/translation-editor/class-wpml-tm-field-type-sanitizer.php', 'WPML_TM_General_Xliff_Import' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-general-xliff-import.php', 'WPML_TM_General_Xliff_Reader' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-general-xliff-reader.php', 'WPML_TM_ICL20MigrationException' => __DIR__ . '/../..' . '/classes/ICL-20-migration/class-wpml-tm-icl20-migration-exception.php', 'WPML_TM_ICL20_Acknowledge' => __DIR__ . '/../..' . '/classes/ICL-20-migration/remote/class-wpml-tm-icl20-acknowledge.php', 'WPML_TM_ICL20_Migrate' => __DIR__ . '/../..' . '/classes/ICL-20-migration/class-wpml-tm-icl20-migrate.php', 'WPML_TM_ICL20_Migrate_Local' => __DIR__ . '/../..' . '/classes/ICL-20-migration/class-wpml-tm-icl20-migrate-local.php', 'WPML_TM_ICL20_Migrate_Remote' => __DIR__ . '/../..' . '/classes/ICL-20-migration/class-wpml-tm-icl20-migrate-remote.php', 'WPML_TM_ICL20_Migration_AJAX' => __DIR__ . '/../..' . '/classes/ICL-20-migration/class-wpml-tm-icl20-migration-ajax.php', 'WPML_TM_ICL20_Migration_Container' => __DIR__ . '/../..' . '/classes/ICL-20-migration/remote/class-wpml-tm-icl20-migration-container.php', 'WPML_TM_ICL20_Migration_Factory' => __DIR__ . '/../..' . '/classes/ICL-20-migration/class-wpml-tm-icl20-migration-factory.php', 'WPML_TM_ICL20_Migration_Loader' => __DIR__ . '/../..' . '/classes/ICL-20-migration/class-wpml-tm-icl20-migration-loader.php', 'WPML_TM_ICL20_Migration_Locks' => __DIR__ . '/../..' . '/classes/ICL-20-migration/ui/class-wpml-tm-icl20-migration-locks.php', 'WPML_TM_ICL20_Migration_Notices' => __DIR__ . '/../..' . '/classes/ICL-20-migration/ui/class-wpml-tm-icl20-migration-notices.php', 'WPML_TM_ICL20_Migration_Progress' => __DIR__ . '/../..' . '/classes/ICL-20-migration/class-wpml-tm-icl20-migration-progress.php', 'WPML_TM_ICL20_Migration_Status' => __DIR__ . '/../..' . '/classes/ICL-20-migration/class-wpml-tm-icl20-migration-status.php', 'WPML_TM_ICL20_Migration_Support' => __DIR__ . '/../..' . '/classes/ICL-20-migration/ui/class-wpml-tm-icl20-migration-support.php', 'WPML_TM_ICL20_Project' => __DIR__ . '/../..' . '/classes/ICL-20-migration/remote/class-wpml-tm-icl20-project-migration.php', 'WPML_TM_ICL20_Token' => __DIR__ . '/../..' . '/classes/ICL-20-migration/remote/class-wpml-tm-icl20-token.php', 'WPML_TM_ICL_Translate_Job' => __DIR__ . '/../..' . '/classes/records/class-wpml-tm-icl-translate-job.php', 'WPML_TM_ICL_Translation_Status' => __DIR__ . '/../..' . '/classes/records/class-wpml-tm-icl-translation-status.php', 'WPML_TM_ICL_Translations' => __DIR__ . '/../..' . '/classes/records/class-wpml-tm-icl-translations.php', 'WPML_TM_Job_Action' => __DIR__ . '/../..' . '/classes/translation-jobs/class-wpml-tm-job-action.php', 'WPML_TM_Job_Action_Factory' => __DIR__ . '/../..' . '/classes/translation-jobs/class-wpml-tm-job-action-factory.php', 'WPML_TM_Job_Created' => __DIR__ . '/../..' . '/classes/ATE/models/class-wpml-tm-job-created.php', 'WPML_TM_Job_Element_Entity' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-job-element-entity.php', 'WPML_TM_Job_Elements_Repository' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-job-elements-repository.php', 'WPML_TM_Job_Entity' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-job-entity.php', 'WPML_TM_Job_Factory_User' => __DIR__ . '/../..' . '/classes/abstract/class-wpml-tm-job-factory-user.php', 'WPML_TM_Job_Layout' => __DIR__ . '/../..' . '/classes/translation-jobs/class-wpml-tm-job-layout.php', 'WPML_TM_Job_TS_Status' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-job-ts-status.php', 'WPML_TM_Jobs_Batch' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-jobs-batch.php', 'WPML_TM_Jobs_Collection' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-jobs-collection.php', 'WPML_TM_Jobs_Daily_Summary_Report_Model' => __DIR__ . '/../..' . '/classes/emails/notification/summary/class-wpml-tm-jobs-daily-summary-report-model.php', 'WPML_TM_Jobs_Date_Range' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-jobs-date-range.php', 'WPML_TM_Jobs_Deadline_Cron_Hooks' => __DIR__ . '/../..' . '/classes/jobs-deadline/wpml-tm-jobs-deadline-cron-hooks.php', 'WPML_TM_Jobs_Deadline_Cron_Hooks_Factory' => __DIR__ . '/../..' . '/classes/jobs-deadline/wpml-tm-jobs-deadline-cron-hooks-factory.php', 'WPML_TM_Jobs_Deadline_Estimate' => __DIR__ . '/../..' . '/classes/jobs-deadline/wpml-tm-jobs-deadline-estimate.php', 'WPML_TM_Jobs_Deadline_Estimate_AJAX_Action' => __DIR__ . '/../..' . '/classes/jobs-deadline/wpml-tm-jobs-deadline-estimate-ajax-action.php', 'WPML_TM_Jobs_Deadline_Estimate_AJAX_Action_Factory' => __DIR__ . '/../..' . '/classes/jobs-deadline/wpml-tm-jobs-deadline-estimate-ajax-action-factory.php', 'WPML_TM_Jobs_Deadline_Estimate_Factory' => __DIR__ . '/../..' . '/classes/jobs-deadline/wpml-tm-jobs-deadline-estimate-factory.php', 'WPML_TM_Jobs_List_Script_Data' => __DIR__ . '/../..' . '/classes/menu/jobs-list/class-wpml-tm-jobs-list-script-data.php', 'WPML_TM_Jobs_List_Services' => __DIR__ . '/../..' . '/classes/menu/jobs-list/class-wpml-tm-jobs-list-services.php', 'WPML_TM_Jobs_List_Translated_By_Filters' => __DIR__ . '/../..' . '/classes/menu/jobs-list/class-wpml-tm-jobs-list-translated_by_filters.php', 'WPML_TM_Jobs_List_Translators' => __DIR__ . '/../..' . '/classes/menu/jobs-list/class-wpml-tm-jobs-list-translators.php', 'WPML_TM_Jobs_Migration_State' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-tm-jobs-migration-state.php', 'WPML_TM_Jobs_Needs_Update_Param' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-jobs-needs-update-param.php', 'WPML_TM_Jobs_Repository' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-jobs-repository.php', 'WPML_TM_Jobs_Search_Params' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-jobs-search-params.php', 'WPML_TM_Jobs_Sorting_Param' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-jobs-sorting-param.php', 'WPML_TM_Jobs_Summary' => __DIR__ . '/../..' . '/classes/emails/notification/summary/class-wpml-tm-jobs-summary.php', 'WPML_TM_Jobs_Summary_Report' => __DIR__ . '/../..' . '/classes/emails/notification/summary/class-wpml-tm-jobs-summary-report.php', 'WPML_TM_Jobs_Summary_Report_Hooks' => __DIR__ . '/../..' . '/classes/emails/notification/summary/wpml-tm-jobs-summary-report-hooks.php', 'WPML_TM_Jobs_Summary_Report_Hooks_Factory' => __DIR__ . '/../..' . '/classes/emails/notification/summary/wpml-tm-jobs-summary-report-hooks-factory.php', 'WPML_TM_Jobs_Summary_Report_Model' => __DIR__ . '/../..' . '/classes/emails/notification/summary/interface-wpml-tm-jobs-summary-report-model.php', 'WPML_TM_Jobs_Summary_Report_Process' => __DIR__ . '/../..' . '/classes/emails/notification/summary/class-wpml-tm-jobs-summary-report-process.php', 'WPML_TM_Jobs_Summary_Report_Process_Factory' => __DIR__ . '/../..' . '/classes/emails/notification/summary/class-wpml-tm-jobs-summary-report-process-factory.php', 'WPML_TM_Jobs_Summary_Report_View' => __DIR__ . '/../..' . '/classes/emails/notification/summary/class-wpml-tm-jobs-summary-report-view.php', 'WPML_TM_Jobs_Weekly_Summary_Report_Model' => __DIR__ . '/../..' . '/classes/emails/notification/summary/class-wpml-tm-jobs-weekly-summary-report-model.php', 'WPML_TM_Last_Picked_Up' => __DIR__ . '/../..' . '/classes/menu/tp-polling/wpml-tm-last-picked-up.php', 'WPML_TM_Loader' => __DIR__ . '/../..' . '/classes/class-wpml-tm-loader.php', 'WPML_TM_Log' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tm-log.php', 'WPML_TM_MCS_ATE' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-ate.php', 'WPML_TM_MCS_ATE_Strings' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-ate-strings.php', 'WPML_TM_MCS_Custom_Field_Settings_Menu' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-custom-field-settings-menu.php', 'WPML_TM_MCS_Custom_Field_Settings_Menu_Factory' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-custom-field-settings-menu-factory.php', 'WPML_TM_MCS_Pagination_Ajax' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-pagination-ajax.php', 'WPML_TM_MCS_Pagination_Ajax_Factory' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-pagination-ajax-factory.php', 'WPML_TM_MCS_Pagination_Render' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-pagination-render.php', 'WPML_TM_MCS_Pagination_Render_Factory' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-pagination-render-factory.php', 'WPML_TM_MCS_Post_Custom_Field_Settings_Menu' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-post-custom-field-settings-menu.php', 'WPML_TM_MCS_Search_Factory' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-search-factory.php', 'WPML_TM_MCS_Search_Render' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-search-render.php', 'WPML_TM_MCS_Section_UI' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-section-ui.php', 'WPML_TM_MCS_Term_Custom_Field_Settings_Menu' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-mcs-term-custom-field-settings-menu.php', 'WPML_TM_Mail_Notification' => __DIR__ . '/../..' . '/classes/emails/wpml-tm-mail-notification.php', 'WPML_TM_Menus' => __DIR__ . '/../..' . '/menu/wpml-tm-menus.class.php', 'WPML_TM_Menus_Management' => __DIR__ . '/../..' . '/menu/wpml-tm-menus-management.php', 'WPML_TM_Menus_Settings' => __DIR__ . '/../..' . '/menu/wpml-tm-menus-settings.php', 'WPML_TM_Old_Editor' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-old-editor.php', 'WPML_TM_Old_Editor_Factory' => __DIR__ . '/../..' . '/classes/ATE/Hooks/class-wpml-tm-old-editor-factory.php', 'WPML_TM_Old_Jobs_Editor' => __DIR__ . '/../..' . '/classes/editor/class-wpml-tm-old-jobs-editor.php', 'WPML_TM_Only_I_Language_Pairs' => __DIR__ . '/../..' . '/classes/user/class-wpml-only-i-language-pairs.php', 'WPML_TM_Options_Ajax' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-options-ajax.php', 'WPML_TM_Overdue_Jobs_Report' => __DIR__ . '/../..' . '/classes/emails/overdue-report/wpml-tm-overdue-jobs-report.php', 'WPML_TM_Overdue_Jobs_Report_Factory' => __DIR__ . '/../..' . '/classes/emails/overdue-report/wpml-tm-overdue-jobs-report-factory.php', 'WPML_TM_Package_Element' => __DIR__ . '/../..' . '/classes/words-count/wpml-tm-package-element.php', 'WPML_TM_Page' => __DIR__ . '/../..' . '/classes/class-wpml-tm-page.php', 'WPML_TM_Parent_Filter_Ajax' => __DIR__ . '/../..' . '/classes/translation-dashboard/class-wpml-tm-parent-filter-ajax.php', 'WPML_TM_Parent_Filter_Ajax_Factory' => __DIR__ . '/../..' . '/classes/translation-dashboard/class-wpml-tm-parent-filter-ajax-factory.php', 'WPML_TM_Pickup_Mode_Ajax' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-tm-pickup-mode-ajax.php', 'WPML_TM_Polling_Box' => __DIR__ . '/../..' . '/classes/menu/tp-polling/class-wpml-tm-polling-box.php', 'WPML_TM_Post' => __DIR__ . '/../..' . '/classes/words-count/class-wpml-tm-post.php', 'WPML_TM_Post_Actions' => __DIR__ . '/../..' . '/inc/actions/wpml-tm-post-actions.class.php', 'WPML_TM_Post_Data' => __DIR__ . '/../..' . '/classes/helpers/class-wpml-tm-post-data.php', 'WPML_TM_Post_Edit_Custom_Field_Settings_Menu' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-tm-post-edit-custom-field-settings-menu.php', 'WPML_TM_Post_Edit_Link_Anchor' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-tm-post-edit-link-anchor.php', 'WPML_TM_Post_Edit_Notices' => __DIR__ . '/../..' . '/classes/notices/wpml-tm-post-edit-notices.php', 'WPML_TM_Post_Edit_Notices_Factory' => __DIR__ . '/../..' . '/classes/notices/wpml-tm-post-edit-notices-factory.php', 'WPML_TM_Post_Edit_TM_Editor_Mode' => __DIR__ . '/../..' . '/classes/post-edit-screen/class-wpml-tm-post-edit-tm-editor-mode.php', 'WPML_TM_Post_Edit_TM_Editor_Select_Factory' => __DIR__ . '/../..' . '/classes/post-edit-screen/class-wpml-tm-post-edit-tm-editor-select-factory.php', 'WPML_TM_Post_Job_Entity' => __DIR__ . '/../..' . '/classes/jobs/class-wpml-tm-post-job-entity.php', 'WPML_TM_Post_Link' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-tm-post-link.php', 'WPML_TM_Post_Link_Anchor' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-tm-post-link-anchor.php', 'WPML_TM_Post_Link_Factory' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-tm-post-link-factory.php', 'WPML_TM_Post_Target_Lang_Filter' => __DIR__ . '/../..' . '/classes/filters/class-wpml-tm-post-target-lang-filter.php', 'WPML_TM_Post_View_Link_Anchor' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-tm-post-view-link-anchor.php', 'WPML_TM_Post_View_Link_Title' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-tm-post-view-link-title.php', 'WPML_TM_Privacy_Content' => __DIR__ . '/../..' . '/classes/privacy/class-wpml-tm-privacy-content.php', 'WPML_TM_Privacy_Content_Factory' => __DIR__ . '/../..' . '/classes/privacy/class-wpml-tm-privacy-content-factory.php', 'WPML_TM_REST_AMS_Clients' => __DIR__ . '/../..' . '/classes/ATE/REST/class-wpml-tm-rest-ams-clients.php', 'WPML_TM_REST_AMS_Clients_Factory' => __DIR__ . '/../..' . '/classes/ATE/REST/class-wpml-tm-rest-ams-clients-factory.php', 'WPML_TM_REST_ATE_API' => __DIR__ . '/../..' . '/classes/ATE/REST/class-wpml-tm-rest-ate-api.php', 'WPML_TM_REST_ATE_API_Factory' => __DIR__ . '/../..' . '/classes/ATE/REST/class-wpml-tm-rest-ate-api-factory.php', 'WPML_TM_REST_ATE_Jobs' => __DIR__ . '/../..' . '/classes/ATE/REST/class-wpml-tm-rest-ate-jobs.php', 'WPML_TM_REST_ATE_Jobs_Factory' => __DIR__ . '/../..' . '/classes/ATE/REST/class-wpml-tm-rest-ate-jobs-factory.php', 'WPML_TM_REST_Apply_TP_Translation' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-tm-rest-apply-tp-translation.php', 'WPML_TM_REST_Apply_TP_Translation_Factory' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-tm-rest-apply-tp-translation-factory.php', 'WPML_TM_REST_Batch_Sync' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-tm-rest-batch-sync.php', 'WPML_TM_REST_Batch_Sync_Factory' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-tm-rest-batch-sync-factory.php', 'WPML_TM_REST_Jobs' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-tm-rest-jobs.php', 'WPML_TM_REST_Jobs_Factory' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-tm-rest-jobs-factory.php', 'WPML_TM_REST_TP_XLIFF' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-tm-rest-tp-xliff.php', 'WPML_TM_REST_TP_XLIFF_Factory' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-tm-rest-tp-xliff-factory.php', 'WPML_TM_REST_XLIFF' => __DIR__ . '/../..' . '/classes/ATE/REST/class-wpml-tm-rest-xliff.php', 'WPML_TM_REST_XLIFF_Factory' => __DIR__ . '/../..' . '/classes/ATE/REST/class-wpml-tm-rest-xliff-factory.php', 'WPML_TM_Record_User' => __DIR__ . '/../..' . '/classes/abstract/class-wpml-tm-record-user.php', 'WPML_TM_Records' => __DIR__ . '/../..' . '/classes/records/class-wpml-tm-records.php', 'WPML_TM_Requirements' => __DIR__ . '/../..' . '/classes/class-wpml-tm-requirements.php', 'WPML_TM_Reset_Options_Filter' => __DIR__ . '/../..' . '/classes/reset/class-wpml-tm-reset-options-filter.php', 'WPML_TM_Reset_Options_Filter_Factory' => __DIR__ . '/../..' . '/classes/reset/class-wpml-tm-reset-options-filter-factory.php', 'WPML_TM_Resources_Factory' => __DIR__ . '/../..' . '/classes/class-wpml-tm-resources-factory.php', 'WPML_TM_Rest_Download_File' => __DIR__ . '/../..' . '/classes/API/REST/class-wpml-tm-rest-download-file.php', 'WPML_TM_Rest_Job_Progress' => __DIR__ . '/../..' . '/classes/API/REST/jobs/class-wpml-tm-rest-job-progress.php', 'WPML_TM_Rest_Job_Translator_Name' => __DIR__ . '/../..' . '/classes/API/REST/jobs/class-wpml-tm-rest-job-translator-name.php', 'WPML_TM_Rest_Jobs_Columns' => __DIR__ . '/../..' . '/classes/API/REST/jobs/class-wpml-tm-rest-jobs-columns.php', 'WPML_TM_Rest_Jobs_Criteria_Parser' => __DIR__ . '/../..' . '/classes/API/REST/jobs/class-wpml-tm-rest-jobs-criteria-parser.php', 'WPML_TM_Rest_Jobs_Element_Info' => __DIR__ . '/../..' . '/classes/API/REST/jobs/class-wpml-tm-rest-jobs-element-info.php', 'WPML_TM_Rest_Jobs_Language_Names' => __DIR__ . '/../..' . '/classes/API/REST/jobs/class-wpml-tm-rest-jobs-language-names.php', 'WPML_TM_Rest_Jobs_Package_Helper_Factory' => __DIR__ . '/../..' . '/classes/API/REST/jobs/class-wpml-tm-rest-jobs-package-helper-factory.php', 'WPML_TM_Rest_Jobs_Translation_Service' => __DIR__ . '/../..' . '/classes/API/REST/jobs/class-wpml-tm-rest-jobs-translation-service.php', 'WPML_TM_Rest_Jobs_View_Model' => __DIR__ . '/../..' . '/classes/API/REST/jobs/class-wpml-tm-rest-jobs-view-model.php', 'WPML_TM_Restore_Skipped_Migration' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-tm-restore-skipped-migration-hook.php', 'WPML_TM_Scripts_Factory' => __DIR__ . '/../..' . '/classes/menu/class-wpml-tm-scripts-factory.php', 'WPML_TM_Serialized_Custom_Field_Package_Handler' => __DIR__ . '/../..' . '/classes/settings/class-wpml-tm-serialized-custom-field-package-handler.php', 'WPML_TM_Serialized_Custom_Field_Package_Handler_Factory' => __DIR__ . '/../..' . '/classes/settings/class-wpml-tm-serialized-custom-field-package-handler-factory.php', 'WPML_TM_Service_Activation_AJAX' => __DIR__ . '/../..' . '/classes/class-wpml-tm-service-activation-ajax.php', 'WPML_TM_Settings_Post_Process' => __DIR__ . '/../..' . '/classes/settings/class-wpml-tm-settings-post-process.php', 'WPML_TM_Settings_Update' => __DIR__ . '/../..' . '/classes/settings/class-wpml-tm-settings-update.php', 'WPML_TM_Shortcodes_Catcher' => __DIR__ . '/../..' . '/classes/shortcodes/class-wpml-tm-shortcodes-catcher.php', 'WPML_TM_Shortcodes_Catcher_Factory' => __DIR__ . '/../..' . '/classes/shortcodes/class-wpml-tm-shortcodes-catcher-factory.php', 'WPML_TM_String' => __DIR__ . '/../..' . '/classes/words-count/class-wpml-tm-string.php', 'WPML_TM_String_Xliff_Reader' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-string-xliff-reader.php', 'WPML_TM_Support_Info' => __DIR__ . '/../..' . '/classes/support/class-wpml-tm-support-info.php', 'WPML_TM_Support_Info_Filter' => __DIR__ . '/../..' . '/classes/support/class-wpml-tm-support-info-filter.php', 'WPML_TM_Sync_Installer_Wrapper' => __DIR__ . '/../..' . '/classes/translation-proxy/sync-jobs/class-wpml-tp-sync-installer-wrapper.php', 'WPML_TM_Sync_Jobs_Revision' => __DIR__ . '/../..' . '/classes/translation-proxy/sync-jobs/class-wpml-tp-sync-jobs-revision.php', 'WPML_TM_Sync_Jobs_Status' => __DIR__ . '/../..' . '/classes/translation-proxy/sync-jobs/class-wpml-tp-sync-jobs-status.php', 'WPML_TM_TF_AJAX_Feedback_List_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tm-tf-ajax-feedback-list-hooks-factory.php', 'WPML_TM_TF_Feedback_List_Hooks' => __DIR__ . '/../..' . '/classes/translation-feedback/hooks/wpml-tm-tf-feedback-list-hooks.php', 'WPML_TM_TF_Feedback_List_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-feedback/factories/action-loaders/wpml-tm-tf-feedback-list-hooks-factory.php', 'WPML_TM_TF_Module' => __DIR__ . '/../..' . '/classes/translation-feedback/wpml-tm-tf-module.php', 'WPML_TM_TS_Instructions_Hooks' => __DIR__ . '/../..' . '/classes/notices/translation-service-instruction/class-wpml-tm-ts-instructions-hooks.php', 'WPML_TM_TS_Instructions_Hooks_Factory' => __DIR__ . '/../..' . '/classes/notices/translation-service-instruction/class-wpml-tm-ts-instructions-hooks-factory.php', 'WPML_TM_TS_Instructions_Notice' => __DIR__ . '/../..' . '/classes/notices/translation-service-instruction/class-wpml-tm-ts-instructions-notice.php', 'WPML_TM_Translatable_Element' => __DIR__ . '/../..' . '/classes/words-count/class-wpml-tm-translatable-element.php', 'WPML_TM_Translatable_Element_Provider' => __DIR__ . '/../..' . '/classes/words-count/class-wpml-tm-translatable-element-provider.php', 'WPML_TM_Translate_Independently' => __DIR__ . '/../..' . '/classes/menu/translation-basket/class-wpml-tm-translate-independently.php', 'WPML_TM_Translated_Field' => __DIR__ . '/../..' . '/classes/class-wpml-tm-translated-field.php', 'WPML_TM_Translation_Basket_Dialog_Hooks' => __DIR__ . '/../..' . '/classes/translation-basket/wpml-tm-translation-basket-dialog-hooks.php', 'WPML_TM_Translation_Basket_Dialog_View' => __DIR__ . '/../..' . '/classes/translation-basket/wpml-tm-translation-basket-dialog-view.php', 'WPML_TM_Translation_Basket_Hooks_Factory' => __DIR__ . '/../..' . '/classes/translation-basket/class-wpml-tm-translation-basket-hooks-factory.php', 'WPML_TM_Translation_Batch' => __DIR__ . '/../..' . '/classes/translation-batch/class-wpml-tm-translation-batch.php', 'WPML_TM_Translation_Batch_Element' => __DIR__ . '/../..' . '/classes/translation-batch/class-wpml-tm-translation-batch-element.php', 'WPML_TM_Translation_Batch_Factory' => __DIR__ . '/../..' . '/classes/translation-batch/class-wpml-tm-translation-batch-factory.php', 'WPML_TM_Translation_Jobs_Fix_Summary' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-tm-translation-jobs-fix-summary.php', 'WPML_TM_Translation_Jobs_Fix_Summary_Factory' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-tm-translation-jobs-fix-summary-factory.php', 'WPML_TM_Translation_Jobs_Fix_Summary_Notice' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-tm-translation-jobs-fix-summary-notice.php', 'WPML_TM_Translation_Priorities' => __DIR__ . '/../..' . '/classes/translation-priorities/class-wpml-tm-translation-priorities.php', 'WPML_TM_Translation_Priorities_Factory' => __DIR__ . '/../..' . '/classes/translation-priorities/class-wpml-tm-translation-priorities-factory.php', 'WPML_TM_Translation_Priorities_Register_Action' => __DIR__ . '/../..' . '/classes/translation-priorities/class-wpml-tm-translation-priorities-register-action.php', 'WPML_TM_Translation_Roles_Section' => __DIR__ . '/../..' . '/classes/menu/translation-roles/class-wpml-tm-translation-roles-section.php', 'WPML_TM_Translation_Roles_Section_Factory' => __DIR__ . '/../..' . '/classes/menu/translation-roles/class-wpml-tm-translation-roles-section-factory.php', 'WPML_TM_Translation_Status' => __DIR__ . '/../..' . '/classes/filters/class-wpml-tm-translation-status.php', 'WPML_TM_Translation_Status_Display' => __DIR__ . '/../..' . '/classes/filters/class-wpml-tm-translation-status-display.php', 'WPML_TM_Translator_Note' => __DIR__ . '/../..' . '/classes/translation-jobs/class-wpml-tm-translator-note.php', 'WPML_TM_Translators_Dropdown' => __DIR__ . '/../..' . '/classes/class-wpml-tm-translators-dropdown.php', 'WPML_TM_Troubleshooting_Clear_TS' => __DIR__ . '/../..' . '/classes/class-wpml-tm-troubleshooting-clear-ts.php', 'WPML_TM_Troubleshooting_Clear_TS_UI' => __DIR__ . '/../..' . '/classes/class-wpml-tm-troubleshooting-clear-ts-ui.php', 'WPML_TM_Troubleshooting_Fix_Translation_Jobs_TP_ID' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-tm-troubleshooting-fix-translation-jobs-tp-id.php', 'WPML_TM_Troubleshooting_Fix_Translation_Jobs_TP_ID_Factory' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-tm-troubleshooting-fix-translation-jobs-tp-id-factory.php', 'WPML_TM_Troubleshooting_Reset_Pro_Trans_Config' => __DIR__ . '/../..' . '/classes/troubleshooting/class-wpml-tm-troubleshooting-reset-pro-trans-config.php', 'WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI' => __DIR__ . '/../..' . '/classes/troubleshooting/class-wpml-tm-troubleshooting-reset-pro-trans-config-ui.php', 'WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI_Factory' => __DIR__ . '/../..' . '/classes/troubleshooting/class-wpml-tm-troubleshooting-reset-pro-trans-config-ui-factory.php', 'WPML_TM_Unsent_Jobs' => __DIR__ . '/../..' . '/classes/translation-jobs/class-wpml-tm-unsent-jobs.php', 'WPML_TM_Unsent_Jobs_Notice' => __DIR__ . '/../..' . '/classes/translation-jobs/notices/class-wpml-tm-unsent-jobs-notice.php', 'WPML_TM_Unsent_Jobs_Notice_Hooks' => __DIR__ . '/../..' . '/classes/translation-jobs/notices/class-wpml-tm-unsent-jobs-notice-hooks.php', 'WPML_TM_Unsent_Jobs_Notice_Template' => __DIR__ . '/../..' . '/classes/translation-jobs/notices/class-wpml-tm-unsent-jobs-notice-template.php', 'WPML_TM_Update_External_Translation_Data_Action' => __DIR__ . '/../..' . '/inc/translation-jobs/helpers/wpml-update-external-translation-data-action.class.php', 'WPML_TM_Update_Post_Translation_Data_Action' => __DIR__ . '/../..' . '/inc/translation-jobs/helpers/wpml-update-post-translation-data-action.class.php', 'WPML_TM_Update_Translation_Data_Action' => __DIR__ . '/../..' . '/inc/translation-jobs/helpers/wpml-update-translation-data-action.class.php', 'WPML_TM_Update_Translation_Status' => __DIR__ . '/../..' . '/classes/records/class-wpml-tm-update-translation-status.php', 'WPML_TM_Upgrade_Cancel_Orphan_Jobs' => __DIR__ . '/../..' . '/classes/upgrade/commands/wpml-tm-upgrade-cancel-orphan-jobs.php', 'WPML_TM_Upgrade_Default_Editor_For_Old_Jobs' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-tm-upgrade-default-editor-for-old-jobs.php', 'WPML_TM_Upgrade_Loader' => __DIR__ . '/../..' . '/classes/upgrade/class-wpml-tm-upgrade-loader.php', 'WPML_TM_Upgrade_Loader_Factory' => __DIR__ . '/../..' . '/classes/upgrade/class-wpml-tm-upgrade-loader-factory.php', 'WPML_TM_Upgrade_Service_Redirect_To_Field' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-tm-upgrade-service-redirect-to-field.php', 'WPML_TM_Upgrade_Translation_Priorities_For_Posts' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-tm-upgrade-translation-priorities-for-posts.php', 'WPML_TM_Upgrade_WPML_Site_ID_ATE' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-tm-upgrade-wpml-site-id-ate.php', 'WPML_TM_User' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-tm-user.php', 'WPML_TM_Validate_HTML' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-validate-html.php', 'WPML_TM_WP_Query' => __DIR__ . '/../..' . '/classes/menu/dashboard/class-wpml-tm-wp-query.php', 'WPML_TM_Wizard_Options' => __DIR__ . '/../..' . '/classes/wizard/class-wpml-tm-wizard-options.php', 'WPML_TM_Word_Calculator' => __DIR__ . '/../..' . '/classes/words-count/processor/calculator/wpml-tm-word-calculator.php', 'WPML_TM_Word_Calculator_Post_Custom_Fields' => __DIR__ . '/../..' . '/classes/words-count/processor/calculator/post/wpml-tm-word-calculator-post-custom-fields.php', 'WPML_TM_Word_Calculator_Post_Object' => __DIR__ . '/../..' . '/classes/words-count/processor/calculator/post/wpml-tm-word-calculator-post-object.php', 'WPML_TM_Word_Calculator_Post_Packages' => __DIR__ . '/../..' . '/classes/words-count/processor/calculator/post/wpml-tm-word-calculator-post-packages.php', 'WPML_TM_Word_Count_Admin_Hooks' => __DIR__ . '/../..' . '/classes/words-count/hooks/wpml-tm-word-count-admin-hooks.php', 'WPML_TM_Word_Count_Ajax_Hooks' => __DIR__ . '/../..' . '/classes/words-count/hooks/wpml-tm-word-count-ajax-hooks.php', 'WPML_TM_Word_Count_Background_Process' => __DIR__ . '/../..' . '/classes/words-count/queue/background-process/wpml-tm-word-count-background-process.php', 'WPML_TM_Word_Count_Background_Process_Factory' => __DIR__ . '/../..' . '/classes/words-count/queue/background-process/wpml-tm-word-count-background-process-factory.php', 'WPML_TM_Word_Count_Background_Process_Requested_Types' => __DIR__ . '/../..' . '/classes/words-count/queue/background-process/wpml-tm-word-count-background-process-requested-types.php', 'WPML_TM_Word_Count_Hooks_Factory' => __DIR__ . '/../..' . '/classes/words-count/hooks/wpml-tm-word-count-hooks-factory.php', 'WPML_TM_Word_Count_Post_Records' => __DIR__ . '/../..' . '/classes/words-count/records/wpml-tm-word-count-post-records.php', 'WPML_TM_Word_Count_Process_Hooks' => __DIR__ . '/../..' . '/classes/words-count/hooks/wpml-tm-word-count-process-hooks.php', 'WPML_TM_Word_Count_Queue_Items_Requested_Types' => __DIR__ . '/../..' . '/classes/words-count/queue/items/wpml-tm-word-count-queue-items-requested-types.php', 'WPML_TM_Word_Count_Records' => __DIR__ . '/../..' . '/classes/words-count/records/wpml-tm-word-count-records.php', 'WPML_TM_Word_Count_Records_Factory' => __DIR__ . '/../..' . '/classes/words-count/records/wpml-tm-word-count-records-factory.php', 'WPML_TM_Word_Count_Refresh_Hooks' => __DIR__ . '/../..' . '/classes/words-count/hooks/wpml-tm-word-count-refresh-hooks.php', 'WPML_TM_Word_Count_Report' => __DIR__ . '/../..' . '/classes/words-count/report/wpml-tm-word-count-report.php', 'WPML_TM_Word_Count_Report_View' => __DIR__ . '/../..' . '/classes/words-count/report/wpml-tm-word-count-report-view.php', 'WPML_TM_Word_Count_Set_Package' => __DIR__ . '/../..' . '/classes/words-count/processor/wpml-tm-word-count-set-package.php', 'WPML_TM_Word_Count_Set_Post' => __DIR__ . '/../..' . '/classes/words-count/processor/wpml-tm-word-count-set-post.php', 'WPML_TM_Word_Count_Set_String' => __DIR__ . '/../..' . '/classes/words-count/processor/wpml-tm-word-count-set-string.php', 'WPML_TM_Word_Count_Setters_Factory' => __DIR__ . '/../..' . '/classes/words-count/processor/wpml-tm-word-count-setters-factory.php', 'WPML_TM_Word_Count_Single_Process' => __DIR__ . '/../..' . '/classes/words-count/processor/wpml-tm-word-count-single-process.php', 'WPML_TM_Word_Count_Single_Process_Factory' => __DIR__ . '/../..' . '/classes/words-count/processor/wpml-tm-word-count-single-process-factory.php', 'WPML_TM_XLIFF' => __DIR__ . '/../..' . '/classes/xliff/wpml-tm-xliff.php', 'WPML_TM_XLIFF_Factory' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-xliff-factory.php', 'WPML_TM_XLIFF_Phase' => __DIR__ . '/../..' . '/classes/xliff/classs-wpml-tm-xliff-phase.php', 'WPML_TM_XLIFF_Post_Type' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-xliff-post-type.php', 'WPML_TM_XLIFF_Shortcodes' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-xliff-shortcodes.php', 'WPML_TM_XLIFF_Translator_Notes' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-xliff-translator-notes.php', 'WPML_TM_Xliff_Frontend' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-xliff-frontend.php', 'WPML_TM_Xliff_Reader' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-xliff-reader.php', 'WPML_TM_Xliff_Reader_Factory' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-xliff-reader-factory.php', 'WPML_TM_Xliff_Shared' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-xliff-shared.php', 'WPML_TM_Xliff_Writer' => __DIR__ . '/../..' . '/classes/xliff/class-wpml-tm-xliff-writer.php', 'WPML_TP_API' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-api.php', 'WPML_TP_API_Batches' => __DIR__ . '/../..' . '/classes/tp-client/api/wpml-tp-api-batches.php', 'WPML_TP_API_Client' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-api-client.php', 'WPML_TP_API_Exception' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-api-exception.php', 'WPML_TP_API_Log_Interface' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-api-log-interface.php', 'WPML_TP_API_Request' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-api-request.php', 'WPML_TP_API_Services' => __DIR__ . '/../..' . '/classes/tp-client/api/wpml-tp-api-services.php', 'WPML_TP_API_TF_Feedback' => __DIR__ . '/../..' . '/classes/tp-client/api/wpml-tp-api-tf-feedback.php', 'WPML_TP_API_TF_Ratings' => __DIR__ . '/../..' . '/classes/tp-client/api/wpml-tp-api-tf-ratings.php', 'WPML_TP_Abstract_API' => __DIR__ . '/../..' . '/classes/tp-client/api/wpml-tp-abstract-api.php', 'WPML_TP_Apply_Single_Job' => __DIR__ . '/../..' . '/classes/translation-proxy/translations/apply/class-wpml-tp-apply-single-job.php', 'WPML_TP_Apply_Translation_Post_Strategy' => __DIR__ . '/../..' . '/classes/translation-proxy/translations/apply/class-wpml-tp-apply-translation-post-strategy.php', 'WPML_TP_Apply_Translation_Strategies' => __DIR__ . '/../..' . '/classes/translation-proxy/translations/apply/class-wpml-tp-apply-translation-strategies.php', 'WPML_TP_Apply_Translation_Strategy' => __DIR__ . '/../..' . '/classes/translation-proxy/translations/apply/class-wpml-tp-apply-translation-strategy.php', 'WPML_TP_Apply_Translation_String_Strategy' => __DIR__ . '/../..' . '/classes/translation-proxy/translations/apply/class-wpml-tp-apply-translation-string-strategy.php', 'WPML_TP_Apply_Translations' => __DIR__ . '/../..' . '/classes/translation-proxy/translations/class-wpml-tp-apply-translation.php', 'WPML_TP_Batch' => __DIR__ . '/../..' . '/classes/tp-client/tp-rest-objects/wpml-tp-batch.php', 'WPML_TP_Batch_Exception' => __DIR__ . '/../..' . '/classes/tp-client/exceptions/wpml-tp-batch-exception.php', 'WPML_TP_Batch_Sync_API' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-batch-sync-api.php', 'WPML_TP_Client' => __DIR__ . '/../..' . '/classes/tp-client/wpml-tp-client.php', 'WPML_TP_Client_Factory' => __DIR__ . '/../..' . '/classes/tp-client/wpml-tp-client-factory.php', 'WPML_TP_Exception' => __DIR__ . '/../..' . '/classes/tp-client/exceptions/wpml-tp-exception.php', 'WPML_TP_Extra_Field' => __DIR__ . '/../..' . '/classes/translation-proxy/models/wpml-tp-extra-field.php', 'WPML_TP_Extra_Field_Display' => __DIR__ . '/../..' . '/classes/translation-proxy/ui/wpml-tp-extra-field-display.php', 'WPML_TP_HTTP_Request_Filter' => __DIR__ . '/../..' . '/classes/translation-proxy/class-wpml-tp-http-request-filter.php', 'WPML_TP_Job' => __DIR__ . '/../..' . '/classes/tp-client/tp-rest-objects/wpml-tp-job.php', 'WPML_TP_Job_Factory' => __DIR__ . '/../..' . '/classes/tp-client/tp-rest-objects/wpml-tp-job-factory.php', 'WPML_TP_Job_States' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-job-states.php', 'WPML_TP_Job_Status' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-job-status.php', 'WPML_TP_Jobs_API' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-jobs-api.php', 'WPML_TP_Jobs_Collection' => __DIR__ . '/../..' . '/classes/tp-client/class-wpml-tp-jobs-collection.php', 'WPML_TP_Jobs_Collection_Factory' => __DIR__ . '/../..' . '/classes/tp-client/wpml-tp-jobs-collection-factory.php', 'WPML_TP_Lock' => __DIR__ . '/../..' . '/classes/translation-proxy/lock/wpml-tp-lock.php', 'WPML_TP_Lock_Factory' => __DIR__ . '/../..' . '/classes/translation-proxy/lock/wpml-tp-lock-factory.php', 'WPML_TP_Lock_Notice' => __DIR__ . '/../..' . '/classes/translation-proxy/lock/wpml-tp-lock-notice.php', 'WPML_TP_Lock_Notice_Factory' => __DIR__ . '/../..' . '/classes/translation-proxy/lock/wpml-tp-lock-notice-factory.php', 'WPML_TP_Project' => __DIR__ . '/../..' . '/classes/tp-client/wpml-tp-project.php', 'WPML_TP_Project_API' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-project-api.php', 'WPML_TP_Project_User' => __DIR__ . '/../..' . '/classes/translation-proxy/class-wpml-tp-project-user.php', 'WPML_TP_REST_Object' => __DIR__ . '/../..' . '/classes/tp-client/tp-rest-objects/wpml-tp-rest-object.php', 'WPML_TP_Refresh_Language_Pairs' => __DIR__ . '/../..' . '/classes/translation-proxy/class-wpml-tp-refresh-language-pairs.php', 'WPML_TP_Service' => __DIR__ . '/../..' . '/classes/tp-client/tp-rest-objects/wpml-tp-service.php', 'WPML_TP_Services' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-services.php', 'WPML_TP_String_Job' => __DIR__ . '/../..' . '/classes/translation-proxy/class-wpml-tp-string-job.php', 'WPML_TP_Sync_Ajax_Handler' => __DIR__ . '/../..' . '/classes/translation-proxy/sync-jobs/class-wpml-tp-sync-ajax-handler.php', 'WPML_TP_Sync_Jobs' => __DIR__ . '/../..' . '/classes/translation-proxy/sync-jobs/class-wpml-tp-sync-jobs.php', 'WPML_TP_Sync_Orphan_Jobs' => __DIR__ . '/../..' . '/classes/translation-proxy/sync-jobs/wpml-tp-sync-orphan-jobs.php', 'WPML_TP_Sync_Orphan_Jobs_Factory' => __DIR__ . '/../..' . '/classes/translation-proxy/sync-jobs/wpml-tp-sync-orphan-jobs-factory.php', 'WPML_TP_Sync_Update_Job' => __DIR__ . '/../..' . '/classes/translation-proxy/sync-jobs/class-wpml-tp-sync-update-job.php', 'WPML_TP_TM_Jobs' => __DIR__ . '/../..' . '/classes/tp-client/wpml-tp-tm-jobs.php', 'WPML_TP_Translation' => __DIR__ . '/../..' . '/classes/translation-proxy/translations/class-wpml-tp-translation.php', 'WPML_TP_Translation_Collection' => __DIR__ . '/../..' . '/classes/translation-proxy/translations/class-wpml-tp-translation-collection.php', 'WPML_TP_Translations_Repository' => __DIR__ . '/../..' . '/classes/translation-proxy/translations/class-wpml-tp-translations-repository.php', 'WPML_TP_Translator' => __DIR__ . '/../..' . '/classes/translation-proxy/class-wpml-tp-translator.php', 'WPML_TP_XLIFF_API' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-xliff-api.php', 'WPML_TP_Xliff_Parser' => __DIR__ . '/../..' . '/classes/translation-proxy/api/class-wpml-tp-xliff-parser.php', 'WPML_Table_Collate_Fix' => __DIR__ . '/../..' . '/classes/troubleshoot/class-wpml-table-collate-fix.php', 'WPML_Tax_Menu_Loader' => __DIR__ . '/../..' . '/menu/term-taxonomy-menus/wpml-tax-menu-loader.class.php', 'WPML_Tax_Permalink_Filters' => __DIR__ . '/../..' . '/classes/url-handling/converter/filters/class-wpml-tax-permlink-filters.php', 'WPML_Tax_Permalink_Filters_Factory' => __DIR__ . '/../..' . '/classes/url-handling/converter/filters/class-wpml-tax-permalink-filters-factory.php', 'WPML_Taxonomy_Element_Language_Dropdown' => __DIR__ . '/../..' . '/menu/term-taxonomy-menus/wpml-taxonomy-element-language-dropdown.class.php', 'WPML_Taxonomy_Translation' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-taxonomy-translation.php', 'WPML_Taxonomy_Translation_Help_Notice' => __DIR__ . '/../..' . '/classes/taxonomy-term-translation/class-wpml-taxonomy-translation-help-notice.php', 'WPML_Taxonomy_Translation_Screen_Data' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-taxonomy-translation-screen-data.php', 'WPML_Taxonomy_Translation_Sync_Display' => __DIR__ . '/../..' . '/menu/term-taxonomy-menus/wpml-taxonomy-translation-sync-display.class.php', 'WPML_Taxonomy_Translation_Table_Display' => __DIR__ . '/../..' . '/menu/term-taxonomy-menus/taxonomy-translation-display.class.php', 'WPML_Taxonomy_Translation_UI' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-taxonomy-translation-ui.php', 'WPML_Templates_Factory' => __DIR__ . '/../..' . '/classes/templating/class-wpml-templates-factory.php', 'WPML_Temporary_Switch_Admin_Language' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-temporary-switch-admin-language.php', 'WPML_Temporary_Switch_Language' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-temporary-switch-language.php', 'WPML_Term_Actions' => __DIR__ . '/../..' . '/classes/taxonomy-term-translation/class-wpml-term-actions.php', 'WPML_Term_Adjust_Id' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-term-adjust-id.php', 'WPML_Term_Clauses' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-term-clauses.php', 'WPML_Term_Custom_Field_Setting' => __DIR__ . '/../..' . '/classes/settings/class-wpml-term-custom-field-setting.php', 'WPML_Term_Custom_Field_Setting_Keys' => __DIR__ . '/../..' . '/classes/settings/class-wpml-term-custom-field-setting-keys.php', 'WPML_Term_Display_As_Translated_Adjust_Count' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-term-display-as-translated-adjust-count.php', 'WPML_Term_Element' => __DIR__ . '/../..' . '/classes/translations/class-wpml-term-element.php', 'WPML_Term_Filters' => __DIR__ . '/../..' . '/inc/taxonomy-term-translation/wpml-term-filters.class.php', 'WPML_Term_Hierarchy_Duplication' => __DIR__ . '/../..' . '/inc/taxonomy-term-translation/wpml-term-hierarchy-duplication.class.php', 'WPML_Term_Hierarchy_Sync' => __DIR__ . '/../..' . '/inc/taxonomy-term-translation/wpml-term-hierarchy-sync.class.php', 'WPML_Term_Language_Filter' => __DIR__ . '/../..' . '/menu/term-taxonomy-menus/wpml-term-language-filter.class.php', 'WPML_Term_Language_Synchronization' => __DIR__ . '/../..' . '/classes/taxonomy-term-translation/class-wpml-term-language-synchronization.php', 'WPML_Term_Query_Filter' => __DIR__ . '/../..' . '/classes/query-filtering/class-wpml-term-query-filter.php', 'WPML_Term_Translation' => __DIR__ . '/../..' . '/inc/taxonomy-term-translation/wpml-term-translation.class.php', 'WPML_Term_Translation_Utils' => __DIR__ . '/../..' . '/inc/taxonomy-term-translation/wpml-term-translation-utils.class.php', 'WPML_Terms_Translations' => __DIR__ . '/../..' . '/inc/taxonomy-term-translation/wpml-term-translations.class.php', 'WPML_Theme_Localization_Type' => __DIR__ . '/../..' . '/classes/class-wpml-theme-localization-type.php', 'WPML_Theme_Plugin_Localization_Options_Ajax' => __DIR__ . '/../..' . '/classes/theme-plugin-localization/class-wpml-themes-plugins-localization-options-ajax.php', 'WPML_Theme_Plugin_Localization_Options_UI' => __DIR__ . '/../..' . '/classes/theme-plugin-localization/strategy/class-wpml-theme-plugin-localization-options-ui.php', 'WPML_Theme_Plugin_Localization_UI' => __DIR__ . '/../..' . '/classes/theme-plugin-localization/view/class-wpml-theme-plugin-localization-ui.php', 'WPML_Theme_Plugin_Localization_UI_Hooks' => __DIR__ . '/../..' . '/classes/theme-plugin-localization/class-wpml-theme-plugin-localization-ui-hooks.php', 'WPML_Themes_Plugin_Localization_UI_Hooks_Factory' => __DIR__ . '/../..' . '/classes/theme-plugin-localization/factory/class-wpml-theme-plugin-localization-ui-hooks-factory.php', 'WPML_Third_Party_Dependencies' => __DIR__ . '/../..' . '/classes/requirements/class-wpml-third-party-dependencies.php', 'WPML_Transient' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-transient.php', 'WPML_Translate_Independently' => __DIR__ . '/../..' . '/classes/class-wpml-translate-independently.php', 'WPML_Translate_Link_Target_Global_State' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-translate-link-target-global-state.php', 'WPML_Translate_Link_Targets' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-translate-link-targets.php', 'WPML_Translate_Link_Targets_Hooks' => __DIR__ . '/../..' . '/classes/translation-management/class-wpml-translate-link-targets-hooks.php', 'WPML_Translate_Link_Targets_In_Content' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-translate-link-targets-in-content.php', 'WPML_Translate_Link_Targets_In_Custom_Fields' => __DIR__ . '/../..' . '/classes/custom-field-translation/class-wpml-translate-link-targets-in-custom-fields.php', 'WPML_Translate_Link_Targets_In_Custom_Fields_Hooks' => __DIR__ . '/../..' . '/classes/custom-field-translation/class-wpml-translate-link-targets-in-custom-fields-hooks.php', 'WPML_Translate_Link_Targets_In_Posts' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-translate-link-targets-in-posts.php', 'WPML_Translate_Link_Targets_In_Posts_Global' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-translate-link-targets-in-posts-global.php', 'WPML_Translate_Link_Targets_In_Strings' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-translate-link-targets-in-strings.php', 'WPML_Translate_Link_Targets_In_Strings_Global' => __DIR__ . '/../..' . '/classes/translate_link_targets/class-wpml-translate-link-targets-in-strings-global.php', 'WPML_Translate_Link_Targets_UI' => __DIR__ . '/../..' . '/classes/menu/mcsetup/class-wpml-translate-link-targets-ui.php', 'WPML_TranslationProxy_Com_Log' => __DIR__ . '/../..' . '/classes/translation-proxy/class-wpml-translationproxy-com-log.php', 'WPML_TranslationProxy_Communication_Log' => __DIR__ . '/../..' . '/classes/translation-proxy/log/class-wpml-translationproxy-communication-log.php', 'WPML_Translation_Basket' => __DIR__ . '/../..' . '/inc/translation-proxy/wpml-translation-basket.class.php', 'WPML_Translation_Batch' => __DIR__ . '/../..' . '/inc/translation-jobs/wpml-translation-batch.class.php', 'WPML_Translation_Batch_Factory' => __DIR__ . '/../..' . '/inc/translation-jobs/class-wpml-translation-batch-factory.php', 'WPML_Translation_Editor' => __DIR__ . '/../..' . '/classes/menu/translation-editor/class-wpml-translation-editor.php', 'WPML_Translation_Editor_Header' => __DIR__ . '/../..' . '/classes/menu/translation-editor/class-wpml-translation-editor-header.php', 'WPML_Translation_Editor_Languages' => __DIR__ . '/../..' . '/classes/menu/translation-editor/class-wpml-translation-editor-languages.php', 'WPML_Translation_Editor_UI' => __DIR__ . '/../..' . '/classes/menu/translation-editor/class-wpml-translation-editor-ui.php', 'WPML_Translation_Element' => __DIR__ . '/../..' . '/classes/translations/class-wpml-translation-element.php', 'WPML_Translation_Element_Factory' => __DIR__ . '/../..' . '/classes/translations/class-wpml-translation-element-factory.php', 'WPML_Translation_Job' => __DIR__ . '/../..' . '/inc/translation-jobs/jobs/wpml-translation-job.class.php', 'WPML_Translation_Job_Factory' => __DIR__ . '/../..' . '/classes/class-wpml-translation-job-factory.php', 'WPML_Translation_Job_Helper' => __DIR__ . '/../..' . '/inc/translation-jobs/helpers/wpml-translation-job-helper.class.php', 'WPML_Translation_Job_Helper_With_API' => __DIR__ . '/../..' . '/inc/translation-jobs/helpers/wpml-translation-job-helper-with-api.class.php', 'WPML_Translation_Jobs_Collection' => __DIR__ . '/../..' . '/inc/translation-jobs/wpml-translation-jobs-collection.class.php', 'WPML_Translation_Jobs_Fixing_Migration_Ajax' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-translation-jobs-fixing-migration-ajax.php', 'WPML_Translation_Jobs_Migration' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-translation-jobs-migration.php', 'WPML_Translation_Jobs_Migration_Ajax' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-translation-jobs-migration-ajax.php', 'WPML_Translation_Jobs_Migration_Hooks' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-translation-jobs-migration-hooks.php', 'WPML_Translation_Jobs_Migration_Hooks_Factory' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-translation-jobs-migration-hooks-factory.php', 'WPML_Translation_Jobs_Migration_Notice' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-translation-jobs-migration-notice.php', 'WPML_Translation_Jobs_Migration_Repository' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-translation-jobs-migration-repository.php', 'WPML_Translation_Jobs_Missing_TP_ID_Migration_Notice' => __DIR__ . '/../..' . '/classes/notices/translation-jobs-migration/class-wpml-translation-jobs-missing-tp-id-migration-notice.php', 'WPML_Translation_Management' => __DIR__ . '/../..' . '/classes/class-wpml-translation-management.php', 'WPML_Translation_Management_Filters_And_Actions' => __DIR__ . '/../..' . '/classes/translation-management/class-wpml-translation-management-filters-and-actions.php', 'WPML_Translation_Manager_Records' => __DIR__ . '/../..' . '/classes/user/class-wpml-translation-manager-records.php', 'WPML_Translation_Modes' => __DIR__ . '/../..' . '/classes/post-types/class-wpml-translation-modes.php', 'WPML_Translation_Proxy_API' => __DIR__ . '/../..' . '/classes/class-wpml-translation-proxy-api.php', 'WPML_Translation_Proxy_Basket_Networking' => __DIR__ . '/../..' . '/inc/translation-proxy/wpml-translationproxy-basket-networking.class.php', 'WPML_Translation_Proxy_Networking' => __DIR__ . '/../..' . '/classes/translation-proxy/class-wpml-translation-proxy-networking.php', 'WPML_Translation_Roles_Records' => __DIR__ . '/../..' . '/classes/user/class-wpml-translation-roles-records.php', 'WPML_Translation_Selector' => __DIR__ . '/../..' . '/menu/wpml-translation-selector.class.php', 'WPML_Translation_Tree' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-translation-tree.php', 'WPML_Translations' => __DIR__ . '/../..' . '/classes/translations/class-wpml-translations.php', 'WPML_Translations_Queue' => __DIR__ . '/../..' . '/classes/menu/translation-queue/class-wpml-translations-queue.php', 'WPML_Translator' => __DIR__ . '/../..' . '/inc/translation-management/wpml-translator.class.php', 'WPML_Translator_Records' => __DIR__ . '/../..' . '/classes/user/class-wpml-translator-records.php', 'WPML_Troubleshoot_Action' => __DIR__ . '/../..' . '/classes/troubleshoot/class-wpml-troubleshoot-action.php', 'WPML_Troubleshoot_Sync_Posts_Taxonomies' => __DIR__ . '/../..' . '/classes/troubleshoot/class-wpml-troubleshoot-sync-posts-taxonomies.php', 'WPML_Troubleshooting_Terms_Menu' => __DIR__ . '/../..' . '/menu/wpml-troubleshooting-terms-menu.class.php', 'WPML_Twig_Template' => __DIR__ . '/../..' . '/classes/templates/class-wpml-twig-template.php', 'WPML_Twig_Template_Loader' => __DIR__ . '/../..' . '/classes/templates/wpml-twig-template-loader.php', 'WPML_Twig_WP_Plugin_Extension' => __DIR__ . '/../..' . '/classes/twig-extensions/wpml-twig-wp-plugin-extension.php', 'WPML_UI_Help_Tab' => __DIR__ . '/../..' . '/classes/ui-elements/class-wpml-ui-help-tab.php', 'WPML_UI_Pagination' => __DIR__ . '/../..' . '/classes/ui-elements/class-wpml-ui-pagination.php', 'WPML_UI_Screen_Options_Factory' => __DIR__ . '/../..' . '/classes/ui-elements/class-wpml-ui-screen-options-factory.php', 'WPML_UI_Screen_Options_Pagination' => __DIR__ . '/../..' . '/classes/ui-elements/class-wpml-ui-screen-options-pagination.php', 'WPML_UI_Unlock_Button' => __DIR__ . '/../..' . '/classes/ui-elements/class-wpml-ui-unlock-button.php', 'WPML_URL_Cached_Converter' => __DIR__ . '/../..' . '/classes/url-handling/converter/class-wpml-url-cached-converter.php', 'WPML_URL_Converter' => __DIR__ . '/../..' . '/classes/url-handling/converter/class-wpml-url-converter.php', 'WPML_URL_Converter_Abstract_Strategy' => __DIR__ . '/../..' . '/classes/url-handling/converter/strategy/class-wpml-url-converter-abstract-strategy.php', 'WPML_URL_Converter_CPT' => __DIR__ . '/../..' . '/classes/url-handling/converter/class-wpml-url-converter-cpt.php', 'WPML_URL_Converter_Domain_Strategy' => __DIR__ . '/../..' . '/classes/url-handling/converter/strategy/class-wpml-url-converter-domain-strategy.php', 'WPML_URL_Converter_Factory' => __DIR__ . '/../..' . '/classes/url-handling/converter/class-wpml-url-converter-factory.php', 'WPML_URL_Converter_Lang_Param_Helper' => __DIR__ . '/../..' . '/classes/url-handling/converter/helper/class-wpml-url-converter-lang-param-helper.php', 'WPML_URL_Converter_Parameter_Strategy' => __DIR__ . '/../..' . '/classes/url-handling/converter/strategy/class-wpml-url-converter-parameter-strategy.php', 'WPML_URL_Converter_Subdir_Strategy' => __DIR__ . '/../..' . '/classes/url-handling/converter/strategy/class-wpml-url-converter-subdir-strategy.php', 'WPML_URL_Converter_Url_Helper' => __DIR__ . '/../..' . '/classes/url-handling/converter/helper/class-wpml-url-converter-url-helper.php', 'WPML_URL_Converter_User' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-url-converter-user.php', 'WPML_URL_Filters' => __DIR__ . '/../..' . '/classes/url-handling/wpml-url-filters.class.php', 'WPML_URL_HTTP_Referer' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-url-http-referer.php', 'WPML_URL_HTTP_Referer_Factory' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-url-http-referer-factory.php', 'WPML_UUID' => __DIR__ . '/../..' . '/classes/utilities/wpml-uuid.php', 'WPML_Update_PickUp_Method' => __DIR__ . '/../..' . '/classes/translation-proxy/class-wpml-update-pickup-method.php', 'WPML_Update_Term_Action' => __DIR__ . '/../..' . '/inc/taxonomy-term-translation/wpml-update-term-action.class.php', 'WPML_Update_Term_Count' => __DIR__ . '/../..' . '/classes/taxonomy-term-translation/class-wpml-update-term-count.php', 'WPML_Upgrade' => __DIR__ . '/../..' . '/classes/upgrade/class-wpml-upgrade.php', 'WPML_Upgrade_Add_Column_To_Table' => __DIR__ . '/../..' . '/classes/upgrade/commands/abstracts/class-wpml-upgrade-add-column-to-table.php', 'WPML_Upgrade_Add_Editor_Column_To_Icl_Translate_Job' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-add-editor-column-to-icl-translate-job.php', 'WPML_Upgrade_Add_Location_Column_To_Strings' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-add-location-column-to-strings.php', 'WPML_Upgrade_Add_Word_Count_Column_To_Strings' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-add-word-count-column-to-strings.php', 'WPML_Upgrade_Add_Wrap_Column_To_Strings' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-add-wrap-column-to-strings.php', 'WPML_Upgrade_Add_Wrap_Column_To_Translate' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-add-wrap-column-to-translate.php', 'WPML_Upgrade_Admin_Users_Languages' => __DIR__ . '/../..' . '/classes/upgrade/commands/wpml-upgrade-admin-users-languages.php', 'WPML_Upgrade_Chinese_Flags' => __DIR__ . '/../..' . '/classes/upgrade/commands/wpml-upgrade-chinese-flags.php', 'WPML_Upgrade_Command_Definition' => __DIR__ . '/../..' . '/classes/upgrade/class-wpml-upgrade-command-definition.php', 'WPML_Upgrade_Command_Factory' => __DIR__ . '/../..' . '/classes/upgrade/class-wpml-upgrade-command-factory.php', 'WPML_Upgrade_Display_Mode_For_Posts' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-display-mode-for-posts.php', 'WPML_Upgrade_Element_Type_Length_And_Collation' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-element-type-length-and-collation.php', 'WPML_Upgrade_Fix_Non_Admin_With_Admin_Cap' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-fix-non-admin-cap.php', 'WPML_Upgrade_Loader' => __DIR__ . '/../..' . '/classes/upgrade/class-wpml-upgrade-loader.php', 'WPML_Upgrade_Loader_Factory' => __DIR__ . '/../..' . '/classes/upgrade/class-wpml-upgrade-loader-factory.php', 'WPML_Upgrade_Localization_Files' => __DIR__ . '/../..' . '/classes/upgrade/class-wpml-upgrade-localizations-files.php', 'WPML_Upgrade_Media_Duplication_In_Core' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-media-duplication-in-core.php', 'WPML_Upgrade_Media_Without_Language' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-media-without-language.php', 'WPML_Upgrade_Remove_Translation_Services_Transient' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-remove-translation-services-transient.php', 'WPML_Upgrade_Run_All' => __DIR__ . '/../..' . '/classes/upgrade/class-wpml-upgrade-run-all.php', 'WPML_Upgrade_Schema' => __DIR__ . '/../..' . '/classes/upgrade/class-wpml-upgrade-schema.php', 'WPML_Upgrade_Table_Translate_Job_For_3_9_0' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-table-translate-job-for-3-9-0.php', 'WPML_Upgrade_WPML_Site_ID' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-wpml-site-id.php', 'WPML_Upgrade_WPML_Site_ID_Remaining' => __DIR__ . '/../..' . '/classes/upgrade/commands/class-wpml-upgrade-wpml-site-id-remaining.php', 'WPML_User' => __DIR__ . '/../..' . '/classes/utilities/user/class-wpml-user.php', 'WPML_User_Admin_Language' => __DIR__ . '/../..' . '/classes/user-language/class-wpml-user-admin-language.php', 'WPML_User_Jobs_Notification_Settings' => __DIR__ . '/../..' . '/classes/user/wpml-user-jobs-notification-settings.php', 'WPML_User_Jobs_Notification_Settings_Render' => __DIR__ . '/../..' . '/classes/user/wpml-user-jobs-notification-settings-render.php', 'WPML_User_Jobs_Notification_Settings_Template' => __DIR__ . '/../..' . '/classes/user/wpml-user-jobs-notification-settings-template.php', 'WPML_User_Language' => __DIR__ . '/../..' . '/classes/user-language/class-wpml-user-language.php', 'WPML_User_Language_Switcher' => __DIR__ . '/../..' . '/classes/user-language/class-wpml-user-language-switcher.php', 'WPML_User_Language_Switcher_Hooks' => __DIR__ . '/../..' . '/classes/user-language/class-wpml-user-language-switcher-hooks.php', 'WPML_User_Language_Switcher_Resources' => __DIR__ . '/../..' . '/classes/user-language/class-wpml-user-language-switcher-resources.php', 'WPML_User_Language_Switcher_UI' => __DIR__ . '/../..' . '/classes/user-language/class-wpml-user-language-switcher-ui.php', 'WPML_User_Options_Menu' => __DIR__ . '/../..' . '/classes/menu-elements/class-wpml-user-options-menu.php', 'WPML_Users_Languages' => __DIR__ . '/../..' . '/classes/user-language/class-wpml-users-languages.php', 'WPML_Users_Languages_Dependencies' => __DIR__ . '/../..' . '/classes/user-language/class-wpml-users-languages-dependencies.php', 'WPML_Verify_SitePress_Settings' => __DIR__ . '/../..' . '/classes/settings/class-wpml-verify-sitepress-settings.php', 'WPML_WPDB_And_SP_User' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-wpdb-and-sp-user.php', 'WPML_WPDB_User' => __DIR__ . '/../..' . '/classes/core-abstract-classes/class-wpml-wpdb-user.php', 'WPML_WP_API' => __DIR__ . '/../..' . '/classes/wpml-wp/class-wpml-wp-api.php', 'WPML_WP_Cache' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-wp-cache.php', 'WPML_WP_Cache_Factory' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-wp-cache-factory.php', 'WPML_WP_Cache_Item' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-wp-cache-item.php', 'WPML_WP_Comments' => __DIR__ . '/../..' . '/classes/comments/wpml-wp-comments.php', 'WPML_WP_Cron_Check' => __DIR__ . '/../..' . '/classes/utils/wpml-wp-cron-check.php', 'WPML_WP_In_Subdir_URL_Filters' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-wp-in-subdir-url-filters.php', 'WPML_WP_In_Subdir_URL_Filters_Factory' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-wp-in-subdir-url-filters-factory.php', 'WPML_WP_Option' => __DIR__ . '/../..' . '/classes/options/class-wpml-wp-option.php', 'WPML_WP_Options_General_Hooks' => __DIR__ . '/../..' . '/classes/wp/screens/class-wpml-wp-options-general-hooks.php', 'WPML_WP_Options_General_Hooks_Factory' => __DIR__ . '/../..' . '/classes/wp/screens/class-wpml-wp-options-general-hooks-factory.php', 'WPML_WP_Post' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-wp-post.php', 'WPML_WP_Post_Type' => __DIR__ . '/../..' . '/classes/wpml-wp/wpml-wp-post-type.php', 'WPML_WP_Query_API' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-wp-query-api.php', 'WPML_WP_Roles' => __DIR__ . '/../..' . '/classes/wpml-wp/class-wpml-wp-roles.php', 'WPML_WP_Taxonomy' => __DIR__ . '/../..' . '/classes/wpml-wp/class-wpml-wp-taxonomy.php', 'WPML_WP_Taxonomy_Query' => __DIR__ . '/../..' . '/classes/utilities/class-wpml-wp-taxonomy-query.php', 'WPML_WP_User_Factory' => __DIR__ . '/../..' . '/classes/utilities/user/class-wpml-wp-user-factory.php', 'WPML_WP_User_Query_Factory' => __DIR__ . '/../..' . '/classes/utilities/user/class-wpml-wp-user-query-factory.php', 'WPML_Whip_Requirements' => __DIR__ . '/../..' . '/classes/requirements/class-wpml-whip-requirements.php', 'WPML_Widgets_Support_Backend' => __DIR__ . '/../..' . '/classes/widgets/class-wpml-widgets-support-backend.php', 'WPML_Widgets_Support_Factory' => __DIR__ . '/../..' . '/classes/widgets/class-wpml-widgets-support-factory.php', 'WPML_Widgets_Support_Frontend' => __DIR__ . '/../..' . '/classes/widgets/class-wpml-widgets-support-frontend.php', 'WPML_WordPress_Actions' => __DIR__ . '/../..' . '/inc/post-translation/wpml-wordpress-actions.class.php', 'WPML_XDomain_Data_Parser' => __DIR__ . '/../..' . '/classes/url-handling/class-wpml-xdomain-data-parser.php', 'WPML_XML2Array' => __DIR__ . '/../..' . '/classes/xml-config/transform/class-wpml-xml2array.php', 'WPML_XMLRPC' => __DIR__ . '/../..' . '/classes/class-wpml-xmlrpc.php', 'WPML_XML_Config_Log_Factory' => __DIR__ . '/../..' . '/classes/xml-config/log/class-wpml-xml-config-log-ui-factory.php', 'WPML_XML_Config_Log_Notice' => __DIR__ . '/../..' . '/classes/xml-config/log/class-wpml-xml-config-log-notice.php', 'WPML_XML_Config_Log_UI' => __DIR__ . '/../..' . '/classes/xml-config/log/class-wpml-xml-config-log-ui.php', 'WPML_XML_Config_Read' => __DIR__ . '/../..' . '/classes/xml-config/read/interface-wpml-xml-config-read.php', 'WPML_XML_Config_Read_File' => __DIR__ . '/../..' . '/classes/xml-config/read/class-wpml-xml-config-read-file.php', 'WPML_XML_Config_Read_Option' => __DIR__ . '/../..' . '/classes/xml-config/read/class-wpml-xml-config-read-option.php', 'WPML_XML_Config_Validate' => __DIR__ . '/../..' . '/classes/xml-config/class-wpml-xml-config-validate.php', 'WPML_XML_Transform' => __DIR__ . '/../..' . '/classes/xml-config/transform/interface-wpml-xml-transform.php', 'WP_Async_Request' => __DIR__ . '/..' . '/a5hleyrich/wp-background-processing/classes/wp-async-request.php', 'WP_Background_Process' => __DIR__ . '/..' . '/a5hleyrich/wp-background-processing/classes/wp-background-process.php', 'Whip_BasicMessage' => __DIR__ . '/..' . '/yoast/whip/src/messages/Whip_BasicMessage.php', 'Whip_Configuration' => __DIR__ . '/..' . '/yoast/whip/src/Whip_Configuration.php', 'Whip_DismissStorage' => __DIR__ . '/..' . '/yoast/whip/src/interfaces/Whip_DismissStorage.php', 'Whip_EmptyProperty' => __DIR__ . '/..' . '/yoast/whip/src/exceptions/Whip_EmptyProperty.php', 'Whip_Host' => __DIR__ . '/..' . '/yoast/whip/src/Whip_Host.php', 'Whip_HostMessage' => __DIR__ . '/..' . '/yoast/whip/src/messages/Whip_HostMessage.php', 'Whip_InvalidOperatorType' => __DIR__ . '/..' . '/yoast/whip/src/exceptions/Whip_InvalidOperatorType.php', 'Whip_InvalidType' => __DIR__ . '/..' . '/yoast/whip/src/exceptions/Whip_InvalidType.php', 'Whip_InvalidVersionComparisonString' => __DIR__ . '/..' . '/yoast/whip/src/exceptions/Whip_InvalidVersionComparisonString.php', 'Whip_InvalidVersionRequirementMessage' => __DIR__ . '/..' . '/yoast/whip/src/messages/Whip_InvalidVersionRequirementMessage.php', 'Whip_Listener' => __DIR__ . '/..' . '/yoast/whip/src/interfaces/Whip_Listener.php', 'Whip_Message' => __DIR__ . '/..' . '/yoast/whip/src/interfaces/Whip_Message.php', 'Whip_MessageDismisser' => __DIR__ . '/..' . '/yoast/whip/src/Whip_MessageDismisser.php', 'Whip_MessageFormatter' => __DIR__ . '/..' . '/yoast/whip/src/Whip_MessageFormatter.php', 'Whip_MessagePresenter' => __DIR__ . '/..' . '/yoast/whip/src/interfaces/Whip_MessagePresenter.php', 'Whip_MessagesManager' => __DIR__ . '/..' . '/yoast/whip/src/Whip_MessagesManager.php', 'Whip_NullMessage' => __DIR__ . '/..' . '/yoast/whip/src/messages/Whip_NullMessage.php', 'Whip_Requirement' => __DIR__ . '/..' . '/yoast/whip/src/interfaces/Whip_Requirement.php', 'Whip_RequirementsChecker' => __DIR__ . '/..' . '/yoast/whip/src/Whip_RequirementsChecker.php', 'Whip_UpgradePhpMessage' => __DIR__ . '/..' . '/yoast/whip/src/messages/Whip_UpgradePhpMessage.php', 'Whip_VersionDetector' => __DIR__ . '/..' . '/yoast/whip/src/interfaces/Whip_VersionDetector.php', 'Whip_VersionRequirement' => __DIR__ . '/..' . '/yoast/whip/src/Whip_VersionRequirement.php', 'Whip_WPDismissOption' => __DIR__ . '/..' . '/yoast/whip/src/Whip_WPDismissOption.php', 'Whip_WPMessageDismissListener' => __DIR__ . '/..' . '/yoast/whip/src/Whip_WPMessageDismissListener.php', 'Whip_WPMessagePresenter' => __DIR__ . '/..' . '/yoast/whip/src/presenters/Whip_WPMessagePresenter.php', 'icl_cache' => __DIR__ . '/../..' . '/inc/cache.php', 'wpml_zip' => __DIR__ . '/../..' . '/inc/wpml_zip.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace {
    class WPML_Cache_Directory
    {
        const DIR_PERMISSIONS = 0775;
        const MAIN_DIRECTORY_NAME = 'wpml';
        const NOTICE_GROUP = 'wpml-cache-directory';
        const NOTICE_INVALID_CACHE = 'invalid-cache';
        /**
         * WPML_Cache_Directory constructor.
         *
         * @param WPML_WP_API $wp_api
         */
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        /**
         * @param string $relative_path
         *
         * @return string|bool absolute path or false if we can't have a writable and readable directory
         */
        public function get($relative_path = '')
        {
        }
        /**
         * @param string $relative_path
         */
        public function remove($relative_path = '')
        {
        }
    }
}
namespace WPML\Setup {
    class Option
    {
        const POSTS_LIMIT_FOR_AUTOMATIC_TRANSLATION = 10;
        const OPTION_GROUP = 'setup';
        const CURRENT_STEP = 'current-step';
        const ORIGINAL_LANG = 'original-lang';
        const TRANSLATED_LANGS = 'translated-langs';
        const LANGUAGES_MAPPING = 'languages-mapping';
        const WHO_MODE = 'who-mode';
        const TRANSLATE_EVERYTHING = 'translate-everything';
        const TRANSLATE_EVERYTHING_COMPLETED = 'translate-everything-completed';
        const TRANSLATE_EVERYTHING_IS_PAUSED = 'translate-everything-is-paused';
        const TM_ALLOWED = 'is-tm-allowed';
        const REVIEW_MODE = 'review-mode';
        const NO_REVIEW = 'no-review';
        const PUBLISH_AND_REVIEW = 'publish-and-review';
        const HOLD_FOR_REVIEW = 'before-publish';
        public static function getCurrentStep()
        {
        }
        public static function saveCurrentStep($step)
        {
        }
        public static function getOriginalLang()
        {
        }
        public static function setOriginalLang($lang)
        {
        }
        public static function getTranslationLangs()
        {
        }
        public static function setTranslationLangs(array $langs)
        {
        }
        /**
         * Sets service as default translation mode if there's a default Translation Service linked to this instance.
         *
         * @param bool $hasPreferredTranslationService
         */
        public static function setDefaultTranslationMode($hasPreferredTranslationService = false)
        {
        }
        public static function setOnlyMyselfAsDefault()
        {
        }
        public static function setTranslationMode(array $mode)
        {
        }
        public static function getTranslationMode()
        {
        }
        public static function setTranslateEverythingDefault()
        {
        }
        public static function shouldTranslateEverything($default = false)
        {
        }
        /** @param bool $state */
        public static function setTranslateEverything($state)
        {
        }
        /**
         * @return bool
         */
        public static function isPausedTranslateEverything()
        {
        }
        /** @param bool $state */
        public static function setIsPausedTranslateEverything($state)
        {
        }
        /**
         * @return bool
         */
        public static function getTranslateEverything()
        {
        }
        public static function setTranslateEverythingCompleted($completed)
        {
        }
        public static function markPostTypeAsCompleted($postType, $languages)
        {
        }
        public static function removePostTypeFromCompleted($postType)
        {
        }
        public static function removeLanguageFromCompleted($language)
        {
        }
        public static function getTranslateEverythingCompleted()
        {
        }
        public static function isTMAllowed()
        {
        }
        public static function setTMAllowed($isTMAllowed)
        {
        }
        public static function setReviewMode($mode)
        {
        }
        public static function getReviewMode($default = self::HOLD_FOR_REVIEW)
        {
        }
        public static function shouldBeReviewed()
        {
        }
        /**
         * @return LanguageMapping[]
         */
        public static function getLanguageMappings()
        {
        }
        /**
         * @param LanguageMapping $languageMapping
         */
        public static function addLanguageMapping(\WPML\Element\API\Entity\LanguageMapping $languageMapping)
        {
        }
        /**
         * @param bool $hasPreferredTranslationService
         * @return bool
         */
        public static function getTranslateEverythingDefaultInSetup($hasPreferredTranslationService = false)
        {
        }
    }
}
namespace WPML\Convert {
    class Ids
    {
        const ANY_POST = 'any_post';
        const ANY_TERM = 'any_term';
        /**
         * @param int|string|array|mixed $ids
         * @param string|null            $elementType
         * @param bool                   $fallbackToOriginal
         * @param string|null            $targetLang
         *
         * @return callable|mixed|null
         */
        public static function convert($ids, $elementType = null, $fallbackToOriginal = false, $targetLang = null)
        {
        }
        /**
         * Finds the unique separator pattern between IDs or return false otherwise.
         *
         * @param string $string
         *
         * @return false|string
         */
        public static function guessGlue($string)
        {
        }
    }
}
namespace WPML\Element\API {
    /**
     * Class PostTranslations
     * @package WPML\Element\API
     * @method static callable|int setAsSource( ...$el_id, ...$language_code ) - Curried :: int → string → void
     * @method static callable|int setAsTranslationOf( ...$el_id, ...$translated_id, ...$language_code )
     * @method static callable|array get( ...$el_id ) - Curried :: int → [object]
     * @method static callable|array|null getInLanguage( ...$el_id, ...$language_code ) - Curried :: int → string → array|null
     * @method static callable|array|null getInCurrentLanguage( ...$el_id ) - Curried :: int → array|null
     * @method static callable|array getIfOriginal( ...$el_id ) - Curried :: int → [object]
     * @method static callable|array getOriginal( ...$element_id ) - Curried :: int → object|null
     * @method static callable|array getOriginalId( ...$element_id ) - Curried :: int → int
     */
    class PostTranslations
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @param callable $fn
         *
         * @return \Closure
         */
        public static function withPostType($fn)
        {
        }
    }
}
namespace WPML {
    class Timer
    {
        public function start($timeOut)
        {
        }
        public function hasTimedOut()
        {
        }
        public function hasNotTimedOut()
        {
        }
    }
}
namespace WPML\Element\API {
    /**
     * @method static callable|string getCodeByName( ...$name ) - Curried :: string->string
     *
     * It returns language code according to the given name in the current display language.
     *
     * eg. 'Französisch' in German will return 'fr'
     *
     * @method static array getActive()
     *
     * It returns an array of the active languages.
     *
     * The returned array is indexed by language code and every element has the following structure:
     * ```
     *  'fr' => [
     *      'code'           => 'fr',
     *      'id'             => 3,
     *      'english_name'   => 'French',
     *      'native_name'    => 'Français',
     *      'major'          => 1,
     *      'default_locale' => 'fr_FR',
     *      'encode_url'     => 0,
     *      'tag'            => 'fr ,
     *      'display_name'   => 'French
     *  ]
     * ```
     * @method static array getSecondaries()
     *
     * It returns an array of the secondary languages.
     *
     * The returned array is indexed by language code and every element has the following structure:
     * ```
     *  'fr' => [
     *      'code'           => 'fr',
     *      'id'             => 3,
     *      'english_name'   => 'French',
     *      'native_name'    => 'Français',
     *      'major'          => 1,
     *      'default_locale' => 'fr_FR',
     *      'encode_url'     => 0,
     *      'tag'            => 'fr ,
     *      'display_name'   => 'French
     *  ]
     * ```
     * @method static array getSecondaryCodes()
     *
     * It returns an array of the secondary language codes.
     *
     * @method static array|callback getLanguageDetails( ...$code ) - Curried :: string->array
     *
     * It returns details of a language.
     *
     * An example output:
     * ```
     * [
     *      'code'           => 'fr',
     *      'id'             => 3,
     *      'english_name'   => 'French',
     *      'native_name'    => 'Français',
     *      'major'          => 1,
     *      'default_locale' => 'fr_FR',
     *      'encode_url'     => 0,
     *      'tag'            => 'fr ,
     *      'display_name'   => 'French
     *  ]
     * ```
     *
     *
     * @method static array getDefault()
     *
     * It returns a default language details.
     *
     * An example output:
     *```
     *[
     *      'code'           => 'fr',
     *      'id'             => 3,
     *      'english_name'   => 'French',
     *      'native_name'    => 'Français',
     *      'major'          => 1,
     *      'default_locale' => 'fr_FR',
     *      'encode_url'     => 0,
     *      'tag'            => 'fr ,
     *      'display_name'   => 'French
     * ]
     *```
     *
     * @method static string getDefaultCode()
     *
     * It returns a default language code.
     *
     * @method static string getCurrentCode()
     *
     * It returns a current language code.
     *
     * @method static callable|string getFlagUrl( ...$code ) - Curried :: string → string
     *
     * Gets the flag url for the given language code.
     *
     * @method static callable|string getFlag( ...$code ) - Curried :: string → [string, bool]
     *
     * Returns flag url and from_template
     *
     * @method static callable|array withFlags( ...$langs ) - Curried :: [code => lang] → [code => lang]
     *
     * Adds the language flag url to the array of languages.
     *
     * @method static array getAll( $lang = false ) string|false → [lang]
     *
     * It returns an array of the all the languages.
     *
     * The returned array is indexed by language code and every element has the following structure:
     * ```
     *  'fr' => [
     *      'code'           => 'fr',
     *      'id'             => 3,
     *      'english_name'   => 'French',
     *      'native_name'    => 'Français',
     *      'major'          => 1,
     *      'default_locale' => 'fr_FR',
     *      'encode_url'     => 0,
     *      'tag'            => 'fr ,
     *      'display_name'   => 'French
     *  ]
     * ```
     *
     * @method static callable|int|false setLanguageTranslation( ...$langCode, ...$displayLangCode, ...$name ) - Curried :: string->string->string->int|false
     *
     * It sets a language translation.
     *
     * @method static callable|int|false setFlag( ...$langCode, ...$flag, ...$fromTemplate ) - Curried :: string->string->bool->int|false
     *
     * It sets a language flag.
     *
     * @method static callable|string getWPLocale( ...$langDetails ) - Curried :: array->string
     *
     * @method static callable|string downloadWPLocale( $locale ) - Curried :: string->string
     *
     * It attempts to download a WP language pack for a specific locale, stores the result in settings.
     */
    class Languages
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const LANGUAGES_MAPPING_OPTION = 'wpml_languages_mapping';
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Curried :: string → bool
         * Determine if the language is Right to Left
         *
         * @param string|null $code
         *
         * @return callable|bool
         */
        public static function isRtl($code = null)
        {
        }
        /**
         * Curried :: [code => lang] → [code => lang]
         *
         * Adds language direction, right to left, to the languages data
         *
         * @param string[] $langs
         *
         * @return callable|mixed[]
         */
        public static function withRtl($langs = null)
        {
        }
        /**
         * Curried :: string -> string|false
         *
         * Returns the language code given a locale
         *
         * @param string|null $locale
         *
         * @return callable|string|false
         */
        public static function localeToCode($locale = null)
        {
        }
        /**
         * @param string $code
         * @param string $english_name
         * @param string $default_locale
         * @param int    $major
         * @param int    $active
         * @param int    $encode_url
         * @param string $tag
         * @param string $country
         *
         * @return bool|int
         */
        public static function add($code, $english_name, $default_locale, $major = 0, $active = 0, $encode_url = 0, $tag = '', $country = null)
        {
        }
        /**
         * @return Just|Nothing
         */
        public static function getUserLanguageCode()
        {
        }
        public static function withBuiltInInfo($languages)
        {
        }
        public static function addBuiltInInfo($language)
        {
        }
        /**
         * It lets you run a function in a specific language.
         *
         * ```php
         *  $result = Languages::whileInLanguage( 'de' )
         *		->invoke( 'my_function' )
         *		->runWith( 1, 2, 'some' );
         * ```
         *
         * @param string $lang
         *
         * @return BeforeAfter
         */
        public static function whileInLanguage($lang)
        {
        }
    }
}
namespace WPML\Records {
    /**
     * Class Translations
     * @package WPML\Records
     *
     * @method static callable|array getByTrid( ...$trid )
     *
     * Returns array of records from wp_icl_translations matching given $trid
     */
    class Translations
    {
        const OLDEST_FIRST = 'ASC';
        const NEWEST_FIRST = 'DESC';
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @param array|null  $order
         * @param string|null $postType
         *
         * @return callable|Collection
         */
        public static function getForPostType(array $order = null, $postType = null)
        {
        }
        /**
         * @param string|null     $lang
         * @param Collection|null $translations
         *
         * @return callable|Collection
         */
        public static function getSourceInLanguage($lang = null, \WPML\Collect\Support\Collection $translations = null)
        {
        }
        public static function getSource(\WPML\Collect\Support\Collection $translations = null)
        {
        }
        public static function getSourceByTrid($trid = null)
        {
        }
    }
}
namespace WPML\Settings\PostType {
    class Automatic
    {
        const GROUP = 'post-type';
        const FROM_CONFIG = 'automatic-config';
        const OVERRIDE = 'automatic-override';
        public static function saveFromConfig(array $config)
        {
        }
        public static function isAutomatic($postType)
        {
        }
        public static function set($postType, $state)
        {
        }
        public static function shouldTranslate($postType)
        {
        }
    }
}
namespace WPML\Settings {
    class LanguageNegotiation
    {
        /**
         * @return bool
         */
        public static function isDomain()
        {
        }
        /**
         * @return bool
         */
        public static function isDir()
        {
        }
        /**
         * @return bool
         */
        public static function isParam()
        {
        }
    }
}
namespace WPML\Element\API {
    class IfOriginalPost
    {
        /**
         * Gets the element details for the translations of the given post id.
         * Returns an empty array if the id is not an original post.
         *
         * element details structure:
         * ```php
         * (object) [
         *  'original' => false,            // bool True if the element is the original, false if a translation
         *  'element_id' => 123,            // int The element id
         *  'source_language_code' => 'en', // string The source language code
         *  'language_code' => 'de',        // string The language of the element
         *  'trid' => 456,                  // int The translation id that links translations to source.
         * ]
         * ```
         *
         * @param int $id The post id. Optional. If missing then returns a callable waiting for the id.
         *
         * @return \WPML\Collect\Support\Collection<mixed>|callable
         */
        public static function getTranslations($id = null)
        {
        }
        /**
         * Get the element ids for the translations of the given post id.
         * Returns an empty array if the id is not an original post.
         *
         * @param int $id The post id. Optional. If missing then returns a callable waiting for the id.
         *
         * @return \WPML\Collect\Support\Collection<mixed>|callable
         */
        public static function getTranslationIds($id = null)
        {
        }
    }
}
namespace WPML\API {
    class PostTypes
    {
        /**
         * @return array  eg. [ 'page', 'post' ]
         */
        public static function getTranslatable()
        {
        }
        /**
         * Get an array of post types where keys are like: 'post', 'page' and so on
         *
         * @return array<string, \WP_Post_Type>
         */
        public static function getTranslatableWithInfo()
        {
        }
        /**
         * @return array  eg. [ 'page', 'post' ]
         */
        public static function getDisplayAsTranslated()
        {
        }
        /**
         * Gets post types that are translatable and excludes ones that are display as translated.
         *
         * @return array  eg. [ 'page', 'post' ]
         */
        public static function getOnlyTranslatable()
        {
        }
        /**
         * Gets post types that are automatically translatable.
         * Attachment post type is excluded.
         *
         * @return array  eg. [ 'page', 'post' ]
         */
        public static function getAutomaticTranslatable()
        {
        }
        public static function withNames($postTypes)
        {
        }
    }
}
namespace WPML\Element\API\Entity {
    class LanguageMapping
    {
        /**
         * @param string $sourceCode
         * @param string $sourceName
         * @param int $targetId
         * @param string $targetCode
         */
        public function __construct($sourceCode = null, $sourceName = null, $targetId = null, $targetCode = null)
        {
        }
        /**
         * @return array
         */
        public function toATEFormat()
        {
        }
        public function __get($name)
        {
        }
        public function __isset($name)
        {
        }
        public function matches($languageCode)
        {
        }
    }
}
namespace WPML {
    class DocPage
    {
        public static function getTranslateAutomatically()
        {
        }
        public static function gettingStartedGuide()
        {
        }
        public static function editorOptions()
        {
        }
        public static function addTranslationServiceForm()
        {
        }
        public static function aboutATE()
        {
        }
    }
}
namespace WPML\Element\API {
    /**
     * Class Post
     * @package WPML\Element\API
     *
     * @method static callable|string getLang( ...$postId ): Curried :: int->string
     */
    class Post
    {
        use \WPML\FP\Curryable;
        public static function init()
        {
        }
    }
    /**
     * Class Translations
     * @package WPML\Element\API
     * @method static callable|int setLanguage( ...$el_id, ...$el_type, ...$trid, ...$language_code, ...$src_language_code, ...$check_duplicates )
     *
     * - Curried :: int → string → int|null → string → string → string|null → bool → bool|int|null|string
     *
     *          Wrapper function for SitePress::set_element_language_details
     *
     * - int         $el_id the element's ID (for terms we use the `term_taxonomy_id`)
     * - string      $el_type
     * - int         $trid
     * - string      $language_code
     * - null|string $src_language_code
     * - bool        $check_duplicates
     *
     * returns bool|int|null|string
     *
     * @method static callable|int setAsSource( ...$el_id, ...$el_type, ...$language_code )
     * @method static callable|int setAsTranslationOf( ...$el_id, ...$el_type, ...$translated_id, ...$language_code )
     * @method static callable|array get( ...$el_id, ...$el_type )
     * @method static callable|array|null getInLanguage( ...$el_id, ...$el_type, ...$language_code )
     * @method static callable|array|null getInCurrentLanguage( ...$el_id, ...$el_type )
     * @method static callable|array getIfOriginal( ...$el_id, ...$el_type )
     * @method static callable|array getOriginal( ...$element_id, ...$element_type )
     * @method static callable|array getOriginalId( ...$element_id, ...$element_type )
     * @method static callable|bool isOriginal( ...$el_id, ...$translations )
     */
    class Translations
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    class TranslationsRepository
    {
        public static function preloadForPosts($posts)
        {
        }
        public static function reset()
        {
        }
        public static function getByTridAndLanguage($trid, $language)
        {
        }
        public static function getByTranslationId($translationId)
        {
        }
    }
}
namespace WPML\API {
    class Settings
    {
        const WPML_DOWNLOADED_LOCALES_KEY = 'wpml_downloaded_locales';
        /**
         * @param string $key
         * @param bool|mixed $default
         *
         * @return bool|mixed
         */
        public static function get($key, $default = false)
        {
        }
        /**
         * @param mixed $default
         * @param string $key
         *
         * @return bool|mixed
         */
        public static function getOr($default, $key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return bool
         */
        public static function set($key, $value)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return bool
         */
        public static function setAndSave($key, $value)
        {
        }
        /**
         * Updates the setting using the sub key and value.
         * Assumes that the setting found by the main key is an array or object
         *
         * @param string $key
         * @param string $subKey
         * @param mixed $value
         *
         * @return bool
         */
        public static function assoc($key, $subKey, $value)
        {
        }
        public static function pathOr($default, $path)
        {
        }
    }
    /**
     * Class Version
     * @package WPML\API
     *
     * @method static string firstInstallation()
     *
     * It returns the version of WPML which has been used during the first installation.
     *
     * @method static callback|bool isHigherThanInstallation( ...$version ) - Curried :: string->bool
     *
     * It compares the specified version with the version which has been used during the first installation.
     *
     * @method static string current()
     *
     * It gets the current WPML version.
     */
    class Version
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    class Sanitize
    {
        /**
         * @param string $value
         *
         * @return false|string
         */
        public static function string($value, $flags = ENT_QUOTES)
        {
        }
        /**
         * @param string $property
         * @param array $arr
         *
         * @return null|false|string
         */
        public static function stringProp($property, $arr, $flags = ENT_QUOTES)
        {
        }
    }
}
namespace WPML\WP {
    class OptionManager
    {
        /**
         * Get a WordPress option that is stored by group.
         *
         * @param string $group
         * @param string $key
         * @param mixed  $default
         *
         * @return mixed
         */
        public function get($group, $key, $default = false)
        {
        }
        /**
         * Save a WordPress option that is stored by group
         * The value is then stored by key in the group.
         *
         * eg. set( 'TM-wizard', 'complete', 'true' ) will create or add to the option WPML(TM-wizard)
         * The dat in the option will then be an array of items stored by key.
         *
         * @param string $group
         * @param string $key
         * @param mixed  $value
         * @param bool   $autoload
         */
        public function set($group, $key, $value, $autoload = true)
        {
        }
        /**
         * Returns all the options that need to be deleted on WPML reset.
         *
         * @param array $options
         *
         * @return array
         */
        public function reset_options($options)
        {
        }
        /**
         * Curried :: string → string → a → void
         * @param string|null $group
         * @param string|null $key
         * @param mixed|null $value
         *
         * @return callable|void
         */
        public static function updateWithoutAutoLoad($group = null, $key = null, $value = null)
        {
        }
        /**
         * Curried :: string → string → a → void
         * @param string|null $group
         * @param string|null $key
         * @param mixed|null $value
         *
         * @return callable|void
         */
        public static function update($group = null, $key = null, $value = null)
        {
        }
        /**
         * Curried :: a → string → string → b
         * @param mixed|null $default
         * @param string|null $group
         * @param string|null $key
         *
         * @return callable|mixed
         */
        public static function getOr($default = null, $group = null, $key = null)
        {
        }
    }
}
namespace WPML\Utilities {
    interface ILock
    {
        public function create($release_timeout = null);
        public function release();
    }
    class Lock implements \WPML\Utilities\ILock
    {
        /** @var string  */
        protected $name;
        /**
         * Lock constructor.
         *
         * @param \wpdb  $wpdb
         * @param string $name
         */
        public function __construct(\wpdb $wpdb, $name)
        {
        }
        public static function whileLocked($lockName, $releaseTimeout, callable $fn)
        {
        }
        /**
         * Creates a lock using WordPress options ( Based on WP class WP_Upgrader ).
         *
         * @param int $release_timeout Optional. The duration in seconds to respect an existing lock.
         *                             Default: 1 hour.
         * @return bool False if a lock couldn't be created or if the lock is still valid. True otherwise.
         */
        public function create($release_timeout = null)
        {
        }
        /**
         * Releases an upgrader lock.
         *
         * @return bool True if the lock was successfully released. False on failure.
         */
        public function release()
        {
        }
    }
}
namespace Psr\Log {
    /**
     * Describes a logger instance.
     *
     * The message MUST be a string or object implementing __toString().
     *
     * The message MAY contain placeholders in the form: {foo} where foo
     * will be replaced by the context data in key "foo".
     *
     * The context array can contain arbitrary data. The only assumption that
     * can be made by implementors is that if an Exception instance is given
     * to produce a stack trace, it MUST be in a key named "exception".
     *
     * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
     * for the full interface specification.
     */
    interface LoggerInterface
    {
        /**
         * System is unusable.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function emergency($message, array $context = array());
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function alert($message, array $context = array());
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function critical($message, array $context = array());
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function error($message, array $context = array());
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function warning($message, array $context = array());
        /**
         * Normal but significant events.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function notice($message, array $context = array());
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function info($message, array $context = array());
        /**
         * Detailed debug information.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function debug($message, array $context = array());
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed   $level
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         *
         * @throws \Psr\Log\InvalidArgumentException
         */
        public function log($level, $message, array $context = array());
    }
}
namespace WPML\Utilities {
    class Logger implements \Psr\Log\LoggerInterface
    {
        /** @inheritDoc */
        public function emergency($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function alert($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function critical($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function error($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function warning($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function notice($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function info($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function debug($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function log($level, $message, array $context = [])
        {
        }
        /**
         * Interpolates context values into the message placeholders.
         *
         * @param string $message
         * @param array  $context
         *
         * @return string
         */
        protected function interpolate($message, array $context = [])
        {
        }
    }
}
namespace WPML\Media {
    class Option
    {
        const OPTION_KEY = '_wpml_media';
        const DUPLICATE_MEDIA_KEY = '_wpml_media_duplicate';
        const DUPLICATE_FEATURED_KEY = '_wpml_media_featured';
        const SETUP_FINISHED = 'starting_help';
        /**
         * This makes sure that the option '_wpml_media' is written to the database.
         * This is required because after the WPML setup there are parallel ajax calls,
         * which can lead having the '_wpml_media' in the WP "notoptions" cache key, while
         * the set options call ran in a parallel and writes when "notoptions" isn't set,
         * so it never gets cleared. In that case the "Calculation..." of automatic
         * translation will never start as the media setup does not finish.
         *
         * Note: This only happens when persistent object caching (Redis) is active.
         *
         * @return void
         */
        public static function prepareSetup()
        {
        }
        public static function isSetupFinished()
        {
        }
        public static function setSetupFinished($setupFinished = true)
        {
        }
        /**
         * It gets default setting for new content creation.
         * It determines if media should be translated, duplicated or not.
         *
         * @return array{always_translate_media: bool, duplicate_media: bool, duplicate_featured: bool}
         */
        public static function getNewContentSettings()
        {
        }
        /**
         * @param array{always_translate_media: bool, duplicate_media: bool, duplicate_featured: bool} $settings
         *
         * @return void
         */
        public static function setNewContentSettings(array $settings)
        {
        }
        /**
         * @param int $postId
         * @param bool $useGlobalSettings
         *
         * @return bool|null
         */
        public static function shouldDuplicateMedia($postId, $useGlobalSettings = true)
        {
        }
        /**
         * @param int $postId
         * @param bool $useGlobalSettings
         *
         * @return bool|null
         */
        public static function shouldDuplicateFeatured($postId, $useGlobalSettings = true)
        {
        }
        /**
         * @param int $postId
         * @param bool $flag
         */
        public static function setDuplicateMediaForIndividualPost($postId, $flag)
        {
        }
        /**
         * @param int $postId
         * @param bool $flag
         */
        public static function setDuplicateFeaturedForIndividualPost($postId, $flag)
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public static function setTranslateMediaLibraryTexts($flag)
        {
        }
        /**
         * @return bool
         */
        public static function getTranslateMediaLibraryTexts()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_CLI_Action extends \IWPML_Action
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_REST_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
    /**
     * IWPML_CLI_Action_Loader interface
     *
     * @package WPML\Core
     */
    /**
     * Interface IWPML_CLI_Action_Loader
     *
     * @author OnTheGo Systems
     */
    interface IWPML_CLI_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
}
namespace WPML\Ajax {
    interface IHandler
    {
        /**
         * @param \WPML\Collect\Support\Collection<mixed> $data
         *
         * @return \WPML\FP\Either
         */
        public function run(\WPML\Collect\Support\Collection $data);
    }
}
namespace WPML\Core\BackgroundTask\Exception {
    class TaskIsNotRunnableException extends \Exception
    {
    }
}
namespace WPML\Core\BackgroundTask\Exception\TaskNotRunnable {
    class TaskIsCompletedException extends \WPML\Core\BackgroundTask\Exception\TaskIsNotRunnableException
    {
    }
    class TaskIsPausedException extends \WPML\Core\BackgroundTask\Exception\TaskIsNotRunnableException
    {
    }
    class ExceededMaxRetriesException extends \WPML\Core\BackgroundTask\Exception\TaskIsNotRunnableException
    {
    }
}
namespace WPML\Core\BackgroundTask\Service {
    /**
     * Class BackgroundTaskService
     *
     * @package WPML\Core
     *
     * Class to add background ajax tasks.
     * Call the `add` function with the class name of the endpoint and any data that the end point requires.
     */
    class BackgroundTaskService
    {
        /**
         * @param BackgroundTaskRepository $backgroundTaskRepository
         * @param PersistBackgroundTask $persistBackgroundTaskCommand
         * @param UpdateBackgroundTask $updateBackgroundTaskCommand
         */
        public function __construct(\WPML\Core\BackgroundTask\Repository\BackgroundTaskRepository $backgroundTaskRepository, \WPML\Core\BackgroundTask\Command\PersistBackgroundTask $persistBackgroundTaskCommand, \WPML\Core\BackgroundTask\Command\UpdateBackgroundTask $updateBackgroundTaskCommand)
        {
        }
        /**
         * @param TaskEndpointInterface $taskEndpoint
         * @param Collection $payload
         *
         * @throws TaskIsNotRunnableException
         * @return BackgroundTask|null
         */
        public function startByTaskId($taskId)
        {
        }
        /**
         * @param TaskEndpointInterface $taskEndpoint
         * @param Collection $payload
         *
         * @return BackgroundTask|null
         */
        public function addOnce(\WPML\Core\BackgroundTask\Model\TaskEndpointInterface $taskEndpoint, \WPML\Collect\Support\Collection $payload)
        {
        }
        /**
         * @param TaskEndpointInterface $taskEndpoint
         * @param Collection $payload
         *
         * @return BackgroundTask|null
         */
        public function add(\WPML\Core\BackgroundTask\Model\TaskEndpointInterface $taskEndpoint, \WPML\Collect\Support\Collection $payload)
        {
        }
    }
}
namespace WPML\Core\BackgroundTask\Command {
    class PersistBackgroundTask
    {
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param $task_type
         * @param $task_status
         * @param $total_count
         * @param $completed_ids
         * @param $payload
         *
         * @return BackgroundTask
         */
        public function run($task_type, $task_status, $total_count, $payload, $completed_ids)
        {
        }
    }
    class UpdateBackgroundTask
    {
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param BackgroundTask $task
         * @param TaskEndpointInterface $taskEndpoint
         * 
         * @return BackgroundTask
         */
        public function startTask(\WPML\Core\BackgroundTask\Model\BackgroundTask $task, \WPML\Core\BackgroundTask\Model\TaskEndpointInterface $taskEndpoint)
        {
        }
        /**
         * @param BackgroundTask $model
         */
        public function runUpdate(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
        /**
         * @param BackgroundTask $model
         */
        public function runStop(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
        /**
         * @param BackgroundTask $model
         */
        public function saveStatusPaused(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
        /**
         * @param BackgroundTask $model
         */
        public function saveStatusResumed(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
        /**
         * @param BackgroundTask $model
         */
        public function saveStatusRestart(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
        /**
         * @param BackgroundTask $model
         * @return BackgroundTask
         */
        public function runRetry(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
    }
}
namespace WPML\Core\BackgroundTask\Model {
    interface TaskEndpointInterface
    {
        /** @return bool */
        public function isDisplayed();
        /** @return string */
        public function getType();
        /** @return int */
        public function getMaxRetries();
        /** @return int */
        public function getLockTime();
        /**
         * @param Collection $data
         * @return int
         */
        public function getTotalRecords(\WPML\Collect\Support\Collection $data);
        /**
         * @param Collection $data
         * @return int
         */
        public function getDescription(\WPML\Collect\Support\Collection $data);
        /**
         * @param Collection $data
         * @return callable|Right|Left
         */
        public function run(\WPML\Collect\Support\Collection $data);
    }
    /**
     * Class BackgroundTask
     *
     * @author OnTheGoSystems
     */
    class BackgroundTask
    {
        const TABLE_NAME = 'icl_background_task';
        const ITEMS_COUNT_IN_TASK = 10;
        const TASK_TYPE_DEFAULT = 'Default';
        const TASK_TYPE_PROCESS_NEW_TRANSLATABLE_FIELDS = 'ProcessNewTranslatableFields';
        const TASK_STATUS_PENDING = 0;
        const TASK_STATUS_INPROGRESS = 1;
        const TASK_STATUS_PAUSED = 2;
        const TASK_STATUS_COMPLETED = 3;
        //const EXPIRE_AFTER_SECONDS = 2 * MINUTE_IN_SECONDS;
        const EXPIRE_AFTER_SECONDS = 3600;
        const MAX_RETRY_COUNT = 2;
        /**
         * @return array
         */
        public function serialize()
        {
        }
        public function finish()
        {
        }
        /**
         * @param int|string|null $taskId
         */
        public function setTaskId($taskId)
        {
        }
        /**
         * @return int|null
         */
        public function getTaskId()
        {
        }
        /**
         * @param string|null
         */
        public function setTaskType($taskType)
        {
        }
        /**
         * @return string
         */
        public function getTaskType()
        {
        }
        /**
         * @param int|null $status
         */
        public function setStatus($status)
        {
        }
        /**
         * @return int
         */
        public function getStatus()
        {
        }
        /**
         * @return bool
         */
        public function isStatusPending()
        {
        }
        /**
         * @return bool
         */
        public function isStatusInProgress()
        {
        }
        /**
         * @return bool
         */
        public function isStatusPaused()
        {
        }
        /**
         * @return bool
         */
        public function isStatusCompleted()
        {
        }
        /**
         * @return string
         */
        public function getStatusName()
        {
        }
        /**
         * @param \DateTime|null $startingDate
         */
        public function setStartingDate($startingDate)
        {
        }
        /**
         * @return \DateTime|null
         */
        public function getStartingDate()
        {
        }
        /**
         * @return bool
         */
        public function hasStartingDate()
        {
        }
        /**
         * @param int|string|null $totalCount
         */
        public function setTotalCount($totalCount)
        {
        }
        /**
         * @return int
         */
        public function getTotalCount()
        {
        }
        /**
         * @param int $completed_count
         */
        public function addCompletedCount($completed_count)
        {
        }
        /**
         * @return int
         */
        public function getCompletedCount()
        {
        }
        /**
         * @param int|string|null $completedCount
         */
        public function setCompletedCount($completedCount)
        {
        }
        /**
         * @param array $completed_ids
         */
        public function addCompletedIds($completed_ids)
        {
        }
        /**
         * @return array|null
         */
        public function getCompletedIds()
        {
        }
        /**
         * @param array|null $completedIds
         */
        public function setCompletedIds($completedIds)
        {
        }
        /**
         * @param bool
         */
        public function hasCompletedIds()
        {
        }
        /**
         * @param array|null $payload
         */
        public function setPayload($payload)
        {
        }
        /**
         * @return array
         */
        public function getPayload()
        {
        }
        /**
         * @param int|string|null $retryCount
         */
        public function setRetryCount($retryCount)
        {
        }
        /**
         * @return int
         */
        public function getRetryCount()
        {
        }
    }
}
namespace WPML\Core\BackgroundTask\Repository {
    class BackgroundTaskRepository
    {
        /** @var \wpdb $wpdb */
        protected $wpdb;
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param int $task_id
         *
         * @return BackgroundTask
         */
        public function getByTaskId($task_id)
        {
        }
        /**
         * @param string $task_type
         *
         * @return BackgroundTask|null
         */
        public function getLastIncompletedByType($task_type)
        {
        }
        /**
         * @param array $statuses
         * 
         * @return BackgroundTask[]
         */
        public function getAllByTaskStatus(array $statuses)
        {
        }
        /**
         * @return BackgroundTask[]
         */
        public function getAllRunnableTasks()
        {
        }
        /**
         * @return int
         */
        public function getCountRunnableTasks()
        {
        }
        /**
         * @param array $data
         *
         * @return BackgroundTask
         */
        public function createFromQueryResult(array $data)
        {
        }
    }
}
namespace WPML {
    /**
     * Class UIPage
     * @package WPML
     *
     * @method static callback|bool isLanguages( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTranslationManagement( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTMDashboard( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTMBasket( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTMJobs( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTMTranslators( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTMATE( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTroubleshooting( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTranslationQueue( ...$get ) - Curried :: array → bool
     * @method static callback|bool isPage( ...$page, ...$get ) - Curried :: string → array → bool
     * @method static string getLanguages()
     * @method static string getTroubleshooting()
     * @method static string getTM()
     * @method static string getTMDashboard()
     * @method static string getTMBasket()
     * @method static string getTMATE()
     * @method static string getTMTranslators()
     * @method static string getTMJobs()
     * @method static string getTranslationQueue()
     */
    class UIPage
    {
        const TM_PAGE = 'tm/menu/main.php';
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
        public static function isSettings(array $get = null)
        {
        }
        /**
         * @param array|null $get
         *
         * @return bool
         */
        public static function isMainSettingsTab(array $get = null)
        {
        }
        /**
         * @param array|null $get
         *
         * @return bool
         */
        public static function isNotificationSettingsTab(array $get = null)
        {
        }
        /**
         * @param array|null $get
         *
         * @return bool
         */
        public static function isCustomXMLConfigSettingsTab(array $get = null)
        {
        }
        /**
         * @param string|null $tab
         * @param array|null $get
         *
         * @return bool
         */
        public static function isSettingTab($tab = null, array $get = null)
        {
        }
        public static function getSettings()
        {
        }
    }
}
namespace WPML\LIB\WP {
    /**
     * Class Cache
     * @package WPML\LIB\WP
     * @method static callable memorize( ...$group, ...$expire, ...$fn ) :: string → int -> callable → callable
     * @method static callable memorizeWithCheck( ...$group, ...$checkingFn, ...$expire, ...$fn ) :: string → callable → int -> callable → callable
     * @method static callable|bool set( ...$group, ...$key, ...$expire, ...$value ) :: string → string → mixed → int->bool
     * @method static callable|Just|Nothing get( ...$group, ...$key ) :: string → string → Nothing | Just( mixed )
     */
    class Cache
    {
        const KEYS = 'WPML_WP_Cache__group_keys';
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @param string $group
         * @param string $key
         *
         * @return \WPML\FP\Just|\WPML\FP\Nothing
         */
        public static function getInternal($group, $key)
        {
        }
        /**
         * @param string $group
         *
         * @return void
         */
        public static function flushGroup($group)
        {
        }
        /**
         * Clear cache for a memoized function. The function must be memoized using `memorize` or `memorizeWithCheck`.
         * The clearMemoizedFunction must be called with the same arguments as memoized function.
         *
         * For example if you have a function:
         * $fn = function( $a, $b ) { return $a + $b; };
         * $memoizedFn = Cache::memorize( 'group', 3600, $fn );
         * $memoizedFn( 1, 2 );
         *
         * Then you can clear the cache for this function by calling:
         * Cache::clearMemoizedFunction( 'group', 1, 2 );
         *
         * @param string $group
         * @param ...$functionArgs
         *
         * @return void
         */
        public static function clearMemoizedFunction($group, ...$functionArgs)
        {
        }
        /**
         * Delete a cached value using the key and group.
         *
         *
         * @param string $group
         * @param string $key
         *
         * @return void
         */
        public static function delete($group, $key)
        {
        }
        /**
         * We store the list of keys belonging to a group in a separate key in order to be able to flush the group
         * as many engines like Redis does not support `flush_group` function ( which was introduced in WP 6.1 ).
         *
         * @return array
         */
        public static function getKeysInGroup($group)
        {
        }
        /**
         * It is internal function used to build a key for a function arguments. Do not use it directly.
         *
         * @param array $args
         *
         * @return string
         */
        public static function _buildKeyForFunctionArguments(array $args)
        {
        }
    }
    class Hooks
    {
        /**
         * @param string|string[] $action
         * @param int             $priority
         * @param int             $accepted_args
         *
         * @return \WPML\FP\Promise
         */
        public static function onAction($action, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * @param string|string[] $filter
         * @param int             $priority
         * @param int             $accepted_args
         *
         * @return \WPML\FP\Promise
         */
        public static function onFilter($filter, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * @param callable        $fn
         * @param string|string[] $actionOrFilter
         * @param int             $priority
         * @param int             $accepted_args
         *
         * @return \WPML\FP\Promise
         */
        public static function onHook(callable $fn, $actionOrFilter, $priority = 10, $accepted_args = 1)
        {
        }
        public static function callWithFilter($fn, $name, $filterFn, $priority = 10, $acceptedArgs = 1)
        {
        }
        public static function getArgs(array $argsLabels)
        {
        }
    }
    class Roles
    {
        public static function hasCap($cap = null, $role = null)
        {
        }
    }
    /**
     * @method static callable|Either post( ...$url, ...$args ) - Curried :: string → array → Left( WP_Error ) | Right(string)
     */
    class Http
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    class WPDB
    {
        /**
         * It prevents MySQL errors in debug.log.
         *
         * @param callable $func
         *
         * @return mixed
         */
        public static function withoutError(callable $func)
        {
        }
    }
    /**
     * @method static callable|bool hasBlock( ...$string ) - Curried :: string → bool
     * @method static callable|bool doesNotHaveBlock( ...$string ) - Curried :: string → bool
     * @method static callable|bool stripBlockData( ...$string ) - Curried :: string → string
     */
    class Gutenberg
    {
        use \WPML\FP\Curryable;
        const GUTENBERG_OPENING_START = '<!-- wp:';
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * Class Post
     * @package WPML\LIB\WP
     * @method static callable|Either getTerms( ...$postId, ...$taxonomy )  - Curried:: int → string → Either false|WP_Error [WP_Term]
     * @method static callable|mixed getMetaSingle( ...$postId, ...$key ) - Curried :: int → string → mixed
     * @method static callable|int|bool updateMeta( ...$postId, ...$key, ...$value ) - Curried :: int → string → mixed → int|bool
     * @method static callable|bool deleteMeta( ...$postId, ...$key ) - Curried :: int → string → bool
     * @method static callable|string|false getType( ...$postId ) - Curried :: int → string|bool
     * @method static callable|\WP_Post|null get( ...$postId ) - Curried :: int → \WP_Post|null
     * @method static callable|string|false getStatus( ...$postId ) - Curried :: int → string|bool
     * @method static callable|int update(...$data) - Curried :: array -> int
     * @method static callable|int insert(...$data) - Curried :: array -> int
     * @method static callable|int setStatus(...$id, ...$status) - Curried :: int -> string -> int
     * @method static callable|int setStatusWithoutFilters(...$id, ...$status) - Curried :: int -> string -> int
     * @method static callable|\WP_Post|false|null delete(...$id) - Curried :: int -> \WP_Post|false|null
     * @method static callable|\WP_Post|false|null trash(...$id) - Curried :: int -> \WP_Post|false|null
     */
    class Post
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|mixed get( ...$name ) - Curried :: string → mixed
     * @method static callable|mixed getRaw( ...$name ) - Curried :: string → null|string
     * @method static callable|mixed getOr( ...$name, ...$default ) - Curried :: string → mixed → mixed
     * @method static callable|mixed attemptSerializedRecovery( ...$name, ...$default ) - Curried :: string → mixed → mixed
     * @method static callable|bool update( ...$name, ...$value ) - Curried :: string → mixed → bool
     * @method static callable|bool updateWithoutAutoLoad( ...$name, ...$value ) - Curried :: string → mixed → bool
     * @method static callable|bool delete( ...$name ) - Curried :: string → bool
     */
    class Option
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * This function is used to get an option value from the database
         * attempting to restore it if the option is serialized but returns false.
         *
         * Also, this method will return the $default value when the option is corrupted.
         *
         * @method static callable|mixed getOrAttemptRecovery( ...$name, ...$default ) - Curried :: string → mixed → mixed
         */
        public static function getOrAttemptRecovery($name = null, $default = null)
        {
        }
    }
    /**
     * Class PostType
     * @package WPML\LIB\WP
     * @method static callable|int getPublishedCount( ...$postType ) - Curried :: string → int
     * @method static callable|Just|Nothing getObject( ...$postType ) - Curried :: string → Maybe( WP_Post_Type )|Nothing
     * @method static callable|Just|Nothing getPluralName( ...$postType ) - Curried :: string → Maybe(string) |Nothing
     * @method static callable|Just|Nothing getSingularName( ...$postType ) - Curried :: string → Maybe(string) |Nothing
     */
    class PostType
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * Class Url
     * @package WPML\LIB\WP
     *
     * @method static callable|mixed isAdmin( ...$url ) - Curried :: string → bool
     * @method static callable|mixed isLogin( ...$url ) - Curried :: string → bool
     * @method static callable|mixed isContentDirectory( ...$url ) - Curried :: string → bool
     */
    class Url
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return bool
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|mixed get( ...$name ) - Curried :: string → mixed
     * @method static callable|mixed getOr( ...$name, ...$default ) - Curried :: string → mixed → mixed
     * @method static callable|mixed set( ...$name, ...$value, ...$expiration ) - Curried :: string → mixed → int -> mixed
     * @method static callable|mixed delete( ...$name ) - Curried :: string → mxied
     */
    class Transient
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
    /**
     * @method static callable|Either verify(string ...$action, Collection ...$data) - Curried :: string -> Collection -> Left('Nonce error') | Right(Collection)
     * @method static callable|Either verifyEndPoint(Collection ...$data) - Curried :: Collection -> Left('Nonce error') | Right(Collection)
     * @method static callable|string create(string ...$action ) - Curried :: string -> string
     */
    class Nonce
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
}
namespace WPML\LIB\WP\App {
    class Resources
    {
        /**
         * Enqueue a JavaScript application file from the dist directory.
         *
         * @param string        $app
         * @param string        $pluginBaseUrl
         * @param string        $pluginBasePath
         * @param string        $version
         * @param null|string   $domain
         * @param null|string[] $localize
         *
         * @return void
         */
        public static function enqueue($app, $pluginBaseUrl, $pluginBasePath, $version, $domain = null, $localize = null)
        {
        }
        /**
         * Enqueue a JavaScript application file from the dist directory, with dependencies.
         *
         * @param string        $app
         * @param string        $pluginBaseUrl
         * @param string        $pluginBasePath
         * @param string        $version
         * @param null|string   $domain
         * @param null|string[] $localize
         * @param null|string[] $dependencies
         *
         * @return void
         */
        public static function enqueueWithDeps($app, $pluginBaseUrl, $pluginBasePath, $version, $domain = null, $localize = null, $dependencies = [])
        {
        }
    }
}
namespace WPML\LIB\WP {
    class WordPress
    {
        /**
         * Compare the WordPress version.
         * @param string $operator
         * @param string $version
         *
         * @return bool
         */
        public static function versionCompare($operator, $version)
        {
        }
        /**
         * @param mixed $var
         *
         * @return \WPML\FP\Either|callable
         */
        public static function handleError($var = null)
        {
        }
    }
    class Attachment
    {
        /**
         * @param string $url
         *
         * @return int|null The found post ID, or null on failure.
         */
        public static function idFromUrl($url)
        {
        }
        /**
         * @param string $url
         *
         * @return int The found post ID, or 0 on failure.
         */
        public static function idByGuid($url)
        {
        }
    }
    class User
    {
        const CAP_MANAGE_TRANSLATIONS = 'manage_translations';
        const CAP_MANAGE_OPTIONS = 'manage_options';
        const CAP_ADMINISTRATOR = 'administrator';
        const CAP_TRANSLATE = 'translate';
        const CAP_MANAGE_TRANSLATION_MANAGEMENT = 'wpml_manage_translation_management';
        const CAP_PUBLISH_PAGES = 'publish_pages';
        const CAP_PUBLISH_POSTS = 'publish_posts';
        const CAP_EDIT_OTHERS_PAGES = 'edit_others_pages';
        const CAP_EDIT_OTHERS_POSTS = 'edit_others_posts';
        const CAP_EDIT_POSTS = 'edit_posts';
        const CAP_EDIT_PAGES = 'edit_pages';
        const ROLE_EDITOR_MINIMUM_CAPS = [self::CAP_EDIT_OTHERS_POSTS, self::CAP_PUBLISH_PAGES, self::CAP_PUBLISH_POSTS, self::CAP_EDIT_PAGES, self::CAP_EDIT_POSTS];
        /**
         * @param int|WP_User $user
         * @param string      $capability
         *
         * @return bool
         */
        public static function userCan($user, $capability)
        {
        }
        /**
         * @param string $capability
         *
         * @return bool
         */
        public static function currentUserCan($capability)
        {
        }
        /**
         * @return int
         */
        public static function getCurrentId()
        {
        }
        /**
         * @return \WP_User|null
         */
        public static function getCurrent()
        {
        }
        /**
         * Curried function to update the user meta.
         *
         * @param int    $userId
         * @param string $metaKey
         * @param mixed  $metaValue
         *
         * @return callable|int|bool
         */
        public static function updateMeta($userId = null, $metaKey = null, $metaValue = null)
        {
        }
        /**
         * Curried function to get the user meta
         *
         * @param int    $userId
         * @param string $metaKey
         *
         * @return callable|mixed
         */
        public static function getMetaSingle($userId = null, $metaKey = null)
        {
        }
        /**
         * Curried function to get the user meta
         *
         * @param int    $userId
         * @param string $metaKey
         *
         * @return callable|bool
         */
        public static function deleteMeta($userId = null, $metaKey = null)
        {
        }
        /**
         * @param int|null $userId
         *
         * @return callable|\WP_User
         */
        public static function get($userId = null)
        {
        }
        /**
         * @param array|null $data
         *
         * @return callable|int|\WP_Error
         */
        public static function insert($data = null)
        {
        }
        /**
         * @param int|null $userId
         *
         * @return callable|int
         */
        public static function notifyNew($userId = null)
        {
        }
        /**
         * Add the avatar to a user.
         *
         * @param object|\WP_User $user
         *
         * @return callable|object
         */
        public static function withAvatar($user = null)
        {
        }
        /**
         * Add the edit link to a user.
         *
         * @param object|\WP_User $user
         *
         * @return callable|object
         */
        public static function withEditLink($user = null)
        {
        }
        /**
         * Checks if the given user has the requested capability.
         * The current user is used if no user is defined.
         *
         * @param string $capability Capability to check for.
         * @param ?\WP_User $user User to check. Using current user if not defined.
         */
        public static function hasCap($capabilitiy, \WP_User $user = null)
        {
        }
        /**
         * Check if user can manage translations (Translation Manager).
         * Alias for self::hasCap( User::CAP_MANAGE_TRANSLATIONS ).
         *
         * @param ?\WP_User $user User to check. Using current user if not defined.
         */
        public static function canManageTranslations(\WP_User $user = null)
        {
        }
        /**
         * Check if user can manage options (Administrator).
         * Alias for self::hasCap( User::CAP_MANAGE_OPTIONS ).
         *
         * @param ?\WP_User $user User to check. Using current user if not defined.
         */
        public static function canManageOptions(\WP_User $user = null)
        {
        }
        /**
         * @param \WP_User|null $user User to check. Using current user if not defined.
         *
         * @return bool
         */
        public static function isAdministrator(\WP_User $user = null)
        {
        }
        /**
         * @param \WP_User|null $user User to check. Using current user if not defined.
         *
         * @return bool
         */
        public static function isEditor(\WP_User $user = null)
        {
        }
        /**
         * @param \WP_User|null $user User to check. Using current user if not defined.
         *
         * @return bool
         */
        public static function isTranslator(\WP_User $user = null)
        {
        }
    }
}
namespace PhpMyAdmin\SqlParser {
    /**
     * Abstract statement definition.
     *
     * @category Statements
     *
     * @license  https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    abstract class Statement
    {
        /**
         * Options for this statement.
         *
         * The option would be the key and the value can be an integer or an array.
         *
         * The integer represents only the index used.
         *
         * The array may have two keys: `0` is used to represent the index used and
         * `1` is the type of the option (which may be 'var' or 'var='). Both
         * options mean they expect a value after the option (e.g. `A = B` or `A B`,
         * in which case `A` is the key and `B` is the value). The only difference
         * is in the building process. `var` options are built as `A B` and  `var=`
         * options are built as `A = B`
         *
         * Two options that can be used together must have different values for
         * indexes, else, when they will be used together, an error will occur.
         *
         * @var array
         */
        public static $OPTIONS = array();
        /**
         * The clauses of this statement, in order.
         *
         * The value attributed to each clause is used by the builder and it may
         * have one of the following values:
         *
         *     - 1 = 01 - add the clause only
         *     - 2 = 10 - add the keyword
         *     - 3 = 11 - add both the keyword and the clause
         *
         * @var array
         */
        public static $CLAUSES = array();
        public static $END_OPTIONS = array();
        /**
         * The options of this query.
         *
         * @var OptionsArray
         *
         * @see static::$OPTIONS
         */
        public $options;
        /**
         * The index of the first token used in this statement.
         *
         * @var int
         */
        public $first;
        /**
         * The index of the last token used in this statement.
         *
         * @var int
         */
        public $last;
        /**
         * Constructor.
         *
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function __construct(\PhpMyAdmin\SqlParser\Parser $parser = null, \PhpMyAdmin\SqlParser\TokensList $list = null)
        {
        }
        /**
         * Builds the string representation of this statement.
         *
         * @return string
         */
        public function build()
        {
        }
        /**
         * Parses the statements defined by the tokens list.
         *
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         * @throws Exceptions\ParserException
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
        /**
         * Function called before the token is processed.
         *
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         * @param Token      $token  the token that is being parsed
         */
        public function before(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, \PhpMyAdmin\SqlParser\Token $token)
        {
        }
        /**
         * Function called after the token was processed.
         *
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         * @param Token      $token  the token that is being parsed
         */
        public function after(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, \PhpMyAdmin\SqlParser\Token $token)
        {
        }
        /**
         * Gets the clauses of this statement.
         *
         * @return array
         */
        public function getClauses()
        {
        }
        /**
         * Builds the string representation of this statement.
         *
         * @see static::build
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Validates the order of the clauses in parsed statement
         * Ideally this should be called after successfully
         * completing the parsing of each statement.
         *
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         *
         * @return bool
         * @throws Exceptions\ParserException
         */
        public function validateClauseOrder($parser, $list)
        {
        }
    }
}
namespace PhpMyAdmin\SqlParser\Statements {
    /**
     * Not implemented (yet) statements.
     *
     * The `after` function makes the parser jump straight to the first delimiter.
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class NotImplementedStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * The part of the statement that can't be parsed.
         *
         * @var Token[]
         */
        public $unknown = array();
        /**
         * @return string
         */
        public function build()
        {
        }
        /**
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
    }
    /**
     * `EXPLAIN` statement.
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ExplainStatement extends \PhpMyAdmin\SqlParser\Statements\NotImplementedStatement
    {
    }
    /**
     * `PURGE` statement.
     *
     * PURGE { BINARY | MASTER } LOGS
     *   { TO 'log_name' | BEFORE datetime_expr }
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class PurgeStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * The type of logs
         *
         * @var String
         */
        public $log_type;
        /**
         * The end option of this query.
         *
         * @var String
         */
        public $end_option;
        /**
         * The end expr of this query.
         *
         * @var String
         */
        public $end_expr;
        /**
         * @return string
         */
        public function build()
        {
        }
        /**
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
    }
    /**
     * `INSERT` statement.
     *
     * INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
     *     [INTO] tbl_name
     *     [PARTITION (partition_name,...)]
     *     [(col_name,...)]
     *     {VALUES | VALUE} ({expr | DEFAULT},...),(...),...
     *     [ ON DUPLICATE KEY UPDATE
     *       col_name=expr
     *         [, col_name=expr] ... ]
     *
     * or
     *
     * INSERT [LOW_PRIORITY | DELAYED | HIGH_PRIORITY] [IGNORE]
     *     [INTO] tbl_name
     *     [PARTITION (partition_name,...)]
     *     SET col_name={expr | DEFAULT}, ...
     *     [ ON DUPLICATE KEY UPDATE
     *       col_name=expr
     *         [, col_name=expr] ... ]
     *
     * or
     *
     * INSERT [LOW_PRIORITY | HIGH_PRIORITY] [IGNORE]
     *     [INTO] tbl_name
     *     [PARTITION (partition_name,...)]
     *     [(col_name,...)]
     *     SELECT ...
     *     [ ON DUPLICATE KEY UPDATE
     *       col_name=expr
     *         [, col_name=expr] ... ]
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class InsertStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options for `INSERT` statements.
         *
         * @var array
         */
        public static $OPTIONS = array('LOW_PRIORITY' => 1, 'DELAYED' => 2, 'HIGH_PRIORITY' => 3, 'IGNORE' => 4);
        /**
         * Tables used as target for this statement.
         *
         * @var IntoKeyword
         */
        public $into;
        /**
         * Values to be inserted.
         *
         * @var ArrayObj[]|null
         */
        public $values;
        /**
         * If SET clause is present
         * holds the SetOperation.
         *
         * @var SetOperation[]
         */
        public $set;
        /**
         * If SELECT clause is present
         * holds the SelectStatement.
         *
         * @var SelectStatement
         */
        public $select;
        /**
         * If ON DUPLICATE KEY UPDATE clause is present
         * holds the SetOperation.
         *
         * @var SetOperation[]
         */
        public $onDuplicateSet;
        /**
         * @return string
         */
        public function build()
        {
        }
        /**
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
    }
    /**
     * `LOCK` statement.
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class LockStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Tables with their Lock expressions.
         *
         * @var LockExpression[]
         */
        public $locked = array();
        /**
         * Whether it's a LOCK statement
         * if false, it's an UNLOCK statement
         */
        public $isLock = true;
        /**
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
        /**
         * @return string
         */
        public function build()
        {
        }
    }
    /**
     * `ANALYZE` statement.
     *
     * ANALYZE array(NO_WRITE_TO_BINLOG | LOCAL] TABLE
     *  tbl_name array(, tbl_name] ...
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class AnalyzeStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options of this statement.
         *
         * @var array
         */
        public static $OPTIONS = array('TABLE' => 1, 'NO_WRITE_TO_BINLOG' => 2, 'LOCAL' => 3);
        /**
         * Analyzed tables.
         *
         * @var Expression[]
         */
        public $tables;
    }
    /**
     * Maintenance statement.
     *
     * They follow the syntax:
     *     STMT [some options] tbl_name [, tbl_name] ... [some more options]
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class MaintenanceStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Tables maintained.
         *
         * @var Expression[]
         */
        public $tables;
        /**
         * Function called after the token was processed.
         *
         * Parses the additional options from the end.
         *
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         * @param Token      $token  the token that is being parsed
         */
        public function after(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, \PhpMyAdmin\SqlParser\Token $token)
        {
        }
    }
    /**
     * `CHECK` statement.
     *
     * CHECK TABLE tbl_name array(, tbl_name] ... array(option] ...
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class CheckStatement extends \PhpMyAdmin\SqlParser\Statements\MaintenanceStatement
    {
        /**
         * Options of this statement.
         *
         * @var array
         */
        public static $OPTIONS = array('TABLE' => 1, 'FOR UPGRADE' => 2, 'QUICK' => 3, 'FAST' => 4, 'MEDIUM' => 5, 'EXTENDED' => 6, 'CHANGED' => 7);
    }
    /**
     * `REPLACE` statement.
     *
     * REPLACE [LOW_PRIORITY | DELAYED]
     *     [INTO] tbl_name [(col_name,...)]
     *     {VALUES | VALUE} ({expr | DEFAULT},...),(...),...
     *
     * or
     *
     * REPLACE [LOW_PRIORITY | DELAYED]
     *     [INTO] tbl_name
     *     SET col_name={expr | DEFAULT}, ...
     *
     * or
     *
     * REPLACE [LOW_PRIORITY | DELAYED]
     *   [INTO] tbl_name
     *   [PARTITION (partition_name,...)]
     *   [(col_name,...)]
     *   SELECT ...
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ReplaceStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options for `REPLACE` statements and their slot ID.
         *
         * @var array
         */
        public static $OPTIONS = array('LOW_PRIORITY' => 1, 'DELAYED' => 1);
        /**
         * Tables used as target for this statement.
         *
         * @var IntoKeyword
         */
        public $into;
        /**
         * Values to be replaced.
         *
         * @var Array2d
         */
        public $values;
        /**
         * If SET clause is present
         * holds the SetOperation.
         *
         * @var SetOperation[]
         */
        public $set;
        /**
         * If SELECT clause is present
         * holds the SelectStatement.
         *
         * @var SelectStatement
         */
        public $select;
        /**
         * @return string
         */
        public function build()
        {
        }
        /**
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
    }
    /**
     * `TRUNCATE` statement.
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class TruncateStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options for `TRUNCATE` statements.
         *
         * @var array
         */
        public static $OPTIONS = array('TABLE' => 1);
        /**
         * The name of the truncated table.
         *
         * @var Expression
         */
        public $table;
        /**
         * Special build method for truncate statement as Statement::build would return empty string.
         *
         * @return string
         */
        public function build()
        {
        }
    }
    /**
     * `CHECKSUM` statement.
     *
     * CHECKSUM TABLE tbl_name array(, tbl_name] ... array( QUICK | EXTENDED ]
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ChecksumStatement extends \PhpMyAdmin\SqlParser\Statements\MaintenanceStatement
    {
        /**
         * Options of this statement.
         *
         * @var array
         */
        public static $OPTIONS = array('TABLE' => 1, 'QUICK' => 2, 'EXTENDED' => 3);
    }
    /**
     * `LOAD` statement.
     *
     * LOAD DATA [LOW_PRIORITY | CONCURRENT] [LOCAL] INFILE 'file_name'
     *   [REPLACE | IGNORE]
     *   INTO TABLE tbl_name
     *   [PARTITION (partition_name,...)]
     *   [CHARACTER SET charset_name]
     *   [{FIELDS | COLUMNS}
     *       [TERMINATED BY 'string']
     *       [[OPTIONALLY] ENCLOSED BY 'char']
     *       [ESCAPED BY 'char']
     *   ]
     *   [LINES
     *       [STARTING BY 'string']
     *       [TERMINATED BY 'string']
     *  ]
     *   [IGNORE number {LINES | ROWS}]
     *   [(col_name_or_user_var,...)]
     *   [SET col_name = expr,...]
     *
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class LoadStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options for `LOAD` statements and their slot ID.
         *
         * @var array
         */
        public static $OPTIONS = array('LOW_PRIORITY' => 1, 'CONCURRENT' => 1, 'LOCAL' => 2);
        /**
         * FIELDS/COLUMNS Options for `LOAD DATA...INFILE` statements.
         *
         * @var array
         */
        public static $FIELDS_OPTIONS = array('TERMINATED BY' => array(1, 'expr'), 'OPTIONALLY' => 2, 'ENCLOSED BY' => array(3, 'expr'), 'ESCAPED BY' => array(4, 'expr'));
        /**
         * LINES Options for `LOAD DATA...INFILE` statements.
         *
         * @var array
         */
        public static $LINES_OPTIONS = array('STARTING BY' => array(1, 'expr'), 'TERMINATED BY' => array(2, 'expr'));
        /**
         * File name being used to load data.
         *
         * @var Expression
         */
        public $file_name;
        /**
         * Table used as destination for this statement.
         *
         * @var Expression
         */
        public $table;
        /**
         * Partitions used as source for this statement.
         *
         * @var ArrayObj
         */
        public $partition;
        /**
         * Character set used in this statement.
         *
         * @var Expression
         */
        public $charset_name;
        /**
         * Options for FIELDS/COLUMNS keyword.
         *
         * @var OptionsArray
         *
         * @see static::$FIELDS_OPTIONS
         */
        public $fields_options;
        /**
         * Whether to use `FIELDS` or `COLUMNS` while building.
         *
         * @var string
         */
        public $fields_keyword;
        /**
         * Options for OPTIONS keyword.
         *
         * @var OptionsArray
         *
         * @see static::$LINES_OPTIONS
         */
        public $lines_options;
        /**
         * Column names or user variables.
         *
         * @var Expression[]
         */
        public $col_name_or_user_var;
        /**
         * SET clause's updated values(optional).
         *
         * @var SetOperation[]
         */
        public $set;
        /**
         * Ignore 'number' LINES/ROWS.
         *
         * @var Expression
         */
        public $ignore_number;
        /**
         * REPLACE/IGNORE Keyword.
         *
         * @var string
         */
        public $replace_ignore;
        /**
         * LINES/ROWS Keyword.
         *
         * @var string
         */
        public $lines_rows;
        /**
         * @return string
         */
        public function build()
        {
        }
        /**
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
        public function parseFileOptions(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, $keyword = 'FIELDS')
        {
        }
        public function parseKeywordsAccordingToState($parser, $list, $state)
        {
        }
    }
    /**
     * `RENAME` statement.
     *
     * RENAME TABLE tbl_name TO new_tbl_name
     *  [, tbl_name2 TO new_tbl_name2] ...
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class RenameStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * The old and new names of the tables.
         *
         * @var RenameOperation[]
         */
        public $renames;
        /**
         * Function called before the token is processed.
         *
         * Skips the `TABLE` keyword after `RENAME`.
         *
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         * @param Token      $token  the token that is being parsed
         */
        public function before(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, \PhpMyAdmin\SqlParser\Token $token)
        {
        }
        /**
         * @return string
         */
        public function build()
        {
        }
    }
    /**
     * `SHOW` statement.
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ShowStatement extends \PhpMyAdmin\SqlParser\Statements\NotImplementedStatement
    {
        /**
         * Options of this statement.
         *
         * @var array
         */
        public static $OPTIONS = array('CREATE' => 1, 'AUTHORS' => 2, 'BINARY' => 2, 'BINLOG' => 2, 'CHARACTER' => 2, 'CODE' => 2, 'COLLATION' => 2, 'COLUMNS' => 2, 'CONTRIBUTORS' => 2, 'DATABASE' => 2, 'DATABASES' => 2, 'ENGINE' => 2, 'ENGINES' => 2, 'ERRORS' => 2, 'EVENT' => 2, 'EVENTS' => 2, 'FUNCTION' => 2, 'GRANTS' => 2, 'HOSTS' => 2, 'INDEX' => 2, 'INNODB' => 2, 'LOGS' => 2, 'MASTER' => 2, 'OPEN' => 2, 'PLUGINS' => 2, 'PRIVILEGES' => 2, 'PROCEDURE' => 2, 'PROCESSLIST' => 2, 'PROFILE' => 2, 'PROFILES' => 2, 'SCHEDULER' => 2, 'SET' => 2, 'SLAVE' => 2, 'STATUS' => 2, 'TABLE' => 2, 'TABLES' => 2, 'TRIGGER' => 2, 'TRIGGERS' => 2, 'VARIABLES' => 2, 'VIEW' => 2, 'WARNINGS' => 2);
    }
    /**
     * `UPDATE` statement.
     *
     * UPDATE [LOW_PRIORITY] [IGNORE] table_reference
     *     SET col_name1={expr1|DEFAULT} [, col_name2={expr2|DEFAULT}] ...
     *     [WHERE where_condition]
     *     [ORDER BY ...]
     *     [LIMIT row_count]
     *
     * or
     *
     * UPDATE [LOW_PRIORITY] [IGNORE] table_references
     *     SET col_name1={expr1|DEFAULT} [, col_name2={expr2|DEFAULT}] ...
     *     [WHERE where_condition]
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class UpdateStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options for `UPDATE` statements and their slot ID.
         *
         * @var array
         */
        public static $OPTIONS = array('LOW_PRIORITY' => 1, 'IGNORE' => 2);
        /**
         * The clauses of this statement, in order.
         *
         * @see Statement::$CLAUSES
         *
         * @var array
         */
        public static $CLAUSES = array(
            'UPDATE' => array('UPDATE', 2),
            // Used for options.
            '_OPTIONS' => array('_OPTIONS', 1),
            // Used for updated tables.
            '_UPDATE' => array('UPDATE', 1),
            'SET' => array('SET', 3),
            'WHERE' => array('WHERE', 3),
            'ORDER BY' => array('ORDER BY', 3),
            'LIMIT' => array('LIMIT', 3),
        );
        /**
         * Tables used as sources for this statement.
         *
         * @var Expression[]
         */
        public $tables;
        /**
         * The updated values.
         *
         * @var SetOperation[]
         */
        public $set;
        /**
         * Conditions used for filtering each row of the result set.
         *
         * @var Condition[]
         */
        public $where;
        /**
         * Specifies the order of the rows in the result set.
         *
         * @var OrderKeyword[]
         */
        public $order;
        /**
         * Conditions used for limiting the size of the result set.
         *
         * @var Limit
         */
        public $limit;
    }
    /**
     * `REPAIR` statement.
     *
     * REPAIR [NO_WRITE_TO_BINLOG | LOCAL] TABLE
     *  tbl_name [, tbl_name] ...
     *  [QUICK] [EXTENDED] [USE_FRM]
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class RepairStatement extends \PhpMyAdmin\SqlParser\Statements\MaintenanceStatement
    {
        /**
         * Options of this statement.
         *
         * @var array
         */
        public static $OPTIONS = array('TABLE' => 1, 'NO_WRITE_TO_BINLOG' => 2, 'LOCAL' => 3, 'QUICK' => 4, 'EXTENDED' => 5, 'USE_FRM' => 6);
    }
    /**
     * `RESTORE` statement.
     *
     * RESTORE TABLE tbl_name [, tbl_name] ... FROM '/path/to/backup/directory'
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class RestoreStatement extends \PhpMyAdmin\SqlParser\Statements\MaintenanceStatement
    {
        /**
         * Options of this statement.
         *
         * @var array
         */
        public static $OPTIONS = array('TABLE' => 1, 'FROM' => array(2, 'var'));
    }
    /**
     * Transaction statement.
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class TransactionStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * START TRANSACTION and BEGIN.
         *
         * @var int
         */
        const TYPE_BEGIN = 1;
        /**
         * COMMIT and ROLLBACK.
         *
         * @var int
         */
        const TYPE_END = 2;
        /**
         * The type of this query.
         *
         * @var int
         */
        public $type;
        /**
         * The list of statements in this transaction.
         *
         * @var Statement[]
         */
        public $statements;
        /**
         * The ending transaction statement which may be a `COMMIT` or a `ROLLBACK`.
         *
         * @var TransactionStatement
         */
        public $end;
        /**
         * Options for this query.
         *
         * @var array
         */
        public static $OPTIONS = array('START TRANSACTION' => 1, 'BEGIN' => 1, 'COMMIT' => 1, 'ROLLBACK' => 1, 'WITH CONSISTENT SNAPSHOT' => 2, 'WORK' => 2, 'AND NO CHAIN' => 3, 'AND CHAIN' => 3, 'RELEASE' => 4, 'NO RELEASE' => 4);
        /**
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
        /**
         * @return string
         */
        public function build()
        {
        }
    }
    /**
     * `BACKUP` statement.
     *
     * BACKUP TABLE tbl_name array(, tbl_name] ... TO '/path/to/backup/directory'
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class BackupStatement extends \PhpMyAdmin\SqlParser\Statements\MaintenanceStatement
    {
        /**
         * Options of this statement.
         *
         * @var array
         */
        public static $OPTIONS = array('TABLE' => 1, 'NO_WRITE_TO_BINLOG' => 2, 'LOCAL' => 3, 'TO' => array(4, 'var'));
    }
    /**
     * `SET` statement.
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class SetStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * The clauses of this statement, in order.
         *
         * @see Statement::$CLAUSES
         *
         * @var array
         */
        public static $CLAUSES = array('SET' => array('SET', 3), '_END_OPTIONS' => array('_END_OPTIONS', 1));
        /**
         * Possible exceptions in SET statment.
         *
         * @var array
         */
        public static $OPTIONS = array('CHARSET' => array(3, 'var'), 'CHARACTER SET' => array(3, 'var'), 'NAMES' => array(3, 'var'), 'PASSWORD' => array(3, 'expr'), 'SESSION' => 3, 'GLOBAL' => 3, 'PERSIST' => 3, 'PERSIST_ONLY' => 3, '@@SESSION' => 3, '@@GLOBAL' => 3, '@@PERSIST' => 3, '@@PERSIST_ONLY' => 3);
        public static $END_OPTIONS = array('COLLATE' => array(1, 'var'), 'DEFAULT' => 1);
        /**
         * Options used in current statement.
         *
         * @var OptionsArray[]
         */
        public $options;
        /**
         * The end options of this query.
         *
         * @var OptionsArray
         *
         * @see static::$END_OPTIONS
         */
        public $end_options;
        /**
         * The updated values.
         *
         * @var SetOperation[]
         */
        public $set;
        /**
         * @return string
         */
        public function build()
        {
        }
    }
    /**
     * `DELETE` statement.
     *
     * DELETE [LOW_PRIORITY] [QUICK] [IGNORE] FROM tbl_name
     *     [PARTITION (partition_name,...)]
     *     [WHERE where_condition]
     *     [ORDER BY ...]
     *     [LIMIT row_count]
     *
     * Multi-table syntax
     *
     * DELETE [LOW_PRIORITY] [QUICK] [IGNORE]
     *   tbl_name[.*] [, tbl_name[.*]] ...
     *   FROM table_references
     *   [WHERE where_condition]
     *
     * OR
     *
     * DELETE [LOW_PRIORITY] [QUICK] [IGNORE]
     *   FROM tbl_name[.*] [, tbl_name[.*]] ...
     *   USING table_references
     *   [WHERE where_condition]
     *
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class DeleteStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options for `DELETE` statements.
         *
         * @var array
         */
        public static $OPTIONS = array('LOW_PRIORITY' => 1, 'QUICK' => 2, 'IGNORE' => 3);
        /**
         * The clauses of this statement, in order.
         *
         * @see Statement::$CLAUSES
         *
         * @var array
         */
        public static $CLAUSES = array(
            'DELETE' => array('DELETE', 2),
            // Used for options.
            '_OPTIONS' => array('_OPTIONS', 1),
            'FROM' => array('FROM', 3),
            'PARTITION' => array('PARTITION', 3),
            'USING' => array('USING', 3),
            'WHERE' => array('WHERE', 3),
            'ORDER BY' => array('ORDER BY', 3),
            'LIMIT' => array('LIMIT', 3),
        );
        /**
         * Table(s) used as sources for this statement.
         *
         * @var Expression[]
         */
        public $from;
        /**
         * Joins.
         *
         * @var JoinKeyword[]
         */
        public $join;
        /**
         * Tables used as sources for this statement.
         *
         * @var Expression[]
         */
        public $using;
        /**
         * Columns used in this statement.
         *
         * @var Expression[]
         */
        public $columns;
        /**
         * Partitions used as source for this statement.
         *
         * @var ArrayObj
         */
        public $partition;
        /**
         * Conditions used for filtering each row of the result set.
         *
         * @var Condition[]
         */
        public $where;
        /**
         * Specifies the order of the rows in the result set.
         *
         * @var OrderKeyword[]
         */
        public $order;
        /**
         * Conditions used for limiting the size of the result set.
         *
         * @var Limit
         */
        public $limit;
        /**
         * @return string
         */
        public function build()
        {
        }
        /**
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
    }
    /**
     * `ALTER` statement.
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class AlterStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Table affected.
         *
         * @var Expression
         */
        public $table;
        /**
         * Column affected by this statement.
         *
         * @var AlterOperation[]
         */
        public $altered = array();
        /**
         * Options of this statement.
         *
         * @var array
         */
        public static $OPTIONS = array('ONLINE' => 1, 'OFFLINE' => 1, 'IGNORE' => 2, 'DATABASE' => 3, 'EVENT' => 3, 'FUNCTION' => 3, 'PROCEDURE' => 3, 'SERVER' => 3, 'TABLE' => 3, 'TABLESPACE' => 3, 'USER' => 3, 'VIEW' => 3);
        /**
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
        /**
         * @return string
         */
        public function build()
        {
        }
    }
    /**
     * `CREATE` statement.
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class CreateStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options for `CREATE` statements.
         *
         * @var array
         */
        public static $OPTIONS = array(
            // CREATE TABLE
            'TEMPORARY' => 1,
            // CREATE VIEW
            'OR REPLACE' => 2,
            'ALGORITHM' => array(3, 'var='),
            // `DEFINER` is also used for `CREATE FUNCTION / PROCEDURE`
            'DEFINER' => array(4, 'expr='),
            // Used in `CREATE VIEW`
            'SQL SECURITY' => array(5, 'var'),
            'DATABASE' => 6,
            'EVENT' => 6,
            'FUNCTION' => 6,
            'INDEX' => 6,
            'UNIQUE INDEX' => 6,
            'FULLTEXT INDEX' => 6,
            'SPATIAL INDEX' => 6,
            'PROCEDURE' => 6,
            'SERVER' => 6,
            'TABLE' => 6,
            'TABLESPACE' => 6,
            'TRIGGER' => 6,
            'USER' => 6,
            'VIEW' => 6,
            'SCHEMA' => 6,
            // CREATE TABLE
            'IF NOT EXISTS' => 7,
        );
        /**
         * All database options.
         *
         * @var array
         */
        public static $DB_OPTIONS = array('CHARACTER SET' => array(1, 'var='), 'CHARSET' => array(1, 'var='), 'DEFAULT CHARACTER SET' => array(1, 'var='), 'DEFAULT CHARSET' => array(1, 'var='), 'DEFAULT COLLATE' => array(2, 'var='), 'COLLATE' => array(2, 'var='));
        /**
         * All table options.
         *
         * @var array
         */
        public static $TABLE_OPTIONS = array('ENGINE' => array(1, 'var='), 'AUTO_INCREMENT' => array(2, 'var='), 'AVG_ROW_LENGTH' => array(3, 'var'), 'CHARACTER SET' => array(4, 'var='), 'CHARSET' => array(4, 'var='), 'DEFAULT CHARACTER SET' => array(4, 'var='), 'DEFAULT CHARSET' => array(4, 'var='), 'CHECKSUM' => array(5, 'var'), 'DEFAULT COLLATE' => array(6, 'var='), 'COLLATE' => array(6, 'var='), 'COMMENT' => array(7, 'var='), 'CONNECTION' => array(8, 'var'), 'DATA DIRECTORY' => array(9, 'var'), 'DELAY_KEY_WRITE' => array(10, 'var'), 'INDEX DIRECTORY' => array(11, 'var'), 'INSERT_METHOD' => array(12, 'var'), 'KEY_BLOCK_SIZE' => array(13, 'var'), 'MAX_ROWS' => array(14, 'var'), 'MIN_ROWS' => array(15, 'var'), 'PACK_KEYS' => array(16, 'var'), 'PASSWORD' => array(17, 'var'), 'ROW_FORMAT' => array(18, 'var'), 'TABLESPACE' => array(19, 'var'), 'STORAGE' => array(20, 'var'), 'UNION' => array(21, 'var'));
        /**
         * All function options.
         *
         * @var array
         */
        public static $FUNC_OPTIONS = array('NOT' => array(2, 'var'), 'FUNCTION' => array(3, 'var='), 'PROCEDURE' => array(3, 'var='), 'CONTAINS' => array(4, 'expr'), 'NO' => array(4, 'var'), 'READS' => array(4, 'var'), 'MODIFIES' => array(4, 'expr'), 'SQL SECURITY' => array(6, 'var'), 'LANGUAGE' => array(7, 'var'), 'COMMENT' => array(8, 'var'), 'CREATE' => 1, 'DETERMINISTIC' => 2, 'DATA' => 5);
        /**
         * All trigger options.
         *
         * @var array
         */
        public static $TRIGGER_OPTIONS = array('BEFORE' => 1, 'AFTER' => 1, 'INSERT' => 2, 'UPDATE' => 2, 'DELETE' => 2);
        /**
         * The name of the entity that is created.
         *
         * Used by all `CREATE` statements.
         *
         * @var Expression
         */
        public $name;
        /**
         * The options of the entity (table, procedure, function, etc.).
         *
         * Used by `CREATE TABLE`, `CREATE FUNCTION` and `CREATE PROCEDURE`.
         *
         * @var OptionsArray
         *
         * @see static::$TABLE_OPTIONS
         * @see static::$FUNC_OPTIONS
         * @see static::$TRIGGER_OPTIONS
         */
        public $entityOptions;
        /**
         * If `CREATE TABLE`, a list of columns and keys.
         * If `CREATE VIEW`, a list of columns.
         *
         * Used by `CREATE TABLE` and `CREATE VIEW`.
         *
         * @var CreateDefinition[]|ArrayObj
         */
        public $fields;
        /**
         * If `CREATE TABLE ... SELECT`.
         * If `CREATE VIEW AS ` ... SELECT`.
         *
         * Used by `CREATE TABLE`, `CREATE VIEW`
         *
         * @var SelectStatement|null
         */
        public $select;
        /**
         * If `CREATE TABLE ... LIKE`.
         *
         * Used by `CREATE TABLE`
         *
         * @var Expression
         */
        public $like;
        /**
         * Expression used for partitioning.
         *
         * @var string
         */
        public $partitionBy;
        /**
         * The number of partitions.
         *
         * @var int
         */
        public $partitionsNum;
        /**
         * Expression used for subpartitioning.
         *
         * @var string
         */
        public $subpartitionBy;
        /**
         * The number of subpartitions.
         *
         * @var int
         */
        public $subpartitionsNum;
        /**
         * The partition of the new table.
         *
         * @var PartitionDefinition[]
         */
        public $partitions;
        /**
         * If `CREATE TRIGGER` the name of the table.
         *
         * Used by `CREATE TRIGGER`.
         *
         * @var Expression
         */
        public $table;
        /**
         * The return data type of this routine.
         *
         * Used by `CREATE FUNCTION`.
         *
         * @var DataType
         */
        public $return;
        /**
         * The parameters of this routine.
         *
         * Used by `CREATE FUNCTION` and `CREATE PROCEDURE`.
         *
         * @var ParameterDefinition[]
         */
        public $parameters;
        /**
         * The body of this function or procedure.
         * For views, it is the select statement that creates the view.
         * Used by `CREATE FUNCTION`, `CREATE PROCEDURE` and `CREATE VIEW`.
         *
         * @var Token[]|string
         */
        public $body = array();
        /**
         * @return string
         */
        public function build()
        {
        }
        /**
         * @param Parser     $parser the instance that requests parsing
         * @param TokensList $list   the list of tokens to be parsed
         */
        public function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list)
        {
        }
    }
    /**
     * `SELECT` statement.
     *
     * SELECT
     *     [ALL | DISTINCT | DISTINCTROW ]
     *       [HIGH_PRIORITY]
     *       [MAX_STATEMENT_TIME = N]
     *       [STRAIGHT_JOIN]
     *       [SQL_SMALL_RESULT] [SQL_BIG_RESULT] [SQL_BUFFER_RESULT]
     *       [SQL_CACHE | SQL_NO_CACHE] [SQL_CALC_FOUND_ROWS]
     *     select_expr [, select_expr ...]
     *     [FROM table_references
     *       [PARTITION partition_list]
     *     [WHERE where_condition]
     *     [GROUP BY {col_name | expr | position}
     *       [ASC | DESC), ... [WITH ROLLUP]]
     *     [HAVING where_condition]
     *     [ORDER BY {col_name | expr | position}
     *       [ASC | DESC), ...]
     *     [LIMIT {[offset,] row_count | row_count OFFSET offset}]
     *     [PROCEDURE procedure_name(argument_list)]
     *     [INTO OUTFILE 'file_name'
     *         [CHARACTER SET charset_name]
     *         export_options
     *       | INTO DUMPFILE 'file_name'
     *       | INTO var_name [, var_name]]
     *     [FOR UPDATE | LOCK IN SHARE MODE]]
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class SelectStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options for `SELECT` statements and their slot ID.
         *
         * @var array
         */
        public static $OPTIONS = array('ALL' => 1, 'DISTINCT' => 1, 'DISTINCTROW' => 1, 'HIGH_PRIORITY' => 2, 'MAX_STATEMENT_TIME' => array(3, 'var='), 'STRAIGHT_JOIN' => 4, 'SQL_SMALL_RESULT' => 5, 'SQL_BIG_RESULT' => 6, 'SQL_BUFFER_RESULT' => 7, 'SQL_CACHE' => 8, 'SQL_NO_CACHE' => 8, 'SQL_CALC_FOUND_ROWS' => 9);
        public static $END_OPTIONS = array('FOR UPDATE' => 1, 'LOCK IN SHARE MODE' => 1);
        /**
         * The clauses of this statement, in order.
         *
         * @see Statement::$CLAUSES
         *
         * @var array
         */
        public static $CLAUSES = array(
            'SELECT' => array('SELECT', 2),
            // Used for options.
            '_OPTIONS' => array('_OPTIONS', 1),
            // Used for selected expressions.
            '_SELECT' => array('SELECT', 1),
            'INTO' => array('INTO', 3),
            'FROM' => array('FROM', 3),
            'FORCE' => array('FORCE', 1),
            'USE' => array('USE', 1),
            'IGNORE' => array('IGNORE', 3),
            'PARTITION' => array('PARTITION', 3),
            'JOIN' => array('JOIN', 1),
            'FULL JOIN' => array('FULL JOIN', 1),
            'INNER JOIN' => array('INNER JOIN', 1),
            'LEFT JOIN' => array('LEFT JOIN', 1),
            'LEFT OUTER JOIN' => array('LEFT OUTER JOIN', 1),
            'RIGHT JOIN' => array('RIGHT JOIN', 1),
            'RIGHT OUTER JOIN' => array('RIGHT OUTER JOIN', 1),
            'NATURAL JOIN' => array('NATURAL JOIN', 1),
            'NATURAL LEFT JOIN' => array('NATURAL LEFT JOIN', 1),
            'NATURAL RIGHT JOIN' => array('NATURAL RIGHT JOIN', 1),
            'NATURAL LEFT OUTER JOIN' => array('NATURAL LEFT OUTER JOIN', 1),
            'NATURAL RIGHT OUTER JOIN' => array('NATURAL RIGHT JOIN', 1),
            'WHERE' => array('WHERE', 3),
            'GROUP BY' => array('GROUP BY', 3),
            'HAVING' => array('HAVING', 3),
            'ORDER BY' => array('ORDER BY', 3),
            'LIMIT' => array('LIMIT', 3),
            'PROCEDURE' => array('PROCEDURE', 3),
            'UNION' => array('UNION', 1),
            'EXCEPT' => array('EXCEPT', 1),
            'INTERSECT' => array('INTERSECT', 1),
            '_END_OPTIONS' => array('_END_OPTIONS', 1),
        );
        /**
         * Expressions that are being selected by this statement.
         *
         * @var Expression[]
         */
        public $expr = array();
        /**
         * Tables used as sources for this statement.
         *
         * @var Expression[]
         */
        public $from = array();
        /**
         * Index hints
         *
         * @var IndexHint[]
         */
        public $index_hints;
        /**
         * Partitions used as source for this statement.
         *
         * @var ArrayObj
         */
        public $partition;
        /**
         * Conditions used for filtering each row of the result set.
         *
         * @var Condition[]
         */
        public $where;
        /**
         * Conditions used for grouping the result set.
         *
         * @var GroupKeyword[]
         */
        public $group;
        /**
         * Conditions used for filtering the result set.
         *
         * @var Condition[]
         */
        public $having;
        /**
         * Specifies the order of the rows in the result set.
         *
         * @var OrderKeyword[]
         */
        public $order;
        /**
         * Conditions used for limiting the size of the result set.
         *
         * @var Limit
         */
        public $limit;
        /**
         * Procedure that should process the data in the result set.
         *
         * @var FunctionCall
         */
        public $procedure;
        /**
         * Destination of this result set.
         *
         * @var IntoKeyword
         */
        public $into;
        /**
         * Joins.
         *
         * @var JoinKeyword[]
         */
        public $join;
        /**
         * Unions.
         *
         * @var SelectStatement[]
         */
        public $union = array();
        /**
         * The end options of this query.
         *
         * @var OptionsArray
         *
         * @see static::$END_OPTIONS
         */
        public $end_options;
        /**
         * Gets the clauses of this statement.
         *
         * @return array
         */
        public function getClauses()
        {
        }
    }
    /**
     * `OPTIMIZE` statement.
     *
     * OPTIMIZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE
     *  tbl_name [, tbl_name] ...
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class OptimizeStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options of this statement.
         *
         * @var array
         */
        public static $OPTIONS = array('TABLE' => 1, 'NO_WRITE_TO_BINLOG' => 2, 'LOCAL' => 3);
        /**
         * Optimized tables.
         *
         * @var Expression[]
         */
        public $tables;
    }
    /**
     * `CALL` statement.
     *
     * CALL sp_name([parameter[,...]])
     *
     * or
     *
     * CALL sp_name[()]
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class CallStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * The name of the function and its parameters.
         *
         * @var FunctionCall
         */
        public $call;
        /**
         * Build statement for CALL.
         *
         * @return string
         */
        public function build()
        {
        }
    }
    /**
     * `DROP` statement.
     *
     * @category   Statements
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class DropStatement extends \PhpMyAdmin\SqlParser\Statement
    {
        /**
         * Options of this statement.
         *
         * @var array
         */
        public static $OPTIONS = array('DATABASE' => 1, 'EVENT' => 1, 'FUNCTION' => 1, 'INDEX' => 1, 'LOGFILE' => 1, 'PROCEDURE' => 1, 'SCHEMA' => 1, 'SERVER' => 1, 'TABLE' => 1, 'VIEW' => 1, 'TABLESPACE' => 1, 'TRIGGER' => 1, 'USER' => 1, 'TEMPORARY' => 2, 'IF EXISTS' => 3);
        /**
         * The clauses of this statement, in order.
         *
         * @see Statement::$CLAUSES
         *
         * @var array
         */
        public static $CLAUSES = array(
            'DROP' => array('DROP', 2),
            // Used for options.
            '_OPTIONS' => array('_OPTIONS', 1),
            // Used for select expressions.
            'DROP_' => array('DROP', 1),
            'ON' => array('ON', 3),
        );
        /**
         * Dropped elements.
         *
         * @var Expression[]
         */
        public $fields;
        /**
         * Table of the dropped index.
         *
         * @var Expression
         */
        public $table;
    }
}
namespace PhpMyAdmin\SqlParser {
    /**
     * Implements array-like access for UTF-8 strings.
     *
     * In this library, this class should be used to parse UTF-8 queries.
     *
     * @category Misc
     *
     * @license  https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class UtfString implements \ArrayAccess
    {
        /**
         * The raw, multi-byte string.
         *
         * @var string
         */
        public $str = '';
        /**
         * The index of current byte.
         *
         * For ASCII strings, the byte index is equal to the character index.
         *
         * @var int
         */
        public $byteIdx = 0;
        /**
         * The index of current character.
         *
         * For non-ASCII strings, some characters occupy more than one byte and
         * the character index will have a lower value than the byte index.
         *
         * @var int
         */
        public $charIdx = 0;
        /**
         * The length of the string (in bytes).
         *
         * @var int
         */
        public $byteLen = 0;
        /**
         * The length of the string (in characters).
         *
         * @var int
         */
        public $charLen = 0;
        /**
         * Constructor.
         *
         * @param string $str the string
         */
        public function __construct($str)
        {
        }
        /**
         * Checks if the given offset exists.
         *
         * @param int $offset the offset to be checked
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
        /**
         * Gets the character at given offset.
         *
         * @param int $offset the offset to be returned
         *
         * @return string|null
         */
        public function offsetGet($offset)
        {
        }
        /**
         * Sets the value of a character.
         *
         * @param int    $offset the offset to be set
         * @param string $value  the value to be set
         *
         * @throws \Exception not implemented
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * Unsets an index.
         *
         * @param int $offset the value to be unset
         *
         * @throws \Exception not implemented
         */
        public function offsetUnset($offset)
        {
        }
        /**
         * Gets the length of an UTF-8 character.
         *
         * According to RFC 3629, a UTF-8 character can have at most 4 bytes.
         * However, this implementation supports UTF-8 characters containing up to 6
         * bytes.
         *
         * @param string $byte the byte to be analyzed
         *
         * @see https://tools.ietf.org/html/rfc3629
         *
         * @return int
         */
        public static function getCharLength($byte)
        {
        }
        /**
         * Returns the length in characters of the string.
         *
         * @return int
         */
        public function length()
        {
        }
        /**
         * Returns the contained string.
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
    /**
     * Holds the configuration of the context that is currently used.
     *
     * @category Contexts
     *
     * @license  https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    abstract class Context
    {
        /**
         * The maximum length of a keyword.
         *
         * @see static::$TOKEN_KEYWORD
         *
         * @var int
         */
        const KEYWORD_MAX_LENGTH = 30;
        /**
         * The maximum length of a label.
         *
         * @see static::$TOKEN_LABEL
         * Ref: https://dev.mysql.com/doc/refman/5.7/en/statement-labels.html
         *
         * @var int
         */
        const LABEL_MAX_LENGTH = 16;
        /**
         * The maximum length of an operator.
         *
         * @see static::$TOKEN_OPERATOR
         *
         * @var int
         */
        const OPERATOR_MAX_LENGTH = 4;
        /**
         * The name of the default content.
         *
         * @var string
         */
        public static $defaultContext = '\\PhpMyAdmin\\SqlParser\\Contexts\\ContextMySql50700';
        /**
         * The name of the loaded context.
         *
         * @var string
         */
        public static $loadedContext = '\\PhpMyAdmin\\SqlParser\\Contexts\\ContextMySql50700';
        /**
         * The prefix concatenated to the context name when an incomplete class name
         * is specified.
         *
         * @var string
         */
        public static $contextPrefix = '\\PhpMyAdmin\\SqlParser\\Contexts\\Context';
        /**
         * List of keywords.
         *
         * Because, PHP's associative arrays are basically hash tables, it is more
         * efficient to store keywords as keys instead of values.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * Elements are sorted by flags, length and keyword.
         *
         * @var array
         */
        public static $KEYWORDS = array();
        /**
         * List of operators and their flags.
         *
         * @var array
         */
        public static $OPERATORS = array(
            // Some operators (*, =) may have ambiguous flags, because they depend on
            // the context they are being used in.
            // For example: 1. SELECT * FROM table; # SQL specific (wildcard)
            //                 SELECT 2 * 3;        # arithmetic
            //              2. SELECT * FROM table WHERE foo = 'bar';
            //                 SET @i = 0;
            // @see Token::FLAG_OPERATOR_ARITHMETIC
            '%' => 1,
            '*' => 1,
            '+' => 1,
            '-' => 1,
            '/' => 1,
            // @see Token::FLAG_OPERATOR_LOGICAL
            '!' => 2,
            '!=' => 2,
            '&&' => 2,
            '<' => 2,
            '<=' => 2,
            '<=>' => 2,
            '<>' => 2,
            '=' => 2,
            '>' => 2,
            '>=' => 2,
            '||' => 2,
            // @see Token::FLAG_OPERATOR_BITWISE
            '&' => 4,
            '<<' => 4,
            '>>' => 4,
            '^' => 4,
            '|' => 4,
            '~' => 4,
            // @see Token::FLAG_OPERATOR_ASSIGNMENT
            ':=' => 8,
            // @see Token::FLAG_OPERATOR_SQL
            '(' => 16,
            ')' => 16,
            '.' => 16,
            ',' => 16,
            ';' => 16,
        );
        /**
         * The mode of the MySQL server that will be used in lexing, parsing and
         * building the statements.
         *
         * @var int
         */
        public static $MODE = 0;
        /*
         * Server SQL Modes
         * https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html
         */
        // Compatibility mode for Microsoft's SQL server.
        // This is the equivalent of ANSI_QUOTES.
        const SQL_MODE_COMPAT_MYSQL = 2;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_allow_invalid_dates
        const SQL_MODE_ALLOW_INVALID_DATES = 1;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_ansi_quotes
        const SQL_MODE_ANSI_QUOTES = 2;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_error_for_division_by_zero
        const SQL_MODE_ERROR_FOR_DIVISION_BY_ZERO = 4;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_high_not_precedence
        const SQL_MODE_HIGH_NOT_PRECEDENCE = 8;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_ignore_space
        const SQL_MODE_IGNORE_SPACE = 16;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_auto_create_user
        const SQL_MODE_NO_AUTO_CREATE_USER = 32;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_auto_value_on_zero
        const SQL_MODE_NO_AUTO_VALUE_ON_ZERO = 64;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_backslash_escapes
        const SQL_MODE_NO_BACKSLASH_ESCAPES = 128;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_dir_in_create
        const SQL_MODE_NO_DIR_IN_CREATE = 256;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_dir_in_create
        const SQL_MODE_NO_ENGINE_SUBSTITUTION = 512;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_field_options
        const SQL_MODE_NO_FIELD_OPTIONS = 1024;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_key_options
        const SQL_MODE_NO_KEY_OPTIONS = 2048;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_table_options
        const SQL_MODE_NO_TABLE_OPTIONS = 4096;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_unsigned_subtraction
        const SQL_MODE_NO_UNSIGNED_SUBTRACTION = 8192;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_zero_date
        const SQL_MODE_NO_ZERO_DATE = 16384;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_no_zero_in_date
        const SQL_MODE_NO_ZERO_IN_DATE = 32768;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_only_full_group_by
        const SQL_MODE_ONLY_FULL_GROUP_BY = 65536;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_pipes_as_concat
        const SQL_MODE_PIPES_AS_CONCAT = 131072;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_real_as_float
        const SQL_MODE_REAL_AS_FLOAT = 262144;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_strict_all_tables
        const SQL_MODE_STRICT_ALL_TABLES = 524288;
        // https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sqlmode_strict_trans_tables
        const SQL_MODE_STRICT_TRANS_TABLES = 1048576;
        // Custom modes.
        // The table and column names and any other field that must be escaped will
        // not be.
        // Reserved keywords are being escaped regardless this mode is used or not.
        const SQL_MODE_NO_ENCLOSING_QUOTES = 1073741824;
        /*
         * Combination SQL Modes
         * https://dev.mysql.com/doc/refman/5.0/en/sql-mode.html#sql-mode-combo
         */
        // REAL_AS_FLOAT, PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE
        const SQL_MODE_ANSI = 393234;
        // PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS,
        // NO_TABLE_OPTIONS, NO_FIELD_OPTIONS,
        const SQL_MODE_DB2 = 138258;
        // PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS,
        // NO_TABLE_OPTIONS, NO_FIELD_OPTIONS, NO_AUTO_CREATE_USER
        const SQL_MODE_MAXDB = 138290;
        // PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS,
        // NO_TABLE_OPTIONS, NO_FIELD_OPTIONS
        const SQL_MODE_MSSQL = 138258;
        // PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS,
        // NO_TABLE_OPTIONS, NO_FIELD_OPTIONS, NO_AUTO_CREATE_USER
        const SQL_MODE_ORACLE = 138290;
        // PIPES_AS_CONCAT, ANSI_QUOTES, IGNORE_SPACE, NO_KEY_OPTIONS,
        // NO_TABLE_OPTIONS, NO_FIELD_OPTIONS
        const SQL_MODE_POSTGRESQL = 138258;
        // STRICT_TRANS_TABLES, STRICT_ALL_TABLES, NO_ZERO_IN_DATE, NO_ZERO_DATE,
        // ERROR_FOR_DIVISION_BY_ZERO, NO_AUTO_CREATE_USER
        const SQL_MODE_TRADITIONAL = 1622052;
        // -------------------------------------------------------------------------
        // Keyword.
        /**
         * Checks if the given string is a keyword.
         *
         * @param string $str        string to be checked
         * @param bool   $isReserved checks if the keyword is reserved
         *
         * @return int|null
         */
        public static function isKeyword($str, $isReserved = false)
        {
        }
        // -------------------------------------------------------------------------
        // Operator.
        /**
         * Checks if the given string is an operator.
         *
         * @param string $str string to be checked
         *
         * @return int|null the appropriate flag for the operator
         */
        public static function isOperator($str)
        {
        }
        // -------------------------------------------------------------------------
        // Whitespace.
        /**
         * Checks if the given character is a whitespace.
         *
         * @param string $str string to be checked
         *
         * @return bool
         */
        public static function isWhitespace($str)
        {
        }
        // -------------------------------------------------------------------------
        // Comment.
        /**
         * Checks if the given string is the beginning of a whitespace.
         *
         * @param string $str string to be checked
         * @param mixed  $end
         *
         * @return int|null the appropriate flag for the comment type
         */
        public static function isComment($str, $end = false)
        {
        }
        // -------------------------------------------------------------------------
        // Bool.
        /**
         * Checks if the given string is a boolean value.
         * This actually check only for `TRUE` and `FALSE` because `1` or `0` are
         * actually numbers and are parsed by specific methods.
         *
         * @param string $str string to be checked
         *
         * @return bool
         */
        public static function isBool($str)
        {
        }
        // -------------------------------------------------------------------------
        // Number.
        /**
         * Checks if the given character can be a part of a number.
         *
         * @param string $str string to be checked
         *
         * @return bool
         */
        public static function isNumber($str)
        {
        }
        // -------------------------------------------------------------------------
        // Symbol.
        /**
         * Checks if the given character is the beginning of a symbol. A symbol
         * can be either a variable or a field name.
         *
         * @param string $str string to be checked
         *
         * @return int|null the appropriate flag for the symbol type
         */
        public static function isSymbol($str)
        {
        }
        // -------------------------------------------------------------------------
        // String.
        /**
         * Checks if the given character is the beginning of a string.
         *
         * @param string $str string to be checked
         *
         * @return int|null the appropriate flag for the string type
         */
        public static function isString($str)
        {
        }
        // -------------------------------------------------------------------------
        // Delimiter.
        /**
         * Checks if the given character can be a separator for two lexeme.
         *
         * @param string $str string to be checked
         *
         * @return bool
         */
        public static function isSeparator($str)
        {
        }
        /**
         * Loads the specified context.
         *
         * Contexts may be used by accessing the context directly.
         *
         * @param string $context name of the context or full class name that
         *                        defines the context
         *
         * @throws LoaderException if the specified context doesn't exist
         */
        public static function load($context = '')
        {
        }
        /**
         * Loads the context with the closest version to the one specified.
         *
         * The closest context is found by replacing last digits with zero until one
         * is loaded successfully.
         *
         * @see Context::load()
         *
         * @param string $context name of the context or full class name that
         *                        defines the context
         *
         * @return string|null The loaded context. `null` if no context was loaded.
         */
        public static function loadClosest($context = '')
        {
        }
        /**
         * Sets the SQL mode.
         *
         * @param string $mode The list of modes. If empty, the mode is reset.
         */
        public static function setMode($mode = '')
        {
        }
        /**
         * Escapes the symbol by adding surrounding backticks.
         *
         * @param array|string $str   the string to be escaped
         * @param string       $quote quote to be used when escaping
         *
         * @return string|array
         */
        public static function escape($str, $quote = '`')
        {
        }
        /**
         * Returns char used to quote identifiers based on currently set SQL Mode (ie. standard or ANSI_QUOTES)
         * @return string either " (double quote, ansi_quotes mode) or ` (backtick, standard mode)
         */
        public static function getIdentifierQuote()
        {
        }
        /**
         * Function verifies that given SQL Mode constant is currently set
         *
         * @return boolean false on empty param, true/false on given constant/int value
         * @param int $flag for example Context::SQL_MODE_ANSI_QUOTES
         */
        public static function hasMode($flag = null)
        {
        }
    }
    class Core
    {
        /**
         * Whether errors should throw exceptions or just be stored.
         *
         * @var bool
         *
         * @see static::$errors
         */
        public $strict = false;
        /**
         * List of errors that occurred during lexing.
         *
         * Usually, the lexing does not stop once an error occurred because that
         * error might be false positive or a partial result (even a bad one)
         * might be needed.
         *
         * @var \Exception[]
         *
         * @see Core::error()
         */
        public $errors = array();
        /**
         * Creates a new error log.
         *
         * @param \Exception $error the error exception
         *
         * @throws \Exception throws the exception, if strict mode is enabled
         */
        public function error($error)
        {
        }
    }
    /**
     * Takes multiple tokens (contained in a Lexer instance) as input and builds a
     * parse tree.
     *
     * @category Parser
     *
     * @license  https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Parser extends \PhpMyAdmin\SqlParser\Core
    {
        /**
         * Array of classes that are used in parsing the SQL statements.
         *
         * @var array
         */
        public static $STATEMENT_PARSERS = array(
            // MySQL Utility Statements
            'DESCRIBE' => 'PhpMyAdmin\\SqlParser\\Statements\\ExplainStatement',
            'DESC' => 'PhpMyAdmin\\SqlParser\\Statements\\ExplainStatement',
            'EXPLAIN' => 'PhpMyAdmin\\SqlParser\\Statements\\ExplainStatement',
            'FLUSH' => '',
            'GRANT' => '',
            'HELP' => '',
            'SET PASSWORD' => '',
            'STATUS' => '',
            'USE' => '',
            // Table Maintenance Statements
            // https://dev.mysql.com/doc/refman/5.7/en/table-maintenance-sql.html
            'ANALYZE' => 'PhpMyAdmin\\SqlParser\\Statements\\AnalyzeStatement',
            'BACKUP' => 'PhpMyAdmin\\SqlParser\\Statements\\BackupStatement',
            'CHECK' => 'PhpMyAdmin\\SqlParser\\Statements\\CheckStatement',
            'CHECKSUM' => 'PhpMyAdmin\\SqlParser\\Statements\\ChecksumStatement',
            'OPTIMIZE' => 'PhpMyAdmin\\SqlParser\\Statements\\OptimizeStatement',
            'REPAIR' => 'PhpMyAdmin\\SqlParser\\Statements\\RepairStatement',
            'RESTORE' => 'PhpMyAdmin\\SqlParser\\Statements\\RestoreStatement',
            // Database Administration Statements
            // https://dev.mysql.com/doc/refman/5.7/en/sql-syntax-server-administration.html
            'SET' => 'PhpMyAdmin\\SqlParser\\Statements\\SetStatement',
            'SHOW' => 'PhpMyAdmin\\SqlParser\\Statements\\ShowStatement',
            // Data Definition Statements.
            // https://dev.mysql.com/doc/refman/5.7/en/sql-syntax-data-definition.html
            'ALTER' => 'PhpMyAdmin\\SqlParser\\Statements\\AlterStatement',
            'CREATE' => 'PhpMyAdmin\\SqlParser\\Statements\\CreateStatement',
            'DROP' => 'PhpMyAdmin\\SqlParser\\Statements\\DropStatement',
            'RENAME' => 'PhpMyAdmin\\SqlParser\\Statements\\RenameStatement',
            'TRUNCATE' => 'PhpMyAdmin\\SqlParser\\Statements\\TruncateStatement',
            // Data Manipulation Statements.
            // https://dev.mysql.com/doc/refman/5.7/en/sql-syntax-data-manipulation.html
            'CALL' => 'PhpMyAdmin\\SqlParser\\Statements\\CallStatement',
            'DELETE' => 'PhpMyAdmin\\SqlParser\\Statements\\DeleteStatement',
            'DO' => '',
            'HANDLER' => '',
            'INSERT' => 'PhpMyAdmin\\SqlParser\\Statements\\InsertStatement',
            'LOAD DATA' => 'PhpMyAdmin\\SqlParser\\Statements\\LoadStatement',
            'REPLACE' => 'PhpMyAdmin\\SqlParser\\Statements\\ReplaceStatement',
            'SELECT' => 'PhpMyAdmin\\SqlParser\\Statements\\SelectStatement',
            'UPDATE' => 'PhpMyAdmin\\SqlParser\\Statements\\UpdateStatement',
            // Prepared Statements.
            // https://dev.mysql.com/doc/refman/5.7/en/sql-syntax-prepared-statements.html
            'DEALLOCATE' => '',
            'EXECUTE' => '',
            'PREPARE' => '',
            // Transactional and Locking Statements
            // https://dev.mysql.com/doc/refman/5.7/en/commit.html
            'BEGIN' => 'PhpMyAdmin\\SqlParser\\Statements\\TransactionStatement',
            'COMMIT' => 'PhpMyAdmin\\SqlParser\\Statements\\TransactionStatement',
            'ROLLBACK' => 'PhpMyAdmin\\SqlParser\\Statements\\TransactionStatement',
            'START TRANSACTION' => 'PhpMyAdmin\\SqlParser\\Statements\\TransactionStatement',
            'PURGE' => 'PhpMyAdmin\\SqlParser\\Statements\\PurgeStatement',
            // Lock statements
            // https://dev.mysql.com/doc/refman/5.7/en/lock-tables.html
            'LOCK' => 'PhpMyAdmin\\SqlParser\\Statements\\LockStatement',
            'UNLOCK' => 'PhpMyAdmin\\SqlParser\\Statements\\LockStatement',
        );
        /**
         * Array of classes that are used in parsing SQL components.
         *
         * @var array
         */
        public static $KEYWORD_PARSERS = array(
            // This is not a proper keyword and was added here to help the
            // formatter.
            'PARTITION BY' => array(),
            'SUBPARTITION BY' => array(),
            // This is not a proper keyword and was added here to help the
            // builder.
            '_OPTIONS' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\OptionsArray', 'field' => 'options'),
            '_END_OPTIONS' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\OptionsArray', 'field' => 'end_options'),
            'INTERSECT' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\UnionKeyword', 'field' => 'union'),
            'EXCEPT' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\UnionKeyword', 'field' => 'union'),
            'UNION' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\UnionKeyword', 'field' => 'union'),
            'UNION ALL' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\UnionKeyword', 'field' => 'union'),
            'UNION DISTINCT' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\UnionKeyword', 'field' => 'union'),
            // Actual clause parsers.
            'ALTER' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\Expression', 'field' => 'table', 'options' => array('parseField' => 'table')),
            'ANALYZE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'tables', 'options' => array('parseField' => 'table')),
            'BACKUP' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'tables', 'options' => array('parseField' => 'table')),
            'CALL' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\FunctionCall', 'field' => 'call'),
            'CHECK' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'tables', 'options' => array('parseField' => 'table')),
            'CHECKSUM' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'tables', 'options' => array('parseField' => 'table')),
            'CROSS JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'DROP' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'fields', 'options' => array('parseField' => 'table')),
            'FORCE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\IndexHint', 'field' => 'index_hints'),
            'FROM' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'from', 'options' => array('field' => 'table')),
            'GROUP BY' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\GroupKeyword', 'field' => 'group'),
            'HAVING' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\Condition', 'field' => 'having'),
            'IGNORE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\IndexHint', 'field' => 'index_hints'),
            'INTO' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\IntoKeyword', 'field' => 'into'),
            'JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'LEFT JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'LEFT OUTER JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'ON' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\Expression', 'field' => 'table', 'options' => array('parseField' => 'table')),
            'RIGHT JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'RIGHT OUTER JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'INNER JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'FULL JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'FULL OUTER JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'NATURAL JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'NATURAL LEFT JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'NATURAL RIGHT JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'NATURAL LEFT OUTER JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'NATURAL RIGHT OUTER JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'STRAIGHT_JOIN' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\JoinKeyword', 'field' => 'join'),
            'LIMIT' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\Limit', 'field' => 'limit'),
            'OPTIMIZE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'tables', 'options' => array('parseField' => 'table')),
            'ORDER BY' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\OrderKeyword', 'field' => 'order'),
            'PARTITION' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ArrayObj', 'field' => 'partition'),
            'PROCEDURE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\FunctionCall', 'field' => 'procedure'),
            'RENAME' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\RenameOperation', 'field' => 'renames'),
            'REPAIR' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'tables', 'options' => array('parseField' => 'table')),
            'RESTORE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'tables', 'options' => array('parseField' => 'table')),
            'SET' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\SetOperation', 'field' => 'set'),
            'SELECT' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'expr'),
            'TRUNCATE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\Expression', 'field' => 'table', 'options' => array('parseField' => 'table')),
            'UPDATE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\ExpressionArray', 'field' => 'tables', 'options' => array('parseField' => 'table')),
            'USE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\IndexHint', 'field' => 'index_hints'),
            'VALUE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\Array2d', 'field' => 'values'),
            'VALUES' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\Array2d', 'field' => 'values'),
            'WHERE' => array('class' => 'PhpMyAdmin\\SqlParser\\Components\\Condition', 'field' => 'where'),
        );
        /**
         * The list of tokens that are parsed.
         *
         * @var TokensList
         */
        public $list;
        /**
         * List of statements parsed.
         *
         * @var Statement[]
         */
        public $statements = array();
        /**
         * The number of opened brackets.
         *
         * @var int
         */
        public $brackets = 0;
        /**
         * Constructor.
         *
         * @param string|UtfString|TokensList $list   the list of tokens to be parsed
         * @param bool                        $strict whether strict mode should be enabled or not
         */
        public function __construct($list = null, $strict = false)
        {
        }
        /**
         * Builds the parse trees.
         * @throws ParserException
         */
        public function parse()
        {
        }
        /**
         * Creates a new error log.
         *
         * @param string $msg   the error message
         * @param Token  $token the token that produced the error
         * @param int    $code  the code of the error
         *
         * @throws ParserException throws the exception, if strict mode is enabled
         */
        public function error($msg, \PhpMyAdmin\SqlParser\Token $token = null, $code = 0)
        {
        }
    }
    /**
     * A component (of a statement) is a part of a statement that is common to
     * multiple query types.
     *
     * @category Components
     *
     * @license  https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    abstract class Component
    {
        /**
         * Parses the tokens contained in the given list in the context of the given
         * parser.
         *
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @throws \Exception not implemented yet
         *
         * @return mixed
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * Builds the string representation of a component of this type.
         *
         * In other words, this function represents the inverse function of
         * `static::parse`.
         *
         * @param mixed $component the component to be built
         * @param array $options   parameters for building
         *
         * @throws \Exception not implemented yet
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
        /**
         * Builds the string representation of a component of this type.
         *
         * @see static::build
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
    class Translator
    {
        /**
         * Loads translator.
         */
        public static function load()
        {
        }
        /**
         * Translates a string.
         *
         * @param string $msgid String to be translated
         *
         * @return string translated string (or original, if not found)
         */
        public static function gettext($msgid)
        {
        }
    }
    /**
     * A structure representing a lexeme that explicitly indicates its
     * categorization for the purpose of parsing.
     *
     * @category Tokens
     *
     * @license  https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Token
    {
        // Types of tokens (a vague description of a token's purpose).
        /**
         * This type is used when the token is invalid or its type cannot be
         * determined because of the ambiguous context. Further analysis might be
         * required to detect its type.
         *
         * @var int
         */
        const TYPE_NONE = 0;
        /**
         * SQL specific keywords: SELECT, UPDATE, INSERT, etc.
         *
         * @var int
         */
        const TYPE_KEYWORD = 1;
        /**
         * Any type of legal operator.
         *
         * Arithmetic operators: +, -, *, /, etc.
         * Logical operators: ===, <>, !==, etc.
         * Bitwise operators: &, |, ^, etc.
         * Assignment operators: =, +=, -=, etc.
         * SQL specific operators: . (e.g. .. WHERE database.table ..),
         *                         * (e.g. SELECT * FROM ..)
         *
         * @var int
         */
        const TYPE_OPERATOR = 2;
        /**
         * Spaces, tabs, new lines, etc.
         *
         * @var int
         */
        const TYPE_WHITESPACE = 3;
        /**
         * Any type of legal comment.
         *
         * Bash (#), C (/* *\/) or SQL (--) comments:
         *
         *      -- SQL-comment
         *
         *      #Bash-like comment
         *
         *      /*C-like comment*\/
         *
         * or:
         *
         *      /*C-like
         *        comment*\/
         *
         * Backslashes were added to respect PHP's comments syntax.
         *
         * @var int
         */
        const TYPE_COMMENT = 4;
        /**
         * Boolean values: true or false.
         *
         * @var int
         */
        const TYPE_BOOL = 5;
        /**
         * Numbers: 4, 0x8, 15.16, 23e42, etc.
         *
         * @var int
         */
        const TYPE_NUMBER = 6;
        /**
         * Literal strings: 'string', "test".
         * Some of these strings are actually symbols.
         *
         * @var int
         */
        const TYPE_STRING = 7;
        /**
         * Database, table names, variables, etc.
         * For example: ```SELECT `foo`, `bar` FROM `database`.`table`;```.
         *
         * @var int
         */
        const TYPE_SYMBOL = 8;
        /**
         * Delimits an unknown string.
         * For example: ```SELECT * FROM test;```, `test` is a delimiter.
         *
         * @var int
         */
        const TYPE_DELIMITER = 9;
        /**
         * Labels in LOOP statement, ITERATE statement etc.
         * For example (only for begin label):
         *  begin_label: BEGIN [statement_list] END [end_label]
         *  begin_label: LOOP [statement_list] END LOOP [end_label]
         *  begin_label: REPEAT [statement_list] ... END REPEAT [end_label]
         *  begin_label: WHILE ... DO [statement_list] END WHILE [end_label].
         *
         * @var int
         */
        const TYPE_LABEL = 10;
        // Flags that describe the tokens in more detail.
        // All keywords must have flag 1 so `Context::isKeyword` method doesn't
        // require strict comparison.
        const FLAG_KEYWORD_RESERVED = 2;
        const FLAG_KEYWORD_COMPOSED = 4;
        const FLAG_KEYWORD_DATA_TYPE = 8;
        const FLAG_KEYWORD_KEY = 16;
        const FLAG_KEYWORD_FUNCTION = 32;
        // Numbers related flags.
        const FLAG_NUMBER_HEX = 1;
        const FLAG_NUMBER_FLOAT = 2;
        const FLAG_NUMBER_APPROXIMATE = 4;
        const FLAG_NUMBER_NEGATIVE = 8;
        const FLAG_NUMBER_BINARY = 16;
        // Strings related flags.
        const FLAG_STRING_SINGLE_QUOTES = 1;
        const FLAG_STRING_DOUBLE_QUOTES = 2;
        // Comments related flags.
        const FLAG_COMMENT_BASH = 1;
        const FLAG_COMMENT_C = 2;
        const FLAG_COMMENT_SQL = 4;
        const FLAG_COMMENT_MYSQL_CMD = 8;
        // Operators related flags.
        const FLAG_OPERATOR_ARITHMETIC = 1;
        const FLAG_OPERATOR_LOGICAL = 2;
        const FLAG_OPERATOR_BITWISE = 4;
        const FLAG_OPERATOR_ASSIGNMENT = 8;
        const FLAG_OPERATOR_SQL = 16;
        // Symbols related flags.
        const FLAG_SYMBOL_VARIABLE = 1;
        const FLAG_SYMBOL_BACKTICK = 2;
        const FLAG_SYMBOL_USER = 4;
        const FLAG_SYMBOL_SYSTEM = 8;
        const FLAG_SYMBOL_PARAMETER = 16;
        /**
         * The token it its raw string representation.
         *
         * @var string
         */
        public $token;
        /**
         * The value this token contains (i.e. token after some evaluation).
         *
         * @var mixed
         */
        public $value;
        /**
         * The keyword value this token contains, always uppercase.
         *
         * @var mixed
         */
        public $keyword;
        /**
         * The type of this token.
         *
         * @var int
         */
        public $type;
        /**
         * The flags of this token.
         *
         * @var int
         */
        public $flags;
        /**
         * The position in the initial string where this token started.
         *
         * The position is counted in chars, not bytes, so you should
         * use mb_* functions to properly handle utf-8 multibyte chars.
         *
         * @var int
         */
        public $position;
        /**
         * Constructor.
         *
         * @param string $token the value of the token
         * @param int    $type  the type of the token
         * @param int    $flags the flags of the token
         */
        public function __construct($token, $type = 0, $flags = 0)
        {
        }
        /**
         * Does little processing to the token to extract a value.
         *
         * If no processing can be done it will return the initial string.
         *
         * @return mixed
         */
        public function extract()
        {
        }
        /**
         * Converts the token into an inline token by replacing tabs and new lines.
         *
         * @return string
         */
        public function getInlineToken()
        {
        }
    }
}
namespace PhpMyAdmin\SqlParser\Utils {
    /**
     * Token utilities.
     *
     * @category   Token
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Tokens
    {
        /**
         * Checks if a pattern is a match for the specified token.
         *
         * @param Token $token   the token to be matched
         * @param array $pattern the pattern to be matches
         *
         * @return bool
         */
        public static function match(\PhpMyAdmin\SqlParser\Token $token, array $pattern)
        {
        }
        public static function replaceTokens($list, array $find, array $replace)
        {
        }
    }
    /**
     * Miscellaneous utilities.
     *
     * @category   Misc
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Misc
    {
        /**
         * Gets a list of all aliases and their original names.
         *
         * @param SelectStatement $statement the statement to be processed
         * @param string          $database  the name of the database
         *
         * @return array
         */
        public static function getAliases($statement, $database)
        {
        }
    }
    /**
     * Buffer query utilities.
     *
     * Implements a specialized lexer used to extract statements from large inputs
     * that are being buffered. After each statement has been extracted, a lexer or
     * a parser may be used.
     *
     * @category   Lexer
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class BufferedQuery
    {
        // Constants that describe the current status of the parser.
        // A string is being parsed.
        const STATUS_STRING = 16;
        // 0001 0000
        const STATUS_STRING_SINGLE_QUOTES = 17;
        // 0001 0001
        const STATUS_STRING_DOUBLE_QUOTES = 18;
        // 0001 0010
        const STATUS_STRING_BACKTICK = 20;
        // 0001 0100
        // A comment is being parsed.
        const STATUS_COMMENT = 32;
        // 0010 0000
        const STATUS_COMMENT_BASH = 33;
        // 0010 0001
        const STATUS_COMMENT_C = 34;
        // 0010 0010
        const STATUS_COMMENT_SQL = 36;
        // 0010 0100
        /**
         * The query that is being processed.
         *
         * This field can be modified just by appending to it!
         *
         * @var string
         */
        public $query = '';
        /**
         * The options of this parser.
         *
         * @var array
         */
        public $options = array();
        /**
         * The last delimiter used.
         *
         * @var string
         */
        public $delimiter;
        /**
         * The length of the delimiter.
         *
         * @var int
         */
        public $delimiterLen;
        /**
         * The current status of the parser.
         *
         * @var int
         */
        public $status;
        /**
         * The last incomplete query that was extracted.
         *
         * @var string
         */
        public $current = '';
        /**
         * Constructor.
         *
         * @param string $query   the query to be parsed
         * @param array  $options the options of this parser
         */
        public function __construct($query = '', array $options = array())
        {
        }
        /**
         * Sets the delimiter.
         *
         * Used to update the length of it too.
         *
         * @param string $delimiter
         */
        public function setDelimiter($delimiter)
        {
        }
        /**
         * Extracts a statement from the buffer.
         *
         * @param bool $end whether the end of the buffer was reached
         *
         * @return string|false
         */
        public function extract($end = false)
        {
        }
    }
    /**
     * Table utilities.
     *
     * @category   Statement
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Table
    {
        /**
         * Gets the foreign keys of the table.
         *
         * @param CreateStatement $statement the statement to be processed
         *
         * @return array
         */
        public static function getForeignKeys($statement)
        {
        }
        /**
         * Gets fields of the table.
         *
         * @param CreateStatement $statement the statement to be processed
         *
         * @return array
         */
        public static function getFields($statement)
        {
        }
    }
    /**
     * Utilities that are used for formatting queries.
     *
     * @category   Misc
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Formatter
    {
        /**
         * The formatting options.
         *
         * @var array
         */
        public $options;
        /**
         * Clauses that are usually short.
         *
         * These clauses share the line with the next clause.
         *
         * E.g. if INSERT was not here, the formatter would produce:
         *
         *      INSERT
         *      INTO foo
         *      VALUES(0, 0, 0),(1, 1, 1);
         *
         * Instead of:
         *
         *      INSERT INTO foo
         *      VALUES(0, 0, 0),(1, 1, 1)
         *
         * @var array
         */
        public static $SHORT_CLAUSES = array('CREATE' => true, 'INSERT' => true);
        /**
         * Clauses that must be inlined.
         *
         * These clauses usually are short and it's nicer to have them inline.
         *
         * @var array
         */
        public static $INLINE_CLAUSES = array('CREATE' => true, 'INTO' => true, 'LIMIT' => true, 'PARTITION BY' => true, 'PARTITION' => true, 'PROCEDURE' => true, 'SUBPARTITION BY' => true, 'VALUES' => true);
        /**
         * Constructor.
         *
         * @param array $options the formatting options
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * The default formatting options.
         *
         * @return array
         */
        protected function getDefaultOptions()
        {
        }
        /**
         * The styles used for HTML formatting.
         * array($type, $flags, $span, $callback).
         *
         * @return array
         */
        protected function getDefaultFormats()
        {
        }
        /**
         * Formats the given list of tokens.
         *
         * @param TokensList $list the list of tokens
         *
         * @return string
         */
        public function formatList($list)
        {
        }
        public function escapeConsole($string)
        {
        }
        /**
         * Tries to print the query and returns the result.
         *
         * @param Token $token the token to be printed
         *
         * @return string
         */
        public function toString($token)
        {
        }
        /**
         * Formats a query.
         *
         * @param string $query   The query to be formatted
         * @param array  $options the formatting options
         *
         * @return string the formatted string
         */
        public static function format($query, array $options = array())
        {
        }
        /**
         * Computes the length of a group.
         *
         * A group is delimited by a pair of brackets.
         *
         * @param TokensList $list the list of tokens
         *
         * @return int
         */
        public static function getGroupLength($list)
        {
        }
        /**
         * Checks if a token is a statement or a clause inside a statement.
         *
         * @param Token $token the token to be checked
         *
         * @return int|bool
         */
        public static function isClause($token)
        {
        }
    }
    /**
     * Statement utilities.
     *
     * @category   Statement
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Query
    {
        /**
         * Functions that set the flag `is_func`.
         *
         * @var array
         */
        public static $FUNCTIONS = array('SUM', 'AVG', 'STD', 'STDDEV', 'MIN', 'MAX', 'BIT_OR', 'BIT_AND');
        public static $ALLFLAGS = array(
            /*
             * select ... DISTINCT ...
             */
            'distinct' => false,
            /*
             * drop ... DATABASE ...
             */
            'drop_database' => false,
            /*
             * ... GROUP BY ...
             */
            'group' => false,
            /*
             * ... HAVING ...
             */
            'having' => false,
            /*
             * INSERT ...
             * or
             * REPLACE ...
             * or
             * DELETE ...
             */
            'is_affected' => false,
            /*
             * select ... PROCEDURE ANALYSE( ... ) ...
             */
            'is_analyse' => false,
            /*
             * select COUNT( ... ) ...
             */
            'is_count' => false,
            /*
             * DELETE ...
             */
            'is_delete' => false,
            // @deprecated; use `querytype`
            /*
             * EXPLAIN ...
             */
            'is_explain' => false,
            // @deprecated; use `querytype`
            /*
             * select ... INTO OUTFILE ...
             */
            'is_export' => false,
            /*
             * select FUNC( ... ) ...
             */
            'is_func' => false,
            /*
             * select ... GROUP BY ...
             * or
             * select ... HAVING ...
             */
            'is_group' => false,
            /*
             * INSERT ...
             * or
             * REPLACE ...
             * or
             * LOAD DATA ...
             */
            'is_insert' => false,
            /*
             * ANALYZE ...
             * or
             * CHECK ...
             * or
             * CHECKSUM ...
             * or
             * OPTIMIZE ...
             * or
             * REPAIR ...
             */
            'is_maint' => false,
            /*
             * CALL ...
             */
            'is_procedure' => false,
            /*
             * REPLACE ...
             */
            'is_replace' => false,
            // @deprecated; use `querytype`
            /*
             * SELECT ...
             */
            'is_select' => false,
            // @deprecated; use `querytype`
            /*
             * SHOW ...
             */
            'is_show' => false,
            // @deprecated; use `querytype`
            /*
             * Contains a subquery.
             */
            'is_subquery' => false,
            /*
             * ... JOIN ...
             */
            'join' => false,
            /*
             * ... LIMIT ...
             */
            'limit' => false,
            /*
             * TODO
             */
            'offset' => false,
            /*
             * ... ORDER ...
             */
            'order' => false,
            /*
             * The type of the query (which is usually the first keyword of
             * the statement).
             */
            'querytype' => false,
            /*
             * Whether a page reload is required.
             */
            'reload' => false,
            /*
             * SELECT ... FROM ...
             */
            'select_from' => false,
            /*
             * ... UNION ...
             */
            'union' => false,
        );
        /**
         * Gets an array with flags this statement has.
         *
         * @param Statement|null $statement the statement to be processed
         * @param bool           $all       if `false`, false values will not be included
         *
         * @return array
         */
        public static function getFlags($statement, $all = false)
        {
        }
        /**
         * Parses a query and gets all information about it.
         *
         * @param string $query the query to be parsed
         *
         * @return array The array returned is the one returned by
         *               `static::getFlags()`, with the following keys added:
         *               - parser - the parser used to analyze the query;
         *               - statement - the first statement resulted from parsing;
         *               - select_tables - the real name of the tables selected;
         *               if there are no table names in the `SELECT`
         *               expressions, the table names are fetched from the
         *               `FROM` expressions
         *               - select_expr - selected expressions
         */
        public static function getAll($query)
        {
        }
        /**
         * Gets a list of all tables used in this statement.
         *
         * @param Statement $statement statement to be scanned
         *
         * @return array
         */
        public static function getTables($statement)
        {
        }
        /**
         * Gets a specific clause.
         *
         * @param Statement  $statement the parsed query that has to be modified
         * @param TokensList $list      the list of tokens
         * @param string     $clause    the clause to be returned
         * @param int|string $type      The type of the search.
         *                              If int,
         *                              -1 for everything that was before
         *                              0 only for the clause
         *                              1 for everything after
         *                              If string, the name of the first clause that
         *                              should not be included.
         * @param bool       $skipFirst whether to skip the first keyword in clause
         *
         * @return string
         */
        public static function getClause($statement, $list, $clause, $type = 0, $skipFirst = true)
        {
        }
        /**
         * Builds a query by rebuilding the statement from the tokens list supplied
         * and replaces a clause.
         *
         * It is a very basic version of a query builder.
         *
         * @param Statement  $statement the parsed query that has to be modified
         * @param TokensList $list      the list of tokens
         * @param string     $old       The type of the clause that should be
         *                              replaced. This can be an entire clause.
         * @param string     $new       The new clause. If this parameter is omitted
         *                              it is considered to be equal with `$old`.
         * @param bool       $onlyType  whether only the type of the clause should
         *                              be replaced or the entire clause
         *
         * @return string
         */
        public static function replaceClause($statement, $list, $old, $new = null, $onlyType = false)
        {
        }
        /**
         * Builds a query by rebuilding the statement from the tokens list supplied
         * and replaces multiple clauses.
         *
         * @param Statement  $statement the parsed query that has to be modified
         * @param TokensList $list      the list of tokens
         * @param array      $ops       Clauses to be replaced. Contains multiple
         *                              arrays having two values: array($old, $new).
         *                              Clauses must be sorted.
         *
         * @return string
         */
        public static function replaceClauses($statement, $list, array $ops)
        {
        }
        /**
         * Gets the first full statement in the query.
         *
         * @param string $query     the query to be analyzed
         * @param string $delimiter the delimiter to be used
         *
         * @return array array containing the first full query, the
         *               remaining part of the query and the last
         *               delimiter
         */
        public static function getFirstStatement($query, $delimiter = null)
        {
        }
        /**
         * Gets a starting offset of a specific clause.
         *
         * @param Statement  $statement the parsed query that has to be modified
         * @param TokensList $list      the list of tokens
         * @param string     $clause    the clause to be returned
         *
         * @return int
         */
        public static function getClauseStartOffset($statement, $list, $clause)
        {
        }
    }
    /**
     * CLI interface.
     *
     * @category   Exceptions
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class CLI
    {
        public function mergeLongOpts(&$params, &$longopts)
        {
        }
        public function usageHighlight()
        {
        }
        public function getopt($opt, $long)
        {
        }
        public function parseHighlight()
        {
        }
        public function runHighlight()
        {
        }
        public function usageLint()
        {
        }
        public function parseLint()
        {
        }
        public function runLint()
        {
        }
        public function usageTokenize()
        {
        }
        public function parseTokenize()
        {
        }
        public function runTokenize()
        {
        }
        public function readStdin()
        {
        }
    }
    /**
     * Error related utilities.
     *
     * @category   Exceptions
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Error
    {
        /**
         * Gets the errors of a lexer and a parser.
         *
         * @param array $objs objects from where the errors will be extracted
         *
         * @return array Each element of the array represents an error.
         *               `$err[0]` holds the error message.
         *               `$err[1]` holds the error code.
         *               `$err[2]` holds the string that caused the issue.
         *               `$err[3]` holds the position of the string.
         *               (i.e. `array($msg, $code, $str, $pos)`)
         */
        public static function get($objs)
        {
        }
        /**
         * Formats the specified errors.
         *
         * @param array  $errors the errors to be formatted
         * @param string $format The format of an error.
         *                       '$1$d' is replaced by the position of this error.
         *                       '$2$s' is replaced by the error message.
         *                       '$3$d' is replaced by the error code.
         *                       '$4$s' is replaced by the string that caused the
         *                       issue.
         *                       '$5$d' is replaced by the position of the string.
         *
         * @return array
         */
        public static function format($errors, $format = '#%1$d: %2$s (near "%4$s" at position %5$d)')
        {
        }
    }
    /**
     * Routine utilities.
     *
     * @category   Routines
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Routine
    {
        /**
         * Parses a parameter of a routine.
         *
         * @param string $param parameter's definition
         *
         * @return array
         */
        public static function getReturnType($param)
        {
        }
        /**
         * Parses a parameter of a routine.
         *
         * @param string $param parameter's definition
         *
         * @return array
         */
        public static function getParameter($param)
        {
        }
        /**
         * Gets the parameters of a routine from the parse tree.
         *
         * @param CreateStatement $statement the statement to be processed
         *
         * @return array
         */
        public static function getParameters($statement)
        {
        }
    }
}
namespace PhpMyAdmin\SqlParser\Contexts {
    /**
     * Context for MySQL 5.5.
     *
     * @category   Contexts
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ContextMySql50500 extends \PhpMyAdmin\SqlParser\Context
    {
        /**
         * List of keywords.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * @var array
         */
        public static $KEYWORDS = array('AT' => 1, 'DO' => 1, 'IO' => 1, 'NO' => 1, 'XA' => 1, 'ANY' => 1, 'CPU' => 1, 'END' => 1, 'IPC' => 1, 'NDB' => 1, 'NEW' => 1, 'ONE' => 1, 'ROW' => 1, 'BOOL' => 1, 'BYTE' => 1, 'CODE' => 1, 'CUBE' => 1, 'DATA' => 1, 'DISK' => 1, 'ENDS' => 1, 'FAST' => 1, 'FILE' => 1, 'FULL' => 1, 'HASH' => 1, 'HELP' => 1, 'HOST' => 1, 'LAST' => 1, 'LESS' => 1, 'LIST' => 1, 'LOGS' => 1, 'MODE' => 1, 'NAME' => 1, 'NEXT' => 1, 'NONE' => 1, 'OPEN' => 1, 'PAGE' => 1, 'PORT' => 1, 'PREV' => 1, 'ROWS' => 1, 'SLOW' => 1, 'SOME' => 1, 'STOP' => 1, 'THAN' => 1, 'TYPE' => 1, 'VIEW' => 1, 'WAIT' => 1, 'WORK' => 1, 'X509' => 1, 'AFTER' => 1, 'BEGIN' => 1, 'BLOCK' => 1, 'BTREE' => 1, 'CACHE' => 1, 'CHAIN' => 1, 'CLOSE' => 1, 'ERROR' => 1, 'EVENT' => 1, 'EVERY' => 1, 'FIRST' => 1, 'FIXED' => 1, 'FLUSH' => 1, 'FOUND' => 1, 'HOSTS' => 1, 'LEVEL' => 1, 'LOCAL' => 1, 'LOCKS' => 1, 'MERGE' => 1, 'MUTEX' => 1, 'NAMES' => 1, 'NCHAR' => 1, 'OWNER' => 1, 'PHASE' => 1, 'PROXY' => 1, 'QUERY' => 1, 'QUICK' => 1, 'RELAY' => 1, 'RESET' => 1, 'RTREE' => 1, 'SHARE' => 1, 'SLAVE' => 1, 'START' => 1, 'SUPER' => 1, 'SWAPS' => 1, 'TYPES' => 1, 'UNTIL' => 1, 'VALUE' => 1, 'ACTION' => 1, 'BACKUP' => 1, 'BINLOG' => 1, 'CIPHER' => 1, 'CLIENT' => 1, 'COMMIT' => 1, 'ENABLE' => 1, 'ENGINE' => 1, 'ERRORS' => 1, 'ESCAPE' => 1, 'EVENTS' => 1, 'FAULTS' => 1, 'FIELDS' => 1, 'GLOBAL' => 1, 'GRANTS' => 1, 'IMPORT' => 1, 'INNODB' => 1, 'ISSUER' => 1, 'LEAVES' => 1, 'MASTER' => 1, 'MEDIUM' => 1, 'MEMORY' => 1, 'MODIFY' => 1, 'OFFSET' => 1, 'PARSER' => 1, 'PLUGIN' => 1, 'RELOAD' => 1, 'REMOVE' => 1, 'REPAIR' => 1, 'RESUME' => 1, 'ROLLUP' => 1, 'SERVER' => 1, 'SIGNED' => 1, 'SIMPLE' => 1, 'SOCKET' => 1, 'SONAME' => 1, 'SOUNDS' => 1, 'SOURCE' => 1, 'STARTS' => 1, 'STATUS' => 1, 'STRING' => 1, 'TABLES' => 1, 'AUTHORS' => 1, 'CHANGED' => 1, 'COLUMNS' => 1, 'COMMENT' => 1, 'COMPACT' => 1, 'CONTEXT' => 1, 'DEFINER' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DYNAMIC' => 1, 'ENGINES' => 1, 'EXECUTE' => 1, 'GENERAL' => 1, 'HANDLER' => 1, 'INDEXES' => 1, 'INSTALL' => 1, 'INVOKER' => 1, 'LOGFILE' => 1, 'MIGRATE' => 1, 'NO_WAIT' => 1, 'OPTIONS' => 1, 'PARTIAL' => 1, 'PLUGINS' => 1, 'PREPARE' => 1, 'PROFILE' => 1, 'REBUILD' => 1, 'RECOVER' => 1, 'RESTORE' => 1, 'RETURNS' => 1, 'ROUTINE' => 1, 'SESSION' => 1, 'STORAGE' => 1, 'SUBJECT' => 1, 'SUSPEND' => 1, 'UNICODE' => 1, 'UNKNOWN' => 1, 'UPGRADE' => 1, 'USE_FRM' => 1, 'VIRTUAL' => 1, 'WRAPPER' => 1, 'CASCADED' => 1, 'CHECKSUM' => 1, 'DATAFILE' => 1, 'DUMPFILE' => 1, 'EXTENDED' => 1, 'FUNCTION' => 1, 'INNOBASE' => 1, 'LANGUAGE' => 1, 'MAX_ROWS' => 1, 'MAX_SIZE' => 1, 'MIN_ROWS' => 1, 'NATIONAL' => 1, 'NVARCHAR' => 1, 'ONE_SHOT' => 1, 'PRESERVE' => 1, 'PROFILES' => 1, 'REDOFILE' => 1, 'RELAYLOG' => 1, 'ROLLBACK' => 1, 'SCHEDULE' => 1, 'SECURITY' => 1, 'SHUTDOWN' => 1, 'SNAPSHOT' => 1, 'SWITCHES' => 1, 'TRIGGERS' => 1, 'UNDOFILE' => 1, 'WARNINGS' => 1, 'AGGREGATE' => 1, 'ALGORITHM' => 1, 'COMMITTED' => 1, 'DIRECTORY' => 1, 'DUPLICATE' => 1, 'EXPANSION' => 1, 'IO_THREAD' => 1, 'ISOLATION' => 1, 'NODEGROUP' => 1, 'PACK_KEYS' => 1, 'PARTITION' => 1, 'READ_ONLY' => 1, 'REDUNDANT' => 1, 'SAVEPOINT' => 1, 'SQL_CACHE' => 1, 'TEMPORARY' => 1, 'TEMPTABLE' => 1, 'UNDEFINED' => 1, 'UNINSTALL' => 1, 'VARIABLES' => 1, 'COMPLETION' => 1, 'COMPRESSED' => 1, 'CONCURRENT' => 1, 'CONNECTION' => 1, 'CONSISTENT' => 1, 'DEALLOCATE' => 1, 'IDENTIFIED' => 1, 'MASTER_SSL' => 1, 'NDBCLUSTER' => 1, 'PARTITIONS' => 1, 'PERSISTENT' => 1, 'PRIVILEGES' => 1, 'REORGANIZE' => 1, 'REPEATABLE' => 1, 'ROW_FORMAT' => 1, 'SQL_THREAD' => 1, 'TABLESPACE' => 1, 'TABLE_NAME' => 1, 'COLUMN_NAME' => 1, 'CURSOR_NAME' => 1, 'EXTENT_SIZE' => 1, 'FRAC_SECOND' => 1, 'MASTER_HOST' => 1, 'MASTER_PORT' => 1, 'MASTER_USER' => 1, 'MYSQL_ERRNO' => 1, 'PROCESSLIST' => 1, 'REPLICATION' => 1, 'SCHEMA_NAME' => 1, 'SQL_TSI_DAY' => 1, 'TRANSACTION' => 1, 'UNCOMMITTED' => 1, 'CATALOG_NAME' => 1, 'CLASS_ORIGIN' => 1, 'CONTRIBUTORS' => 1, 'DES_KEY_FILE' => 1, 'INITIAL_SIZE' => 1, 'MESSAGE_TEXT' => 1, 'PARTITIONING' => 1, 'RELAY_THREAD' => 1, 'SERIALIZABLE' => 1, 'SQL_NO_CACHE' => 1, 'SQL_TSI_HOUR' => 1, 'SQL_TSI_WEEK' => 1, 'SQL_TSI_YEAR' => 1, 'SUBPARTITION' => 1, 'INSERT_METHOD' => 1, 'MASTER_SSL_CA' => 1, 'RELAY_LOG_POS' => 1, 'SQL_TSI_MONTH' => 1, 'SUBPARTITIONS' => 1, 'AUTO_INCREMENT' => 1, 'AVG_ROW_LENGTH' => 1, 'KEY_BLOCK_SIZE' => 1, 'MASTER_LOG_POS' => 1, 'MASTER_SSL_KEY' => 1, 'RELAY_LOG_FILE' => 1, 'SQL_TSI_MINUTE' => 1, 'SQL_TSI_SECOND' => 1, 'TABLE_CHECKSUM' => 1, 'USER_RESOURCES' => 1, 'AUTOEXTEND_SIZE' => 1, 'CONSTRAINT_NAME' => 1, 'DELAY_KEY_WRITE' => 1, 'MASTER_LOG_FILE' => 1, 'MASTER_PASSWORD' => 1, 'MASTER_SSL_CERT' => 1, 'SQL_TSI_QUARTER' => 1, 'SUBCLASS_ORIGIN' => 1, 'MASTER_SERVER_ID' => 1, 'REDO_BUFFER_SIZE' => 1, 'UNDO_BUFFER_SIZE' => 1, 'CONSTRAINT_SCHEMA' => 1, 'IGNORE_SERVER_IDS' => 1, 'MASTER_SSL_CAPATH' => 1, 'MASTER_SSL_CIPHER' => 1, 'SQL_BUFFER_RESULT' => 1, 'CONSTRAINT_CATALOG' => 1, 'SQL_TSI_FRAC_SECOND' => 1, 'MASTER_CONNECT_RETRY' => 1, 'MAX_QUERIES_PER_HOUR' => 1, 'MAX_UPDATES_PER_HOUR' => 1, 'MAX_USER_CONNECTIONS' => 1, 'MASTER_HEARTBEAT_PERIOD' => 1, 'MAX_CONNECTIONS_PER_HOUR' => 1, 'AS' => 3, 'BY' => 3, 'IS' => 3, 'ON' => 3, 'OR' => 3, 'TO' => 3, 'ADD' => 3, 'ALL' => 3, 'AND' => 3, 'ASC' => 3, 'DEC' => 3, 'DIV' => 3, 'FOR' => 3, 'NOT' => 3, 'OUT' => 3, 'SQL' => 3, 'SSL' => 3, 'USE' => 3, 'XOR' => 3, 'BOTH' => 3, 'CALL' => 3, 'CASE' => 3, 'DESC' => 3, 'DROP' => 3, 'DUAL' => 3, 'EACH' => 3, 'ELSE' => 3, 'EXIT' => 3, 'FROM' => 3, 'INT1' => 3, 'INT2' => 3, 'INT3' => 3, 'INT4' => 3, 'INT8' => 3, 'INTO' => 3, 'JOIN' => 3, 'KEYS' => 3, 'KILL' => 3, 'LIKE' => 3, 'LOAD' => 3, 'LOCK' => 3, 'LONG' => 3, 'LOOP' => 3, 'NULL' => 3, 'READ' => 3, 'SHOW' => 3, 'THEN' => 3, 'TRUE' => 3, 'UNDO' => 3, 'WHEN' => 3, 'WITH' => 3, 'ALTER' => 3, 'CHECK' => 3, 'CROSS' => 3, 'FALSE' => 3, 'FETCH' => 3, 'FORCE' => 3, 'GRANT' => 3, 'GROUP' => 3, 'INNER' => 3, 'INOUT' => 3, 'LEAVE' => 3, 'LIMIT' => 3, 'LINES' => 3, 'ORDER' => 3, 'OUTER' => 3, 'PURGE' => 3, 'RANGE' => 3, 'READS' => 3, 'RLIKE' => 3, 'TABLE' => 3, 'UNION' => 3, 'USAGE' => 3, 'USING' => 3, 'WHERE' => 3, 'WHILE' => 3, 'WRITE' => 3, 'BEFORE' => 3, 'CHANGE' => 3, 'COLUMN' => 3, 'CREATE' => 3, 'CURSOR' => 3, 'DELETE' => 3, 'ELSEIF' => 3, 'FLOAT4' => 3, 'FLOAT8' => 3, 'HAVING' => 3, 'IGNORE' => 3, 'INFILE' => 3, 'LINEAR' => 3, 'OPTION' => 3, 'REGEXP' => 3, 'RENAME' => 3, 'RETURN' => 3, 'REVOKE' => 3, 'SELECT' => 3, 'SIGNAL' => 3, 'UNLOCK' => 3, 'UPDATE' => 3, 'ANALYZE' => 3, 'BETWEEN' => 3, 'CASCADE' => 3, 'COLLATE' => 3, 'DECLARE' => 3, 'DELAYED' => 3, 'ESCAPED' => 3, 'EXPLAIN' => 3, 'FOREIGN' => 3, 'ITERATE' => 3, 'LEADING' => 3, 'NATURAL' => 3, 'OUTFILE' => 3, 'PRIMARY' => 3, 'RELEASE' => 3, 'REQUIRE' => 3, 'SCHEMAS' => 3, 'TRIGGER' => 3, 'VARYING' => 3, 'CONTINUE' => 3, 'DAY_HOUR' => 3, 'DESCRIBE' => 3, 'DISTINCT' => 3, 'ENCLOSED' => 3, 'MAXVALUE' => 3, 'MODIFIES' => 3, 'OPTIMIZE' => 3, 'RESIGNAL' => 3, 'RESTRICT' => 3, 'SPECIFIC' => 3, 'SQLSTATE' => 3, 'STARTING' => 3, 'TRAILING' => 3, 'UNSIGNED' => 3, 'ZEROFILL' => 3, 'CONDITION' => 3, 'DATABASES' => 3, 'MIDDLEINT' => 3, 'PRECISION' => 3, 'PROCEDURE' => 3, 'SENSITIVE' => 3, 'SEPARATOR' => 3, 'ACCESSIBLE' => 3, 'ASENSITIVE' => 3, 'CONSTRAINT' => 3, 'DAY_MINUTE' => 3, 'DAY_SECOND' => 3, 'OPTIONALLY' => 3, 'READ_WRITE' => 3, 'REFERENCES' => 3, 'SQLWARNING' => 3, 'TERMINATED' => 3, 'YEAR_MONTH' => 3, 'DISTINCTROW' => 3, 'HOUR_MINUTE' => 3, 'HOUR_SECOND' => 3, 'INSENSITIVE' => 3, 'LOW_PRIORITY' => 3, 'SQLEXCEPTION' => 3, 'VARCHARACTER' => 3, 'DETERMINISTIC' => 3, 'HIGH_PRIORITY' => 3, 'MINUTE_SECOND' => 3, 'STRAIGHT_JOIN' => 3, 'SQL_BIG_RESULT' => 3, 'DAY_MICROSECOND' => 3, 'HOUR_MICROSECOND' => 3, 'SQL_SMALL_RESULT' => 3, 'MINUTE_MICROSECOND' => 3, 'NO_WRITE_TO_BINLOG' => 3, 'SECOND_MICROSECOND' => 3, 'SQL_CALC_FOUND_ROWS' => 3, 'MASTER_SSL_VERIFY_SERVER_CERT' => 3, 'GROUP BY' => 7, 'NOT NULL' => 7, 'ORDER BY' => 7, 'SET NULL' => 7, 'AND CHAIN' => 7, 'FULL JOIN' => 7, 'IF EXISTS' => 7, 'LEFT JOIN' => 7, 'LESS THAN' => 7, 'LOAD DATA' => 7, 'NO ACTION' => 7, 'ON DELETE' => 7, 'ON UPDATE' => 7, 'UNION ALL' => 7, 'CROSS JOIN' => 7, 'ESCAPED BY' => 7, 'FOR UPDATE' => 7, 'INNER JOIN' => 7, 'LINEAR KEY' => 7, 'NO RELEASE' => 7, 'OR REPLACE' => 7, 'RIGHT JOIN' => 7, 'ENCLOSED BY' => 7, 'LINEAR HASH' => 7, 'STARTING BY' => 7, 'AND NO CHAIN' => 7, 'FOR EACH ROW' => 7, 'NATURAL JOIN' => 7, 'PARTITION BY' => 7, 'SET PASSWORD' => 7, 'SQL SECURITY' => 7, 'CHARACTER SET' => 7, 'IF NOT EXISTS' => 7, 'TERMINATED BY' => 7, 'DATA DIRECTORY' => 7, 'UNION DISTINCT' => 7, 'DEFAULT CHARSET' => 7, 'DEFAULT COLLATE' => 7, 'FULL OUTER JOIN' => 7, 'INDEX DIRECTORY' => 7, 'LEFT OUTER JOIN' => 7, 'SUBPARTITION BY' => 7, 'GENERATED ALWAYS' => 7, 'RIGHT OUTER JOIN' => 7, 'NATURAL LEFT JOIN' => 7, 'START TRANSACTION' => 7, 'LOCK IN SHARE MODE' => 7, 'NATURAL RIGHT JOIN' => 7, 'SELECT TRANSACTION' => 7, 'DEFAULT CHARACTER SET' => 7, 'NATURAL LEFT OUTER JOIN' => 7, 'NATURAL RIGHT OUTER JOIN' => 7, 'WITH CONSISTENT SNAPSHOT' => 7, 'BIT' => 9, 'XML' => 9, 'ENUM' => 9, 'JSON' => 9, 'TEXT' => 9, 'ARRAY' => 9, 'SERIAL' => 9, 'BOOLEAN' => 9, 'DATETIME' => 9, 'GEOMETRY' => 9, 'MULTISET' => 9, 'MULTILINEPOINT' => 9, 'MULTILINEPOLYGON' => 9, 'INT' => 11, 'SET' => 11, 'BLOB' => 11, 'REAL' => 11, 'FLOAT' => 11, 'BIGINT' => 11, 'DOUBLE' => 11, 'DECIMAL' => 11, 'INTEGER' => 11, 'NUMERIC' => 11, 'TINYINT' => 11, 'VARCHAR' => 11, 'LONGBLOB' => 11, 'LONGTEXT' => 11, 'SMALLINT' => 11, 'TINYBLOB' => 11, 'TINYTEXT' => 11, 'CHARACTER' => 11, 'MEDIUMINT' => 11, 'VARBINARY' => 11, 'MEDIUMBLOB' => 11, 'MEDIUMTEXT' => 11, 'BINARY VARYING' => 15, 'KEY' => 19, 'INDEX' => 19, 'UNIQUE' => 19, 'SPATIAL' => 19, 'FULLTEXT' => 19, 'INDEX KEY' => 23, 'UNIQUE KEY' => 23, 'FOREIGN KEY' => 23, 'PRIMARY KEY' => 23, 'SPATIAL KEY' => 23, 'FULLTEXT KEY' => 23, 'UNIQUE INDEX' => 23, 'SPATIAL INDEX' => 23, 'FULLTEXT INDEX' => 23, 'X' => 33, 'Y' => 33, 'LN' => 33, 'PI' => 33, 'ABS' => 33, 'AVG' => 33, 'BIN' => 33, 'COS' => 33, 'COT' => 33, 'DAY' => 33, 'ELT' => 33, 'EXP' => 33, 'HEX' => 33, 'LOG' => 33, 'MAX' => 33, 'MD5' => 33, 'MID' => 33, 'MIN' => 33, 'NOW' => 33, 'OCT' => 33, 'ORD' => 33, 'POW' => 33, 'SHA' => 33, 'SIN' => 33, 'STD' => 33, 'SUM' => 33, 'TAN' => 33, 'ACOS' => 33, 'AREA' => 33, 'ASIN' => 33, 'ATAN' => 33, 'CAST' => 33, 'CEIL' => 33, 'CONV' => 33, 'HOUR' => 33, 'LOG2' => 33, 'LPAD' => 33, 'RAND' => 33, 'RPAD' => 33, 'SHA1' => 33, 'SHA2' => 33, 'SIGN' => 33, 'SQRT' => 33, 'SRID' => 33, 'TRIM' => 33, 'USER' => 33, 'UUID' => 33, 'WEEK' => 33, 'ASCII' => 33, 'ASWKB' => 33, 'ASWKT' => 33, 'ATAN2' => 33, 'COUNT' => 33, 'CRC32' => 33, 'FIELD' => 33, 'FLOOR' => 33, 'INSTR' => 33, 'LCASE' => 33, 'LEAST' => 33, 'LOG10' => 33, 'LOWER' => 33, 'LTRIM' => 33, 'MONTH' => 33, 'POWER' => 33, 'QUOTE' => 33, 'ROUND' => 33, 'RTRIM' => 33, 'SLEEP' => 33, 'SPACE' => 33, 'UCASE' => 33, 'UNHEX' => 33, 'UPPER' => 33, 'ASTEXT' => 33, 'BIT_OR' => 33, 'CONCAT' => 33, 'DECODE' => 33, 'ENCODE' => 33, 'EQUALS' => 33, 'FORMAT' => 33, 'IFNULL' => 33, 'ISNULL' => 33, 'LENGTH' => 33, 'LOCATE' => 33, 'MINUTE' => 33, 'NULLIF' => 33, 'POINTN' => 33, 'SECOND' => 33, 'STDDEV' => 33, 'STRCMP' => 33, 'SUBSTR' => 33, 'WITHIN' => 33, 'ADDDATE' => 33, 'ADDTIME' => 33, 'AGAINST' => 33, 'BIT_AND' => 33, 'BIT_XOR' => 33, 'CEILING' => 33, 'CHARSET' => 33, 'CROSSES' => 33, 'CURDATE' => 33, 'CURTIME' => 33, 'DAYNAME' => 33, 'DEGREES' => 33, 'ENCRYPT' => 33, 'EXTRACT' => 33, 'GLENGTH' => 33, 'ISEMPTY' => 33, 'QUARTER' => 33, 'RADIANS' => 33, 'REVERSE' => 33, 'SOUNDEX' => 33, 'SUBDATE' => 33, 'SUBTIME' => 33, 'SYSDATE' => 33, 'TOUCHES' => 33, 'TO_DAYS' => 33, 'VAR_POP' => 33, 'VERSION' => 33, 'WEEKDAY' => 33, 'ASBINARY' => 33, 'CENTROID' => 33, 'COALESCE' => 33, 'COMPRESS' => 33, 'CONTAINS' => 33, 'DATEDIFF' => 33, 'DATE_ADD' => 33, 'DATE_SUB' => 33, 'DISJOINT' => 33, 'ENDPOINT' => 33, 'ENVELOPE' => 33, 'GET_LOCK' => 33, 'GREATEST' => 33, 'ISCLOSED' => 33, 'ISSIMPLE' => 33, 'MAKEDATE' => 33, 'MAKETIME' => 33, 'MAKE_SET' => 33, 'MBREQUAL' => 33, 'OVERLAPS' => 33, 'PASSWORD' => 33, 'POSITION' => 33, 'TIMEDIFF' => 33, 'TRUNCATE' => 33, 'VARIANCE' => 33, 'VAR_SAMP' => 33, 'YEARWEEK' => 33, 'BENCHMARK' => 33, 'BIT_COUNT' => 33, 'COLLATION' => 33, 'CONCAT_WS' => 33, 'DAYOFWEEK' => 33, 'DAYOFYEAR' => 33, 'DIMENSION' => 33, 'FROM_DAYS' => 33, 'GEOMETRYN' => 33, 'INET_ATON' => 33, 'INET_NTOA' => 33, 'LOAD_FILE' => 33, 'MBRWITHIN' => 33, 'MONTHNAME' => 33, 'NUMPOINTS' => 33, 'ROW_COUNT' => 33, 'SUBSTRING' => 33, 'UPDATEXML' => 33, 'BIT_LENGTH' => 33, 'CONVERT_TZ' => 33, 'DAYOFMONTH' => 33, 'EXPORT_SET' => 33, 'FOUND_ROWS' => 33, 'GET_FORMAT' => 33, 'INTERSECTS' => 33, 'MBRTOUCHES' => 33, 'MULTIPOINT' => 33, 'NAME_CONST' => 33, 'PERIOD_ADD' => 33, 'STARTPOINT' => 33, 'STDDEV_POP' => 33, 'TO_SECONDS' => 33, 'UNCOMPRESS' => 33, 'UUID_SHORT' => 33, 'WEEKOFYEAR' => 33, 'AES_DECRYPT' => 33, 'AES_ENCRYPT' => 33, 'CHAR_LENGTH' => 33, 'DATE_FORMAT' => 33, 'DES_DECRYPT' => 33, 'DES_ENCRYPT' => 33, 'FIND_IN_SET' => 33, 'GEOMFROMWKB' => 33, 'LINEFROMWKB' => 33, 'MBRCONTAINS' => 33, 'MBRDISJOINT' => 33, 'MBROVERLAPS' => 33, 'MICROSECOND' => 33, 'PERIOD_DIFF' => 33, 'POLYFROMWKB' => 33, 'SEC_TO_TIME' => 33, 'STDDEV_SAMP' => 33, 'STR_TO_DATE' => 33, 'SYSTEM_USER' => 33, 'TIME_FORMAT' => 33, 'TIME_TO_SEC' => 33, 'COERCIBILITY' => 33, 'EXTERIORRING' => 33, 'EXTRACTVALUE' => 33, 'GEOMETRYTYPE' => 33, 'GEOMFROMTEXT' => 33, 'GROUP_CONCAT' => 33, 'IS_FREE_LOCK' => 33, 'IS_USED_LOCK' => 33, 'LINEFROMTEXT' => 33, 'MLINEFROMWKB' => 33, 'MPOLYFROMWKB' => 33, 'MULTIPOLYGON' => 33, 'OCTET_LENGTH' => 33, 'OLD_PASSWORD' => 33, 'POINTFROMWKB' => 33, 'POLYFROMTEXT' => 33, 'RELEASE_LOCK' => 33, 'SESSION_USER' => 33, 'TIMESTAMPADD' => 33, 'CONNECTION_ID' => 33, 'FROM_UNIXTIME' => 33, 'INTERIORRINGN' => 33, 'MBRINTERSECTS' => 33, 'MLINEFROMTEXT' => 33, 'MPOINTFROMWKB' => 33, 'MPOLYFROMTEXT' => 33, 'NUMGEOMETRIES' => 33, 'POINTFROMTEXT' => 33, 'TIMESTAMPDIFF' => 33, 'LAST_INSERT_ID' => 33, 'MPOINTFROMTEXT' => 33, 'POLYGONFROMWKB' => 33, 'UNIX_TIMESTAMP' => 33, 'GEOMCOLLFROMWKB' => 33, 'MASTER_POS_WAIT' => 33, 'POLYGONFROMTEXT' => 33, 'SUBSTRING_INDEX' => 33, 'CHARACTER_LENGTH' => 33, 'GEOMCOLLFROMTEXT' => 33, 'GEOMETRYFROMTEXT' => 33, 'NUMINTERIORRINGS' => 33, 'LINESTRINGFROMWKB' => 33, 'MULTIPOINTFROMWKB' => 33, 'MULTIPOINTFROMTEXT' => 33, 'MULTIPOLYGONFROMWKB' => 33, 'UNCOMPRESSED_LENGTH' => 33, 'MULTIPOLYGONFROMTEXT' => 33, 'MULTILINESTRINGFROMWKB' => 33, 'MULTILINESTRINGFROMTEXT' => 33, 'GEOMETRYCOLLECTIONFROMWKB' => 33, 'GEOMETRYCOLLECTIONFROMTEXT' => 33, 'IF' => 35, 'IN' => 35, 'MOD' => 35, 'LEFT' => 35, 'MATCH' => 35, 'RIGHT' => 35, 'EXISTS' => 35, 'INSERT' => 35, 'REPEAT' => 35, 'SCHEMA' => 35, 'VALUES' => 35, 'CONVERT' => 35, 'DEFAULT' => 35, 'REPLACE' => 35, 'DATABASE' => 35, 'UTC_DATE' => 35, 'UTC_TIME' => 35, 'LOCALTIME' => 35, 'CURRENT_DATE' => 35, 'CURRENT_TIME' => 35, 'CURRENT_USER' => 35, 'UTC_TIMESTAMP' => 35, 'LOCALTIMESTAMP' => 35, 'CURRENT_TIMESTAMP' => 35, 'NOT IN' => 39, 'DATE' => 41, 'TIME' => 41, 'YEAR' => 41, 'POINT' => 41, 'POLYGON' => 41, 'TIMESTAMP' => 41, 'LINESTRING' => 41, 'MULTILINESTRING' => 41, 'GEOMETRYCOLLECTION' => 41, 'CHAR' => 43, 'BINARY' => 43, 'INTERVAL' => 43);
    }
    /**
     * Context for MariaDB 10.2.
     *
     * @category   Contexts
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ContextMariaDb100200 extends \PhpMyAdmin\SqlParser\Context
    {
        /**
         * List of keywords.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * @var array
         */
        public static $KEYWORDS = array('AT' => 1, 'DO' => 1, 'IO' => 1, 'NO' => 1, 'XA' => 1, 'ANY' => 1, 'CPU' => 1, 'END' => 1, 'IPC' => 1, 'NDB' => 1, 'NEW' => 1, 'ONE' => 1, 'ROW' => 1, 'XID' => 1, 'BOOL' => 1, 'BYTE' => 1, 'CODE' => 1, 'CUBE' => 1, 'DATA' => 1, 'DISK' => 1, 'ENDS' => 1, 'FAST' => 1, 'FILE' => 1, 'FULL' => 1, 'HASH' => 1, 'HELP' => 1, 'HOST' => 1, 'LAST' => 1, 'LESS' => 1, 'LIST' => 1, 'LOGS' => 1, 'MODE' => 1, 'NAME' => 1, 'NEXT' => 1, 'NONE' => 1, 'ONLY' => 1, 'OPEN' => 1, 'PAGE' => 1, 'PORT' => 1, 'PREV' => 1, 'SLOW' => 1, 'SOME' => 1, 'STOP' => 1, 'THAN' => 1, 'TYPE' => 1, 'VIEW' => 1, 'WAIT' => 1, 'WORK' => 1, 'X509' => 1, 'AFTER' => 1, 'BEGIN' => 1, 'BLOCK' => 1, 'BTREE' => 1, 'CACHE' => 1, 'CHAIN' => 1, 'CLOSE' => 1, 'ERROR' => 1, 'EVENT' => 1, 'EVERY' => 1, 'FIRST' => 1, 'FIXED' => 1, 'FLUSH' => 1, 'FOUND' => 1, 'HOSTS' => 1, 'LEVEL' => 1, 'LOCAL' => 1, 'LOCKS' => 1, 'MERGE' => 1, 'MUTEX' => 1, 'NAMES' => 1, 'NCHAR' => 1, 'NEVER' => 1, 'OWNER' => 1, 'PHASE' => 1, 'PROXY' => 1, 'QUERY' => 1, 'QUICK' => 1, 'RELAY' => 1, 'RESET' => 1, 'RTREE' => 1, 'SHARE' => 1, 'SLAVE' => 1, 'START' => 1, 'SUPER' => 1, 'SWAPS' => 1, 'TYPES' => 1, 'UNTIL' => 1, 'VALUE' => 1, 'ACTION' => 1, 'ALWAYS' => 1, 'BACKUP' => 1, 'BINLOG' => 1, 'CIPHER' => 1, 'CLIENT' => 1, 'COMMIT' => 1, 'ENABLE' => 1, 'ENGINE' => 1, 'ERRORS' => 1, 'ESCAPE' => 1, 'EVENTS' => 1, 'EXPIRE' => 1, 'EXPORT' => 1, 'FAULTS' => 1, 'FIELDS' => 1, 'FILTER' => 1, 'GLOBAL' => 1, 'GRANTS' => 1, 'IMPORT' => 1, 'ISSUER' => 1, 'LEAVES' => 1, 'MASTER' => 1, 'MEDIUM' => 1, 'MEMORY' => 1, 'MODIFY' => 1, 'NUMBER' => 1, 'OFFSET' => 1, 'PARSER' => 1, 'PLUGIN' => 1, 'RELOAD' => 1, 'REMOVE' => 1, 'REPAIR' => 1, 'RESUME' => 1, 'ROLLUP' => 1, 'SERVER' => 1, 'SIGNED' => 1, 'SIMPLE' => 1, 'SOCKET' => 1, 'SONAME' => 1, 'SOUNDS' => 1, 'SOURCE' => 1, 'STARTS' => 1, 'STATUS' => 1, 'STRING' => 1, 'TABLES' => 1, 'ACCOUNT' => 1, 'ANALYSE' => 1, 'CHANGED' => 1, 'CHANNEL' => 1, 'COLUMNS' => 1, 'COMMENT' => 1, 'COMPACT' => 1, 'CONTEXT' => 1, 'CURRENT' => 1, 'DEFINER' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DYNAMIC' => 1, 'ENGINES' => 1, 'EXECUTE' => 1, 'FOLLOWS' => 1, 'GENERAL' => 1, 'HANDLER' => 1, 'INDEXES' => 1, 'INSTALL' => 1, 'INVOKER' => 1, 'LOGFILE' => 1, 'MIGRATE' => 1, 'NO_WAIT' => 1, 'OPTIONS' => 1, 'PARTIAL' => 1, 'PLUGINS' => 1, 'PREPARE' => 1, 'PROFILE' => 1, 'REBUILD' => 1, 'RECOVER' => 1, 'RESTORE' => 1, 'RETURNS' => 1, 'ROUTINE' => 1, 'SESSION' => 1, 'STACKED' => 1, 'STORAGE' => 1, 'SUBJECT' => 1, 'SUSPEND' => 1, 'UNICODE' => 1, 'UNKNOWN' => 1, 'UPGRADE' => 1, 'USE_FRM' => 1, 'WITHOUT' => 1, 'WRAPPER' => 1, 'CASCADED' => 1, 'CHECKSUM' => 1, 'DATAFILE' => 1, 'DUMPFILE' => 1, 'EXCHANGE' => 1, 'EXTENDED' => 1, 'FUNCTION' => 1, 'LANGUAGE' => 1, 'MAX_ROWS' => 1, 'MAX_SIZE' => 1, 'MIN_ROWS' => 1, 'NATIONAL' => 1, 'NVARCHAR' => 1, 'PRECEDES' => 1, 'PRESERVE' => 1, 'PROFILES' => 1, 'REDOFILE' => 1, 'RELAYLOG' => 1, 'ROLLBACK' => 1, 'SCHEDULE' => 1, 'SECURITY' => 1, 'SHUTDOWN' => 1, 'SNAPSHOT' => 1, 'SWITCHES' => 1, 'TRIGGERS' => 1, 'UNDOFILE' => 1, 'WARNINGS' => 1, 'AGGREGATE' => 1, 'ALGORITHM' => 1, 'COMMITTED' => 1, 'DIRECTORY' => 1, 'DUPLICATE' => 1, 'EXPANSION' => 1, 'IO_THREAD' => 1, 'ISOLATION' => 1, 'NODEGROUP' => 1, 'PACK_KEYS' => 1, 'READ_ONLY' => 1, 'REDUNDANT' => 1, 'SAVEPOINT' => 1, 'SQL_CACHE' => 1, 'TEMPORARY' => 1, 'TEMPTABLE' => 1, 'UNDEFINED' => 1, 'UNINSTALL' => 1, 'VARIABLES' => 1, 'COMPLETION' => 1, 'COMPRESSED' => 1, 'CONCURRENT' => 1, 'CONNECTION' => 1, 'CONSISTENT' => 1, 'DEALLOCATE' => 1, 'IDENTIFIED' => 1, 'MASTER_SSL' => 1, 'NDBCLUSTER' => 1, 'PARTITIONS' => 1, 'PERSISTENT' => 1, 'PLUGIN_DIR' => 1, 'PRIVILEGES' => 1, 'REORGANIZE' => 1, 'REPEATABLE' => 1, 'ROW_FORMAT' => 1, 'SQL_THREAD' => 1, 'TABLESPACE' => 1, 'TABLE_NAME' => 1, 'VALIDATION' => 1, 'COLUMN_NAME' => 1, 'COMPRESSION' => 1, 'CURSOR_NAME' => 1, 'DIAGNOSTICS' => 1, 'EXTENT_SIZE' => 1, 'MASTER_HOST' => 1, 'MASTER_PORT' => 1, 'MASTER_USER' => 1, 'MYSQL_ERRNO' => 1, 'NONBLOCKING' => 1, 'PROCESSLIST' => 1, 'REPLICATION' => 1, 'SCHEMA_NAME' => 1, 'SQL_TSI_DAY' => 1, 'TRANSACTION' => 1, 'UNCOMMITTED' => 1, 'CATALOG_NAME' => 1, 'CLASS_ORIGIN' => 1, 'DEFAULT_AUTH' => 1, 'DES_KEY_FILE' => 1, 'INITIAL_SIZE' => 1, 'MASTER_DELAY' => 1, 'MESSAGE_TEXT' => 1, 'PARTITIONING' => 1, 'RELAY_THREAD' => 1, 'SERIALIZABLE' => 1, 'SQL_NO_CACHE' => 1, 'SQL_TSI_HOUR' => 1, 'SQL_TSI_WEEK' => 1, 'SQL_TSI_YEAR' => 1, 'SUBPARTITION' => 1, 'COLUMN_FORMAT' => 1, 'INSERT_METHOD' => 1, 'MASTER_SSL_CA' => 1, 'RELAY_LOG_POS' => 1, 'SQL_TSI_MONTH' => 1, 'SUBPARTITIONS' => 1, 'AUTO_INCREMENT' => 1, 'AVG_ROW_LENGTH' => 1, 'KEY_BLOCK_SIZE' => 1, 'MASTER_LOG_POS' => 1, 'MASTER_SSL_CRL' => 1, 'MASTER_SSL_KEY' => 1, 'RELAY_LOG_FILE' => 1, 'SQL_TSI_MINUTE' => 1, 'SQL_TSI_SECOND' => 1, 'TABLE_CHECKSUM' => 1, 'USER_RESOURCES' => 1, 'AUTOEXTEND_SIZE' => 1, 'CONSTRAINT_NAME' => 1, 'DELAY_KEY_WRITE' => 1, 'FILE_BLOCK_SIZE' => 1, 'MASTER_LOG_FILE' => 1, 'MASTER_PASSWORD' => 1, 'MASTER_SSL_CERT' => 1, 'PARSE_GCOL_EXPR' => 1, 'REPLICATE_DO_DB' => 1, 'SQL_AFTER_GTIDS' => 1, 'SQL_TSI_QUARTER' => 1, 'SUBCLASS_ORIGIN' => 1, 'MASTER_SERVER_ID' => 1, 'REDO_BUFFER_SIZE' => 1, 'SQL_BEFORE_GTIDS' => 1, 'STATS_PERSISTENT' => 1, 'UNDO_BUFFER_SIZE' => 1, 'CONSTRAINT_SCHEMA' => 1, 'GROUP_REPLICATION' => 1, 'IGNORE_SERVER_IDS' => 1, 'MASTER_SSL_CAPATH' => 1, 'MASTER_SSL_CIPHER' => 1, 'RETURNED_SQLSTATE' => 1, 'SQL_BUFFER_RESULT' => 1, 'STATS_AUTO_RECALC' => 1, 'CONSTRAINT_CATALOG' => 1, 'MASTER_RETRY_COUNT' => 1, 'MASTER_SSL_CRLPATH' => 1, 'MAX_STATEMENT_TIME' => 1, 'REPLICATE_DO_TABLE' => 1, 'SQL_AFTER_MTS_GAPS' => 1, 'STATS_SAMPLE_PAGES' => 1, 'REPLICATE_IGNORE_DB' => 1, 'MASTER_AUTO_POSITION' => 1, 'MASTER_CONNECT_RETRY' => 1, 'MAX_QUERIES_PER_HOUR' => 1, 'MAX_UPDATES_PER_HOUR' => 1, 'MAX_USER_CONNECTIONS' => 1, 'REPLICATE_REWRITE_DB' => 1, 'REPLICATE_IGNORE_TABLE' => 1, 'MASTER_HEARTBEAT_PERIOD' => 1, 'REPLICATE_WILD_DO_TABLE' => 1, 'MAX_CONNECTIONS_PER_HOUR' => 1, 'REPLICATE_WILD_IGNORE_TABLE' => 1, 'AS' => 3, 'BY' => 3, 'IS' => 3, 'ON' => 3, 'OR' => 3, 'TO' => 3, 'ADD' => 3, 'ALL' => 3, 'AND' => 3, 'ASC' => 3, 'DEC' => 3, 'DIV' => 3, 'FOR' => 3, 'GET' => 3, 'NOT' => 3, 'OUT' => 3, 'SQL' => 3, 'SSL' => 3, 'USE' => 3, 'XOR' => 3, 'BOTH' => 3, 'CALL' => 3, 'CASE' => 3, 'DESC' => 3, 'DROP' => 3, 'DUAL' => 3, 'EACH' => 3, 'ELSE' => 3, 'EXIT' => 3, 'FROM' => 3, 'INT1' => 3, 'INT2' => 3, 'INT3' => 3, 'INT4' => 3, 'INT8' => 3, 'INTO' => 3, 'JOIN' => 3, 'KEYS' => 3, 'KILL' => 3, 'LIKE' => 3, 'LOAD' => 3, 'LOCK' => 3, 'LONG' => 3, 'LOOP' => 3, 'NULL' => 3, 'READ' => 3, 'ROWS' => 3, 'SHOW' => 3, 'THEN' => 3, 'TRUE' => 3, 'UNDO' => 3, 'WHEN' => 3, 'WITH' => 3, 'ALTER' => 3, 'CHECK' => 3, 'CROSS' => 3, 'FALSE' => 3, 'FETCH' => 3, 'FORCE' => 3, 'GRANT' => 3, 'GROUP' => 3, 'INNER' => 3, 'INOUT' => 3, 'LEAVE' => 3, 'LIMIT' => 3, 'LINES' => 3, 'ORDER' => 3, 'OUTER' => 3, 'PURGE' => 3, 'RANGE' => 3, 'READS' => 3, 'RLIKE' => 3, 'TABLE' => 3, 'UNION' => 3, 'USAGE' => 3, 'USING' => 3, 'WHERE' => 3, 'WHILE' => 3, 'WRITE' => 3, 'BEFORE' => 3, 'CHANGE' => 3, 'COLUMN' => 3, 'CREATE' => 3, 'CURSOR' => 3, 'DELETE' => 3, 'ELSEIF' => 3, 'FLOAT4' => 3, 'FLOAT8' => 3, 'HAVING' => 3, 'IGNORE' => 3, 'INFILE' => 3, 'LINEAR' => 3, 'OPTION' => 3, 'REGEXP' => 3, 'RENAME' => 3, 'RETURN' => 3, 'REVOKE' => 3, 'SELECT' => 3, 'SIGNAL' => 3, 'STORED' => 3, 'UNLOCK' => 3, 'UPDATE' => 3, 'ANALYZE' => 3, 'BETWEEN' => 3, 'CASCADE' => 3, 'COLLATE' => 3, 'DECLARE' => 3, 'DELAYED' => 3, 'ESCAPED' => 3, 'EXPLAIN' => 3, 'FOREIGN' => 3, 'ITERATE' => 3, 'LEADING' => 3, 'NATURAL' => 3, 'OUTFILE' => 3, 'PRIMARY' => 3, 'RELEASE' => 3, 'REQUIRE' => 3, 'SCHEMAS' => 3, 'TRIGGER' => 3, 'VARYING' => 3, 'VIRTUAL' => 3, 'CONTINUE' => 3, 'DAY_HOUR' => 3, 'DESCRIBE' => 3, 'DISTINCT' => 3, 'ENCLOSED' => 3, 'MAXVALUE' => 3, 'MODIFIES' => 3, 'OPTIMIZE' => 3, 'RESIGNAL' => 3, 'RESTRICT' => 3, 'SPECIFIC' => 3, 'SQLSTATE' => 3, 'STARTING' => 3, 'TRAILING' => 3, 'UNSIGNED' => 3, 'ZEROFILL' => 3, 'CONDITION' => 3, 'DATABASES' => 3, 'GENERATED' => 3, 'MIDDLEINT' => 3, 'PARTITION' => 3, 'PRECISION' => 3, 'PROCEDURE' => 3, 'RECURSIVE' => 3, 'SENSITIVE' => 3, 'SEPARATOR' => 3, 'ACCESSIBLE' => 3, 'ASENSITIVE' => 3, 'CONSTRAINT' => 3, 'DAY_MINUTE' => 3, 'DAY_SECOND' => 3, 'OPTIONALLY' => 3, 'READ_WRITE' => 3, 'REFERENCES' => 3, 'SQLWARNING' => 3, 'TERMINATED' => 3, 'YEAR_MONTH' => 3, 'DISTINCTROW' => 3, 'HOUR_MINUTE' => 3, 'HOUR_SECOND' => 3, 'INSENSITIVE' => 3, 'MASTER_BIND' => 3, 'LOW_PRIORITY' => 3, 'SQLEXCEPTION' => 3, 'VARCHARACTER' => 3, 'DETERMINISTIC' => 3, 'HIGH_PRIORITY' => 3, 'MINUTE_SECOND' => 3, 'STRAIGHT_JOIN' => 3, 'IO_AFTER_GTIDS' => 3, 'SQL_BIG_RESULT' => 3, 'DAY_MICROSECOND' => 3, 'IO_BEFORE_GTIDS' => 3, 'OPTIMIZER_COSTS' => 3, 'HOUR_MICROSECOND' => 3, 'SQL_SMALL_RESULT' => 3, 'MINUTE_MICROSECOND' => 3, 'NO_WRITE_TO_BINLOG' => 3, 'SECOND_MICROSECOND' => 3, 'SQL_CALC_FOUND_ROWS' => 3, 'MASTER_SSL_VERIFY_SERVER_CERT' => 3, 'GROUP BY' => 7, 'NOT NULL' => 7, 'ORDER BY' => 7, 'SET NULL' => 7, 'AND CHAIN' => 7, 'FULL JOIN' => 7, 'IF EXISTS' => 7, 'LEFT JOIN' => 7, 'LESS THAN' => 7, 'LOAD DATA' => 7, 'NO ACTION' => 7, 'ON DELETE' => 7, 'ON UPDATE' => 7, 'UNION ALL' => 7, 'CROSS JOIN' => 7, 'ESCAPED BY' => 7, 'FOR UPDATE' => 7, 'INNER JOIN' => 7, 'LINEAR KEY' => 7, 'NO RELEASE' => 7, 'OR REPLACE' => 7, 'RIGHT JOIN' => 7, 'ENCLOSED BY' => 7, 'LINEAR HASH' => 7, 'STARTING BY' => 7, 'AND NO CHAIN' => 7, 'FOR EACH ROW' => 7, 'NATURAL JOIN' => 7, 'PARTITION BY' => 7, 'SET PASSWORD' => 7, 'SQL SECURITY' => 7, 'CHARACTER SET' => 7, 'IF NOT EXISTS' => 7, 'TERMINATED BY' => 7, 'DATA DIRECTORY' => 7, 'UNION DISTINCT' => 7, 'DEFAULT CHARSET' => 7, 'DEFAULT COLLATE' => 7, 'FULL OUTER JOIN' => 7, 'INDEX DIRECTORY' => 7, 'LEFT OUTER JOIN' => 7, 'SUBPARTITION BY' => 7, 'GENERATED ALWAYS' => 7, 'RIGHT OUTER JOIN' => 7, 'NATURAL LEFT JOIN' => 7, 'START TRANSACTION' => 7, 'LOCK IN SHARE MODE' => 7, 'NATURAL RIGHT JOIN' => 7, 'SELECT TRANSACTION' => 7, 'DEFAULT CHARACTER SET' => 7, 'NATURAL LEFT OUTER JOIN' => 7, 'NATURAL RIGHT OUTER JOIN' => 7, 'WITH CONSISTENT SNAPSHOT' => 7, 'BIT' => 9, 'XML' => 9, 'ENUM' => 9, 'JSON' => 9, 'TEXT' => 9, 'ARRAY' => 9, 'SERIAL' => 9, 'BOOLEAN' => 9, 'DATETIME' => 9, 'GEOMETRY' => 9, 'MULTISET' => 9, 'MULTILINEPOINT' => 9, 'MULTILINEPOLYGON' => 9, 'INT' => 11, 'SET' => 11, 'BLOB' => 11, 'REAL' => 11, 'FLOAT' => 11, 'BIGINT' => 11, 'DOUBLE' => 11, 'DECIMAL' => 11, 'INTEGER' => 11, 'NUMERIC' => 11, 'TINYINT' => 11, 'VARCHAR' => 11, 'LONGBLOB' => 11, 'LONGTEXT' => 11, 'SMALLINT' => 11, 'TINYBLOB' => 11, 'TINYTEXT' => 11, 'CHARACTER' => 11, 'MEDIUMINT' => 11, 'VARBINARY' => 11, 'MEDIUMBLOB' => 11, 'MEDIUMTEXT' => 11, 'BINARY VARYING' => 15, 'KEY' => 19, 'INDEX' => 19, 'UNIQUE' => 19, 'SPATIAL' => 19, 'FULLTEXT' => 19, 'INDEX KEY' => 23, 'UNIQUE KEY' => 23, 'FOREIGN KEY' => 23, 'PRIMARY KEY' => 23, 'SPATIAL KEY' => 23, 'FULLTEXT KEY' => 23, 'UNIQUE INDEX' => 23, 'SPATIAL INDEX' => 23, 'FULLTEXT INDEX' => 23, 'X' => 33, 'Y' => 33, 'LN' => 33, 'PI' => 33, 'ABS' => 33, 'AVG' => 33, 'BIN' => 33, 'COS' => 33, 'COT' => 33, 'DAY' => 33, 'ELT' => 33, 'EXP' => 33, 'HEX' => 33, 'LOG' => 33, 'MAX' => 33, 'MD5' => 33, 'MID' => 33, 'MIN' => 33, 'NOW' => 33, 'OCT' => 33, 'ORD' => 33, 'POW' => 33, 'SHA' => 33, 'SIN' => 33, 'STD' => 33, 'SUM' => 33, 'TAN' => 33, 'ACOS' => 33, 'AREA' => 33, 'ASIN' => 33, 'ATAN' => 33, 'CAST' => 33, 'CEIL' => 33, 'CONV' => 33, 'HOUR' => 33, 'LOG2' => 33, 'LPAD' => 33, 'RAND' => 33, 'RPAD' => 33, 'SHA1' => 33, 'SHA2' => 33, 'SIGN' => 33, 'SQRT' => 33, 'SRID' => 33, 'ST_X' => 33, 'ST_Y' => 33, 'TRIM' => 33, 'USER' => 33, 'UUID' => 33, 'WEEK' => 33, 'ASCII' => 33, 'ASWKB' => 33, 'ASWKT' => 33, 'ATAN2' => 33, 'COUNT' => 33, 'CRC32' => 33, 'FIELD' => 33, 'FLOOR' => 33, 'INSTR' => 33, 'LCASE' => 33, 'LEAST' => 33, 'LOG10' => 33, 'LOWER' => 33, 'LTRIM' => 33, 'MONTH' => 33, 'POWER' => 33, 'QUOTE' => 33, 'ROUND' => 33, 'RTRIM' => 33, 'SLEEP' => 33, 'SPACE' => 33, 'UCASE' => 33, 'UNHEX' => 33, 'UPPER' => 33, 'ASTEXT' => 33, 'BIT_OR' => 33, 'BUFFER' => 33, 'CONCAT' => 33, 'DECODE' => 33, 'ENCODE' => 33, 'EQUALS' => 33, 'FORMAT' => 33, 'IFNULL' => 33, 'ISNULL' => 33, 'LENGTH' => 33, 'LOCATE' => 33, 'MINUTE' => 33, 'NULLIF' => 33, 'POINTN' => 33, 'SECOND' => 33, 'STDDEV' => 33, 'STRCMP' => 33, 'SUBSTR' => 33, 'WITHIN' => 33, 'ADDDATE' => 33, 'ADDTIME' => 33, 'AGAINST' => 33, 'BIT_AND' => 33, 'BIT_XOR' => 33, 'CEILING' => 33, 'CHARSET' => 33, 'CROSSES' => 33, 'CURDATE' => 33, 'CURTIME' => 33, 'DAYNAME' => 33, 'DEGREES' => 33, 'ENCRYPT' => 33, 'EXTRACT' => 33, 'GLENGTH' => 33, 'ISEMPTY' => 33, 'IS_IPV4' => 33, 'IS_IPV6' => 33, 'QUARTER' => 33, 'RADIANS' => 33, 'REVERSE' => 33, 'SOUNDEX' => 33, 'ST_AREA' => 33, 'ST_SRID' => 33, 'SUBDATE' => 33, 'SUBTIME' => 33, 'SYSDATE' => 33, 'TOUCHES' => 33, 'TO_DAYS' => 33, 'VAR_POP' => 33, 'VERSION' => 33, 'WEEKDAY' => 33, 'ASBINARY' => 33, 'CENTROID' => 33, 'COALESCE' => 33, 'COMPRESS' => 33, 'CONTAINS' => 33, 'DATEDIFF' => 33, 'DATE_ADD' => 33, 'DATE_SUB' => 33, 'DISJOINT' => 33, 'DISTANCE' => 33, 'ENDPOINT' => 33, 'ENVELOPE' => 33, 'GET_LOCK' => 33, 'GREATEST' => 33, 'ISCLOSED' => 33, 'ISSIMPLE' => 33, 'JSON_SET' => 33, 'MAKEDATE' => 33, 'MAKETIME' => 33, 'MAKE_SET' => 33, 'MBREQUAL' => 33, 'OVERLAPS' => 33, 'PASSWORD' => 33, 'POSITION' => 33, 'ST_ASWKB' => 33, 'ST_ASWKT' => 33, 'ST_UNION' => 33, 'TIMEDIFF' => 33, 'TRUNCATE' => 33, 'VARIANCE' => 33, 'VAR_SAMP' => 33, 'YEARWEEK' => 33, 'ANY_VALUE' => 33, 'BENCHMARK' => 33, 'BIT_COUNT' => 33, 'COLLATION' => 33, 'CONCAT_WS' => 33, 'DAYOFWEEK' => 33, 'DAYOFYEAR' => 33, 'DIMENSION' => 33, 'FROM_DAYS' => 33, 'GEOMETRYN' => 33, 'INET_ATON' => 33, 'INET_NTOA' => 33, 'JSON_KEYS' => 33, 'JSON_TYPE' => 33, 'LOAD_FILE' => 33, 'MBRCOVERS' => 33, 'MBREQUALS' => 33, 'MBRWITHIN' => 33, 'MONTHNAME' => 33, 'NUMPOINTS' => 33, 'ROW_COUNT' => 33, 'ST_ASTEXT' => 33, 'ST_BUFFER' => 33, 'ST_EQUALS' => 33, 'ST_LENGTH' => 33, 'ST_POINTN' => 33, 'ST_WITHIN' => 33, 'SUBSTRING' => 33, 'TO_BASE64' => 33, 'UPDATEXML' => 33, 'BIT_LENGTH' => 33, 'CONVERT_TZ' => 33, 'CONVEXHULL' => 33, 'DAYOFMONTH' => 33, 'EXPORT_SET' => 33, 'FOUND_ROWS' => 33, 'GET_FORMAT' => 33, 'INET6_ATON' => 33, 'INET6_NTOA' => 33, 'INTERSECTS' => 33, 'JSON_ARRAY' => 33, 'JSON_DEPTH' => 33, 'JSON_MERGE' => 33, 'JSON_QUOTE' => 33, 'JSON_VALID' => 33, 'MBRTOUCHES' => 33, 'MULTIPOINT' => 33, 'NAME_CONST' => 33, 'PERIOD_ADD' => 33, 'STARTPOINT' => 33, 'STDDEV_POP' => 33, 'ST_CROSSES' => 33, 'ST_GEOHASH' => 33, 'ST_ISEMPTY' => 33, 'ST_ISVALID' => 33, 'ST_TOUCHES' => 33, 'TO_SECONDS' => 33, 'UNCOMPRESS' => 33, 'UUID_SHORT' => 33, 'WEEKOFYEAR' => 33, 'AES_DECRYPT' => 33, 'AES_ENCRYPT' => 33, 'CHAR_LENGTH' => 33, 'DATE_FORMAT' => 33, 'DES_DECRYPT' => 33, 'DES_ENCRYPT' => 33, 'FIND_IN_SET' => 33, 'FROM_BASE64' => 33, 'GEOMFROMWKB' => 33, 'GTID_SUBSET' => 33, 'JSON_INSERT' => 33, 'JSON_LENGTH' => 33, 'JSON_OBJECT' => 33, 'JSON_PRETTY' => 33, 'JSON_REMOVE' => 33, 'JSON_SEARCH' => 33, 'LINEFROMWKB' => 33, 'MBRCONTAINS' => 33, 'MBRDISJOINT' => 33, 'MBROVERLAPS' => 33, 'MICROSECOND' => 33, 'PERIOD_DIFF' => 33, 'POLYFROMWKB' => 33, 'SEC_TO_TIME' => 33, 'STDDEV_SAMP' => 33, 'STR_TO_DATE' => 33, 'ST_ASBINARY' => 33, 'ST_CENTROID' => 33, 'ST_CONTAINS' => 33, 'ST_DISJOINT' => 33, 'ST_DISTANCE' => 33, 'ST_ENDPOINT' => 33, 'ST_ENVELOPE' => 33, 'ST_ISCLOSED' => 33, 'ST_ISSIMPLE' => 33, 'ST_OVERLAPS' => 33, 'ST_SIMPLIFY' => 33, 'ST_VALIDATE' => 33, 'SYSTEM_USER' => 33, 'TIME_FORMAT' => 33, 'TIME_TO_SEC' => 33, 'COERCIBILITY' => 33, 'EXTERIORRING' => 33, 'EXTRACTVALUE' => 33, 'GEOMETRYTYPE' => 33, 'GEOMFROMTEXT' => 33, 'GROUP_CONCAT' => 33, 'IS_FREE_LOCK' => 33, 'IS_USED_LOCK' => 33, 'JSON_EXTRACT' => 33, 'JSON_REPLACE' => 33, 'JSON_UNQUOTE' => 33, 'LINEFROMTEXT' => 33, 'MBRCOVEREDBY' => 33, 'MLINEFROMWKB' => 33, 'MPOLYFROMWKB' => 33, 'MULTIPOLYGON' => 33, 'OCTET_LENGTH' => 33, 'OLD_PASSWORD' => 33, 'POINTFROMWKB' => 33, 'POLYFROMTEXT' => 33, 'RANDOM_BYTES' => 33, 'RELEASE_LOCK' => 33, 'SESSION_USER' => 33, 'ST_ASGEOJSON' => 33, 'ST_DIMENSION' => 33, 'ST_GEOMETRYN' => 33, 'ST_NUMPOINTS' => 33, 'TIMESTAMPADD' => 33, 'CONNECTION_ID' => 33, 'FROM_UNIXTIME' => 33, 'GTID_SUBTRACT' => 33, 'INTERIORRINGN' => 33, 'JSON_CONTAINS' => 33, 'MBRINTERSECTS' => 33, 'MLINEFROMTEXT' => 33, 'MPOINTFROMWKB' => 33, 'MPOLYFROMTEXT' => 33, 'NUMGEOMETRIES' => 33, 'POINTFROMTEXT' => 33, 'ST_CONVEXHULL' => 33, 'ST_DIFFERENCE' => 33, 'ST_INTERSECTS' => 33, 'ST_STARTPOINT' => 33, 'TIMESTAMPDIFF' => 33, 'WEIGHT_STRING' => 33, 'IS_IPV4_COMPAT' => 33, 'IS_IPV4_MAPPED' => 33, 'LAST_INSERT_ID' => 33, 'MPOINTFROMTEXT' => 33, 'POLYGONFROMWKB' => 33, 'ST_GEOMFROMWKB' => 33, 'ST_LINEFROMWKB' => 33, 'ST_POLYFROMWKB' => 33, 'UNIX_TIMESTAMP' => 33, 'GEOMCOLLFROMWKB' => 33, 'MASTER_POS_WAIT' => 33, 'POLYGONFROMTEXT' => 33, 'ST_EXTERIORRING' => 33, 'ST_GEOMETRYTYPE' => 33, 'ST_GEOMFROMTEXT' => 33, 'ST_INTERSECTION' => 33, 'ST_LINEFROMTEXT' => 33, 'ST_MAKEENVELOPE' => 33, 'ST_MLINEFROMWKB' => 33, 'ST_MPOLYFROMWKB' => 33, 'ST_POINTFROMWKB' => 33, 'ST_POLYFROMTEXT' => 33, 'SUBSTRING_INDEX' => 33, 'CHARACTER_LENGTH' => 33, 'GEOMCOLLFROMTEXT' => 33, 'GEOMETRYFROMTEXT' => 33, 'JSON_MERGE_PATCH' => 33, 'NUMINTERIORRINGS' => 33, 'ST_INTERIORRINGN' => 33, 'ST_MLINEFROMTEXT' => 33, 'ST_MPOINTFROMWKB' => 33, 'ST_MPOLYFROMTEXT' => 33, 'ST_NUMGEOMETRIES' => 33, 'ST_POINTFROMTEXT' => 33, 'ST_SYMDIFFERENCE' => 33, 'JSON_ARRAY_APPEND' => 33, 'JSON_ARRAY_INSERT' => 33, 'JSON_STORAGE_FREE' => 33, 'JSON_STORAGE_SIZE' => 33, 'LINESTRINGFROMWKB' => 33, 'MULTIPOINTFROMWKB' => 33, 'RELEASE_ALL_LOCKS' => 33, 'ST_LATFROMGEOHASH' => 33, 'ST_MPOINTFROMTEXT' => 33, 'ST_POLYGONFROMWKB' => 33, 'JSON_CONTAINS_PATH' => 33, 'MULTIPOINTFROMTEXT' => 33, 'ST_BUFFER_STRATEGY' => 33, 'ST_DISTANCE_SPHERE' => 33, 'ST_GEOMCOLLFROMTXT' => 33, 'ST_GEOMCOLLFROMWKB' => 33, 'ST_GEOMFROMGEOJSON' => 33, 'ST_LONGFROMGEOHASH' => 33, 'ST_POLYGONFROMTEXT' => 33, 'JSON_MERGE_PRESERVE' => 33, 'MULTIPOLYGONFROMWKB' => 33, 'ST_GEOMCOLLFROMTEXT' => 33, 'ST_GEOMETRYFROMTEXT' => 33, 'ST_NUMINTERIORRINGS' => 33, 'ST_POINTFROMGEOHASH' => 33, 'UNCOMPRESSED_LENGTH' => 33, 'MULTIPOLYGONFROMTEXT' => 33, 'ST_LINESTRINGFROMWKB' => 33, 'ST_MULTIPOINTFROMWKB' => 33, 'ST_MULTIPOINTFROMTEXT' => 33, 'MULTILINESTRINGFROMWKB' => 33, 'ST_MULTIPOLYGONFROMWKB' => 33, 'MULTILINESTRINGFROMTEXT' => 33, 'ST_MULTIPOLYGONFROMTEXT' => 33, 'GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_MULTILINESTRINGFROMWKB' => 33, 'GEOMETRYCOLLECTIONFROMTEXT' => 33, 'ST_MULTILINESTRINGFROMTEXT' => 33, 'VALIDATE_PASSWORD_STRENGTH' => 33, 'WAIT_FOR_EXECUTED_GTID_SET' => 33, 'ST_GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_GEOMETRYCOLLECTIONFROMTEXT' => 33, 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS' => 33, 'IF' => 35, 'IN' => 35, 'MOD' => 35, 'LEFT' => 35, 'MATCH' => 35, 'RIGHT' => 35, 'EXISTS' => 35, 'INSERT' => 35, 'REPEAT' => 35, 'SCHEMA' => 35, 'VALUES' => 35, 'CONVERT' => 35, 'DEFAULT' => 35, 'REPLACE' => 35, 'DATABASE' => 35, 'UTC_DATE' => 35, 'UTC_TIME' => 35, 'LOCALTIME' => 35, 'CURRENT_DATE' => 35, 'CURRENT_TIME' => 35, 'CURRENT_USER' => 35, 'UTC_TIMESTAMP' => 35, 'LOCALTIMESTAMP' => 35, 'CURRENT_TIMESTAMP' => 35, 'NOT IN' => 39, 'DATE' => 41, 'TIME' => 41, 'YEAR' => 41, 'POINT' => 41, 'POLYGON' => 41, 'TIMESTAMP' => 41, 'LINESTRING' => 41, 'MULTILINESTRING' => 41, 'GEOMETRYCOLLECTION' => 41, 'CHAR' => 43, 'BINARY' => 43, 'INTERVAL' => 43);
    }
    /**
     * Context for MySQL 8.0.
     *
     * @category   Contexts
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ContextMySql80000 extends \PhpMyAdmin\SqlParser\Context
    {
        /**
         * List of keywords.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * @var array
         */
        public static $KEYWORDS = array('AT' => 1, 'DO' => 1, 'IO' => 1, 'NO' => 1, 'XA' => 1, 'ANY' => 1, 'CPU' => 1, 'END' => 1, 'IPC' => 1, 'NDB' => 1, 'NEW' => 1, 'ONE' => 1, 'ROW' => 1, 'XID' => 1, 'BOOL' => 1, 'BYTE' => 1, 'CODE' => 1, 'CUBE' => 1, 'DATA' => 1, 'DISK' => 1, 'ENDS' => 1, 'FAST' => 1, 'FILE' => 1, 'FULL' => 1, 'HASH' => 1, 'HELP' => 1, 'HOST' => 1, 'LAST' => 1, 'LESS' => 1, 'LIST' => 1, 'LOGS' => 1, 'MODE' => 1, 'NAME' => 1, 'NEXT' => 1, 'NONE' => 1, 'ONLY' => 1, 'OPEN' => 1, 'PAGE' => 1, 'PORT' => 1, 'PREV' => 1, 'ROWS' => 1, 'SLOW' => 1, 'SOME' => 1, 'STOP' => 1, 'THAN' => 1, 'TYPE' => 1, 'VIEW' => 1, 'WAIT' => 1, 'WORK' => 1, 'X509' => 1, 'AFTER' => 1, 'BEGIN' => 1, 'BLOCK' => 1, 'BTREE' => 1, 'CACHE' => 1, 'CHAIN' => 1, 'CLOSE' => 1, 'ERROR' => 1, 'EVENT' => 1, 'EVERY' => 1, 'FIRST' => 1, 'FIXED' => 1, 'FLUSH' => 1, 'FOUND' => 1, 'HOSTS' => 1, 'LEVEL' => 1, 'LOCAL' => 1, 'LOCKS' => 1, 'MERGE' => 1, 'MUTEX' => 1, 'NAMES' => 1, 'NCHAR' => 1, 'NEVER' => 1, 'OWNER' => 1, 'PHASE' => 1, 'PROXY' => 1, 'QUERY' => 1, 'QUICK' => 1, 'RELAY' => 1, 'RESET' => 1, 'RTREE' => 1, 'SHARE' => 1, 'SLAVE' => 1, 'START' => 1, 'SUPER' => 1, 'SWAPS' => 1, 'TYPES' => 1, 'UNTIL' => 1, 'VALUE' => 1, 'ACTION' => 1, 'ALWAYS' => 1, 'BACKUP' => 1, 'BINLOG' => 1, 'CIPHER' => 1, 'CLIENT' => 1, 'COMMIT' => 1, 'ENABLE' => 1, 'ENGINE' => 1, 'ERRORS' => 1, 'ESCAPE' => 1, 'EVENTS' => 1, 'EXPIRE' => 1, 'EXPORT' => 1, 'FAULTS' => 1, 'FIELDS' => 1, 'FILTER' => 1, 'GLOBAL' => 1, 'GRANTS' => 1, 'IMPORT' => 1, 'ISSUER' => 1, 'LEAVES' => 1, 'MASTER' => 1, 'MEDIUM' => 1, 'MEMORY' => 1, 'MODIFY' => 1, 'NUMBER' => 1, 'OFFSET' => 1, 'PARSER' => 1, 'PLUGIN' => 1, 'RELOAD' => 1, 'REMOVE' => 1, 'REPAIR' => 1, 'RESUME' => 1, 'ROLLUP' => 1, 'SERVER' => 1, 'SIGNED' => 1, 'SIMPLE' => 1, 'SOCKET' => 1, 'SONAME' => 1, 'SOUNDS' => 1, 'SOURCE' => 1, 'STARTS' => 1, 'STATUS' => 1, 'STRING' => 1, 'TABLES' => 1, 'ACCOUNT' => 1, 'ANALYSE' => 1, 'CHANGED' => 1, 'CHANNEL' => 1, 'COLUMNS' => 1, 'COMMENT' => 1, 'COMPACT' => 1, 'CONTEXT' => 1, 'CURRENT' => 1, 'DEFINER' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DYNAMIC' => 1, 'ENGINES' => 1, 'EXECUTE' => 1, 'FOLLOWS' => 1, 'GENERAL' => 1, 'HANDLER' => 1, 'INDEXES' => 1, 'INSTALL' => 1, 'INVOKER' => 1, 'LOGFILE' => 1, 'MIGRATE' => 1, 'NO_WAIT' => 1, 'OPTIONS' => 1, 'PARTIAL' => 1, 'PERSIST' => 1, 'PLUGINS' => 1, 'PREPARE' => 1, 'PROFILE' => 1, 'REBUILD' => 1, 'RECOVER' => 1, 'RESTORE' => 1, 'RETURNS' => 1, 'ROUTINE' => 1, 'SESSION' => 1, 'STACKED' => 1, 'STORAGE' => 1, 'SUBJECT' => 1, 'SUSPEND' => 1, 'UNICODE' => 1, 'UNKNOWN' => 1, 'UPGRADE' => 1, 'USE_FRM' => 1, 'WITHOUT' => 1, 'WRAPPER' => 1, 'CASCADED' => 1, 'CHECKSUM' => 1, 'DATAFILE' => 1, 'DUMPFILE' => 1, 'EXCHANGE' => 1, 'EXTENDED' => 1, 'FUNCTION' => 1, 'LANGUAGE' => 1, 'MAX_ROWS' => 1, 'MAX_SIZE' => 1, 'MIN_ROWS' => 1, 'NATIONAL' => 1, 'NVARCHAR' => 1, 'PRECEDES' => 1, 'PRESERVE' => 1, 'PROFILES' => 1, 'REDOFILE' => 1, 'RELAYLOG' => 1, 'ROLLBACK' => 1, 'SCHEDULE' => 1, 'SECURITY' => 1, 'SHUTDOWN' => 1, 'SNAPSHOT' => 1, 'SWITCHES' => 1, 'TRIGGERS' => 1, 'UNDOFILE' => 1, 'WARNINGS' => 1, 'AGGREGATE' => 1, 'ALGORITHM' => 1, 'COMMITTED' => 1, 'DIRECTORY' => 1, 'DUPLICATE' => 1, 'EXPANSION' => 1, 'INVISIBLE' => 1, 'IO_THREAD' => 1, 'ISOLATION' => 1, 'NODEGROUP' => 1, 'PACK_KEYS' => 1, 'READ_ONLY' => 1, 'REDUNDANT' => 1, 'SAVEPOINT' => 1, 'SQL_CACHE' => 1, 'TEMPORARY' => 1, 'TEMPTABLE' => 1, 'UNDEFINED' => 1, 'UNINSTALL' => 1, 'VARIABLES' => 1, 'COMPLETION' => 1, 'COMPRESSED' => 1, 'CONCURRENT' => 1, 'CONNECTION' => 1, 'CONSISTENT' => 1, 'DEALLOCATE' => 1, 'IDENTIFIED' => 1, 'MASTER_SSL' => 1, 'NDBCLUSTER' => 1, 'PARTITIONS' => 1, 'PERSISTENT' => 1, 'PLUGIN_DIR' => 1, 'PRIVILEGES' => 1, 'REORGANIZE' => 1, 'REPEATABLE' => 1, 'ROW_FORMAT' => 1, 'SQL_THREAD' => 1, 'TABLESPACE' => 1, 'TABLE_NAME' => 1, 'VALIDATION' => 1, 'COLUMN_NAME' => 1, 'COMPRESSION' => 1, 'CURSOR_NAME' => 1, 'DIAGNOSTICS' => 1, 'EXTENT_SIZE' => 1, 'MASTER_HOST' => 1, 'MASTER_PORT' => 1, 'MASTER_USER' => 1, 'MYSQL_ERRNO' => 1, 'NONBLOCKING' => 1, 'PROCESSLIST' => 1, 'REPLICATION' => 1, 'SCHEMA_NAME' => 1, 'SQL_TSI_DAY' => 1, 'TRANSACTION' => 1, 'UNCOMMITTED' => 1, 'CATALOG_NAME' => 1, 'CLASS_ORIGIN' => 1, 'DEFAULT_AUTH' => 1, 'DES_KEY_FILE' => 1, 'INITIAL_SIZE' => 1, 'MASTER_DELAY' => 1, 'MESSAGE_TEXT' => 1, 'PARTITIONING' => 1, 'PERSIST_ONLY' => 1, 'RELAY_THREAD' => 1, 'SERIALIZABLE' => 1, 'SQL_NO_CACHE' => 1, 'SQL_TSI_HOUR' => 1, 'SQL_TSI_WEEK' => 1, 'SQL_TSI_YEAR' => 1, 'SUBPARTITION' => 1, 'COLUMN_FORMAT' => 1, 'INSERT_METHOD' => 1, 'MASTER_SSL_CA' => 1, 'RELAY_LOG_POS' => 1, 'SQL_TSI_MONTH' => 1, 'SUBPARTITIONS' => 1, 'AUTO_INCREMENT' => 1, 'AVG_ROW_LENGTH' => 1, 'KEY_BLOCK_SIZE' => 1, 'MASTER_LOG_POS' => 1, 'MASTER_SSL_CRL' => 1, 'MASTER_SSL_KEY' => 1, 'RELAY_LOG_FILE' => 1, 'SQL_TSI_MINUTE' => 1, 'SQL_TSI_SECOND' => 1, 'TABLE_CHECKSUM' => 1, 'USER_RESOURCES' => 1, 'AUTOEXTEND_SIZE' => 1, 'CONSTRAINT_NAME' => 1, 'DELAY_KEY_WRITE' => 1, 'FILE_BLOCK_SIZE' => 1, 'MASTER_LOG_FILE' => 1, 'MASTER_PASSWORD' => 1, 'MASTER_SSL_CERT' => 1, 'PARSE_GCOL_EXPR' => 1, 'REPLICATE_DO_DB' => 1, 'SQL_AFTER_GTIDS' => 1, 'SQL_TSI_QUARTER' => 1, 'SUBCLASS_ORIGIN' => 1, 'MASTER_SERVER_ID' => 1, 'REDO_BUFFER_SIZE' => 1, 'SQL_BEFORE_GTIDS' => 1, 'STATS_PERSISTENT' => 1, 'UNDO_BUFFER_SIZE' => 1, 'CONSTRAINT_SCHEMA' => 1, 'GROUP_REPLICATION' => 1, 'IGNORE_SERVER_IDS' => 1, 'MASTER_SSL_CAPATH' => 1, 'MASTER_SSL_CIPHER' => 1, 'RETURNED_SQLSTATE' => 1, 'SQL_BUFFER_RESULT' => 1, 'STATS_AUTO_RECALC' => 1, 'CONSTRAINT_CATALOG' => 1, 'MASTER_RETRY_COUNT' => 1, 'MASTER_SSL_CRLPATH' => 1, 'MAX_STATEMENT_TIME' => 1, 'REPLICATE_DO_TABLE' => 1, 'SQL_AFTER_MTS_GAPS' => 1, 'STATS_SAMPLE_PAGES' => 1, 'REPLICATE_IGNORE_DB' => 1, 'MASTER_AUTO_POSITION' => 1, 'MASTER_CONNECT_RETRY' => 1, 'MAX_QUERIES_PER_HOUR' => 1, 'MAX_UPDATES_PER_HOUR' => 1, 'MAX_USER_CONNECTIONS' => 1, 'REPLICATE_REWRITE_DB' => 1, 'REPLICATE_IGNORE_TABLE' => 1, 'MASTER_HEARTBEAT_PERIOD' => 1, 'REPLICATE_WILD_DO_TABLE' => 1, 'MAX_CONNECTIONS_PER_HOUR' => 1, 'REPLICATE_WILD_IGNORE_TABLE' => 1, 'AS' => 3, 'BY' => 3, 'IS' => 3, 'ON' => 3, 'OR' => 3, 'TO' => 3, 'ADD' => 3, 'ALL' => 3, 'AND' => 3, 'ASC' => 3, 'DEC' => 3, 'DIV' => 3, 'FOR' => 3, 'GET' => 3, 'NOT' => 3, 'OUT' => 3, 'SQL' => 3, 'SSL' => 3, 'USE' => 3, 'XOR' => 3, 'BOTH' => 3, 'CALL' => 3, 'CASE' => 3, 'DESC' => 3, 'DROP' => 3, 'DUAL' => 3, 'EACH' => 3, 'ELSE' => 3, 'EXIT' => 3, 'FROM' => 3, 'INT1' => 3, 'INT2' => 3, 'INT3' => 3, 'INT4' => 3, 'INT8' => 3, 'INTO' => 3, 'JOIN' => 3, 'KEYS' => 3, 'KILL' => 3, 'LIKE' => 3, 'LOAD' => 3, 'LOCK' => 3, 'LONG' => 3, 'LOOP' => 3, 'NULL' => 3, 'READ' => 3, 'SHOW' => 3, 'THEN' => 3, 'TRUE' => 3, 'UNDO' => 3, 'WHEN' => 3, 'WITH' => 3, 'ALTER' => 3, 'CHECK' => 3, 'CROSS' => 3, 'FALSE' => 3, 'FETCH' => 3, 'FORCE' => 3, 'GRANT' => 3, 'GROUP' => 3, 'INNER' => 3, 'INOUT' => 3, 'LEAVE' => 3, 'LIMIT' => 3, 'LINES' => 3, 'ORDER' => 3, 'OUTER' => 3, 'PURGE' => 3, 'RANGE' => 3, 'READS' => 3, 'RLIKE' => 3, 'TABLE' => 3, 'UNION' => 3, 'USAGE' => 3, 'USING' => 3, 'WHERE' => 3, 'WHILE' => 3, 'WRITE' => 3, 'BEFORE' => 3, 'CHANGE' => 3, 'COLUMN' => 3, 'CREATE' => 3, 'CURSOR' => 3, 'DELETE' => 3, 'ELSEIF' => 3, 'FLOAT4' => 3, 'FLOAT8' => 3, 'HAVING' => 3, 'IGNORE' => 3, 'INFILE' => 3, 'LINEAR' => 3, 'OPTION' => 3, 'REGEXP' => 3, 'RENAME' => 3, 'RETURN' => 3, 'REVOKE' => 3, 'SELECT' => 3, 'SIGNAL' => 3, 'STORED' => 3, 'UNLOCK' => 3, 'UPDATE' => 3, 'ANALYZE' => 3, 'BETWEEN' => 3, 'CASCADE' => 3, 'COLLATE' => 3, 'DECLARE' => 3, 'DELAYED' => 3, 'ESCAPED' => 3, 'EXPLAIN' => 3, 'FOREIGN' => 3, 'ITERATE' => 3, 'LEADING' => 3, 'NATURAL' => 3, 'OUTFILE' => 3, 'PRIMARY' => 3, 'RELEASE' => 3, 'REQUIRE' => 3, 'SCHEMAS' => 3, 'TRIGGER' => 3, 'VARYING' => 3, 'VIRTUAL' => 3, 'CONTINUE' => 3, 'DAY_HOUR' => 3, 'DESCRIBE' => 3, 'DISTINCT' => 3, 'ENCLOSED' => 3, 'MAXVALUE' => 3, 'MODIFIES' => 3, 'OPTIMIZE' => 3, 'RESIGNAL' => 3, 'RESTRICT' => 3, 'SPECIFIC' => 3, 'SQLSTATE' => 3, 'STARTING' => 3, 'TRAILING' => 3, 'UNSIGNED' => 3, 'ZEROFILL' => 3, 'CONDITION' => 3, 'DATABASES' => 3, 'GENERATED' => 3, 'MIDDLEINT' => 3, 'PARTITION' => 3, 'PRECISION' => 3, 'PROCEDURE' => 3, 'SENSITIVE' => 3, 'SEPARATOR' => 3, 'ACCESSIBLE' => 3, 'ASENSITIVE' => 3, 'CONSTRAINT' => 3, 'DAY_MINUTE' => 3, 'DAY_SECOND' => 3, 'OPTIONALLY' => 3, 'READ_WRITE' => 3, 'REFERENCES' => 3, 'SQLWARNING' => 3, 'TERMINATED' => 3, 'YEAR_MONTH' => 3, 'DISTINCTROW' => 3, 'HOUR_MINUTE' => 3, 'HOUR_SECOND' => 3, 'INSENSITIVE' => 3, 'MASTER_BIND' => 3, 'LOW_PRIORITY' => 3, 'SQLEXCEPTION' => 3, 'VARCHARACTER' => 3, 'DETERMINISTIC' => 3, 'HIGH_PRIORITY' => 3, 'MINUTE_SECOND' => 3, 'STRAIGHT_JOIN' => 3, 'IO_AFTER_GTIDS' => 3, 'SQL_BIG_RESULT' => 3, 'DAY_MICROSECOND' => 3, 'IO_BEFORE_GTIDS' => 3, 'OPTIMIZER_COSTS' => 3, 'HOUR_MICROSECOND' => 3, 'SQL_SMALL_RESULT' => 3, 'MINUTE_MICROSECOND' => 3, 'NO_WRITE_TO_BINLOG' => 3, 'SECOND_MICROSECOND' => 3, 'SQL_CALC_FOUND_ROWS' => 3, 'MASTER_SSL_VERIFY_SERVER_CERT' => 3, 'GROUP BY' => 7, 'NOT NULL' => 7, 'ORDER BY' => 7, 'SET NULL' => 7, 'AND CHAIN' => 7, 'FULL JOIN' => 7, 'IF EXISTS' => 7, 'LEFT JOIN' => 7, 'LESS THAN' => 7, 'LOAD DATA' => 7, 'NO ACTION' => 7, 'ON DELETE' => 7, 'ON UPDATE' => 7, 'UNION ALL' => 7, 'CROSS JOIN' => 7, 'ESCAPED BY' => 7, 'FOR UPDATE' => 7, 'INNER JOIN' => 7, 'LINEAR KEY' => 7, 'NO RELEASE' => 7, 'OR REPLACE' => 7, 'RIGHT JOIN' => 7, 'ENCLOSED BY' => 7, 'LINEAR HASH' => 7, 'STARTING BY' => 7, 'AND NO CHAIN' => 7, 'FOR EACH ROW' => 7, 'NATURAL JOIN' => 7, 'PARTITION BY' => 7, 'SET PASSWORD' => 7, 'SQL SECURITY' => 7, 'CHARACTER SET' => 7, 'IF NOT EXISTS' => 7, 'TERMINATED BY' => 7, 'DATA DIRECTORY' => 7, 'UNION DISTINCT' => 7, 'DEFAULT CHARSET' => 7, 'DEFAULT COLLATE' => 7, 'FULL OUTER JOIN' => 7, 'INDEX DIRECTORY' => 7, 'LEFT OUTER JOIN' => 7, 'SUBPARTITION BY' => 7, 'GENERATED ALWAYS' => 7, 'RIGHT OUTER JOIN' => 7, 'NATURAL LEFT JOIN' => 7, 'START TRANSACTION' => 7, 'LOCK IN SHARE MODE' => 7, 'NATURAL RIGHT JOIN' => 7, 'SELECT TRANSACTION' => 7, 'DEFAULT CHARACTER SET' => 7, 'NATURAL LEFT OUTER JOIN' => 7, 'NATURAL RIGHT OUTER JOIN' => 7, 'WITH CONSISTENT SNAPSHOT' => 7, 'BIT' => 9, 'XML' => 9, 'ENUM' => 9, 'JSON' => 9, 'TEXT' => 9, 'ARRAY' => 9, 'SERIAL' => 9, 'BOOLEAN' => 9, 'DATETIME' => 9, 'GEOMETRY' => 9, 'MULTISET' => 9, 'MULTILINEPOINT' => 9, 'MULTILINEPOLYGON' => 9, 'INT' => 11, 'SET' => 11, 'BLOB' => 11, 'REAL' => 11, 'FLOAT' => 11, 'BIGINT' => 11, 'DOUBLE' => 11, 'DECIMAL' => 11, 'INTEGER' => 11, 'NUMERIC' => 11, 'TINYINT' => 11, 'VARCHAR' => 11, 'LONGBLOB' => 11, 'LONGTEXT' => 11, 'SMALLINT' => 11, 'TINYBLOB' => 11, 'TINYTEXT' => 11, 'CHARACTER' => 11, 'MEDIUMINT' => 11, 'VARBINARY' => 11, 'MEDIUMBLOB' => 11, 'MEDIUMTEXT' => 11, 'BINARY VARYING' => 15, 'KEY' => 19, 'INDEX' => 19, 'UNIQUE' => 19, 'SPATIAL' => 19, 'FULLTEXT' => 19, 'INDEX KEY' => 23, 'UNIQUE KEY' => 23, 'FOREIGN KEY' => 23, 'PRIMARY KEY' => 23, 'SPATIAL KEY' => 23, 'FULLTEXT KEY' => 23, 'UNIQUE INDEX' => 23, 'SPATIAL INDEX' => 23, 'FULLTEXT INDEX' => 23, 'X' => 33, 'Y' => 33, 'LN' => 33, 'PI' => 33, 'ABS' => 33, 'AVG' => 33, 'BIN' => 33, 'COS' => 33, 'COT' => 33, 'DAY' => 33, 'ELT' => 33, 'EXP' => 33, 'HEX' => 33, 'LOG' => 33, 'MAX' => 33, 'MD5' => 33, 'MID' => 33, 'MIN' => 33, 'NOW' => 33, 'OCT' => 33, 'ORD' => 33, 'POW' => 33, 'SHA' => 33, 'SIN' => 33, 'STD' => 33, 'SUM' => 33, 'TAN' => 33, 'ACOS' => 33, 'AREA' => 33, 'ASIN' => 33, 'ATAN' => 33, 'CAST' => 33, 'CEIL' => 33, 'CONV' => 33, 'HOUR' => 33, 'LOG2' => 33, 'LPAD' => 33, 'RAND' => 33, 'RPAD' => 33, 'SHA1' => 33, 'SHA2' => 33, 'SIGN' => 33, 'SQRT' => 33, 'SRID' => 33, 'ST_X' => 33, 'ST_Y' => 33, 'TRIM' => 33, 'USER' => 33, 'UUID' => 33, 'WEEK' => 33, 'ASCII' => 33, 'ASWKB' => 33, 'ASWKT' => 33, 'ATAN2' => 33, 'COUNT' => 33, 'CRC32' => 33, 'FIELD' => 33, 'FLOOR' => 33, 'INSTR' => 33, 'LCASE' => 33, 'LEAST' => 33, 'LOG10' => 33, 'LOWER' => 33, 'LTRIM' => 33, 'MONTH' => 33, 'POWER' => 33, 'QUOTE' => 33, 'ROUND' => 33, 'RTRIM' => 33, 'SLEEP' => 33, 'SPACE' => 33, 'UCASE' => 33, 'UNHEX' => 33, 'UPPER' => 33, 'ASTEXT' => 33, 'BIT_OR' => 33, 'BUFFER' => 33, 'CONCAT' => 33, 'DECODE' => 33, 'ENCODE' => 33, 'EQUALS' => 33, 'FORMAT' => 33, 'IFNULL' => 33, 'ISNULL' => 33, 'LENGTH' => 33, 'LOCATE' => 33, 'MINUTE' => 33, 'NULLIF' => 33, 'POINTN' => 33, 'SECOND' => 33, 'STDDEV' => 33, 'STRCMP' => 33, 'SUBSTR' => 33, 'WITHIN' => 33, 'ADDDATE' => 33, 'ADDTIME' => 33, 'AGAINST' => 33, 'BIT_AND' => 33, 'BIT_XOR' => 33, 'CEILING' => 33, 'CHARSET' => 33, 'CROSSES' => 33, 'CURDATE' => 33, 'CURTIME' => 33, 'DAYNAME' => 33, 'DEGREES' => 33, 'ENCRYPT' => 33, 'EXTRACT' => 33, 'GLENGTH' => 33, 'ISEMPTY' => 33, 'IS_IPV4' => 33, 'IS_IPV6' => 33, 'IS_UUID' => 33, 'QUARTER' => 33, 'RADIANS' => 33, 'REVERSE' => 33, 'SOUNDEX' => 33, 'ST_AREA' => 33, 'ST_SRID' => 33, 'SUBDATE' => 33, 'SUBTIME' => 33, 'SYSDATE' => 33, 'TOUCHES' => 33, 'TO_DAYS' => 33, 'VAR_POP' => 33, 'VERSION' => 33, 'WEEKDAY' => 33, 'ASBINARY' => 33, 'CENTROID' => 33, 'COALESCE' => 33, 'COMPRESS' => 33, 'CONTAINS' => 33, 'DATEDIFF' => 33, 'DATE_ADD' => 33, 'DATE_SUB' => 33, 'DISJOINT' => 33, 'DISTANCE' => 33, 'ENDPOINT' => 33, 'ENVELOPE' => 33, 'GET_LOCK' => 33, 'GREATEST' => 33, 'ISCLOSED' => 33, 'ISSIMPLE' => 33, 'JSON_SET' => 33, 'MAKEDATE' => 33, 'MAKETIME' => 33, 'MAKE_SET' => 33, 'MBREQUAL' => 33, 'OVERLAPS' => 33, 'PASSWORD' => 33, 'POSITION' => 33, 'ST_ASWKB' => 33, 'ST_ASWKT' => 33, 'ST_UNION' => 33, 'TIMEDIFF' => 33, 'TRUNCATE' => 33, 'VARIANCE' => 33, 'VAR_SAMP' => 33, 'YEARWEEK' => 33, 'ANY_VALUE' => 33, 'BENCHMARK' => 33, 'BIT_COUNT' => 33, 'COLLATION' => 33, 'CONCAT_WS' => 33, 'DAYOFWEEK' => 33, 'DAYOFYEAR' => 33, 'DIMENSION' => 33, 'FROM_DAYS' => 33, 'GEOMETRYN' => 33, 'INET_ATON' => 33, 'INET_NTOA' => 33, 'JSON_KEYS' => 33, 'JSON_TYPE' => 33, 'LOAD_FILE' => 33, 'MBRCOVERS' => 33, 'MBREQUALS' => 33, 'MBRWITHIN' => 33, 'MONTHNAME' => 33, 'NUMPOINTS' => 33, 'ROW_COUNT' => 33, 'ST_ASTEXT' => 33, 'ST_BUFFER' => 33, 'ST_EQUALS' => 33, 'ST_LENGTH' => 33, 'ST_POINTN' => 33, 'ST_WITHIN' => 33, 'SUBSTRING' => 33, 'TO_BASE64' => 33, 'UPDATEXML' => 33, 'BIT_LENGTH' => 33, 'CONVERT_TZ' => 33, 'CONVEXHULL' => 33, 'DAYOFMONTH' => 33, 'EXPORT_SET' => 33, 'FOUND_ROWS' => 33, 'GET_FORMAT' => 33, 'INET6_ATON' => 33, 'INET6_NTOA' => 33, 'INTERSECTS' => 33, 'JSON_ARRAY' => 33, 'JSON_DEPTH' => 33, 'JSON_MERGE' => 33, 'JSON_QUOTE' => 33, 'JSON_VALID' => 33, 'MBRTOUCHES' => 33, 'MULTIPOINT' => 33, 'NAME_CONST' => 33, 'PERIOD_ADD' => 33, 'STARTPOINT' => 33, 'STDDEV_POP' => 33, 'ST_CROSSES' => 33, 'ST_GEOHASH' => 33, 'ST_ISEMPTY' => 33, 'ST_ISVALID' => 33, 'ST_TOUCHES' => 33, 'TO_SECONDS' => 33, 'UNCOMPRESS' => 33, 'UUID_SHORT' => 33, 'WEEKOFYEAR' => 33, 'AES_DECRYPT' => 33, 'AES_ENCRYPT' => 33, 'BIN_TO_UUID' => 33, 'CHAR_LENGTH' => 33, 'DATE_FORMAT' => 33, 'DES_DECRYPT' => 33, 'DES_ENCRYPT' => 33, 'FIND_IN_SET' => 33, 'FROM_BASE64' => 33, 'GEOMFROMWKB' => 33, 'GTID_SUBSET' => 33, 'JSON_INSERT' => 33, 'JSON_LENGTH' => 33, 'JSON_OBJECT' => 33, 'JSON_PRETTY' => 33, 'JSON_REMOVE' => 33, 'JSON_SEARCH' => 33, 'LINEFROMWKB' => 33, 'MBRCONTAINS' => 33, 'MBRDISJOINT' => 33, 'MBROVERLAPS' => 33, 'MICROSECOND' => 33, 'PERIOD_DIFF' => 33, 'POLYFROMWKB' => 33, 'SEC_TO_TIME' => 33, 'STDDEV_SAMP' => 33, 'STR_TO_DATE' => 33, 'ST_ASBINARY' => 33, 'ST_CENTROID' => 33, 'ST_CONTAINS' => 33, 'ST_DISJOINT' => 33, 'ST_DISTANCE' => 33, 'ST_ENDPOINT' => 33, 'ST_ENVELOPE' => 33, 'ST_ISCLOSED' => 33, 'ST_ISSIMPLE' => 33, 'ST_OVERLAPS' => 33, 'ST_SIMPLIFY' => 33, 'ST_VALIDATE' => 33, 'SYSTEM_USER' => 33, 'TIME_FORMAT' => 33, 'TIME_TO_SEC' => 33, 'UUID_TO_BIN' => 33, 'COERCIBILITY' => 33, 'EXTERIORRING' => 33, 'EXTRACTVALUE' => 33, 'GEOMETRYTYPE' => 33, 'GEOMFROMTEXT' => 33, 'GROUP_CONCAT' => 33, 'IS_FREE_LOCK' => 33, 'IS_USED_LOCK' => 33, 'JSON_EXTRACT' => 33, 'JSON_REPLACE' => 33, 'JSON_UNQUOTE' => 33, 'LINEFROMTEXT' => 33, 'MBRCOVEREDBY' => 33, 'MLINEFROMWKB' => 33, 'MPOLYFROMWKB' => 33, 'MULTIPOLYGON' => 33, 'OCTET_LENGTH' => 33, 'OLD_PASSWORD' => 33, 'POINTFROMWKB' => 33, 'POLYFROMTEXT' => 33, 'RANDOM_BYTES' => 33, 'RELEASE_LOCK' => 33, 'SESSION_USER' => 33, 'ST_ASGEOJSON' => 33, 'ST_DIMENSION' => 33, 'ST_GEOMETRYN' => 33, 'ST_NUMPOINTS' => 33, 'TIMESTAMPADD' => 33, 'CONNECTION_ID' => 33, 'FROM_UNIXTIME' => 33, 'GTID_SUBTRACT' => 33, 'INTERIORRINGN' => 33, 'JSON_CONTAINS' => 33, 'MBRINTERSECTS' => 33, 'MLINEFROMTEXT' => 33, 'MPOINTFROMWKB' => 33, 'MPOLYFROMTEXT' => 33, 'NUMGEOMETRIES' => 33, 'POINTFROMTEXT' => 33, 'ST_CONVEXHULL' => 33, 'ST_DIFFERENCE' => 33, 'ST_INTERSECTS' => 33, 'ST_STARTPOINT' => 33, 'TIMESTAMPDIFF' => 33, 'WEIGHT_STRING' => 33, 'IS_IPV4_COMPAT' => 33, 'IS_IPV4_MAPPED' => 33, 'LAST_INSERT_ID' => 33, 'MPOINTFROMTEXT' => 33, 'POLYGONFROMWKB' => 33, 'ST_GEOMFROMWKB' => 33, 'ST_LINEFROMWKB' => 33, 'ST_POLYFROMWKB' => 33, 'UNIX_TIMESTAMP' => 33, 'GEOMCOLLFROMWKB' => 33, 'MASTER_POS_WAIT' => 33, 'POLYGONFROMTEXT' => 33, 'ST_EXTERIORRING' => 33, 'ST_GEOMETRYTYPE' => 33, 'ST_GEOMFROMTEXT' => 33, 'ST_INTERSECTION' => 33, 'ST_LINEFROMTEXT' => 33, 'ST_MAKEENVELOPE' => 33, 'ST_MLINEFROMWKB' => 33, 'ST_MPOLYFROMWKB' => 33, 'ST_POINTFROMWKB' => 33, 'ST_POLYFROMTEXT' => 33, 'SUBSTRING_INDEX' => 33, 'CHARACTER_LENGTH' => 33, 'GEOMCOLLFROMTEXT' => 33, 'GEOMETRYFROMTEXT' => 33, 'JSON_MERGE_PATCH' => 33, 'NUMINTERIORRINGS' => 33, 'ST_INTERIORRINGN' => 33, 'ST_MLINEFROMTEXT' => 33, 'ST_MPOINTFROMWKB' => 33, 'ST_MPOLYFROMTEXT' => 33, 'ST_NUMGEOMETRIES' => 33, 'ST_POINTFROMTEXT' => 33, 'ST_SYMDIFFERENCE' => 33, 'JSON_ARRAY_APPEND' => 33, 'JSON_ARRAY_INSERT' => 33, 'JSON_STORAGE_FREE' => 33, 'JSON_STORAGE_SIZE' => 33, 'LINESTRINGFROMWKB' => 33, 'MULTIPOINTFROMWKB' => 33, 'RELEASE_ALL_LOCKS' => 33, 'ST_LATFROMGEOHASH' => 33, 'ST_MPOINTFROMTEXT' => 33, 'ST_POLYGONFROMWKB' => 33, 'JSON_CONTAINS_PATH' => 33, 'MULTIPOINTFROMTEXT' => 33, 'ST_BUFFER_STRATEGY' => 33, 'ST_DISTANCE_SPHERE' => 33, 'ST_GEOMCOLLFROMTXT' => 33, 'ST_GEOMCOLLFROMWKB' => 33, 'ST_GEOMFROMGEOJSON' => 33, 'ST_LONGFROMGEOHASH' => 33, 'ST_POLYGONFROMTEXT' => 33, 'JSON_MERGE_PRESERVE' => 33, 'MULTIPOLYGONFROMWKB' => 33, 'ST_GEOMCOLLFROMTEXT' => 33, 'ST_GEOMETRYFROMTEXT' => 33, 'ST_NUMINTERIORRINGS' => 33, 'ST_POINTFROMGEOHASH' => 33, 'UNCOMPRESSED_LENGTH' => 33, 'MULTIPOLYGONFROMTEXT' => 33, 'ST_LINESTRINGFROMWKB' => 33, 'ST_MULTIPOINTFROMWKB' => 33, 'ST_MULTIPOINTFROMTEXT' => 33, 'MULTILINESTRINGFROMWKB' => 33, 'ST_MULTIPOLYGONFROMWKB' => 33, 'MULTILINESTRINGFROMTEXT' => 33, 'ST_MULTIPOLYGONFROMTEXT' => 33, 'GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_MULTILINESTRINGFROMWKB' => 33, 'GEOMETRYCOLLECTIONFROMTEXT' => 33, 'ST_MULTILINESTRINGFROMTEXT' => 33, 'VALIDATE_PASSWORD_STRENGTH' => 33, 'WAIT_FOR_EXECUTED_GTID_SET' => 33, 'ST_GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_GEOMETRYCOLLECTIONFROMTEXT' => 33, 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS' => 33, 'IF' => 35, 'IN' => 35, 'MOD' => 35, 'LEFT' => 35, 'MATCH' => 35, 'RIGHT' => 35, 'EXISTS' => 35, 'INSERT' => 35, 'REPEAT' => 35, 'SCHEMA' => 35, 'VALUES' => 35, 'CONVERT' => 35, 'DEFAULT' => 35, 'REPLACE' => 35, 'DATABASE' => 35, 'UTC_DATE' => 35, 'UTC_TIME' => 35, 'LOCALTIME' => 35, 'CURRENT_DATE' => 35, 'CURRENT_TIME' => 35, 'CURRENT_USER' => 35, 'UTC_TIMESTAMP' => 35, 'LOCALTIMESTAMP' => 35, 'CURRENT_TIMESTAMP' => 35, 'NOT IN' => 39, 'DATE' => 41, 'TIME' => 41, 'YEAR' => 41, 'POINT' => 41, 'POLYGON' => 41, 'TIMESTAMP' => 41, 'LINESTRING' => 41, 'MULTILINESTRING' => 41, 'GEOMETRYCOLLECTION' => 41, 'CHAR' => 43, 'BINARY' => 43, 'INTERVAL' => 43);
    }
    /**
     * Context for MySQL 5.6.
     *
     * @category   Contexts
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ContextMySql50600 extends \PhpMyAdmin\SqlParser\Context
    {
        /**
         * List of keywords.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * @var array
         */
        public static $KEYWORDS = array('AT' => 1, 'DO' => 1, 'IO' => 1, 'NO' => 1, 'XA' => 1, 'ANY' => 1, 'CPU' => 1, 'END' => 1, 'IPC' => 1, 'NDB' => 1, 'NEW' => 1, 'ONE' => 1, 'ROW' => 1, 'BOOL' => 1, 'BYTE' => 1, 'CODE' => 1, 'CUBE' => 1, 'DATA' => 1, 'DISK' => 1, 'ENDS' => 1, 'FAST' => 1, 'FILE' => 1, 'FULL' => 1, 'HASH' => 1, 'HELP' => 1, 'HOST' => 1, 'LAST' => 1, 'LESS' => 1, 'LIST' => 1, 'LOGS' => 1, 'MODE' => 1, 'NAME' => 1, 'NEXT' => 1, 'NONE' => 1, 'ONLY' => 1, 'OPEN' => 1, 'PAGE' => 1, 'PORT' => 1, 'PREV' => 1, 'ROWS' => 1, 'SLOW' => 1, 'SOME' => 1, 'STOP' => 1, 'THAN' => 1, 'TYPE' => 1, 'VIEW' => 1, 'WAIT' => 1, 'WORK' => 1, 'X509' => 1, 'AFTER' => 1, 'BEGIN' => 1, 'BLOCK' => 1, 'BTREE' => 1, 'CACHE' => 1, 'CHAIN' => 1, 'CLOSE' => 1, 'ERROR' => 1, 'EVENT' => 1, 'EVERY' => 1, 'FIRST' => 1, 'FIXED' => 1, 'FLUSH' => 1, 'FOUND' => 1, 'HOSTS' => 1, 'LEVEL' => 1, 'LOCAL' => 1, 'LOCKS' => 1, 'MERGE' => 1, 'MUTEX' => 1, 'NAMES' => 1, 'NCHAR' => 1, 'OWNER' => 1, 'PHASE' => 1, 'PROXY' => 1, 'QUERY' => 1, 'QUICK' => 1, 'RELAY' => 1, 'RESET' => 1, 'RTREE' => 1, 'SHARE' => 1, 'SLAVE' => 1, 'START' => 1, 'SUPER' => 1, 'SWAPS' => 1, 'TYPES' => 1, 'UNTIL' => 1, 'VALUE' => 1, 'ACTION' => 1, 'BACKUP' => 1, 'BINLOG' => 1, 'CIPHER' => 1, 'CLIENT' => 1, 'COMMIT' => 1, 'ENABLE' => 1, 'ENGINE' => 1, 'ERRORS' => 1, 'ESCAPE' => 1, 'EVENTS' => 1, 'EXPIRE' => 1, 'EXPORT' => 1, 'FAULTS' => 1, 'FIELDS' => 1, 'GLOBAL' => 1, 'GRANTS' => 1, 'IMPORT' => 1, 'ISSUER' => 1, 'LEAVES' => 1, 'MASTER' => 1, 'MEDIUM' => 1, 'MEMORY' => 1, 'MODIFY' => 1, 'NUMBER' => 1, 'OFFSET' => 1, 'PARSER' => 1, 'PLUGIN' => 1, 'RELOAD' => 1, 'REMOVE' => 1, 'REPAIR' => 1, 'RESUME' => 1, 'ROLLUP' => 1, 'SERVER' => 1, 'SIGNED' => 1, 'SIMPLE' => 1, 'SOCKET' => 1, 'SONAME' => 1, 'SOUNDS' => 1, 'SOURCE' => 1, 'STARTS' => 1, 'STATUS' => 1, 'STRING' => 1, 'TABLES' => 1, 'ANALYSE' => 1, 'AUTHORS' => 1, 'CHANGED' => 1, 'COLUMNS' => 1, 'COMMENT' => 1, 'COMPACT' => 1, 'CONTEXT' => 1, 'CURRENT' => 1, 'DEFINER' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DYNAMIC' => 1, 'ENGINES' => 1, 'EXECUTE' => 1, 'GENERAL' => 1, 'HANDLER' => 1, 'INDEXES' => 1, 'INSTALL' => 1, 'INVOKER' => 1, 'LOGFILE' => 1, 'MIGRATE' => 1, 'NO_WAIT' => 1, 'OPTIONS' => 1, 'PARTIAL' => 1, 'PLUGINS' => 1, 'PREPARE' => 1, 'PROFILE' => 1, 'REBUILD' => 1, 'RECOVER' => 1, 'RESTORE' => 1, 'RETURNS' => 1, 'ROUTINE' => 1, 'SESSION' => 1, 'STORAGE' => 1, 'SUBJECT' => 1, 'SUSPEND' => 1, 'UNICODE' => 1, 'UNKNOWN' => 1, 'UPGRADE' => 1, 'USE_FRM' => 1, 'VIRTUAL' => 1, 'WRAPPER' => 1, 'CASCADED' => 1, 'CHECKSUM' => 1, 'DATAFILE' => 1, 'DUMPFILE' => 1, 'EXCHANGE' => 1, 'EXTENDED' => 1, 'FUNCTION' => 1, 'LANGUAGE' => 1, 'MAX_ROWS' => 1, 'MAX_SIZE' => 1, 'MIN_ROWS' => 1, 'NATIONAL' => 1, 'NVARCHAR' => 1, 'ONE_SHOT' => 1, 'PRESERVE' => 1, 'PROFILES' => 1, 'REDOFILE' => 1, 'RELAYLOG' => 1, 'ROLLBACK' => 1, 'SCHEDULE' => 1, 'SECURITY' => 1, 'SHUTDOWN' => 1, 'SNAPSHOT' => 1, 'SWITCHES' => 1, 'TRIGGERS' => 1, 'UNDOFILE' => 1, 'WARNINGS' => 1, 'AGGREGATE' => 1, 'ALGORITHM' => 1, 'COMMITTED' => 1, 'DIRECTORY' => 1, 'DUPLICATE' => 1, 'EXPANSION' => 1, 'IO_THREAD' => 1, 'ISOLATION' => 1, 'NODEGROUP' => 1, 'PACK_KEYS' => 1, 'READ_ONLY' => 1, 'REDUNDANT' => 1, 'SAVEPOINT' => 1, 'SQL_CACHE' => 1, 'TEMPORARY' => 1, 'TEMPTABLE' => 1, 'UNDEFINED' => 1, 'UNINSTALL' => 1, 'VARIABLES' => 1, 'COMPLETION' => 1, 'COMPRESSED' => 1, 'CONCURRENT' => 1, 'CONNECTION' => 1, 'CONSISTENT' => 1, 'DEALLOCATE' => 1, 'IDENTIFIED' => 1, 'MASTER_SSL' => 1, 'NDBCLUSTER' => 1, 'PARTITIONS' => 1, 'PERSISTENT' => 1, 'PLUGIN_DIR' => 1, 'PRIVILEGES' => 1, 'REORGANIZE' => 1, 'REPEATABLE' => 1, 'ROW_FORMAT' => 1, 'SQL_THREAD' => 1, 'TABLESPACE' => 1, 'TABLE_NAME' => 1, 'COLUMN_NAME' => 1, 'CURSOR_NAME' => 1, 'DIAGNOSTICS' => 1, 'EXTENT_SIZE' => 1, 'MASTER_HOST' => 1, 'MASTER_PORT' => 1, 'MASTER_USER' => 1, 'MYSQL_ERRNO' => 1, 'PROCESSLIST' => 1, 'REPLICATION' => 1, 'SCHEMA_NAME' => 1, 'SQL_TSI_DAY' => 1, 'TRANSACTION' => 1, 'UNCOMMITTED' => 1, 'CATALOG_NAME' => 1, 'CLASS_ORIGIN' => 1, 'CONTRIBUTORS' => 1, 'DEFAULT_AUTH' => 1, 'DES_KEY_FILE' => 1, 'INITIAL_SIZE' => 1, 'MASTER_DELAY' => 1, 'MESSAGE_TEXT' => 1, 'PARTITIONING' => 1, 'RELAY_THREAD' => 1, 'SERIALIZABLE' => 1, 'SQL_NO_CACHE' => 1, 'SQL_TSI_HOUR' => 1, 'SQL_TSI_WEEK' => 1, 'SQL_TSI_YEAR' => 1, 'SUBPARTITION' => 1, 'COLUMN_FORMAT' => 1, 'INSERT_METHOD' => 1, 'MASTER_SSL_CA' => 1, 'RELAY_LOG_POS' => 1, 'SQL_TSI_MONTH' => 1, 'SUBPARTITIONS' => 1, 'AUTO_INCREMENT' => 1, 'AVG_ROW_LENGTH' => 1, 'KEY_BLOCK_SIZE' => 1, 'MASTER_LOG_POS' => 1, 'MASTER_SSL_CRL' => 1, 'MASTER_SSL_KEY' => 1, 'RELAY_LOG_FILE' => 1, 'SQL_TSI_MINUTE' => 1, 'SQL_TSI_SECOND' => 1, 'TABLE_CHECKSUM' => 1, 'USER_RESOURCES' => 1, 'AUTOEXTEND_SIZE' => 1, 'CONSTRAINT_NAME' => 1, 'DELAY_KEY_WRITE' => 1, 'MASTER_LOG_FILE' => 1, 'MASTER_PASSWORD' => 1, 'MASTER_SSL_CERT' => 1, 'SQL_AFTER_GTIDS' => 1, 'SQL_TSI_QUARTER' => 1, 'SUBCLASS_ORIGIN' => 1, 'MASTER_SERVER_ID' => 1, 'REDO_BUFFER_SIZE' => 1, 'SQL_BEFORE_GTIDS' => 1, 'STATS_PERSISTENT' => 1, 'UNDO_BUFFER_SIZE' => 1, 'CONSTRAINT_SCHEMA' => 1, 'IGNORE_SERVER_IDS' => 1, 'MASTER_SSL_CAPATH' => 1, 'MASTER_SSL_CIPHER' => 1, 'RETURNED_SQLSTATE' => 1, 'SQL_BUFFER_RESULT' => 1, 'STATS_AUTO_RECALC' => 1, 'CONSTRAINT_CATALOG' => 1, 'MASTER_RETRY_COUNT' => 1, 'MASTER_SSL_CRLPATH' => 1, 'SQL_AFTER_MTS_GAPS' => 1, 'STATS_SAMPLE_PAGES' => 1, 'MASTER_AUTO_POSITION' => 1, 'MASTER_CONNECT_RETRY' => 1, 'MAX_QUERIES_PER_HOUR' => 1, 'MAX_UPDATES_PER_HOUR' => 1, 'MAX_USER_CONNECTIONS' => 1, 'MASTER_HEARTBEAT_PERIOD' => 1, 'MAX_CONNECTIONS_PER_HOUR' => 1, 'AS' => 3, 'BY' => 3, 'IS' => 3, 'ON' => 3, 'OR' => 3, 'TO' => 3, 'ADD' => 3, 'ALL' => 3, 'AND' => 3, 'ASC' => 3, 'DEC' => 3, 'DIV' => 3, 'FOR' => 3, 'GET' => 3, 'NOT' => 3, 'OUT' => 3, 'SQL' => 3, 'SSL' => 3, 'USE' => 3, 'XOR' => 3, 'BOTH' => 3, 'CALL' => 3, 'CASE' => 3, 'DESC' => 3, 'DROP' => 3, 'DUAL' => 3, 'EACH' => 3, 'ELSE' => 3, 'EXIT' => 3, 'FROM' => 3, 'INT1' => 3, 'INT2' => 3, 'INT3' => 3, 'INT4' => 3, 'INT8' => 3, 'INTO' => 3, 'JOIN' => 3, 'KEYS' => 3, 'KILL' => 3, 'LIKE' => 3, 'LOAD' => 3, 'LOCK' => 3, 'LONG' => 3, 'LOOP' => 3, 'NULL' => 3, 'READ' => 3, 'SHOW' => 3, 'THEN' => 3, 'TRUE' => 3, 'UNDO' => 3, 'WHEN' => 3, 'WITH' => 3, 'ALTER' => 3, 'CHECK' => 3, 'CROSS' => 3, 'FALSE' => 3, 'FETCH' => 3, 'FORCE' => 3, 'GRANT' => 3, 'GROUP' => 3, 'INNER' => 3, 'INOUT' => 3, 'LEAVE' => 3, 'LIMIT' => 3, 'LINES' => 3, 'ORDER' => 3, 'OUTER' => 3, 'PURGE' => 3, 'RANGE' => 3, 'READS' => 3, 'RLIKE' => 3, 'TABLE' => 3, 'UNION' => 3, 'USAGE' => 3, 'USING' => 3, 'WHERE' => 3, 'WHILE' => 3, 'WRITE' => 3, 'BEFORE' => 3, 'CHANGE' => 3, 'COLUMN' => 3, 'CREATE' => 3, 'CURSOR' => 3, 'DELETE' => 3, 'ELSEIF' => 3, 'FLOAT4' => 3, 'FLOAT8' => 3, 'HAVING' => 3, 'IGNORE' => 3, 'INFILE' => 3, 'LINEAR' => 3, 'OPTION' => 3, 'REGEXP' => 3, 'RENAME' => 3, 'RETURN' => 3, 'REVOKE' => 3, 'SELECT' => 3, 'SIGNAL' => 3, 'UNLOCK' => 3, 'UPDATE' => 3, 'ANALYZE' => 3, 'BETWEEN' => 3, 'CASCADE' => 3, 'COLLATE' => 3, 'DECLARE' => 3, 'DELAYED' => 3, 'ESCAPED' => 3, 'EXPLAIN' => 3, 'FOREIGN' => 3, 'ITERATE' => 3, 'LEADING' => 3, 'NATURAL' => 3, 'OUTFILE' => 3, 'PRIMARY' => 3, 'RELEASE' => 3, 'REQUIRE' => 3, 'SCHEMAS' => 3, 'TRIGGER' => 3, 'VARYING' => 3, 'CONTINUE' => 3, 'DAY_HOUR' => 3, 'DESCRIBE' => 3, 'DISTINCT' => 3, 'ENCLOSED' => 3, 'MAXVALUE' => 3, 'MODIFIES' => 3, 'OPTIMIZE' => 3, 'RESIGNAL' => 3, 'RESTRICT' => 3, 'SPECIFIC' => 3, 'SQLSTATE' => 3, 'STARTING' => 3, 'TRAILING' => 3, 'UNSIGNED' => 3, 'ZEROFILL' => 3, 'CONDITION' => 3, 'DATABASES' => 3, 'MIDDLEINT' => 3, 'PARTITION' => 3, 'PRECISION' => 3, 'PROCEDURE' => 3, 'SENSITIVE' => 3, 'SEPARATOR' => 3, 'ACCESSIBLE' => 3, 'ASENSITIVE' => 3, 'CONSTRAINT' => 3, 'DAY_MINUTE' => 3, 'DAY_SECOND' => 3, 'OPTIONALLY' => 3, 'READ_WRITE' => 3, 'REFERENCES' => 3, 'SQLWARNING' => 3, 'TERMINATED' => 3, 'YEAR_MONTH' => 3, 'DISTINCTROW' => 3, 'HOUR_MINUTE' => 3, 'HOUR_SECOND' => 3, 'INSENSITIVE' => 3, 'MASTER_BIND' => 3, 'LOW_PRIORITY' => 3, 'SQLEXCEPTION' => 3, 'VARCHARACTER' => 3, 'DETERMINISTIC' => 3, 'HIGH_PRIORITY' => 3, 'MINUTE_SECOND' => 3, 'STRAIGHT_JOIN' => 3, 'IO_AFTER_GTIDS' => 3, 'SQL_BIG_RESULT' => 3, 'DAY_MICROSECOND' => 3, 'IO_BEFORE_GTIDS' => 3, 'HOUR_MICROSECOND' => 3, 'SQL_SMALL_RESULT' => 3, 'MINUTE_MICROSECOND' => 3, 'NO_WRITE_TO_BINLOG' => 3, 'SECOND_MICROSECOND' => 3, 'SQL_CALC_FOUND_ROWS' => 3, 'MASTER_SSL_VERIFY_SERVER_CERT' => 3, 'GROUP BY' => 7, 'NOT NULL' => 7, 'ORDER BY' => 7, 'SET NULL' => 7, 'AND CHAIN' => 7, 'FULL JOIN' => 7, 'IF EXISTS' => 7, 'LEFT JOIN' => 7, 'LESS THAN' => 7, 'LOAD DATA' => 7, 'NO ACTION' => 7, 'ON DELETE' => 7, 'ON UPDATE' => 7, 'UNION ALL' => 7, 'CROSS JOIN' => 7, 'ESCAPED BY' => 7, 'FOR UPDATE' => 7, 'INNER JOIN' => 7, 'LINEAR KEY' => 7, 'NO RELEASE' => 7, 'OR REPLACE' => 7, 'RIGHT JOIN' => 7, 'ENCLOSED BY' => 7, 'LINEAR HASH' => 7, 'STARTING BY' => 7, 'AND NO CHAIN' => 7, 'FOR EACH ROW' => 7, 'NATURAL JOIN' => 7, 'PARTITION BY' => 7, 'SET PASSWORD' => 7, 'SQL SECURITY' => 7, 'CHARACTER SET' => 7, 'IF NOT EXISTS' => 7, 'TERMINATED BY' => 7, 'DATA DIRECTORY' => 7, 'UNION DISTINCT' => 7, 'DEFAULT CHARSET' => 7, 'DEFAULT COLLATE' => 7, 'FULL OUTER JOIN' => 7, 'INDEX DIRECTORY' => 7, 'LEFT OUTER JOIN' => 7, 'SUBPARTITION BY' => 7, 'GENERATED ALWAYS' => 7, 'RIGHT OUTER JOIN' => 7, 'NATURAL LEFT JOIN' => 7, 'START TRANSACTION' => 7, 'LOCK IN SHARE MODE' => 7, 'NATURAL RIGHT JOIN' => 7, 'SELECT TRANSACTION' => 7, 'DEFAULT CHARACTER SET' => 7, 'NATURAL LEFT OUTER JOIN' => 7, 'NATURAL RIGHT OUTER JOIN' => 7, 'WITH CONSISTENT SNAPSHOT' => 7, 'BIT' => 9, 'XML' => 9, 'ENUM' => 9, 'JSON' => 9, 'TEXT' => 9, 'ARRAY' => 9, 'SERIAL' => 9, 'BOOLEAN' => 9, 'DATETIME' => 9, 'GEOMETRY' => 9, 'MULTISET' => 9, 'MULTILINEPOINT' => 9, 'MULTILINEPOLYGON' => 9, 'INT' => 11, 'SET' => 11, 'BLOB' => 11, 'REAL' => 11, 'FLOAT' => 11, 'BIGINT' => 11, 'DOUBLE' => 11, 'DECIMAL' => 11, 'INTEGER' => 11, 'NUMERIC' => 11, 'TINYINT' => 11, 'VARCHAR' => 11, 'LONGBLOB' => 11, 'LONGTEXT' => 11, 'SMALLINT' => 11, 'TINYBLOB' => 11, 'TINYTEXT' => 11, 'CHARACTER' => 11, 'MEDIUMINT' => 11, 'VARBINARY' => 11, 'MEDIUMBLOB' => 11, 'MEDIUMTEXT' => 11, 'BINARY VARYING' => 15, 'KEY' => 19, 'INDEX' => 19, 'UNIQUE' => 19, 'SPATIAL' => 19, 'FULLTEXT' => 19, 'INDEX KEY' => 23, 'UNIQUE KEY' => 23, 'FOREIGN KEY' => 23, 'PRIMARY KEY' => 23, 'SPATIAL KEY' => 23, 'FULLTEXT KEY' => 23, 'UNIQUE INDEX' => 23, 'SPATIAL INDEX' => 23, 'FULLTEXT INDEX' => 23, 'X' => 33, 'Y' => 33, 'LN' => 33, 'PI' => 33, 'ABS' => 33, 'AVG' => 33, 'BIN' => 33, 'COS' => 33, 'COT' => 33, 'DAY' => 33, 'ELT' => 33, 'EXP' => 33, 'HEX' => 33, 'LOG' => 33, 'MAX' => 33, 'MD5' => 33, 'MID' => 33, 'MIN' => 33, 'NOW' => 33, 'OCT' => 33, 'ORD' => 33, 'POW' => 33, 'SHA' => 33, 'SIN' => 33, 'STD' => 33, 'SUM' => 33, 'TAN' => 33, 'ACOS' => 33, 'AREA' => 33, 'ASIN' => 33, 'ATAN' => 33, 'CAST' => 33, 'CEIL' => 33, 'CONV' => 33, 'HOUR' => 33, 'LOG2' => 33, 'LPAD' => 33, 'RAND' => 33, 'RPAD' => 33, 'SHA1' => 33, 'SHA2' => 33, 'SIGN' => 33, 'SQRT' => 33, 'SRID' => 33, 'ST_X' => 33, 'ST_Y' => 33, 'TRIM' => 33, 'USER' => 33, 'UUID' => 33, 'WEEK' => 33, 'ASCII' => 33, 'ASWKB' => 33, 'ASWKT' => 33, 'ATAN2' => 33, 'COUNT' => 33, 'CRC32' => 33, 'FIELD' => 33, 'FLOOR' => 33, 'INSTR' => 33, 'LCASE' => 33, 'LEAST' => 33, 'LOG10' => 33, 'LOWER' => 33, 'LTRIM' => 33, 'MONTH' => 33, 'POWER' => 33, 'QUOTE' => 33, 'ROUND' => 33, 'RTRIM' => 33, 'SLEEP' => 33, 'SPACE' => 33, 'UCASE' => 33, 'UNHEX' => 33, 'UPPER' => 33, 'ASTEXT' => 33, 'BIT_OR' => 33, 'BUFFER' => 33, 'CONCAT' => 33, 'DECODE' => 33, 'ENCODE' => 33, 'EQUALS' => 33, 'FORMAT' => 33, 'IFNULL' => 33, 'ISNULL' => 33, 'LENGTH' => 33, 'LOCATE' => 33, 'MINUTE' => 33, 'NULLIF' => 33, 'POINTN' => 33, 'SECOND' => 33, 'STDDEV' => 33, 'STRCMP' => 33, 'SUBSTR' => 33, 'WITHIN' => 33, 'ADDDATE' => 33, 'ADDTIME' => 33, 'AGAINST' => 33, 'BIT_AND' => 33, 'BIT_XOR' => 33, 'CEILING' => 33, 'CHARSET' => 33, 'CROSSES' => 33, 'CURDATE' => 33, 'CURTIME' => 33, 'DAYNAME' => 33, 'DEGREES' => 33, 'ENCRYPT' => 33, 'EXTRACT' => 33, 'GLENGTH' => 33, 'ISEMPTY' => 33, 'IS_IPV4' => 33, 'IS_IPV6' => 33, 'QUARTER' => 33, 'RADIANS' => 33, 'REVERSE' => 33, 'SOUNDEX' => 33, 'ST_AREA' => 33, 'ST_SRID' => 33, 'SUBDATE' => 33, 'SUBTIME' => 33, 'SYSDATE' => 33, 'TOUCHES' => 33, 'TO_DAYS' => 33, 'VAR_POP' => 33, 'VERSION' => 33, 'WEEKDAY' => 33, 'ASBINARY' => 33, 'CENTROID' => 33, 'COALESCE' => 33, 'COMPRESS' => 33, 'CONTAINS' => 33, 'DATEDIFF' => 33, 'DATE_ADD' => 33, 'DATE_SUB' => 33, 'DISJOINT' => 33, 'ENDPOINT' => 33, 'ENVELOPE' => 33, 'GET_LOCK' => 33, 'GREATEST' => 33, 'ISCLOSED' => 33, 'ISSIMPLE' => 33, 'MAKEDATE' => 33, 'MAKETIME' => 33, 'MAKE_SET' => 33, 'MBREQUAL' => 33, 'OVERLAPS' => 33, 'PASSWORD' => 33, 'POSITION' => 33, 'ST_ASWKB' => 33, 'ST_ASWKT' => 33, 'ST_UNION' => 33, 'TIMEDIFF' => 33, 'TRUNCATE' => 33, 'VARIANCE' => 33, 'VAR_SAMP' => 33, 'YEARWEEK' => 33, 'BENCHMARK' => 33, 'BIT_COUNT' => 33, 'COLLATION' => 33, 'CONCAT_WS' => 33, 'DAYOFWEEK' => 33, 'DAYOFYEAR' => 33, 'DIMENSION' => 33, 'FROM_DAYS' => 33, 'GEOMETRYN' => 33, 'INET_ATON' => 33, 'INET_NTOA' => 33, 'LOAD_FILE' => 33, 'MBRWITHIN' => 33, 'MONTHNAME' => 33, 'NUMPOINTS' => 33, 'ROW_COUNT' => 33, 'ST_ASTEXT' => 33, 'ST_BUFFER' => 33, 'ST_EQUALS' => 33, 'ST_POINTN' => 33, 'ST_WITHIN' => 33, 'SUBSTRING' => 33, 'TO_BASE64' => 33, 'UPDATEXML' => 33, 'BIT_LENGTH' => 33, 'CONVERT_TZ' => 33, 'DAYOFMONTH' => 33, 'EXPORT_SET' => 33, 'FOUND_ROWS' => 33, 'GET_FORMAT' => 33, 'INET6_ATON' => 33, 'INET6_NTOA' => 33, 'INTERSECTS' => 33, 'MBRTOUCHES' => 33, 'MULTIPOINT' => 33, 'NAME_CONST' => 33, 'PERIOD_ADD' => 33, 'STARTPOINT' => 33, 'STDDEV_POP' => 33, 'ST_CROSSES' => 33, 'ST_ISEMPTY' => 33, 'ST_TOUCHES' => 33, 'TO_SECONDS' => 33, 'UNCOMPRESS' => 33, 'UUID_SHORT' => 33, 'WEEKOFYEAR' => 33, 'AES_DECRYPT' => 33, 'AES_ENCRYPT' => 33, 'CHAR_LENGTH' => 33, 'DATE_FORMAT' => 33, 'DES_DECRYPT' => 33, 'DES_ENCRYPT' => 33, 'FIND_IN_SET' => 33, 'FROM_BASE64' => 33, 'GEOMFROMWKB' => 33, 'GTID_SUBSET' => 33, 'LINEFROMWKB' => 33, 'MBRCONTAINS' => 33, 'MBRDISJOINT' => 33, 'MBROVERLAPS' => 33, 'MICROSECOND' => 33, 'PERIOD_DIFF' => 33, 'POLYFROMWKB' => 33, 'SEC_TO_TIME' => 33, 'STDDEV_SAMP' => 33, 'STR_TO_DATE' => 33, 'ST_ASBINARY' => 33, 'ST_CENTROID' => 33, 'ST_CONTAINS' => 33, 'ST_DISJOINT' => 33, 'ST_DISTANCE' => 33, 'ST_ENDPOINT' => 33, 'ST_ENVELOPE' => 33, 'ST_ISCLOSED' => 33, 'ST_ISSIMPLE' => 33, 'ST_OVERLAPS' => 33, 'SYSTEM_USER' => 33, 'TIME_FORMAT' => 33, 'TIME_TO_SEC' => 33, 'COERCIBILITY' => 33, 'EXTERIORRING' => 33, 'EXTRACTVALUE' => 33, 'GEOMETRYTYPE' => 33, 'GEOMFROMTEXT' => 33, 'GROUP_CONCAT' => 33, 'IS_FREE_LOCK' => 33, 'IS_USED_LOCK' => 33, 'LINEFROMTEXT' => 33, 'MLINEFROMWKB' => 33, 'MPOLYFROMWKB' => 33, 'MULTIPOLYGON' => 33, 'OCTET_LENGTH' => 33, 'OLD_PASSWORD' => 33, 'POINTFROMWKB' => 33, 'POLYFROMTEXT' => 33, 'RANDOM_BYTES' => 33, 'RELEASE_LOCK' => 33, 'SESSION_USER' => 33, 'ST_DIMENSION' => 33, 'ST_GEOMETRYN' => 33, 'ST_NUMPOINTS' => 33, 'TIMESTAMPADD' => 33, 'CONNECTION_ID' => 33, 'CREATE_DIGEST' => 33, 'FROM_UNIXTIME' => 33, 'GTID_SUBTRACT' => 33, 'INTERIORRINGN' => 33, 'MBRINTERSECTS' => 33, 'MLINEFROMTEXT' => 33, 'MPOINTFROMWKB' => 33, 'MPOLYFROMTEXT' => 33, 'NUMGEOMETRIES' => 33, 'POINTFROMTEXT' => 33, 'ST_DIFFERENCE' => 33, 'ST_INTERSECTS' => 33, 'ST_STARTPOINT' => 33, 'TIMESTAMPDIFF' => 33, 'WEIGHT_STRING' => 33, 'IS_IPV4_COMPAT' => 33, 'IS_IPV4_MAPPED' => 33, 'LAST_INSERT_ID' => 33, 'MPOINTFROMTEXT' => 33, 'POLYGONFROMWKB' => 33, 'ST_GEOMFROMWKB' => 33, 'ST_LINEFROMWKB' => 33, 'ST_POLYFROMWKB' => 33, 'UNIX_TIMESTAMP' => 33, 'ASYMMETRIC_SIGN' => 33, 'GEOMCOLLFROMWKB' => 33, 'MASTER_POS_WAIT' => 33, 'POLYGONFROMTEXT' => 33, 'ST_EXTERIORRING' => 33, 'ST_GEOMETRYTYPE' => 33, 'ST_GEOMFROMTEXT' => 33, 'ST_INTERSECTION' => 33, 'ST_LINEFROMTEXT' => 33, 'ST_POINTFROMWKB' => 33, 'ST_POLYFROMTEXT' => 33, 'SUBSTRING_INDEX' => 33, 'CHARACTER_LENGTH' => 33, 'GEOMCOLLFROMTEXT' => 33, 'GEOMETRYFROMTEXT' => 33, 'NUMINTERIORRINGS' => 33, 'ST_INTERIORRINGN' => 33, 'ST_NUMGEOMETRIES' => 33, 'ST_POINTFROMTEXT' => 33, 'ST_SYMDIFFERENCE' => 33, 'ASYMMETRIC_DERIVE' => 33, 'ASYMMETRIC_VERIFY' => 33, 'LINESTRINGFROMWKB' => 33, 'MULTIPOINTFROMWKB' => 33, 'ST_POLYGONFROMWKB' => 33, 'ASYMMETRIC_DECRYPT' => 33, 'ASYMMETRIC_ENCRYPT' => 33, 'MULTIPOINTFROMTEXT' => 33, 'ST_GEOMCOLLFROMTXT' => 33, 'ST_GEOMCOLLFROMWKB' => 33, 'ST_POLYGONFROMTEXT' => 33, 'MULTIPOLYGONFROMWKB' => 33, 'ST_GEOMCOLLFROMTEXT' => 33, 'ST_GEOMETRYFROMTEXT' => 33, 'ST_NUMINTERIORRINGS' => 33, 'UNCOMPRESSED_LENGTH' => 33, 'CREATE_DH_PARAMETERS' => 33, 'MULTIPOLYGONFROMTEXT' => 33, 'ST_LINESTRINGFROMWKB' => 33, 'MULTILINESTRINGFROMWKB' => 33, 'MULTILINESTRINGFROMTEXT' => 33, 'CREATE_ASYMMETRIC_PUB_KEY' => 33, 'GEOMETRYCOLLECTIONFROMWKB' => 33, 'CREATE_ASYMMETRIC_PRIV_KEY' => 33, 'GEOMETRYCOLLECTIONFROMTEXT' => 33, 'VALIDATE_PASSWORD_STRENGTH' => 33, 'SQL_THREAD_WAIT_AFTER_GTIDS' => 33, 'ST_GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_GEOMETRYCOLLECTIONFROMTEXT' => 33, 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS' => 33, 'IF' => 35, 'IN' => 35, 'MOD' => 35, 'LEFT' => 35, 'MATCH' => 35, 'RIGHT' => 35, 'EXISTS' => 35, 'INSERT' => 35, 'REPEAT' => 35, 'SCHEMA' => 35, 'VALUES' => 35, 'CONVERT' => 35, 'DEFAULT' => 35, 'REPLACE' => 35, 'DATABASE' => 35, 'UTC_DATE' => 35, 'UTC_TIME' => 35, 'LOCALTIME' => 35, 'CURRENT_DATE' => 35, 'CURRENT_TIME' => 35, 'CURRENT_USER' => 35, 'UTC_TIMESTAMP' => 35, 'LOCALTIMESTAMP' => 35, 'CURRENT_TIMESTAMP' => 35, 'NOT IN' => 39, 'DATE' => 41, 'TIME' => 41, 'YEAR' => 41, 'POINT' => 41, 'POLYGON' => 41, 'TIMESTAMP' => 41, 'LINESTRING' => 41, 'MULTILINESTRING' => 41, 'GEOMETRYCOLLECTION' => 41, 'CHAR' => 43, 'BINARY' => 43, 'INTERVAL' => 43);
    }
    /**
     * Context for MySQL 5.0.
     *
     * @category   Contexts
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ContextMySql50000 extends \PhpMyAdmin\SqlParser\Context
    {
        /**
         * List of keywords.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * @var array
         */
        public static $KEYWORDS = array('DO' => 1, 'IO' => 1, 'NO' => 1, 'XA' => 1, 'ANY' => 1, 'BDB' => 1, 'CPU' => 1, 'END' => 1, 'IPC' => 1, 'NDB' => 1, 'NEW' => 1, 'ONE' => 1, 'ROW' => 1, 'BOOL' => 1, 'BYTE' => 1, 'CODE' => 1, 'CUBE' => 1, 'DATA' => 1, 'FAST' => 1, 'FILE' => 1, 'FULL' => 1, 'HASH' => 1, 'HELP' => 1, 'LAST' => 1, 'LOGS' => 1, 'MODE' => 1, 'NAME' => 1, 'NEXT' => 1, 'NONE' => 1, 'OPEN' => 1, 'PAGE' => 1, 'PREV' => 1, 'ROWS' => 1, 'SOME' => 1, 'STOP' => 1, 'TYPE' => 1, 'VIEW' => 1, 'WORK' => 1, 'X509' => 1, 'AFTER' => 1, 'BEGIN' => 1, 'BLOCK' => 1, 'BTREE' => 1, 'CACHE' => 1, 'CHAIN' => 1, 'CLOSE' => 1, 'FIRST' => 1, 'FIXED' => 1, 'FLUSH' => 1, 'FOUND' => 1, 'HOSTS' => 1, 'LEVEL' => 1, 'LOCAL' => 1, 'LOCKS' => 1, 'MERGE' => 1, 'MUTEX' => 1, 'NAMES' => 1, 'NCHAR' => 1, 'PHASE' => 1, 'QUERY' => 1, 'QUICK' => 1, 'RAID0' => 1, 'RESET' => 1, 'RTREE' => 1, 'SHARE' => 1, 'SLAVE' => 1, 'START' => 1, 'SUPER' => 1, 'SWAPS' => 1, 'TYPES' => 1, 'UNTIL' => 1, 'VALUE' => 1, 'ACTION' => 1, 'BACKUP' => 1, 'BINLOG' => 1, 'CIPHER' => 1, 'CLIENT' => 1, 'COMMIT' => 1, 'ENABLE' => 1, 'ENGINE' => 1, 'ERRORS' => 1, 'ESCAPE' => 1, 'EVENTS' => 1, 'FAULTS' => 1, 'FIELDS' => 1, 'GLOBAL' => 1, 'GRANTS' => 1, 'IMPORT' => 1, 'INNODB' => 1, 'ISSUER' => 1, 'LEAVES' => 1, 'MASTER' => 1, 'MEDIUM' => 1, 'MEMORY' => 1, 'MODIFY' => 1, 'OFFSET' => 1, 'RELOAD' => 1, 'REPAIR' => 1, 'RESUME' => 1, 'ROLLUP' => 1, 'SIGNED' => 1, 'SIMPLE' => 1, 'SOUNDS' => 1, 'SOURCE' => 1, 'STATUS' => 1, 'STRING' => 1, 'TABLES' => 1, 'CHANGED' => 1, 'COLUMNS' => 1, 'COMMENT' => 1, 'COMPACT' => 1, 'CONTEXT' => 1, 'DEFINER' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DYNAMIC' => 1, 'ENGINES' => 1, 'EXECUTE' => 1, 'HANDLER' => 1, 'INDEXES' => 1, 'INVOKER' => 1, 'MIGRATE' => 1, 'PARTIAL' => 1, 'PREPARE' => 1, 'PROFILE' => 1, 'RECOVER' => 1, 'RESTORE' => 1, 'RETURNS' => 1, 'ROUTINE' => 1, 'SESSION' => 1, 'STORAGE' => 1, 'STRIPED' => 1, 'SUBJECT' => 1, 'SUSPEND' => 1, 'UNICODE' => 1, 'UNKNOWN' => 1, 'UPGRADE' => 1, 'USE_FRM' => 1, 'VIRTUAL' => 1, 'CASCADED' => 1, 'CHECKSUM' => 1, 'DUMPFILE' => 1, 'EXTENDED' => 1, 'FUNCTION' => 1, 'INNOBASE' => 1, 'LANGUAGE' => 1, 'MAX_ROWS' => 1, 'MIN_ROWS' => 1, 'NATIONAL' => 1, 'NVARCHAR' => 1, 'ONE_SHOT' => 1, 'PROFILES' => 1, 'ROLLBACK' => 1, 'SECURITY' => 1, 'SHUTDOWN' => 1, 'SNAPSHOT' => 1, 'SWITCHES' => 1, 'TRIGGERS' => 1, 'WARNINGS' => 1, 'AGGREGATE' => 1, 'ALGORITHM' => 1, 'COMMITTED' => 1, 'DIRECTORY' => 1, 'DUPLICATE' => 1, 'EXPANSION' => 1, 'IO_THREAD' => 1, 'ISOLATION' => 1, 'PACK_KEYS' => 1, 'RAID_TYPE' => 1, 'REDUNDANT' => 1, 'SAVEPOINT' => 1, 'SQL_CACHE' => 1, 'TEMPORARY' => 1, 'TEMPTABLE' => 1, 'UNDEFINED' => 1, 'VARIABLES' => 1, 'BERKELEYDB' => 1, 'COMPRESSED' => 1, 'CONCURRENT' => 1, 'CONNECTION' => 1, 'CONSISTENT' => 1, 'DEALLOCATE' => 1, 'IDENTIFIED' => 1, 'MASTER_SSL' => 1, 'NDBCLUSTER' => 1, 'PARTITIONS' => 1, 'PERSISTENT' => 1, 'PRIVILEGES' => 1, 'REPEATABLE' => 1, 'ROW_FORMAT' => 1, 'SQL_THREAD' => 1, 'TABLESPACE' => 1, 'FRAC_SECOND' => 1, 'MASTER_HOST' => 1, 'MASTER_PORT' => 1, 'MASTER_USER' => 1, 'PROCESSLIST' => 1, 'RAID_CHUNKS' => 1, 'REPLICATION' => 1, 'SQL_TSI_DAY' => 1, 'TRANSACTION' => 1, 'UNCOMMITTED' => 1, 'DES_KEY_FILE' => 1, 'RELAY_THREAD' => 1, 'SERIALIZABLE' => 1, 'SQL_NO_CACHE' => 1, 'SQL_TSI_HOUR' => 1, 'SQL_TSI_WEEK' => 1, 'SQL_TSI_YEAR' => 1, 'INSERT_METHOD' => 1, 'MASTER_SSL_CA' => 1, 'RELAY_LOG_POS' => 1, 'SQL_TSI_MONTH' => 1, 'SUBPARTITIONS' => 1, 'AUTO_INCREMENT' => 1, 'AVG_ROW_LENGTH' => 1, 'MASTER_LOG_POS' => 1, 'MASTER_SSL_KEY' => 1, 'RAID_CHUNKSIZE' => 1, 'RELAY_LOG_FILE' => 1, 'SQL_TSI_MINUTE' => 1, 'SQL_TSI_SECOND' => 1, 'USER_RESOURCES' => 1, 'DELAY_KEY_WRITE' => 1, 'MASTER_LOG_FILE' => 1, 'MASTER_PASSWORD' => 1, 'MASTER_SSL_CERT' => 1, 'SQL_TSI_QUARTER' => 1, 'MASTER_SERVER_ID' => 1, 'MASTER_SSL_CAPATH' => 1, 'MASTER_SSL_CIPHER' => 1, 'SQL_BUFFER_RESULT' => 1, 'SQL_TSI_FRAC_SECOND' => 1, 'MASTER_CONNECT_RETRY' => 1, 'MAX_QUERIES_PER_HOUR' => 1, 'MAX_UPDATES_PER_HOUR' => 1, 'MAX_USER_CONNECTIONS' => 1, 'MAX_CONNECTIONS_PER_HOUR' => 1, 'AS' => 3, 'BY' => 3, 'IS' => 3, 'ON' => 3, 'OR' => 3, 'TO' => 3, 'ADD' => 3, 'ALL' => 3, 'AND' => 3, 'ASC' => 3, 'DEC' => 3, 'DIV' => 3, 'FOR' => 3, 'NOT' => 3, 'OUT' => 3, 'SQL' => 3, 'SSL' => 3, 'USE' => 3, 'XOR' => 3, 'BOTH' => 3, 'CALL' => 3, 'CASE' => 3, 'DESC' => 3, 'DROP' => 3, 'DUAL' => 3, 'EACH' => 3, 'ELSE' => 3, 'EXIT' => 3, 'FROM' => 3, 'INT1' => 3, 'INT2' => 3, 'INT3' => 3, 'INT4' => 3, 'INT8' => 3, 'INTO' => 3, 'JOIN' => 3, 'KEYS' => 3, 'KILL' => 3, 'LIKE' => 3, 'LOAD' => 3, 'LOCK' => 3, 'LONG' => 3, 'LOOP' => 3, 'NULL' => 3, 'READ' => 3, 'SHOW' => 3, 'THEN' => 3, 'TRUE' => 3, 'UNDO' => 3, 'WHEN' => 3, 'WITH' => 3, 'ALTER' => 3, 'CHECK' => 3, 'CROSS' => 3, 'FALSE' => 3, 'FETCH' => 3, 'FORCE' => 3, 'GRANT' => 3, 'GROUP' => 3, 'INNER' => 3, 'INOUT' => 3, 'LEAVE' => 3, 'LIMIT' => 3, 'LINES' => 3, 'ORDER' => 3, 'OUTER' => 3, 'PURGE' => 3, 'READS' => 3, 'RLIKE' => 3, 'TABLE' => 3, 'UNION' => 3, 'USAGE' => 3, 'USING' => 3, 'WHERE' => 3, 'WHILE' => 3, 'WRITE' => 3, 'BEFORE' => 3, 'CHANGE' => 3, 'COLUMN' => 3, 'CREATE' => 3, 'CURSOR' => 3, 'DELETE' => 3, 'ELSEIF' => 3, 'FLOAT4' => 3, 'FLOAT8' => 3, 'HAVING' => 3, 'IGNORE' => 3, 'INFILE' => 3, 'OPTION' => 3, 'REGEXP' => 3, 'RENAME' => 3, 'RETURN' => 3, 'REVOKE' => 3, 'SELECT' => 3, 'SONAME' => 3, 'UNLOCK' => 3, 'UPDATE' => 3, 'ANALYZE' => 3, 'BETWEEN' => 3, 'CASCADE' => 3, 'COLLATE' => 3, 'DECLARE' => 3, 'DELAYED' => 3, 'ESCAPED' => 3, 'EXPLAIN' => 3, 'FOREIGN' => 3, 'ITERATE' => 3, 'LEADING' => 3, 'NATURAL' => 3, 'OUTFILE' => 3, 'PRIMARY' => 3, 'RELEASE' => 3, 'REQUIRE' => 3, 'SCHEMAS' => 3, 'TRIGGER' => 3, 'VARYING' => 3, 'CONTINUE' => 3, 'DAY_HOUR' => 3, 'DESCRIBE' => 3, 'DISTINCT' => 3, 'ENCLOSED' => 3, 'MODIFIES' => 3, 'OPTIMIZE' => 3, 'RESTRICT' => 3, 'SPECIFIC' => 3, 'SQLSTATE' => 3, 'STARTING' => 3, 'TRAILING' => 3, 'UNSIGNED' => 3, 'ZEROFILL' => 3, 'CONDITION' => 3, 'DATABASES' => 3, 'MIDDLEINT' => 3, 'PRECISION' => 3, 'PROCEDURE' => 3, 'SENSITIVE' => 3, 'SEPARATOR' => 3, 'ASENSITIVE' => 3, 'CONSTRAINT' => 3, 'DAY_MINUTE' => 3, 'DAY_SECOND' => 3, 'OPTIONALLY' => 3, 'REFERENCES' => 3, 'SQLWARNING' => 3, 'TERMINATED' => 3, 'YEAR_MONTH' => 3, 'DISTINCTROW' => 3, 'HOUR_MINUTE' => 3, 'HOUR_SECOND' => 3, 'INSENSITIVE' => 3, 'LOW_PRIORITY' => 3, 'SQLEXCEPTION' => 3, 'VARCHARACTER' => 3, 'DETERMINISTIC' => 3, 'HIGH_PRIORITY' => 3, 'MINUTE_SECOND' => 3, 'STRAIGHT_JOIN' => 3, 'SQL_BIG_RESULT' => 3, 'DAY_MICROSECOND' => 3, 'HOUR_MICROSECOND' => 3, 'SQL_SMALL_RESULT' => 3, 'MINUTE_MICROSECOND' => 3, 'NO_WRITE_TO_BINLOG' => 3, 'SECOND_MICROSECOND' => 3, 'SQL_CALC_FOUND_ROWS' => 3, 'GROUP BY' => 7, 'NOT NULL' => 7, 'ORDER BY' => 7, 'SET NULL' => 7, 'AND CHAIN' => 7, 'FULL JOIN' => 7, 'IF EXISTS' => 7, 'LEFT JOIN' => 7, 'LESS THAN' => 7, 'LOAD DATA' => 7, 'NO ACTION' => 7, 'ON DELETE' => 7, 'ON UPDATE' => 7, 'UNION ALL' => 7, 'CROSS JOIN' => 7, 'ESCAPED BY' => 7, 'FOR UPDATE' => 7, 'INNER JOIN' => 7, 'LINEAR KEY' => 7, 'NO RELEASE' => 7, 'OR REPLACE' => 7, 'RIGHT JOIN' => 7, 'ENCLOSED BY' => 7, 'LINEAR HASH' => 7, 'STARTING BY' => 7, 'AND NO CHAIN' => 7, 'FOR EACH ROW' => 7, 'NATURAL JOIN' => 7, 'PARTITION BY' => 7, 'SET PASSWORD' => 7, 'SQL SECURITY' => 7, 'CHARACTER SET' => 7, 'IF NOT EXISTS' => 7, 'TERMINATED BY' => 7, 'DATA DIRECTORY' => 7, 'UNION DISTINCT' => 7, 'DEFAULT CHARSET' => 7, 'DEFAULT COLLATE' => 7, 'FULL OUTER JOIN' => 7, 'INDEX DIRECTORY' => 7, 'LEFT OUTER JOIN' => 7, 'SUBPARTITION BY' => 7, 'GENERATED ALWAYS' => 7, 'RIGHT OUTER JOIN' => 7, 'NATURAL LEFT JOIN' => 7, 'START TRANSACTION' => 7, 'LOCK IN SHARE MODE' => 7, 'NATURAL RIGHT JOIN' => 7, 'SELECT TRANSACTION' => 7, 'DEFAULT CHARACTER SET' => 7, 'NATURAL LEFT OUTER JOIN' => 7, 'NATURAL RIGHT OUTER JOIN' => 7, 'WITH CONSISTENT SNAPSHOT' => 7, 'BIT' => 9, 'XML' => 9, 'ENUM' => 9, 'JSON' => 9, 'TEXT' => 9, 'ARRAY' => 9, 'SERIAL' => 9, 'BOOLEAN' => 9, 'DATETIME' => 9, 'GEOMETRY' => 9, 'MULTISET' => 9, 'MULTILINEPOINT' => 9, 'MULTILINEPOLYGON' => 9, 'INT' => 11, 'SET' => 11, 'BLOB' => 11, 'REAL' => 11, 'FLOAT' => 11, 'BIGINT' => 11, 'DOUBLE' => 11, 'DECIMAL' => 11, 'INTEGER' => 11, 'NUMERIC' => 11, 'TINYINT' => 11, 'VARCHAR' => 11, 'LONGBLOB' => 11, 'LONGTEXT' => 11, 'SMALLINT' => 11, 'TINYBLOB' => 11, 'TINYTEXT' => 11, 'CHARACTER' => 11, 'MEDIUMINT' => 11, 'VARBINARY' => 11, 'MEDIUMBLOB' => 11, 'MEDIUMTEXT' => 11, 'BINARY VARYING' => 15, 'KEY' => 19, 'INDEX' => 19, 'UNIQUE' => 19, 'SPATIAL' => 19, 'FULLTEXT' => 19, 'INDEX KEY' => 23, 'UNIQUE KEY' => 23, 'FOREIGN KEY' => 23, 'PRIMARY KEY' => 23, 'SPATIAL KEY' => 23, 'FULLTEXT KEY' => 23, 'UNIQUE INDEX' => 23, 'SPATIAL INDEX' => 23, 'FULLTEXT INDEX' => 23, 'X' => 33, 'Y' => 33, 'LN' => 33, 'PI' => 33, 'ABS' => 33, 'AVG' => 33, 'BIN' => 33, 'COS' => 33, 'COT' => 33, 'DAY' => 33, 'ELT' => 33, 'EXP' => 33, 'HEX' => 33, 'LOG' => 33, 'MAX' => 33, 'MD5' => 33, 'MID' => 33, 'MIN' => 33, 'NOW' => 33, 'OCT' => 33, 'ORD' => 33, 'POW' => 33, 'SIN' => 33, 'STD' => 33, 'SUM' => 33, 'TAN' => 33, 'ACOS' => 33, 'AREA' => 33, 'ASIN' => 33, 'ATAN' => 33, 'CAST' => 33, 'CEIL' => 33, 'CONV' => 33, 'HOUR' => 33, 'LOG2' => 33, 'LPAD' => 33, 'RAND' => 33, 'RPAD' => 33, 'SHA1' => 33, 'SIGN' => 33, 'SQRT' => 33, 'SRID' => 33, 'TRIM' => 33, 'USER' => 33, 'UUID' => 33, 'WEEK' => 33, 'ASCII' => 33, 'ATAN2' => 33, 'COUNT' => 33, 'CRC32' => 33, 'FIELD' => 33, 'FLOOR' => 33, 'INSTR' => 33, 'LCASE' => 33, 'LEAST' => 33, 'LOG10' => 33, 'LOWER' => 33, 'LTRIM' => 33, 'MONTH' => 33, 'POWER' => 33, 'QUOTE' => 33, 'ROUND' => 33, 'RTRIM' => 33, 'SLEEP' => 33, 'SPACE' => 33, 'UCASE' => 33, 'UNHEX' => 33, 'UPPER' => 33, 'ASTEXT' => 33, 'BIT_OR' => 33, 'CONCAT' => 33, 'DECODE' => 33, 'ENCODE' => 33, 'EQUALS' => 33, 'FORMAT' => 33, 'IFNULL' => 33, 'ISNULL' => 33, 'LENGTH' => 33, 'LOCATE' => 33, 'MINUTE' => 33, 'NULLIF' => 33, 'POINTN' => 33, 'SECOND' => 33, 'STDDEV' => 33, 'STRCMP' => 33, 'SUBSTR' => 33, 'WITHIN' => 33, 'ADDDATE' => 33, 'ADDTIME' => 33, 'AGAINST' => 33, 'BIT_AND' => 33, 'BIT_XOR' => 33, 'CEILING' => 33, 'CHARSET' => 33, 'CROSSES' => 33, 'CURDATE' => 33, 'CURTIME' => 33, 'DAYNAME' => 33, 'DEGREES' => 33, 'ENCRYPT' => 33, 'EXTRACT' => 33, 'GLENGTH' => 33, 'ISEMPTY' => 33, 'QUARTER' => 33, 'RADIANS' => 33, 'REVERSE' => 33, 'SOUNDEX' => 33, 'SUBDATE' => 33, 'SUBTIME' => 33, 'SYSDATE' => 33, 'TOUCHES' => 33, 'TO_DAYS' => 33, 'VAR_POP' => 33, 'VERSION' => 33, 'WEEKDAY' => 33, 'ASBINARY' => 33, 'CENTROID' => 33, 'COALESCE' => 33, 'COMPRESS' => 33, 'CONTAINS' => 33, 'DATEDIFF' => 33, 'DATE_ADD' => 33, 'DATE_SUB' => 33, 'DISJOINT' => 33, 'ENDPOINT' => 33, 'ENVELOPE' => 33, 'GET_LOCK' => 33, 'GREATEST' => 33, 'ISCLOSED' => 33, 'ISSIMPLE' => 33, 'MAKEDATE' => 33, 'MAKETIME' => 33, 'MAKE_SET' => 33, 'MBREQUAL' => 33, 'OVERLAPS' => 33, 'PASSWORD' => 33, 'POSITION' => 33, 'TIMEDIFF' => 33, 'TRUNCATE' => 33, 'VARIANCE' => 33, 'VAR_SAMP' => 33, 'YEARWEEK' => 33, 'BENCHMARK' => 33, 'BIT_COUNT' => 33, 'COLLATION' => 33, 'CONCAT_WS' => 33, 'DAYOFWEEK' => 33, 'DAYOFYEAR' => 33, 'DIMENSION' => 33, 'FROM_DAYS' => 33, 'GEOMETRYN' => 33, 'INET_ATON' => 33, 'INET_NTOA' => 33, 'LOAD_FILE' => 33, 'MBRWITHIN' => 33, 'MONTHNAME' => 33, 'NUMPOINTS' => 33, 'ROW_COUNT' => 33, 'SUBSTRING' => 33, 'BIT_LENGTH' => 33, 'CONVERT_TZ' => 33, 'DAYOFMONTH' => 33, 'EXPORT_SET' => 33, 'FOUND_ROWS' => 33, 'GET_FORMAT' => 33, 'INTERSECTS' => 33, 'MBRTOUCHES' => 33, 'MULTIPOINT' => 33, 'NAME_CONST' => 33, 'PERIOD_ADD' => 33, 'STARTPOINT' => 33, 'STDDEV_POP' => 33, 'UNCOMPRESS' => 33, 'WEEKOFYEAR' => 33, 'AES_DECRYPT' => 33, 'AES_ENCRYPT' => 33, 'CHAR_LENGTH' => 33, 'DATE_FORMAT' => 33, 'DES_DECRYPT' => 33, 'DES_ENCRYPT' => 33, 'FIND_IN_SET' => 33, 'GEOMFROMWKB' => 33, 'LINEFROMWKB' => 33, 'MBRCONTAINS' => 33, 'MBRDISJOINT' => 33, 'MBROVERLAPS' => 33, 'MICROSECOND' => 33, 'PERIOD_DIFF' => 33, 'POLYFROMWKB' => 33, 'SEC_TO_TIME' => 33, 'STDDEV_SAMP' => 33, 'STR_TO_DATE' => 33, 'SYSTEM_USER' => 33, 'TIME_FORMAT' => 33, 'TIME_TO_SEC' => 33, 'COERCIBILITY' => 33, 'EXTERIORRING' => 33, 'GEOMETRYTYPE' => 33, 'GEOMFROMTEXT' => 33, 'GROUP_CONCAT' => 33, 'IS_FREE_LOCK' => 33, 'IS_USED_LOCK' => 33, 'LINEFROMTEXT' => 33, 'MLINEFROMWKB' => 33, 'MPOLYFROMWKB' => 33, 'MULTIPOLYGON' => 33, 'OCTET_LENGTH' => 33, 'OLD_PASSWORD' => 33, 'POINTFROMWKB' => 33, 'POLYFROMTEXT' => 33, 'RELEASE_LOCK' => 33, 'SESSION_USER' => 33, 'TIMESTAMPADD' => 33, 'CONNECTION_ID' => 33, 'FROM_UNIXTIME' => 33, 'INTERIORRINGN' => 33, 'MBRINTERSECTS' => 33, 'MLINEFROMTEXT' => 33, 'MPOINTFROMWKB' => 33, 'MPOLYFROMTEXT' => 33, 'NUMGEOMETRIES' => 33, 'POINTFROMTEXT' => 33, 'TIMESTAMPDIFF' => 33, 'LAST_INSERT_ID' => 33, 'MPOINTFROMTEXT' => 33, 'UNIX_TIMESTAMP' => 33, 'GEOMCOLLFROMWKB' => 33, 'MASTER_POS_WAIT' => 33, 'SUBSTRING_INDEX' => 33, 'CHARACTER_LENGTH' => 33, 'GEOMCOLLFROMTEXT' => 33, 'NUMINTERIORRINGS' => 33, 'UNCOMPRESSED_LENGTH' => 33, 'IF' => 35, 'IN' => 35, 'MOD' => 35, 'LEFT' => 35, 'MATCH' => 35, 'RIGHT' => 35, 'EXISTS' => 35, 'INSERT' => 35, 'REPEAT' => 35, 'SCHEMA' => 35, 'VALUES' => 35, 'CONVERT' => 35, 'DEFAULT' => 35, 'REPLACE' => 35, 'DATABASE' => 35, 'UTC_DATE' => 35, 'UTC_TIME' => 35, 'LOCALTIME' => 35, 'CURRENT_DATE' => 35, 'CURRENT_TIME' => 35, 'CURRENT_USER' => 35, 'UTC_TIMESTAMP' => 35, 'LOCALTIMESTAMP' => 35, 'CURRENT_TIMESTAMP' => 35, 'NOT IN' => 39, 'DATE' => 41, 'TIME' => 41, 'YEAR' => 41, 'POINT' => 41, 'POLYGON' => 41, 'TIMESTAMP' => 41, 'LINESTRING' => 41, 'MULTILINESTRING' => 41, 'GEOMETRYCOLLECTION' => 41, 'CHAR' => 43, 'BINARY' => 43, 'INTERVAL' => 43);
    }
    /**
     * Context for MariaDB 10.1.
     *
     * @category   Contexts
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ContextMariaDb100100 extends \PhpMyAdmin\SqlParser\Context
    {
        /**
         * List of keywords.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * @var array
         */
        public static $KEYWORDS = array('AT' => 1, 'DO' => 1, 'IO' => 1, 'NO' => 1, 'XA' => 1, 'ANY' => 1, 'CPU' => 1, 'END' => 1, 'IPC' => 1, 'NDB' => 1, 'NEW' => 1, 'ONE' => 1, 'ROW' => 1, 'XID' => 1, 'BOOL' => 1, 'BYTE' => 1, 'CODE' => 1, 'CUBE' => 1, 'DATA' => 1, 'DISK' => 1, 'ENDS' => 1, 'FAST' => 1, 'FILE' => 1, 'FULL' => 1, 'HASH' => 1, 'HELP' => 1, 'HOST' => 1, 'LAST' => 1, 'LESS' => 1, 'LIST' => 1, 'LOGS' => 1, 'MODE' => 1, 'NAME' => 1, 'NEXT' => 1, 'NONE' => 1, 'ONLY' => 1, 'OPEN' => 1, 'PAGE' => 1, 'PORT' => 1, 'PREV' => 1, 'ROWS' => 1, 'SLOW' => 1, 'SOME' => 1, 'STOP' => 1, 'THAN' => 1, 'TYPE' => 1, 'VIEW' => 1, 'WAIT' => 1, 'WORK' => 1, 'X509' => 1, 'AFTER' => 1, 'BEGIN' => 1, 'BLOCK' => 1, 'BTREE' => 1, 'CACHE' => 1, 'CHAIN' => 1, 'CLOSE' => 1, 'ERROR' => 1, 'EVENT' => 1, 'EVERY' => 1, 'FIRST' => 1, 'FIXED' => 1, 'FLUSH' => 1, 'FOUND' => 1, 'HOSTS' => 1, 'LEVEL' => 1, 'LOCAL' => 1, 'LOCKS' => 1, 'MERGE' => 1, 'MUTEX' => 1, 'NAMES' => 1, 'NCHAR' => 1, 'NEVER' => 1, 'OWNER' => 1, 'PHASE' => 1, 'PROXY' => 1, 'QUERY' => 1, 'QUICK' => 1, 'RELAY' => 1, 'RESET' => 1, 'RTREE' => 1, 'SHARE' => 1, 'SLAVE' => 1, 'START' => 1, 'SUPER' => 1, 'SWAPS' => 1, 'TYPES' => 1, 'UNTIL' => 1, 'VALUE' => 1, 'ACTION' => 1, 'ALWAYS' => 1, 'BACKUP' => 1, 'BINLOG' => 1, 'CIPHER' => 1, 'CLIENT' => 1, 'COMMIT' => 1, 'ENABLE' => 1, 'ENGINE' => 1, 'ERRORS' => 1, 'ESCAPE' => 1, 'EVENTS' => 1, 'EXPIRE' => 1, 'EXPORT' => 1, 'FAULTS' => 1, 'FIELDS' => 1, 'FILTER' => 1, 'GLOBAL' => 1, 'GRANTS' => 1, 'IMPORT' => 1, 'ISSUER' => 1, 'LEAVES' => 1, 'MASTER' => 1, 'MEDIUM' => 1, 'MEMORY' => 1, 'MODIFY' => 1, 'NUMBER' => 1, 'OFFSET' => 1, 'PARSER' => 1, 'PLUGIN' => 1, 'RELOAD' => 1, 'REMOVE' => 1, 'REPAIR' => 1, 'RESUME' => 1, 'ROLLUP' => 1, 'SERVER' => 1, 'SIGNED' => 1, 'SIMPLE' => 1, 'SOCKET' => 1, 'SONAME' => 1, 'SOUNDS' => 1, 'SOURCE' => 1, 'STARTS' => 1, 'STATUS' => 1, 'STRING' => 1, 'TABLES' => 1, 'ACCOUNT' => 1, 'ANALYSE' => 1, 'CHANGED' => 1, 'CHANNEL' => 1, 'COLUMNS' => 1, 'COMMENT' => 1, 'COMPACT' => 1, 'CONTEXT' => 1, 'CURRENT' => 1, 'DEFINER' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DYNAMIC' => 1, 'ENGINES' => 1, 'EXECUTE' => 1, 'FOLLOWS' => 1, 'GENERAL' => 1, 'HANDLER' => 1, 'INDEXES' => 1, 'INSTALL' => 1, 'INVOKER' => 1, 'LOGFILE' => 1, 'MIGRATE' => 1, 'NO_WAIT' => 1, 'OPTIONS' => 1, 'PARTIAL' => 1, 'PLUGINS' => 1, 'PREPARE' => 1, 'PROFILE' => 1, 'REBUILD' => 1, 'RECOVER' => 1, 'RESTORE' => 1, 'RETURNS' => 1, 'ROUTINE' => 1, 'SESSION' => 1, 'STACKED' => 1, 'STORAGE' => 1, 'SUBJECT' => 1, 'SUSPEND' => 1, 'UNICODE' => 1, 'UNKNOWN' => 1, 'UPGRADE' => 1, 'USE_FRM' => 1, 'WITHOUT' => 1, 'WRAPPER' => 1, 'CASCADED' => 1, 'CHECKSUM' => 1, 'DATAFILE' => 1, 'DUMPFILE' => 1, 'EXCHANGE' => 1, 'EXTENDED' => 1, 'FUNCTION' => 1, 'LANGUAGE' => 1, 'MAX_ROWS' => 1, 'MAX_SIZE' => 1, 'MIN_ROWS' => 1, 'NATIONAL' => 1, 'NVARCHAR' => 1, 'PRECEDES' => 1, 'PRESERVE' => 1, 'PROFILES' => 1, 'REDOFILE' => 1, 'RELAYLOG' => 1, 'ROLLBACK' => 1, 'SCHEDULE' => 1, 'SECURITY' => 1, 'SHUTDOWN' => 1, 'SNAPSHOT' => 1, 'SWITCHES' => 1, 'TRIGGERS' => 1, 'UNDOFILE' => 1, 'WARNINGS' => 1, 'AGGREGATE' => 1, 'ALGORITHM' => 1, 'COMMITTED' => 1, 'DIRECTORY' => 1, 'DUPLICATE' => 1, 'EXPANSION' => 1, 'IO_THREAD' => 1, 'ISOLATION' => 1, 'NODEGROUP' => 1, 'PACK_KEYS' => 1, 'READ_ONLY' => 1, 'REDUNDANT' => 1, 'SAVEPOINT' => 1, 'SQL_CACHE' => 1, 'TEMPORARY' => 1, 'TEMPTABLE' => 1, 'UNDEFINED' => 1, 'UNINSTALL' => 1, 'VARIABLES' => 1, 'COMPLETION' => 1, 'COMPRESSED' => 1, 'CONCURRENT' => 1, 'CONNECTION' => 1, 'CONSISTENT' => 1, 'DEALLOCATE' => 1, 'IDENTIFIED' => 1, 'MASTER_SSL' => 1, 'NDBCLUSTER' => 1, 'PARTITIONS' => 1, 'PERSISTENT' => 1, 'PLUGIN_DIR' => 1, 'PRIVILEGES' => 1, 'REORGANIZE' => 1, 'REPEATABLE' => 1, 'ROW_FORMAT' => 1, 'SQL_THREAD' => 1, 'TABLESPACE' => 1, 'TABLE_NAME' => 1, 'VALIDATION' => 1, 'COLUMN_NAME' => 1, 'COMPRESSION' => 1, 'CURSOR_NAME' => 1, 'DIAGNOSTICS' => 1, 'EXTENT_SIZE' => 1, 'MASTER_HOST' => 1, 'MASTER_PORT' => 1, 'MASTER_USER' => 1, 'MYSQL_ERRNO' => 1, 'NONBLOCKING' => 1, 'PROCESSLIST' => 1, 'REPLICATION' => 1, 'SCHEMA_NAME' => 1, 'SQL_TSI_DAY' => 1, 'TRANSACTION' => 1, 'UNCOMMITTED' => 1, 'CATALOG_NAME' => 1, 'CLASS_ORIGIN' => 1, 'DEFAULT_AUTH' => 1, 'DES_KEY_FILE' => 1, 'INITIAL_SIZE' => 1, 'MASTER_DELAY' => 1, 'MESSAGE_TEXT' => 1, 'PARTITIONING' => 1, 'RELAY_THREAD' => 1, 'SERIALIZABLE' => 1, 'SQL_NO_CACHE' => 1, 'SQL_TSI_HOUR' => 1, 'SQL_TSI_WEEK' => 1, 'SQL_TSI_YEAR' => 1, 'SUBPARTITION' => 1, 'COLUMN_FORMAT' => 1, 'INSERT_METHOD' => 1, 'MASTER_SSL_CA' => 1, 'RELAY_LOG_POS' => 1, 'SQL_TSI_MONTH' => 1, 'SUBPARTITIONS' => 1, 'AUTO_INCREMENT' => 1, 'AVG_ROW_LENGTH' => 1, 'KEY_BLOCK_SIZE' => 1, 'MASTER_LOG_POS' => 1, 'MASTER_SSL_CRL' => 1, 'MASTER_SSL_KEY' => 1, 'RELAY_LOG_FILE' => 1, 'SQL_TSI_MINUTE' => 1, 'SQL_TSI_SECOND' => 1, 'TABLE_CHECKSUM' => 1, 'USER_RESOURCES' => 1, 'AUTOEXTEND_SIZE' => 1, 'CONSTRAINT_NAME' => 1, 'DELAY_KEY_WRITE' => 1, 'FILE_BLOCK_SIZE' => 1, 'MASTER_LOG_FILE' => 1, 'MASTER_PASSWORD' => 1, 'MASTER_SSL_CERT' => 1, 'PARSE_GCOL_EXPR' => 1, 'REPLICATE_DO_DB' => 1, 'SQL_AFTER_GTIDS' => 1, 'SQL_TSI_QUARTER' => 1, 'SUBCLASS_ORIGIN' => 1, 'MASTER_SERVER_ID' => 1, 'REDO_BUFFER_SIZE' => 1, 'SQL_BEFORE_GTIDS' => 1, 'STATS_PERSISTENT' => 1, 'UNDO_BUFFER_SIZE' => 1, 'CONSTRAINT_SCHEMA' => 1, 'GROUP_REPLICATION' => 1, 'IGNORE_SERVER_IDS' => 1, 'MASTER_SSL_CAPATH' => 1, 'MASTER_SSL_CIPHER' => 1, 'RETURNED_SQLSTATE' => 1, 'SQL_BUFFER_RESULT' => 1, 'STATS_AUTO_RECALC' => 1, 'CONSTRAINT_CATALOG' => 1, 'MASTER_RETRY_COUNT' => 1, 'MASTER_SSL_CRLPATH' => 1, 'MAX_STATEMENT_TIME' => 1, 'REPLICATE_DO_TABLE' => 1, 'SQL_AFTER_MTS_GAPS' => 1, 'STATS_SAMPLE_PAGES' => 1, 'REPLICATE_IGNORE_DB' => 1, 'MASTER_AUTO_POSITION' => 1, 'MASTER_CONNECT_RETRY' => 1, 'MAX_QUERIES_PER_HOUR' => 1, 'MAX_UPDATES_PER_HOUR' => 1, 'MAX_USER_CONNECTIONS' => 1, 'REPLICATE_REWRITE_DB' => 1, 'REPLICATE_IGNORE_TABLE' => 1, 'MASTER_HEARTBEAT_PERIOD' => 1, 'REPLICATE_WILD_DO_TABLE' => 1, 'MAX_CONNECTIONS_PER_HOUR' => 1, 'REPLICATE_WILD_IGNORE_TABLE' => 1, 'AS' => 3, 'BY' => 3, 'IS' => 3, 'ON' => 3, 'OR' => 3, 'TO' => 3, 'ADD' => 3, 'ALL' => 3, 'AND' => 3, 'ASC' => 3, 'DEC' => 3, 'DIV' => 3, 'FOR' => 3, 'GET' => 3, 'NOT' => 3, 'OUT' => 3, 'SQL' => 3, 'SSL' => 3, 'USE' => 3, 'XOR' => 3, 'BOTH' => 3, 'CALL' => 3, 'CASE' => 3, 'DESC' => 3, 'DROP' => 3, 'DUAL' => 3, 'EACH' => 3, 'ELSE' => 3, 'EXIT' => 3, 'FROM' => 3, 'INT1' => 3, 'INT2' => 3, 'INT3' => 3, 'INT4' => 3, 'INT8' => 3, 'INTO' => 3, 'JOIN' => 3, 'KEYS' => 3, 'KILL' => 3, 'LIKE' => 3, 'LOAD' => 3, 'LOCK' => 3, 'LONG' => 3, 'LOOP' => 3, 'NULL' => 3, 'READ' => 3, 'SHOW' => 3, 'THEN' => 3, 'TRUE' => 3, 'UNDO' => 3, 'WHEN' => 3, 'WITH' => 3, 'ALTER' => 3, 'CHECK' => 3, 'CROSS' => 3, 'FALSE' => 3, 'FETCH' => 3, 'FORCE' => 3, 'GRANT' => 3, 'GROUP' => 3, 'INNER' => 3, 'INOUT' => 3, 'LEAVE' => 3, 'LIMIT' => 3, 'LINES' => 3, 'ORDER' => 3, 'OUTER' => 3, 'PURGE' => 3, 'RANGE' => 3, 'READS' => 3, 'RLIKE' => 3, 'TABLE' => 3, 'UNION' => 3, 'USAGE' => 3, 'USING' => 3, 'WHERE' => 3, 'WHILE' => 3, 'WRITE' => 3, 'BEFORE' => 3, 'CHANGE' => 3, 'COLUMN' => 3, 'CREATE' => 3, 'CURSOR' => 3, 'DELETE' => 3, 'ELSEIF' => 3, 'FLOAT4' => 3, 'FLOAT8' => 3, 'HAVING' => 3, 'IGNORE' => 3, 'INFILE' => 3, 'LINEAR' => 3, 'OPTION' => 3, 'REGEXP' => 3, 'RENAME' => 3, 'RETURN' => 3, 'REVOKE' => 3, 'SELECT' => 3, 'SIGNAL' => 3, 'STORED' => 3, 'UNLOCK' => 3, 'UPDATE' => 3, 'ANALYZE' => 3, 'BETWEEN' => 3, 'CASCADE' => 3, 'COLLATE' => 3, 'DECLARE' => 3, 'DELAYED' => 3, 'ESCAPED' => 3, 'EXPLAIN' => 3, 'FOREIGN' => 3, 'ITERATE' => 3, 'LEADING' => 3, 'NATURAL' => 3, 'OUTFILE' => 3, 'PRIMARY' => 3, 'RELEASE' => 3, 'REQUIRE' => 3, 'SCHEMAS' => 3, 'TRIGGER' => 3, 'VARYING' => 3, 'VIRTUAL' => 3, 'CONTINUE' => 3, 'DAY_HOUR' => 3, 'DESCRIBE' => 3, 'DISTINCT' => 3, 'ENCLOSED' => 3, 'MAXVALUE' => 3, 'MODIFIES' => 3, 'OPTIMIZE' => 3, 'RESIGNAL' => 3, 'RESTRICT' => 3, 'SPECIFIC' => 3, 'SQLSTATE' => 3, 'STARTING' => 3, 'TRAILING' => 3, 'UNSIGNED' => 3, 'ZEROFILL' => 3, 'CONDITION' => 3, 'DATABASES' => 3, 'GENERATED' => 3, 'MIDDLEINT' => 3, 'PARTITION' => 3, 'PRECISION' => 3, 'PROCEDURE' => 3, 'SENSITIVE' => 3, 'SEPARATOR' => 3, 'ACCESSIBLE' => 3, 'ASENSITIVE' => 3, 'CONSTRAINT' => 3, 'DAY_MINUTE' => 3, 'DAY_SECOND' => 3, 'OPTIONALLY' => 3, 'READ_WRITE' => 3, 'REFERENCES' => 3, 'SQLWARNING' => 3, 'TERMINATED' => 3, 'YEAR_MONTH' => 3, 'DISTINCTROW' => 3, 'HOUR_MINUTE' => 3, 'HOUR_SECOND' => 3, 'INSENSITIVE' => 3, 'MASTER_BIND' => 3, 'LOW_PRIORITY' => 3, 'SQLEXCEPTION' => 3, 'VARCHARACTER' => 3, 'DETERMINISTIC' => 3, 'HIGH_PRIORITY' => 3, 'MINUTE_SECOND' => 3, 'STRAIGHT_JOIN' => 3, 'IO_AFTER_GTIDS' => 3, 'SQL_BIG_RESULT' => 3, 'DAY_MICROSECOND' => 3, 'IO_BEFORE_GTIDS' => 3, 'OPTIMIZER_COSTS' => 3, 'HOUR_MICROSECOND' => 3, 'SQL_SMALL_RESULT' => 3, 'MINUTE_MICROSECOND' => 3, 'NO_WRITE_TO_BINLOG' => 3, 'SECOND_MICROSECOND' => 3, 'SQL_CALC_FOUND_ROWS' => 3, 'MASTER_SSL_VERIFY_SERVER_CERT' => 3, 'GROUP BY' => 7, 'NOT NULL' => 7, 'ORDER BY' => 7, 'SET NULL' => 7, 'AND CHAIN' => 7, 'FULL JOIN' => 7, 'IF EXISTS' => 7, 'LEFT JOIN' => 7, 'LESS THAN' => 7, 'LOAD DATA' => 7, 'NO ACTION' => 7, 'ON DELETE' => 7, 'ON UPDATE' => 7, 'UNION ALL' => 7, 'CROSS JOIN' => 7, 'ESCAPED BY' => 7, 'FOR UPDATE' => 7, 'INNER JOIN' => 7, 'LINEAR KEY' => 7, 'NO RELEASE' => 7, 'OR REPLACE' => 7, 'RIGHT JOIN' => 7, 'ENCLOSED BY' => 7, 'LINEAR HASH' => 7, 'STARTING BY' => 7, 'AND NO CHAIN' => 7, 'FOR EACH ROW' => 7, 'NATURAL JOIN' => 7, 'PARTITION BY' => 7, 'SET PASSWORD' => 7, 'SQL SECURITY' => 7, 'CHARACTER SET' => 7, 'IF NOT EXISTS' => 7, 'TERMINATED BY' => 7, 'DATA DIRECTORY' => 7, 'UNION DISTINCT' => 7, 'DEFAULT CHARSET' => 7, 'DEFAULT COLLATE' => 7, 'FULL OUTER JOIN' => 7, 'INDEX DIRECTORY' => 7, 'LEFT OUTER JOIN' => 7, 'SUBPARTITION BY' => 7, 'GENERATED ALWAYS' => 7, 'RIGHT OUTER JOIN' => 7, 'NATURAL LEFT JOIN' => 7, 'START TRANSACTION' => 7, 'LOCK IN SHARE MODE' => 7, 'NATURAL RIGHT JOIN' => 7, 'SELECT TRANSACTION' => 7, 'DEFAULT CHARACTER SET' => 7, 'NATURAL LEFT OUTER JOIN' => 7, 'NATURAL RIGHT OUTER JOIN' => 7, 'WITH CONSISTENT SNAPSHOT' => 7, 'BIT' => 9, 'XML' => 9, 'ENUM' => 9, 'JSON' => 9, 'TEXT' => 9, 'ARRAY' => 9, 'SERIAL' => 9, 'BOOLEAN' => 9, 'DATETIME' => 9, 'GEOMETRY' => 9, 'MULTISET' => 9, 'MULTILINEPOINT' => 9, 'MULTILINEPOLYGON' => 9, 'INT' => 11, 'SET' => 11, 'BLOB' => 11, 'REAL' => 11, 'FLOAT' => 11, 'BIGINT' => 11, 'DOUBLE' => 11, 'DECIMAL' => 11, 'INTEGER' => 11, 'NUMERIC' => 11, 'TINYINT' => 11, 'VARCHAR' => 11, 'LONGBLOB' => 11, 'LONGTEXT' => 11, 'SMALLINT' => 11, 'TINYBLOB' => 11, 'TINYTEXT' => 11, 'CHARACTER' => 11, 'MEDIUMINT' => 11, 'VARBINARY' => 11, 'MEDIUMBLOB' => 11, 'MEDIUMTEXT' => 11, 'BINARY VARYING' => 15, 'KEY' => 19, 'INDEX' => 19, 'UNIQUE' => 19, 'SPATIAL' => 19, 'FULLTEXT' => 19, 'INDEX KEY' => 23, 'UNIQUE KEY' => 23, 'FOREIGN KEY' => 23, 'PRIMARY KEY' => 23, 'SPATIAL KEY' => 23, 'FULLTEXT KEY' => 23, 'UNIQUE INDEX' => 23, 'SPATIAL INDEX' => 23, 'FULLTEXT INDEX' => 23, 'X' => 33, 'Y' => 33, 'LN' => 33, 'PI' => 33, 'ABS' => 33, 'AVG' => 33, 'BIN' => 33, 'COS' => 33, 'COT' => 33, 'DAY' => 33, 'ELT' => 33, 'EXP' => 33, 'HEX' => 33, 'LOG' => 33, 'MAX' => 33, 'MD5' => 33, 'MID' => 33, 'MIN' => 33, 'NOW' => 33, 'OCT' => 33, 'ORD' => 33, 'POW' => 33, 'SHA' => 33, 'SIN' => 33, 'STD' => 33, 'SUM' => 33, 'TAN' => 33, 'ACOS' => 33, 'AREA' => 33, 'ASIN' => 33, 'ATAN' => 33, 'CAST' => 33, 'CEIL' => 33, 'CONV' => 33, 'HOUR' => 33, 'LOG2' => 33, 'LPAD' => 33, 'RAND' => 33, 'RPAD' => 33, 'SHA1' => 33, 'SHA2' => 33, 'SIGN' => 33, 'SQRT' => 33, 'SRID' => 33, 'ST_X' => 33, 'ST_Y' => 33, 'TRIM' => 33, 'USER' => 33, 'UUID' => 33, 'WEEK' => 33, 'ASCII' => 33, 'ASWKB' => 33, 'ASWKT' => 33, 'ATAN2' => 33, 'COUNT' => 33, 'CRC32' => 33, 'FIELD' => 33, 'FLOOR' => 33, 'INSTR' => 33, 'LCASE' => 33, 'LEAST' => 33, 'LOG10' => 33, 'LOWER' => 33, 'LTRIM' => 33, 'MONTH' => 33, 'POWER' => 33, 'QUOTE' => 33, 'ROUND' => 33, 'RTRIM' => 33, 'SLEEP' => 33, 'SPACE' => 33, 'UCASE' => 33, 'UNHEX' => 33, 'UPPER' => 33, 'ASTEXT' => 33, 'BIT_OR' => 33, 'BUFFER' => 33, 'CONCAT' => 33, 'DECODE' => 33, 'ENCODE' => 33, 'EQUALS' => 33, 'FORMAT' => 33, 'IFNULL' => 33, 'ISNULL' => 33, 'LENGTH' => 33, 'LOCATE' => 33, 'MINUTE' => 33, 'NULLIF' => 33, 'POINTN' => 33, 'SECOND' => 33, 'STDDEV' => 33, 'STRCMP' => 33, 'SUBSTR' => 33, 'WITHIN' => 33, 'ADDDATE' => 33, 'ADDTIME' => 33, 'AGAINST' => 33, 'BIT_AND' => 33, 'BIT_XOR' => 33, 'CEILING' => 33, 'CHARSET' => 33, 'CROSSES' => 33, 'CURDATE' => 33, 'CURTIME' => 33, 'DAYNAME' => 33, 'DEGREES' => 33, 'ENCRYPT' => 33, 'EXTRACT' => 33, 'GLENGTH' => 33, 'ISEMPTY' => 33, 'IS_IPV4' => 33, 'IS_IPV6' => 33, 'QUARTER' => 33, 'RADIANS' => 33, 'REVERSE' => 33, 'SOUNDEX' => 33, 'ST_AREA' => 33, 'ST_SRID' => 33, 'SUBDATE' => 33, 'SUBTIME' => 33, 'SYSDATE' => 33, 'TOUCHES' => 33, 'TO_DAYS' => 33, 'VAR_POP' => 33, 'VERSION' => 33, 'WEEKDAY' => 33, 'ASBINARY' => 33, 'CENTROID' => 33, 'COALESCE' => 33, 'COMPRESS' => 33, 'CONTAINS' => 33, 'DATEDIFF' => 33, 'DATE_ADD' => 33, 'DATE_SUB' => 33, 'DISJOINT' => 33, 'DISTANCE' => 33, 'ENDPOINT' => 33, 'ENVELOPE' => 33, 'GET_LOCK' => 33, 'GREATEST' => 33, 'ISCLOSED' => 33, 'ISSIMPLE' => 33, 'JSON_SET' => 33, 'MAKEDATE' => 33, 'MAKETIME' => 33, 'MAKE_SET' => 33, 'MBREQUAL' => 33, 'OVERLAPS' => 33, 'PASSWORD' => 33, 'POSITION' => 33, 'ST_ASWKB' => 33, 'ST_ASWKT' => 33, 'ST_UNION' => 33, 'TIMEDIFF' => 33, 'TRUNCATE' => 33, 'VARIANCE' => 33, 'VAR_SAMP' => 33, 'YEARWEEK' => 33, 'ANY_VALUE' => 33, 'BENCHMARK' => 33, 'BIT_COUNT' => 33, 'COLLATION' => 33, 'CONCAT_WS' => 33, 'DAYOFWEEK' => 33, 'DAYOFYEAR' => 33, 'DIMENSION' => 33, 'FROM_DAYS' => 33, 'GEOMETRYN' => 33, 'INET_ATON' => 33, 'INET_NTOA' => 33, 'JSON_KEYS' => 33, 'JSON_TYPE' => 33, 'LOAD_FILE' => 33, 'MBRCOVERS' => 33, 'MBREQUALS' => 33, 'MBRWITHIN' => 33, 'MONTHNAME' => 33, 'NUMPOINTS' => 33, 'ROW_COUNT' => 33, 'ST_ASTEXT' => 33, 'ST_BUFFER' => 33, 'ST_EQUALS' => 33, 'ST_LENGTH' => 33, 'ST_POINTN' => 33, 'ST_WITHIN' => 33, 'SUBSTRING' => 33, 'TO_BASE64' => 33, 'UPDATEXML' => 33, 'BIT_LENGTH' => 33, 'CONVERT_TZ' => 33, 'CONVEXHULL' => 33, 'DAYOFMONTH' => 33, 'EXPORT_SET' => 33, 'FOUND_ROWS' => 33, 'GET_FORMAT' => 33, 'INET6_ATON' => 33, 'INET6_NTOA' => 33, 'INTERSECTS' => 33, 'JSON_ARRAY' => 33, 'JSON_DEPTH' => 33, 'JSON_MERGE' => 33, 'JSON_QUOTE' => 33, 'JSON_VALID' => 33, 'MBRTOUCHES' => 33, 'MULTIPOINT' => 33, 'NAME_CONST' => 33, 'PERIOD_ADD' => 33, 'STARTPOINT' => 33, 'STDDEV_POP' => 33, 'ST_CROSSES' => 33, 'ST_GEOHASH' => 33, 'ST_ISEMPTY' => 33, 'ST_ISVALID' => 33, 'ST_TOUCHES' => 33, 'TO_SECONDS' => 33, 'UNCOMPRESS' => 33, 'UUID_SHORT' => 33, 'WEEKOFYEAR' => 33, 'AES_DECRYPT' => 33, 'AES_ENCRYPT' => 33, 'CHAR_LENGTH' => 33, 'DATE_FORMAT' => 33, 'DES_DECRYPT' => 33, 'DES_ENCRYPT' => 33, 'FIND_IN_SET' => 33, 'FROM_BASE64' => 33, 'GEOMFROMWKB' => 33, 'GTID_SUBSET' => 33, 'JSON_INSERT' => 33, 'JSON_LENGTH' => 33, 'JSON_OBJECT' => 33, 'JSON_PRETTY' => 33, 'JSON_REMOVE' => 33, 'JSON_SEARCH' => 33, 'LINEFROMWKB' => 33, 'MBRCONTAINS' => 33, 'MBRDISJOINT' => 33, 'MBROVERLAPS' => 33, 'MICROSECOND' => 33, 'PERIOD_DIFF' => 33, 'POLYFROMWKB' => 33, 'SEC_TO_TIME' => 33, 'STDDEV_SAMP' => 33, 'STR_TO_DATE' => 33, 'ST_ASBINARY' => 33, 'ST_CENTROID' => 33, 'ST_CONTAINS' => 33, 'ST_DISJOINT' => 33, 'ST_DISTANCE' => 33, 'ST_ENDPOINT' => 33, 'ST_ENVELOPE' => 33, 'ST_ISCLOSED' => 33, 'ST_ISSIMPLE' => 33, 'ST_OVERLAPS' => 33, 'ST_SIMPLIFY' => 33, 'ST_VALIDATE' => 33, 'SYSTEM_USER' => 33, 'TIME_FORMAT' => 33, 'TIME_TO_SEC' => 33, 'COERCIBILITY' => 33, 'EXTERIORRING' => 33, 'EXTRACTVALUE' => 33, 'GEOMETRYTYPE' => 33, 'GEOMFROMTEXT' => 33, 'GROUP_CONCAT' => 33, 'IS_FREE_LOCK' => 33, 'IS_USED_LOCK' => 33, 'JSON_EXTRACT' => 33, 'JSON_REPLACE' => 33, 'JSON_UNQUOTE' => 33, 'LINEFROMTEXT' => 33, 'MBRCOVEREDBY' => 33, 'MLINEFROMWKB' => 33, 'MPOLYFROMWKB' => 33, 'MULTIPOLYGON' => 33, 'OCTET_LENGTH' => 33, 'OLD_PASSWORD' => 33, 'POINTFROMWKB' => 33, 'POLYFROMTEXT' => 33, 'RANDOM_BYTES' => 33, 'RELEASE_LOCK' => 33, 'SESSION_USER' => 33, 'ST_ASGEOJSON' => 33, 'ST_DIMENSION' => 33, 'ST_GEOMETRYN' => 33, 'ST_NUMPOINTS' => 33, 'TIMESTAMPADD' => 33, 'CONNECTION_ID' => 33, 'FROM_UNIXTIME' => 33, 'GTID_SUBTRACT' => 33, 'INTERIORRINGN' => 33, 'JSON_CONTAINS' => 33, 'MBRINTERSECTS' => 33, 'MLINEFROMTEXT' => 33, 'MPOINTFROMWKB' => 33, 'MPOLYFROMTEXT' => 33, 'NUMGEOMETRIES' => 33, 'POINTFROMTEXT' => 33, 'ST_CONVEXHULL' => 33, 'ST_DIFFERENCE' => 33, 'ST_INTERSECTS' => 33, 'ST_STARTPOINT' => 33, 'TIMESTAMPDIFF' => 33, 'WEIGHT_STRING' => 33, 'IS_IPV4_COMPAT' => 33, 'IS_IPV4_MAPPED' => 33, 'LAST_INSERT_ID' => 33, 'MPOINTFROMTEXT' => 33, 'POLYGONFROMWKB' => 33, 'ST_GEOMFROMWKB' => 33, 'ST_LINEFROMWKB' => 33, 'ST_POLYFROMWKB' => 33, 'UNIX_TIMESTAMP' => 33, 'GEOMCOLLFROMWKB' => 33, 'MASTER_POS_WAIT' => 33, 'POLYGONFROMTEXT' => 33, 'ST_EXTERIORRING' => 33, 'ST_GEOMETRYTYPE' => 33, 'ST_GEOMFROMTEXT' => 33, 'ST_INTERSECTION' => 33, 'ST_LINEFROMTEXT' => 33, 'ST_MAKEENVELOPE' => 33, 'ST_MLINEFROMWKB' => 33, 'ST_MPOLYFROMWKB' => 33, 'ST_POINTFROMWKB' => 33, 'ST_POLYFROMTEXT' => 33, 'SUBSTRING_INDEX' => 33, 'CHARACTER_LENGTH' => 33, 'GEOMCOLLFROMTEXT' => 33, 'GEOMETRYFROMTEXT' => 33, 'JSON_MERGE_PATCH' => 33, 'NUMINTERIORRINGS' => 33, 'ST_INTERIORRINGN' => 33, 'ST_MLINEFROMTEXT' => 33, 'ST_MPOINTFROMWKB' => 33, 'ST_MPOLYFROMTEXT' => 33, 'ST_NUMGEOMETRIES' => 33, 'ST_POINTFROMTEXT' => 33, 'ST_SYMDIFFERENCE' => 33, 'JSON_ARRAY_APPEND' => 33, 'JSON_ARRAY_INSERT' => 33, 'JSON_STORAGE_FREE' => 33, 'JSON_STORAGE_SIZE' => 33, 'LINESTRINGFROMWKB' => 33, 'MULTIPOINTFROMWKB' => 33, 'RELEASE_ALL_LOCKS' => 33, 'ST_LATFROMGEOHASH' => 33, 'ST_MPOINTFROMTEXT' => 33, 'ST_POLYGONFROMWKB' => 33, 'JSON_CONTAINS_PATH' => 33, 'MULTIPOINTFROMTEXT' => 33, 'ST_BUFFER_STRATEGY' => 33, 'ST_DISTANCE_SPHERE' => 33, 'ST_GEOMCOLLFROMTXT' => 33, 'ST_GEOMCOLLFROMWKB' => 33, 'ST_GEOMFROMGEOJSON' => 33, 'ST_LONGFROMGEOHASH' => 33, 'ST_POLYGONFROMTEXT' => 33, 'JSON_MERGE_PRESERVE' => 33, 'MULTIPOLYGONFROMWKB' => 33, 'ST_GEOMCOLLFROMTEXT' => 33, 'ST_GEOMETRYFROMTEXT' => 33, 'ST_NUMINTERIORRINGS' => 33, 'ST_POINTFROMGEOHASH' => 33, 'UNCOMPRESSED_LENGTH' => 33, 'MULTIPOLYGONFROMTEXT' => 33, 'ST_LINESTRINGFROMWKB' => 33, 'ST_MULTIPOINTFROMWKB' => 33, 'ST_MULTIPOINTFROMTEXT' => 33, 'MULTILINESTRINGFROMWKB' => 33, 'ST_MULTIPOLYGONFROMWKB' => 33, 'MULTILINESTRINGFROMTEXT' => 33, 'ST_MULTIPOLYGONFROMTEXT' => 33, 'GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_MULTILINESTRINGFROMWKB' => 33, 'GEOMETRYCOLLECTIONFROMTEXT' => 33, 'ST_MULTILINESTRINGFROMTEXT' => 33, 'VALIDATE_PASSWORD_STRENGTH' => 33, 'WAIT_FOR_EXECUTED_GTID_SET' => 33, 'ST_GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_GEOMETRYCOLLECTIONFROMTEXT' => 33, 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS' => 33, 'IF' => 35, 'IN' => 35, 'MOD' => 35, 'LEFT' => 35, 'MATCH' => 35, 'RIGHT' => 35, 'EXISTS' => 35, 'INSERT' => 35, 'REPEAT' => 35, 'SCHEMA' => 35, 'VALUES' => 35, 'CONVERT' => 35, 'DEFAULT' => 35, 'REPLACE' => 35, 'DATABASE' => 35, 'UTC_DATE' => 35, 'UTC_TIME' => 35, 'LOCALTIME' => 35, 'CURRENT_DATE' => 35, 'CURRENT_TIME' => 35, 'CURRENT_USER' => 35, 'UTC_TIMESTAMP' => 35, 'LOCALTIMESTAMP' => 35, 'CURRENT_TIMESTAMP' => 35, 'NOT IN' => 39, 'DATE' => 41, 'TIME' => 41, 'YEAR' => 41, 'POINT' => 41, 'POLYGON' => 41, 'TIMESTAMP' => 41, 'LINESTRING' => 41, 'MULTILINESTRING' => 41, 'GEOMETRYCOLLECTION' => 41, 'CHAR' => 43, 'BINARY' => 43, 'INTERVAL' => 43);
    }
    /**
     * Context for MySQL 5.1.
     *
     * @category   Contexts
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ContextMySql50100 extends \PhpMyAdmin\SqlParser\Context
    {
        /**
         * List of keywords.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * @var array
         */
        public static $KEYWORDS = array('AT' => 1, 'DO' => 1, 'IO' => 1, 'NO' => 1, 'XA' => 1, 'ANY' => 1, 'BDB' => 1, 'CPU' => 1, 'END' => 1, 'IPC' => 1, 'NDB' => 1, 'NEW' => 1, 'ONE' => 1, 'ROW' => 1, 'BOOL' => 1, 'BYTE' => 1, 'CODE' => 1, 'CUBE' => 1, 'DATA' => 1, 'DISK' => 1, 'ENDS' => 1, 'FAST' => 1, 'FILE' => 1, 'FULL' => 1, 'GOTO' => 1, 'HASH' => 1, 'HELP' => 1, 'HOST' => 1, 'LAST' => 1, 'LESS' => 1, 'LIST' => 1, 'LOGS' => 1, 'MODE' => 1, 'NAME' => 1, 'NEXT' => 1, 'NONE' => 1, 'OPEN' => 1, 'PAGE' => 1, 'PORT' => 1, 'PREV' => 1, 'ROWS' => 1, 'SOME' => 1, 'STOP' => 1, 'THAN' => 1, 'TYPE' => 1, 'VIEW' => 1, 'WAIT' => 1, 'WORK' => 1, 'X509' => 1, 'AFTER' => 1, 'BEGIN' => 1, 'BLOCK' => 1, 'BTREE' => 1, 'CACHE' => 1, 'CHAIN' => 1, 'CLOSE' => 1, 'EVENT' => 1, 'EVERY' => 1, 'FIRST' => 1, 'FIXED' => 1, 'FLUSH' => 1, 'FOUND' => 1, 'HOSTS' => 1, 'LABEL' => 1, 'LEVEL' => 1, 'LOCAL' => 1, 'LOCKS' => 1, 'MERGE' => 1, 'MUTEX' => 1, 'NAMES' => 1, 'NCHAR' => 1, 'OWNER' => 1, 'PHASE' => 1, 'QUERY' => 1, 'QUICK' => 1, 'RAID0' => 1, 'RESET' => 1, 'RTREE' => 1, 'SHARE' => 1, 'SLAVE' => 1, 'START' => 1, 'SUPER' => 1, 'SWAPS' => 1, 'TYPES' => 1, 'UNTIL' => 1, 'VALUE' => 1, 'ACTION' => 1, 'BACKUP' => 1, 'BINLOG' => 1, 'CIPHER' => 1, 'CLIENT' => 1, 'COMMIT' => 1, 'ENABLE' => 1, 'ENGINE' => 1, 'ERRORS' => 1, 'ESCAPE' => 1, 'EVENTS' => 1, 'FAULTS' => 1, 'FIELDS' => 1, 'GLOBAL' => 1, 'GRANTS' => 1, 'IMPORT' => 1, 'INNODB' => 1, 'ISSUER' => 1, 'LEAVES' => 1, 'MASTER' => 1, 'MEDIUM' => 1, 'MEMORY' => 1, 'MODIFY' => 1, 'OFFSET' => 1, 'PARSER' => 1, 'PLUGIN' => 1, 'RELOAD' => 1, 'REMOVE' => 1, 'REPAIR' => 1, 'RESUME' => 1, 'ROLLUP' => 1, 'SERVER' => 1, 'SIGNED' => 1, 'SIMPLE' => 1, 'SOCKET' => 1, 'SONAME' => 1, 'SOUNDS' => 1, 'SOURCE' => 1, 'STARTS' => 1, 'STATUS' => 1, 'STRING' => 1, 'TABLES' => 1, 'AUTHORS' => 1, 'CHANGED' => 1, 'COLUMNS' => 1, 'COMMENT' => 1, 'COMPACT' => 1, 'CONTEXT' => 1, 'DEFINER' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DYNAMIC' => 1, 'ENGINES' => 1, 'EXECUTE' => 1, 'HANDLER' => 1, 'INDEXES' => 1, 'INSTALL' => 1, 'INVOKER' => 1, 'LOGFILE' => 1, 'MIGRATE' => 1, 'NO_WAIT' => 1, 'OPTIONS' => 1, 'PARTIAL' => 1, 'PLUGINS' => 1, 'PREPARE' => 1, 'PROFILE' => 1, 'REBUILD' => 1, 'RECOVER' => 1, 'RESTORE' => 1, 'RETURNS' => 1, 'ROUTINE' => 1, 'SESSION' => 1, 'STORAGE' => 1, 'STRIPED' => 1, 'SUBJECT' => 1, 'SUSPEND' => 1, 'UNICODE' => 1, 'UNKNOWN' => 1, 'UPGRADE' => 1, 'USE_FRM' => 1, 'VIRTUAL' => 1, 'WRAPPER' => 1, 'CASCADED' => 1, 'CHECKSUM' => 1, 'DATAFILE' => 1, 'DUMPFILE' => 1, 'EXTENDED' => 1, 'FUNCTION' => 1, 'INNOBASE' => 1, 'LANGUAGE' => 1, 'MAXVALUE' => 1, 'MAX_ROWS' => 1, 'MAX_SIZE' => 1, 'MIN_ROWS' => 1, 'NATIONAL' => 1, 'NVARCHAR' => 1, 'ONE_SHOT' => 1, 'PRESERVE' => 1, 'PROFILES' => 1, 'REDOFILE' => 1, 'ROLLBACK' => 1, 'SCHEDULE' => 1, 'SECURITY' => 1, 'SHUTDOWN' => 1, 'SNAPSHOT' => 1, 'SWITCHES' => 1, 'TRIGGERS' => 1, 'UNDOFILE' => 1, 'WARNINGS' => 1, 'AGGREGATE' => 1, 'ALGORITHM' => 1, 'COMMITTED' => 1, 'DIRECTORY' => 1, 'DUPLICATE' => 1, 'EXPANSION' => 1, 'IO_THREAD' => 1, 'ISOLATION' => 1, 'NODEGROUP' => 1, 'PACK_KEYS' => 1, 'PARTITION' => 1, 'RAID_TYPE' => 1, 'READ_ONLY' => 1, 'REDUNDANT' => 1, 'SAVEPOINT' => 1, 'SCHEDULER' => 1, 'SQL_CACHE' => 1, 'TEMPORARY' => 1, 'TEMPTABLE' => 1, 'UNDEFINED' => 1, 'UNINSTALL' => 1, 'VARIABLES' => 1, 'BERKELEYDB' => 1, 'COMPLETION' => 1, 'COMPRESSED' => 1, 'CONCURRENT' => 1, 'CONNECTION' => 1, 'CONSISTENT' => 1, 'DEALLOCATE' => 1, 'IDENTIFIED' => 1, 'MASTER_SSL' => 1, 'NDBCLUSTER' => 1, 'PARTITIONS' => 1, 'PERSISTENT' => 1, 'PRIVILEGES' => 1, 'REORGANISE' => 1, 'REORGANIZE' => 1, 'REPEATABLE' => 1, 'ROW_FORMAT' => 1, 'SQL_THREAD' => 1, 'TABLESPACE' => 1, 'EXTENT_SIZE' => 1, 'FRAC_SECOND' => 1, 'MASTER_HOST' => 1, 'MASTER_PORT' => 1, 'MASTER_USER' => 1, 'PROCESSLIST' => 1, 'RAID_CHUNKS' => 1, 'REPLICATION' => 1, 'SQL_TSI_DAY' => 1, 'TRANSACTION' => 1, 'UNCOMMITTED' => 1, 'CONTRIBUTORS' => 1, 'DES_KEY_FILE' => 1, 'INITIAL_SIZE' => 1, 'PARTITIONING' => 1, 'RELAY_THREAD' => 1, 'SERIALIZABLE' => 1, 'SQL_NO_CACHE' => 1, 'SQL_TSI_HOUR' => 1, 'SQL_TSI_WEEK' => 1, 'SQL_TSI_YEAR' => 1, 'SUBPARTITION' => 1, 'INSERT_METHOD' => 1, 'MASTER_SSL_CA' => 1, 'PAGE_CHECKSUM' => 1, 'RELAY_LOG_POS' => 1, 'SQL_TSI_MONTH' => 1, 'SUBPARTITIONS' => 1, 'TRANSACTIONAL' => 1, 'AUTO_INCREMENT' => 1, 'AVG_ROW_LENGTH' => 1, 'KEY_BLOCK_SIZE' => 1, 'MASTER_LOG_POS' => 1, 'MASTER_SSL_KEY' => 1, 'RAID_CHUNKSIZE' => 1, 'RELAY_LOG_FILE' => 1, 'SQL_TSI_MINUTE' => 1, 'SQL_TSI_SECOND' => 1, 'TABLE_CHECKSUM' => 1, 'USER_RESOURCES' => 1, 'AUTOEXTEND_SIZE' => 1, 'DELAY_KEY_WRITE' => 1, 'MASTER_LOG_FILE' => 1, 'MASTER_PASSWORD' => 1, 'MASTER_SSL_CERT' => 1, 'SQL_TSI_QUARTER' => 1, 'MASTER_SERVER_ID' => 1, 'REDO_BUFFER_SIZE' => 1, 'UNDO_BUFFER_SIZE' => 1, 'MASTER_SSL_CAPATH' => 1, 'MASTER_SSL_CIPHER' => 1, 'SQL_BUFFER_RESULT' => 1, 'SQL_TSI_FRAC_SECOND' => 1, 'MASTER_CONNECT_RETRY' => 1, 'MAX_QUERIES_PER_HOUR' => 1, 'MAX_UPDATES_PER_HOUR' => 1, 'MAX_USER_CONNECTIONS' => 1, 'MAX_CONNECTIONS_PER_HOUR' => 1, 'AS' => 3, 'BY' => 3, 'IS' => 3, 'ON' => 3, 'OR' => 3, 'TO' => 3, 'ADD' => 3, 'ALL' => 3, 'AND' => 3, 'ASC' => 3, 'DEC' => 3, 'DIV' => 3, 'FOR' => 3, 'NOT' => 3, 'OUT' => 3, 'SQL' => 3, 'SSL' => 3, 'USE' => 3, 'XOR' => 3, 'BOTH' => 3, 'CALL' => 3, 'CASE' => 3, 'DESC' => 3, 'DROP' => 3, 'DUAL' => 3, 'EACH' => 3, 'ELSE' => 3, 'EXIT' => 3, 'FROM' => 3, 'INT1' => 3, 'INT2' => 3, 'INT3' => 3, 'INT4' => 3, 'INT8' => 3, 'INTO' => 3, 'JOIN' => 3, 'KEYS' => 3, 'KILL' => 3, 'LIKE' => 3, 'LOAD' => 3, 'LOCK' => 3, 'LONG' => 3, 'LOOP' => 3, 'NULL' => 3, 'READ' => 3, 'SHOW' => 3, 'THEN' => 3, 'TRUE' => 3, 'UNDO' => 3, 'WHEN' => 3, 'WITH' => 3, 'ALTER' => 3, 'CHECK' => 3, 'CROSS' => 3, 'FALSE' => 3, 'FETCH' => 3, 'FORCE' => 3, 'GRANT' => 3, 'GROUP' => 3, 'INNER' => 3, 'INOUT' => 3, 'LEAVE' => 3, 'LIMIT' => 3, 'LINES' => 3, 'ORDER' => 3, 'OUTER' => 3, 'PURGE' => 3, 'RANGE' => 3, 'READS' => 3, 'RLIKE' => 3, 'TABLE' => 3, 'UNION' => 3, 'USAGE' => 3, 'USING' => 3, 'WHERE' => 3, 'WHILE' => 3, 'WRITE' => 3, 'BEFORE' => 3, 'CHANGE' => 3, 'COLUMN' => 3, 'CREATE' => 3, 'CURSOR' => 3, 'DELETE' => 3, 'ELSEIF' => 3, 'FLOAT4' => 3, 'FLOAT8' => 3, 'HAVING' => 3, 'IGNORE' => 3, 'INFILE' => 3, 'LINEAR' => 3, 'OPTION' => 3, 'REGEXP' => 3, 'RENAME' => 3, 'RETURN' => 3, 'REVOKE' => 3, 'SELECT' => 3, 'UNLOCK' => 3, 'UPDATE' => 3, 'ANALYZE' => 3, 'BETWEEN' => 3, 'CASCADE' => 3, 'COLLATE' => 3, 'DECLARE' => 3, 'DELAYED' => 3, 'ESCAPED' => 3, 'EXPLAIN' => 3, 'FOREIGN' => 3, 'ITERATE' => 3, 'LEADING' => 3, 'NATURAL' => 3, 'OUTFILE' => 3, 'PRIMARY' => 3, 'RELEASE' => 3, 'REQUIRE' => 3, 'SCHEMAS' => 3, 'TRIGGER' => 3, 'VARYING' => 3, 'CONTINUE' => 3, 'DAY_HOUR' => 3, 'DESCRIBE' => 3, 'DISTINCT' => 3, 'ENCLOSED' => 3, 'MODIFIES' => 3, 'OPTIMIZE' => 3, 'RESTRICT' => 3, 'SPECIFIC' => 3, 'SQLSTATE' => 3, 'STARTING' => 3, 'TRAILING' => 3, 'UNSIGNED' => 3, 'ZEROFILL' => 3, 'CONDITION' => 3, 'DATABASES' => 3, 'MIDDLEINT' => 3, 'PRECISION' => 3, 'PROCEDURE' => 3, 'SENSITIVE' => 3, 'SEPARATOR' => 3, 'ACCESSIBLE' => 3, 'ASENSITIVE' => 3, 'CONSTRAINT' => 3, 'DAY_MINUTE' => 3, 'DAY_SECOND' => 3, 'OPTIONALLY' => 3, 'READ_WRITE' => 3, 'REFERENCES' => 3, 'SQLWARNING' => 3, 'TERMINATED' => 3, 'YEAR_MONTH' => 3, 'DISTINCTROW' => 3, 'HOUR_MINUTE' => 3, 'HOUR_SECOND' => 3, 'INSENSITIVE' => 3, 'LOW_PRIORITY' => 3, 'SQLEXCEPTION' => 3, 'VARCHARACTER' => 3, 'DETERMINISTIC' => 3, 'HIGH_PRIORITY' => 3, 'MINUTE_SECOND' => 3, 'STRAIGHT_JOIN' => 3, 'SQL_BIG_RESULT' => 3, 'DAY_MICROSECOND' => 3, 'HOUR_MICROSECOND' => 3, 'SQL_SMALL_RESULT' => 3, 'MINUTE_MICROSECOND' => 3, 'NO_WRITE_TO_BINLOG' => 3, 'SECOND_MICROSECOND' => 3, 'SQL_CALC_FOUND_ROWS' => 3, 'MASTER_SSL_VERIFY_SERVER_CERT' => 3, 'GROUP BY' => 7, 'NOT NULL' => 7, 'ORDER BY' => 7, 'SET NULL' => 7, 'AND CHAIN' => 7, 'FULL JOIN' => 7, 'IF EXISTS' => 7, 'LEFT JOIN' => 7, 'LESS THAN' => 7, 'LOAD DATA' => 7, 'NO ACTION' => 7, 'ON DELETE' => 7, 'ON UPDATE' => 7, 'UNION ALL' => 7, 'CROSS JOIN' => 7, 'ESCAPED BY' => 7, 'FOR UPDATE' => 7, 'INNER JOIN' => 7, 'LINEAR KEY' => 7, 'NO RELEASE' => 7, 'OR REPLACE' => 7, 'RIGHT JOIN' => 7, 'ENCLOSED BY' => 7, 'LINEAR HASH' => 7, 'STARTING BY' => 7, 'AND NO CHAIN' => 7, 'FOR EACH ROW' => 7, 'NATURAL JOIN' => 7, 'PARTITION BY' => 7, 'SET PASSWORD' => 7, 'SQL SECURITY' => 7, 'CHARACTER SET' => 7, 'IF NOT EXISTS' => 7, 'TERMINATED BY' => 7, 'DATA DIRECTORY' => 7, 'UNION DISTINCT' => 7, 'DEFAULT CHARSET' => 7, 'DEFAULT COLLATE' => 7, 'FULL OUTER JOIN' => 7, 'INDEX DIRECTORY' => 7, 'LEFT OUTER JOIN' => 7, 'SUBPARTITION BY' => 7, 'GENERATED ALWAYS' => 7, 'RIGHT OUTER JOIN' => 7, 'NATURAL LEFT JOIN' => 7, 'START TRANSACTION' => 7, 'LOCK IN SHARE MODE' => 7, 'NATURAL RIGHT JOIN' => 7, 'SELECT TRANSACTION' => 7, 'DEFAULT CHARACTER SET' => 7, 'NATURAL LEFT OUTER JOIN' => 7, 'NATURAL RIGHT OUTER JOIN' => 7, 'WITH CONSISTENT SNAPSHOT' => 7, 'BIT' => 9, 'XML' => 9, 'ENUM' => 9, 'JSON' => 9, 'TEXT' => 9, 'ARRAY' => 9, 'SERIAL' => 9, 'BOOLEAN' => 9, 'DATETIME' => 9, 'GEOMETRY' => 9, 'MULTISET' => 9, 'MULTILINEPOINT' => 9, 'MULTILINEPOLYGON' => 9, 'INT' => 11, 'SET' => 11, 'BLOB' => 11, 'REAL' => 11, 'FLOAT' => 11, 'BIGINT' => 11, 'DOUBLE' => 11, 'DECIMAL' => 11, 'INTEGER' => 11, 'NUMERIC' => 11, 'TINYINT' => 11, 'VARCHAR' => 11, 'LONGBLOB' => 11, 'LONGTEXT' => 11, 'SMALLINT' => 11, 'TINYBLOB' => 11, 'TINYTEXT' => 11, 'CHARACTER' => 11, 'MEDIUMINT' => 11, 'VARBINARY' => 11, 'MEDIUMBLOB' => 11, 'MEDIUMTEXT' => 11, 'BINARY VARYING' => 15, 'KEY' => 19, 'INDEX' => 19, 'UNIQUE' => 19, 'SPATIAL' => 19, 'FULLTEXT' => 19, 'INDEX KEY' => 23, 'UNIQUE KEY' => 23, 'FOREIGN KEY' => 23, 'PRIMARY KEY' => 23, 'SPATIAL KEY' => 23, 'FULLTEXT KEY' => 23, 'UNIQUE INDEX' => 23, 'SPATIAL INDEX' => 23, 'FULLTEXT INDEX' => 23, 'X' => 33, 'Y' => 33, 'LN' => 33, 'PI' => 33, 'ABS' => 33, 'AVG' => 33, 'BIN' => 33, 'COS' => 33, 'COT' => 33, 'DAY' => 33, 'ELT' => 33, 'EXP' => 33, 'HEX' => 33, 'LOG' => 33, 'MAX' => 33, 'MD5' => 33, 'MID' => 33, 'MIN' => 33, 'NOW' => 33, 'OCT' => 33, 'ORD' => 33, 'POW' => 33, 'SHA' => 33, 'SIN' => 33, 'STD' => 33, 'SUM' => 33, 'TAN' => 33, 'ACOS' => 33, 'AREA' => 33, 'ASIN' => 33, 'ATAN' => 33, 'CAST' => 33, 'CEIL' => 33, 'CONV' => 33, 'HOUR' => 33, 'LOG2' => 33, 'LPAD' => 33, 'RAND' => 33, 'RPAD' => 33, 'SHA1' => 33, 'SIGN' => 33, 'SQRT' => 33, 'SRID' => 33, 'TRIM' => 33, 'USER' => 33, 'UUID' => 33, 'WEEK' => 33, 'ASCII' => 33, 'ASWKB' => 33, 'ASWKT' => 33, 'ATAN2' => 33, 'COUNT' => 33, 'CRC32' => 33, 'DECOD' => 33, 'FIELD' => 33, 'FLOOR' => 33, 'INSTR' => 33, 'LCASE' => 33, 'LEAST' => 33, 'LOG10' => 33, 'LOWER' => 33, 'LTRIM' => 33, 'MONTH' => 33, 'POWER' => 33, 'QUOTE' => 33, 'ROUND' => 33, 'RTRIM' => 33, 'SLEEP' => 33, 'SPACE' => 33, 'UCASE' => 33, 'UNHEX' => 33, 'UPPER' => 33, 'ASTEXT' => 33, 'BIT_OR' => 33, 'CONCAT' => 33, 'ENCODE' => 33, 'EQUALS' => 33, 'FORMAT' => 33, 'IFNULL' => 33, 'ISNULL' => 33, 'LENGTH' => 33, 'LOCATE' => 33, 'MINUTE' => 33, 'NULLIF' => 33, 'POINTN' => 33, 'SECOND' => 33, 'STDDEV' => 33, 'STRCMP' => 33, 'SUBSTR' => 33, 'WITHIN' => 33, 'ADDDATE' => 33, 'ADDTIME' => 33, 'AGAINST' => 33, 'BIT_AND' => 33, 'BIT_XOR' => 33, 'CEILING' => 33, 'CHARSET' => 33, 'CROSSES' => 33, 'CURDATE' => 33, 'CURTIME' => 33, 'DAYNAME' => 33, 'DEGREES' => 33, 'ENCRYPT' => 33, 'EXTRACT' => 33, 'GLENGTH' => 33, 'ISEMPTY' => 33, 'QUARTER' => 33, 'RADIANS' => 33, 'REVERSE' => 33, 'SOUNDEX' => 33, 'SUBDATE' => 33, 'SUBTIME' => 33, 'SYSDATE' => 33, 'TOUCHES' => 33, 'TO_DAYS' => 33, 'VAR_POP' => 33, 'VERSION' => 33, 'WEEKDAY' => 33, 'ASBINARY' => 33, 'CENTROID' => 33, 'COALESCE' => 33, 'COMPRESS' => 33, 'CONTAINS' => 33, 'DATEDIFF' => 33, 'DATE_ADD' => 33, 'DATE_SUB' => 33, 'DISJOINT' => 33, 'ENDPOINT' => 33, 'ENVELOPE' => 33, 'GET_LOCK' => 33, 'GREATEST' => 33, 'ISCLOSED' => 33, 'ISSIMPLE' => 33, 'MAKEDATE' => 33, 'MAKETIME' => 33, 'MAKE_SET' => 33, 'MBREQUAL' => 33, 'OVERLAPS' => 33, 'PASSWORD' => 33, 'POSITION' => 33, 'TIMEDIFF' => 33, 'TRUNCATE' => 33, 'VARIANCE' => 33, 'VAR_SAMP' => 33, 'YEARWEEK' => 33, 'BENCHMARK' => 33, 'BIT_COUNT' => 33, 'COLLATION' => 33, 'CONCAT_WS' => 33, 'DAYOFWEEK' => 33, 'DAYOFYEAR' => 33, 'DIMENSION' => 33, 'FROM_DAYS' => 33, 'GEOMETRYN' => 33, 'INET_ATON' => 33, 'INET_NTOA' => 33, 'LOAD_FILE' => 33, 'MBRWITHIN' => 33, 'MONTHNAME' => 33, 'NUMPOINTS' => 33, 'ROW_COUNT' => 33, 'SUBSTRING' => 33, 'UPDATEXML' => 33, 'BIT_LENGTH' => 33, 'CONVERT_TZ' => 33, 'DAYOFMONTH' => 33, 'EXPORT_SET' => 33, 'FOUND_ROWS' => 33, 'GET_FORMAT' => 33, 'INTERSECTS' => 33, 'MBRTOUCHES' => 33, 'MULTIPOINT' => 33, 'NAME_CONST' => 33, 'PERIOD_ADD' => 33, 'STARTPOINT' => 33, 'STDDEV_POP' => 33, 'UNCOMPRESS' => 33, 'UUID_SHORT' => 33, 'WEEKOFYEAR' => 33, 'AES_DECRYPT' => 33, 'AES_ENCRYPT' => 33, 'CHAR_LENGTH' => 33, 'DATE_FORMAT' => 33, 'DES_DECRYPT' => 33, 'DES_ENCRYPT' => 33, 'FIND_IN_SET' => 33, 'GEOMFROMWKB' => 33, 'LINEFROMWKB' => 33, 'MBRCONTAINS' => 33, 'MBRDISJOINT' => 33, 'MBROVERLAPS' => 33, 'MICROSECOND' => 33, 'PERIOD_DIFF' => 33, 'POLYFROMWKB' => 33, 'SEC_TO_TIME' => 33, 'STDDEV_SAMP' => 33, 'STR_TO_DATE' => 33, 'SYSTEM_USER' => 33, 'TIME_FORMAT' => 33, 'TIME_TO_SEC' => 33, 'COERCIBILITY' => 33, 'EXTERIORRING' => 33, 'EXTRACTVALUE' => 33, 'GEOMETRYTYPE' => 33, 'GEOMFROMTEXT' => 33, 'GROUP_CONCAT' => 33, 'IS_FREE_LOCK' => 33, 'IS_USED_LOCK' => 33, 'LINEFROMTEXT' => 33, 'MLINEFROMWKB' => 33, 'MPOLYFROMWKB' => 33, 'MULTIPOLYGON' => 33, 'OCTET_LENGTH' => 33, 'OLD_PASSWORD' => 33, 'POINTFROMWKB' => 33, 'POLYFROMTEXT' => 33, 'RELEASE_LOCK' => 33, 'SESSION_USER' => 33, 'TIMESTAMPADD' => 33, 'CONNECTION_ID' => 33, 'FROM_UNIXTIME' => 33, 'INTERIORRINGN' => 33, 'MBRINTERSECTS' => 33, 'MLINEFROMTEXT' => 33, 'MPOINTFROMWKB' => 33, 'MPOLYFROMTEXT' => 33, 'NUMGEOMETRIES' => 33, 'POINTFROMTEXT' => 33, 'TIMESTAMPDIFF' => 33, 'LAST_INSERT_ID' => 33, 'MPOINTFROMTEXT' => 33, 'POLYGONFROMWKB' => 33, 'UNIX_TIMESTAMP' => 33, 'GEOMCOLLFROMWKB' => 33, 'MASTER_POS_WAIT' => 33, 'POLYGONFROMTEXT' => 33, 'SUBSTRING_INDEX' => 33, 'CHARACTER_LENGTH' => 33, 'GEOMCOLLFROMTEXT' => 33, 'GEOMETRYFROMTEXT' => 33, 'NUMINTERIORRINGS' => 33, 'LINESTRINGFROMWKB' => 33, 'MULTIPOINTFROMWKB' => 33, 'MULTIPOINTFROMTEXT' => 33, 'MULTIPOLYGONFROMWKB' => 33, 'UNCOMPRESSED_LENGTH' => 33, 'MULTIPOLYGONFROMTEXT' => 33, 'MULTILINESTRINGFROMWKB' => 33, 'MULTILINESTRINGFROMTEXT' => 33, 'GEOMETRYCOLLECTIONFROMWKB' => 33, 'GEOMETRYCOLLECTIONFROMTEXT' => 33, 'IF' => 35, 'IN' => 35, 'MOD' => 35, 'LEFT' => 35, 'MATCH' => 35, 'RIGHT' => 35, 'EXISTS' => 35, 'INSERT' => 35, 'REPEAT' => 35, 'SCHEMA' => 35, 'VALUES' => 35, 'CONVERT' => 35, 'DEFAULT' => 35, 'REPLACE' => 35, 'DATABASE' => 35, 'UTC_DATE' => 35, 'UTC_TIME' => 35, 'LOCALTIME' => 35, 'CURRENT_DATE' => 35, 'CURRENT_TIME' => 35, 'CURRENT_USER' => 35, 'UTC_TIMESTAMP' => 35, 'LOCALTIMESTAMP' => 35, 'CURRENT_TIMESTAMP' => 35, 'NOT IN' => 39, 'DATE' => 41, 'TIME' => 41, 'YEAR' => 41, 'POINT' => 41, 'POLYGON' => 41, 'TIMESTAMP' => 41, 'LINESTRING' => 41, 'MULTILINESTRING' => 41, 'GEOMETRYCOLLECTION' => 41, 'CHAR' => 43, 'BINARY' => 43, 'INTERVAL' => 43);
    }
    /**
     * Context for MariaDB 10.0.
     *
     * @category   Contexts
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ContextMariaDb100000 extends \PhpMyAdmin\SqlParser\Context
    {
        /**
         * List of keywords.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * @var array
         */
        public static $KEYWORDS = array('AT' => 1, 'DO' => 1, 'IO' => 1, 'NO' => 1, 'XA' => 1, 'ANY' => 1, 'CPU' => 1, 'END' => 1, 'IPC' => 1, 'NDB' => 1, 'NEW' => 1, 'ONE' => 1, 'ROW' => 1, 'BOOL' => 1, 'BYTE' => 1, 'CODE' => 1, 'CUBE' => 1, 'DATA' => 1, 'DISK' => 1, 'ENDS' => 1, 'FAST' => 1, 'FILE' => 1, 'FULL' => 1, 'HASH' => 1, 'HELP' => 1, 'HOST' => 1, 'LAST' => 1, 'LESS' => 1, 'LIST' => 1, 'LOGS' => 1, 'MODE' => 1, 'NAME' => 1, 'NEXT' => 1, 'NONE' => 1, 'OPEN' => 1, 'PAGE' => 1, 'PORT' => 1, 'PREV' => 1, 'ROWS' => 1, 'SLOW' => 1, 'SOME' => 1, 'STOP' => 1, 'THAN' => 1, 'TYPE' => 1, 'VIEW' => 1, 'WAIT' => 1, 'WORK' => 1, 'X509' => 1, 'AFTER' => 1, 'BEGIN' => 1, 'BLOCK' => 1, 'BTREE' => 1, 'CACHE' => 1, 'CHAIN' => 1, 'CLOSE' => 1, 'ERROR' => 1, 'EVENT' => 1, 'EVERY' => 1, 'FIRST' => 1, 'FIXED' => 1, 'FLUSH' => 1, 'FOUND' => 1, 'HOSTS' => 1, 'LEVEL' => 1, 'LOCAL' => 1, 'LOCKS' => 1, 'MERGE' => 1, 'MUTEX' => 1, 'NAMES' => 1, 'NCHAR' => 1, 'OWNER' => 1, 'PHASE' => 1, 'PROXY' => 1, 'QUERY' => 1, 'QUICK' => 1, 'RELAY' => 1, 'RESET' => 1, 'RTREE' => 1, 'SHARE' => 1, 'SLAVE' => 1, 'START' => 1, 'SUPER' => 1, 'SWAPS' => 1, 'TYPES' => 1, 'UNTIL' => 1, 'VALUE' => 1, 'ACTION' => 1, 'BACKUP' => 1, 'BINLOG' => 1, 'CIPHER' => 1, 'CLIENT' => 1, 'COMMIT' => 1, 'ENABLE' => 1, 'ENGINE' => 1, 'ERRORS' => 1, 'ESCAPE' => 1, 'EVENTS' => 1, 'FAULTS' => 1, 'FIELDS' => 1, 'GLOBAL' => 1, 'GRANTS' => 1, 'IMPORT' => 1, 'INNODB' => 1, 'ISSUER' => 1, 'LEAVES' => 1, 'MASTER' => 1, 'MEDIUM' => 1, 'MEMORY' => 1, 'MODIFY' => 1, 'OFFSET' => 1, 'PARSER' => 1, 'PLUGIN' => 1, 'RELOAD' => 1, 'REMOVE' => 1, 'REPAIR' => 1, 'RESUME' => 1, 'ROLLUP' => 1, 'SERVER' => 1, 'SIGNED' => 1, 'SIMPLE' => 1, 'SOCKET' => 1, 'SONAME' => 1, 'SOUNDS' => 1, 'SOURCE' => 1, 'STARTS' => 1, 'STATUS' => 1, 'STRING' => 1, 'TABLES' => 1, 'AUTHORS' => 1, 'CHANGED' => 1, 'COLUMNS' => 1, 'COMMENT' => 1, 'COMPACT' => 1, 'CONTEXT' => 1, 'DEFINER' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DYNAMIC' => 1, 'ENGINES' => 1, 'EXECUTE' => 1, 'GENERAL' => 1, 'HANDLER' => 1, 'INDEXES' => 1, 'INSTALL' => 1, 'INVOKER' => 1, 'LOGFILE' => 1, 'MIGRATE' => 1, 'NO_WAIT' => 1, 'OPTIONS' => 1, 'PARTIAL' => 1, 'PLUGINS' => 1, 'PREPARE' => 1, 'PROFILE' => 1, 'REBUILD' => 1, 'RECOVER' => 1, 'RESTORE' => 1, 'RETURNS' => 1, 'ROUTINE' => 1, 'SESSION' => 1, 'STORAGE' => 1, 'SUBJECT' => 1, 'SUSPEND' => 1, 'UNICODE' => 1, 'UNKNOWN' => 1, 'UPGRADE' => 1, 'USE_FRM' => 1, 'VIRTUAL' => 1, 'WRAPPER' => 1, 'CASCADED' => 1, 'CHECKSUM' => 1, 'DATAFILE' => 1, 'DUMPFILE' => 1, 'EXTENDED' => 1, 'FUNCTION' => 1, 'INNOBASE' => 1, 'LANGUAGE' => 1, 'MAX_ROWS' => 1, 'MAX_SIZE' => 1, 'MIN_ROWS' => 1, 'NATIONAL' => 1, 'NVARCHAR' => 1, 'ONE_SHOT' => 1, 'PRESERVE' => 1, 'PROFILES' => 1, 'REDOFILE' => 1, 'RELAYLOG' => 1, 'ROLLBACK' => 1, 'SCHEDULE' => 1, 'SECURITY' => 1, 'SHUTDOWN' => 1, 'SNAPSHOT' => 1, 'SWITCHES' => 1, 'TRIGGERS' => 1, 'UNDOFILE' => 1, 'WARNINGS' => 1, 'AGGREGATE' => 1, 'ALGORITHM' => 1, 'COMMITTED' => 1, 'DIRECTORY' => 1, 'DUPLICATE' => 1, 'EXPANSION' => 1, 'IO_THREAD' => 1, 'ISOLATION' => 1, 'NODEGROUP' => 1, 'PACK_KEYS' => 1, 'READ_ONLY' => 1, 'REDUNDANT' => 1, 'SAVEPOINT' => 1, 'SQL_CACHE' => 1, 'TEMPORARY' => 1, 'TEMPTABLE' => 1, 'UNDEFINED' => 1, 'UNINSTALL' => 1, 'VARIABLES' => 1, 'COMPLETION' => 1, 'COMPRESSED' => 1, 'CONCURRENT' => 1, 'CONNECTION' => 1, 'CONSISTENT' => 1, 'DEALLOCATE' => 1, 'IDENTIFIED' => 1, 'MASTER_SSL' => 1, 'NDBCLUSTER' => 1, 'PARTITIONS' => 1, 'PERSISTENT' => 1, 'PRIVILEGES' => 1, 'REORGANIZE' => 1, 'REPEATABLE' => 1, 'ROW_FORMAT' => 1, 'SQL_THREAD' => 1, 'TABLESPACE' => 1, 'TABLE_NAME' => 1, 'COLUMN_NAME' => 1, 'CURSOR_NAME' => 1, 'EXTENT_SIZE' => 1, 'FRAC_SECOND' => 1, 'MASTER_HOST' => 1, 'MASTER_PORT' => 1, 'MASTER_USER' => 1, 'MYSQL_ERRNO' => 1, 'PROCESSLIST' => 1, 'REPLICATION' => 1, 'SCHEMA_NAME' => 1, 'SQL_TSI_DAY' => 1, 'TRANSACTION' => 1, 'UNCOMMITTED' => 1, 'CATALOG_NAME' => 1, 'CLASS_ORIGIN' => 1, 'CONTRIBUTORS' => 1, 'DES_KEY_FILE' => 1, 'INITIAL_SIZE' => 1, 'MESSAGE_TEXT' => 1, 'PARTITIONING' => 1, 'RELAY_THREAD' => 1, 'SERIALIZABLE' => 1, 'SQL_NO_CACHE' => 1, 'SQL_TSI_HOUR' => 1, 'SQL_TSI_WEEK' => 1, 'SQL_TSI_YEAR' => 1, 'SUBPARTITION' => 1, 'INSERT_METHOD' => 1, 'MASTER_SSL_CA' => 1, 'RELAY_LOG_POS' => 1, 'SQL_TSI_MONTH' => 1, 'SUBPARTITIONS' => 1, 'AUTO_INCREMENT' => 1, 'AVG_ROW_LENGTH' => 1, 'KEY_BLOCK_SIZE' => 1, 'MASTER_LOG_POS' => 1, 'MASTER_SSL_KEY' => 1, 'RELAY_LOG_FILE' => 1, 'SQL_TSI_MINUTE' => 1, 'SQL_TSI_SECOND' => 1, 'TABLE_CHECKSUM' => 1, 'USER_RESOURCES' => 1, 'AUTOEXTEND_SIZE' => 1, 'CONSTRAINT_NAME' => 1, 'DELAY_KEY_WRITE' => 1, 'MASTER_LOG_FILE' => 1, 'MASTER_PASSWORD' => 1, 'MASTER_SSL_CERT' => 1, 'SQL_TSI_QUARTER' => 1, 'SUBCLASS_ORIGIN' => 1, 'MASTER_SERVER_ID' => 1, 'REDO_BUFFER_SIZE' => 1, 'UNDO_BUFFER_SIZE' => 1, 'CONSTRAINT_SCHEMA' => 1, 'IGNORE_SERVER_IDS' => 1, 'MASTER_SSL_CAPATH' => 1, 'MASTER_SSL_CIPHER' => 1, 'SQL_BUFFER_RESULT' => 1, 'CONSTRAINT_CATALOG' => 1, 'SQL_TSI_FRAC_SECOND' => 1, 'MASTER_CONNECT_RETRY' => 1, 'MAX_QUERIES_PER_HOUR' => 1, 'MAX_UPDATES_PER_HOUR' => 1, 'MAX_USER_CONNECTIONS' => 1, 'MASTER_HEARTBEAT_PERIOD' => 1, 'MAX_CONNECTIONS_PER_HOUR' => 1, 'AS' => 3, 'BY' => 3, 'IS' => 3, 'ON' => 3, 'OR' => 3, 'TO' => 3, 'ADD' => 3, 'ALL' => 3, 'AND' => 3, 'ASC' => 3, 'DEC' => 3, 'DIV' => 3, 'FOR' => 3, 'NOT' => 3, 'OUT' => 3, 'SQL' => 3, 'SSL' => 3, 'USE' => 3, 'XOR' => 3, 'BOTH' => 3, 'CALL' => 3, 'CASE' => 3, 'DESC' => 3, 'DROP' => 3, 'DUAL' => 3, 'EACH' => 3, 'ELSE' => 3, 'EXIT' => 3, 'FROM' => 3, 'INT1' => 3, 'INT2' => 3, 'INT3' => 3, 'INT4' => 3, 'INT8' => 3, 'INTO' => 3, 'JOIN' => 3, 'KEYS' => 3, 'KILL' => 3, 'LIKE' => 3, 'LOAD' => 3, 'LOCK' => 3, 'LONG' => 3, 'LOOP' => 3, 'NULL' => 3, 'READ' => 3, 'SHOW' => 3, 'THEN' => 3, 'TRUE' => 3, 'UNDO' => 3, 'WHEN' => 3, 'WITH' => 3, 'ALTER' => 3, 'CHECK' => 3, 'CROSS' => 3, 'FALSE' => 3, 'FETCH' => 3, 'FORCE' => 3, 'GRANT' => 3, 'GROUP' => 3, 'INNER' => 3, 'INOUT' => 3, 'LEAVE' => 3, 'LIMIT' => 3, 'LINES' => 3, 'ORDER' => 3, 'OUTER' => 3, 'PURGE' => 3, 'RANGE' => 3, 'READS' => 3, 'RLIKE' => 3, 'TABLE' => 3, 'UNION' => 3, 'USAGE' => 3, 'USING' => 3, 'WHERE' => 3, 'WHILE' => 3, 'WRITE' => 3, 'BEFORE' => 3, 'CHANGE' => 3, 'COLUMN' => 3, 'CREATE' => 3, 'CURSOR' => 3, 'DELETE' => 3, 'ELSEIF' => 3, 'FLOAT4' => 3, 'FLOAT8' => 3, 'HAVING' => 3, 'IGNORE' => 3, 'INFILE' => 3, 'LINEAR' => 3, 'OPTION' => 3, 'REGEXP' => 3, 'RENAME' => 3, 'RETURN' => 3, 'REVOKE' => 3, 'SELECT' => 3, 'SIGNAL' => 3, 'UNLOCK' => 3, 'UPDATE' => 3, 'ANALYZE' => 3, 'BETWEEN' => 3, 'CASCADE' => 3, 'COLLATE' => 3, 'DECLARE' => 3, 'DELAYED' => 3, 'ESCAPED' => 3, 'EXPLAIN' => 3, 'FOREIGN' => 3, 'ITERATE' => 3, 'LEADING' => 3, 'NATURAL' => 3, 'OUTFILE' => 3, 'PRIMARY' => 3, 'RELEASE' => 3, 'REQUIRE' => 3, 'SCHEMAS' => 3, 'TRIGGER' => 3, 'VARYING' => 3, 'CONTINUE' => 3, 'DAY_HOUR' => 3, 'DESCRIBE' => 3, 'DISTINCT' => 3, 'ENCLOSED' => 3, 'MAXVALUE' => 3, 'MODIFIES' => 3, 'OPTIMIZE' => 3, 'RESIGNAL' => 3, 'RESTRICT' => 3, 'SPECIFIC' => 3, 'SQLSTATE' => 3, 'STARTING' => 3, 'TRAILING' => 3, 'UNSIGNED' => 3, 'ZEROFILL' => 3, 'CONDITION' => 3, 'DATABASES' => 3, 'MIDDLEINT' => 3, 'PARTITION' => 3, 'PRECISION' => 3, 'PROCEDURE' => 3, 'SENSITIVE' => 3, 'SEPARATOR' => 3, 'ACCESSIBLE' => 3, 'ASENSITIVE' => 3, 'CONSTRAINT' => 3, 'DAY_MINUTE' => 3, 'DAY_SECOND' => 3, 'OPTIONALLY' => 3, 'READ_WRITE' => 3, 'REFERENCES' => 3, 'SQLWARNING' => 3, 'TERMINATED' => 3, 'YEAR_MONTH' => 3, 'DISTINCTROW' => 3, 'HOUR_MINUTE' => 3, 'HOUR_SECOND' => 3, 'INSENSITIVE' => 3, 'LOW_PRIORITY' => 3, 'SQLEXCEPTION' => 3, 'VARCHARACTER' => 3, 'DETERMINISTIC' => 3, 'HIGH_PRIORITY' => 3, 'MINUTE_SECOND' => 3, 'STRAIGHT_JOIN' => 3, 'SQL_BIG_RESULT' => 3, 'DAY_MICROSECOND' => 3, 'HOUR_MICROSECOND' => 3, 'SQL_SMALL_RESULT' => 3, 'MINUTE_MICROSECOND' => 3, 'NO_WRITE_TO_BINLOG' => 3, 'SECOND_MICROSECOND' => 3, 'SQL_CALC_FOUND_ROWS' => 3, 'MASTER_SSL_VERIFY_SERVER_CERT' => 3, 'GROUP BY' => 7, 'NOT NULL' => 7, 'ORDER BY' => 7, 'SET NULL' => 7, 'AND CHAIN' => 7, 'FULL JOIN' => 7, 'IF EXISTS' => 7, 'LEFT JOIN' => 7, 'LESS THAN' => 7, 'LOAD DATA' => 7, 'NO ACTION' => 7, 'ON DELETE' => 7, 'ON UPDATE' => 7, 'UNION ALL' => 7, 'CROSS JOIN' => 7, 'ESCAPED BY' => 7, 'FOR UPDATE' => 7, 'INNER JOIN' => 7, 'LINEAR KEY' => 7, 'NO RELEASE' => 7, 'OR REPLACE' => 7, 'RIGHT JOIN' => 7, 'ENCLOSED BY' => 7, 'LINEAR HASH' => 7, 'STARTING BY' => 7, 'AND NO CHAIN' => 7, 'FOR EACH ROW' => 7, 'NATURAL JOIN' => 7, 'PARTITION BY' => 7, 'SET PASSWORD' => 7, 'SQL SECURITY' => 7, 'CHARACTER SET' => 7, 'IF NOT EXISTS' => 7, 'TERMINATED BY' => 7, 'DATA DIRECTORY' => 7, 'UNION DISTINCT' => 7, 'DEFAULT CHARSET' => 7, 'DEFAULT COLLATE' => 7, 'FULL OUTER JOIN' => 7, 'INDEX DIRECTORY' => 7, 'LEFT OUTER JOIN' => 7, 'SUBPARTITION BY' => 7, 'GENERATED ALWAYS' => 7, 'RIGHT OUTER JOIN' => 7, 'NATURAL LEFT JOIN' => 7, 'START TRANSACTION' => 7, 'LOCK IN SHARE MODE' => 7, 'NATURAL RIGHT JOIN' => 7, 'SELECT TRANSACTION' => 7, 'DEFAULT CHARACTER SET' => 7, 'NATURAL LEFT OUTER JOIN' => 7, 'NATURAL RIGHT OUTER JOIN' => 7, 'WITH CONSISTENT SNAPSHOT' => 7, 'BIT' => 9, 'XML' => 9, 'ENUM' => 9, 'JSON' => 9, 'TEXT' => 9, 'ARRAY' => 9, 'SERIAL' => 9, 'BOOLEAN' => 9, 'DATETIME' => 9, 'GEOMETRY' => 9, 'MULTISET' => 9, 'MULTILINEPOINT' => 9, 'MULTILINEPOLYGON' => 9, 'INT' => 11, 'SET' => 11, 'BLOB' => 11, 'REAL' => 11, 'FLOAT' => 11, 'BIGINT' => 11, 'DOUBLE' => 11, 'DECIMAL' => 11, 'INTEGER' => 11, 'NUMERIC' => 11, 'TINYINT' => 11, 'VARCHAR' => 11, 'LONGBLOB' => 11, 'LONGTEXT' => 11, 'SMALLINT' => 11, 'TINYBLOB' => 11, 'TINYTEXT' => 11, 'CHARACTER' => 11, 'MEDIUMINT' => 11, 'VARBINARY' => 11, 'MEDIUMBLOB' => 11, 'MEDIUMTEXT' => 11, 'BINARY VARYING' => 15, 'KEY' => 19, 'INDEX' => 19, 'UNIQUE' => 19, 'SPATIAL' => 19, 'FULLTEXT' => 19, 'INDEX KEY' => 23, 'UNIQUE KEY' => 23, 'FOREIGN KEY' => 23, 'PRIMARY KEY' => 23, 'SPATIAL KEY' => 23, 'FULLTEXT KEY' => 23, 'UNIQUE INDEX' => 23, 'SPATIAL INDEX' => 23, 'FULLTEXT INDEX' => 23, 'X' => 33, 'Y' => 33, 'LN' => 33, 'PI' => 33, 'ABS' => 33, 'AVG' => 33, 'BIN' => 33, 'COS' => 33, 'COT' => 33, 'DAY' => 33, 'ELT' => 33, 'EXP' => 33, 'HEX' => 33, 'LOG' => 33, 'MAX' => 33, 'MD5' => 33, 'MID' => 33, 'MIN' => 33, 'NOW' => 33, 'OCT' => 33, 'ORD' => 33, 'POW' => 33, 'SHA' => 33, 'SIN' => 33, 'STD' => 33, 'SUM' => 33, 'TAN' => 33, 'ACOS' => 33, 'AREA' => 33, 'ASIN' => 33, 'ATAN' => 33, 'CAST' => 33, 'CEIL' => 33, 'CONV' => 33, 'HOUR' => 33, 'LOG2' => 33, 'LPAD' => 33, 'RAND' => 33, 'RPAD' => 33, 'SHA1' => 33, 'SHA2' => 33, 'SIGN' => 33, 'SQRT' => 33, 'SRID' => 33, 'TRIM' => 33, 'USER' => 33, 'UUID' => 33, 'WEEK' => 33, 'ASCII' => 33, 'ASWKB' => 33, 'ASWKT' => 33, 'ATAN2' => 33, 'COUNT' => 33, 'CRC32' => 33, 'FIELD' => 33, 'FLOOR' => 33, 'INSTR' => 33, 'LCASE' => 33, 'LEAST' => 33, 'LOG10' => 33, 'LOWER' => 33, 'LTRIM' => 33, 'MONTH' => 33, 'POWER' => 33, 'QUOTE' => 33, 'ROUND' => 33, 'RTRIM' => 33, 'SLEEP' => 33, 'SPACE' => 33, 'UCASE' => 33, 'UNHEX' => 33, 'UPPER' => 33, 'ASTEXT' => 33, 'BIT_OR' => 33, 'CONCAT' => 33, 'DECODE' => 33, 'ENCODE' => 33, 'EQUALS' => 33, 'FORMAT' => 33, 'IFNULL' => 33, 'ISNULL' => 33, 'LENGTH' => 33, 'LOCATE' => 33, 'MINUTE' => 33, 'NULLIF' => 33, 'POINTN' => 33, 'SECOND' => 33, 'STDDEV' => 33, 'STRCMP' => 33, 'SUBSTR' => 33, 'WITHIN' => 33, 'ADDDATE' => 33, 'ADDTIME' => 33, 'AGAINST' => 33, 'BIT_AND' => 33, 'BIT_XOR' => 33, 'CEILING' => 33, 'CHARSET' => 33, 'CROSSES' => 33, 'CURDATE' => 33, 'CURTIME' => 33, 'DAYNAME' => 33, 'DEGREES' => 33, 'ENCRYPT' => 33, 'EXTRACT' => 33, 'GLENGTH' => 33, 'ISEMPTY' => 33, 'QUARTER' => 33, 'RADIANS' => 33, 'REVERSE' => 33, 'SOUNDEX' => 33, 'SUBDATE' => 33, 'SUBTIME' => 33, 'SYSDATE' => 33, 'TOUCHES' => 33, 'TO_DAYS' => 33, 'VAR_POP' => 33, 'VERSION' => 33, 'WEEKDAY' => 33, 'ASBINARY' => 33, 'CENTROID' => 33, 'COALESCE' => 33, 'COMPRESS' => 33, 'CONTAINS' => 33, 'DATEDIFF' => 33, 'DATE_ADD' => 33, 'DATE_SUB' => 33, 'DISJOINT' => 33, 'ENDPOINT' => 33, 'ENVELOPE' => 33, 'GET_LOCK' => 33, 'GREATEST' => 33, 'ISCLOSED' => 33, 'ISSIMPLE' => 33, 'MAKEDATE' => 33, 'MAKETIME' => 33, 'MAKE_SET' => 33, 'MBREQUAL' => 33, 'OVERLAPS' => 33, 'PASSWORD' => 33, 'POSITION' => 33, 'TIMEDIFF' => 33, 'TRUNCATE' => 33, 'VARIANCE' => 33, 'VAR_SAMP' => 33, 'YEARWEEK' => 33, 'BENCHMARK' => 33, 'BIT_COUNT' => 33, 'COLLATION' => 33, 'CONCAT_WS' => 33, 'DAYOFWEEK' => 33, 'DAYOFYEAR' => 33, 'DIMENSION' => 33, 'FROM_DAYS' => 33, 'GEOMETRYN' => 33, 'INET_ATON' => 33, 'INET_NTOA' => 33, 'LOAD_FILE' => 33, 'MBRWITHIN' => 33, 'MONTHNAME' => 33, 'NUMPOINTS' => 33, 'ROW_COUNT' => 33, 'SUBSTRING' => 33, 'UPDATEXML' => 33, 'BIT_LENGTH' => 33, 'CONVERT_TZ' => 33, 'DAYOFMONTH' => 33, 'EXPORT_SET' => 33, 'FOUND_ROWS' => 33, 'GET_FORMAT' => 33, 'INTERSECTS' => 33, 'MBRTOUCHES' => 33, 'MULTIPOINT' => 33, 'NAME_CONST' => 33, 'PERIOD_ADD' => 33, 'STARTPOINT' => 33, 'STDDEV_POP' => 33, 'TO_SECONDS' => 33, 'UNCOMPRESS' => 33, 'UUID_SHORT' => 33, 'WEEKOFYEAR' => 33, 'AES_DECRYPT' => 33, 'AES_ENCRYPT' => 33, 'CHAR_LENGTH' => 33, 'DATE_FORMAT' => 33, 'DES_DECRYPT' => 33, 'DES_ENCRYPT' => 33, 'FIND_IN_SET' => 33, 'GEOMFROMWKB' => 33, 'LINEFROMWKB' => 33, 'MBRCONTAINS' => 33, 'MBRDISJOINT' => 33, 'MBROVERLAPS' => 33, 'MICROSECOND' => 33, 'PERIOD_DIFF' => 33, 'POLYFROMWKB' => 33, 'SEC_TO_TIME' => 33, 'STDDEV_SAMP' => 33, 'STR_TO_DATE' => 33, 'SYSTEM_USER' => 33, 'TIME_FORMAT' => 33, 'TIME_TO_SEC' => 33, 'COERCIBILITY' => 33, 'EXTERIORRING' => 33, 'EXTRACTVALUE' => 33, 'GEOMETRYTYPE' => 33, 'GEOMFROMTEXT' => 33, 'GROUP_CONCAT' => 33, 'IS_FREE_LOCK' => 33, 'IS_USED_LOCK' => 33, 'LINEFROMTEXT' => 33, 'MLINEFROMWKB' => 33, 'MPOLYFROMWKB' => 33, 'MULTIPOLYGON' => 33, 'OCTET_LENGTH' => 33, 'OLD_PASSWORD' => 33, 'POINTFROMWKB' => 33, 'POLYFROMTEXT' => 33, 'RELEASE_LOCK' => 33, 'SESSION_USER' => 33, 'TIMESTAMPADD' => 33, 'CONNECTION_ID' => 33, 'FROM_UNIXTIME' => 33, 'INTERIORRINGN' => 33, 'MBRINTERSECTS' => 33, 'MLINEFROMTEXT' => 33, 'MPOINTFROMWKB' => 33, 'MPOLYFROMTEXT' => 33, 'NUMGEOMETRIES' => 33, 'POINTFROMTEXT' => 33, 'TIMESTAMPDIFF' => 33, 'LAST_INSERT_ID' => 33, 'MPOINTFROMTEXT' => 33, 'POLYGONFROMWKB' => 33, 'UNIX_TIMESTAMP' => 33, 'GEOMCOLLFROMWKB' => 33, 'MASTER_POS_WAIT' => 33, 'POLYGONFROMTEXT' => 33, 'SUBSTRING_INDEX' => 33, 'CHARACTER_LENGTH' => 33, 'GEOMCOLLFROMTEXT' => 33, 'GEOMETRYFROMTEXT' => 33, 'NUMINTERIORRINGS' => 33, 'LINESTRINGFROMWKB' => 33, 'MULTIPOINTFROMWKB' => 33, 'MULTIPOINTFROMTEXT' => 33, 'MULTIPOLYGONFROMWKB' => 33, 'UNCOMPRESSED_LENGTH' => 33, 'MULTIPOLYGONFROMTEXT' => 33, 'MULTILINESTRINGFROMWKB' => 33, 'MULTILINESTRINGFROMTEXT' => 33, 'GEOMETRYCOLLECTIONFROMWKB' => 33, 'GEOMETRYCOLLECTIONFROMTEXT' => 33, 'IF' => 35, 'IN' => 35, 'MOD' => 35, 'LEFT' => 35, 'MATCH' => 35, 'RIGHT' => 35, 'EXISTS' => 35, 'INSERT' => 35, 'REPEAT' => 35, 'SCHEMA' => 35, 'VALUES' => 35, 'CONVERT' => 35, 'DEFAULT' => 35, 'REPLACE' => 35, 'DATABASE' => 35, 'UTC_DATE' => 35, 'UTC_TIME' => 35, 'LOCALTIME' => 35, 'CURRENT_DATE' => 35, 'CURRENT_TIME' => 35, 'CURRENT_USER' => 35, 'UTC_TIMESTAMP' => 35, 'LOCALTIMESTAMP' => 35, 'CURRENT_TIMESTAMP' => 35, 'NOT IN' => 39, 'DATE' => 41, 'TIME' => 41, 'YEAR' => 41, 'POINT' => 41, 'POLYGON' => 41, 'TIMESTAMP' => 41, 'LINESTRING' => 41, 'MULTILINESTRING' => 41, 'GEOMETRYCOLLECTION' => 41, 'CHAR' => 43, 'BINARY' => 43, 'INTERVAL' => 43);
    }
    /**
     * Context for MySQL 5.7.
     *
     * @category   Contexts
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ContextMySql50700 extends \PhpMyAdmin\SqlParser\Context
    {
        /**
         * List of keywords.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * @var array
         */
        public static $KEYWORDS = array('AT' => 1, 'DO' => 1, 'IO' => 1, 'NO' => 1, 'XA' => 1, 'ANY' => 1, 'CPU' => 1, 'END' => 1, 'IPC' => 1, 'NDB' => 1, 'NEW' => 1, 'ONE' => 1, 'ROW' => 1, 'XID' => 1, 'BOOL' => 1, 'BYTE' => 1, 'CODE' => 1, 'CUBE' => 1, 'DATA' => 1, 'DISK' => 1, 'ENDS' => 1, 'FAST' => 1, 'FILE' => 1, 'FULL' => 1, 'HASH' => 1, 'HELP' => 1, 'HOST' => 1, 'LAST' => 1, 'LESS' => 1, 'LIST' => 1, 'LOGS' => 1, 'MODE' => 1, 'NAME' => 1, 'NEXT' => 1, 'NONE' => 1, 'ONLY' => 1, 'OPEN' => 1, 'PAGE' => 1, 'PORT' => 1, 'PREV' => 1, 'ROWS' => 1, 'SLOW' => 1, 'SOME' => 1, 'STOP' => 1, 'THAN' => 1, 'TYPE' => 1, 'VIEW' => 1, 'WAIT' => 1, 'WORK' => 1, 'X509' => 1, 'AFTER' => 1, 'BEGIN' => 1, 'BLOCK' => 1, 'BTREE' => 1, 'CACHE' => 1, 'CHAIN' => 1, 'CLOSE' => 1, 'ERROR' => 1, 'EVENT' => 1, 'EVERY' => 1, 'FIRST' => 1, 'FIXED' => 1, 'FLUSH' => 1, 'FOUND' => 1, 'HOSTS' => 1, 'LEVEL' => 1, 'LOCAL' => 1, 'LOCKS' => 1, 'MERGE' => 1, 'MUTEX' => 1, 'NAMES' => 1, 'NCHAR' => 1, 'NEVER' => 1, 'OWNER' => 1, 'PHASE' => 1, 'PROXY' => 1, 'QUERY' => 1, 'QUICK' => 1, 'RELAY' => 1, 'RESET' => 1, 'RTREE' => 1, 'SHARE' => 1, 'SLAVE' => 1, 'START' => 1, 'SUPER' => 1, 'SWAPS' => 1, 'TYPES' => 1, 'UNTIL' => 1, 'VALUE' => 1, 'ACTION' => 1, 'ALWAYS' => 1, 'BACKUP' => 1, 'BINLOG' => 1, 'CIPHER' => 1, 'CLIENT' => 1, 'COMMIT' => 1, 'ENABLE' => 1, 'ENGINE' => 1, 'ERRORS' => 1, 'ESCAPE' => 1, 'EVENTS' => 1, 'EXPIRE' => 1, 'EXPORT' => 1, 'FAULTS' => 1, 'FIELDS' => 1, 'FILTER' => 1, 'GLOBAL' => 1, 'GRANTS' => 1, 'IMPORT' => 1, 'ISSUER' => 1, 'LEAVES' => 1, 'MASTER' => 1, 'MEDIUM' => 1, 'MEMORY' => 1, 'MODIFY' => 1, 'NUMBER' => 1, 'OFFSET' => 1, 'PARSER' => 1, 'PLUGIN' => 1, 'RELOAD' => 1, 'REMOVE' => 1, 'REPAIR' => 1, 'RESUME' => 1, 'ROLLUP' => 1, 'SERVER' => 1, 'SIGNED' => 1, 'SIMPLE' => 1, 'SOCKET' => 1, 'SONAME' => 1, 'SOUNDS' => 1, 'SOURCE' => 1, 'STARTS' => 1, 'STATUS' => 1, 'STRING' => 1, 'TABLES' => 1, 'ACCOUNT' => 1, 'ANALYSE' => 1, 'CHANGED' => 1, 'CHANNEL' => 1, 'COLUMNS' => 1, 'COMMENT' => 1, 'COMPACT' => 1, 'CONTEXT' => 1, 'CURRENT' => 1, 'DEFINER' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DYNAMIC' => 1, 'ENGINES' => 1, 'EXECUTE' => 1, 'FOLLOWS' => 1, 'GENERAL' => 1, 'HANDLER' => 1, 'INDEXES' => 1, 'INSTALL' => 1, 'INVOKER' => 1, 'LOGFILE' => 1, 'MIGRATE' => 1, 'NO_WAIT' => 1, 'OPTIONS' => 1, 'PARTIAL' => 1, 'PLUGINS' => 1, 'PREPARE' => 1, 'PROFILE' => 1, 'REBUILD' => 1, 'RECOVER' => 1, 'RESTORE' => 1, 'RETURNS' => 1, 'ROUTINE' => 1, 'SESSION' => 1, 'STACKED' => 1, 'STORAGE' => 1, 'SUBJECT' => 1, 'SUSPEND' => 1, 'UNICODE' => 1, 'UNKNOWN' => 1, 'UPGRADE' => 1, 'USE_FRM' => 1, 'WITHOUT' => 1, 'WRAPPER' => 1, 'CASCADED' => 1, 'CHECKSUM' => 1, 'DATAFILE' => 1, 'DUMPFILE' => 1, 'EXCHANGE' => 1, 'EXTENDED' => 1, 'FUNCTION' => 1, 'LANGUAGE' => 1, 'MAX_ROWS' => 1, 'MAX_SIZE' => 1, 'MIN_ROWS' => 1, 'NATIONAL' => 1, 'NVARCHAR' => 1, 'PRECEDES' => 1, 'PRESERVE' => 1, 'PROFILES' => 1, 'REDOFILE' => 1, 'RELAYLOG' => 1, 'ROLLBACK' => 1, 'SCHEDULE' => 1, 'SECURITY' => 1, 'SHUTDOWN' => 1, 'SNAPSHOT' => 1, 'SWITCHES' => 1, 'TRIGGERS' => 1, 'UNDOFILE' => 1, 'WARNINGS' => 1, 'AGGREGATE' => 1, 'ALGORITHM' => 1, 'COMMITTED' => 1, 'DIRECTORY' => 1, 'DUPLICATE' => 1, 'EXPANSION' => 1, 'IO_THREAD' => 1, 'ISOLATION' => 1, 'NODEGROUP' => 1, 'PACK_KEYS' => 1, 'READ_ONLY' => 1, 'REDUNDANT' => 1, 'SAVEPOINT' => 1, 'SQL_CACHE' => 1, 'TEMPORARY' => 1, 'TEMPTABLE' => 1, 'UNDEFINED' => 1, 'UNINSTALL' => 1, 'VARIABLES' => 1, 'COMPLETION' => 1, 'COMPRESSED' => 1, 'CONCURRENT' => 1, 'CONNECTION' => 1, 'CONSISTENT' => 1, 'DEALLOCATE' => 1, 'IDENTIFIED' => 1, 'MASTER_SSL' => 1, 'NDBCLUSTER' => 1, 'PARTITIONS' => 1, 'PERSISTENT' => 1, 'PLUGIN_DIR' => 1, 'PRIVILEGES' => 1, 'REORGANIZE' => 1, 'REPEATABLE' => 1, 'ROW_FORMAT' => 1, 'SQL_THREAD' => 1, 'TABLESPACE' => 1, 'TABLE_NAME' => 1, 'VALIDATION' => 1, 'COLUMN_NAME' => 1, 'COMPRESSION' => 1, 'CURSOR_NAME' => 1, 'DIAGNOSTICS' => 1, 'EXTENT_SIZE' => 1, 'MASTER_HOST' => 1, 'MASTER_PORT' => 1, 'MASTER_USER' => 1, 'MYSQL_ERRNO' => 1, 'NONBLOCKING' => 1, 'PROCESSLIST' => 1, 'REPLICATION' => 1, 'SCHEMA_NAME' => 1, 'SQL_TSI_DAY' => 1, 'TRANSACTION' => 1, 'UNCOMMITTED' => 1, 'CATALOG_NAME' => 1, 'CLASS_ORIGIN' => 1, 'DEFAULT_AUTH' => 1, 'DES_KEY_FILE' => 1, 'INITIAL_SIZE' => 1, 'MASTER_DELAY' => 1, 'MESSAGE_TEXT' => 1, 'PARTITIONING' => 1, 'RELAY_THREAD' => 1, 'SERIALIZABLE' => 1, 'SQL_NO_CACHE' => 1, 'SQL_TSI_HOUR' => 1, 'SQL_TSI_WEEK' => 1, 'SQL_TSI_YEAR' => 1, 'SUBPARTITION' => 1, 'COLUMN_FORMAT' => 1, 'INSERT_METHOD' => 1, 'MASTER_SSL_CA' => 1, 'RELAY_LOG_POS' => 1, 'SQL_TSI_MONTH' => 1, 'SUBPARTITIONS' => 1, 'AUTO_INCREMENT' => 1, 'AVG_ROW_LENGTH' => 1, 'KEY_BLOCK_SIZE' => 1, 'MASTER_LOG_POS' => 1, 'MASTER_SSL_CRL' => 1, 'MASTER_SSL_KEY' => 1, 'RELAY_LOG_FILE' => 1, 'SQL_TSI_MINUTE' => 1, 'SQL_TSI_SECOND' => 1, 'TABLE_CHECKSUM' => 1, 'USER_RESOURCES' => 1, 'AUTOEXTEND_SIZE' => 1, 'CONSTRAINT_NAME' => 1, 'DELAY_KEY_WRITE' => 1, 'FILE_BLOCK_SIZE' => 1, 'MASTER_LOG_FILE' => 1, 'MASTER_PASSWORD' => 1, 'MASTER_SSL_CERT' => 1, 'PARSE_GCOL_EXPR' => 1, 'REPLICATE_DO_DB' => 1, 'SQL_AFTER_GTIDS' => 1, 'SQL_TSI_QUARTER' => 1, 'SUBCLASS_ORIGIN' => 1, 'MASTER_SERVER_ID' => 1, 'REDO_BUFFER_SIZE' => 1, 'SQL_BEFORE_GTIDS' => 1, 'STATS_PERSISTENT' => 1, 'UNDO_BUFFER_SIZE' => 1, 'CONSTRAINT_SCHEMA' => 1, 'GROUP_REPLICATION' => 1, 'IGNORE_SERVER_IDS' => 1, 'MASTER_SSL_CAPATH' => 1, 'MASTER_SSL_CIPHER' => 1, 'RETURNED_SQLSTATE' => 1, 'SQL_BUFFER_RESULT' => 1, 'STATS_AUTO_RECALC' => 1, 'CONSTRAINT_CATALOG' => 1, 'MASTER_RETRY_COUNT' => 1, 'MASTER_SSL_CRLPATH' => 1, 'MAX_STATEMENT_TIME' => 1, 'REPLICATE_DO_TABLE' => 1, 'SQL_AFTER_MTS_GAPS' => 1, 'STATS_SAMPLE_PAGES' => 1, 'REPLICATE_IGNORE_DB' => 1, 'MASTER_AUTO_POSITION' => 1, 'MASTER_CONNECT_RETRY' => 1, 'MAX_QUERIES_PER_HOUR' => 1, 'MAX_UPDATES_PER_HOUR' => 1, 'MAX_USER_CONNECTIONS' => 1, 'REPLICATE_REWRITE_DB' => 1, 'REPLICATE_IGNORE_TABLE' => 1, 'MASTER_HEARTBEAT_PERIOD' => 1, 'REPLICATE_WILD_DO_TABLE' => 1, 'MAX_CONNECTIONS_PER_HOUR' => 1, 'REPLICATE_WILD_IGNORE_TABLE' => 1, 'AS' => 3, 'BY' => 3, 'IS' => 3, 'ON' => 3, 'OR' => 3, 'TO' => 3, 'ADD' => 3, 'ALL' => 3, 'AND' => 3, 'ASC' => 3, 'DEC' => 3, 'DIV' => 3, 'FOR' => 3, 'GET' => 3, 'NOT' => 3, 'OUT' => 3, 'SQL' => 3, 'SSL' => 3, 'USE' => 3, 'XOR' => 3, 'BOTH' => 3, 'CALL' => 3, 'CASE' => 3, 'DESC' => 3, 'DROP' => 3, 'DUAL' => 3, 'EACH' => 3, 'ELSE' => 3, 'EXIT' => 3, 'FROM' => 3, 'INT1' => 3, 'INT2' => 3, 'INT3' => 3, 'INT4' => 3, 'INT8' => 3, 'INTO' => 3, 'JOIN' => 3, 'KEYS' => 3, 'KILL' => 3, 'LIKE' => 3, 'LOAD' => 3, 'LOCK' => 3, 'LONG' => 3, 'LOOP' => 3, 'NULL' => 3, 'READ' => 3, 'SHOW' => 3, 'THEN' => 3, 'TRUE' => 3, 'UNDO' => 3, 'WHEN' => 3, 'WITH' => 3, 'ALTER' => 3, 'CHECK' => 3, 'CROSS' => 3, 'FALSE' => 3, 'FETCH' => 3, 'FORCE' => 3, 'GRANT' => 3, 'GROUP' => 3, 'INNER' => 3, 'INOUT' => 3, 'LEAVE' => 3, 'LIMIT' => 3, 'LINES' => 3, 'ORDER' => 3, 'OUTER' => 3, 'PURGE' => 3, 'RANGE' => 3, 'READS' => 3, 'RLIKE' => 3, 'TABLE' => 3, 'UNION' => 3, 'USAGE' => 3, 'USING' => 3, 'WHERE' => 3, 'WHILE' => 3, 'WRITE' => 3, 'BEFORE' => 3, 'CHANGE' => 3, 'COLUMN' => 3, 'CREATE' => 3, 'CURSOR' => 3, 'DELETE' => 3, 'ELSEIF' => 3, 'FLOAT4' => 3, 'FLOAT8' => 3, 'HAVING' => 3, 'IGNORE' => 3, 'INFILE' => 3, 'LINEAR' => 3, 'OPTION' => 3, 'REGEXP' => 3, 'RENAME' => 3, 'RETURN' => 3, 'REVOKE' => 3, 'SELECT' => 3, 'SIGNAL' => 3, 'STORED' => 3, 'UNLOCK' => 3, 'UPDATE' => 3, 'ANALYZE' => 3, 'BETWEEN' => 3, 'CASCADE' => 3, 'COLLATE' => 3, 'DECLARE' => 3, 'DELAYED' => 3, 'ESCAPED' => 3, 'EXPLAIN' => 3, 'FOREIGN' => 3, 'ITERATE' => 3, 'LEADING' => 3, 'NATURAL' => 3, 'OUTFILE' => 3, 'PRIMARY' => 3, 'RELEASE' => 3, 'REQUIRE' => 3, 'SCHEMAS' => 3, 'TRIGGER' => 3, 'VARYING' => 3, 'VIRTUAL' => 3, 'CONTINUE' => 3, 'DAY_HOUR' => 3, 'DESCRIBE' => 3, 'DISTINCT' => 3, 'ENCLOSED' => 3, 'MAXVALUE' => 3, 'MODIFIES' => 3, 'OPTIMIZE' => 3, 'RESIGNAL' => 3, 'RESTRICT' => 3, 'SPECIFIC' => 3, 'SQLSTATE' => 3, 'STARTING' => 3, 'TRAILING' => 3, 'UNSIGNED' => 3, 'ZEROFILL' => 3, 'CONDITION' => 3, 'DATABASES' => 3, 'GENERATED' => 3, 'MIDDLEINT' => 3, 'PARTITION' => 3, 'PRECISION' => 3, 'PROCEDURE' => 3, 'SENSITIVE' => 3, 'SEPARATOR' => 3, 'ACCESSIBLE' => 3, 'ASENSITIVE' => 3, 'CONSTRAINT' => 3, 'DAY_MINUTE' => 3, 'DAY_SECOND' => 3, 'OPTIONALLY' => 3, 'READ_WRITE' => 3, 'REFERENCES' => 3, 'SQLWARNING' => 3, 'TERMINATED' => 3, 'YEAR_MONTH' => 3, 'DISTINCTROW' => 3, 'HOUR_MINUTE' => 3, 'HOUR_SECOND' => 3, 'INSENSITIVE' => 3, 'MASTER_BIND' => 3, 'LOW_PRIORITY' => 3, 'SQLEXCEPTION' => 3, 'VARCHARACTER' => 3, 'DETERMINISTIC' => 3, 'HIGH_PRIORITY' => 3, 'MINUTE_SECOND' => 3, 'STRAIGHT_JOIN' => 3, 'IO_AFTER_GTIDS' => 3, 'SQL_BIG_RESULT' => 3, 'DAY_MICROSECOND' => 3, 'IO_BEFORE_GTIDS' => 3, 'OPTIMIZER_COSTS' => 3, 'HOUR_MICROSECOND' => 3, 'SQL_SMALL_RESULT' => 3, 'MINUTE_MICROSECOND' => 3, 'NO_WRITE_TO_BINLOG' => 3, 'SECOND_MICROSECOND' => 3, 'SQL_CALC_FOUND_ROWS' => 3, 'MASTER_SSL_VERIFY_SERVER_CERT' => 3, 'GROUP BY' => 7, 'NOT NULL' => 7, 'ORDER BY' => 7, 'SET NULL' => 7, 'AND CHAIN' => 7, 'FULL JOIN' => 7, 'IF EXISTS' => 7, 'LEFT JOIN' => 7, 'LESS THAN' => 7, 'LOAD DATA' => 7, 'NO ACTION' => 7, 'ON DELETE' => 7, 'ON UPDATE' => 7, 'UNION ALL' => 7, 'CROSS JOIN' => 7, 'ESCAPED BY' => 7, 'FOR UPDATE' => 7, 'INNER JOIN' => 7, 'LINEAR KEY' => 7, 'NO RELEASE' => 7, 'OR REPLACE' => 7, 'RIGHT JOIN' => 7, 'ENCLOSED BY' => 7, 'LINEAR HASH' => 7, 'STARTING BY' => 7, 'AND NO CHAIN' => 7, 'FOR EACH ROW' => 7, 'NATURAL JOIN' => 7, 'PARTITION BY' => 7, 'SET PASSWORD' => 7, 'SQL SECURITY' => 7, 'CHARACTER SET' => 7, 'IF NOT EXISTS' => 7, 'TERMINATED BY' => 7, 'DATA DIRECTORY' => 7, 'UNION DISTINCT' => 7, 'DEFAULT CHARSET' => 7, 'DEFAULT COLLATE' => 7, 'FULL OUTER JOIN' => 7, 'INDEX DIRECTORY' => 7, 'LEFT OUTER JOIN' => 7, 'SUBPARTITION BY' => 7, 'GENERATED ALWAYS' => 7, 'RIGHT OUTER JOIN' => 7, 'NATURAL LEFT JOIN' => 7, 'START TRANSACTION' => 7, 'LOCK IN SHARE MODE' => 7, 'NATURAL RIGHT JOIN' => 7, 'SELECT TRANSACTION' => 7, 'DEFAULT CHARACTER SET' => 7, 'NATURAL LEFT OUTER JOIN' => 7, 'NATURAL RIGHT OUTER JOIN' => 7, 'WITH CONSISTENT SNAPSHOT' => 7, 'BIT' => 9, 'XML' => 9, 'ENUM' => 9, 'JSON' => 9, 'TEXT' => 9, 'ARRAY' => 9, 'SERIAL' => 9, 'BOOLEAN' => 9, 'DATETIME' => 9, 'GEOMETRY' => 9, 'MULTISET' => 9, 'MULTILINEPOINT' => 9, 'MULTILINEPOLYGON' => 9, 'INT' => 11, 'SET' => 11, 'BLOB' => 11, 'REAL' => 11, 'FLOAT' => 11, 'BIGINT' => 11, 'DOUBLE' => 11, 'DECIMAL' => 11, 'INTEGER' => 11, 'NUMERIC' => 11, 'TINYINT' => 11, 'VARCHAR' => 11, 'LONGBLOB' => 11, 'LONGTEXT' => 11, 'SMALLINT' => 11, 'TINYBLOB' => 11, 'TINYTEXT' => 11, 'CHARACTER' => 11, 'MEDIUMINT' => 11, 'VARBINARY' => 11, 'MEDIUMBLOB' => 11, 'MEDIUMTEXT' => 11, 'BINARY VARYING' => 15, 'KEY' => 19, 'INDEX' => 19, 'UNIQUE' => 19, 'SPATIAL' => 19, 'FULLTEXT' => 19, 'INDEX KEY' => 23, 'UNIQUE KEY' => 23, 'FOREIGN KEY' => 23, 'PRIMARY KEY' => 23, 'SPATIAL KEY' => 23, 'FULLTEXT KEY' => 23, 'UNIQUE INDEX' => 23, 'SPATIAL INDEX' => 23, 'FULLTEXT INDEX' => 23, 'X' => 33, 'Y' => 33, 'LN' => 33, 'PI' => 33, 'ABS' => 33, 'AVG' => 33, 'BIN' => 33, 'COS' => 33, 'COT' => 33, 'DAY' => 33, 'ELT' => 33, 'EXP' => 33, 'HEX' => 33, 'LOG' => 33, 'MAX' => 33, 'MD5' => 33, 'MID' => 33, 'MIN' => 33, 'NOW' => 33, 'OCT' => 33, 'ORD' => 33, 'POW' => 33, 'SHA' => 33, 'SIN' => 33, 'STD' => 33, 'SUM' => 33, 'TAN' => 33, 'ACOS' => 33, 'AREA' => 33, 'ASIN' => 33, 'ATAN' => 33, 'CAST' => 33, 'CEIL' => 33, 'CONV' => 33, 'HOUR' => 33, 'LOG2' => 33, 'LPAD' => 33, 'RAND' => 33, 'RPAD' => 33, 'SHA1' => 33, 'SHA2' => 33, 'SIGN' => 33, 'SQRT' => 33, 'SRID' => 33, 'ST_X' => 33, 'ST_Y' => 33, 'TRIM' => 33, 'USER' => 33, 'UUID' => 33, 'WEEK' => 33, 'ASCII' => 33, 'ASWKB' => 33, 'ASWKT' => 33, 'ATAN2' => 33, 'COUNT' => 33, 'CRC32' => 33, 'FIELD' => 33, 'FLOOR' => 33, 'INSTR' => 33, 'LCASE' => 33, 'LEAST' => 33, 'LOG10' => 33, 'LOWER' => 33, 'LTRIM' => 33, 'MONTH' => 33, 'POWER' => 33, 'QUOTE' => 33, 'ROUND' => 33, 'RTRIM' => 33, 'SLEEP' => 33, 'SPACE' => 33, 'UCASE' => 33, 'UNHEX' => 33, 'UPPER' => 33, 'ASTEXT' => 33, 'BIT_OR' => 33, 'BUFFER' => 33, 'CONCAT' => 33, 'DECODE' => 33, 'ENCODE' => 33, 'EQUALS' => 33, 'FORMAT' => 33, 'IFNULL' => 33, 'ISNULL' => 33, 'LENGTH' => 33, 'LOCATE' => 33, 'MINUTE' => 33, 'NULLIF' => 33, 'POINTN' => 33, 'SECOND' => 33, 'STDDEV' => 33, 'STRCMP' => 33, 'SUBSTR' => 33, 'WITHIN' => 33, 'ADDDATE' => 33, 'ADDTIME' => 33, 'AGAINST' => 33, 'BIT_AND' => 33, 'BIT_XOR' => 33, 'CEILING' => 33, 'CHARSET' => 33, 'CROSSES' => 33, 'CURDATE' => 33, 'CURTIME' => 33, 'DAYNAME' => 33, 'DEGREES' => 33, 'ENCRYPT' => 33, 'EXTRACT' => 33, 'GLENGTH' => 33, 'ISEMPTY' => 33, 'IS_IPV4' => 33, 'IS_IPV6' => 33, 'QUARTER' => 33, 'RADIANS' => 33, 'REVERSE' => 33, 'SOUNDEX' => 33, 'ST_AREA' => 33, 'ST_SRID' => 33, 'SUBDATE' => 33, 'SUBTIME' => 33, 'SYSDATE' => 33, 'TOUCHES' => 33, 'TO_DAYS' => 33, 'VAR_POP' => 33, 'VERSION' => 33, 'WEEKDAY' => 33, 'ASBINARY' => 33, 'CENTROID' => 33, 'COALESCE' => 33, 'COMPRESS' => 33, 'CONTAINS' => 33, 'DATEDIFF' => 33, 'DATE_ADD' => 33, 'DATE_SUB' => 33, 'DISJOINT' => 33, 'DISTANCE' => 33, 'ENDPOINT' => 33, 'ENVELOPE' => 33, 'GET_LOCK' => 33, 'GREATEST' => 33, 'ISCLOSED' => 33, 'ISSIMPLE' => 33, 'JSON_SET' => 33, 'MAKEDATE' => 33, 'MAKETIME' => 33, 'MAKE_SET' => 33, 'MBREQUAL' => 33, 'OVERLAPS' => 33, 'PASSWORD' => 33, 'POSITION' => 33, 'ST_ASWKB' => 33, 'ST_ASWKT' => 33, 'ST_UNION' => 33, 'TIMEDIFF' => 33, 'TRUNCATE' => 33, 'VARIANCE' => 33, 'VAR_SAMP' => 33, 'YEARWEEK' => 33, 'ANY_VALUE' => 33, 'BENCHMARK' => 33, 'BIT_COUNT' => 33, 'COLLATION' => 33, 'CONCAT_WS' => 33, 'DAYOFWEEK' => 33, 'DAYOFYEAR' => 33, 'DIMENSION' => 33, 'FROM_DAYS' => 33, 'GEOMETRYN' => 33, 'INET_ATON' => 33, 'INET_NTOA' => 33, 'JSON_KEYS' => 33, 'JSON_TYPE' => 33, 'LOAD_FILE' => 33, 'MBRCOVERS' => 33, 'MBREQUALS' => 33, 'MBRWITHIN' => 33, 'MONTHNAME' => 33, 'NUMPOINTS' => 33, 'ROW_COUNT' => 33, 'ST_ASTEXT' => 33, 'ST_BUFFER' => 33, 'ST_EQUALS' => 33, 'ST_LENGTH' => 33, 'ST_POINTN' => 33, 'ST_WITHIN' => 33, 'SUBSTRING' => 33, 'TO_BASE64' => 33, 'UPDATEXML' => 33, 'BIT_LENGTH' => 33, 'CONVERT_TZ' => 33, 'CONVEXHULL' => 33, 'DAYOFMONTH' => 33, 'EXPORT_SET' => 33, 'FOUND_ROWS' => 33, 'GET_FORMAT' => 33, 'INET6_ATON' => 33, 'INET6_NTOA' => 33, 'INTERSECTS' => 33, 'JSON_ARRAY' => 33, 'JSON_DEPTH' => 33, 'JSON_MERGE' => 33, 'JSON_QUOTE' => 33, 'JSON_VALID' => 33, 'MBRTOUCHES' => 33, 'MULTIPOINT' => 33, 'NAME_CONST' => 33, 'PERIOD_ADD' => 33, 'STARTPOINT' => 33, 'STDDEV_POP' => 33, 'ST_CROSSES' => 33, 'ST_GEOHASH' => 33, 'ST_ISEMPTY' => 33, 'ST_ISVALID' => 33, 'ST_TOUCHES' => 33, 'TO_SECONDS' => 33, 'UNCOMPRESS' => 33, 'UUID_SHORT' => 33, 'WEEKOFYEAR' => 33, 'AES_DECRYPT' => 33, 'AES_ENCRYPT' => 33, 'CHAR_LENGTH' => 33, 'DATE_FORMAT' => 33, 'DES_DECRYPT' => 33, 'DES_ENCRYPT' => 33, 'FIND_IN_SET' => 33, 'FROM_BASE64' => 33, 'GEOMFROMWKB' => 33, 'GTID_SUBSET' => 33, 'JSON_INSERT' => 33, 'JSON_LENGTH' => 33, 'JSON_OBJECT' => 33, 'JSON_PRETTY' => 33, 'JSON_REMOVE' => 33, 'JSON_SEARCH' => 33, 'LINEFROMWKB' => 33, 'MBRCONTAINS' => 33, 'MBRDISJOINT' => 33, 'MBROVERLAPS' => 33, 'MICROSECOND' => 33, 'PERIOD_DIFF' => 33, 'POLYFROMWKB' => 33, 'SEC_TO_TIME' => 33, 'STDDEV_SAMP' => 33, 'STR_TO_DATE' => 33, 'ST_ASBINARY' => 33, 'ST_CENTROID' => 33, 'ST_CONTAINS' => 33, 'ST_DISJOINT' => 33, 'ST_DISTANCE' => 33, 'ST_ENDPOINT' => 33, 'ST_ENVELOPE' => 33, 'ST_ISCLOSED' => 33, 'ST_ISSIMPLE' => 33, 'ST_OVERLAPS' => 33, 'ST_SIMPLIFY' => 33, 'ST_VALIDATE' => 33, 'SYSTEM_USER' => 33, 'TIME_FORMAT' => 33, 'TIME_TO_SEC' => 33, 'COERCIBILITY' => 33, 'EXTERIORRING' => 33, 'EXTRACTVALUE' => 33, 'GEOMETRYTYPE' => 33, 'GEOMFROMTEXT' => 33, 'GROUP_CONCAT' => 33, 'IS_FREE_LOCK' => 33, 'IS_USED_LOCK' => 33, 'JSON_EXTRACT' => 33, 'JSON_REPLACE' => 33, 'JSON_UNQUOTE' => 33, 'LINEFROMTEXT' => 33, 'MBRCOVEREDBY' => 33, 'MLINEFROMWKB' => 33, 'MPOLYFROMWKB' => 33, 'MULTIPOLYGON' => 33, 'OCTET_LENGTH' => 33, 'OLD_PASSWORD' => 33, 'POINTFROMWKB' => 33, 'POLYFROMTEXT' => 33, 'RANDOM_BYTES' => 33, 'RELEASE_LOCK' => 33, 'SESSION_USER' => 33, 'ST_ASGEOJSON' => 33, 'ST_DIMENSION' => 33, 'ST_GEOMETRYN' => 33, 'ST_NUMPOINTS' => 33, 'TIMESTAMPADD' => 33, 'CONNECTION_ID' => 33, 'FROM_UNIXTIME' => 33, 'GTID_SUBTRACT' => 33, 'INTERIORRINGN' => 33, 'JSON_CONTAINS' => 33, 'MBRINTERSECTS' => 33, 'MLINEFROMTEXT' => 33, 'MPOINTFROMWKB' => 33, 'MPOLYFROMTEXT' => 33, 'NUMGEOMETRIES' => 33, 'POINTFROMTEXT' => 33, 'ST_CONVEXHULL' => 33, 'ST_DIFFERENCE' => 33, 'ST_INTERSECTS' => 33, 'ST_STARTPOINT' => 33, 'TIMESTAMPDIFF' => 33, 'WEIGHT_STRING' => 33, 'IS_IPV4_COMPAT' => 33, 'IS_IPV4_MAPPED' => 33, 'LAST_INSERT_ID' => 33, 'MPOINTFROMTEXT' => 33, 'POLYGONFROMWKB' => 33, 'ST_GEOMFROMWKB' => 33, 'ST_LINEFROMWKB' => 33, 'ST_POLYFROMWKB' => 33, 'UNIX_TIMESTAMP' => 33, 'GEOMCOLLFROMWKB' => 33, 'MASTER_POS_WAIT' => 33, 'POLYGONFROMTEXT' => 33, 'ST_EXTERIORRING' => 33, 'ST_GEOMETRYTYPE' => 33, 'ST_GEOMFROMTEXT' => 33, 'ST_INTERSECTION' => 33, 'ST_LINEFROMTEXT' => 33, 'ST_MAKEENVELOPE' => 33, 'ST_MLINEFROMWKB' => 33, 'ST_MPOLYFROMWKB' => 33, 'ST_POINTFROMWKB' => 33, 'ST_POLYFROMTEXT' => 33, 'SUBSTRING_INDEX' => 33, 'CHARACTER_LENGTH' => 33, 'GEOMCOLLFROMTEXT' => 33, 'GEOMETRYFROMTEXT' => 33, 'JSON_MERGE_PATCH' => 33, 'NUMINTERIORRINGS' => 33, 'ST_INTERIORRINGN' => 33, 'ST_MLINEFROMTEXT' => 33, 'ST_MPOINTFROMWKB' => 33, 'ST_MPOLYFROMTEXT' => 33, 'ST_NUMGEOMETRIES' => 33, 'ST_POINTFROMTEXT' => 33, 'ST_SYMDIFFERENCE' => 33, 'JSON_ARRAY_APPEND' => 33, 'JSON_ARRAY_INSERT' => 33, 'JSON_STORAGE_FREE' => 33, 'JSON_STORAGE_SIZE' => 33, 'LINESTRINGFROMWKB' => 33, 'MULTIPOINTFROMWKB' => 33, 'RELEASE_ALL_LOCKS' => 33, 'ST_LATFROMGEOHASH' => 33, 'ST_MPOINTFROMTEXT' => 33, 'ST_POLYGONFROMWKB' => 33, 'JSON_CONTAINS_PATH' => 33, 'MULTIPOINTFROMTEXT' => 33, 'ST_BUFFER_STRATEGY' => 33, 'ST_DISTANCE_SPHERE' => 33, 'ST_GEOMCOLLFROMTXT' => 33, 'ST_GEOMCOLLFROMWKB' => 33, 'ST_GEOMFROMGEOJSON' => 33, 'ST_LONGFROMGEOHASH' => 33, 'ST_POLYGONFROMTEXT' => 33, 'JSON_MERGE_PRESERVE' => 33, 'MULTIPOLYGONFROMWKB' => 33, 'ST_GEOMCOLLFROMTEXT' => 33, 'ST_GEOMETRYFROMTEXT' => 33, 'ST_NUMINTERIORRINGS' => 33, 'ST_POINTFROMGEOHASH' => 33, 'UNCOMPRESSED_LENGTH' => 33, 'MULTIPOLYGONFROMTEXT' => 33, 'ST_LINESTRINGFROMWKB' => 33, 'ST_MULTIPOINTFROMWKB' => 33, 'ST_MULTIPOINTFROMTEXT' => 33, 'MULTILINESTRINGFROMWKB' => 33, 'ST_MULTIPOLYGONFROMWKB' => 33, 'MULTILINESTRINGFROMTEXT' => 33, 'ST_MULTIPOLYGONFROMTEXT' => 33, 'GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_MULTILINESTRINGFROMWKB' => 33, 'GEOMETRYCOLLECTIONFROMTEXT' => 33, 'ST_MULTILINESTRINGFROMTEXT' => 33, 'VALIDATE_PASSWORD_STRENGTH' => 33, 'WAIT_FOR_EXECUTED_GTID_SET' => 33, 'ST_GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_GEOMETRYCOLLECTIONFROMTEXT' => 33, 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS' => 33, 'IF' => 35, 'IN' => 35, 'MOD' => 35, 'LEFT' => 35, 'MATCH' => 35, 'RIGHT' => 35, 'EXISTS' => 35, 'INSERT' => 35, 'REPEAT' => 35, 'SCHEMA' => 35, 'VALUES' => 35, 'CONVERT' => 35, 'DEFAULT' => 35, 'REPLACE' => 35, 'DATABASE' => 35, 'UTC_DATE' => 35, 'UTC_TIME' => 35, 'LOCALTIME' => 35, 'CURRENT_DATE' => 35, 'CURRENT_TIME' => 35, 'CURRENT_USER' => 35, 'UTC_TIMESTAMP' => 35, 'LOCALTIMESTAMP' => 35, 'CURRENT_TIMESTAMP' => 35, 'NOT IN' => 39, 'DATE' => 41, 'TIME' => 41, 'YEAR' => 41, 'POINT' => 41, 'POLYGON' => 41, 'TIMESTAMP' => 41, 'LINESTRING' => 41, 'MULTILINESTRING' => 41, 'GEOMETRYCOLLECTION' => 41, 'CHAR' => 43, 'BINARY' => 43, 'INTERVAL' => 43);
    }
    /**
     * Context for MariaDB 10.3.
     *
     * @category   Contexts
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ContextMariaDb100300 extends \PhpMyAdmin\SqlParser\Context
    {
        /**
         * List of keywords.
         *
         * The value associated to each keyword represents its flags.
         *
         * @see Token::FLAG_KEYWORD_RESERVED Token::FLAG_KEYWORD_COMPOSED
         *      Token::FLAG_KEYWORD_DATA_TYPE Token::FLAG_KEYWORD_KEY
         *      Token::FLAG_KEYWORD_FUNCTION
         *
         * @var array
         */
        public static $KEYWORDS = array('AT' => 1, 'DO' => 1, 'IO' => 1, 'NO' => 1, 'XA' => 1, 'ANY' => 1, 'CPU' => 1, 'END' => 1, 'IPC' => 1, 'NDB' => 1, 'NEW' => 1, 'ONE' => 1, 'ROW' => 1, 'XID' => 1, 'BOOL' => 1, 'BYTE' => 1, 'CODE' => 1, 'CUBE' => 1, 'DATA' => 1, 'DISK' => 1, 'ENDS' => 1, 'FAST' => 1, 'FILE' => 1, 'FULL' => 1, 'HASH' => 1, 'HELP' => 1, 'HOST' => 1, 'LAST' => 1, 'LESS' => 1, 'LIST' => 1, 'LOGS' => 1, 'MODE' => 1, 'NAME' => 1, 'NEXT' => 1, 'NONE' => 1, 'ONLY' => 1, 'OPEN' => 1, 'PAGE' => 1, 'PORT' => 1, 'PREV' => 1, 'SLOW' => 1, 'SOME' => 1, 'STOP' => 1, 'THAN' => 1, 'TYPE' => 1, 'VIEW' => 1, 'WAIT' => 1, 'WORK' => 1, 'X509' => 1, 'AFTER' => 1, 'BEGIN' => 1, 'BLOCK' => 1, 'BTREE' => 1, 'CACHE' => 1, 'CHAIN' => 1, 'CLOSE' => 1, 'ERROR' => 1, 'EVENT' => 1, 'EVERY' => 1, 'FIRST' => 1, 'FIXED' => 1, 'FLUSH' => 1, 'FOUND' => 1, 'HOSTS' => 1, 'LEVEL' => 1, 'LOCAL' => 1, 'LOCKS' => 1, 'MERGE' => 1, 'MUTEX' => 1, 'NAMES' => 1, 'NCHAR' => 1, 'NEVER' => 1, 'OWNER' => 1, 'PHASE' => 1, 'PROXY' => 1, 'QUERY' => 1, 'QUICK' => 1, 'RELAY' => 1, 'RESET' => 1, 'RTREE' => 1, 'SHARE' => 1, 'SLAVE' => 1, 'START' => 1, 'SUPER' => 1, 'SWAPS' => 1, 'TYPES' => 1, 'UNTIL' => 1, 'VALUE' => 1, 'ACTION' => 1, 'ALWAYS' => 1, 'BACKUP' => 1, 'BINLOG' => 1, 'CIPHER' => 1, 'CLIENT' => 1, 'COMMIT' => 1, 'ENABLE' => 1, 'ENGINE' => 1, 'ERRORS' => 1, 'ESCAPE' => 1, 'EVENTS' => 1, 'EXPIRE' => 1, 'EXPORT' => 1, 'FAULTS' => 1, 'FIELDS' => 1, 'FILTER' => 1, 'GLOBAL' => 1, 'GRANTS' => 1, 'IMPORT' => 1, 'ISSUER' => 1, 'LEAVES' => 1, 'MASTER' => 1, 'MEDIUM' => 1, 'MEMORY' => 1, 'MODIFY' => 1, 'NUMBER' => 1, 'OFFSET' => 1, 'PARSER' => 1, 'PLUGIN' => 1, 'RELOAD' => 1, 'REMOVE' => 1, 'REPAIR' => 1, 'RESUME' => 1, 'ROLLUP' => 1, 'SERVER' => 1, 'SIGNED' => 1, 'SIMPLE' => 1, 'SOCKET' => 1, 'SONAME' => 1, 'SOUNDS' => 1, 'SOURCE' => 1, 'STARTS' => 1, 'STATUS' => 1, 'STRING' => 1, 'TABLES' => 1, 'ACCOUNT' => 1, 'ANALYSE' => 1, 'CHANGED' => 1, 'CHANNEL' => 1, 'COLUMNS' => 1, 'COMMENT' => 1, 'COMPACT' => 1, 'CONTEXT' => 1, 'CURRENT' => 1, 'DEFINER' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DYNAMIC' => 1, 'ENGINES' => 1, 'EXECUTE' => 1, 'FOLLOWS' => 1, 'GENERAL' => 1, 'HANDLER' => 1, 'INDEXES' => 1, 'INSTALL' => 1, 'INVOKER' => 1, 'LOGFILE' => 1, 'MIGRATE' => 1, 'NO_WAIT' => 1, 'OPTIONS' => 1, 'PARTIAL' => 1, 'PLUGINS' => 1, 'PREPARE' => 1, 'PROFILE' => 1, 'REBUILD' => 1, 'RECOVER' => 1, 'RESTORE' => 1, 'RETURNS' => 1, 'ROUTINE' => 1, 'SESSION' => 1, 'STACKED' => 1, 'STORAGE' => 1, 'SUBJECT' => 1, 'SUSPEND' => 1, 'UNICODE' => 1, 'UNKNOWN' => 1, 'UPGRADE' => 1, 'USE_FRM' => 1, 'WITHOUT' => 1, 'WRAPPER' => 1, 'CASCADED' => 1, 'CHECKSUM' => 1, 'DATAFILE' => 1, 'DUMPFILE' => 1, 'EXCHANGE' => 1, 'EXTENDED' => 1, 'FUNCTION' => 1, 'LANGUAGE' => 1, 'MAX_ROWS' => 1, 'MAX_SIZE' => 1, 'MIN_ROWS' => 1, 'NATIONAL' => 1, 'NVARCHAR' => 1, 'PRECEDES' => 1, 'PRESERVE' => 1, 'PROFILES' => 1, 'REDOFILE' => 1, 'RELAYLOG' => 1, 'ROLLBACK' => 1, 'SCHEDULE' => 1, 'SECURITY' => 1, 'SEQUENCE' => 1, 'SHUTDOWN' => 1, 'SNAPSHOT' => 1, 'SWITCHES' => 1, 'TRIGGERS' => 1, 'UNDOFILE' => 1, 'WARNINGS' => 1, 'AGGREGATE' => 1, 'ALGORITHM' => 1, 'COMMITTED' => 1, 'DIRECTORY' => 1, 'DUPLICATE' => 1, 'EXPANSION' => 1, 'INVISIBLE' => 1, 'IO_THREAD' => 1, 'ISOLATION' => 1, 'NODEGROUP' => 1, 'PACK_KEYS' => 1, 'READ_ONLY' => 1, 'REDUNDANT' => 1, 'SAVEPOINT' => 1, 'SQL_CACHE' => 1, 'TEMPORARY' => 1, 'TEMPTABLE' => 1, 'UNDEFINED' => 1, 'UNINSTALL' => 1, 'VARIABLES' => 1, 'COMPLETION' => 1, 'COMPRESSED' => 1, 'CONCURRENT' => 1, 'CONNECTION' => 1, 'CONSISTENT' => 1, 'DEALLOCATE' => 1, 'IDENTIFIED' => 1, 'MASTER_SSL' => 1, 'NDBCLUSTER' => 1, 'PARTITIONS' => 1, 'PERSISTENT' => 1, 'PLUGIN_DIR' => 1, 'PRIVILEGES' => 1, 'REORGANIZE' => 1, 'REPEATABLE' => 1, 'ROW_FORMAT' => 1, 'SQL_THREAD' => 1, 'TABLESPACE' => 1, 'TABLE_NAME' => 1, 'VALIDATION' => 1, 'COLUMN_NAME' => 1, 'COMPRESSION' => 1, 'CURSOR_NAME' => 1, 'DIAGNOSTICS' => 1, 'EXTENT_SIZE' => 1, 'MASTER_HOST' => 1, 'MASTER_PORT' => 1, 'MASTER_USER' => 1, 'MYSQL_ERRNO' => 1, 'NONBLOCKING' => 1, 'PROCESSLIST' => 1, 'REPLICATION' => 1, 'SCHEMA_NAME' => 1, 'SQL_TSI_DAY' => 1, 'TRANSACTION' => 1, 'UNCOMMITTED' => 1, 'CATALOG_NAME' => 1, 'CLASS_ORIGIN' => 1, 'DEFAULT_AUTH' => 1, 'DES_KEY_FILE' => 1, 'INITIAL_SIZE' => 1, 'MASTER_DELAY' => 1, 'MESSAGE_TEXT' => 1, 'PARTITIONING' => 1, 'RELAY_THREAD' => 1, 'SERIALIZABLE' => 1, 'SQL_NO_CACHE' => 1, 'SQL_TSI_HOUR' => 1, 'SQL_TSI_WEEK' => 1, 'SQL_TSI_YEAR' => 1, 'SUBPARTITION' => 1, 'COLUMN_FORMAT' => 1, 'INSERT_METHOD' => 1, 'MASTER_SSL_CA' => 1, 'RELAY_LOG_POS' => 1, 'SQL_TSI_MONTH' => 1, 'SUBPARTITIONS' => 1, 'AUTO_INCREMENT' => 1, 'AVG_ROW_LENGTH' => 1, 'KEY_BLOCK_SIZE' => 1, 'MASTER_LOG_POS' => 1, 'MASTER_SSL_CRL' => 1, 'MASTER_SSL_KEY' => 1, 'RELAY_LOG_FILE' => 1, 'SQL_TSI_MINUTE' => 1, 'SQL_TSI_SECOND' => 1, 'TABLE_CHECKSUM' => 1, 'USER_RESOURCES' => 1, 'AUTOEXTEND_SIZE' => 1, 'CONSTRAINT_NAME' => 1, 'DELAY_KEY_WRITE' => 1, 'FILE_BLOCK_SIZE' => 1, 'MASTER_LOG_FILE' => 1, 'MASTER_PASSWORD' => 1, 'MASTER_SSL_CERT' => 1, 'PARSE_GCOL_EXPR' => 1, 'REPLICATE_DO_DB' => 1, 'SQL_AFTER_GTIDS' => 1, 'SQL_TSI_QUARTER' => 1, 'SUBCLASS_ORIGIN' => 1, 'MASTER_SERVER_ID' => 1, 'REDO_BUFFER_SIZE' => 1, 'SQL_BEFORE_GTIDS' => 1, 'STATS_PERSISTENT' => 1, 'UNDO_BUFFER_SIZE' => 1, 'CONSTRAINT_SCHEMA' => 1, 'GROUP_REPLICATION' => 1, 'IGNORE_SERVER_IDS' => 1, 'MASTER_SSL_CAPATH' => 1, 'MASTER_SSL_CIPHER' => 1, 'RETURNED_SQLSTATE' => 1, 'SQL_BUFFER_RESULT' => 1, 'STATS_AUTO_RECALC' => 1, 'CONSTRAINT_CATALOG' => 1, 'MASTER_RETRY_COUNT' => 1, 'MASTER_SSL_CRLPATH' => 1, 'MAX_STATEMENT_TIME' => 1, 'REPLICATE_DO_TABLE' => 1, 'SQL_AFTER_MTS_GAPS' => 1, 'STATS_SAMPLE_PAGES' => 1, 'REPLICATE_IGNORE_DB' => 1, 'MASTER_AUTO_POSITION' => 1, 'MASTER_CONNECT_RETRY' => 1, 'MAX_QUERIES_PER_HOUR' => 1, 'MAX_UPDATES_PER_HOUR' => 1, 'MAX_USER_CONNECTIONS' => 1, 'REPLICATE_REWRITE_DB' => 1, 'REPLICATE_IGNORE_TABLE' => 1, 'MASTER_HEARTBEAT_PERIOD' => 1, 'REPLICATE_WILD_DO_TABLE' => 1, 'MAX_CONNECTIONS_PER_HOUR' => 1, 'REPLICATE_WILD_IGNORE_TABLE' => 1, 'AS' => 3, 'BY' => 3, 'IS' => 3, 'ON' => 3, 'OR' => 3, 'TO' => 3, 'ADD' => 3, 'ALL' => 3, 'AND' => 3, 'ASC' => 3, 'DEC' => 3, 'DIV' => 3, 'FOR' => 3, 'GET' => 3, 'NOT' => 3, 'OUT' => 3, 'SQL' => 3, 'SSL' => 3, 'USE' => 3, 'XOR' => 3, 'BOTH' => 3, 'CALL' => 3, 'CASE' => 3, 'DESC' => 3, 'DROP' => 3, 'DUAL' => 3, 'EACH' => 3, 'ELSE' => 3, 'EXIT' => 3, 'FROM' => 3, 'INT1' => 3, 'INT2' => 3, 'INT3' => 3, 'INT4' => 3, 'INT8' => 3, 'INTO' => 3, 'JOIN' => 3, 'KEYS' => 3, 'KILL' => 3, 'LIKE' => 3, 'LOAD' => 3, 'LOCK' => 3, 'LONG' => 3, 'LOOP' => 3, 'NULL' => 3, 'READ' => 3, 'ROWS' => 3, 'SHOW' => 3, 'THEN' => 3, 'TRUE' => 3, 'UNDO' => 3, 'WHEN' => 3, 'WITH' => 3, 'ALTER' => 3, 'CHECK' => 3, 'CROSS' => 3, 'FALSE' => 3, 'FETCH' => 3, 'FORCE' => 3, 'GRANT' => 3, 'GROUP' => 3, 'INNER' => 3, 'INOUT' => 3, 'LEAVE' => 3, 'LIMIT' => 3, 'LINES' => 3, 'ORDER' => 3, 'OUTER' => 3, 'PURGE' => 3, 'RANGE' => 3, 'READS' => 3, 'RLIKE' => 3, 'TABLE' => 3, 'UNION' => 3, 'USAGE' => 3, 'USING' => 3, 'WHERE' => 3, 'WHILE' => 3, 'WRITE' => 3, 'BEFORE' => 3, 'CHANGE' => 3, 'COLUMN' => 3, 'CREATE' => 3, 'CURSOR' => 3, 'DELETE' => 3, 'ELSEIF' => 3, 'EXCEPT' => 3, 'FLOAT4' => 3, 'FLOAT8' => 3, 'HAVING' => 3, 'IGNORE' => 3, 'INFILE' => 3, 'LINEAR' => 3, 'OPTION' => 3, 'REGEXP' => 3, 'RENAME' => 3, 'RETURN' => 3, 'REVOKE' => 3, 'SELECT' => 3, 'SIGNAL' => 3, 'STORED' => 3, 'UNLOCK' => 3, 'UPDATE' => 3, 'ANALYZE' => 3, 'BETWEEN' => 3, 'CASCADE' => 3, 'COLLATE' => 3, 'DECLARE' => 3, 'DELAYED' => 3, 'ESCAPED' => 3, 'EXPLAIN' => 3, 'FOREIGN' => 3, 'ITERATE' => 3, 'LEADING' => 3, 'NATURAL' => 3, 'OUTFILE' => 3, 'PRIMARY' => 3, 'RELEASE' => 3, 'REQUIRE' => 3, 'SCHEMAS' => 3, 'TRIGGER' => 3, 'VARYING' => 3, 'VIRTUAL' => 3, 'CONTINUE' => 3, 'DAY_HOUR' => 3, 'DESCRIBE' => 3, 'DISTINCT' => 3, 'ENCLOSED' => 3, 'MAXVALUE' => 3, 'MODIFIES' => 3, 'OPTIMIZE' => 3, 'RESIGNAL' => 3, 'RESTRICT' => 3, 'SPECIFIC' => 3, 'SQLSTATE' => 3, 'STARTING' => 3, 'TRAILING' => 3, 'UNSIGNED' => 3, 'ZEROFILL' => 3, 'CONDITION' => 3, 'DATABASES' => 3, 'GENERATED' => 3, 'INTERSECT' => 3, 'MIDDLEINT' => 3, 'PARTITION' => 3, 'PRECISION' => 3, 'PROCEDURE' => 3, 'RECURSIVE' => 3, 'SENSITIVE' => 3, 'SEPARATOR' => 3, 'ACCESSIBLE' => 3, 'ASENSITIVE' => 3, 'CONSTRAINT' => 3, 'DAY_MINUTE' => 3, 'DAY_SECOND' => 3, 'OPTIONALLY' => 3, 'READ_WRITE' => 3, 'REFERENCES' => 3, 'SQLWARNING' => 3, 'TERMINATED' => 3, 'YEAR_MONTH' => 3, 'DISTINCTROW' => 3, 'HOUR_MINUTE' => 3, 'HOUR_SECOND' => 3, 'INSENSITIVE' => 3, 'MASTER_BIND' => 3, 'LOW_PRIORITY' => 3, 'SQLEXCEPTION' => 3, 'VARCHARACTER' => 3, 'DETERMINISTIC' => 3, 'HIGH_PRIORITY' => 3, 'MINUTE_SECOND' => 3, 'STRAIGHT_JOIN' => 3, 'IO_AFTER_GTIDS' => 3, 'SQL_BIG_RESULT' => 3, 'DAY_MICROSECOND' => 3, 'IO_BEFORE_GTIDS' => 3, 'OPTIMIZER_COSTS' => 3, 'HOUR_MICROSECOND' => 3, 'SQL_SMALL_RESULT' => 3, 'MINUTE_MICROSECOND' => 3, 'NO_WRITE_TO_BINLOG' => 3, 'SECOND_MICROSECOND' => 3, 'SQL_CALC_FOUND_ROWS' => 3, 'MASTER_SSL_VERIFY_SERVER_CERT' => 3, 'GROUP BY' => 7, 'NOT NULL' => 7, 'ORDER BY' => 7, 'SET NULL' => 7, 'AND CHAIN' => 7, 'FULL JOIN' => 7, 'IF EXISTS' => 7, 'LEFT JOIN' => 7, 'LESS THAN' => 7, 'LOAD DATA' => 7, 'NO ACTION' => 7, 'ON DELETE' => 7, 'ON UPDATE' => 7, 'UNION ALL' => 7, 'CROSS JOIN' => 7, 'ESCAPED BY' => 7, 'FOR UPDATE' => 7, 'INNER JOIN' => 7, 'LINEAR KEY' => 7, 'NO RELEASE' => 7, 'OR REPLACE' => 7, 'RIGHT JOIN' => 7, 'ENCLOSED BY' => 7, 'LINEAR HASH' => 7, 'STARTING BY' => 7, 'AND NO CHAIN' => 7, 'FOR EACH ROW' => 7, 'NATURAL JOIN' => 7, 'PARTITION BY' => 7, 'SET PASSWORD' => 7, 'SQL SECURITY' => 7, 'CHARACTER SET' => 7, 'IF NOT EXISTS' => 7, 'TERMINATED BY' => 7, 'DATA DIRECTORY' => 7, 'UNION DISTINCT' => 7, 'DEFAULT CHARSET' => 7, 'DEFAULT COLLATE' => 7, 'FULL OUTER JOIN' => 7, 'INDEX DIRECTORY' => 7, 'LEFT OUTER JOIN' => 7, 'SUBPARTITION BY' => 7, 'GENERATED ALWAYS' => 7, 'RIGHT OUTER JOIN' => 7, 'NATURAL LEFT JOIN' => 7, 'START TRANSACTION' => 7, 'LOCK IN SHARE MODE' => 7, 'NATURAL RIGHT JOIN' => 7, 'SELECT TRANSACTION' => 7, 'DEFAULT CHARACTER SET' => 7, 'NATURAL LEFT OUTER JOIN' => 7, 'NATURAL RIGHT OUTER JOIN' => 7, 'WITH CONSISTENT SNAPSHOT' => 7, 'BIT' => 9, 'XML' => 9, 'ENUM' => 9, 'JSON' => 9, 'TEXT' => 9, 'ARRAY' => 9, 'SERIAL' => 9, 'BOOLEAN' => 9, 'DATETIME' => 9, 'GEOMETRY' => 9, 'MULTISET' => 9, 'MULTILINEPOINT' => 9, 'MULTILINEPOLYGON' => 9, 'INT' => 11, 'SET' => 11, 'BLOB' => 11, 'REAL' => 11, 'FLOAT' => 11, 'BIGINT' => 11, 'DOUBLE' => 11, 'DECIMAL' => 11, 'INTEGER' => 11, 'NUMERIC' => 11, 'TINYINT' => 11, 'VARCHAR' => 11, 'LONGBLOB' => 11, 'LONGTEXT' => 11, 'SMALLINT' => 11, 'TINYBLOB' => 11, 'TINYTEXT' => 11, 'CHARACTER' => 11, 'MEDIUMINT' => 11, 'VARBINARY' => 11, 'MEDIUMBLOB' => 11, 'MEDIUMTEXT' => 11, 'BINARY VARYING' => 15, 'KEY' => 19, 'INDEX' => 19, 'UNIQUE' => 19, 'SPATIAL' => 19, 'FULLTEXT' => 19, 'INDEX KEY' => 23, 'UNIQUE KEY' => 23, 'FOREIGN KEY' => 23, 'PRIMARY KEY' => 23, 'SPATIAL KEY' => 23, 'FULLTEXT KEY' => 23, 'UNIQUE INDEX' => 23, 'SPATIAL INDEX' => 23, 'FULLTEXT INDEX' => 23, 'X' => 33, 'Y' => 33, 'LN' => 33, 'PI' => 33, 'ABS' => 33, 'AVG' => 33, 'BIN' => 33, 'COS' => 33, 'COT' => 33, 'DAY' => 33, 'ELT' => 33, 'EXP' => 33, 'HEX' => 33, 'LOG' => 33, 'MAX' => 33, 'MD5' => 33, 'MID' => 33, 'MIN' => 33, 'NOW' => 33, 'OCT' => 33, 'ORD' => 33, 'POW' => 33, 'SHA' => 33, 'SIN' => 33, 'STD' => 33, 'SUM' => 33, 'TAN' => 33, 'ACOS' => 33, 'AREA' => 33, 'ASIN' => 33, 'ATAN' => 33, 'CAST' => 33, 'CEIL' => 33, 'CONV' => 33, 'HOUR' => 33, 'LOG2' => 33, 'LPAD' => 33, 'RAND' => 33, 'RPAD' => 33, 'SHA1' => 33, 'SHA2' => 33, 'SIGN' => 33, 'SQRT' => 33, 'SRID' => 33, 'ST_X' => 33, 'ST_Y' => 33, 'TRIM' => 33, 'USER' => 33, 'UUID' => 33, 'WEEK' => 33, 'ASCII' => 33, 'ASWKB' => 33, 'ASWKT' => 33, 'ATAN2' => 33, 'COUNT' => 33, 'CRC32' => 33, 'FIELD' => 33, 'FLOOR' => 33, 'INSTR' => 33, 'LCASE' => 33, 'LEAST' => 33, 'LOG10' => 33, 'LOWER' => 33, 'LTRIM' => 33, 'MONTH' => 33, 'POWER' => 33, 'QUOTE' => 33, 'ROUND' => 33, 'RTRIM' => 33, 'SLEEP' => 33, 'SPACE' => 33, 'UCASE' => 33, 'UNHEX' => 33, 'UPPER' => 33, 'ASTEXT' => 33, 'BIT_OR' => 33, 'BUFFER' => 33, 'CONCAT' => 33, 'DECODE' => 33, 'ENCODE' => 33, 'EQUALS' => 33, 'FORMAT' => 33, 'IFNULL' => 33, 'ISNULL' => 33, 'LENGTH' => 33, 'LOCATE' => 33, 'MINUTE' => 33, 'NULLIF' => 33, 'POINTN' => 33, 'SECOND' => 33, 'STDDEV' => 33, 'STRCMP' => 33, 'SUBSTR' => 33, 'WITHIN' => 33, 'ADDDATE' => 33, 'ADDTIME' => 33, 'AGAINST' => 33, 'BIT_AND' => 33, 'BIT_XOR' => 33, 'CEILING' => 33, 'CHARSET' => 33, 'CROSSES' => 33, 'CURDATE' => 33, 'CURTIME' => 33, 'DAYNAME' => 33, 'DEGREES' => 33, 'ENCRYPT' => 33, 'EXTRACT' => 33, 'GLENGTH' => 33, 'ISEMPTY' => 33, 'IS_IPV4' => 33, 'IS_IPV6' => 33, 'QUARTER' => 33, 'RADIANS' => 33, 'REVERSE' => 33, 'SOUNDEX' => 33, 'ST_AREA' => 33, 'ST_SRID' => 33, 'SUBDATE' => 33, 'SUBTIME' => 33, 'SYSDATE' => 33, 'TOUCHES' => 33, 'TO_DAYS' => 33, 'VAR_POP' => 33, 'VERSION' => 33, 'WEEKDAY' => 33, 'ASBINARY' => 33, 'CENTROID' => 33, 'COALESCE' => 33, 'COMPRESS' => 33, 'CONTAINS' => 33, 'DATEDIFF' => 33, 'DATE_ADD' => 33, 'DATE_SUB' => 33, 'DISJOINT' => 33, 'DISTANCE' => 33, 'ENDPOINT' => 33, 'ENVELOPE' => 33, 'GET_LOCK' => 33, 'GREATEST' => 33, 'ISCLOSED' => 33, 'ISSIMPLE' => 33, 'JSON_SET' => 33, 'MAKEDATE' => 33, 'MAKETIME' => 33, 'MAKE_SET' => 33, 'MBREQUAL' => 33, 'OVERLAPS' => 33, 'PASSWORD' => 33, 'POSITION' => 33, 'ST_ASWKB' => 33, 'ST_ASWKT' => 33, 'ST_UNION' => 33, 'TIMEDIFF' => 33, 'TRUNCATE' => 33, 'VARIANCE' => 33, 'VAR_SAMP' => 33, 'YEARWEEK' => 33, 'ANY_VALUE' => 33, 'BENCHMARK' => 33, 'BIT_COUNT' => 33, 'COLLATION' => 33, 'CONCAT_WS' => 33, 'DAYOFWEEK' => 33, 'DAYOFYEAR' => 33, 'DIMENSION' => 33, 'FROM_DAYS' => 33, 'GEOMETRYN' => 33, 'INET_ATON' => 33, 'INET_NTOA' => 33, 'JSON_KEYS' => 33, 'JSON_TYPE' => 33, 'LOAD_FILE' => 33, 'MBRCOVERS' => 33, 'MBREQUALS' => 33, 'MBRWITHIN' => 33, 'MONTHNAME' => 33, 'NUMPOINTS' => 33, 'ROW_COUNT' => 33, 'ST_ASTEXT' => 33, 'ST_BUFFER' => 33, 'ST_EQUALS' => 33, 'ST_LENGTH' => 33, 'ST_POINTN' => 33, 'ST_WITHIN' => 33, 'SUBSTRING' => 33, 'TO_BASE64' => 33, 'UPDATEXML' => 33, 'BIT_LENGTH' => 33, 'CONVERT_TZ' => 33, 'CONVEXHULL' => 33, 'DAYOFMONTH' => 33, 'EXPORT_SET' => 33, 'FOUND_ROWS' => 33, 'GET_FORMAT' => 33, 'INET6_ATON' => 33, 'INET6_NTOA' => 33, 'INTERSECTS' => 33, 'JSON_ARRAY' => 33, 'JSON_DEPTH' => 33, 'JSON_MERGE' => 33, 'JSON_QUOTE' => 33, 'JSON_VALID' => 33, 'MBRTOUCHES' => 33, 'MULTIPOINT' => 33, 'NAME_CONST' => 33, 'PERIOD_ADD' => 33, 'STARTPOINT' => 33, 'STDDEV_POP' => 33, 'ST_CROSSES' => 33, 'ST_GEOHASH' => 33, 'ST_ISEMPTY' => 33, 'ST_ISVALID' => 33, 'ST_TOUCHES' => 33, 'TO_SECONDS' => 33, 'UNCOMPRESS' => 33, 'UUID_SHORT' => 33, 'WEEKOFYEAR' => 33, 'AES_DECRYPT' => 33, 'AES_ENCRYPT' => 33, 'CHAR_LENGTH' => 33, 'DATE_FORMAT' => 33, 'DES_DECRYPT' => 33, 'DES_ENCRYPT' => 33, 'FIND_IN_SET' => 33, 'FROM_BASE64' => 33, 'GEOMFROMWKB' => 33, 'GTID_SUBSET' => 33, 'JSON_INSERT' => 33, 'JSON_LENGTH' => 33, 'JSON_OBJECT' => 33, 'JSON_PRETTY' => 33, 'JSON_REMOVE' => 33, 'JSON_SEARCH' => 33, 'LINEFROMWKB' => 33, 'MBRCONTAINS' => 33, 'MBRDISJOINT' => 33, 'MBROVERLAPS' => 33, 'MICROSECOND' => 33, 'PERIOD_DIFF' => 33, 'POLYFROMWKB' => 33, 'SEC_TO_TIME' => 33, 'STDDEV_SAMP' => 33, 'STR_TO_DATE' => 33, 'ST_ASBINARY' => 33, 'ST_CENTROID' => 33, 'ST_CONTAINS' => 33, 'ST_DISJOINT' => 33, 'ST_DISTANCE' => 33, 'ST_ENDPOINT' => 33, 'ST_ENVELOPE' => 33, 'ST_ISCLOSED' => 33, 'ST_ISSIMPLE' => 33, 'ST_OVERLAPS' => 33, 'ST_SIMPLIFY' => 33, 'ST_VALIDATE' => 33, 'SYSTEM_USER' => 33, 'TIME_FORMAT' => 33, 'TIME_TO_SEC' => 33, 'COERCIBILITY' => 33, 'EXTERIORRING' => 33, 'EXTRACTVALUE' => 33, 'GEOMETRYTYPE' => 33, 'GEOMFROMTEXT' => 33, 'GROUP_CONCAT' => 33, 'IS_FREE_LOCK' => 33, 'IS_USED_LOCK' => 33, 'JSON_EXTRACT' => 33, 'JSON_REPLACE' => 33, 'JSON_UNQUOTE' => 33, 'LINEFROMTEXT' => 33, 'MBRCOVEREDBY' => 33, 'MLINEFROMWKB' => 33, 'MPOLYFROMWKB' => 33, 'MULTIPOLYGON' => 33, 'OCTET_LENGTH' => 33, 'OLD_PASSWORD' => 33, 'POINTFROMWKB' => 33, 'POLYFROMTEXT' => 33, 'RANDOM_BYTES' => 33, 'RELEASE_LOCK' => 33, 'SESSION_USER' => 33, 'ST_ASGEOJSON' => 33, 'ST_DIMENSION' => 33, 'ST_GEOMETRYN' => 33, 'ST_NUMPOINTS' => 33, 'TIMESTAMPADD' => 33, 'CONNECTION_ID' => 33, 'FROM_UNIXTIME' => 33, 'GTID_SUBTRACT' => 33, 'INTERIORRINGN' => 33, 'JSON_CONTAINS' => 33, 'MBRINTERSECTS' => 33, 'MLINEFROMTEXT' => 33, 'MPOINTFROMWKB' => 33, 'MPOLYFROMTEXT' => 33, 'NUMGEOMETRIES' => 33, 'POINTFROMTEXT' => 33, 'ST_CONVEXHULL' => 33, 'ST_DIFFERENCE' => 33, 'ST_INTERSECTS' => 33, 'ST_STARTPOINT' => 33, 'TIMESTAMPDIFF' => 33, 'WEIGHT_STRING' => 33, 'IS_IPV4_COMPAT' => 33, 'IS_IPV4_MAPPED' => 33, 'LAST_INSERT_ID' => 33, 'MPOINTFROMTEXT' => 33, 'POLYGONFROMWKB' => 33, 'ST_GEOMFROMWKB' => 33, 'ST_LINEFROMWKB' => 33, 'ST_POLYFROMWKB' => 33, 'UNIX_TIMESTAMP' => 33, 'GEOMCOLLFROMWKB' => 33, 'MASTER_POS_WAIT' => 33, 'POLYGONFROMTEXT' => 33, 'ST_EXTERIORRING' => 33, 'ST_GEOMETRYTYPE' => 33, 'ST_GEOMFROMTEXT' => 33, 'ST_INTERSECTION' => 33, 'ST_LINEFROMTEXT' => 33, 'ST_MAKEENVELOPE' => 33, 'ST_MLINEFROMWKB' => 33, 'ST_MPOLYFROMWKB' => 33, 'ST_POINTFROMWKB' => 33, 'ST_POLYFROMTEXT' => 33, 'SUBSTRING_INDEX' => 33, 'CHARACTER_LENGTH' => 33, 'GEOMCOLLFROMTEXT' => 33, 'GEOMETRYFROMTEXT' => 33, 'JSON_MERGE_PATCH' => 33, 'NUMINTERIORRINGS' => 33, 'ST_INTERIORRINGN' => 33, 'ST_MLINEFROMTEXT' => 33, 'ST_MPOINTFROMWKB' => 33, 'ST_MPOLYFROMTEXT' => 33, 'ST_NUMGEOMETRIES' => 33, 'ST_POINTFROMTEXT' => 33, 'ST_SYMDIFFERENCE' => 33, 'JSON_ARRAY_APPEND' => 33, 'JSON_ARRAY_INSERT' => 33, 'JSON_STORAGE_FREE' => 33, 'JSON_STORAGE_SIZE' => 33, 'LINESTRINGFROMWKB' => 33, 'MULTIPOINTFROMWKB' => 33, 'RELEASE_ALL_LOCKS' => 33, 'ST_LATFROMGEOHASH' => 33, 'ST_MPOINTFROMTEXT' => 33, 'ST_POLYGONFROMWKB' => 33, 'JSON_CONTAINS_PATH' => 33, 'MULTIPOINTFROMTEXT' => 33, 'ST_BUFFER_STRATEGY' => 33, 'ST_DISTANCE_SPHERE' => 33, 'ST_GEOMCOLLFROMTXT' => 33, 'ST_GEOMCOLLFROMWKB' => 33, 'ST_GEOMFROMGEOJSON' => 33, 'ST_LONGFROMGEOHASH' => 33, 'ST_POLYGONFROMTEXT' => 33, 'JSON_MERGE_PRESERVE' => 33, 'MULTIPOLYGONFROMWKB' => 33, 'ST_GEOMCOLLFROMTEXT' => 33, 'ST_GEOMETRYFROMTEXT' => 33, 'ST_NUMINTERIORRINGS' => 33, 'ST_POINTFROMGEOHASH' => 33, 'UNCOMPRESSED_LENGTH' => 33, 'MULTIPOLYGONFROMTEXT' => 33, 'ST_LINESTRINGFROMWKB' => 33, 'ST_MULTIPOINTFROMWKB' => 33, 'ST_MULTIPOINTFROMTEXT' => 33, 'MULTILINESTRINGFROMWKB' => 33, 'ST_MULTIPOLYGONFROMWKB' => 33, 'MULTILINESTRINGFROMTEXT' => 33, 'ST_MULTIPOLYGONFROMTEXT' => 33, 'GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_MULTILINESTRINGFROMWKB' => 33, 'GEOMETRYCOLLECTIONFROMTEXT' => 33, 'ST_MULTILINESTRINGFROMTEXT' => 33, 'VALIDATE_PASSWORD_STRENGTH' => 33, 'WAIT_FOR_EXECUTED_GTID_SET' => 33, 'ST_GEOMETRYCOLLECTIONFROMWKB' => 33, 'ST_GEOMETRYCOLLECTIONFROMTEXT' => 33, 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS' => 33, 'IF' => 35, 'IN' => 35, 'MOD' => 35, 'LEFT' => 35, 'MATCH' => 35, 'RIGHT' => 35, 'EXISTS' => 35, 'INSERT' => 35, 'REPEAT' => 35, 'SCHEMA' => 35, 'VALUES' => 35, 'CONVERT' => 35, 'DEFAULT' => 35, 'REPLACE' => 35, 'DATABASE' => 35, 'UTC_DATE' => 35, 'UTC_TIME' => 35, 'LOCALTIME' => 35, 'CURRENT_DATE' => 35, 'CURRENT_TIME' => 35, 'CURRENT_USER' => 35, 'UTC_TIMESTAMP' => 35, 'LOCALTIMESTAMP' => 35, 'CURRENT_TIMESTAMP' => 35, 'NOT IN' => 39, 'DATE' => 41, 'TIME' => 41, 'YEAR' => 41, 'POINT' => 41, 'POLYGON' => 41, 'TIMESTAMP' => 41, 'LINESTRING' => 41, 'MULTILINESTRING' => 41, 'GEOMETRYCOLLECTION' => 41, 'CHAR' => 43, 'BINARY' => 43, 'INTERVAL' => 43);
    }
}
namespace PhpMyAdmin\SqlParser {
    /**
     * Performs lexical analysis over a SQL statement and splits it in multiple
     * tokens.
     *
     * The output of the lexer is affected by the context of the SQL statement.
     *
     * @category Lexer
     *
     * @license  https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     *
     * @see      Context
     */
    class Lexer extends \PhpMyAdmin\SqlParser\Core
    {
        /**
         * A list of methods that are used in lexing the SQL query.
         *
         * @var array
         */
        public static $PARSER_METHODS = array(
            // It is best to put the parsers in order of their complexity
            // (ascending) and their occurrence rate (descending).
            //
            // Conflicts:
            //
            // 1. `parseDelimiter`, `parseUnknown`, `parseKeyword`, `parseNumber`
            // They fight over delimiter. The delimiter may be a keyword, a
            // number or almost any character which makes the delimiter one of
            // the first tokens that must be parsed.
            //
            // 1. `parseNumber` and `parseOperator`
            // They fight over `+` and `-`.
            //
            // 2. `parseComment` and `parseOperator`
            // They fight over `/` (as in ```/*comment*/``` or ```a / b```)
            //
            // 3. `parseBool` and `parseKeyword`
            // They fight over `TRUE` and `FALSE`.
            //
            // 4. `parseKeyword` and `parseUnknown`
            // They fight over words. `parseUnknown` does not know about
            // keywords.
            'parseDelimiter',
            'parseWhitespace',
            'parseNumber',
            'parseComment',
            'parseOperator',
            'parseBool',
            'parseString',
            'parseSymbol',
            'parseKeyword',
            'parseLabel',
            'parseUnknown',
        );
        /**
         * The string to be parsed.
         *
         * @var string|UtfString
         */
        public $str = '';
        /**
         * The length of `$str`.
         *
         * By storing its length, a lot of time is saved, because parsing methods
         * would call `strlen` everytime.
         *
         * @var int
         */
        public $len = 0;
        /**
         * The index of the last parsed character.
         *
         * @var int
         */
        public $last = 0;
        /**
         * Tokens extracted from given strings.
         *
         * @var TokensList
         */
        public $list;
        /**
         * The default delimiter. This is used, by default, in all new instances.
         *
         * @var string
         */
        public static $DEFAULT_DELIMITER = ';';
        /**
         * Statements delimiter.
         * This may change during lexing.
         *
         * @var string
         */
        public $delimiter;
        /**
         * The length of the delimiter.
         *
         * Because `parseDelimiter` can be called a lot, it would perform a lot of
         * calls to `strlen`, which might affect performance when the delimiter is
         * big.
         *
         * @var int
         */
        public $delimiterLen;
        /**
         * Gets the tokens list parsed by a new instance of a lexer.
         *
         * @param string|UtfString $str       the query to be lexed
         * @param bool             $strict    whether strict mode should be
         *                                    enabled or not
         * @param string           $delimiter the delimiter to be used
         *
         * @return TokensList
         */
        public static function getTokens($str, $strict = false, $delimiter = null)
        {
        }
        /**
         * Constructor.
         *
         * @param string|UtfString $str       the query to be lexed
         * @param bool             $strict    whether strict mode should be
         *                                    enabled or not
         * @param string           $delimiter the delimiter to be used
         */
        public function __construct($str, $strict = false, $delimiter = null)
        {
        }
        /**
         * Sets the delimiter.
         *
         * @param string $delimiter the new delimiter
         */
        public function setDelimiter($delimiter)
        {
        }
        /**
         * Parses the string and extracts lexemes.
         */
        public function lex()
        {
        }
        /**
         * Creates a new error log.
         *
         * @param string $msg  the error message
         * @param string $str  the character that produced the error
         * @param int    $pos  the position of the character
         * @param int    $code the code of the error
         *
         * @throws LexerException throws the exception, if strict mode is enabled
         */
        public function error($msg, $str = '', $pos = 0, $code = 0)
        {
        }
        /**
         * Parses a keyword.
         *
         * @return null|Token
         */
        public function parseKeyword()
        {
        }
        /**
         * Parses a label.
         *
         * @return null|Token
         */
        public function parseLabel()
        {
        }
        /**
         * Parses an operator.
         *
         * @return null|Token
         */
        public function parseOperator()
        {
        }
        /**
         * Parses a whitespace.
         *
         * @return null|Token
         */
        public function parseWhitespace()
        {
        }
        /**
         * Parses a comment.
         *
         * @return null|Token
         */
        public function parseComment()
        {
        }
        /**
         * Parses a boolean.
         *
         * @return null|Token
         */
        public function parseBool()
        {
        }
        /**
         * Parses a number.
         *
         * @return null|Token
         */
        public function parseNumber()
        {
        }
        /**
         * Parses a string.
         *
         * @param string $quote additional starting symbol
         *
         * @return null|Token
         * @throws LexerException
         */
        public function parseString($quote = '')
        {
        }
        /**
         * Parses a symbol.
         *
         * @return null|Token
         * @throws LexerException
         */
        public function parseSymbol()
        {
        }
        /**
         * Parses unknown parts of the query.
         *
         * @return null|Token
         */
        public function parseUnknown()
        {
        }
        /**
         * Parses the delimiter of the query.
         *
         * @return null|Token
         */
        public function parseDelimiter()
        {
        }
    }
    /**
     * A structure representing a list of tokens.
     *
     * @category Tokens
     *
     * @license  https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class TokensList implements \ArrayAccess
    {
        /**
         * The array of tokens.
         *
         * @var array
         */
        public $tokens = array();
        /**
         * The count of tokens.
         *
         * @var int
         */
        public $count = 0;
        /**
         * The index of the next token to be returned.
         *
         * @var int
         */
        public $idx = 0;
        /**
         * Constructor.
         *
         * @param array $tokens the initial array of tokens
         * @param int   $count  the count of tokens in the initial array
         */
        public function __construct(array $tokens = array(), $count = -1)
        {
        }
        /**
         * Builds an array of tokens by merging their raw value.
         *
         * @param string|Token[]|TokensList $list the tokens to be built
         *
         * @return string
         */
        public static function build($list)
        {
        }
        /**
         * Adds a new token.
         *
         * @param Token $token token to be added in list
         */
        public function add(\PhpMyAdmin\SqlParser\Token $token)
        {
        }
        /**
         * Gets the next token. Skips any irrelevant token (whitespaces and
         * comments).
         *
         * @return Token|null
         */
        public function getNext()
        {
        }
        /**
         * Gets the next token.
         *
         * @param int $type the type
         *
         * @return Token|null
         */
        public function getNextOfType($type)
        {
        }
        /**
         * Gets the next token.
         *
         * @param int    $type  the type of the token
         * @param string $value the value of the token
         *
         * @return Token|null
         */
        public function getNextOfTypeAndValue($type, $value)
        {
        }
        /**
         * Sets an value inside the container.
         *
         * @param int   $offset the offset to be set
         * @param Token $value  the token to be saved
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * Gets a value from the container.
         *
         * @param int $offset the offset to be returned
         *
         * @return Token
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * Checks if an offset was previously set.
         *
         * @param int $offset the offset to be checked
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset)
        {
        }
        /**
         * Unsets the value of an offset.
         *
         * @param int $offset the offset to be unset
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
    }
}
namespace PhpMyAdmin\SqlParser\Components {
    /**
     * Parses a data type.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class DataType extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * All data type options.
         *
         * @var array
         */
        public static $DATA_TYPE_OPTIONS = array('BINARY' => 1, 'CHARACTER SET' => array(2, 'var'), 'CHARSET' => array(2, 'var'), 'COLLATE' => array(3, 'var'), 'UNSIGNED' => 4, 'ZEROFILL' => 5);
        /**
         * The name of the data type.
         *
         * @var string
         */
        public $name;
        /**
         * The parameters of this data type.
         *
         * Some data types have no parameters.
         * Numeric types might have parameters for the maximum number of digits,
         * precision, etc.
         * String types might have parameters for the maximum length stored.
         * `ENUM` and `SET` have parameters for possible values.
         *
         * For more information, check the MySQL manual.
         *
         * @var array
         */
        public $parameters = array();
        /**
         * The options of this data type.
         *
         * @var OptionsArray
         */
        public $options;
        /**
         * Constructor.
         *
         * @param string       $name       the name of this data type
         * @param array        $parameters the parameters (size or possible values)
         * @param OptionsArray $options    the options of this data type
         */
        public function __construct($name = null, array $parameters = array(), $options = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return DataType|null
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param DataType $component the component to be built
         * @param array    $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * `ORDER BY` keyword parser.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class OrderKeyword extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The expression that is used for ordering.
         *
         * @var Expression
         */
        public $expr;
        /**
         * The order type.
         *
         * @var string
         */
        public $type;
        /**
         * Constructor.
         *
         * @param Expression $expr the expression that we are sorting by
         * @param string     $type the sorting type
         */
        public function __construct($expr = null, $type = 'ASC')
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return OrderKeyword[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param OrderKeyword|OrderKeyword[] $component the component to be built
         * @param array                       $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses the definition of a key.
     *
     * Used for parsing `CREATE TABLE` statement.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Key extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * All key options.
         *
         * @var array
         */
        public static $KEY_OPTIONS = array(
            'KEY_BLOCK_SIZE' => array(1, 'var='),
            'USING' => array(2, 'var'),
            'WITH PARSER' => array(3, 'var'),
            'COMMENT' => array(4, 'var'),
            // MariaDB options
            'CLUSTERING' => array(4, 'var='),
            'ENGINE_ATTRIBUTE' => array(5, 'var='),
            'SECONDARY_ENGINE_ATTRIBUTE' => array(5, 'var='),
            // MariaDB & MySQL options
            'VISIBLE' => 6,
            'INVISIBLE' => 6,
            // MariaDB options
            'IGNORED' => 10,
            'NOT IGNORED' => 10,
        );
        /**
         * The name of this key.
         *
         * @var string
         */
        public $name;
        /**
         * The key columns
         *
         * @var array[]
         * @phpstan-var array{name?: string, length?: int, order?: string}[]
         */
        public $columns;
        /**
         * The type of this key.
         *
         * @var string
         */
        public $type;
        /**
         * The expression if the Key is not using column names
         *
         * @var string|null
         */
        public $expr = null;
        /**
         * The options of this key or null if none where found.
         *
         * @var OptionsArray|null
         */
        public $options;
        /**
         * Constructor.
         *
         * @param string       $name    the name of the key
         * @param array        $columns the columns covered by this key
         * @param string       $type    the type of this key
         * @param OptionsArray $options the options of this key
         */
        public function __construct($name = null, array $columns = array(), $type = null, $options = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return Key
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param Key   $component the component to be built
         * @param array $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses an alter operation.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class AlterOperation extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * All database options.
         *
         * @var array
         */
        public static $DB_OPTIONS = array('CHARACTER SET' => array(1, 'var'), 'CHARSET' => array(1, 'var'), 'DEFAULT CHARACTER SET' => array(1, 'var'), 'DEFAULT CHARSET' => array(1, 'var'), 'UPGRADE' => array(1, 'var'), 'COLLATE' => array(2, 'var'), 'DEFAULT COLLATE' => array(2, 'var'));
        /**
         * All table options.
         *
         * @var array
         */
        public static $TABLE_OPTIONS = array('ENGINE' => array(1, 'var='), 'AUTO_INCREMENT' => array(1, 'var='), 'AVG_ROW_LENGTH' => array(1, 'var'), 'MAX_ROWS' => array(1, 'var'), 'ROW_FORMAT' => array(1, 'var'), 'COMMENT' => array(1, 'var'), 'ADD' => 1, 'ALTER' => 1, 'ANALYZE' => 1, 'CHANGE' => 1, 'CHARSET' => 1, 'CHECK' => 1, 'COALESCE' => 1, 'CONVERT' => 1, 'DEFAULT CHARSET' => 1, 'DISABLE' => 1, 'DISCARD' => 1, 'DROP' => 1, 'ENABLE' => 1, 'IMPORT' => 1, 'MODIFY' => 1, 'OPTIMIZE' => 1, 'ORDER' => 1, 'PARTITION' => 1, 'REBUILD' => 1, 'REMOVE' => 1, 'RENAME' => 1, 'REORGANIZE' => 1, 'REPAIR' => 1, 'UPGRADE' => 1, 'COLUMN' => 2, 'CONSTRAINT' => 2, 'DEFAULT' => 2, 'TO' => 2, 'BY' => 2, 'FOREIGN' => 2, 'FULLTEXT' => 2, 'KEY' => 2, 'KEYS' => 2, 'PARTITIONING' => 2, 'PRIMARY KEY' => 2, 'SPATIAL' => 2, 'TABLESPACE' => 2, 'INDEX' => 2, 'CHARACTER SET' => 3);
        /**
         * All user options.
         *
         * @var array
         */
        public static $USER_OPTIONS = array('ATTRIBUTE' => array(1, 'var'), 'COMMENT' => array(1, 'var'), 'REQUIRE' => array(1, 'var'), 'BY' => array(2, 'expr'), 'PASSWORD' => array(2, 'var'), 'WITH' => array(2, 'var'), 'ACCOUNT' => 1, 'DEFAULT' => 1, 'LOCK' => 2, 'UNLOCK' => 2, 'IDENTIFIED' => 3);
        /**
         * All view options.
         *
         * @var array
         */
        public static $VIEW_OPTIONS = array('AS' => 1);
        /**
         * Options of this operation.
         *
         * @var OptionsArray
         */
        public $options;
        /**
         * The altered field.
         *
         * @var Expression
         */
        public $field;
        /**
         * Unparsed tokens.
         *
         * @var Token[]|string
         */
        public $unknown = array();
        /**
         * Constructor.
         *
         * @param OptionsArray $options options of alter operation
         * @param Expression   $field   altered field
         * @param array        $unknown unparsed tokens found at the end of operation
         */
        public function __construct($options = null, $field = null, $unknown = array())
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return AlterOperation
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param AlterOperation $component the component to be built
         * @param array          $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * The definition of a parameter of a function or procedure.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ParameterDefinition extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The name of the new column.
         *
         * @var string
         */
        public $name;
        /**
         * Parameter's direction (IN, OUT or INOUT).
         *
         * @var string
         */
        public $inOut;
        /**
         * The data type of thew new column.
         *
         * @var DataType
         */
        public $type;
        /**
         * Constructor.
         *
         * @param string   $name  parameter's name
         * @param string   $inOut parameter's directional type (IN / OUT or None)
         * @param DataType $type  parameter's type
         */
        public function __construct($name = null, $inOut = null, $type = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return ParameterDefinition[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param ParameterDefinition[] $component the component to be built
         * @param array                 $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses an Index hint.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class IndexHint extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The type of hint (USE/FORCE/IGNORE)
         *
         * @var string
         */
        public $type;
        /**
         * What the hint is for (INDEX/KEY)
         *
         * @var string
         */
        public $indexOrKey;
        /**
         * The clause for which this hint is (JOIN/ORDER BY/GROUP BY)
         *
         * @var string
         */
        public $for;
        /**
         * List of indexes in this hint
         *
         * @var array
         */
        public $indexes = array();
        /**
         * Constructor.
         *
         * @param string $type       the type of hint (USE/FORCE/IGNORE)
         * @param string $indexOrKey What the hint is for (INDEX/KEY)
         * @param string $for        the clause for which this hint is (JOIN/ORDER BY/GROUP BY)
         * @param string $indexes    List of indexes in this hint
         */
        public function __construct(string $type = null, string $indexOrKey = null, string $for = null, array $indexes = array())
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return IndexHint|Component[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param ArrayObj|ArrayObj[] $component the component to be built
         * @param array               $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * `LIMIT` keyword parser.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Limit extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The number of rows skipped.
         *
         * @var int
         */
        public $offset;
        /**
         * The number of rows to be returned.
         *
         * @var int
         */
        public $rowCount;
        /**
         * Constructor.
         *
         * @param int $rowCount the row count
         * @param int $offset   the offset
         */
        public function __construct($rowCount = 0, $offset = 0)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return Limit
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param Limit $component the component to be built
         * @param array $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * `SET` keyword parser.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class SetOperation extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The name of the column that is being updated.
         *
         * @var string
         */
        public $column;
        /**
         * The new value.
         *
         * @var string
         */
        public $value;
        /**
         * Constructor.
         *
         * @param string $column Field's name..
         * @param string $value  new value
         */
        public function __construct($column = '', $value = '')
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return SetOperation[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param SetOperation|SetOperation[] $component the component to be built
         * @param array                       $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses a reference to an expression (column, table or database name, function
     * call, mathematical expression, etc.).
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Expression extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The name of this database.
         *
         * @var string
         */
        public $database;
        /**
         * The name of this table.
         *
         * @var string
         */
        public $table;
        /**
         * The name of the column.
         *
         * @var string
         */
        public $column;
        /**
         * The sub-expression.
         *
         * @var string
         */
        public $expr = '';
        /**
         * The alias of this expression.
         *
         * @var string
         */
        public $alias;
        /**
         * The name of the function.
         *
         * @var mixed
         */
        public $function;
        /**
         * The type of subquery.
         *
         * @var string
         */
        public $subquery;
        /**
         * Constructor.
         *
         * Syntax:
         *     new Expression('expr')
         *     new Expression('expr', 'alias')
         *     new Expression('database', 'table', 'column')
         *     new Expression('database', 'table', 'column', 'alias')
         *
         * If the database, table or column name is not required, pass an empty
         * string.
         *
         * @param string $database The name of the database or the the expression.
         *                         the the expression.
         * @param string $table    The name of the table or the alias of the expression.
         *                         the alias of the expression.
         * @param string $column   the name of the column
         * @param string $alias    the name of the alias
         */
        public function __construct($database = null, $table = null, $column = null, $alias = null)
        {
        }
        /**
         * Possible options:.
         *
         *      `field`
         *
         *          First field to be filled.
         *          If this is not specified, it takes the value of `parseField`.
         *
         *      `parseField`
         *
         *          Specifies the type of the field parsed. It may be `database`,
         *          `table` or `column`. These expressions may not include
         *          parentheses.
         *
         *      `breakOnAlias`
         *
         *          If not empty, breaks when the alias occurs (it is not included).
         *
         *      `breakOnParentheses`
         *
         *          If not empty, breaks when the first parentheses occurs.
         *
         *      `parenthesesDelimited`
         *
         *          If not empty, breaks after last parentheses occurred.
         *
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return Expression|null
         * @throws \PhpMyAdmin\SqlParser\Exceptions\ParserException
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param Expression|Expression[] $component the component to be built
         * @param array                   $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * `REFERENCES` keyword parser.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Reference extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * All references options.
         *
         * @var array
         */
        public static $REFERENCES_OPTIONS = array('MATCH' => array(1, 'var'), 'ON DELETE' => array(2, 'var'), 'ON UPDATE' => array(3, 'var'));
        /**
         * The referenced table.
         *
         * @var Expression
         */
        public $table;
        /**
         * The referenced columns.
         *
         * @var array
         */
        public $columns;
        /**
         * The options of the referencing.
         *
         * @var OptionsArray
         */
        public $options;
        /**
         * Constructor.
         *
         * @param Expression   $table   the name of the table referenced
         * @param array        $columns the columns referenced
         * @param OptionsArray $options the options
         */
        public function __construct($table = null, array $columns = array(), $options = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return Reference
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param Reference $component the component to be built
         * @param array     $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * `UNION` keyword builder.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class UnionKeyword extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * @param array<UnionKeyword[]> $component the component to be built
         * @param array                 $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses a list of expressions delimited by a comma.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ExpressionArray extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return Expression[]
         * @throws \PhpMyAdmin\SqlParser\Exceptions\ParserException
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param Expression[] $component the component to be built
         * @param array        $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * `GROUP BY` keyword parser.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class GroupKeyword extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The expression that is used for grouping.
         *
         * @var Expression
         */
        public $expr;
        /**
         * Constructor.
         *
         * @param Expression $expr the expression that we are sorting by
         */
        public function __construct($expr = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return GroupKeyword[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param GroupKeyword|GroupKeyword[] $component the component to be built
         * @param array                       $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses a list of options.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class OptionsArray extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * ArrayObj of selected options.
         *
         * @var array
         */
        public $options = array();
        /**
         * Constructor.
         *
         * @param array $options The array of options. Options that have a value
         *                       must be an array with at least two keys `name` and
         *                       `expr` or `value`.
         */
        public function __construct(array $options = array())
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return OptionsArray
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param OptionsArray $component the component to be built
         * @param array        $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
        /**
         * Checks if it has the specified option and returns it value or true.
         *
         * @param string $key     the key to be checked
         * @param bool   $getExpr Gets the expression instead of the value.
         *                        The value is the processed form of the expression.
         *
         * @return mixed
         */
        public function has($key, $getExpr = false)
        {
        }
        /**
         * Removes the option from the array.
         *
         * @param string $key the key to be removed
         *
         * @return bool whether the key was found and deleted or not
         */
        public function remove($key)
        {
        }
        /**
         * Merges the specified options with these ones. Values with same ID will be
         * replaced.
         *
         * @param array|OptionsArray $options the options to be merged
         */
        public function merge($options)
        {
        }
        /**
         * Checks tf there are no options set.
         *
         * @return bool
         */
        public function isEmpty()
        {
        }
    }
    /**
     * `JOIN` keyword parser.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class JoinKeyword extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * Types of join.
         *
         * @var array
         */
        public static $JOINS = array('CROSS JOIN' => 'CROSS', 'FULL JOIN' => 'FULL', 'FULL OUTER JOIN' => 'FULL', 'INNER JOIN' => 'INNER', 'JOIN' => 'JOIN', 'LEFT JOIN' => 'LEFT', 'LEFT OUTER JOIN' => 'LEFT', 'RIGHT JOIN' => 'RIGHT', 'RIGHT OUTER JOIN' => 'RIGHT', 'NATURAL JOIN' => 'NATURAL', 'NATURAL LEFT JOIN' => 'NATURAL LEFT', 'NATURAL RIGHT JOIN' => 'NATURAL RIGHT', 'NATURAL LEFT OUTER JOIN' => 'NATURAL LEFT OUTER', 'NATURAL RIGHT OUTER JOIN' => 'NATURAL RIGHT OUTER', 'STRAIGHT_JOIN' => 'STRAIGHT');
        /**
         * Type of this join.
         *
         * @see static::$JOINS
         *
         * @var string
         */
        public $type;
        /**
         * Join expression.
         *
         * @var Expression
         */
        public $expr;
        /**
         * Join conditions.
         *
         * @var Condition[]
         */
        public $on;
        /**
         * Columns in Using clause.
         *
         * @var ArrayObj
         */
        public $using;
        /**
         * Constructor.
         *
         * @param string      $type  Join type
         * @param Expression  $expr  join expression
         * @param Condition[] $on    join conditions
         * @param ArrayObj    $using columns joined
         *
         * @see JoinKeyword::$JOINS
         */
        public function __construct($type = null, $expr = null, $on = null, $using = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return JoinKeyword[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param JoinKeyword[] $component the component to be built
         * @param array         $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses a reference to a LOCK expression.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class LockExpression extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The table to be locked.
         *
         * @var Expression
         */
        public $table;
        /**
         * The type of lock to be applied.
         *
         * @var string
         */
        public $type;
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return CaseExpression
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param LockExpression|LockExpression[] $component the component to be built
         * @param array                           $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * `WHERE` keyword parser.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Condition extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * Logical operators that can be used to delimit expressions.
         *
         * @var array
         */
        public static $DELIMITERS = array('&&', '||', 'AND', 'OR', 'XOR');
        /**
         * List of allowed reserved keywords in conditions.
         *
         * @var array
         */
        public static $ALLOWED_KEYWORDS = array('ALL' => 1, 'AND' => 1, 'BETWEEN' => 1, 'EXISTS' => 1, 'IF' => 1, 'IN' => 1, 'INTERVAL' => 1, 'IS' => 1, 'LIKE' => 1, 'MATCH' => 1, 'NOT IN' => 1, 'NOT NULL' => 1, 'NOT' => 1, 'NULL' => 1, 'OR' => 1, 'REGEXP' => 1, 'RLIKE' => 1, 'XOR' => 1);
        /**
         * Identifiers recognized.
         *
         * @var array
         */
        public $identifiers = array();
        /**
         * Whether this component is an operator.
         *
         * @var bool
         */
        public $isOperator = false;
        /**
         * The condition.
         *
         * @var string
         */
        public $expr;
        /**
         * Constructor.
         *
         * @param string $expr the condition or the operator
         */
        public function __construct($expr = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return Condition[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param Condition[] $component the component to be built
         * @param array       $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses the create definition of a column or a key.
     *
     * Used for parsing `CREATE TABLE` statement.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class CreateDefinition extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * All field options.
         *
         * @var array
         */
        public static $FIELD_OPTIONS = array(
            // Tells the `OptionsArray` to not sort the options.
            // See the note below.
            '_UNSORTED' => true,
            'NOT NULL' => 1,
            'NULL' => 1,
            'DEFAULT' => array(2, 'expr', array('breakOnAlias' => true)),
            /* Following are not according to grammar, but MySQL happily accepts
             * these at any location */
            'CHARSET' => array(2, 'var'),
            'COLLATE' => array(3, 'var'),
            'AUTO_INCREMENT' => 3,
            'PRIMARY' => 4,
            'PRIMARY KEY' => 4,
            'UNIQUE' => 4,
            'UNIQUE KEY' => 4,
            'COMMENT' => array(5, 'var'),
            'COLUMN_FORMAT' => array(6, 'var'),
            'ON UPDATE' => array(7, 'expr'),
            // Generated columns options.
            'GENERATED ALWAYS' => 8,
            'AS' => array(9, 'expr', array('parenthesesDelimited' => true)),
            'VIRTUAL' => 10,
            'PERSISTENT' => 11,
            'STORED' => 11,
            'CHECK' => array(12, 'expr', array('parenthesesDelimited' => true)),
            'INVISIBLE' => 13,
            'ENFORCED' => 14,
            'NOT' => 15,
        );
        /**
         * The name of the new column.
         *
         * @var string
         */
        public $name;
        /**
         * Whether this field is a constraint or not.
         *
         * @var bool
         */
        public $isConstraint;
        /**
         * The data type of thew new column.
         *
         * @var DataType
         */
        public $type;
        /**
         * The key.
         *
         * @var Key
         */
        public $key;
        /**
         * The table that is referenced.
         *
         * @var Reference
         */
        public $references;
        /**
         * The options of this field.
         *
         * @var OptionsArray
         */
        public $options;
        /**
         * Constructor.
         *
         * @param string       $name         the name of the field
         * @param OptionsArray $options      the options of this field
         * @param DataType|Key $type         the data type of this field or the key
         * @param bool         $isConstraint whether this field is a constraint or not
         * @param Reference    $references   references
         */
        public function __construct($name = null, $options = null, $type = null, $isConstraint = false, $references = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return CreateDefinition[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param CreateDefinition|CreateDefinition[] $component the component to be built
         * @param array                               $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * `INTO` keyword parser.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class IntoKeyword extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * FIELDS/COLUMNS Options for `SELECT...INTO` statements.
         *
         * @var array
         */
        public static $FIELDS_OPTIONS = array('TERMINATED BY' => array(1, 'expr'), 'OPTIONALLY' => 2, 'ENCLOSED BY' => array(3, 'expr'), 'ESCAPED BY' => array(4, 'expr'));
        /**
         * LINES Options for `SELECT...INTO` statements.
         *
         * @var array
         */
        public static $LINES_OPTIONS = array('STARTING BY' => array(1, 'expr'), 'TERMINATED BY' => array(2, 'expr'));
        /**
         * Type of target (OUTFILE or SYMBOL).
         *
         * @var string
         */
        public $type;
        /**
         * The destination, which can be a table or a file.
         *
         * @var string|Expression
         */
        public $dest;
        /**
         * The name of the columns.
         *
         * @var array
         */
        public $columns;
        /**
         * The values to be selected into (SELECT .. INTO @var1).
         *
         * @var Expression[]
         */
        public $values;
        /**
         * Options for FIELDS/COLUMNS keyword.
         *
         * @var OptionsArray
         *
         * @see static::$FIELDS_OPTIONS
         */
        public $fields_options;
        /**
         * Whether to use `FIELDS` or `COLUMNS` while building.
         *
         * @var bool
         */
        public $fields_keyword;
        /**
         * Options for OPTIONS keyword.
         *
         * @var OptionsArray
         *
         * @see static::$LINES_OPTIONS
         */
        public $lines_options;
        /**
         * Constructor.
         *
         * @param string            $type           type of destination (may be OUTFILE)
         * @param string|Expression $dest           actual destination
         * @param array             $columns        column list of destination
         * @param array             $values         selected fields
         * @param OptionsArray      $fields_options options for FIELDS/COLUMNS keyword
         * @param bool              $fields_keyword options for OPTIONS keyword
         */
        public function __construct($type = null, $dest = null, $columns = null, $values = null, $fields_options = null, $fields_keyword = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return IntoKeyword
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        public function parseFileOptions(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, $keyword = 'FIELDS')
        {
        }
        /**
         * @param IntoKeyword $component the component to be built
         * @param array       $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses a reference to a CASE expression.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class CaseExpression extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The value to be compared.
         *
         * @var Expression
         */
        public $value;
        /**
         * The conditions in WHEN clauses.
         *
         * @var array
         */
        public $conditions = array();
        /**
         * The results matching with the WHEN clauses.
         *
         * @var array
         */
        public $results = array();
        /**
         * The values to be compared against.
         *
         * @var array
         */
        public $compare_values = array();
        /**
         * The result in ELSE section of expr.
         *
         * @var Expression
         */
        public $else_result;
        /**
         * The alias of this CASE statement.
         *
         * @var string
         */
        public $alias;
        /**
         * The sub-expression.
         *
         * @var string
         */
        public $expr = '';
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return CaseExpression
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param CaseExpression $component the component to be built
         * @param array          $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * `VALUES` keyword parser.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class Array2d extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return ArrayObj[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param ArrayObj[] $component the component to be built
         * @param array      $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses an array.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ArrayObj extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The array that contains the unprocessed value of each token.
         *
         * @var array
         */
        public $raw = array();
        /**
         * The array that contains the processed value of each token.
         *
         * @var array
         */
        public $values = array();
        /**
         * Constructor.
         *
         * @param array $raw    the unprocessed values
         * @param array $values the processed values
         */
        public function __construct(array $raw = array(), array $values = array())
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return ArrayObj|Component[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param ArrayObj|ArrayObj[] $component the component to be built
         * @param array               $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses the create definition of a partition.
     *
     * Used for parsing `CREATE TABLE` statement.
     *
     * @category   Components
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class PartitionDefinition extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * All field options.
         *
         * @var array
         */
        public static $OPTIONS = array('STORAGE ENGINE' => array(1, 'var'), 'ENGINE' => array(1, 'var'), 'COMMENT' => array(2, 'var'), 'DATA DIRECTORY' => array(3, 'var'), 'INDEX DIRECTORY' => array(4, 'var'), 'MAX_ROWS' => array(5, 'var'), 'MIN_ROWS' => array(6, 'var'), 'TABLESPACE' => array(7, 'var'), 'NODEGROUP' => array(8, 'var'));
        /**
         * Whether this entry is a subpartition or a partition.
         *
         * @var bool
         */
        public $isSubpartition;
        /**
         * The name of this partition.
         *
         * @var string
         */
        public $name;
        /**
         * The type of this partition (what follows the `VALUES` keyword).
         *
         * @var string
         */
        public $type;
        /**
         * The expression used to defined this partition.
         *
         * @var Expression|string
         */
        public $expr;
        /**
         * The subpartitions of this partition.
         *
         * @var PartitionDefinition[]
         */
        public $subpartitions;
        /**
         * The options of this field.
         *
         * @var OptionsArray
         */
        public $options;
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return PartitionDefinition
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param PartitionDefinition|PartitionDefinition[] $component the component to be built
         * @param array                                     $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * `RENAME TABLE` keyword parser.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class RenameOperation extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The old table name.
         *
         * @var Expression
         */
        public $old;
        /**
         * The new table name.
         *
         * @var Expression
         */
        public $new;
        /**
         * Constructor.
         *
         * @param Expression $old old expression
         * @param Expression $new new expression containing new name
         */
        public function __construct($old = null, $new = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return RenameOperation[]
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param RenameOperation $component the component to be built
         * @param array           $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
    /**
     * Parses a function call.
     *
     * @category   Keywords
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class FunctionCall extends \PhpMyAdmin\SqlParser\Component
    {
        /**
         * The name of this function.
         *
         * @var string
         */
        public $name;
        /**
         * The list of parameters.
         *
         * @var ArrayObj
         */
        public $parameters;
        /**
         * Constructor.
         *
         * @param string         $name       the name of the function to be called
         * @param array|ArrayObj $parameters the parameters of this function
         */
        public function __construct($name = null, $parameters = null)
        {
        }
        /**
         * @param Parser     $parser  the parser that serves as context
         * @param TokensList $list    the list of tokens that are being parsed
         * @param array      $options parameters for parsing
         *
         * @return FunctionCall
         */
        public static function parse(\PhpMyAdmin\SqlParser\Parser $parser, \PhpMyAdmin\SqlParser\TokensList $list, array $options = array())
        {
        }
        /**
         * @param FunctionCall $component the component to be built
         * @param array        $options   parameters for building
         *
         * @return string
         */
        public static function build($component, array $options = array())
        {
        }
    }
}
namespace PhpMyAdmin\SqlParser\Exceptions {
    /**
     * Exception thrown by the lexer.
     *
     * @category   Exceptions
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class LexerException extends \Exception
    {
        /**
         * The character that produced this error.
         *
         * @var string
         */
        public $ch;
        /**
         * The index of the character that produced this error.
         *
         * @var int
         */
        public $pos;
        /**
         * Constructor.
         *
         * @param string $msg  the message of this exception
         * @param string $ch   the character that produced this exception
         * @param int    $pos  the position of the character
         * @param int    $code the code of this error
         */
        public function __construct($msg = '', $ch = '', $pos = 0, $code = 0)
        {
        }
    }
    /**
     * Exception thrown by the parser.
     *
     * @category   Exceptions
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class ParserException extends \Exception
    {
        /**
         * The token that produced this error.
         *
         * @var Token
         */
        public $token;
        /**
         * Constructor.
         *
         * @param string $msg   the message of this exception
         * @param Token  $token the token that produced this exception
         * @param int    $code  the code of this error
         */
        public function __construct($msg = '', \PhpMyAdmin\SqlParser\Token $token = null, $code = 0)
        {
        }
    }
    /**
     * Exception thrown by the lexer.
     *
     * @category   Exceptions
     *
     * @license    https://www.gnu.org/licenses/gpl-2.0.txt GPL-2.0+
     */
    class LoaderException extends \Exception
    {
        /**
         * The failed load name.
         *
         * @var string
         */
        public $name;
        /**
         * Constructor.
         *
         * @param string $msg  the message of this exception
         * @param string $name the character that produced this exception
         * @param int    $code the code of this error
         */
        public function __construct($msg = '', $name = '', $code = 0)
        {
        }
    }
}
namespace WPML\Collect\Support {
    class Arr
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * Determine whether the given value is array accessible.
         *
         * @param  mixed  $value
         * @return bool
         */
        public static function accessible($value)
        {
        }
        /**
         * Add an element to an array using "dot" notation if it doesn't exist.
         *
         * @param  mixed[]   $array
         * @param  string  $key
         * @param  mixed   $value
         * @return mixed[]
         */
        public static function add($array, $key, $value)
        {
        }
        /**
         * Collapse an array of arrays into a single array.
         *
         * @param  mixed[]  $array
         * @return mixed[]
         */
        public static function collapse($array)
        {
        }
        /**
         * Divide an array into two arrays. One with keys and the other with values.
         *
         * @param  mixed[]  $array
         * @return mixed[]
         */
        public static function divide($array)
        {
        }
        /**
         * Flatten a multi-dimensional associative array with dots.
         *
         * @param  mixed[]   $array
         * @param  string  $prepend
         * @return mixed[]
         */
        public static function dot($array, $prepend = '')
        {
        }
        /**
         * Get all of the given array except for a specified array of items.
         *
         * @param  mixed[]  $array
         * @param  mixed[]|string  $keys
         * @return mixed[]
         */
        public static function except($array, $keys)
        {
        }
        /**
         * Determine if the given key exists in the provided array.
         *
         * @param  \ArrayAccess<mixed>|mixed[]  $array
         * @param  string|int  $key
         * @return bool
         */
        public static function exists($array, $key)
        {
        }
        /**
         * Return the first element in an array passing a given truth test.
         *
         * @param  mixed[]  $array
         * @param  callable|null  $callback
         * @param  mixed  $default
         * @return mixed
         */
        public static function first($array, callable $callback = null, $default = null)
        {
        }
        /**
         * Return the last element in an array passing a given truth test.
         *
         * @param  mixed[]  $array
         * @param  callable|null  $callback
         * @param  mixed  $default
         * @return mixed
         */
        public static function last($array, callable $callback = null, $default = null)
        {
        }
        /**
         * Flatten a multi-dimensional array into a single level.
         *
         * @param  mixed[]  $array
         * @param  int  $depth
         * @return array
         */
        public static function flatten($array, $depth = INF)
        {
        }
        /**
         * Remove one or many array items from a given array using "dot" notation.
         *
         * @param  mixed[]  $array
         * @param  mixed[]|string  $keys
         * @return void
         */
        public static function forget(&$array, $keys)
        {
        }
        /**
         * Get an item from an array using "dot" notation.
         *
         * @param  \ArrayAccess<mixed>|mixed[]  $array
         * @param  string  $key
         * @param  mixed   $default
         * @return mixed
         */
        public static function get($array, $key, $default = null)
        {
        }
        /**
         * Check if an item or items exist in an array using "dot" notation.
         *
         * @param  \ArrayAccess<mixed>|mixed[]  $array
         * @param  string|mixed[]  $keys
         * @return bool
         */
        public static function has($array, $keys)
        {
        }
        /**
         * Determines if an array is associative.
         *
         * An array is "associative" if it doesn't have sequential numerical keys beginning with zero.
         *
         * @param  mixed[]  $array
         * @return bool
         */
        public static function isAssoc(array $array)
        {
        }
        /**
         * Get a subset of the items from the given array.
         *
         * @param  mixed[]  $array
         * @param  mixed[]|string  $keys
         * @return array
         */
        public static function only($array, $keys)
        {
        }
        /**
         * Pluck an array of values from an array.
         *
         * @param  mixed[]  $array
         * @param  string|mixed[]  $value
         * @param  string|mixed[]|null  $key
         * @return mixed[]
         */
        public static function pluck($array, $value, $key = null)
        {
        }
        /**
         * Explode the "value" and "key" arguments passed to "pluck".
         *
         * @param  string|mixed[]  $value
         * @param  string|mixed[]|null  $key
         * @return mixed[]
         */
        protected static function explodePluckParameters($value, $key)
        {
        }
        /**
         * Push an item onto the beginning of an array.
         *
         * @param  mixed[]  $array
         * @param  mixed  $value
         * @param  mixed  $key
         * @return mixed[]
         */
        public static function prepend($array, $value, $key = null)
        {
        }
        /**
         * Get a value from the array, and remove it.
         *
         * @param  mixed[]   $array
         * @param  string  $key
         * @param  mixed   $default
         * @return mixed
         */
        public static function pull(&$array, $key, $default = null)
        {
        }
        /**
         * Set an array item to a given value using "dot" notation.
         *
         * If no key is given to the method, the entire array will be replaced.
         *
         * @param  mixed[]   $array
         * @param  string  $key
         * @param  mixed   $value
         * @return mixed[]
         */
        public static function set(&$array, $key, $value)
        {
        }
        /**
         * Sort the array using the given callback or "dot" notation.
         *
         * @param  mixed[]  $array
         * @param  callable|string  $callback
         * @return mixed[]
         */
        public static function sort($array, $callback)
        {
        }
        /**
         * Recursively sort an array by keys and values.
         *
         * @param  mixed[]  $array
         * @return mixed[]
         */
        public static function sortRecursive($array)
        {
        }
        /**
         * Filter the array using the given callback.
         *
         * @param  mixed[]  $array
         * @param  callable  $callback
         * @return mixed[]
         */
        public static function where($array, callable $callback)
        {
        }
        /**
         * @param mixed ...$arrays
         *
         * @return mixed[]|mixed[mixed]
         */
        public static function crossJoin(...$arrays)
        {
        }
    }
}
namespace WPML\Collect\Contracts\Support {
    interface Arrayable
    {
        /**
         * Get the instance as an array.
         *
         * @return array
         */
        public function toArray();
    }
    interface Jsonable
    {
        /**
         * Convert the object to its JSON representation.
         *
         * @param  int  $options
         * @return string
         */
        public function toJson($options = 0);
    }
}
namespace WPML\Collect\Support {
    class Collection implements \ArrayAccess, \WPML\Collect\Contracts\Support\Arrayable, \Countable, \IteratorAggregate, \WPML\Collect\Contracts\Support\Jsonable, \JsonSerializable
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * The items contained in the collection.
         *
         * @var mixed[]
         */
        protected $items = [];
        /**
         * Create a new collection.
         *
         * @param  mixed  $items
         * @return void
         */
        public function __construct($items = [])
        {
        }
        /**
         * Create a new collection instance if the value isn't one already.
         *
         * @param  mixed[]  $items
         * @return static
         */
        public static function make($items = [])
        {
        }
        /**
         * Get all of the items in the collection.
         *
         * @return mixed[]
         */
        public function all()
        {
        }
        /**
         * Get the average value of a given key.
         *
         * @param  callable|string|null  $callback
         * @return float|void
         */
        public function avg($callback = null)
        {
        }
        /**
         * Alias for the "avg" method.
         *
         * @param  callable|string|null  $callback
         * @return float|void
         */
        public function average($callback = null)
        {
        }
        /**
         * Get the median of a given key.
         *
         * @param  null $key
         * @return float|void
         */
        public function median($key = null)
        {
        }
        /**
         * Get the mode of a given key.
         *
         * @param  null $key
         * @return mixed[]|void
         */
        public function mode($key = null)
        {
        }
        /**
         * Collapse the collection of items into a single array.
         *
         * @return static
         */
        public function collapse()
        {
        }
        /**
         * Determine if an item exists in the collection.
         *
         * @param  mixed  $key
         * @param  mixed  $value
         * @return bool
         */
        public function contains($key, $value = null)
        {
        }
        /**
         * Determine if an item exists in the collection using strict comparison.
         *
         * @param  mixed  $key
         * @param  mixed  $value
         * @return bool
         */
        public function containsStrict($key, $value = null)
        {
        }
        /**
         * Get the items in the collection that are not present in the given items.
         *
         * @param  mixed  $items
         * @return static
         */
        public function diff($items)
        {
        }
        /**
         * Get the items in the collection whose keys are not present in the given items.
         *
         * @param  mixed  $items
         * @return static
         */
        public function diffKeys($items)
        {
        }
        /**
         * Execute a callback over each item.
         *
         * @param  callable  $callback
         * @return $this
         */
        public function each(callable $callback)
        {
        }
        /**
         * Create a new collection consisting of every n-th element.
         *
         * @param  int  $step
         * @param  int  $offset
         * @return static
         */
        public function every($step, $offset = 0)
        {
        }
        /**
         * Get all items except for those with the specified keys.
         *
         * @param  mixed  $keys
         * @return static
         */
        public function except($keys)
        {
        }
        /**
         * Run a filter over each of the items.
         *
         * @param  callable|null  $callback
         * @return static
         */
        public function filter(callable $callback = null)
        {
        }
        /**
         * Filter items by the given key value pair.
         *
         * @param  string  $key
         * @param  mixed  $operator
         * @param  mixed  $value
         * @return static
         */
        public function where($key, $operator, $value = null)
        {
        }
        /**
         * Get an operator checker callback.
         *
         * @param  string  $key
         * @param  string  $operator
         * @param  mixed  $value
         * @return \Closure
         */
        protected function operatorForWhere($key, $operator, $value)
        {
        }
        /**
         * Filter items by the given key value pair using strict comparison.
         *
         * @param  string  $key
         * @param  mixed  $value
         * @return static
         */
        public function whereStrict($key, $value)
        {
        }
        /**
         * Filter items by the given key value pair.
         *
         * @param  string  $key
         * @param  mixed  $values
         * @param  bool  $strict
         * @return static
         */
        public function whereIn($key, $values, $strict = false)
        {
        }
        /**
         * Filter items by the given key value pair using strict comparison.
         *
         * @param  string  $key
         * @param  mixed  $values
         * @return static
         */
        public function whereInStrict($key, $values)
        {
        }
        /**
         * Get the first item from the collection.
         *
         * @param  callable|null  $callback
         * @param  mixed  $default
         * @return mixed
         */
        public function first(callable $callback = null, $default = null)
        {
        }
        /**
         * Get a flattened array of the items in the collection.
         *
         * @param  int  $depth
         * @return static
         */
        public function flatten($depth = INF)
        {
        }
        /**
         * Flip the items in the collection.
         *
         * @return static
         */
        public function flip()
        {
        }
        /**
         * Remove an item from the collection by key.
         *
         * @param  string|array  $keys
         * @return $this
         */
        public function forget($keys)
        {
        }
        /**
         * Get an item from the collection by key.
         *
         * @param  mixed  $key
         * @param  mixed  $default
         * @return mixed
         */
        public function get($key, $default = null)
        {
        }
        /**
         * Group an associative array by a field or using a callback.
         *
         * @param  callable|string  $groupBy
         * @param  bool  $preserveKeys
         * @return static
         */
        public function groupBy($groupBy, $preserveKeys = false)
        {
        }
        /**
         * Key an associative array by a field or using a callback.
         *
         * @param  callable|string  $keyBy
         * @return static
         */
        public function keyBy($keyBy)
        {
        }
        /**
         * Determine if an item exists in the collection by key.
         *
         * @param  mixed  $key
         * @return bool
         */
        public function has($key)
        {
        }
        /**
         * Concatenate values of a given key as a string.
         *
         * @param  string  $value
         * @param  string  $glue
         * @return string
         */
        public function implode($value, $glue = null)
        {
        }
        /**
         * Intersect the collection with the given items.
         *
         * @param  mixed  $items
         * @return static
         */
        public function intersect($items)
        {
        }
        /**
         * Determine if the collection is empty or not.
         *
         * @return bool
         */
        public function isEmpty()
        {
        }
        /**
         * Determine if the given value is callable, but not a string.
         *
         * @param  mixed  $value
         * @return bool
         */
        protected function useAsCallable($value)
        {
        }
        /**
         * Get the keys of the collection items.
         *
         * @return static
         */
        public function keys()
        {
        }
        /**
         * Get the last item from the collection.
         *
         * @param  callable|null  $callback
         * @param  mixed  $default
         * @return mixed
         */
        public function last(callable $callback = null, $default = null)
        {
        }
        /**
         * Get the values of a given key.
         *
         * @param  string  $value
         * @param  string|null  $key
         * @return static
         */
        public function pluck($value, $key = null)
        {
        }
        /**
         * Run a map over each of the items.
         *
         * @param  callable  $callback
         * @return static
         */
        public function map(callable $callback)
        {
        }
        /**
         * Run an associative map over each of the items.
         *
         * The callback should return an associative array with a single key/value pair.
         *
         * @param  callable  $callback
         * @return static
         */
        public function mapWithKeys(callable $callback)
        {
        }
        /**
         * Map a collection and flatten the result by a single level.
         *
         * @param  callable  $callback
         * @return static
         */
        public function flatMap(callable $callback)
        {
        }
        /**
         * Get the max value of a given key.
         *
         * @param  callable|string|null  $callback
         * @return mixed
         */
        public function max($callback = null)
        {
        }
        /**
         * Merge the collection with the given items.
         *
         * @param  mixed  $items
         * @return static
         */
        public function merge($items)
        {
        }
        /**
         * Create a collection by using this collection for keys and another for its values.
         *
         * @param  mixed  $values
         * @return static
         */
        public function combine($values)
        {
        }
        /**
         * Union the collection with the given items.
         *
         * @param  mixed  $items
         * @return static
         */
        public function union($items)
        {
        }
        /**
         * Get the min value of a given key.
         *
         * @param  callable|string|null  $callback
         * @return mixed
         */
        public function min($callback = null)
        {
        }
        /**
         * Get the items with the specified keys.
         *
         * @param  mixed  $keys
         * @return static
         */
        public function only($keys)
        {
        }
        /**
         * "Paginate" the collection by slicing it into a smaller collection.
         *
         * @param  int  $page
         * @param  int  $perPage
         * @return static
         */
        public function forPage($page, $perPage)
        {
        }
        /**
         * Partition the collection into two arrays using the given callback or key.
         *
         * @param  callable|string  $key
         * @param  mixed  $operator
         * @param  mixed  $value
         * @return static
         */
        public function partition($key, $operator = null, $value = null)
        {
        }
        /**
         * Pass the collection to the given callback and return the result.
         *
         * @param  callable $callback
         * @return mixed
         */
        public function pipe(callable $callback)
        {
        }
        /**
         * Get and remove the last item from the collection.
         *
         * @return mixed
         */
        public function pop()
        {
        }
        /**
         * Push an item onto the beginning of the collection.
         *
         * @param  mixed  $value
         * @param  mixed  $key
         * @return $this
         */
        public function prepend($value, $key = null)
        {
        }
        /**
         * Push an item onto the end of the collection.
         *
         * @param  mixed  $value
         * @return $this
         */
        public function push($value)
        {
        }
        /**
         * Get and remove an item from the collection.
         *
         * @param  mixed  $key
         * @param  mixed  $default
         * @return mixed
         */
        public function pull($key, $default = null)
        {
        }
        /**
         * Put an item in the collection by key.
         *
         * @param  mixed  $key
         * @param  mixed  $value
         * @return $this
         */
        public function put($key, $value)
        {
        }
        /**
         * Get one or more items randomly from the collection.
         *
         * @param  int  $amount
         * @return mixed
         *
         * @throws \InvalidArgumentException
         */
        public function random($amount = 1)
        {
        }
        /**
         * Reduce the collection to a single value.
         *
         * @param  callable  $callback
         * @param  mixed     $initial
         * @return mixed
         */
        public function reduce(callable $callback, $initial = null)
        {
        }
        /**
         * Create a collection of all elements that do not pass a given truth test.
         *
         * @param  callable|mixed  $callback
         * @return static
         */
        public function reject($callback)
        {
        }
        /**
         * Reverse items order.
         *
         * @return static
         */
        public function reverse()
        {
        }
        /**
         * Search the collection for a given value and return the corresponding key if successful.
         *
         * @param  mixed  $value
         * @param  bool   $strict
         * @return mixed
         */
        public function search($value, $strict = false)
        {
        }
        /**
         * Get and remove the first item from the collection.
         *
         * @return mixed
         */
        public function shift()
        {
        }
        /**
         * Shuffle the items in the collection.
         *
         * @param int $seed
         * @return static
         */
        public function shuffle($seed = null)
        {
        }
        /**
         * Slice the underlying collection array.
         *
         * @param  int   $offset
         * @param  int   $length
         * @return static
         */
        public function slice($offset, $length = null)
        {
        }
        /**
         * Split a collection into a certain number of groups.
         *
         * @param  int  $numberOfGroups
         * @return static
         */
        public function split($numberOfGroups)
        {
        }
        /**
         * Chunk the underlying collection array.
         *
         * @param  int   $size
         * @return static
         */
        public function chunk($size)
        {
        }
        /**
         * Sort through each item with a callback.
         *
         * @param  callable|null  $callback
         * @return static
         */
        public function sort(callable $callback = null)
        {
        }
        /**
         * Sort the collection using the given callback.
         *
         * @param  callable|string  $callback
         * @param  int   $options
         * @param  bool  $descending
         * @return static
         */
        public function sortBy($callback, $options = SORT_REGULAR, $descending = false)
        {
        }
        /**
         * Sort the collection in descending order using the given callback.
         *
         * @param  callable|string  $callback
         * @param  int  $options
         * @return static
         */
        public function sortByDesc($callback, $options = SORT_REGULAR)
        {
        }
        /**
         * Splice a portion of the underlying collection array.
         *
         * @param  int  $offset
         * @param  int|null  $length
         * @param  mixed  $replacement
         * @return static
         */
        public function splice($offset, $length = null, $replacement = [])
        {
        }
        /**
         * Get the sum of the given values.
         *
         * @param  callable|string|null  $callback
         * @return mixed
         */
        public function sum($callback = null)
        {
        }
        /**
         * Take the first or last {$limit} items.
         *
         * @param  int  $limit
         * @return static
         */
        public function take($limit)
        {
        }
        /**
         * Transform each item in the collection using a callback.
         *
         * @param  callable  $callback
         * @return $this
         */
        public function transform(callable $callback)
        {
        }
        /**
         * Return only unique items from the collection array.
         *
         * @param  string|callable|null  $key
         * @param  bool  $strict
         *
         * @return static
         */
        public function unique($key = null, $strict = false)
        {
        }
        /**
         * Return only unique items from the collection array using strict comparison.
         *
         * @param  string|callable|null  $key
         * @return static
         */
        public function uniqueStrict($key = null)
        {
        }
        /**
         * Reset the keys on the underlying array.
         *
         * @return static
         */
        public function values()
        {
        }
        /**
         * Get a value retrieving callback.
         *
         * @param  string  $value
         * @return callable
         */
        protected function valueRetriever($value)
        {
        }
        /**
         * Zip the collection together with one or more arrays.
         *
         * e.g. new Collection([1, 2, 3])->zip([4, 5, 6]);
         *      => [[1, 4], [2, 5], [3, 6]]
         *
         * @param  mixed ...$items
         * @return static
         */
        public function zip($items)
        {
        }
        /**
         * Get the collection of items as a plain array.
         *
         * @return array
         */
        public function toArray()
        {
        }
        /**
         * Convert the object into something JSON serializable.
         *
         * @return array
         */
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
        /**
         * Get the collection of items as JSON.
         *
         * @param  int  $options
         * @return string
         */
        public function toJson($options = 0)
        {
        }
        /**
         * Get an iterator for the items.
         *
         * @return \ArrayIterator
         */
        #[\ReturnTypeWillChange]
        public function getIterator()
        {
        }
        /**
         * Get a CachingIterator instance.
         *
         * @param  int  $flags
         * @return \CachingIterator
         */
        public function getCachingIterator($flags = \CachingIterator::CALL_TOSTRING)
        {
        }
        /**
         * Count the number of items in the collection.
         *
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
        /**
         * Get a base Support collection instance from this collection.
         *
         * @return \WPML\Collect\Support\Collection
         */
        public function toBase()
        {
        }
        /**
         * Determine if an item exists at an offset.
         *
         * @param  mixed  $key
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($key)
        {
        }
        /**
         * Get an item at a given offset.
         *
         * @param  mixed  $key
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($key)
        {
        }
        /**
         * Set the item at a given offset.
         *
         * @param  mixed  $key
         * @param  mixed  $value
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($key, $value)
        {
        }
        /**
         * Unset the item at a given offset.
         *
         * @param  string  $key
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($key)
        {
        }
        /**
         * Convert the collection to its string representation.
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Results array of items from Collection or Arrayable.
         *
         * @param  mixed  $items
         * @return array
         */
        protected function getArrayableItems($items)
        {
        }
        /** Those methods exist in the latest version of the library and have been copied here */
        /**
         * Run a dictionary map over the items.
         *
         * The callback should return an associative array with a single key/value pair.
         *
         * @param  callable  $callback
         * @return $this
         */
        public function mapToDictionary(callable $callback)
        {
        }
        /**
         * Run a grouping map over the items.
         *
         * The callback should return an associative array with a single key/value pair.
         *
         * @param  callable  $callback
         * @return static
         */
        public function mapToGroups(callable $callback)
        {
        }
        /**
         * Move the items meeting the condition to the front of the collection
         *
         * @param callable $condition
         *
         * @return Collection - A new collection
         */
        public function prioritize(callable $condition)
        {
        }
        /**
         * Convert an associative array of key => value to array of pairs [ key, value ].
         *
         * @return Collection
         */
        public function assocToPair()
        {
        }
        /**
         * Convert an array of pairs [ key, value ] to an associative array of key => value.
         *
         * @return Collection
         */
        public function pairToAssoc()
        {
        }
        /**
         * Executes the given function for each item while the total execution time is less than the time out.
         * Returns the unprocessed items if a timeout occurred.
         *
         * @param callable $fn Function to all for each item.
         * @param int $timeout Timeout in seconds.
         *
         * @return Collection
         */
        public function eachWithTimeout(callable $fn, $timeout)
        {
        }
        /**
         * Determine if the collection is not empty.
         *
         * @return bool
         */
        public function isNotEmpty()
        {
        }
        /**
         * Cross join with the given lists, returning all possible permutations.
         *
         * @param  mixed  ...$lists
         * @return static
         */
        public function crossJoin(...$lists)
        {
        }
    }
}
namespace WPML\FP\System {
    class System
    {
        /**
         * @return \Closure
         */
        public static function getPostData()
        {
        }
    }
}
namespace WPML\FP {
    /**
     * @method static callable always( ...$a ) Curried :: a → ( * → a )
     *
     * Returns a function that always returns the given value.
     *
     * ```php
     * $t = Fns::always( 'Tee' );
     * $t(); //=> 'Tee'
     * ```
     *
     * @method static callable converge( ...$convergingFn, ...$branchingFns ) - Curried :: ( ( x1, x2, … ) → z ) → [( ( a, b, … ) → x1 ), ( ( a, b, … ) → x2 ), …] → ( a → b → … → z )
     *
     * Accepts a converging function and a list of branching functions and returns a new function. The arity of the new function is the same as the arity of the longest branching function. When invoked, this new function is applied to some arguments, and each branching function is applied to those same arguments. The results of each branching function are passed as arguments to the converging function to produce the return value.
     *
     * ```php
     * $divide = curryN( 2, function ( $num, $dom ) { return $num / $dom; } );
     * $sum    = function ( Collection $collection ) { return $collection->sum(); };
     * $length = function ( Collection $collection ) { return $collection->count(); };
     *
     * $average = Fns::converge( $divide, [ $sum, $length ] );
     * $this->assertEquals( 4, $average( wpml_collect( [ 1, 2, 3, 4, 5, 6, 7 ] ) ) );
     * ```
     *
     * @method static callable|mixed map( ...$fn, ...$target ) - Curried :: ( a→b )→f a→f b
     *
     * Takes a function and a *functor*, applies the function to each of the functor's values, and returns a functor of the same shape.
     *
     * And array is considered a *functor*
     *
     * Dispatches to the *map* method of the second argument, if present
     *
     * @method static callable|mixed each ( ...$fn, ...$target ) - Curried :: ( a→b )→f a→f b
     * @method static callable|mixed identity( mixed ...$data ) - Curried :: a->a
     * @method static callable|mixed tap( callable  ...$fn, mixed ...$data ) - Curried :: fn->data->data
     * @method static callable|mixed reduce( ...$fn, ...$initial, ...$target ) - Curried :: ( ( a, b ) → a ) → a → [b] → a
     * @method static callable|mixed reduceRight( ...$fn, ...$initial, ...$target ) - Curried :: ( ( a, b ) → a ) → a → [b] → a
     *
     * Takes a function, an initial value and an array and returns the result.
     *
     * The function receives two values, the accumulator and the current value, and should return a result.
     *
     * The array values are passed to the function in the reverse order.
     *
     * ```php
     * $numbers = [ 1, 2, 3, 4, 5, 8, 19 ];
     *
     * $append = function( $acc, $val ) {
     *    $acc[] = $val;
     *    return $acc;
     * };
     *
     * $reducer = Fns::reduceRight( $append, [] );
     * $result = $reducer( $numbers ); // [ 19, 8, 5, 4, 3, 2, 1 ]
     *
     * // Works on collections too.
     * $result = $reducer( wpml_collect( $numbers ) ); // [ 19, 8, 5, 4, 3, 2, 1 ]
     * ```
     *
     * @method static callable|mixed filter( ...$predicate, ...$target ) - Curried :: ( a → bool ) → [a] → [a]
     * @method static callable|mixed reject( ...$predicate, ...$target ) - Curried :: ( a → bool ) → [a] → [a]
     * @method static callable|mixed value( mixed ...$data ) - Curried :: a|( *→a ) → a
     * @method static callable|object constructN( ...$argCount, ...$className ) - Curried :: int → string → object
     * @method static callable|int ascend( ...$fn, ...$a, ...$b ) - Curried :: ( a → b ) → a → a → int
     * @method static callable|int descend( ...$fn, ...$a, ...$b ) - Curried :: ( a → b ) → a → a → int
     * @method static callable useWith( ...$fn, ...$transformations ) - Curried :: ( ( x1, x2, … ) → z ) → [( a → x1 ), ( b → x2 ), …] → ( a → b → … → z )
     * @method static callable nthArg( ...$n ) - Curried :: int → *… → *
     * @method static callable|mixed either( ...$f, ...$g, ...$e ) - Curried:: ( a → b ) → ( b → c ) → Either a b → c
     * @method static callable|mixed maybe( ...$v, ...$f, ...$m ) - Curried:: b → ( a → b ) → Maybe a → b
     * @method static callable|bool isRight( ...$e ) - Curried:: e → bool
     * @method static callable|bool isLeft( ...$e ) - Curried:: e → bool
     * @method static callable|bool isJust( ...$m ) - Curried:: e → bool
     * @method static callable|bool isNothing( ...$m ) - Curried:: e → bool
     * @method static callable|mixed T( ...$_ ) - Curried :: _ → bool
     * @method static callable|mixed F( ...$_ ) - Curried :: _ → bool
     * @method static callable|Maybe safe( ...$fn ) - Curried :: ( a → b ) → ( a → Maybe b )
     * @method static callable|object make( ...$className ) - Curried :: string → object
     * @method static callable|object makeN( ...$argCount, ...$className ) - Curried :: int → string → object
     * @method static callable unary( ...$fn ) - Curried:: ( * → b ) → ( a → b )
     * @method static callable|mixed memorizeWith( ...$cacheKeyFn, ...$fn ) - Curried :: ( *… → String ) → ( *… → a ) → ( *… → a )
     * @method static callable|mixed memorize( ...$fn ) - Curried :: ( *… → a ) → ( *… → a )
     * @method static callable|mixed once( ...$fn ) - Curried :: ( *… → a ) → ( *… → a )
     * @method static callable|mixed withNamedLock( ...$name, ...$returnFn, ...$fn ) - Curried :: String → ( *… → String ) → ( *… → a ) → ( *… → a )
     *
     * Creates a new function that is *locked* so that it wont be called recursively. Multiple functions can use the same lock so they are blocked from calling each other recursively
     *
     * ```php
     *      $lockName = 'my-lock';
     *      $addOne = Fns::withNamedLock(
     *          $lockName,
     *          Fns::identity(),
     *          function ( $x ) use ( &$addOne ) { return $addOne( $x + 1 ); }
     *      );
     *
     *      $this->assertEquals( 13, $addOne( 12 ), 'Should not recurse' );
     *
     *      $addTwo = Fns::withNamedLock(
     *          $lockName,
     *          Fns::identity(),
     *          function ( $x ) use ( $addOne ) { return pipe( $addOne, $addOne) ( $x ); }
     *      );
     *
     *      $this->assertEquals( 10, $addTwo( 10 ), 'Should return 10 because $addOne is locked by the same name as $addTwo' );
     * ```
     *
     * @method static callable|mixed withoutRecursion( ...$returnFn, ...$fn ) - Curried :: ( *… → String ) → ( *… → a ) → ( *… → a )
     * @method static callable|mixed liftA2( ...$fn, ...$monadA, ...$monadB ) - Curried :: ( a → b → c ) → m a → m b → m c
     * @method static callable|mixed liftA3( ...$fn, ...$monadA, ...$monadB, ...$monadC ) - Curried :: ( a → b → c → d ) → m a → m b → m c → m d
     * @method static callable|mixed liftN( ...$n, ...$fn, ...$monad ) - Curried :: Number->( ( * ) → a ) → ( *m ) → m a
     *
     * @method static callable|mixed until( ...$predicate, ...$fns ) - Curried :: ( b → bool ) → [( a → b )] → a → b
     *
     * Executes consecutive functions until their $predicate($fn(...$args)) is true. When a result fulfils predicate then it is returned.
     *
     * ```
     *       $fns = [
     *         $add(1),
     *         $add(5),
     *         $add(10),
     *         $add(23),
     *      ];
     *
     *      $this->assertSame( 20, Fns::until( Relation::gt( Fns::__, 18 ), $fns )( 10 ) );
     * ```
     *
     */
    class Fns
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const __ = '__CURRIED_PLACEHOLDER__';
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @return \Closure
         */
        public static function noop()
        {
        }
        /**
         * Curried function that transforms a Maybe into an Either.
         *
         * @param mixed|null $or
         * @param Maybe|null $maybe
         *
         * @return callable|Either
         */
        public static function maybeToEither($or = null, $maybe = null)
        {
        }
    }
}
namespace WPML\FP\System {
    class _Filter
    {
        /**
         * _Filter constructor.
         *
         * @param string $key
         */
        public function __construct($key)
        {
        }
        /**
         * @param callable $fn
         *
         * @return _Filter
         */
        public function using(callable $fn)
        {
        }
        /**
         * @param mixed $default
         *
         * @return _Filter
         */
        public function defaultTo($default)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection<mixed> $collection
         *
         * @return \WPML\Collect\Support\Collection<mixed>
         */
        public function __invoke(\WPML\Collect\Support\Collection $collection)
        {
        }
    }
}
namespace WPML\FP {
    /**
     * @method static callable|bool toBool( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|int toInt( mixed ...$v ) - Curried :: mixed->int
     * @method static callable|string toStr( mixed ...$v ) - Curried :: mixed->string
     * @method static callable|array toArr( mixed ...$v ) - Curried :: mixed->array
     */
    class Cast
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
    /**
     * @method static callable|bool not( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isNotNull( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|mixed ifElse( ...$predicate, ...$first, ...$second, ...$data ) - Curried :: ( a->bool )->callable->callable->callable
     * @method static callable when( ...$predicate, ...$fn ) - Curried :: ( a->bool )->callable->callable
     * @method static callable unless( ...$predicate, ...$fn ) - Curried :: ( a->bool )->callable->callable
     * @method static callable cond( ...$conditions, ...$fn ) - Curried :: [( a->bool ), callable]->callable
     * @method static callable both( ...$a, ...$b, ...$data ) - Curried :: ( a → bool ) → ( a → bool ) → a → bool
     * @method static callable|bool allPass( ...$predicates, ...$data ) - Curried :: [( *… → bool )] → ( *… → bool )
     * @method static callable|bool anyPass( ...$predicates, ...$data ) - Curried :: [( *… → bool )] → ( *… → bool )
     * @method static callable complement( ...$fn ) - Curried :: ( *… → * ) → ( *… → bool )
     * @method static callable|mixed defaultTo( ...$a, ...$b ) - Curried :: a → b → a | b
     * @method static callable|bool either( ...$a, ...$b ) - Curried :: ( *… → bool ) → ( *… → bool ) → ( *… → bool )
     * @method static callable|mixed until ( ...$predicate, ...$transform, ...$data ) - Curried :: ( a → bool ) → ( a → a ) → a → a
     * @method static callable|bool propSatisfies( ...$predicate, ...$prop, ...$data ) - Curried :: ( a → bool ) → String → [String => a] → bool
     * @method static callable|bool isArray ( ...$a ) - Curried :: a → bool
     * @method static callable|bool isMappable ( ...$a ) - Curried :: a → bool
     * @method static callable|bool isEmpty( ...$a ) - Curried:: a → bool
     * @method static callable|bool isNotEmpty( ...$a ) - Curried:: a → bool
     * @method static callable|mixed firstSatisfying( ...$predicate, ...$functions, ...$data ) - Curried:: callable->callable[]->mixed->mixed
     * @method static callable|bool isTruthy( ...$data ) - Curried:: mixed->bool
     */
    class Logic
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|mixed prop( ...$key, ...$obj ) - Curried :: string->Collection|array|object->mixed|null
     * @method static callable|mixed propOr( ...$default, ...$key, ...$obj ) - Curried :: mixed->string->Collection|array|object->mixed|null
     * @method static callable|array props( ...$keys, ...$obj ) - Curried :: [keys] → Collection|array|object → [v]
     * @method static callable|array|\stdClass addProp( ...$key, ...$transformation, ...$obj ) - Curried :: string->callable->object|array->object->array
     * @method static callable|array|\stdClass removeProp( ...$key, ...$obj ) - Curried :: string->object|array->object->array
     * @method static callable|array|\stdClass renameProp( ...$key, ...$newKey, ...$obj ) - Curried :: string->string->object|array->object->array
     * @method static callable|mixed path( ...$path, ...$obj ) - Curried :: array->Collection|array|object->mixed|null
     * @method static callable|mixed pathOr( ...$default, ...$path, ...$obj ) - Curried :: mixed → array → Collection|array|object → mixed
     * @method static callable assoc( ...$key, ...$value, ...$item ) - Curried :: string->mixed->Collection|array|object->mixed|null
     * @method static callable assocPath( ...$path, ...$value, ...$item ) - Curried :: array->mixed->Collection|array|object->mixed|null
     * @method static callable lens( ...$getter, ...$setter ) - Curried :: callable->callable->callable
     * @method static callable lensProp( ...$prop ) - Curried :: string->callable
     * @method static callable lensPath( ...$path ) - Curried :: array->callable
     * @method static callable lensMapped( ...$toFunctorFn ) - Curried :: callable->callable
     * @method static callable lensMappedProp( ...$prop ) - Curried :: string->callable
     * @method static callable view( ...$lens, ...$obj ) - Curried :: callable->Collection|array|object->mixed
     * @method static callable set( ...$lens, ...$value, ...$obj ) - Curried :: callable->mixed->Collection|array|object->mixed
     * @method static callable over( ...$lens, ...$transformation, ...$obj ) - Curried :: callable->callable->Collection|array|object->mixed
     * @method static callable pick( ...$props, ...$obj ) - Curried :: array->Collection|array->Collection|array
     * @method static callable pickAll( ...$props, ...$obj ) - Curried :: array->Collection|array->Collection|array
     * @method static callable pickBy( ...$predicate, ...$obj ) - Curried :: ( ( v, k ) → bool ) → Collection|array->Collection|array
     * @method static callable pickByKey( ...$predicate, ...$obj ) - Curried :: ( ( k ) → bool ) → Collection|array->callable|Collection|array|object
     * @method static callable project( ...$props, ...$target ) - Curried :: array->Collection|array->Collection|array
     * @method static callable where( array $condition ) - Curried :: [string → ( * → bool )] → bool
     * @method static callable|bool has( ...$prop, ...$item ) - Curried :: string → a → bool
     * @method static callable|bool hasPath( ...$path, ...$item ) - Curried :: array<string> → a → bool
     * @method static callable|mixed evolve( ...$transformations, ...$item ) - Curried :: array → array → array
     *
     * @method static callable|array objOf( ...$key, ...$value ) - Curried :: string->mixed->array
     *
     * Creates an object containing a single key:value pair.
     *
     * @method static callable|array keys( ...$obj ) - Curried :: object|array->array
     *
     * Returns
     *  - keys if argument is an array
     *  - public properties' names if argument is an object
     *  - keys if argument is Collection
     *
     * ```
     * $this->assertEquals( [ 0, 1, 2 ], Obj::keys( [ 'a', 'b', 'c' ] ) );
     * $this->assertEquals( [ 'a', 'b', 'c' ], Obj::keys( [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) );
     *
     * $this->assertEquals( [ 0, 1, 2 ], Obj::keys( \wpml_collect( [ 'a', 'b', 'c' ] ) ) );
     * $this->assertEquals( [ 'a', 'b', 'c' ], Obj::keys( \wpml_collect( [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) ) );
     *
     * $this->assertEquals( [ 'a', 'b', 'c' ], Obj::keys( (object) [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) );
     * ```
     *
     * @method static callable|array values( ...$obj ) - Curried :: object|array->array
     *
     * Returns
     *  - values if argument is an array
     *  - public properties' values if argument is an object
     *  - values if argument is Collection
     *
     * ```
     * $this->assertEquals( [ 'a', 'b', 'c' ], Obj::values( [ 'a', 'b', 'c' ] ) );
     * $this->assertEquals( [ 1, 2, 3 ], Obj::values( [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) );
     *
     * $this->assertEquals( [ 'a', 'b', 'c' ], Obj::values( \wpml_collect( [ 'a', 'b', 'c' ] ) ) );
     * $this->assertEquals( [ 1, 2, 3 ], Obj::values( \wpml_collect( [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) ) );
     *
     * $this->assertEquals( [ 1, 2, 3 ], Obj::values( (object) [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) );
     * ```
     *
     * @method static callable|array replaceRecursive( array ...$newValue, ...$target ) - Curried :: array->array->array
     *
     * @method static callable|array toArray( Collection|Object ...$item ) - Curried :: Collection|Object->array
     */
    class Obj
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Curried :: mixed → array|object|Collection → array|object|Collection
         * function to remove an item by key from an array.
         *
         * @param string|int                   $key
         * @param array|object|Collection|null $item
         *
         * @return callable|array|object|Collection
         */
        static function without($key = null, $item = null)
        {
        }
        /**
         * Curried :: array|object -> array|object -> array|object
         *
         * It merges the new data with item.
         *
         * @param array|object $newData
         * @param array|object $item
         *
         * @return array|object
         */
        public static function merge($newData = null, $item = null)
        {
        }
    }
}
namespace WPML\FP\Functor {
    trait Functor
    {
        /** @var mixed */
        protected $value;
        /**
         * @param  mixed  $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
        /**
         * @param callable $callback
         *
         * @return \WPML\FP\Either
         */
        public abstract function map(callable $callback);
    }
}
namespace WPML\FP {
    /**
     * Class Either
     * @package WPML\FP
     *
     * @method static callable|Right of( ...$value ) - Curried :: a → Right a
     *
     * @method static callable|Left left( ...$value ) - Curried :: a → Left a
     *
     * @method static callable|Right right( ...$value ) - Curried :: a → Right a
     *
     * @method static callable|Left|Right fromNullable( ...$value ) - Curried :: a → Either a
     *
     * @method static callable|Left|Right fromBool( ...$value ) - Curried :: a → Either a
     *
     * @method static Either tryCatch( ...$fn ) - Curried :: a → Either a
     *
     * @method static mixed getOrElse( ...$other )
     */
    abstract class Either
    {
        use \WPML\FP\Functor\Functor;
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @return Either
         */
        public function join()
        {
        }
        /**
         * @param callable $fn
         *
         * @return mixed
         */
        public abstract function chain(callable $fn);
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public abstract function bichain(callable $leftFn, callable $rightFn);
        /**
         * @param callable $fn
         *
         * @return mixed
         */
        public abstract function orElse(callable $fn);
        public abstract function bimap(callable $leftFn, callable $rightFn);
        public abstract function coalesce(callable $leftFn, callable $rightFn);
        public abstract function alt(\WPML\FP\Either $alt);
        public abstract function filter(callable $fn);
    }
    trait ConstApplicative
    {
        /**
         * @param mixed $otherContainer
         *
         * @return mixed
         */
        public function ap($otherContainer)
        {
        }
    }
}
namespace WPML\FP\Functor {
    trait Pointed
    {
        /**
         * of :: a -> M a
         *
         * Curried function that returns an instance of the derived class
         * @param mixed $value (optional)
         *
         * @return mixed|callable
         */
        public static function of($value = null)
        {
        }
    }
}
namespace WPML\FP {
    class Left extends \WPML\FP\Either
    {
        use \WPML\FP\ConstApplicative;
        use \WPML\FP\Functor\Pointed;
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function map(callable $fn)
        {
        }
        public function bimap(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Right
         */
        public function coalesce(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @return void
         * @throws \Exception
         */
        public function get()
        {
        }
        /**
         * @param mixed $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Right
         */
        public function orElse(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public function bichain(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         * @throws \Exception
         */
        public function getOrElseThrow($value)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function tryCatch(callable $fn)
        {
        }
        public function alt(\WPML\FP\Either $alt)
        {
        }
    }
    trait Applicative
    {
        /**
         * @param mixed $otherContainer
         *
         * @return mixed
         */
        public function ap($otherContainer)
        {
        }
    }
    class Right extends \WPML\FP\Either
    {
        use \WPML\FP\Applicative;
        use \WPML\FP\Functor\Pointed;
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function map(callable $fn)
        {
        }
        public function bimap(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Right
         */
        public function coalesce(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param Either $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function orElse(callable $fn)
        {
        }
        /**
         * @param mixed $value
         *
         * @return mixed
         */
        public function getOrElseThrow($value)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public function bichain(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function tryCatch(callable $fn)
        {
        }
        public function alt(\WPML\FP\Either $alt)
        {
        }
    }
    /**
     * Class Maybe
     * @package WPML\FP
     * @method static callable|Just|Nothing fromNullable( ...$value ) - Curried :: a → Nothing | Just a
     *
     * if $value is null or false it returns a Nothing otherwise returns a Just containing the value
     *
     * @method static callable safe( ...$fn ) - Curried :: ( a → b ) → ( a → Maybe b )
     *
     * returns a function that when called will run the passed in function and put the result into a Maybe
     *
     * @method static callable safeAfter( ...$predicate, ...$fn ) - Curried :: ( b → bool ) → ( a → b ) → ( a → Maybe b )
     *
     * returns a function that when called will run the passed in function and pass the result of the function
     * to the predicate. If the predicate returns true the result will be a Just containing the result of the function.
     * Otherwise it returns a Nothing if the predicate returns false.
     *
     * @method static callable safeBefore( ...$predicate, ...$fn ) - Curried :: ( a → bool ) → ( a → b ) → ( a → Maybe b )
     *
     * returns a function that when called will pass the given value to the predicate.
     * If the predicate returns true the value will be lifted into a Just instance and
     * the passed in function will then be mapped.
     * Otherwise it returns a Nothing if the predicate returns false.
     *
     * @method static callable|Just just( ...$value ) - Curried :: a → Just a
     *
     * returns a Just containing the value.
     *
     * @method static callable|Just of( ...$value ) - Curried :: a → Just a
     *
     * returns a Just containing the value.
     *
     */
    class Maybe
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @return Nothing
         */
        public static function nothing()
        {
        }
        /**
         * @return bool
         */
        public function isNothing()
        {
        }
        /**
         * @return bool
         */
        public function isJust()
        {
        }
    }
    class Just extends \WPML\FP\Maybe
    {
        use \WPML\FP\Functor\Functor;
        use \WPML\FP\Functor\Pointed;
        use \WPML\FP\Applicative;
        /**
         * @param callable $fn
         *
         * @return Just|Nothing
         */
        public function map(callable $fn)
        {
        }
        /**
         * @param mixed $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Just|Nothing
         */
        public function filter($fn = null)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Just|Nothing
         */
        public function reject($fn = null)
        {
        }
        /**
         * @param callable $fn
         *
         * @return mixed
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @return bool
         */
        public function isJust()
        {
        }
    }
    class Nothing extends \WPML\FP\Maybe
    {
        use \WPML\FP\ConstApplicative;
        /**
         * @param callable $fn
         *
         * @return Nothing
         */
        public function map(callable $fn)
        {
        }
        /**
         * @return void
         * @throws \Exception
         */
        public function get()
        {
        }
        /**
         * @param mixed|callable $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Nothing
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Nothing
         */
        public function reject(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Nothing
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @return bool
         */
        public function isNothing()
        {
        }
    }
    /**
     * @method static callable|mixed inspect( mixed ...$input )
     * @method static callable|mixed log( string ...$label )
     * @method static callable|mixed logDump( string ...$label, mixed ...$input )
     * @method static callable|mixed logPrintR( string ...$label, mixed ...$input )
     * @method static callable|mixed logBacktrace( string ...$label, mixed ...$input )
     */
    class Debug
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
}
namespace WPML\FP\Monoid {
    abstract class Monoid
    {
        public static function concat($a = null, $b = null)
        {
        }
        public static function of(array $array = null)
        {
        }
    }
    class All extends \WPML\FP\Monoid\Monoid
    {
        public static function _concat($a, $b)
        {
        }
        public static function mempty()
        {
        }
    }
    class Sum extends \WPML\FP\Monoid\Monoid
    {
        public static function _concat($a, $b)
        {
        }
        public static function mempty()
        {
        }
    }
    class Any extends \WPML\FP\Monoid\Monoid
    {
        public static function _concat($a, $b)
        {
        }
        public static function mempty()
        {
        }
    }
    class Str extends \WPML\FP\Monoid\Monoid
    {
        public static function _concat($a, $b)
        {
        }
        public static function mempty()
        {
        }
    }
}
namespace WPML\FP {
    /**
     * @method static string tail( string ...$str ) - Curried :: string->string
     * @method static array split( ...$delimiter, ...$str ) - Curried :: string->string->string
     * @method static callable|array parse( ...$string ) - Curried :: string → array
     * @method static callable|bool includes( ...$needle, ...$str ) - Curried :: string → string → bool
     * @method static callable|string trim( ...$trim, ...$str ) - Curried :: string → string → string
     * @method static callable|string trimPrefix( ...$trim, ...$str ) - Curried :: string → string → string
     *
     * Trims the prefix from the start of the string if the prefix exists
     *
     * ```
     * $trimmed = Str::trimPrefix( 'prefix-', 'prefix-test' );
     * ```
     *
     * @method static callable|string concat( ...$a, ...$b ) - Curried :: string → string → string
     * @method static callable|string sub( ...$start, ...$str ) - Curried :: int → string → string
     * @method static callable|string startsWith( ...$test, ...$str ) - Curried :: string → string → bool
     * @method static callable|string endsWith( ...$test, ...$str ) - Curried :: string → string → bool
     * @method static callable|int pos( ...$test, ...$str ) - Curried :: string → string → int
     * @method static callable|int len( ...$str ) - Curried :: string → int
     * @method static callable|string replace( ...$find, ...$replace, ...$str ) - Curried :: string → string → string → string
     * @method static callable|string pregReplace( ...$pattern, ...$replace, ...$str ) - Curried :: string → string → string → string
     * @method static callable|string match( ...$pattern, ...$str ) - Curried :: string → string → array
     * @method static callable|string matchAll( ...$pattern, ...$str ) - Curried :: string → string → array
     * @method static callable|string wrap( ...$before, ...$after, ...$str ) - Curried :: string → string → string
     * @method static callable|string toUpper( string ...$str ) - Curried :: string → string
     * @method static callable|string toLower( string ...$str ) - Curried :: string → string
     *
     * Wraps a string inside 2 other strings
     *
     * ```
     * $wrapsInDiv = Str::wrap( '<div>', '</div>' );
     * $wrapsInDiv( 'To be wrapped' ); // '<div>To be wrapped</div>'
     * ```
     *
     */
    class Str
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Truncates a string to a maximum number of bytes keeping multibyte chars integrity.
         *
         * @param string $string
         * @param int $max_bytes
         * @param int|null $max_characters
         * @return string
         */
        public static function truncate_bytes($string, $max_bytes, $max_characters = null)
        {
        }
    }
}
namespace WPML\FP\Invoker {
    /**
     * Class BeforeAfterInvoker
     * @package WPML\FP
     *
     * Helper class that allows a before function and an after function to be run
     * when running another function
     *
     * ```php
     * $withFilter = function ( $name, $filterFn, $priority = 10, $count = 1 ) {
     *     $before = partial( 'add_filter', $name, $filterFn, $priority, $count );
     *     $after = partial( 'remove_filter', $name, $filterFn, $priority, $count );
     *     return BeforeAfterInvoker::of( $before, $after );
     * }
     *
     * $result = $withFilter( 'query', $some_callback, 10, 1 )
     *          ->invoke( $somefunction )
     *          ->runWith( 123, 456 )
     * ```
     *
     * This will call add_filter to add the filter then call the function to be invoked
     * and finally call remove_filter to remove the filter.
     *
     */
    class BeforeAfter
    {
        /**
         * Set the function to be invoked
         * @param callable $fn
         *
         * @return $this
         */
        public function invoke(callable $fn)
        {
        }
        /**
         * Add another pair of before and after functions.
         * When it's finally run it executes before1 then before2
         * then the function
         * then after2 followed by after1
         *
         * @param callable $before
         * @param callable $after
         *
         * @return BeforeAfter
         */
        public function then(callable $before, callable $after)
        {
        }
        /**
         * Invoke the function with the arguments
         * Calls the before function first then the function and then the after function
         * @param mixed ...$args
         *
         * @return mixed
         */
        public function runWith(...$args)
        {
        }
        public static function of(callable $before, callable $after)
        {
        }
    }
    class _Invoker
    {
        /**
         * _Invoker constructor.
         *
         * @param string $fnName
         */
        public function __construct($fnName)
        {
        }
        /**
         * @param mixed ...$args
         *
         * @return _Invoker
         */
        public function with(...$args)
        {
        }
        /**
         * @param mixed $instance
         *
         * @return mixed
         */
        public function __invoke($instance)
        {
        }
    }
}
namespace WPML\FP {
    /**
     * @method static callable iso( ...$to, ...$from ) - Curried :: callable->callable->callable
     * @method static callable isoIdentity() :: callable->callable->callable
     * @method static callable isoUnserialized() :: callable->callable->callable
     * @method static callable isoJsonDecoded() :: callable->callable->callable
     * @method static callable isoUrlDecoded() :: callable->callable->callable
     * @method static callable isoBase64Decoded() :: callable->callable->callable
     * @method static callable isoParsedUrl() :: callable->callable->callable
     * @method static callable isoParsedQuery() :: callable->callable->callable
     */
    class Lens
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
}
namespace WPML\FP\Functor {
    class ConstFunctor
    {
        use \WPML\FP\Functor\Functor;
        use \WPML\FP\Functor\Pointed;
        /**
         * @param callable $callback
         *
         * @return ConstFunctor
         */
        public function map($callback)
        {
        }
    }
    class IdentityFunctor
    {
        use \WPML\FP\Functor\Functor;
        use \WPML\FP\Functor\Pointed;
        /**
         * @param callable $callback
         *
         * @return IdentityFunctor
         */
        public function map($callback)
        {
        }
    }
}
namespace WPML\FP {
    /**
     * @method static callable|array|null toArray(string ...$str) - Curried :: json -> array
     * @method static callable|Collection|null toCollection(string ...$str) Curried :: json -> null | Collection
     */
    class Json
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|mixed multiply( ...$a, ...$b ) - Curried :: Number → Number → Number
     * @method static callable|mixed divide( ...$a, ...$b ) - Curried :: Number → Number → Number
     * @method static callable|mixed add( ...$a, ...$b ) - Curried :: Number → Number → Number
     * @method static callable|mixed product( ...$array ) - Curried :: [Number] → Number
     */
    class Math
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @deprecated Use Fn instead
     *
     * @method static callable|mixed map( callable ...$fn, mixed ...$target ) - Curried :: (a -> b) -> f a -> f b
     * @method static callable|mixed identity( mixed ...$data ) - Curried :: a -> a
     * @method static callable|mixed always( ...$a, ...$b ) - Curried :: a -> b -> a
     * @method static callable|mixed reduce( ...$fn, ...$initial, ...$target ) - Curried :: ((a, b) → a) → a → [b] → a
     * @method static callable\mixed converge( ...$convergingFn, ...$branchingFns, ...$data ) - Curried :: callable -> [callable] -> mixed -> callable
     */
    class FP
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|bool isNull( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isBool( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isInt( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isNumeric( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isFloat( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isString( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isScalar( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isArray( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isObject( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isCallable( mixed ...$v ) - Curried :: mixed->bool
     *
     * @method static callable|bool isSerialized( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isJson( mixed ...$v ) - Curried :: mixed->bool
     */
    class Type
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|bool equals( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool lt( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool lte( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool gt( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool gte( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool propEq( ...$prop, ...$value, ...$obj ) - Curried :: String → a → array → bool
     * @method static callable|array sortWith( ...$comparators, ...$array ) - Curried :: [(a, a) → int] → [a] → [a]
     */
    class Relation
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    class Wrapper
    {
        use \WPML\FP\Functor\Functor;
        use \WPML\FP\Functor\Pointed;
        /**
         * @param callable $fn
         *
         * @return Wrapper
         */
        public function map(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return mixed|null
         */
        public function filter($fn = null)
        {
        }
        /**
         * @return mixed
         */
        public function join()
        {
        }
        /**
         * @param mixed $value
         *
         * @return Wrapper
         */
        public function ap($value)
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
    }
    class Promise
    {
        /**
         * @param mixed $data
         *
         * @return mixed
         */
        public function resolve($data)
        {
        }
        /**
         * @param mixed $data
         *
         * @return mixed
         */
        public function reject($data)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Promise
         */
        public function then(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Promise
         */
        public function onError(callable $fn)
        {
        }
    }
    /**
     * Class Undefined
     * @package WPML\FP
     *
     * Class represents Undefined value. It let us handle correctly expected, but falsy values like null, 0 or false.
     */
    class Undefined
    {
    }
}
namespace WPML\FP\System {
    class _Validator
    {
        /**
         * _Validator constructor.
         *
         * @param string $key
         */
        public function __construct($key)
        {
        }
        /**
         * @param callable $fn
         *
         * @return _Validator
         */
        public function using(callable $fn)
        {
        }
        /**
         * @param string $error
         *
         * @return _Validator
         */
        public function error($error)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection<mixed> $collection
         *
         * @return callable|\WPML\FP\Either
         */
        public function __invoke(\WPML\Collect\Support\Collection $collection)
        {
        }
    }
}
namespace WPML\FP {
    /**
     * Lst class contains functions for working on ordered arrays indexed with numerical keys
     *
     * @method static callable|array append( mixed ...$newItem, array ...$data ) - Curried :: mixed->array->array
     * @method static callable|array fromPairs( array ...$array ) - Curried :: [[a, b]] → [a => b]
     * @method static callable|array toObj( array ...$array ) - Curried :: array → object
     * @method static callable|array pluck( ...$prop, ...$array ) - Curried :: string → array → array
     * @method static callable|array partition( ...$predicate, ...$target ) - Curried :: ( a → bool ) → [a] → [[a], [a]]
     * @method static callable|array sort( ...$fn, ...$target ) - Curried :: ( ( a, a ) → int|bool ) → [a] → [a]
     * @method static callable|array unfold( ...$fn, ...$seed ) - Curried :: ( a → [b] ) → * → [b]
     * @method static callable|array zip( ...$a, ...$b ) - Curried :: [a] → [b] → [[a, b]]
     * @method static callable|array zipObj( ...$a, ...$b ) - Curried :: [a] → [b] → [a => b]
     * @method static callable|array zipWith( ...$f, ...$a, ...$b ) - Curried :: ( ( a, b ) → c ) → [a] → [b] → [c]
     * @method static callable|string join( ...$glue, ...$array ) - Curried :: string → [a] → string
     * @method static callable|string joinWithCommasAndAnd( ...$array ) - Curried :: [a] → string
     * @method static callable|array concat( ...$a, ...$b ) - Curried :: [a] → [a] → [a]
     * @method static callable|array|null find( ...$predicate, ...$array ) - Curried :: ( a → bool ) → [a] → a | null
     * @method static callable|array flattenToDepth( ...$depth, ...$array ) - Curried :: int → [[a]] → [a]
     * @method static callable|array flatten( ...$array ) - Curried :: [[a]] → [a]
     * @method static callable|bool includes( ...$val, ...$array ) - Curried :: a → [a] → bool
     * @method static callable|bool includesAll( ...$values, ...$array ) - Curried :: [a] → [a] → bool
     *
     * Determines if all the values are in the given array
     *
     * ```
     * $includes10and20 = Lst::includesAll( [ 10, 20 ] );
     *
     * $this->assertTrue( $includes10and20( [ 5, 10, 15, 20 ] ) );
     * $this->assertFalse( $includes10and20( [ 5, 15, 20 ] ) );
     * ```
     * @method static callable|bool nth( ...$n, ...$array ) - Curried :: int → [a] → a | null
     * @method static callable|bool first( ...$array ) - Curried :: [a, b] → a | null
     * @method static callable|bool last( ...$array ) - Curried :: [a, b] → b | null
     * @method static callable|int length( ...$array ) - Curried :: [a] → int
     * @method static callable|array take( ...$n, ...$array ) - Curried :: int → [a] → [a]
     * @method static callable|array takeLast( ...$n, ...$array ) - Curried :: int → [a] → [a]
     * @method static callable|array slice( ...$offset, ...$limit, ...$array ) - Curried :: int → int->[a] → [a]
     * @method static callable|array drop( ...$n, ...$array ) - Curried :: int → [a] → [a]
     * @method static callable|array dropLast( ...$n, ...$array ) - Curried :: int → [a] → [a]
     * @method static callable|array makePair( ...$a, ...$b ) - Curried :: mixed → mixed → array
     * @method static callable|array make ( ...$a ) - Curried :: mixed → array
     * @method static callable|array insert( ...$index, ...$v, ...$array ) - Curried :: int → mixed → array → array
     * @method static callable|array range( ...$from, ...$to )  - Curried :: int → int → array
     * @method static callable|array xprod( ...$a, ...$b ) - Curried :: [a]->[b]->[a, b]
     *
     * Creates a new list out of the two supplied by creating each possible pair from the lists.
     *
     * ```
     * $a              = [ 1, 2, 3 ];
     * $b              = [ 'a', 'b', 'c' ];
     * $expectedResult = [
     *   [ 1, 'a' ], [ 1, 'b' ], [ 1, 'c' ],
     *   [ 2, 'a' ], [ 2, 'b' ], [ 2, 'c' ],
     *   [ 3, 'a' ], [ 3, 'b' ], [ 3, 'c' ],
     * ];
     *
     * $this->assertEquals( $expectedResult, Lst::xprod( $a, $b ) );
     * ```
     * @method static callable|array prepend( ...$val, ...$array ) - Curried:: a → [a] → [a]
     *
     * Returns a new array with the given element at the front, followed by the contents of the list.
     *
     * @method static callable|array reverse( ...$array ) - Curried:: [a] → [a]
     *
     * Returns a new array with the elements reversed.
     *
     */
    class Lst
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Curried function that keys the array by the given key
         *
         * keyBy :: string -> array -> array
         *
         * ```
         * $data = [
         *    [ 'x' => 'a', 'y' => 123 ],
         *    [ 'x' => 'b', 'y' => 456 ],
         * ];
         *
         * Lst::keyBy( 'x', $data );
         * [
         *    'a' => [ 'x' => 'a', 'y' => 123 ],
         *    'b' => [ 'x' => 'b', 'y' => 456 ],
         * ],
         * ```
         *
         * @param string $key
         * @param mixed[]  $array
         *
         * @return mixed[]|callable
         */
        public static function keyBy($key = null, $array = null)
        {
        }
        /**
         * Curried function that wraps each item in array with pair: [$key => $item1]
         *
         * keyWith :: string -> array -> array
         *
         * ```
         * $data = [ 1, 2.3, 'some data', - 2, 'a' ];
         *
         * Lst::keyWith('myKey', $data);
         * [ [ 'myKey' => 1 ], [ 'myKey' => 2.3 ], [ 'myKey' => 'some data' ], [ 'myKey' => - 2 ], [ 'myKey' => 'a' ] ]
         * ```
         *
         * @param string $key
         * @param mixed[] $array
         *
         * @return mixed[]|callable
         */
        public static function keyWith($key = null, $array = null)
        {
        }
        /**
         * This method will return the values in the original collection that are not present in the given collection:
         *
         * @param array|Collection $array1
         * @param array|Collection $array2
         *
         * @return callable|Collection|array
         */
        public static function diff($array1 = null, $array2 = null)
        {
        }
        /**
         * It returns array of $val elements repeated $times times.
         *
         * @param mixed $val
         * @param int $times
         *
         * @return callable|array[mixed]
         */
        public static function repeat($val = null, $times = null)
        {
        }
        /**
         * @param array|Collection $param
         *
         * @return callable|int
         */
        public static function sum($param = null)
        {
        }
    }
}
namespace Symfony\Polyfill\Iconv {
    /**
     * iconv implementation in pure PHP, UTF-8 centric.
     *
     * Implemented:
     * - iconv              - Convert string to requested character encoding
     * - iconv_mime_decode  - Decodes a MIME header field
     * - iconv_mime_decode_headers - Decodes multiple MIME header fields at once
     * - iconv_get_encoding - Retrieve internal configuration variables of iconv extension
     * - iconv_set_encoding - Set current setting for character encoding conversion
     * - iconv_mime_encode  - Composes a MIME header field
     * - iconv_strlen       - Returns the character count of string
     * - iconv_strpos       - Finds position of first occurrence of a needle within a haystack
     * - iconv_strrpos      - Finds the last occurrence of a needle within a haystack
     * - iconv_substr       - Cut out part of a string
     *
     * Charsets available for conversion are defined by files
     * in the charset/ directory and by Iconv::$alias below.
     * You're welcome to send back any addition you make.
     *
     * @author Nicolas Grekas <p@tchwork.com>
     *
     * @internal
     */
    final class Iconv
    {
        const ERROR_ILLEGAL_CHARACTER = 'iconv(): Detected an illegal character in input string';
        const ERROR_WRONG_CHARSET = 'iconv(): Wrong charset, conversion from `%s\' to `%s\' is not allowed';
        public static $inputEncoding = 'utf-8';
        public static $outputEncoding = 'utf-8';
        public static $internalEncoding = 'utf-8';
        public static function iconv($inCharset, $outCharset, $str)
        {
        }
        public static function iconv_mime_decode_headers($str, $mode = 0, $charset = null)
        {
        }
        public static function iconv_mime_decode($str, $mode = 0, $charset = null)
        {
        }
        public static function iconv_get_encoding($type = 'all')
        {
        }
        public static function iconv_set_encoding($type, $charset)
        {
        }
        public static function iconv_mime_encode($fieldName, $fieldValue, $pref = null)
        {
        }
        public static function iconv_strlen($s, $encoding = null)
        {
        }
        public static function strlen1($s, $encoding = null)
        {
        }
        public static function strlen2($s, $encoding = null)
        {
        }
        public static function iconv_strpos($haystack, $needle, $offset = 0, $encoding = null)
        {
        }
        public static function iconv_strrpos($haystack, $needle, $encoding = null)
        {
        }
        public static function iconv_substr($s, $start, $length = 2147483647, $encoding = null)
        {
        }
    }
}
namespace Psr\Log {
    class InvalidArgumentException extends \InvalidArgumentException
    {
    }
    /**
     * Describes a logger-aware instance.
     */
    interface LoggerAwareInterface
    {
        /**
         * Sets a logger instance on the object.
         *
         * @param LoggerInterface $logger
         *
         * @return void
         */
        public function setLogger(\Psr\Log\LoggerInterface $logger);
    }
    /**
     * This is a simple Logger trait that classes unable to extend AbstractLogger
     * (because they extend another class, etc) can include.
     *
     * It simply delegates all log-level-specific methods to the `log` method to
     * reduce boilerplate code that a simple Logger that does the same thing with
     * messages regardless of the error level has to implement.
     */
    trait LoggerTrait
    {
        /**
         * System is unusable.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function emergency($message, array $context = array())
        {
        }
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function alert($message, array $context = array())
        {
        }
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function critical($message, array $context = array())
        {
        }
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function error($message, array $context = array())
        {
        }
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function warning($message, array $context = array())
        {
        }
        /**
         * Normal but significant events.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function notice($message, array $context = array())
        {
        }
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function info($message, array $context = array())
        {
        }
        /**
         * Detailed debug information.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function debug($message, array $context = array())
        {
        }
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed  $level
         * @param string $message
         * @param array  $context
         *
         * @return void
         *
         * @throws \Psr\Log\InvalidArgumentException
         */
        public abstract function log($level, $message, array $context = array());
    }
    /**
     * This is a simple Logger implementation that other Loggers can inherit from.
     *
     * It simply delegates all log-level-specific methods to the `log` method to
     * reduce boilerplate code that a simple Logger that does the same thing with
     * messages regardless of the error level has to implement.
     */
    abstract class AbstractLogger implements \Psr\Log\LoggerInterface
    {
        /**
         * System is unusable.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function emergency($message, array $context = array())
        {
        }
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function alert($message, array $context = array())
        {
        }
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function critical($message, array $context = array())
        {
        }
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function error($message, array $context = array())
        {
        }
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function warning($message, array $context = array())
        {
        }
        /**
         * Normal but significant events.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function notice($message, array $context = array())
        {
        }
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function info($message, array $context = array())
        {
        }
        /**
         * Detailed debug information.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function debug($message, array $context = array())
        {
        }
    }
    /**
     * Describes log levels.
     */
    class LogLevel
    {
        const EMERGENCY = 'emergency';
        const ALERT = 'alert';
        const CRITICAL = 'critical';
        const ERROR = 'error';
        const WARNING = 'warning';
        const NOTICE = 'notice';
        const INFO = 'info';
        const DEBUG = 'debug';
    }
    /**
     * This Logger can be used to avoid conditional log calls.
     *
     * Logging should always be optional, and if no logger is provided to your
     * library creating a NullLogger instance to have something to throw logs at
     * is a good way to avoid littering your code with `if ($this->logger) { }`
     * blocks.
     */
    class NullLogger extends \Psr\Log\AbstractLogger
    {
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed  $level
         * @param string $message
         * @param array  $context
         *
         * @return void
         *
         * @throws \Psr\Log\InvalidArgumentException
         */
        public function log($level, $message, array $context = array())
        {
        }
    }
}
namespace Psr\Log\Test {
    /**
     * Used for testing purposes.
     *
     * It records all records and gives you access to them for verification.
     *
     * @method bool hasEmergency($record)
     * @method bool hasAlert($record)
     * @method bool hasCritical($record)
     * @method bool hasError($record)
     * @method bool hasWarning($record)
     * @method bool hasNotice($record)
     * @method bool hasInfo($record)
     * @method bool hasDebug($record)
     *
     * @method bool hasEmergencyRecords()
     * @method bool hasAlertRecords()
     * @method bool hasCriticalRecords()
     * @method bool hasErrorRecords()
     * @method bool hasWarningRecords()
     * @method bool hasNoticeRecords()
     * @method bool hasInfoRecords()
     * @method bool hasDebugRecords()
     *
     * @method bool hasEmergencyThatContains($message)
     * @method bool hasAlertThatContains($message)
     * @method bool hasCriticalThatContains($message)
     * @method bool hasErrorThatContains($message)
     * @method bool hasWarningThatContains($message)
     * @method bool hasNoticeThatContains($message)
     * @method bool hasInfoThatContains($message)
     * @method bool hasDebugThatContains($message)
     *
     * @method bool hasEmergencyThatMatches($message)
     * @method bool hasAlertThatMatches($message)
     * @method bool hasCriticalThatMatches($message)
     * @method bool hasErrorThatMatches($message)
     * @method bool hasWarningThatMatches($message)
     * @method bool hasNoticeThatMatches($message)
     * @method bool hasInfoThatMatches($message)
     * @method bool hasDebugThatMatches($message)
     *
     * @method bool hasEmergencyThatPasses($message)
     * @method bool hasAlertThatPasses($message)
     * @method bool hasCriticalThatPasses($message)
     * @method bool hasErrorThatPasses($message)
     * @method bool hasWarningThatPasses($message)
     * @method bool hasNoticeThatPasses($message)
     * @method bool hasInfoThatPasses($message)
     * @method bool hasDebugThatPasses($message)
     */
    class TestLogger extends \Psr\Log\AbstractLogger
    {
        /**
         * @var array
         */
        public $records = [];
        public $recordsByLevel = [];
        /**
         * @inheritdoc
         */
        public function log($level, $message, array $context = [])
        {
        }
        public function hasRecords($level)
        {
        }
        public function hasRecord($record, $level)
        {
        }
        public function hasRecordThatContains($message, $level)
        {
        }
        public function hasRecordThatMatches($regex, $level)
        {
        }
        public function hasRecordThatPasses(callable $predicate, $level)
        {
        }
        public function __call($method, $args)
        {
        }
        public function reset()
        {
        }
    }
    /**
     * Provides a base test class for ensuring compliance with the LoggerInterface.
     *
     * Implementors can extend the class and implement abstract methods to run this
     * as part of their test suite.
     */
    abstract class LoggerInterfaceTest extends \PHPUnit\Framework\TestCase
    {
        /**
         * @return LoggerInterface
         */
        public abstract function getLogger();
        /**
         * This must return the log messages in order.
         *
         * The simple formatting of the messages is: "<LOG LEVEL> <MESSAGE>".
         *
         * Example ->error('Foo') would yield "error Foo".
         *
         * @return string[]
         */
        public abstract function getLogs();
        public function testImplements()
        {
        }
        /**
         * @dataProvider provideLevelsAndMessages
         */
        public function testLogsAtAllLevels($level, $message)
        {
        }
        public function provideLevelsAndMessages()
        {
        }
        /**
         * @expectedException \Psr\Log\InvalidArgumentException
         */
        public function testThrowsOnInvalidLevel()
        {
        }
        public function testContextReplacement()
        {
        }
        public function testObjectCastToString()
        {
        }
        public function testContextCanContainAnything()
        {
        }
        public function testContextExceptionKeyCanBeExceptionOrOtherValues()
        {
        }
    }
    /**
     * This class is internal and does not follow the BC promise.
     *
     * Do NOT use this class in any way.
     *
     * @internal
     */
    class DummyTest
    {
        public function __toString()
        {
        }
    }
}
namespace Psr\Log {
    /**
     * Basic Implementation of LoggerAwareInterface.
     */
    trait LoggerAwareTrait
    {
        /**
         * The logger instance.
         *
         * @var LoggerInterface|null
         */
        protected $logger;
        /**
         * Sets a logger.
         *
         * @param LoggerInterface $logger
         */
        public function setLogger(\Psr\Log\LoggerInterface $logger)
        {
        }
    }
}
namespace {
    /**
     * WP Async Request
     *
     * @package WP-Background-Processing
     */
    /**
     * Abstract WP_Async_Request class.
     *
     * @abstract
     */
    abstract class WP_Async_Request
    {
        /**
         * Prefix
         *
         * (default value: 'wp')
         *
         * @var string
         * @access protected
         */
        protected $prefix = 'wp';
        /**
         * Action
         *
         * (default value: 'async_request')
         *
         * @var string
         * @access protected
         */
        protected $action = 'async_request';
        /**
         * Identifier
         *
         * @var mixed
         * @access protected
         */
        protected $identifier;
        /**
         * Data
         *
         * (default value: array())
         *
         * @var array
         * @access protected
         */
        protected $data = array();
        /**
         * Initiate new async request
         */
        public function __construct()
        {
        }
        /**
         * Set data used during the request
         *
         * @param array $data Data.
         *
         * @return $this
         */
        public function data($data)
        {
        }
        /**
         * Dispatch the async request
         *
         * @return array|WP_Error
         */
        public function dispatch()
        {
        }
        /**
         * Get query args
         *
         * @return array
         */
        protected function get_query_args()
        {
        }
        /**
         * Get query URL
         *
         * @return string
         */
        protected function get_query_url()
        {
        }
        /**
         * Get post args
         *
         * @return array
         */
        protected function get_post_args()
        {
        }
        /**
         * Maybe handle
         *
         * Check for correct nonce and pass to handler.
         */
        public function maybe_handle()
        {
        }
        /**
         * Handle
         *
         * Override this method to perform any actions required
         * during the async request.
         */
        protected abstract function handle();
    }
    /**
     * WP Background Process
     *
     * @package WP-Background-Processing
     */
    /**
     * Abstract WP_Background_Process class.
     *
     * @abstract
     * @extends WP_Async_Request
     */
    abstract class WP_Background_Process extends \WP_Async_Request
    {
        /**
         * Action
         *
         * (default value: 'background_process')
         *
         * @var string
         * @access protected
         */
        protected $action = 'background_process';
        /**
         * Start time of current process.
         *
         * (default value: 0)
         *
         * @var int
         * @access protected
         */
        protected $start_time = 0;
        /**
         * Cron_hook_identifier
         *
         * @var mixed
         * @access protected
         */
        protected $cron_hook_identifier;
        /**
         * Cron_interval_identifier
         *
         * @var mixed
         * @access protected
         */
        protected $cron_interval_identifier;
        /**
         * Initiate new background process
         */
        public function __construct()
        {
        }
        /**
         * Dispatch
         *
         * @access public
         * @return void
         */
        public function dispatch()
        {
        }
        /**
         * Push to queue
         *
         * @param mixed $data Data.
         *
         * @return $this
         */
        public function push_to_queue($data)
        {
        }
        /**
         * Save queue
         *
         * @return $this
         */
        public function save()
        {
        }
        /**
         * Update queue
         *
         * @param string $key  Key.
         * @param array  $data Data.
         *
         * @return $this
         */
        public function update($key, $data)
        {
        }
        /**
         * Delete queue
         *
         * @param string $key Key.
         *
         * @return $this
         */
        public function delete($key)
        {
        }
        /**
         * Generate key
         *
         * Generates a unique key based on microtime. Queue items are
         * given a unique key so that they can be merged upon save.
         *
         * @param int $length Length.
         *
         * @return string
         */
        protected function generate_key($length = 64)
        {
        }
        /**
         * Maybe process queue
         *
         * Checks whether data exists within the queue and that
         * the process is not already running.
         */
        public function maybe_handle()
        {
        }
        /**
         * Is queue empty
         *
         * @return bool
         */
        protected function is_queue_empty()
        {
        }
        /**
         * Is process running
         *
         * Check whether the current process is already running
         * in a background process.
         */
        protected function is_process_running()
        {
        }
        /**
         * Lock process
         *
         * Lock the process so that multiple instances can't run simultaneously.
         * Override if applicable, but the duration should be greater than that
         * defined in the time_exceeded() method.
         */
        protected function lock_process()
        {
        }
        /**
         * Unlock process
         *
         * Unlock the process so that other instances can spawn.
         *
         * @return $this
         */
        protected function unlock_process()
        {
        }
        /**
         * Get batch
         *
         * @return stdClass Return the first batch from the queue
         */
        protected function get_batch()
        {
        }
        /**
         * Handle
         *
         * Pass each queue item to the task handler, while remaining
         * within server memory and time limit constraints.
         */
        protected function handle()
        {
        }
        /**
         * Memory exceeded
         *
         * Ensures the batch process never exceeds 90%
         * of the maximum WordPress memory.
         *
         * @return bool
         */
        protected function memory_exceeded()
        {
        }
        /**
         * Get memory limit
         *
         * @return int
         */
        protected function get_memory_limit()
        {
        }
        /**
         * Time exceeded.
         *
         * Ensures the batch never exceeds a sensible time limit.
         * A timeout limit of 30s is common on shared hosting.
         *
         * @return bool
         */
        protected function time_exceeded()
        {
        }
        /**
         * Complete.
         *
         * Override if applicable, but ensure that the below actions are
         * performed, or, call parent::complete().
         */
        protected function complete()
        {
        }
        /**
         * Schedule cron healthcheck
         *
         * @access public
         *
         * @param mixed $schedules Schedules.
         *
         * @return mixed
         */
        public function schedule_cron_healthcheck($schedules)
        {
        }
        /**
         * Handle cron healthcheck
         *
         * Restart the background process if not already running
         * and data exists in the queue.
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedule event
         */
        protected function schedule_event()
        {
        }
        /**
         * Clear scheduled event
         */
        protected function clear_scheduled_event()
        {
        }
        /**
         * Cancel Process
         *
         * Stop processing queue items, clear cronjob and delete batch.
         *
         */
        public function cancel_process()
        {
        }
        /**
         * Task
         *
         * Override this method to perform any actions required on each
         * queue item. Return the modified item for further processing
         * in the next pass through. Or, return false to remove the
         * item from the queue.
         *
         * @param mixed $item Queue item to iterate over.
         *
         * @return mixed
         */
        protected abstract function task($item);
    }
    interface IWPML_Current_Language
    {
        public function get_current_language();
        public function get_default_language();
        public function get_admin_language();
    }
    interface IWPML_Taxonomy_State
    {
        public function is_translated_taxonomy($tax);
        public function is_display_as_translated_taxonomy($tax);
        public function get_display_as_translated_taxonomies();
        public function get_translatable_taxonomies($include_not_synced = \false, $deprecated = 'post');
    }
}
namespace WPML\Core {
    interface ISitePress
    {
    }
}
namespace {
    /**
     * Main SitePress Class
     *
     * @package wpml-core
     */
    class SitePress extends \WPML_WPDB_User implements \IWPML_Current_Language, \IWPML_Taxonomy_State, \WPML\Core\ISitePress
    {
        const AFTER_ST_PLUGIN_LOADED_HOOK = -\PHP_INT_MAX + 1;
        /** @var  WPML_Locale $locale_utils */
        public $locale_utils;
        public $footer_preview = \false;
        /**
         * @var icl_cache
         */
        public $icl_translations_cache;
        /**
         * @var icl_cache
         */
        public $icl_language_name_cache;
        /**
         * @var icl_cache
         */
        public $icl_term_taxonomy_cache;
        function __construct()
        {
        }
        /**
         * @since 3.2
         */
        public function api_hooks()
        {
        }
        function init()
        {
        }
        /**
         * Sets the current language in \SitePress::$this_lang, redirects if
         * frontend requests point to incomplete or incorrect urls, un-sets the
         * $_GET['lang'] and $_GET['admin_bar'] values so that upload.php is able to
         * enqueue 'media-grid' correctly without url parameters breaking its
         * functionality.
         */
        public function maybe_set_this_lang()
        {
        }
        function load_dependencies()
        {
        }
        /**
         * Sets up all term/taxonomy actions for use outside Translations Management or the Post Edit screen
         */
        function set_term_filters_and_hooks()
        {
        }
        function remove_admin_language_switcher()
        {
        }
        function rebuild_language_information()
        {
        }
        function setup()
        {
        }
        public function user_lang_by_authcookie()
        {
        }
        function get_current_user()
        {
        }
        function ajax_setup()
        {
        }
        function check_if_admin_action_from_referer()
        {
        }
        /**
         * Check translation mangement column screen option.
         *
         * @param string $post_type Current post type.
         *
         * @return bool
         */
        public function show_management_column_content($post_type)
        {
        }
        function initialize_cache()
        {
        }
        /**
         * @return icl_cache
         */
        function get_translations_cache()
        {
        }
        /**
         * @return icl_cache
         */
        function get_language_name_cache()
        {
        }
        public function set_admin_language($admin_language = \false)
        {
        }
        function get_admin_language()
        {
        }
        public function is_wpml_switch_language_triggered()
        {
        }
        /**
         * @return bool
         */
        function is_post_edit_screen()
        {
        }
        function get_user_admin_language_filter($value, $user_id)
        {
        }
        function get_user_admin_language($user_id, $reload = \false)
        {
        }
        /**
         * @todo rename this method, has it has nothing to do with the menus
         */
        function administration_menu()
        {
        }
        function taxonomy_translation_page()
        {
        }
        /**
         * @param int|string $blog_id
         */
        function init_settings($blog_id)
        {
        }
        /**
         * @param array|null $settings
         */
        function save_settings($settings = \null)
        {
        }
        /**
         * @since 3.1
         */
        function get_settings()
        {
        }
        function filter_get_setting($value, $key)
        {
        }
        /**
         * @param string     $key
         * @param mixed|bool $default
         *
         * @since 3.1
         *
         * @return bool|mixed
         */
        function get_setting($key, $default = \false)
        {
        }
        function action_set_setting($key, $value, $save_now)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         * @param bool   $save_now Immediately update the settings record in the DB
         *
         * @since 3.1
         *
         * @return bool Always True. If `$save_now === true`, it returns the result of `update_option`
         */
        function set_setting($key, $value, $save_now = \false)
        {
        }
        function get_user_preferences()
        {
        }
        function set_user_preferences($value)
        {
        }
        function save_user_preferences()
        {
        }
        /**
         * @param string $option_name
         *
         * @return mixed|null
         * @deprecated Use \SitePress::get_setting instead
         *
         */
        public function get_option($option_name)
        {
        }
        function verify_settings()
        {
        }
        /**
         * @param bool   $refresh
         * @param bool   $major_first
         * @param string $order_by
         *
         * @return array<string,string>
         */
        function get_active_languages($refresh = \false, $major_first = \false, $order_by = 'english_name')
        {
        }
        /**
         * Returns an input array of languages, that are in the form of associative arrays,
         * ordered by the user-chosen language order
         *
         * @param array[] $languages
         *
         * @return array[]
         */
        function order_languages($languages)
        {
        }
        /**
         * @param string $lang_code
         * Checks if a given language code belongs to a currently active language.
         *
         * @return bool
         */
        function is_active_language($lang_code)
        {
        }
        public function get_languages($lang = \false, $active_only = \false, $refresh = \false, $major_first = \false, $order_by = 'english_name')
        {
        }
        function get_language_details($code)
        {
        }
        function get_language_code($english_name)
        {
        }
        function get_language_code_from_locale($locale)
        {
        }
        function get_locale_from_language_code($code)
        {
        }
        function get_default_language()
        {
        }
        public function get_this_lang()
        {
        }
        function get_current_language()
        {
        }
        /**
         * Switches whole site to the given language or back to the current language
         * that was set when first calling this function.
         *
         * @param null|string $code        language code to switch into, will revert to
         *                                 initial language if null is given
         * @param bool|string $cookie_lang optionally also switch the cookie language
         *                                 to the value given
         */
        public function switch_lang($code = \null, $cookie_lang = \false)
        {
        }
        function set_default_language($code)
        {
        }
        /**
         * Hooked to `init`
         */
        function register_assets()
        {
        }
        /**
         * Hooked to `admin_enqueue_scripts` AND `wp_enqueue_scripts`
         */
        function js_load()
        {
        }
        function backend_js($setup_complete = \true)
        {
        }
        function rtl_fix()
        {
        }
        function post_edit_language_options()
        {
        }
        function set_element_language_details_action($args)
        {
        }
        /**
         * @param int         $el_id the element's ID (for terms we use the `term_taxonomy_id`)
         * @param string      $el_type
         * @param int         $trid
         * @param string      $language_code
         * @param null|string $src_language_code
         * @param bool        $check_duplicates
         * @param bool        $check_null
         *
         * @return bool|int|null|string
         */
        public function set_element_language_details($el_id, $el_type, $trid, $language_code, $src_language_code = \null, $check_duplicates = \true, $check_null = \false)
        {
        }
        public function delete_orphan_element($element_id, $element_type, $target_language)
        {
        }
        function delete_element_translation($trid, $element_type, $language_code = \false, $orphan_translation_only = \false)
        {
        }
        /**
         * @param int    $el_id
         * @param string $el_type
         *
         * @return \stdClass
         */
        function get_element_language_details($el_id, $el_type = 'post_post')
        {
        }
        public function sync_custom_field($post_id_from, $post_id_to, $meta_key)
        {
        }
        function copy_custom_fields($post_id_from, $post_id_to)
        {
        }
        /**
         * @param int|string $mode
         *
         * @return array
         */
        public function get_custom_fields_translation_settings($mode)
        {
        }
        /**
         * This method does nothing and is only there as a placeholder for backward compatibility with old Types versions!
         *
         * @param int    $meta_id
         * @param int    $object_id
         * @param string $meta_key
         * @param mixed  $_meta_value
         *
         * @deprecated Since WPML 3.1.9
         *
         */
        function update_post_meta($meta_id, $object_id, $meta_key, $_meta_value)
        {
        }
        /**
         * This method does nothing and is only there as a placeholder for backward compatibility with old Types versions!
         *
         * @deprecated Since WPML 3.1.9
         *
         * @param int $meta_id
         */
        function delete_post_meta($meta_id)
        {
        }
        /* Custom fields synchronization - END */
        function get_element_translations_filter($value, $trid, $el_type = 'post_post', $skip_empty = \false, $all_statuses = \false, $skip_cache = \false)
        {
        }
        public function get_original_element_id_filter($empty, $element_id, $element_type = 'post_post')
        {
        }
        public function get_element_trid_filter($empty, $element_id, $element_type = 'post_post')
        {
        }
        function is_original_content_filter($default, $element_id, $element_type = 'post_post')
        {
        }
        /**
         * @param int    $trid
         * @param string $el_type Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category, post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         * @param bool   $skip_empty
         * @param bool   $all_statuses
         * @param bool   $skip_cache
         * @param bool   $skip_recursions
         * @param bool   $skipPrivilegeChecking
         *
         * @return array<string,\stdClass>
         */
        function get_element_translations($trid, $el_type = 'post_post', $skip_empty = \false, $all_statuses = \false, $skip_cache = \false, $skip_recursions = \false, $skipPrivilegeChecking = \false)
        {
        }
        function clear_elements_cache($ids, $taxonomy)
        {
        }
        static function get_original_element_id($element_id, $element_type = 'post_post', $skip_empty = \false, $all_statuses = \false, $skip_cache = \false)
        {
        }
        public function get_original_element_translation($trid, $element_type, $skip_empty = \false, $all_statuses = \false, $skip_cache = \false)
        {
        }
        /**
         * @param int    $element_id Use term_taxonomy_id for taxonomies, post_id for posts
         * @param string $el_type    Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category, post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         *
         * @return bool|mixed|null|string
         */
        function get_element_trid($element_id, $el_type = 'post_post')
        {
        }
        /**
         * @param int $trid
         *
         * @return int|bool
         */
        static function get_original_element_id_by_trid($trid)
        {
        }
        /**
         * @param int|null|0 $trid
         *
         * @return string|null language code
         */
        static function get_source_language_by_trid($trid)
        {
        }
        public function get_element_translations_object($element_type)
        {
        }
        /**
         * @param int    $element_id   Use term_taxonomy_id for taxonomies, post_id for posts
         * @param string $element_type Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category,
         *                             post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         *
         * @return null|string
         */
        function get_language_for_element($element_id, $element_type = 'post_post')
        {
        }
        /**
         * @param string $el_type     Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category, post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment')
         * @param string $target_lang Target language code
         * @param string $source_lang Source language code
         *
         * @return array
         */
        function get_elements_without_translations($el_type, $target_lang, $source_lang)
        {
        }
        /**
         * @param string $selected_language
         * @param string $default_language
         * @param string $post_type
         *
         * @used_by SitePress:meta_box
         *
         * @return array
         */
        function get_posts_without_translations($selected_language, $default_language, $post_type = 'post_post')
        {
        }
        public function get_orphan_translations($trid, $post_type, $source_language)
        {
        }
        /**
         * @param WP_Post $post
         */
        function meta_box($post)
        {
        }
        function meta_box_config($post)
        {
        }
        /**
         * Filters the WP_Query in case of retrieving an ajax post list,
         * e.g. links in the WYSIWYG post editor
         *
         * @param WP_Query $wpq
         *
         * @return WP_Query
         */
        function pre_get_posts($wpq)
        {
        }
        function comment_feed_join($join)
        {
        }
        /**
         * @param string[]         $clauses
         * @param WP_Comment_Query $obj
         *
         * @return string[]
         */
        function comments_clauses($clauses, $obj)
        {
        }
        function language_filter()
        {
        }
        /**
         * @param array $arr                Array of posts to filter
         * @param array $get_page_arguments Arguments passed to the `get_pages` function
         *
         * @return array
         */
        function exclude_other_language_pages2($arr, $get_page_arguments)
        {
        }
        function wp_dropdown_pages($output)
        {
        }
        /**
         * @param int                     $trid
         * @param array<string>           $active_languages
         * @param string                  $selected_language
         * @param array<string,\stdClass> $translations
         * @param string                  $type
         */
        function add_translate_options($trid, $active_languages, $selected_language, $translations, $type)
        {
        }
        /**
         * @param array|string $name
         *
         * @deprecated deprecated since version 3.1.8
         * @return array|mixed
         */
        function the_category_name_filter($name)
        {
        }
        /**
         * @param array<string,\stdClass>|WP_Error $terms
         *
         * @return mixed
         * @deprecated deprecated since version 3.1.8
         */
        function get_terms_filter($terms)
        {
        }
        /**
         * Wrapper for \WPML_Term_Actions::save_term_actions
         *
         * @param int    $cat_id
         * @param int    $tt_id term taxonomy id of the new term
         * @param string $taxonomy
         *
         * @uses \WPML_Term_Actions::save_term_actions to handle required actions
         *                                               when creating a term
         *
         * @hook delete_term
         */
        function create_term($cat_id, $tt_id, $taxonomy)
        {
        }
        /**
         * Wrapper for \WPML_Term_Actions::deleted_term_relationships
         *
         * @param int   $post_id
         * @param array $delete_terms
         *
         * @uses \WPML_Term_Actions::deleted_term_relationships to handle required actions
         *                                               when removing a term from a post
         *
         * @hook deleted_term_relationships
         */
        function deleted_term_relationships($post_id, $delete_terms, $taxonomy)
        {
        }
        /**
         * Wrapper for \WPML_Term_Actions::delete_term_actions
         *
         * @param mixed  $cat
         * @param int    $tt_id term taxonomy id of the deleted term
         * @param string $taxonomy
         *
         * @uses \WPML_Term_Actions::delete_term_actions to handle required actions
         *                                               when deleting a term
         *
         * @hook delete_term
         */
        function delete_term($cat, $tt_id, $taxonomy)
        {
        }
        /**
         * @return WPML_Term_Actions
         */
        public function get_term_actions_helper()
        {
        }
        function get_terms_args_filter($args, $taxonomies)
        {
        }
        public function clear_term_query_filter()
        {
        }
        function terms_clauses($clauses, $taxonomies, $args)
        {
        }
        /**
         * Saves the current $wp_query to \SitePress::$wp_query
         *
         * @global WP_Query $wp_query
         */
        public function set_wp_query()
        {
        }
        /**
         * @return WP_Query
         */
        public function get_wp_query()
        {
        }
        /**
         * Converts WP generated url to language specific based on plugin settings
         *
         * @param string      $url
         * @param null|string $code (if null, fallback to default language for root page, or current language in all other cases)
         *
         * @return bool|string
         */
        function convert_url($url, $code = \null)
        {
        }
        /**
         * @param string $url
         * @param string $code
         *
         * @return string
         */
        function convert_url_string($url, $code)
        {
        }
        /**
         * Get the URL for the specified language
         *
         * Make ``$forceSlashedBaseUrl`` true if you want the base URL to always end with a slash.
         * Used to imitate and match the WP Canonical URL.
         *
         * @param $code
         * @param $forceSlashedBaseUrl
         * @return bool|string
         */
        function language_url($code = \null, $forceSlashedBaseUrl = \false)
        {
        }
        function post_type_archive_link_filter($link, $post_type)
        {
        }
        public function adjust_cpt_in_url($link, $post_type, $language_code = \null)
        {
        }
        function home_url($url)
        {
        }
        function get_comment_link_filter($link)
        {
        }
        /**
         * @return WPML_Query_Utils
         */
        public function get_query_utils()
        {
        }
        /**
         * @return WPML_Root_Page_Actions
         */
        public function get_root_page_utils()
        {
        }
        /**
         * @return WPML_WP_API
         */
        public function get_wp_api()
        {
        }
        /**
         * @return wpdb
         */
        public function &wpdb()
        {
        }
        /**
         * @return TranslationManagement
         */
        public function &core_tm()
        {
        }
        /**
         * @return WPML_Term_Translation
         */
        function &term_translations()
        {
        }
        /**
         * @return WPML_Post_Translation
         */
        function &post_translations()
        {
        }
        /**
         * @param WPML_WP_API $wp_api
         */
        public function set_wp_api($wp_api)
        {
        }
        public function get_ls_languages($template_args = array())
        {
        }
        function get_display_single_language_name_filter($empty, $args)
        {
        }
        function get_display_language_name($lang_code, $display_code = \null)
        {
        }
        function get_flag($lang_code)
        {
        }
        function get_flag_url($code)
        {
        }
        /**
         * @param string $code
         *
         * @return string
         * @deprecated Use \SitePress::get_flag_image instead
         */
        function get_flag_img($code)
        {
        }
        /**
         * @param string $code
         * @param int[]  $size An array describing [ $width, $height ]. It defaults to [18, 12].
         * @param string $fallback_text
         * @param string[] $css_classes Array of CSS class strings.
         *
         * @return string
         */
        function get_flag_image($code, $size = [], $fallback_text = '', $css_classes = [])
        {
        }
        function clear_flags_cache()
        {
        }
        /**
         * @deprecated
         *
         * @return string
         */
        function get_desktop_language_selector()
        {
        }
        /**
         * @deprecated
         *
         * @return string
         */
        function get_mobile_language_selector()
        {
        }
        /**
         * @deprecated
         *
         * @return string
         */
        function get_language_selector()
        {
        }
        /**
         * @deprecated
         */
        function language_selector()
        {
        }
        public function add_extra_debug_info($extra_debug)
        {
        }
        function set_default_categories($def_cat)
        {
        }
        function pre_option_default_category($setting)
        {
        }
        function update_option_default_category($oldvalue, $new_value)
        {
        }
        /**
         * @param WP_Term $term
         *
         * @return WP_Term
         */
        public function get_term_adjust_id($term)
        {
        }
        public function edited_term_action()
        {
        }
        function get_pages_adjust_ids($pages, $args)
        {
        }
        // feeds links
        function feed_link($out)
        {
        }
        // commenting links
        function post_comments_feed_link($out)
        {
        }
        function trackback_url($out)
        {
        }
        function user_trailingslashit($string, $type_of_url)
        {
        }
        /**
         * Fixes double dashes
         *
         * @param string $url
         *
         * @return string
         */
        function author_link($url)
        {
        }
        function pre_option_home($setting = \false)
        {
        }
        /**
         *
         *
         * @param array $public_query_vars
         *
         * @return array with added 'lang' index
         */
        function query_vars($public_query_vars)
        {
        }
        function parse_query($q)
        {
        }
        function adjust_wp_list_pages_excludes($pages)
        {
        }
        function language_attributes($output)
        {
        }
        // Localization
        function plugin_localization()
        {
        }
        /**
         * @return WPML_Locale
         */
        public function get_wpml_locale()
        {
        }
        function locale_filter($default)
        {
        }
        function get_language_tag($code)
        {
        }
        function get_locale($code)
        {
        }
        function switch_locale($lang_code = \false)
        {
        }
        function get_locale_file_names()
        {
        }
        function pre_option_page_on_front()
        {
        }
        function pre_option_page_for_posts()
        {
        }
        function fix_trashed_front_or_posts_page_settings($post_id)
        {
        }
        // adds the language parameter to the admin post filtering/search
        function restrict_manage_posts()
        {
        }
        function get_edit_term_link($link, $term_id, $taxonomy, $object_type)
        {
        }
        function noscript_notice()
        {
        }
        function save_user_options()
        {
        }
        function help_admin_notice()
        {
        }
        function upgrade_notice()
        {
        }
        function display_wpml_footer()
        {
        }
        function xmlrpc_methods($methods)
        {
        }
        function xmlrpc_call_actions($action)
        {
        }
        /**
         * @param string $lang
         *
         * @return array|bool|mixed|null
         * @deprecated Use `wpml.get_languages` XMLRPC call
         * @since      3.5.0
         *
         */
        function xmlrpc_get_languages_list($lang)
        {
        }
        function xml_unprotect_wpml_meta($protected, $meta_key, $meta_type)
        {
        }
        function meta_generator_tag()
        {
        }
        function get_language_cookie()
        {
        }
        function set_admin_language_cookie($lang = \false)
        {
        }
        function get_admin_language_cookie()
        {
        }
        function reset_admin_language_cookie()
        {
        }
        function rewrite_rules_filter($value)
        {
        }
        function is_rtl($lang = \false)
        {
        }
        /**
         * Returns an array of post types that are set to be translatable
         *
         * @param array $default Set the default value, in case no posts are set to be translatable (default: array())
         *
         * @return array
         */
        function get_translatable_documents_filter($default = array())
        {
        }
        function get_translatable_documents($include_not_synced = \false)
        {
        }
        public function get_display_as_translated_documents()
        {
        }
        /**
         * @param bool   $include_not_synced
         * @param string $deprecated
         *
         * @return array
         * @internal string $deprecated
         * @since    3.8.0 $deprecated (formerly $object_type) is not used anymore
         */
        function get_translatable_taxonomies($include_not_synced = \false, $deprecated = 'post')
        {
        }
        /**
         * @param string $tax
         *
         * @return bool
         */
        function is_translated_taxonomy($tax)
        {
        }
        public function is_display_as_translated_taxonomy($tax)
        {
        }
        public function get_display_as_translated_taxonomies()
        {
        }
        public function is_translated_post_type_filter($value, $post_type)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function is_translated_post_type($type)
        {
        }
        public function is_display_as_translated_post_type_filter($value, $post_type)
        {
        }
        public function is_display_as_translated_post_type($type)
        {
        }
        /**
         * @param null   $value
         * @param string $taxonomy
         *
         * @return int
         */
        public function is_translated_taxonomy_filter($value, $taxonomy)
        {
        }
        function verify_post_translations_action($post_types)
        {
        }
        /**
         * Sets the default language for all posts in a given post type that do not have any language set
         *
         * @param string $post_type
         */
        public function verify_post_translations($post_type)
        {
        }
        /**
         * This function is to be used on setting a taxonomy from untranslated to being translated.
         * It creates potentially missing translations and reassigns posts to the then created terms in the correct language.
         * This function affects all terms in a taxonomy and therefore, depending on the database size results in
         * heavy resource demand. It should not be used to fix term and post assignment problems other than those
         * resulting from the action of turning a translated taxonomy into an untranslated one.
         *
         * An exception is being made for the installation process assigning all existing terms the default language,
         * given no prior language information is saved about them in the database.
         *
         * @param string $taxonomy
         */
        function verify_taxonomy_translations($taxonomy)
        {
        }
        function wp_upgrade_locale($locale)
        {
        }
        function admin_language_switcher()
        {
        }
        function admin_notices($message, $class = 'updated')
        {
        }
        function _admin_notices_hook()
        {
        }
        function allowed_redirect_hosts($hosts)
        {
        }
        public static function get_installed_plugins()
        {
        }
        /**
         * @param int  $limit
         * @param bool $provide_object
         * @param bool $ignore_args
         *
         * @return array
         */
        public function get_backtrace($limit = 0, $provide_object = \false, $ignore_args = \true)
        {
        }
        /**
         * Used as filter for WordPress core function url_to_postid()
         *
         * @global AbsoluteLinks $absolute_links_object
         *
         * @param string $url URL to filter
         *
         * @return string URL changed into format ...?p={ID} or original
         */
        function url_to_postid($url)
        {
        }
        /**
         * Check if $url is in format ...?cpt-slug=cpt-title and change into ...?p={ID}
         *
         * @param string $url          URL, probably in format ?cpt-slug=cpt-title
         * @param string $original_url URL in original format (probably with permalink)
         *
         * @return string URL, if $url was in expected format ?cpt-slug format, url is now changed into ?p={ID}, otherwise, returns $url as it was passed in parameter
         */
        function cpt_url_to_id_url($url, $original_url)
        {
        }
        /**
         * Find language of document based on given permalink
         *
         * @param string $url Local url in permalink form
         *
         * @return string language code
         */
        function get_language_from_url($url)
        {
        }
        function update_index_screen()
        {
        }
        /**
         * Filter to add language field to WordPress search form
         *
         * @param string $form HTML code of search for before filtering
         *
         * @return string HTML code of search form
         */
        function get_search_form_filter($form)
        {
        }
        /**
         * @param string $key
         *
         * @return bool|mixed
         */
        public function get_string_translation_settings($key = '')
        {
        }
        /**
         * @return array
         */
        public function get_always_translatable_post_types()
        {
        }
        /**
         * @param Integer $master_post_id The original post id for which duplicate posts are to be retrieved
         *
         * @return Integer[] An associative array with language codes as indexes and post_ids as values
         */
        function get_duplicates($master_post_id)
        {
        }
        /**
         * @param Integer $master_post_id ID of the to be duplicated post
         * @param String  $lang           Language code to which the post is to be duplicated
         *
         * @return bool|int|WP_Error
         */
        function make_duplicate($master_post_id, $lang)
        {
        }
        function get_new_post_source_id($post_id)
        {
        }
        /**
         * @param int        $element_id
         * @param string     $element_type
         * @param bool|false $return_original_if_missing
         * @param null       $language_code
         *
         * @return int|null
         */
        function get_object_id($element_id, $element_type = 'post', $return_original_if_missing = \false, $language_code = \null)
        {
        }
        public function handle_head_hreflang()
        {
        }
        /**
         * Get previously set data for the current request.
         *
         * @param string     $key
         * @param null|mixed $default
         *
         * @return mixed|null
         */
        public function get_current_request_data($key, $default = \null)
        {
        }
        /**
         * Set temporary data for the current request that can be recalled later
         *
         * @param string $key
         * @param mixed  $data
         */
        public function set_current_request_data($key, $data)
        {
        }
        /**
         * Clear the data for the current request
         *
         * @param string $key
         */
        public function clear_current_request_data($key)
        {
        }
        /**
         * Load \TranslationManagement class.
         */
        public function load_core_tm()
        {
        }
        public function is_setup_complete()
        {
        }
    }
    class WPML_Compatibility_Gutenberg implements \IWPML_Action
    {
        /**
         * We need to load the filter after `wpml_before_init` where ST loads the blocking filter
         * and before `plugins_loaded` (priority 10) where Gutenberg loads the text domain.
         */
        const PRIORITY_ON_PLUGINS_LOADED = 5;
        public function __construct(\WPML_PHP_Functions $php_functions = \null)
        {
        }
        public function add_hooks()
        {
        }
        public function load_textdomain_filter()
        {
        }
        /**
         * @param bool   $override
         * @param string $domain
         *
         * @return bool
         */
        public function unblock_gutenberg_domain($override, $domain)
        {
        }
    }
}
namespace WPML\Compatibility\GoogleSiteKit {
    class Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @return string
         */
        public function getCanonicalHomeUrl()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Compatibility_Jetpack
     */
    class WPML_Compatibility_Jetpack implements \IWPML_Action
    {
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Filter to prevent duplicate post from being publicized.
         *
         * @param bool    $should_publicize Should publicize post.
         * @param WP_Post $post Post.
         *
         * @return bool
         */
        public function publicize_should_publicize_published_post_filter($should_publicize, $post)
        {
        }
    }
    /**
     * Class WPML_Compatibility_2017
     *
     * # Compatbility class for 2017 theme
     *
     * ## Why is this needed?
     *
     * When configuring 2017 to use a static page, you can define sections in these pages.
     * Each section is another page and the value is stored with the ID of that page.
     * In order to display the sections in the current language, WPML needs to know the IDs of the translated pages.
     *
     * ## How this works?
     *
     * WPML tries to retrieve the number of Frontpage panels and, for each of them, will add a filter to translate the ID with the one in the current language, if any.
     *
     * This class is loaded and instantiated by `plugins-integration.php` only if the `twentyseventeen_panel_count` function exists and the `twentyseventeen_translate_panel_id` does not.
     */
    class WPML_Compatibility_2017
    {
        function init_hooks()
        {
        }
        function get_translated_panel_id($id)
        {
        }
    }
    /**
     * Class WPML_Google_Sitemap_Generator
     *
     * # Compatibility class for Google XML Sitemaps (https://wordpress.org/plugins/google-sitemap-generator/)
     *
     * ## Why is this needed?
     *
     * Google XML Sitemaps displays all the translations together. When we use a different domain per language we want to have separate sitemaps for each domain.
     *
     * ## How does this work?
     *
     * WPML fetches a list of post ids in other languages to pass them to the database query via 'sm_b_exclude' option.
     *
     * This class is loaded and instantiated by `plugins-integration.php` only if the `GoogleSitemapGeneratorLoader` class exists.
     */
    class WPML_Google_Sitemap_Generator
    {
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * Add hooks for the different types of permalinks.
         */
        public function init_permalink_hooks()
        {
        }
        /**
         * Filter sitemap urls to apply the correct URL format.
         *
         * @param string      $permalink The URL to filter.
         * @param WP_Post|int $post      The post id it belongs to.
         *
         * @return string
         */
        public function permalink_filter($permalink, $post)
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function exclude_other_languages($value)
        {
        }
    }
    class WPML_Compatibility_Disqus implements \IWPML_Action
    {
        const LANGUAGE_NOT_SUPPORTED = '';
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function set_language()
        {
        }
    }
    class WPML_Compatibility_Disqus_Factory implements \IWPML_Frontend_Action_Loader
    {
        /**
         * @return WPML_Compatibility_Disqus
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Compatibility_Factory
     */
    class WPML_Compatibility_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        /**
         * Create array of compatibility objects.
         *
         * @return array
         */
        public function create()
        {
        }
    }
    class WPML_Compatibility_Tiny_Compress_Images
    {
        /**
         * WPML_Compatibility_Tiny_Compress_Images constructor.
         *
         * @param \WPML_Translation_Element_Factory $element_factory
         */
        function __construct(\WPML_Translation_Element_Factory $element_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int    $post_id
         * @param string $meta_key
         * @param mixed  $meta_value
         */
        public function updated_tiny_postmeta_action($post_id, $meta_key, $meta_value)
        {
        }
    }
    class WPML_Compatibility_Tiny_Compress_Images_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return \WPML_Compatibility_Tiny_Compress_Images
         */
        public function create()
        {
        }
    }
    class ICanLocalizeQuery
    {
        function __construct($site_id = \null, $access_key = \null, \SitePress $sitepress = \null, $wpml_icl_client = \null)
        {
        }
        public function setting($setting)
        {
        }
        public function error()
        {
        }
        function updateAccount($data)
        {
        }
        /**
         * @param bool $force
         *
         * @return array of website details returned from a direct API call to ICL
         */
        function get_website_details($force = \false)
        {
        }
    }
}
namespace WPML\Core\Twig\Error {
    /**
     * Twig base exception.
     *
     * This exception class and its children must only be used when
     * an error occurs during the loading of a template, when a syntax error
     * is detected in a template, or when rendering a template. Other
     * errors must use regular PHP exception classes (like when the template
     * cache directory is not writable for instance).
     *
     * To help debugging template issues, this class tracks the original template
     * name and line where the error occurred.
     *
     * Whenever possible, you must set these information (original template name
     * and line number) yourself by passing them to the constructor. If some or all
     * these information are not available from where you throw the exception, then
     * this class will guess them automatically (when the line number is set to -1
     * and/or the name is set to null). As this is a costly operation, this
     * can be disabled by passing false for both the name and the line number
     * when creating a new instance of this class.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Error extends \Exception
    {
        protected $lineno;
        // to be renamed to name in 2.0
        protected $filename;
        protected $rawMessage;
        /**
         * Constructor.
         *
         * Set the line number to -1 to enable its automatic guessing.
         * Set the name to null to enable its automatic guessing.
         *
         * @param string             $message  The error message
         * @param int                $lineno   The template line where the error occurred
         * @param Source|string|null $source   The source context where the error occurred
         * @param \Exception         $previous The previous exception
         */
        public function __construct($message, $lineno = -1, $source = null, \Exception $previous = null)
        {
        }
        /**
         * Gets the raw message.
         *
         * @return string The raw message
         */
        public function getRawMessage()
        {
        }
        /**
         * Gets the logical name where the error occurred.
         *
         * @return string The name
         *
         * @deprecated since 1.27 (to be removed in 2.0). Use getSourceContext() instead.
         */
        public function getTemplateFile()
        {
        }
        /**
         * Sets the logical name where the error occurred.
         *
         * @param string $name The name
         *
         * @deprecated since 1.27 (to be removed in 2.0). Use setSourceContext() instead.
         */
        public function setTemplateFile($name)
        {
        }
        /**
         * Gets the logical name where the error occurred.
         *
         * @return string The name
         *
         * @deprecated since 1.29 (to be removed in 2.0). Use getSourceContext() instead.
         */
        public function getTemplateName()
        {
        }
        /**
         * Sets the logical name where the error occurred.
         *
         * @param string $name The name
         *
         * @deprecated since 1.29 (to be removed in 2.0). Use setSourceContext() instead.
         */
        public function setTemplateName($name)
        {
        }
        /**
         * Gets the template line where the error occurred.
         *
         * @return int The template line
         */
        public function getTemplateLine()
        {
        }
        /**
         * Sets the template line where the error occurred.
         *
         * @param int $lineno The template line
         */
        public function setTemplateLine($lineno)
        {
        }
        /**
         * Gets the source context of the Twig template where the error occurred.
         *
         * @return Source|null
         */
        public function getSourceContext()
        {
        }
        /**
         * Sets the source context of the Twig template where the error occurred.
         */
        public function setSourceContext(\WPML\Core\Twig\Source $source = null)
        {
        }
        public function guess()
        {
        }
        public function appendMessage($rawMessage)
        {
        }
        /**
         * @internal
         */
        protected function updateRepr()
        {
        }
        /**
         * @internal
         */
        protected function guessTemplateInfo()
        {
        }
    }
}
namespace WPML\Core\Twig\Sandbox {
    /**
     * Exception thrown when a security error occurs at runtime.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SecurityError extends \WPML\Core\Twig\Error\Error
    {
    }
    /**
     * Exception thrown when a not allowed class property is used in a template.
     *
     * @author Kit Burton-Senior <mail@kitbs.com>
     */
    class SecurityNotAllowedPropertyError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
        public function __construct($message, $className, $propertyName, $lineno = -1, $filename = null, \Exception $previous = null)
        {
        }
        public function getClassName()
        {
        }
        public function getPropertyName()
        {
        }
    }
    /**
     * Exception thrown when a not allowed class method is used in a template.
     *
     * @author Kit Burton-Senior <mail@kitbs.com>
     */
    class SecurityNotAllowedMethodError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
        public function __construct($message, $className, $methodName, $lineno = -1, $filename = null, \Exception $previous = null)
        {
        }
        public function getClassName()
        {
        }
        public function getMethodName()
        {
        }
    }
    /**
     * Exception thrown when a not allowed tag is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     */
    class SecurityNotAllowedTagError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
        public function __construct($message, $tagName, $lineno = -1, $filename = null, \Exception $previous = null)
        {
        }
        public function getTagName()
        {
        }
    }
    /**
     * Exception thrown when a not allowed function is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     */
    class SecurityNotAllowedFunctionError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
        public function __construct($message, $functionName, $lineno = -1, $filename = null, \Exception $previous = null)
        {
        }
        public function getFunctionName()
        {
        }
    }
    /**
     * Exception thrown when a not allowed filter is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     */
    class SecurityNotAllowedFilterError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
        public function __construct($message, $functionName, $lineno = -1, $filename = null, \Exception $previous = null)
        {
        }
        public function getFilterName()
        {
        }
    }
    /**
     * Interface that all security policy classes must implements.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface SecurityPolicyInterface
    {
        public function checkSecurity($tags, $filters, $functions);
        public function checkMethodAllowed($obj, $method);
        public function checkPropertyAllowed($obj, $method);
    }
    /**
     * Represents a security policy which need to be enforced when sandbox mode is enabled.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SecurityPolicy implements \WPML\Core\Twig\Sandbox\SecurityPolicyInterface
    {
        protected $allowedTags;
        protected $allowedFilters;
        protected $allowedMethods;
        protected $allowedProperties;
        protected $allowedFunctions;
        public function __construct(array $allowedTags = [], array $allowedFilters = [], array $allowedMethods = [], array $allowedProperties = [], array $allowedFunctions = [])
        {
        }
        public function setAllowedTags(array $tags)
        {
        }
        public function setAllowedFilters(array $filters)
        {
        }
        public function setAllowedMethods(array $methods)
        {
        }
        public function setAllowedProperties(array $properties)
        {
        }
        public function setAllowedFunctions(array $functions)
        {
        }
        public function checkSecurity($tags, $filters, $functions)
        {
        }
        public function checkMethodAllowed($obj, $method)
        {
        }
        public function checkPropertyAllowed($obj, $property)
        {
        }
    }
}
namespace WPML\Core\Twig\Loader {
    /**
     * Adds a getSourceContext() method for loaders.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.27 (to be removed in 3.0)
     */
    interface SourceContextLoaderInterface
    {
        /**
         * Returns the source context for a given template logical name.
         *
         * @param string $name The template logical name
         *
         * @return Source
         *
         * @throws LoaderError When $name is not found
         */
        public function getSourceContext($name);
    }
    /**
     * Interface all loaders must implement.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface LoaderInterface
    {
        /**
         * Gets the source code of a template, given its name.
         *
         * @param string $name The name of the template to load
         *
         * @return string The template source code
         *
         * @throws LoaderError When $name is not found
         *
         * @deprecated since 1.27 (to be removed in 2.0), implement Twig\Loader\SourceContextLoaderInterface
         */
        public function getSource($name);
        /**
         * Gets the cache key to use for the cache for a given template name.
         *
         * @param string $name The name of the template to load
         *
         * @return string The cache key
         *
         * @throws LoaderError When $name is not found
         */
        public function getCacheKey($name);
        /**
         * Returns true if the template is still fresh.
         *
         * @param string $name The template name
         * @param int    $time Timestamp of the last modification time of the
         *                     cached template
         *
         * @return bool true if the template is fresh, false otherwise
         *
         * @throws LoaderError When $name is not found
         */
        public function isFresh($name, $time);
    }
    /**
     * Adds an exists() method for loaders.
     *
     * @author Florin Patan <florinpatan@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface ExistsLoaderInterface
    {
        /**
         * Check if we have the source code of a template, given its name.
         *
         * @param string $name The name of the template to check if we can load
         *
         * @return bool If the template source code is handled by this loader or not
         */
        public function exists($name);
    }
    /**
     * Loads a template from an array.
     *
     * When using this loader with a cache mechanism, you should know that a new cache
     * key is generated each time a template content "changes" (the cache key being the
     * source code of the template). If you don't want to see your cache grows out of
     * control, you need to take care of clearing the old cache file by yourself.
     *
     * This loader should only be used for unit testing.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ArrayLoader implements \WPML\Core\Twig\Loader\LoaderInterface, \WPML\Core\Twig\Loader\ExistsLoaderInterface, \WPML\Core\Twig\Loader\SourceContextLoaderInterface
    {
        protected $templates = [];
        /**
         * @param array $templates An array of templates (keys are the names, and values are the source code)
         */
        public function __construct(array $templates = [])
        {
        }
        /**
         * Adds or overrides a template.
         *
         * @param string $name     The template name
         * @param string $template The template source
         */
        public function setTemplate($name, $template)
        {
        }
        public function getSource($name)
        {
        }
        public function getSourceContext($name)
        {
        }
        public function exists($name)
        {
        }
        public function getCacheKey($name)
        {
        }
        public function isFresh($name, $time)
        {
        }
    }
    /**
     * Loads template from the filesystem.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class FilesystemLoader implements \WPML\Core\Twig\Loader\LoaderInterface, \WPML\Core\Twig\Loader\ExistsLoaderInterface, \WPML\Core\Twig\Loader\SourceContextLoaderInterface
    {
        /** Identifier of the main namespace. */
        const MAIN_NAMESPACE = '__main__';
        protected $paths = [];
        protected $cache = [];
        protected $errorCache = [];
        /**
         * @param string|array $paths    A path or an array of paths where to look for templates
         * @param string|null  $rootPath The root path common to all relative paths (null for getcwd())
         */
        public function __construct($paths = [], $rootPath = null)
        {
        }
        /**
         * Returns the paths to the templates.
         *
         * @param string $namespace A path namespace
         *
         * @return array The array of paths where to look for templates
         */
        public function getPaths($namespace = self::MAIN_NAMESPACE)
        {
        }
        /**
         * Returns the path namespaces.
         *
         * The main namespace is always defined.
         *
         * @return array The array of defined namespaces
         */
        public function getNamespaces()
        {
        }
        /**
         * Sets the paths where templates are stored.
         *
         * @param string|array $paths     A path or an array of paths where to look for templates
         * @param string       $namespace A path namespace
         */
        public function setPaths($paths, $namespace = self::MAIN_NAMESPACE)
        {
        }
        /**
         * Adds a path where templates are stored.
         *
         * @param string $path      A path where to look for templates
         * @param string $namespace A path namespace
         *
         * @throws LoaderError
         */
        public function addPath($path, $namespace = self::MAIN_NAMESPACE)
        {
        }
        /**
         * Prepends a path where templates are stored.
         *
         * @param string $path      A path where to look for templates
         * @param string $namespace A path namespace
         *
         * @throws LoaderError
         */
        public function prependPath($path, $namespace = self::MAIN_NAMESPACE)
        {
        }
        public function getSource($name)
        {
        }
        public function getSourceContext($name)
        {
        }
        public function getCacheKey($name)
        {
        }
        public function exists($name)
        {
        }
        public function isFresh($name, $time)
        {
        }
        /**
         * Checks if the template can be found.
         *
         * @param string $name The template name
         *
         * @return string|false|null The template name or false/null
         */
        protected function findTemplate($name)
        {
        }
        protected function parseName($name, $default = self::MAIN_NAMESPACE)
        {
        }
        protected function normalizeName($name)
        {
        }
        protected function validateName($name)
        {
        }
    }
    /**
     * Loads templates from other loaders.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ChainLoader implements \WPML\Core\Twig\Loader\LoaderInterface, \WPML\Core\Twig\Loader\ExistsLoaderInterface, \WPML\Core\Twig\Loader\SourceContextLoaderInterface
    {
        protected $loaders = [];
        /**
         * @param LoaderInterface[] $loaders
         */
        public function __construct(array $loaders = [])
        {
        }
        public function addLoader(\WPML\Core\Twig\Loader\LoaderInterface $loader)
        {
        }
        /**
         * @return LoaderInterface[]
         */
        public function getLoaders()
        {
        }
        public function getSource($name)
        {
        }
        public function getSourceContext($name)
        {
        }
        public function exists($name)
        {
        }
        public function getCacheKey($name)
        {
        }
        public function isFresh($name, $time)
        {
        }
    }
}
namespace WPML\Core\Twig\RuntimeLoader {
    /**
     * Creates runtime implementations for Twig elements (filters/functions/tests).
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface RuntimeLoaderInterface
    {
        /**
         * Creates the runtime implementation of a Twig element (filter/function/test).
         *
         * @param string $class A runtime class
         *
         * @return object|null The runtime instance or null if the loader does not know how to create the runtime for this class
         */
        public function load($class);
    }
    /**
     * Lazily loads Twig runtime implementations from a PSR-11 container.
     *
     * Note that the runtime services MUST use their class names as identifiers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Robin Chalas <robin.chalas@gmail.com>
     */
    class ContainerRuntimeLoader implements \WPML\Core\Twig\RuntimeLoader\RuntimeLoaderInterface
    {
        public function __construct(\WPML\Core\Psr\Container\ContainerInterface $container)
        {
        }
        public function load($class)
        {
        }
    }
    /**
     * Lazy loads the runtime implementations for a Twig element.
     *
     * @author Robin Chalas <robin.chalas@gmail.com>
     */
    class FactoryRuntimeLoader implements \WPML\Core\Twig\RuntimeLoader\RuntimeLoaderInterface
    {
        /**
         * @param array $map An array where keys are class names and values factory callables
         */
        public function __construct($map = [])
        {
        }
        public function load($class)
        {
        }
    }
}
namespace WPML\Core {
    /**
     * Represents a node in the AST.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface Twig_NodeInterface extends \Countable, \IteratorAggregate
    {
        /**
         * Compiles the node to PHP.
         */
        public function compile(\WPML\Core\Twig\Compiler $compiler);
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getLine();
        public function getNodeTag();
    }
}
namespace WPML\Core\Twig\Node {
    /**
     * Represents a node in the AST.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Node implements \WPML\Core\Twig_NodeInterface
    {
        protected $nodes;
        protected $attributes;
        protected $lineno;
        protected $tag;
        /**
         * @param array  $nodes      An array of named nodes
         * @param array  $attributes An array of attributes (should not be nodes)
         * @param int    $lineno     The line number
         * @param string $tag        The tag name associated with the Node
         */
        public function __construct(array $nodes = [], array $attributes = [], $lineno = 0, $tag = null)
        {
        }
        public function __toString()
        {
        }
        /**
         * @deprecated since 1.16.1 (to be removed in 2.0)
         */
        public function toXml($asDom = \false)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function getTemplateLine()
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getLine()
        {
        }
        public function getNodeTag()
        {
        }
        /**
         * @return bool
         */
        public function hasAttribute($name)
        {
        }
        /**
         * @return mixed
         */
        public function getAttribute($name)
        {
        }
        /**
         * @param string $name
         * @param mixed  $value
         */
        public function setAttribute($name, $value)
        {
        }
        public function removeAttribute($name)
        {
        }
        /**
         * @return bool
         */
        public function hasNode($name)
        {
        }
        /**
         * @return Node
         */
        public function getNode($name)
        {
        }
        public function setNode($name, $node = null)
        {
        }
        public function removeNode($name)
        {
        }
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
        #[\ReturnTypeWillChange]
        public function getIterator()
        {
        }
        public function setTemplateName($name)
        {
        }
        public function getTemplateName()
        {
        }
        public function setSourceContext(\WPML\Core\Twig\Source $source)
        {
        }
        public function getSourceContext()
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function setFilename($name)
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getFilename()
        {
        }
    }
    /**
     * Represents a spaceless node.
     *
     * It removes spaces between HTML tags.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SpacelessNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $body, $lineno, $tag = 'spaceless')
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a deprecated node.
     *
     * @author Yonel Ceruto <yonelceruto@gmail.com>
     */
    class DeprecatedNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an import node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ImportNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, \WPML\Core\Twig\Node\Expression\AbstractExpression $var, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an if node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class IfNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $tests, \WPML\Core\Twig_NodeInterface $else = null, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a displayable node in the AST.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface NodeOutputInterface
    {
    }
    /**
     * Represents a block call node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BlockReferenceNode extends \WPML\Core\Twig\Node\Node implements \WPML\Core\Twig\Node\NodeOutputInterface
    {
        public function __construct($name, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a node that outputs an expression.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class PrintNode extends \WPML\Core\Twig\Node\Node implements \WPML\Core\Twig\Node\NodeOutputInterface
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Adds a check for the __toString() method when the variable is an object and the sandbox is activated.
     *
     * When there is a simple Print statement, like {{ article }},
     * and if the sandbox is enabled, we need to check that the __toString()
     * method is allowed if 'article' is an object.
     *
     * Not used anymore, to be deprecated in 2.x and removed in 3.0
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SandboxedPrintNode extends \WPML\Core\Twig\Node\PrintNode
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        /**
         * Removes node filters.
         *
         * This is mostly needed when another visitor adds filters (like the escaper one).
         *
         * @return Node
         */
        protected function removeNodeFilter(\WPML\Core\Twig\Node\Node $node)
        {
        }
    }
    /**
     * Represents a nested "with" scope.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class WithNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig\Node\Node $body, \WPML\Core\Twig\Node\Node $variables = null, $only = \false, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a text node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TextNode extends \WPML\Core\Twig\Node\Node implements \WPML\Core\Twig\Node\NodeOutputInterface
    {
        public function __construct($data, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Internal node used by the for node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ForLoopNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a module node.
     *
     * Consider this class as being final. If you need to customize the behavior of
     * the generated class, consider adding nodes to the following nodes: display_start,
     * display_end, constructor_start, constructor_end, and class_end.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ModuleNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $body, \WPML\Core\Twig\Node\Expression\AbstractExpression $parent = null, \WPML\Core\Twig_NodeInterface $blocks, \WPML\Core\Twig_NodeInterface $macros, \WPML\Core\Twig_NodeInterface $traits, $embeddedTemplates, $name, $source = '')
        {
        }
        public function setIndex($index)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileTemplate(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileGetParent(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileClassHeader(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileConstructor(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileDisplay(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileClassFooter(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileMacros(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileGetTemplateName(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileIsTraitable(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileDebugInfo(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileGetSource(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileGetSourceContext(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileLoadTemplate(\WPML\Core\Twig\Compiler $compiler, $node, $var)
        {
        }
    }
    /**
     * Represents a flush node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class FlushNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($lineno, $tag)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an include node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class IncludeNode extends \WPML\Core\Twig\Node\Node implements \WPML\Core\Twig\Node\NodeOutputInterface
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, $variables, $only, $ignoreMissing, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function addGetTemplate(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function addTemplateArguments(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an embed node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EmbedNode extends \WPML\Core\Twig\Node\IncludeNode
    {
        // we don't inject the module to avoid node visitors to traverse it twice (as it will be already visited in the main module)
        public function __construct($name, $index, \WPML\Core\Twig\Node\Expression\AbstractExpression $variables = null, $only = \false, $ignoreMissing = \false, $lineno, $tag = null)
        {
        }
        protected function addGetTemplate(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a node that captures any nested displayable nodes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface NodeCaptureInterface
    {
    }
}
namespace WPML\Core\Twig\Node\Expression {
    /**
     * Abstract class for all nodes that represents an expression.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class AbstractExpression extends \WPML\Core\Twig\Node\Node
    {
    }
    abstract class CallExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        protected function compileCallable(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileArguments(\WPML\Core\Twig\Compiler $compiler, $isArray = \false)
        {
        }
        protected function getArguments($callable, $arguments)
        {
        }
        protected function normalizeName($name)
        {
        }
    }
    class FunctionExpression extends \WPML\Core\Twig\Node\Expression\CallExpression
    {
        public function __construct($name, \WPML\Core\Twig_NodeInterface $arguments, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an arrow function.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ArrowFunctionExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, \WPML\Core\Twig\Node\Node $names, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class FilterExpression extends \WPML\Core\Twig\Node\Expression\CallExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Node\Expression\ConstantExpression $filterName, \WPML\Core\Twig_NodeInterface $arguments, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class ArrayExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        protected $index;
        public function __construct(array $elements, $lineno)
        {
        }
        public function getKeyValuePairs()
        {
        }
        public function hasElement(\WPML\Core\Twig\Node\Expression\AbstractExpression $key)
        {
        }
        public function addElement(\WPML\Core\Twig\Node\Expression\AbstractExpression $value, \WPML\Core\Twig\Node\Expression\AbstractExpression $key = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class TestExpression extends \WPML\Core\Twig\Node\Expression\CallExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $node, $name, \WPML\Core\Twig_NodeInterface $arguments = null, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class TempNameExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct($name, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression\Filter {
    /**
     * Returns the value or the default value when it is undefined or empty.
     *
     *  {{ var.foo|default('foo item on var is not defined') }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DefaultFilter extends \WPML\Core\Twig\Node\Expression\FilterExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Node\Expression\ConstantExpression $filterName, \WPML\Core\Twig_NodeInterface $arguments, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression\Binary {
    abstract class AbstractBinary extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $left, \WPML\Core\Twig_NodeInterface $right, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public abstract function operator(\WPML\Core\Twig\Compiler $compiler);
    }
    class StartsWithBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class BitwiseXorBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class ModBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class DivBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class BitwiseAndBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class GreaterBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class EndsWithBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class RangeBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class LessBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class MatchesBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class EqualBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class PowerBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class InBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class NotEqualBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class MulBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class AndBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class BitwiseOrBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class SubBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class GreaterEqualBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class LessEqualBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class OrBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class FloorDivBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class NotInBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class ConcatBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class AddBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression {
    /**
     * Represents a block call node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BlockReferenceExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        /**
         * @param Node|null $template
         */
        public function __construct(\WPML\Core\Twig_NodeInterface $name, $template = null, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * @internal
     */
    final class InlinePrint extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Node $node, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression\Unary {
    abstract class AbstractUnary extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $node, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public abstract function operator(\WPML\Core\Twig\Compiler $compiler);
    }
    class NegUnary extends \WPML\Core\Twig\Node\Expression\Unary\AbstractUnary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class NotUnary extends \WPML\Core\Twig\Node\Expression\Unary\AbstractUnary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class PosUnary extends \WPML\Core\Twig\Node\Expression\Unary\AbstractUnary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression {
    class NameExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        protected $specialVars = ['_self' => '$this', '_context' => '$context', '_charset' => '$this->env->getCharset()'];
        public function __construct($name, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function isSpecial()
        {
        }
        public function isSimple()
        {
        }
    }
    class ConditionalExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr1, \WPML\Core\Twig\Node\Expression\AbstractExpression $expr2, \WPML\Core\Twig\Node\Expression\AbstractExpression $expr3, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class NullCoalesceExpression extends \WPML\Core\Twig\Node\Expression\ConditionalExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $left, \WPML\Core\Twig_NodeInterface $right, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class AssignNameExpression extends \WPML\Core\Twig\Node\Expression\NameExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class MethodCallExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $node, $method, \WPML\Core\Twig\Node\Expression\ArrayExpression $arguments, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class GetAttrExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $node, \WPML\Core\Twig\Node\Expression\AbstractExpression $attribute, \WPML\Core\Twig\Node\Expression\AbstractExpression $arguments = null, $type, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a parent node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ParentExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct($name, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression\Test {
    /**
     * Checks if a number is even.
     *
     *  {{ var is even }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EvenTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if a number is odd.
     *
     *  {{ var is odd }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class OddTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if a variable is defined in the current context.
     *
     *    {# defined works with variable names and variable attributes #}
     *    {% if foo is defined %}
     *        {# ... #}
     *    {% endif %}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DefinedTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $node, $name, \WPML\Core\Twig_NodeInterface $arguments = null, $lineno)
        {
        }
        protected function changeIgnoreStrictCheck(\WPML\Core\Twig\Node\Expression\GetAttrExpression $node)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if a variable is divisible by a number.
     *
     *  {% if loop.index is divisible by(3) %}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DivisiblebyTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if a variable is the same as another one (=== in PHP).
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SameasTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if a variable is the exact same value as a constant.
     *
     *    {% if post.status is constant('Post::PUBLISHED') %}
     *      the status attribute is exactly the same as Post::PUBLISHED
     *    {% endif %}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ConstantTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks that a variable is null.
     *
     *  {{ var is none }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class NullTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression {
    class ConstantExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct($value, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node {
    /**
     * Represents a for node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ForNode extends \WPML\Core\Twig\Node\Node
    {
        protected $loop;
        public function __construct(\WPML\Core\Twig\Node\Expression\AssignNameExpression $keyTarget, \WPML\Core\Twig\Node\Expression\AssignNameExpression $valueTarget, \WPML\Core\Twig\Node\Expression\AbstractExpression $seq, \WPML\Core\Twig\Node\Expression\AbstractExpression $ifexpr = null, \WPML\Core\Twig_NodeInterface $body, \WPML\Core\Twig_NodeInterface $else = null, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if casting an expression to __toString() is allowed by the sandbox.
     *
     * For instance, when there is a simple Print statement, like {{ article }},
     * and if the sandbox is enabled, we need to check that the __toString()
     * method is allowed if 'article' is an object. The same goes for {{ article|upper }}
     * or {{ random(article) }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class CheckToStringNode extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a set node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SetNode extends \WPML\Core\Twig\Node\Node implements \WPML\Core\Twig\Node\NodeCaptureInterface
    {
        public function __construct($capture, \WPML\Core\Twig_NodeInterface $names, \WPML\Core\Twig_NodeInterface $values, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a do node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DoNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a body node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BodyNode extends \WPML\Core\Twig\Node\Node
    {
    }
    /**
     * Represents a sandbox node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SandboxNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $body, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class CheckSecurityNode extends \WPML\Core\Twig\Node\Node
    {
        protected $usedFilters;
        protected $usedTags;
        protected $usedFunctions;
        public function __construct(array $usedFilters, array $usedTags, array $usedFunctions)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * @internal
     */
    class SetTempNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($name, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a macro node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class MacroNode extends \WPML\Core\Twig\Node\Node
    {
        const VARARGS_NAME = 'varargs';
        public function __construct($name, \WPML\Core\Twig_NodeInterface $body, \WPML\Core\Twig_NodeInterface $arguments, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an autoescape node.
     *
     * The value is the escaping strategy (can be html, js, ...)
     *
     * The true value is equivalent to html.
     *
     * If autoescaping is disabled, then the value is false.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class AutoEscapeNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($value, \WPML\Core\Twig_NodeInterface $body, $lineno, $tag = 'autoescape')
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a block node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BlockNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($name, \WPML\Core\Twig_NodeInterface $body, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig {
    /**
     * Represents a token stream.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TokenStream
    {
        protected $tokens;
        protected $current = 0;
        protected $filename;
        /**
         * @param array       $tokens An array of tokens
         * @param string|null $name   The name of the template which tokens are associated with
         * @param string|null $source The source code associated with the tokens
         */
        public function __construct(array $tokens, $name = null, $source = null)
        {
        }
        public function __toString()
        {
        }
        public function injectTokens(array $tokens)
        {
        }
        /**
         * Sets the pointer to the next token and returns the old one.
         *
         * @return Token
         */
        public function next()
        {
        }
        /**
         * Tests a token, sets the pointer to the next one and returns it or throws a syntax error.
         *
         * @return Token|null The next token if the condition is true, null otherwise
         */
        public function nextIf($primary, $secondary = null)
        {
        }
        /**
         * Tests a token and returns it or throws a syntax error.
         *
         * @return Token
         */
        public function expect($type, $value = null, $message = null)
        {
        }
        /**
         * Looks at the next token.
         *
         * @param int $number
         *
         * @return Token
         */
        public function look($number = 1)
        {
        }
        /**
         * Tests the current token.
         *
         * @return bool
         */
        public function test($primary, $secondary = null)
        {
        }
        /**
         * Checks if end of stream was reached.
         *
         * @return bool
         */
        public function isEOF()
        {
        }
        /**
         * @return Token
         */
        public function getCurrent()
        {
        }
        /**
         * Gets the name associated with this stream (null if not defined).
         *
         * @return string|null
         *
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getFilename()
        {
        }
        /**
         * Gets the source code associated with this stream.
         *
         * @return string
         *
         * @internal Don't use this as it might be empty depending on the environment configuration
         *
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getSource()
        {
        }
        /**
         * Gets the source associated with this stream.
         *
         * @return Source
         *
         * @internal
         */
        public function getSourceContext()
        {
        }
    }
    /**
     * Exposes a template to userland.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class TemplateWrapper
    {
        /**
         * This method is for internal use only and should never be called
         * directly (use \\WPML\\Core\\Twig\\Environment::load() instead).
         *
         * @internal
         */
        public function __construct(\WPML\Core\Twig\Environment $env, \WPML\Core\Twig\Template $template)
        {
        }
        /**
         * Renders the template.
         *
         * @param array $context An array of parameters to pass to the template
         *
         * @return string The rendered template
         */
        public function render($context = [])
        {
        }
        /**
         * Displays the template.
         *
         * @param array $context An array of parameters to pass to the template
         */
        public function display($context = [])
        {
        }
        /**
         * Checks if a block is defined.
         *
         * @param string $name    The block name
         * @param array  $context An array of parameters to pass to the template
         *
         * @return bool
         */
        public function hasBlock($name, $context = [])
        {
        }
        /**
         * Returns defined block names in the template.
         *
         * @param array $context An array of parameters to pass to the template
         *
         * @return string[] An array of defined template block names
         */
        public function getBlockNames($context = [])
        {
        }
        /**
         * Renders a template block.
         *
         * @param string $name    The block name to render
         * @param array  $context An array of parameters to pass to the template
         *
         * @return string The rendered block
         */
        public function renderBlock($name, $context = [])
        {
        }
        /**
         * Displays a template block.
         *
         * @param string $name    The block name to render
         * @param array  $context An array of parameters to pass to the template
         */
        public function displayBlock($name, $context = [])
        {
        }
        /**
         * @return Source
         */
        public function getSourceContext()
        {
        }
        /**
         * @return string
         */
        public function getTemplateName()
        {
        }
        /**
         * @internal
         *
         * @return Template
         */
        public function unwrap()
        {
        }
    }
    /**
     * Stores the Twig configuration.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Environment
    {
        const VERSION = '1.42.4';
        const VERSION_ID = 14204;
        const MAJOR_VERSION = 1;
        const MINOR_VERSION = 42;
        const RELEASE_VERSION = 4;
        const EXTRA_VERSION = '';
        protected $charset;
        protected $loader;
        protected $debug;
        protected $autoReload;
        protected $cache;
        protected $lexer;
        protected $parser;
        protected $compiler;
        protected $baseTemplateClass;
        protected $extensions;
        protected $parsers;
        protected $visitors;
        protected $filters;
        protected $tests;
        protected $functions;
        protected $globals;
        protected $runtimeInitialized = \false;
        protected $extensionInitialized = \false;
        protected $loadedTemplates;
        protected $strictVariables;
        protected $unaryOperators;
        protected $binaryOperators;
        protected $templateClassPrefix = '\\WPML\\Core\\__TwigTemplate_';
        protected $functionCallbacks = [];
        protected $filterCallbacks = [];
        protected $staging;
        /**
         * Constructor.
         *
         * Available options:
         *
         *  * debug: When set to true, it automatically set "auto_reload" to true as
         *           well (default to false).
         *
         *  * charset: The charset used by the templates (default to UTF-8).
         *
         *  * base_template_class: The base template class to use for generated
         *                         templates (default to \Twig\Template).
         *
         *  * cache: An absolute path where to store the compiled templates,
         *           a \Twig\Cache\CacheInterface implementation,
         *           or false to disable compilation cache (default).
         *
         *  * auto_reload: Whether to reload the template if the original source changed.
         *                 If you don't provide the auto_reload option, it will be
         *                 determined automatically based on the debug value.
         *
         *  * strict_variables: Whether to ignore invalid variables in templates
         *                      (default to false).
         *
         *  * autoescape: Whether to enable auto-escaping (default to html):
         *                  * false: disable auto-escaping
         *                  * true: equivalent to html
         *                  * html, js: set the autoescaping to one of the supported strategies
         *                  * name: set the autoescaping strategy based on the template name extension
         *                  * PHP callback: a PHP callback that returns an escaping strategy based on the template "name"
         *
         *  * optimizations: A flag that indicates which optimizations to apply
         *                   (default to -1 which means that all optimizations are enabled;
         *                   set it to 0 to disable).
         */
        public function __construct(\WPML\Core\Twig\Loader\LoaderInterface $loader = null, $options = [])
        {
        }
        /**
         * Gets the base template class for compiled templates.
         *
         * @return string The base template class name
         */
        public function getBaseTemplateClass()
        {
        }
        /**
         * Sets the base template class for compiled templates.
         *
         * @param string $class The base template class name
         */
        public function setBaseTemplateClass($class)
        {
        }
        /**
         * Enables debugging mode.
         */
        public function enableDebug()
        {
        }
        /**
         * Disables debugging mode.
         */
        public function disableDebug()
        {
        }
        /**
         * Checks if debug mode is enabled.
         *
         * @return bool true if debug mode is enabled, false otherwise
         */
        public function isDebug()
        {
        }
        /**
         * Enables the auto_reload option.
         */
        public function enableAutoReload()
        {
        }
        /**
         * Disables the auto_reload option.
         */
        public function disableAutoReload()
        {
        }
        /**
         * Checks if the auto_reload option is enabled.
         *
         * @return bool true if auto_reload is enabled, false otherwise
         */
        public function isAutoReload()
        {
        }
        /**
         * Enables the strict_variables option.
         */
        public function enableStrictVariables()
        {
        }
        /**
         * Disables the strict_variables option.
         */
        public function disableStrictVariables()
        {
        }
        /**
         * Checks if the strict_variables option is enabled.
         *
         * @return bool true if strict_variables is enabled, false otherwise
         */
        public function isStrictVariables()
        {
        }
        /**
         * Gets the current cache implementation.
         *
         * @param bool $original Whether to return the original cache option or the real cache instance
         *
         * @return CacheInterface|string|false A Twig\Cache\CacheInterface implementation,
         *                                     an absolute path to the compiled templates,
         *                                     or false to disable cache
         */
        public function getCache($original = \true)
        {
        }
        /**
         * Sets the current cache implementation.
         *
         * @param CacheInterface|string|false $cache A Twig\Cache\CacheInterface implementation,
         *                                           an absolute path to the compiled templates,
         *                                           or false to disable cache
         */
        public function setCache($cache)
        {
        }
        /**
         * Gets the cache filename for a given template.
         *
         * @param string $name The template name
         *
         * @return string|false The cache file name or false when caching is disabled
         *
         * @deprecated since 1.22 (to be removed in 2.0)
         */
        public function getCacheFilename($name)
        {
        }
        /**
         * Gets the template class associated with the given string.
         *
         * The generated template class is based on the following parameters:
         *
         *  * The cache key for the given template;
         *  * The currently enabled extensions;
         *  * Whether the Twig C extension is available or not;
         *  * PHP version;
         *  * Twig version;
         *  * Options with what environment was created.
         *
         * @param string   $name  The name for which to calculate the template class name
         * @param int|null $index The index if it is an embedded template
         *
         * @return string The template class name
         */
        public function getTemplateClass($name, $index = null)
        {
        }
        /**
         * Gets the template class prefix.
         *
         * @return string The template class prefix
         *
         * @deprecated since 1.22 (to be removed in 2.0)
         */
        public function getTemplateClassPrefix()
        {
        }
        /**
         * Renders a template.
         *
         * @param string|TemplateWrapper $name    The template name
         * @param array                  $context An array of parameters to pass to the template
         *
         * @return string The rendered template
         *
         * @throws LoaderError  When the template cannot be found
         * @throws SyntaxError  When an error occurred during compilation
         * @throws RuntimeError When an error occurred during rendering
         */
        public function render($name, array $context = [])
        {
        }
        /**
         * Displays a template.
         *
         * @param string|TemplateWrapper $name    The template name
         * @param array                  $context An array of parameters to pass to the template
         *
         * @throws LoaderError  When the template cannot be found
         * @throws SyntaxError  When an error occurred during compilation
         * @throws RuntimeError When an error occurred during rendering
         */
        public function display($name, array $context = [])
        {
        }
        /**
         * Loads a template.
         *
         * @param string|TemplateWrapper|\Twig\Template $name The template name
         *
         * @throws LoaderError  When the template cannot be found
         * @throws RuntimeError When a previously generated cache is corrupted
         * @throws SyntaxError  When an error occurred during compilation
         *
         * @return TemplateWrapper
         */
        public function load($name)
        {
        }
        /**
         * Loads a template internal representation.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param string $name  The template name
         * @param int    $index The index if it is an embedded template
         *
         * @return \Twig_TemplateInterface A template instance representing the given template name
         *
         * @throws LoaderError  When the template cannot be found
         * @throws RuntimeError When a previously generated cache is corrupted
         * @throws SyntaxError  When an error occurred during compilation
         *
         * @internal
         */
        public function loadTemplate($name, $index = null)
        {
        }
        /**
         * @internal
         */
        public function loadClass($cls, $name, $index = null)
        {
        }
        /**
         * Creates a template from source.
         *
         * This method should not be used as a generic way to load templates.
         *
         * @param string $template The template source
         * @param string $name     An optional name of the template to be used in error messages
         *
         * @return TemplateWrapper A template instance representing the given template name
         *
         * @throws LoaderError When the template cannot be found
         * @throws SyntaxError When an error occurred during compilation
         */
        public function createTemplate($template, $name = null)
        {
        }
        /**
         * Returns true if the template is still fresh.
         *
         * Besides checking the loader for freshness information,
         * this method also checks if the enabled extensions have
         * not changed.
         *
         * @param string $name The template name
         * @param int    $time The last modification time of the cached template
         *
         * @return bool true if the template is fresh, false otherwise
         */
        public function isTemplateFresh($name, $time)
        {
        }
        /**
         * Tries to load a template consecutively from an array.
         *
         * Similar to load() but it also accepts instances of \Twig\Template and
         * \Twig\TemplateWrapper, and an array of templates where each is tried to be loaded.
         *
         * @param string|Template|\Twig\TemplateWrapper|array $names A template or an array of templates to try consecutively
         *
         * @return TemplateWrapper|Template
         *
         * @throws LoaderError When none of the templates can be found
         * @throws SyntaxError When an error occurred during compilation
         */
        public function resolveTemplate($names)
        {
        }
        /**
         * Clears the internal template cache.
         *
         * @deprecated since 1.18.3 (to be removed in 2.0)
         */
        public function clearTemplateCache()
        {
        }
        /**
         * Clears the template cache files on the filesystem.
         *
         * @deprecated since 1.22 (to be removed in 2.0)
         */
        public function clearCacheFiles()
        {
        }
        /**
         * Gets the Lexer instance.
         *
         * @return \Twig_LexerInterface
         *
         * @deprecated since 1.25 (to be removed in 2.0)
         */
        public function getLexer()
        {
        }
        public function setLexer(\WPML\Core\Twig_LexerInterface $lexer)
        {
        }
        /**
         * Tokenizes a source code.
         *
         * @param string|Source $source The template source code
         * @param string        $name   The template name (deprecated)
         *
         * @return TokenStream
         *
         * @throws SyntaxError When the code is syntactically wrong
         */
        public function tokenize($source, $name = null)
        {
        }
        /**
         * Gets the Parser instance.
         *
         * @return \Twig_ParserInterface
         *
         * @deprecated since 1.25 (to be removed in 2.0)
         */
        public function getParser()
        {
        }
        public function setParser(\WPML\Core\Twig_ParserInterface $parser)
        {
        }
        /**
         * Converts a token stream to a node tree.
         *
         * @return ModuleNode
         *
         * @throws SyntaxError When the token stream is syntactically or semantically wrong
         */
        public function parse(\WPML\Core\Twig\TokenStream $stream)
        {
        }
        /**
         * Gets the Compiler instance.
         *
         * @return \Twig_CompilerInterface
         *
         * @deprecated since 1.25 (to be removed in 2.0)
         */
        public function getCompiler()
        {
        }
        public function setCompiler(\WPML\Core\Twig_CompilerInterface $compiler)
        {
        }
        /**
         * Compiles a node and returns the PHP code.
         *
         * @return string The compiled PHP source code
         */
        public function compile(\WPML\Core\Twig_NodeInterface $node)
        {
        }
        /**
         * Compiles a template source code.
         *
         * @param string|Source $source The template source code
         * @param string        $name   The template name (deprecated)
         *
         * @return string The compiled PHP source code
         *
         * @throws SyntaxError When there was an error during tokenizing, parsing or compiling
         */
        public function compileSource($source, $name = null)
        {
        }
        public function setLoader(\WPML\Core\Twig\Loader\LoaderInterface $loader)
        {
        }
        /**
         * Gets the Loader instance.
         *
         * @return LoaderInterface
         */
        public function getLoader()
        {
        }
        /**
         * Sets the default template charset.
         *
         * @param string $charset The default charset
         */
        public function setCharset($charset)
        {
        }
        /**
         * Gets the default template charset.
         *
         * @return string The default charset
         */
        public function getCharset()
        {
        }
        /**
         * Initializes the runtime environment.
         *
         * @deprecated since 1.23 (to be removed in 2.0)
         */
        public function initRuntime()
        {
        }
        /**
         * Returns true if the given extension is registered.
         *
         * @param string $class The extension class name
         *
         * @return bool Whether the extension is registered or not
         */
        public function hasExtension($class)
        {
        }
        /**
         * Adds a runtime loader.
         */
        public function addRuntimeLoader(\WPML\Core\Twig\RuntimeLoader\RuntimeLoaderInterface $loader)
        {
        }
        /**
         * Gets an extension by class name.
         *
         * @param string $class The extension class name
         *
         * @return ExtensionInterface
         */
        public function getExtension($class)
        {
        }
        /**
         * Returns the runtime implementation of a Twig element (filter/function/test).
         *
         * @param string $class A runtime class name
         *
         * @return object The runtime implementation
         *
         * @throws RuntimeError When the template cannot be found
         */
        public function getRuntime($class)
        {
        }
        public function addExtension(\WPML\Core\Twig\Extension\ExtensionInterface $extension)
        {
        }
        /**
         * Removes an extension by name.
         *
         * This method is deprecated and you should not use it.
         *
         * @param string $name The extension name
         *
         * @deprecated since 1.12 (to be removed in 2.0)
         */
        public function removeExtension($name)
        {
        }
        /**
         * Registers an array of extensions.
         *
         * @param array $extensions An array of extensions
         */
        public function setExtensions(array $extensions)
        {
        }
        /**
         * Returns all registered extensions.
         *
         * @return ExtensionInterface[] An array of extensions (keys are for internal usage only and should not be relied on)
         */
        public function getExtensions()
        {
        }
        public function addTokenParser(\WPML\Core\Twig\TokenParser\TokenParserInterface $parser)
        {
        }
        /**
         * Gets the registered Token Parsers.
         *
         * @return \Twig_TokenParserBrokerInterface
         *
         * @internal
         */
        public function getTokenParsers()
        {
        }
        /**
         * Gets registered tags.
         *
         * Be warned that this method cannot return tags defined by \Twig_TokenParserBrokerInterface classes.
         *
         * @return TokenParserInterface[]
         *
         * @internal
         */
        public function getTags()
        {
        }
        public function addNodeVisitor(\WPML\Core\Twig\NodeVisitor\NodeVisitorInterface $visitor)
        {
        }
        /**
         * Gets the registered Node Visitors.
         *
         * @return NodeVisitorInterface[]
         *
         * @internal
         */
        public function getNodeVisitors()
        {
        }
        /**
         * Registers a Filter.
         *
         * @param string|TwigFilter                $name   The filter name or a \Twig_SimpleFilter instance
         * @param \Twig_FilterInterface|TwigFilter $filter
         */
        public function addFilter($name, $filter = null)
        {
        }
        /**
         * Get a filter by name.
         *
         * Subclasses may override this method and load filters differently;
         * so no list of filters is available.
         *
         * @param string $name The filter name
         *
         * @return \Twig_Filter|false
         *
         * @internal
         */
        public function getFilter($name)
        {
        }
        public function registerUndefinedFilterCallback($callable)
        {
        }
        /**
         * Gets the registered Filters.
         *
         * Be warned that this method cannot return filters defined with registerUndefinedFilterCallback.
         *
         * @return \Twig_FilterInterface[]
         *
         * @see registerUndefinedFilterCallback
         *
         * @internal
         */
        public function getFilters()
        {
        }
        /**
         * Registers a Test.
         *
         * @param string|TwigTest              $name The test name or a \Twig_SimpleTest instance
         * @param \Twig_TestInterface|TwigTest $test A \Twig_TestInterface instance or a \Twig_SimpleTest instance
         */
        public function addTest($name, $test = null)
        {
        }
        /**
         * Gets the registered Tests.
         *
         * @return \Twig_TestInterface[]
         *
         * @internal
         */
        public function getTests()
        {
        }
        /**
         * Gets a test by name.
         *
         * @param string $name The test name
         *
         * @return \Twig_Test|false
         *
         * @internal
         */
        public function getTest($name)
        {
        }
        /**
         * Registers a Function.
         *
         * @param string|TwigFunction                  $name     The function name or a \Twig_SimpleFunction instance
         * @param \Twig_FunctionInterface|TwigFunction $function
         */
        public function addFunction($name, $function = null)
        {
        }
        /**
         * Get a function by name.
         *
         * Subclasses may override this method and load functions differently;
         * so no list of functions is available.
         *
         * @param string $name function name
         *
         * @return \Twig_Function|false
         *
         * @internal
         */
        public function getFunction($name)
        {
        }
        public function registerUndefinedFunctionCallback($callable)
        {
        }
        /**
         * Gets registered functions.
         *
         * Be warned that this method cannot return functions defined with registerUndefinedFunctionCallback.
         *
         * @return \Twig_FunctionInterface[]
         *
         * @see registerUndefinedFunctionCallback
         *
         * @internal
         */
        public function getFunctions()
        {
        }
        /**
         * Registers a Global.
         *
         * New globals can be added before compiling or rendering a template;
         * but after, you can only update existing globals.
         *
         * @param string $name  The global name
         * @param mixed  $value The global value
         */
        public function addGlobal($name, $value)
        {
        }
        /**
         * Gets the registered Globals.
         *
         * @return array An array of globals
         *
         * @internal
         */
        public function getGlobals()
        {
        }
        /**
         * Merges a context with the defined globals.
         *
         * @param array $context An array representing the context
         *
         * @return array The context merged with the globals
         */
        public function mergeGlobals(array $context)
        {
        }
        /**
         * Gets the registered unary Operators.
         *
         * @return array An array of unary operators
         *
         * @internal
         */
        public function getUnaryOperators()
        {
        }
        /**
         * Gets the registered binary Operators.
         *
         * @return array An array of binary operators
         *
         * @internal
         */
        public function getBinaryOperators()
        {
        }
        /**
         * @deprecated since 1.23 (to be removed in 2.0)
         */
        public function computeAlternatives($name, $items)
        {
        }
        /**
         * @internal
         */
        protected function initGlobals()
        {
        }
        /**
         * @internal
         */
        protected function initExtensions()
        {
        }
        /**
         * @internal
         */
        protected function initExtension(\WPML\Core\Twig\Extension\ExtensionInterface $extension)
        {
        }
        /**
         * @deprecated since 1.22 (to be removed in 2.0)
         */
        protected function writeCacheFile($file, $content)
        {
        }
    }
    /**
     * A node traverser.
     *
     * It visits all nodes and their children and calls the given visitor for each.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class NodeTraverser
    {
        protected $env;
        protected $visitors = [];
        /**
         * @param NodeVisitorInterface[] $visitors
         */
        public function __construct(\WPML\Core\Twig\Environment $env, array $visitors = [])
        {
        }
        public function addVisitor(\WPML\Core\Twig\NodeVisitor\NodeVisitorInterface $visitor)
        {
        }
        /**
         * Traverses a node and calls the registered visitors.
         *
         * @return \Twig_NodeInterface
         */
        public function traverse(\WPML\Core\Twig_NodeInterface $node)
        {
        }
        protected function traverseForVisitor(\WPML\Core\Twig\NodeVisitor\NodeVisitorInterface $visitor, \WPML\Core\Twig_NodeInterface $node = null)
        {
        }
    }
    /**
     * Marks a content as safe.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Markup implements \Countable
    {
        protected $content;
        protected $charset;
        public function __construct($content, $charset)
        {
        }
        public function __toString()
        {
        }
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
    }
}
namespace WPML\Core\Twig\Extension {
    /**
     * Enables usage of the deprecated Twig\Extension\AbstractExtension::getGlobals() method.
     *
     * Explicitly implement this interface if you really need to implement the
     * deprecated getGlobals() method in your extensions.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface GlobalsInterface
    {
    }
    /**
     * Interface implemented by extension classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface ExtensionInterface
    {
        /**
         * Initializes the runtime environment.
         *
         * This is where you can load some file that contains filter functions for instance.
         *
         * @deprecated since 1.23 (to be removed in 2.0), implement \Twig_Extension_InitRuntimeInterface instead
         */
        public function initRuntime(\WPML\Core\Twig\Environment $environment);
        /**
         * Returns the token parser instances to add to the existing list.
         *
         * @return TokenParserInterface[]
         */
        public function getTokenParsers();
        /**
         * Returns the node visitor instances to add to the existing list.
         *
         * @return NodeVisitorInterface[]
         */
        public function getNodeVisitors();
        /**
         * Returns a list of filters to add to the existing list.
         *
         * @return TwigFilter[]
         */
        public function getFilters();
        /**
         * Returns a list of tests to add to the existing list.
         *
         * @return TwigTest[]
         */
        public function getTests();
        /**
         * Returns a list of functions to add to the existing list.
         *
         * @return TwigFunction[]
         */
        public function getFunctions();
        /**
         * Returns a list of operators to add to the existing list.
         *
         * @return array<array> First array of unary operators, second array of binary operators
         */
        public function getOperators();
        /**
         * Returns a list of global variables to add to the existing list.
         *
         * @return array An array of global variables
         *
         * @deprecated since 1.23 (to be removed in 2.0), implement \Twig_Extension_GlobalsInterface instead
         */
        public function getGlobals();
        /**
         * Returns the name of the extension.
         *
         * @return string The extension name
         *
         * @deprecated since 1.26 (to be removed in 2.0), not used anymore internally
         */
        public function getName();
    }
    abstract class AbstractExtension implements \WPML\Core\Twig\Extension\ExtensionInterface
    {
        /**
         * @deprecated since 1.23 (to be removed in 2.0), implement \Twig_Extension_InitRuntimeInterface instead
         */
        public function initRuntime(\WPML\Core\Twig\Environment $environment)
        {
        }
        public function getTokenParsers()
        {
        }
        public function getNodeVisitors()
        {
        }
        public function getFilters()
        {
        }
        public function getTests()
        {
        }
        public function getFunctions()
        {
        }
        public function getOperators()
        {
        }
        /**
         * @deprecated since 1.23 (to be removed in 2.0), implement \Twig_Extension_GlobalsInterface instead
         */
        public function getGlobals()
        {
        }
        /**
         * @deprecated since 1.26 (to be removed in 2.0), not used anymore internally
         */
        public function getName()
        {
        }
    }
    /**
     * Internal class.
     *
     * This class is used by \Twig\Environment as a staging area and must not be used directly.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    class StagingExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        protected $functions = [];
        protected $filters = [];
        protected $visitors = [];
        protected $tokenParsers = [];
        protected $globals = [];
        protected $tests = [];
        public function addFunction($name, $function)
        {
        }
        public function getFunctions()
        {
        }
        public function addFilter($name, $filter)
        {
        }
        public function getFilters()
        {
        }
        public function addNodeVisitor(\WPML\Core\Twig\NodeVisitor\NodeVisitorInterface $visitor)
        {
        }
        public function getNodeVisitors()
        {
        }
        public function addTokenParser(\WPML\Core\Twig\TokenParser\TokenParserInterface $parser)
        {
        }
        public function getTokenParsers()
        {
        }
        public function addGlobal($name, $value)
        {
        }
        public function getGlobals()
        {
        }
        public function addTest($name, $test)
        {
        }
        public function getTests()
        {
        }
        public function getName()
        {
        }
    }
    /**
     * @author Grégoire Pineau <lyrixx@lyrixx.info>
     */
    interface RuntimeExtensionInterface
    {
    }
    /**
     * @final
     */
    class SandboxExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        protected $sandboxedGlobally;
        protected $sandboxed;
        protected $policy;
        public function __construct(\WPML\Core\Twig\Sandbox\SecurityPolicyInterface $policy, $sandboxed = \false)
        {
        }
        public function getTokenParsers()
        {
        }
        public function getNodeVisitors()
        {
        }
        public function enableSandbox()
        {
        }
        public function disableSandbox()
        {
        }
        public function isSandboxed()
        {
        }
        public function isSandboxedGlobally()
        {
        }
        public function setSecurityPolicy(\WPML\Core\Twig\Sandbox\SecurityPolicyInterface $policy)
        {
        }
        public function getSecurityPolicy()
        {
        }
        public function checkSecurity($tags, $filters, $functions)
        {
        }
        public function checkMethodAllowed($obj, $method)
        {
        }
        public function checkPropertyAllowed($obj, $method)
        {
        }
        public function ensureToStringAllowed($obj)
        {
        }
        public function getName()
        {
        }
    }
    /**
     * @final
     */
    class DebugExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        public function getFunctions()
        {
        }
        public function getName()
        {
        }
    }
    class ProfilerExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        public function __construct(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
        public function enter(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
        public function leave(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
        public function getNodeVisitors()
        {
        }
        public function getName()
        {
        }
    }
    /**
     * @final
     */
    class CoreExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        protected $dateFormats = ['F j, Y H:i', '%d days'];
        protected $numberFormat = [0, '.', ','];
        protected $timezone = null;
        protected $escapers = [];
        /**
         * Defines a new escaper to be used via the escape filter.
         *
         * @param string   $strategy The strategy name that should be used as a strategy in the escape call
         * @param callable $callable A valid PHP callable
         */
        public function setEscaper($strategy, $callable)
        {
        }
        /**
         * Gets all defined escapers.
         *
         * @return array An array of escapers
         */
        public function getEscapers()
        {
        }
        /**
         * Sets the default format to be used by the date filter.
         *
         * @param string $format             The default date format string
         * @param string $dateIntervalFormat The default date interval format string
         */
        public function setDateFormat($format = null, $dateIntervalFormat = null)
        {
        }
        /**
         * Gets the default format to be used by the date filter.
         *
         * @return array The default date format string and the default date interval format string
         */
        public function getDateFormat()
        {
        }
        /**
         * Sets the default timezone to be used by the date filter.
         *
         * @param \DateTimeZone|string $timezone The default timezone string or a \DateTimeZone object
         */
        public function setTimezone($timezone)
        {
        }
        /**
         * Gets the default timezone to be used by the date filter.
         *
         * @return \DateTimeZone The default timezone currently in use
         */
        public function getTimezone()
        {
        }
        /**
         * Sets the default format to be used by the number_format filter.
         *
         * @param int    $decimal      the number of decimal places to use
         * @param string $decimalPoint the character(s) to use for the decimal point
         * @param string $thousandSep  the character(s) to use for the thousands separator
         */
        public function setNumberFormat($decimal, $decimalPoint, $thousandSep)
        {
        }
        /**
         * Get the default format used by the number_format filter.
         *
         * @return array The arguments for number_format()
         */
        public function getNumberFormat()
        {
        }
        public function getTokenParsers()
        {
        }
        public function getFilters()
        {
        }
        public function getFunctions()
        {
        }
        public function getTests()
        {
        }
        public function getOperators()
        {
        }
        public function getName()
        {
        }
    }
    /**
     * Enables usage of the deprecated Twig\Extension\AbstractExtension::initRuntime() method.
     *
     * Explicitly implement this interface if you really need to implement the
     * deprecated initRuntime() method in your extensions.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface InitRuntimeInterface
    {
    }
    /**
     * @final
     */
    class EscaperExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        protected $defaultStrategy;
        /**
         * @param string|false|callable $defaultStrategy An escaping strategy
         *
         * @see setDefaultStrategy()
         */
        public function __construct($defaultStrategy = 'html')
        {
        }
        public function getTokenParsers()
        {
        }
        public function getNodeVisitors()
        {
        }
        public function getFilters()
        {
        }
        /**
         * Sets the default strategy to use when not defined by the user.
         *
         * The strategy can be a valid PHP callback that takes the template
         * name as an argument and returns the strategy to use.
         *
         * @param string|false|callable $defaultStrategy An escaping strategy
         */
        public function setDefaultStrategy($defaultStrategy)
        {
        }
        /**
         * Gets the default strategy to use when not defined by the user.
         *
         * @param string $name The template name
         *
         * @return string|false The default strategy to use for the template
         */
        public function getDefaultStrategy($name)
        {
        }
        public function getName()
        {
        }
    }
    /**
     * @final
     */
    class OptimizerExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        protected $optimizers;
        public function __construct($optimizers = -1)
        {
        }
        public function getNodeVisitors()
        {
        }
        public function getName()
        {
        }
    }
    /**
     * @final
     */
    class StringLoaderExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        public function getFunctions()
        {
        }
        public function getName()
        {
        }
    }
}
namespace WPML\Core {
    /*
     * This file is part of Twig.
     *
     * (c) Fabien Potencier
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */
    /**
     * Interface implemented by compiler classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface Twig_CompilerInterface
    {
        /**
         * Compiles a node.
         *
         * @return $this
         */
        public function compile(\WPML\Core\Twig_NodeInterface $node);
        /**
         * Gets the current PHP code after compilation.
         *
         * @return string The PHP code
         */
        public function getSource();
    }
}
namespace WPML\Core\Twig {
    /**
     * Compiles a node to PHP code.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Compiler implements \WPML\Core\Twig_CompilerInterface
    {
        protected $lastLine;
        protected $source;
        protected $indentation;
        protected $env;
        protected $debugInfo = [];
        protected $sourceOffset;
        protected $sourceLine;
        protected $filename;
        public function __construct(\WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * @deprecated since 1.25 (to be removed in 2.0)
         */
        public function getFilename()
        {
        }
        /**
         * Returns the environment instance related to this compiler.
         *
         * @return Environment
         */
        public function getEnvironment()
        {
        }
        /**
         * Gets the current PHP code after compilation.
         *
         * @return string The PHP code
         */
        public function getSource()
        {
        }
        /**
         * Compiles a node.
         *
         * @param int $indentation The current indentation
         *
         * @return $this
         */
        public function compile(\WPML\Core\Twig_NodeInterface $node, $indentation = 0)
        {
        }
        public function subcompile(\WPML\Core\Twig_NodeInterface $node, $raw = \true)
        {
        }
        /**
         * Adds a raw string to the compiled code.
         *
         * @param string $string The string
         *
         * @return $this
         */
        public function raw($string)
        {
        }
        /**
         * Writes a string to the compiled code by adding indentation.
         *
         * @return $this
         */
        public function write()
        {
        }
        /**
         * Appends an indentation to the current PHP code after compilation.
         *
         * @return $this
         *
         * @deprecated since 1.27 (to be removed in 2.0).
         */
        public function addIndentation()
        {
        }
        /**
         * Adds a quoted string to the compiled code.
         *
         * @param string $value The string
         *
         * @return $this
         */
        public function string($value)
        {
        }
        /**
         * Returns a PHP representation of a given value.
         *
         * @param mixed $value The value to convert
         *
         * @return $this
         */
        public function repr($value)
        {
        }
        /**
         * Adds debugging information.
         *
         * @return $this
         */
        public function addDebugInfo(\WPML\Core\Twig_NodeInterface $node)
        {
        }
        public function getDebugInfo()
        {
        }
        /**
         * Indents the generated code.
         *
         * @param int $step The number of indentation to add
         *
         * @return $this
         */
        public function indent($step = 1)
        {
        }
        /**
         * Outdents the generated code.
         *
         * @param int $step The number of indentation to remove
         *
         * @return $this
         *
         * @throws \LogicException When trying to outdent too much so the indentation would become negative
         */
        public function outdent($step = 1)
        {
        }
        public function getVarName()
        {
        }
    }
}
namespace WPML\Core\Twig\Cache {
    /**
     * Interface implemented by cache classes.
     *
     * It is highly recommended to always store templates on the filesystem to
     * benefit from the PHP opcode cache. This interface is mostly useful if you
     * need to implement a custom strategy for storing templates on the filesystem.
     *
     * @author Andrew Tch <andrew@noop.lv>
     */
    interface CacheInterface
    {
        /**
         * Generates a cache key for the given template class name.
         *
         * @param string $name      The template name
         * @param string $className The template class name
         *
         * @return string
         */
        public function generateKey($name, $className);
        /**
         * Writes the compiled template to cache.
         *
         * @param string $key     The cache key
         * @param string $content The template representation as a PHP class
         */
        public function write($key, $content);
        /**
         * Loads a template from the cache.
         *
         * @param string $key The cache key
         */
        public function load($key);
        /**
         * Returns the modification timestamp of a key.
         *
         * @param string $key The cache key
         *
         * @return int
         */
        public function getTimestamp($key);
    }
    /**
     * Implements a cache on the filesystem.
     *
     * @author Andrew Tch <andrew@noop.lv>
     */
    class FilesystemCache implements \WPML\Core\Twig\Cache\CacheInterface
    {
        const FORCE_BYTECODE_INVALIDATION = 1;
        /**
         * @param string $directory The root cache directory
         * @param int    $options   A set of options
         */
        public function __construct($directory, $options = 0)
        {
        }
        public function generateKey($name, $className)
        {
        }
        public function load($key)
        {
        }
        public function write($key, $content)
        {
        }
        public function getTimestamp($key)
        {
        }
    }
    /**
     * Implements a no-cache strategy.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class NullCache implements \WPML\Core\Twig\Cache\CacheInterface
    {
        public function generateKey($name, $className)
        {
        }
        public function write($key, $content)
        {
        }
        public function load($key)
        {
        }
        public function getTimestamp($key)
        {
        }
    }
}
namespace WPML\Core\Twig {
    /**
     * Represents a template function.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TwigFunction
    {
        protected $name;
        protected $callable;
        protected $options;
        protected $arguments = [];
        public function __construct($name, $callable, array $options = [])
        {
        }
        public function getName()
        {
        }
        public function getCallable()
        {
        }
        public function getNodeClass()
        {
        }
        public function setArguments($arguments)
        {
        }
        public function getArguments()
        {
        }
        public function needsEnvironment()
        {
        }
        public function needsContext()
        {
        }
        public function getSafe(\WPML\Core\Twig\Node\Node $functionArgs)
        {
        }
        public function isVariadic()
        {
        }
        public function isDeprecated()
        {
        }
        public function getDeprecatedVersion()
        {
        }
        public function getAlternative()
        {
        }
    }
}
namespace WPML\Core\Twig\Util {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TemplateDirIterator extends \IteratorIterator
    {
        public function current()
        {
        }
        public function key()
        {
        }
    }
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class DeprecationCollector
    {
        public function __construct(\WPML\Core\Twig\Environment $twig)
        {
        }
        /**
         * Returns deprecations for templates contained in a directory.
         *
         * @param string $dir A directory where templates are stored
         * @param string $ext Limit the loaded templates by extension
         *
         * @return array An array of deprecations
         */
        public function collectDir($dir, $ext = '.twig')
        {
        }
        /**
         * Returns deprecations for passed templates.
         *
         * @param \Traversable $iterator An iterator of templates (where keys are template names and values the contents of the template)
         *
         * @return array An array of deprecations
         */
        public function collect(\Traversable $iterator)
        {
        }
        /**
         * @internal
         */
        public function errorHandler($type, $msg)
        {
        }
    }
}
namespace WPML\Core\Twig {
    /**
     * Parses expressions.
     *
     * This parser implements a "Precedence climbing" algorithm.
     *
     * @see https://www.engr.mun.ca/~theo/Misc/exp_parsing.htm
     * @see https://en.wikipedia.org/wiki/Operator-precedence_parser
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    class ExpressionParser
    {
        const OPERATOR_LEFT = 1;
        const OPERATOR_RIGHT = 2;
        protected $parser;
        protected $unaryOperators;
        protected $binaryOperators;
        public function __construct(\WPML\Core\Twig\Parser $parser, $env = null)
        {
        }
        public function parseExpression($precedence = 0, $allowArrow = \false)
        {
        }
        protected function getPrimary()
        {
        }
        protected function parseConditionalExpression($expr)
        {
        }
        protected function isUnary(\WPML\Core\Twig\Token $token)
        {
        }
        protected function isBinary(\WPML\Core\Twig\Token $token)
        {
        }
        public function parsePrimaryExpression()
        {
        }
        public function parseStringExpression()
        {
        }
        public function parseArrayExpression()
        {
        }
        public function parseHashExpression()
        {
        }
        public function parsePostfixExpression($node)
        {
        }
        public function getFunctionNode($name, $line)
        {
        }
        public function parseSubscriptExpression($node)
        {
        }
        public function parseFilterExpression($node)
        {
        }
        public function parseFilterExpressionRaw($node, $tag = null)
        {
        }
        /**
         * Parses arguments.
         *
         * @param bool $namedArguments Whether to allow named arguments or not
         * @param bool $definition     Whether we are parsing arguments for a function definition
         *
         * @return Node
         *
         * @throws SyntaxError
         */
        public function parseArguments($namedArguments = \false, $definition = \false, $allowArrow = \false)
        {
        }
        public function parseAssignmentExpression()
        {
        }
        public function parseMultitargetExpression()
        {
        }
        protected function getFunctionNodeClass($name, $line)
        {
        }
        protected function getFilterNodeClass($name, $line)
        {
        }
        // checks that the node only contains "constant" elements
        protected function checkConstantExpression(\WPML\Core\Twig_NodeInterface $node)
        {
        }
    }
    /**
     * Holds information about a non-compiled Twig template.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Source
    {
        /**
         * @param string $code The template source code
         * @param string $name The template logical name
         * @param string $path The filesystem path of the template if any
         */
        public function __construct($code, $name, $path = '')
        {
        }
        public function getCode()
        {
        }
        public function getName()
        {
        }
        public function getPath()
        {
        }
    }
    /**
     * Default autoescaping strategy based on file names.
     *
     * This strategy sets the HTML as the default autoescaping strategy,
     * but changes it based on the template name.
     *
     * Note that there is no runtime performance impact as the
     * default autoescaping strategy is set at compilation time.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class FileExtensionEscapingStrategy
    {
        /**
         * Guesses the best autoescaping strategy based on the file name.
         *
         * @param string $name The template name
         *
         * @return string|false The escaping strategy name to use or false to disable
         */
        public static function guess($name)
        {
        }
    }
}
namespace WPML\Core {
    /**
     * Interface implemented by parser classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface Twig_ParserInterface
    {
        /**
         * Converts a token stream to a node tree.
         *
         * @return ModuleNode
         *
         * @throws SyntaxError When the token stream is syntactically or semantically wrong
         */
        public function parse(\WPML\Core\Twig\TokenStream $stream);
    }
}
namespace WPML\Core\Twig {
    /**
     * Default parser implementation.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Parser implements \WPML\Core\Twig_ParserInterface
    {
        protected $stack = [];
        protected $stream;
        protected $parent;
        protected $handlers;
        protected $visitors;
        protected $expressionParser;
        protected $blocks;
        protected $blockStack;
        protected $macros;
        protected $env;
        protected $reservedMacroNames;
        protected $importedSymbols;
        protected $traits;
        protected $embeddedTemplates = [];
        public function __construct(\WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getEnvironment()
        {
        }
        public function getVarName()
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0). Use $parser->getStream()->getSourceContext()->getPath() instead.
         */
        public function getFilename()
        {
        }
        public function parse(\WPML\Core\Twig\TokenStream $stream, $test = null, $dropNeedle = \false)
        {
        }
        public function subparse($test, $dropNeedle = \false)
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function addHandler($name, $class)
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function addNodeVisitor(\WPML\Core\Twig\NodeVisitor\NodeVisitorInterface $visitor)
        {
        }
        public function getBlockStack()
        {
        }
        public function peekBlockStack()
        {
        }
        public function popBlockStack()
        {
        }
        public function pushBlockStack($name)
        {
        }
        public function hasBlock($name)
        {
        }
        public function getBlock($name)
        {
        }
        public function setBlock($name, \WPML\Core\Twig\Node\BlockNode $value)
        {
        }
        public function hasMacro($name)
        {
        }
        public function setMacro($name, \WPML\Core\Twig\Node\MacroNode $node)
        {
        }
        public function isReservedMacroName($name)
        {
        }
        public function addTrait($trait)
        {
        }
        public function hasTraits()
        {
        }
        public function embedTemplate(\WPML\Core\Twig\Node\ModuleNode $template)
        {
        }
        public function addImportedSymbol($type, $alias, $name = null, \WPML\Core\Twig\Node\Expression\AbstractExpression $node = null)
        {
        }
        public function getImportedSymbol($type, $alias)
        {
        }
        public function isMainScope()
        {
        }
        public function pushLocalScope()
        {
        }
        public function popLocalScope()
        {
        }
        /**
         * @return ExpressionParser
         */
        public function getExpressionParser()
        {
        }
        public function getParent()
        {
        }
        public function setParent($parent)
        {
        }
        /**
         * @return TokenStream
         */
        public function getStream()
        {
        }
        /**
         * @return Token
         */
        public function getCurrentToken()
        {
        }
        protected function filterBodyNodes(\WPML\Core\Twig_NodeInterface $node)
        {
        }
    }
    /**
     * Represents a template test.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TwigTest
    {
        protected $name;
        protected $callable;
        protected $options;
        public function __construct($name, $callable, array $options = [])
        {
        }
        public function getName()
        {
        }
        public function getCallable()
        {
        }
        public function getNodeClass()
        {
        }
        public function isVariadic()
        {
        }
        public function isDeprecated()
        {
        }
        public function getDeprecatedVersion()
        {
        }
        public function getAlternative()
        {
        }
        public function setArguments($arguments)
        {
        }
        public function getArguments()
        {
        }
    }
}
namespace WPML\Core\Twig\Profiler\Node {
    /**
     * Represents a profile enter node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EnterProfileNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($extensionName, $type, $name, $varName)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a profile leave node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class LeaveProfileNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($varName)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Profiler {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class Profile implements \IteratorAggregate, \Serializable
    {
        const ROOT = 'ROOT';
        const BLOCK = 'block';
        const TEMPLATE = 'template';
        const MACRO = 'macro';
        public function __construct($template = 'main', $type = self::ROOT, $name = 'main')
        {
        }
        public function getTemplate()
        {
        }
        public function getType()
        {
        }
        public function getName()
        {
        }
        public function isRoot()
        {
        }
        public function isTemplate()
        {
        }
        public function isBlock()
        {
        }
        public function isMacro()
        {
        }
        public function getProfiles()
        {
        }
        public function addProfile(self $profile)
        {
        }
        /**
         * Returns the duration in microseconds.
         *
         * @return float
         */
        public function getDuration()
        {
        }
        /**
         * Returns the memory usage in bytes.
         *
         * @return int
         */
        public function getMemoryUsage()
        {
        }
        /**
         * Returns the peak memory usage in bytes.
         *
         * @return int
         */
        public function getPeakMemoryUsage()
        {
        }
        /**
         * Starts the profiling.
         */
        public function enter()
        {
        }
        /**
         * Stops the profiling.
         */
        public function leave()
        {
        }
        public function reset()
        {
        }
        public function getIterator()
        {
        }
        public function serialize()
        {
        }
        public function unserialize($data)
        {
        }
        /**
         * @internal
         */
        public function __serialize()
        {
        }
        /**
         * @internal
         */
        public function __unserialize(array $data)
        {
        }
    }
}
namespace WPML\Core\Twig\Profiler\Dumper {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class BaseDumper
    {
        public function dump(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
        protected abstract function formatTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix);
        protected abstract function formatNonTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix);
        protected abstract function formatTime(\WPML\Core\Twig\Profiler\Profile $profile, $percent);
    }
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class BlackfireDumper
    {
        public function dump(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
    }
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class TextDumper extends \WPML\Core\Twig\Profiler\Dumper\BaseDumper
    {
        protected function formatTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix)
        {
        }
        protected function formatNonTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix)
        {
        }
        protected function formatTime(\WPML\Core\Twig\Profiler\Profile $profile, $percent)
        {
        }
    }
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class HtmlDumper extends \WPML\Core\Twig\Profiler\Dumper\BaseDumper
    {
        public function dump(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
        protected function formatTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix)
        {
        }
        protected function formatNonTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix)
        {
        }
        protected function formatTime(\WPML\Core\Twig\Profiler\Profile $profile, $percent)
        {
        }
    }
}
namespace WPML\Core\Twig\NodeVisitor {
    /**
     * Interface for node visitor classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface NodeVisitorInterface
    {
        /**
         * Called before child nodes are visited.
         *
         * @return \Twig_NodeInterface The modified node
         */
        public function enterNode(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env);
        /**
         * Called after child nodes are visited.
         *
         * @return \Twig_NodeInterface|false|null The modified node or null if the node must be removed
         */
        public function leaveNode(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env);
        /**
         * Returns the priority for this visitor.
         *
         * Priority should be between -10 and 10 (0 is the default).
         *
         * @return int The priority level
         */
        public function getPriority();
    }
    /**
     * Used to make node visitors compatible with Twig 1.x and 2.x.
     *
     * To be removed in Twig 3.1.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class AbstractNodeVisitor implements \WPML\Core\Twig\NodeVisitor\NodeVisitorInterface
    {
        public final function enterNode(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        public final function leaveNode(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * Called before child nodes are visited.
         *
         * @return Node The modified node
         */
        protected abstract function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env);
        /**
         * Called after child nodes are visited.
         *
         * @return Node|false|null The modified node or null if the node must be removed
         */
        protected abstract function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env);
    }
}
namespace WPML\Core\Twig\Profiler\NodeVisitor {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class ProfilerNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
        public function __construct($extensionName)
        {
        }
        protected function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        public function getPriority()
        {
        }
    }
}
namespace WPML\Core\Twig\Error {
    /**
     * \Exception thrown when a syntax error occurs during lexing or parsing of a template.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SyntaxError extends \WPML\Core\Twig\Error\Error
    {
        /**
         * Tweaks the error message to include suggestions.
         *
         * @param string $name  The original name of the item that does not exist
         * @param array  $items An array of possible items
         */
        public function addSuggestions($name, array $items)
        {
        }
        /**
         * @internal
         *
         * To be merged with the addSuggestions() method in 2.0.
         */
        public static function computeAlternatives($name, $items)
        {
        }
    }
    /**
     * Exception thrown when an error occurs at runtime.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class RuntimeError extends \WPML\Core\Twig\Error\Error
    {
    }
    /**
     * Exception thrown when an error occurs during template loading.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class LoaderError extends \WPML\Core\Twig\Error\Error
    {
    }
}
namespace WPML\Core\Twig {
    /**
     * Represents a template filter.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TwigFilter
    {
        protected $name;
        protected $callable;
        protected $options;
        protected $arguments = [];
        public function __construct($name, $callable, array $options = [])
        {
        }
        public function getName()
        {
        }
        public function getCallable()
        {
        }
        public function getNodeClass()
        {
        }
        public function setArguments($arguments)
        {
        }
        public function getArguments()
        {
        }
        public function needsEnvironment()
        {
        }
        public function needsContext()
        {
        }
        public function getSafe(\WPML\Core\Twig\Node\Node $filterArgs)
        {
        }
        public function getPreservesSafety()
        {
        }
        public function getPreEscape()
        {
        }
        public function isVariadic()
        {
        }
        public function isDeprecated()
        {
        }
        public function getDeprecatedVersion()
        {
        }
        public function getAlternative()
        {
        }
    }
    /**
     * Represents a Token.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class Token
    {
        protected $value;
        protected $type;
        protected $lineno;
        const EOF_TYPE = -1;
        const TEXT_TYPE = 0;
        const BLOCK_START_TYPE = 1;
        const VAR_START_TYPE = 2;
        const BLOCK_END_TYPE = 3;
        const VAR_END_TYPE = 4;
        const NAME_TYPE = 5;
        const NUMBER_TYPE = 6;
        const STRING_TYPE = 7;
        const OPERATOR_TYPE = 8;
        const PUNCTUATION_TYPE = 9;
        const INTERPOLATION_START_TYPE = 10;
        const INTERPOLATION_END_TYPE = 11;
        const ARROW_TYPE = 12;
        /**
         * @param int    $type   The type of the token
         * @param string $value  The token value
         * @param int    $lineno The line position in the source
         */
        public function __construct($type, $value, $lineno)
        {
        }
        public function __toString()
        {
        }
        /**
         * Tests the current token for a type and/or a value.
         *
         * Parameters may be:
         *  * just type
         *  * type and value (or array of possible values)
         *  * just value (or array of possible values) (NAME_TYPE is used as type)
         *
         * @param array|string|int  $type   The type to test
         * @param array|string|null $values The token value
         *
         * @return bool
         */
        public function test($type, $values = null)
        {
        }
        /**
         * @return int
         */
        public function getLine()
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * Returns the constant representation (internal) of a given type.
         *
         * @param int  $type  The type as an integer
         * @param bool $short Whether to return a short representation or not
         *
         * @return string The string representation
         */
        public static function typeToString($type, $short = \false)
        {
        }
        /**
         * Returns the English representation of a given type.
         *
         * @param int $type The type as an integer
         *
         * @return string The string representation
         */
        public static function typeToEnglish($type)
        {
        }
    }
}
namespace WPML\Core\Twig\NodeVisitor {
    /**
     * Tries to optimize the AST.
     *
     * This visitor is always the last registered one.
     *
     * You can configure which optimizations you want to activate via the
     * optimizer mode.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class OptimizerNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
        const OPTIMIZE_ALL = -1;
        const OPTIMIZE_NONE = 0;
        const OPTIMIZE_FOR = 2;
        const OPTIMIZE_RAW_FILTER = 4;
        const OPTIMIZE_VAR_ACCESS = 8;
        protected $loops = [];
        protected $loopsTargets = [];
        protected $optimizers;
        protected $prependedNodes = [];
        protected $inABody = \false;
        /**
         * @param int $optimizers The optimizer mode
         */
        public function __construct($optimizers = -1)
        {
        }
        protected function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function optimizeVariables(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * Optimizes print nodes.
         *
         * It replaces:
         *
         *   * "echo $this->render(Parent)Block()" with "$this->display(Parent)Block()"
         *
         * @return \Twig_NodeInterface
         */
        protected function optimizePrintNode(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * Removes "raw" filters.
         *
         * @return \Twig_NodeInterface
         */
        protected function optimizeRawFilter(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * Optimizes "for" tag by removing the "loop" variable creation whenever possible.
         */
        protected function enterOptimizeFor(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * Optimizes "for" tag by removing the "loop" variable creation whenever possible.
         */
        protected function leaveOptimizeFor(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function addLoopToCurrent()
        {
        }
        protected function addLoopToAll()
        {
        }
        public function getPriority()
        {
        }
    }
    /**
     * @final
     */
    class SafeAnalysisNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
        protected $data = [];
        protected $safeVars = [];
        public function setSafeVars($safeVars)
        {
        }
        public function getSafe(\WPML\Core\Twig_NodeInterface $node)
        {
        }
        protected function setSafe(\WPML\Core\Twig_NodeInterface $node, array $safe)
        {
        }
        protected function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function intersectSafe(array $a = null, array $b = null)
        {
        }
        public function getPriority()
        {
        }
    }
    /**
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SandboxNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
        protected $inAModule = \false;
        protected $tags;
        protected $filters;
        protected $functions;
        protected function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        public function getPriority()
        {
        }
    }
    /**
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EscaperNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
        protected $statusStack = [];
        protected $blocks = [];
        protected $safeAnalysis;
        protected $traverser;
        protected $defaultStrategy = \false;
        protected $safeVars = [];
        public function __construct()
        {
        }
        protected function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function escapePrintNode(\WPML\Core\Twig\Node\PrintNode $node, \WPML\Core\Twig\Environment $env, $type)
        {
        }
        protected function preEscapeFilterNode(\WPML\Core\Twig\Node\Expression\FilterExpression $filter, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function isSafeFor($type, \WPML\Core\Twig_NodeInterface $expression, $env)
        {
        }
        protected function needEscaping(\WPML\Core\Twig\Environment $env)
        {
        }
        protected function getEscaperFilter($type, \WPML\Core\Twig_NodeInterface $node)
        {
        }
        public function getPriority()
        {
        }
    }
}
namespace WPML\Core {
    /**
     * Interface implemented by lexer classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface Twig_LexerInterface
    {
        /**
         * Tokenizes a source code.
         *
         * @param string|Source $code The source code
         * @param string        $name A unique identifier for the source code
         *
         * @return TokenStream
         *
         * @throws SyntaxError When the code is syntactically wrong
         */
        public function tokenize($code, $name = null);
    }
}
namespace WPML\Core\Twig {
    /**
     * Lexes a template string.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Lexer implements \WPML\Core\Twig_LexerInterface
    {
        protected $tokens;
        protected $code;
        protected $cursor;
        protected $lineno;
        protected $end;
        protected $state;
        protected $states;
        protected $brackets;
        protected $env;
        // to be renamed to $name in 2.0 (where it is private)
        protected $filename;
        protected $options;
        protected $regexes;
        protected $position;
        protected $positions;
        protected $currentVarBlockLine;
        const STATE_DATA = 0;
        const STATE_BLOCK = 1;
        const STATE_VAR = 2;
        const STATE_STRING = 3;
        const STATE_INTERPOLATION = 4;
        const REGEX_NAME = '/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/A';
        const REGEX_NUMBER = '/[0-9]+(?:\\.[0-9]+)?([Ee][\\+\\-][0-9]+)?/A';
        const REGEX_STRING = '/"([^#"\\\\]*(?:\\\\.[^#"\\\\]*)*)"|\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'/As';
        const REGEX_DQ_STRING_DELIM = '/"/A';
        const REGEX_DQ_STRING_PART = '/[^#"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#"\\\\]*)*/As';
        const PUNCTUATION = '()[]{}?:.,|';
        public function __construct(\WPML\Core\Twig\Environment $env, array $options = [])
        {
        }
        public function tokenize($code, $name = null)
        {
        }
        protected function lexData()
        {
        }
        protected function lexBlock()
        {
        }
        protected function lexVar()
        {
        }
        protected function lexExpression()
        {
        }
        protected function lexRawData($tag)
        {
        }
        protected function lexComment()
        {
        }
        protected function lexString()
        {
        }
        protected function lexInterpolation()
        {
        }
        protected function pushToken($type, $value = '')
        {
        }
        protected function moveCursor($text)
        {
        }
        protected function getOperatorRegex()
        {
        }
        protected function pushState($state)
        {
        }
        protected function popState()
        {
        }
    }
}
namespace WPML\Core\Twig\TokenParser {
    /**
     * Interface implemented by token parsers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface TokenParserInterface
    {
        /**
         * Sets the parser associated with this token parser.
         */
        public function setParser(\WPML\Core\Twig\Parser $parser);
        /**
         * Parses a token and returns a node.
         *
         * @return \Twig_NodeInterface
         *
         * @throws SyntaxError
         */
        public function parse(\WPML\Core\Twig\Token $token);
        /**
         * Gets the tag name associated with this token parser.
         *
         * @return string The tag name
         */
        public function getTag();
    }
    /**
     * Base class for all token parsers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class AbstractTokenParser implements \WPML\Core\Twig\TokenParser\TokenParserInterface
    {
        /**
         * @var Parser
         */
        protected $parser;
        public function setParser(\WPML\Core\Twig\Parser $parser)
        {
        }
    }
    /**
     * Defines a macro.
     *
     *   {% macro input(name, value, type, size) %}
     *      <input type="{{ type|default('text') }}" name="{{ name }}" value="{{ value|e }}" size="{{ size|default(20) }}" />
     *   {% endmacro %}
     *
     * @final
     */
    class MacroTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Evaluates an expression, discarding the returned value.
     *
     * @final
     */
    class DoTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Tests a condition.
     *
     *   {% if users %}
     *    <ul>
     *      {% for user in users %}
     *        <li>{{ user.username|e }}</li>
     *      {% endfor %}
     *    </ul>
     *   {% endif %}
     *
     * @final
     */
    class IfTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideIfFork(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideIfEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Imports macros.
     *
     *   {% from 'forms.html' import forms %}
     *
     * @final
     */
    class FromTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Flushes the output to the client.
     *
     * @see flush()
     *
     * @final
     */
    class FlushTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Loops over each item of a sequence.
     *
     *   <ul>
     *    {% for user in users %}
     *      <li>{{ user.username|e }}</li>
     *    {% endfor %}
     *   </ul>
     *
     * @final
     */
    class ForTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideForFork(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideForEnd(\WPML\Core\Twig\Token $token)
        {
        }
        // the loop variable cannot be used in the condition
        protected function checkLoopUsageCondition(\WPML\Core\Twig\TokenStream $stream, \WPML\Core\Twig_NodeInterface $node)
        {
        }
        // check usage of non-defined loop-items
        // it does not catch all problems (for instance when a for is included into another or when the variable is used in an include)
        protected function checkLoopUsageBody(\WPML\Core\Twig\TokenStream $stream, \WPML\Core\Twig_NodeInterface $node)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Applies filters on a section of a template.
     *
     *   {% apply upper %}
     *      This text becomes uppercase
     *   {% endapplys %}
     */
    final class ApplyTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideApplyEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Deprecates a section of a template.
     *
     *    {% deprecated 'The "base.twig" template is deprecated, use "layout.twig" instead.' %}
     *    {% extends 'layout.html.twig' %}
     *
     * @author Yonel Ceruto <yonelceruto@gmail.com>
     *
     * @final
     */
    class DeprecatedTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Defines a variable.
     *
     *  {% set foo = 'foo' %}
     *  {% set foo = [1, 2] %}
     *  {% set foo = {'foo': 'bar'} %}
     *  {% set foo = 'foo' ~ 'bar' %}
     *  {% set foo, bar = 'foo', 'bar' %}
     *  {% set foo %}Some content{% endset %}
     *
     * @final
     */
    class SetTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Imports blocks defined in another template into the current template.
     *
     *    {% extends "base.html" %}
     *
     *    {% use "blocks.html" %}
     *
     *    {% block title %}{% endblock %}
     *    {% block content %}{% endblock %}
     *
     * @see https://twig.symfony.com/doc/templates.html#horizontal-reuse for details.
     *
     * @final
     */
    class UseTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Creates a nested scope.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class WithTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideWithEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Imports macros.
     *
     *   {% import 'forms.html' as forms %}
     *
     * @final
     */
    class ImportTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Includes a template.
     *
     *   {% include 'header.html' %}
     *     Body
     *   {% include 'footer.html' %}
     */
    class IncludeTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        protected function parseArguments()
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Embeds a template.
     *
     * @final
     */
    class EmbedTokenParser extends \WPML\Core\Twig\TokenParser\IncludeTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Filters a section of a template by applying filters.
     *
     *   {% filter upper %}
     *      This text becomes uppercase
     *   {% endfilter %}
     *
     * @final
     */
    class FilterTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Extends a template by another one.
     *
     *  {% extends "base.html" %}
     *
     * @final
     */
    class ExtendsTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Marks a section of a template as untrusted code that must be evaluated in the sandbox mode.
     *
     *    {% sandbox %}
     *        {% include 'user.html' %}
     *    {% endsandbox %}
     *
     * @see https://twig.symfony.com/doc/api.html#sandbox-extension for details
     *
     * @final
     */
    class SandboxTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Marks a section of a template to be escaped or not.
     *
     *   {% autoescape true %}
     *     Everything will be automatically escaped in this block
     *   {% endautoescape %}
     *
     *   {% autoescape false %}
     *     Everything will be outputed as is in this block
     *   {% endautoescape %}
     *
     *   {% autoescape true js %}
     *     Everything will be automatically escaped in this block
     *     using the js escaping strategy
     *   {% endautoescape %}
     *
     * @final
     */
    class AutoEscapeTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Remove whitespaces between HTML tags.
     *
     *   {% spaceless %}
     *      <div>
     *          <strong>foo</strong>
     *      </div>
     *   {% endspaceless %}
     *   {# output will be <div><strong>foo</strong></div> #}
     *
     * @final
     */
    class SpacelessTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideSpacelessEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Marks a section of a template as being reusable.
     *
     *  {% block head %}
     *    <link rel="stylesheet" href="style.css" />
     *    <title>{% block title %}{% endblock %} - My Webpage</title>
     *  {% endblock %}
     *
     * @final
     */
    class BlockTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
}
namespace WPML\Core\Twig\Test {
    abstract class NodeTestCase extends \WPML\Core\PHPUnit\Framework\TestCase
    {
        public abstract function getTests();
        /**
         * @dataProvider getTests
         */
        public function testCompile($node, $source, $environment = null, $isPattern = \false)
        {
        }
        public function assertNodeCompilation($source, \WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $environment = null, $isPattern = \false)
        {
        }
        protected function getCompiler(\WPML\Core\Twig\Environment $environment = null)
        {
        }
        protected function getEnvironment()
        {
        }
        protected function getVariableGetter($name, $line = \false)
        {
        }
        protected function getAttributeGetter()
        {
        }
    }
    /**
     * Integration test helper.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Karma Dordrak <drak@zikula.org>
     */
    abstract class IntegrationTestCase extends \WPML\Core\PHPUnit\Framework\TestCase
    {
        /**
         * @return string
         */
        protected abstract function getFixturesDir();
        /**
         * @return RuntimeLoaderInterface[]
         */
        protected function getRuntimeLoaders()
        {
        }
        /**
         * @return ExtensionInterface[]
         */
        protected function getExtensions()
        {
        }
        /**
         * @return TwigFilter[]
         */
        protected function getTwigFilters()
        {
        }
        /**
         * @return TwigFunction[]
         */
        protected function getTwigFunctions()
        {
        }
        /**
         * @return TwigTest[]
         */
        protected function getTwigTests()
        {
        }
        /**
         * @dataProvider getTests
         */
        public function testIntegration($file, $message, $condition, $templates, $exception, $outputs)
        {
        }
        /**
         * @dataProvider getLegacyTests
         * @group legacy
         */
        public function testLegacyIntegration($file, $message, $condition, $templates, $exception, $outputs)
        {
        }
        public function getTests($name, $legacyTests = \false)
        {
        }
        public function getLegacyTests()
        {
        }
        protected function doIntegrationTest($file, $message, $condition, $templates, $exception, $outputs)
        {
        }
        protected static function parseTemplates($test)
        {
        }
    }
}
namespace WPML\Core {
    /**
     * Interface implemented by all compiled templates.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface Twig_TemplateInterface
    {
        const ANY_CALL = 'any';
        const ARRAY_CALL = 'array';
        const METHOD_CALL = 'method';
        /**
         * Renders the template with the given context and returns it as string.
         *
         * @param array $context An array of parameters to pass to the template
         *
         * @return string The rendered template
         */
        public function render(array $context);
        /**
         * Displays the template with the given context.
         *
         * @param array $context An array of parameters to pass to the template
         * @param array $blocks  An array of blocks to pass to the template
         */
        public function display(array $context, array $blocks = []);
        /**
         * Returns the bound environment for this template.
         *
         * @return Environment
         */
        public function getEnvironment();
    }
}
namespace WPML\Core\Twig {
    /**
     * Default base class for compiled templates.
     *
     * This class is an implementation detail of how template compilation currently
     * works, which might change. It should never be used directly. Use $twig->load()
     * instead, which returns an instance of \Twig\TemplateWrapper.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    abstract class Template implements \WPML\Core\Twig_TemplateInterface
    {
        /**
         * @internal
         */
        protected static $cache = [];
        protected $parent;
        protected $parents = [];
        protected $env;
        protected $blocks = [];
        protected $traits = [];
        protected $sandbox;
        public function __construct(\WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * @internal this method will be removed in 2.0 and is only used internally to provide an upgrade path from 1.x to 2.0
         */
        public function __toString()
        {
        }
        /**
         * Returns the template name.
         *
         * @return string The template name
         */
        public abstract function getTemplateName();
        /**
         * Returns debug information about the template.
         *
         * @return array Debug information
         */
        public function getDebugInfo()
        {
        }
        /**
         * Returns the template source code.
         *
         * @return string The template source code
         *
         * @deprecated since 1.27 (to be removed in 2.0). Use getSourceContext() instead
         */
        public function getSource()
        {
        }
        /**
         * Returns information about the original template source code.
         *
         * @return Source
         */
        public function getSourceContext()
        {
        }
        /**
         * @deprecated since 1.20 (to be removed in 2.0)
         */
        public function getEnvironment()
        {
        }
        /**
         * Returns the parent template.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param array $context
         *
         * @return \Twig_TemplateInterface|TemplateWrapper|false The parent template or false if there is no parent
         *
         * @internal
         */
        public function getParent(array $context)
        {
        }
        protected function doGetParent(array $context)
        {
        }
        public function isTraitable()
        {
        }
        /**
         * Displays a parent block.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param string $name    The block name to display from the parent
         * @param array  $context The context
         * @param array  $blocks  The current set of blocks
         */
        public function displayParentBlock($name, array $context, array $blocks = [])
        {
        }
        /**
         * Displays a block.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param string $name      The block name to display
         * @param array  $context   The context
         * @param array  $blocks    The current set of blocks
         * @param bool   $useBlocks Whether to use the current set of blocks
         */
        public function displayBlock($name, array $context, array $blocks = [], $useBlocks = \true)
        {
        }
        /**
         * Renders a parent block.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param string $name    The block name to render from the parent
         * @param array  $context The context
         * @param array  $blocks  The current set of blocks
         *
         * @return string The rendered block
         */
        public function renderParentBlock($name, array $context, array $blocks = [])
        {
        }
        /**
         * Renders a block.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param string $name      The block name to render
         * @param array  $context   The context
         * @param array  $blocks    The current set of blocks
         * @param bool   $useBlocks Whether to use the current set of blocks
         *
         * @return string The rendered block
         */
        public function renderBlock($name, array $context, array $blocks = [], $useBlocks = \true)
        {
        }
        /**
         * Returns whether a block exists or not in the current context of the template.
         *
         * This method checks blocks defined in the current template
         * or defined in "used" traits or defined in parent templates.
         *
         * @param string $name    The block name
         * @param array  $context The context
         * @param array  $blocks  The current set of blocks
         *
         * @return bool true if the block exists, false otherwise
         */
        public function hasBlock($name, array $context = null, array $blocks = [])
        {
        }
        /**
         * Returns all block names in the current context of the template.
         *
         * This method checks blocks defined in the current template
         * or defined in "used" traits or defined in parent templates.
         *
         * @param array $context The context
         * @param array $blocks  The current set of blocks
         *
         * @return array An array of block names
         */
        public function getBlockNames(array $context = null, array $blocks = [])
        {
        }
        /**
         * @return Template|TemplateWrapper
         */
        protected function loadTemplate($template, $templateName = null, $line = null, $index = null)
        {
        }
        /**
         * @internal
         *
         * @return Template
         */
        protected function unwrap()
        {
        }
        /**
         * Returns all blocks.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @return array An array of blocks
         */
        public function getBlocks()
        {
        }
        public function display(array $context, array $blocks = [])
        {
        }
        public function render(array $context)
        {
        }
        protected function displayWithErrorHandling(array $context, array $blocks = [])
        {
        }
        /**
         * Auto-generated method to display the template with the given context.
         *
         * @param array $context An array of parameters to pass to the template
         * @param array $blocks  An array of blocks to pass to the template
         */
        protected abstract function doDisplay(array $context, array $blocks = []);
        /**
         * Returns a variable from the context.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * This method should not be overridden in a sub-class as this is an
         * implementation detail that has been introduced to optimize variable
         * access for versions of PHP before 5.4. This is not a way to override
         * the way to get a variable value.
         *
         * @param array  $context           The context
         * @param string $item              The variable to return from the context
         * @param bool   $ignoreStrictCheck Whether to ignore the strict variable check or not
         *
         * @return mixed The content of the context variable
         *
         * @throws RuntimeError if the variable does not exist and Twig is running in strict mode
         *
         * @internal
         */
        protected final function getContext($context, $item, $ignoreStrictCheck = \false)
        {
        }
        /**
         * Returns the attribute value for a given array/object.
         *
         * @param mixed  $object            The object or array from where to get the item
         * @param mixed  $item              The item to get from the array or object
         * @param array  $arguments         An array of arguments to pass if the item is an object method
         * @param string $type              The type of attribute (@see \Twig\Template constants)
         * @param bool   $isDefinedTest     Whether this is only a defined check
         * @param bool   $ignoreStrictCheck Whether to ignore the strict attribute check or not
         *
         * @return mixed The attribute value, or a Boolean when $isDefinedTest is true, or null when the attribute is not set and $ignoreStrictCheck is true
         *
         * @throws RuntimeError if the attribute does not exist and Twig is running in strict mode and $isDefinedTest is false
         *
         * @internal
         */
        protected function getAttribute($object, $item, array $arguments = [], $type = self::ANY_CALL, $isDefinedTest = \false, $ignoreStrictCheck = \false)
        {
        }
    }
}
namespace WPML\Core {
    class Twig_SourceContextLoaderInterface extends \WPML\Core\Twig\Loader\SourceContextLoaderInterface
    {
    }
    class Twig_Sandbox_SecurityNotAllowedPropertyError extends \WPML\Core\Twig\Sandbox\SecurityNotAllowedPropertyError
    {
    }
    class Twig_Sandbox_SecurityNotAllowedMethodError extends \WPML\Core\Twig\Sandbox\SecurityNotAllowedMethodError
    {
    }
    class Twig_Sandbox_SecurityNotAllowedTagError extends \WPML\Core\Twig\Sandbox\SecurityNotAllowedTagError
    {
    }
    class Twig_Sandbox_SecurityNotAllowedFunctionError extends \WPML\Core\Twig\Sandbox\SecurityNotAllowedFunctionError
    {
    }
    class Twig_Sandbox_SecurityNotAllowedFilterError extends \WPML\Core\Twig\Sandbox\SecurityNotAllowedFilterError
    {
    }
    class Twig_Sandbox_SecurityPolicy extends \WPML\Core\Twig\Sandbox\SecurityPolicy
    {
    }
    class Twig_Sandbox_SecurityError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
    }
    class Twig_Sandbox_SecurityPolicyInterface extends \WPML\Core\Twig\Sandbox\SecurityPolicyInterface
    {
    }
    class Twig_Node extends \WPML\Core\Twig\Node\Node
    {
    }
    class Twig_Loader_Array extends \WPML\Core\Twig\Loader\ArrayLoader
    {
    }
    /**
     * Loads a template from a string.
     *
     * This loader should NEVER be used. It only exists for Twig internal purposes.
     *
     * When using this loader with a cache mechanism, you should know that a new cache
     * key is generated each time a template content "changes" (the cache key being the
     * source code of the template). If you don't want to see your cache grows out of
     * control, you need to take care of clearing the old cache file by yourself.
     *
     * @deprecated since 1.18.1 (to be removed in 2.0)
     *
     * @internal
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Loader_String implements \WPML\Core\Twig\Loader\LoaderInterface, \WPML\Core\Twig\Loader\ExistsLoaderInterface, \WPML\Core\Twig\Loader\SourceContextLoaderInterface
    {
        public function getSource($name)
        {
        }
        public function getSourceContext($name)
        {
        }
        public function exists($name)
        {
        }
        public function getCacheKey($name)
        {
        }
        public function isFresh($name, $time)
        {
        }
    }
    class Twig_Loader_Filesystem extends \WPML\Core\Twig\Loader\FilesystemLoader
    {
    }
    class Twig_Loader_Chain extends \WPML\Core\Twig\Loader\ChainLoader
    {
    }
    class Twig_Node_Flush extends \WPML\Core\Twig\Node\FlushNode
    {
    }
    class Twig_Node_Macro extends \WPML\Core\Twig\Node\MacroNode
    {
    }
    class Twig_Node_ForLoop extends \WPML\Core\Twig\Node\ForLoopNode
    {
    }
    class Twig_Node_Print extends \WPML\Core\Twig\Node\PrintNode
    {
    }
    class Twig_Node_BlockReference extends \WPML\Core\Twig\Node\BlockReferenceNode
    {
    }
    class Twig_Node_For extends \WPML\Core\Twig\Node\ForNode
    {
    }
    class Twig_Node_Body extends \WPML\Core\Twig\Node\BodyNode
    {
    }
    class Twig_Node_Text extends \WPML\Core\Twig\Node\TextNode
    {
    }
    class Twig_Node_SandboxedPrint extends \WPML\Core\Twig\Node\SandboxedPrintNode
    {
    }
    class Twig_Node_Sandbox extends \WPML\Core\Twig\Node\SandboxNode
    {
    }
    class Twig_Node_Do extends \WPML\Core\Twig\Node\DoNode
    {
    }
    class Twig_Node_Set extends \WPML\Core\Twig\Node\SetNode
    {
    }
    class Twig_Node_Expression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
    }
    class Twig_Node_Embed extends \WPML\Core\Twig\Node\EmbedNode
    {
    }
    class Twig_Node_SetTemp extends \WPML\Core\Twig\Node\SetTempNode
    {
    }
    class Twig_Node_Spaceless extends \WPML\Core\Twig\Node\SpacelessNode
    {
    }
    class Twig_Node_Expression_Name extends \WPML\Core\Twig\Node\Expression\NameExpression
    {
    }
    class Twig_Node_Expression_Array extends \WPML\Core\Twig\Node\Expression\ArrayExpression
    {
    }
    class Twig_Node_Expression_Function extends \WPML\Core\Twig\Node\Expression\FunctionExpression
    {
    }
    class Twig_Node_Expression_Conditional extends \WPML\Core\Twig\Node\Expression\ConditionalExpression
    {
    }
    class Twig_Node_Expression_Filter extends \WPML\Core\Twig\Node\Expression\FilterExpression
    {
    }
    class Twig_Node_Expression_BlockReference extends \WPML\Core\Twig\Node\Expression\BlockReferenceExpression
    {
    }
    class Twig_Node_Expression_Binary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
    }
    class Twig_Node_Expression_TempName extends \WPML\Core\Twig\Node\Expression\TempNameExpression
    {
    }
    class Twig_Node_Expression_Unary extends \WPML\Core\Twig\Node\Expression\Unary\AbstractUnary
    {
    }
    class Twig_Node_Expression_GetAttr extends \WPML\Core\Twig\Node\Expression\GetAttrExpression
    {
    }
    class Twig_Node_Expression_Parent extends \WPML\Core\Twig\Node\Expression\ParentExpression
    {
    }
    class Twig_Node_Expression_Filter_Default extends \WPML\Core\Twig\Node\Expression\Filter\DefaultFilter
    {
    }
    class Twig_Node_Expression_Binary_BitwiseAnd extends \WPML\Core\Twig\Node\Expression\Binary\BitwiseAndBinary
    {
    }
    class Twig_Node_Expression_Binary_EndsWith extends \WPML\Core\Twig\Node\Expression\Binary\EndsWithBinary
    {
    }
    class Twig_Node_Expression_Binary_NotEqual extends \WPML\Core\Twig\Node\Expression\Binary\NotEqualBinary
    {
    }
    class Twig_Node_Expression_Binary_Sub extends \WPML\Core\Twig\Node\Expression\Binary\SubBinary
    {
    }
    class Twig_Node_Expression_Binary_Mul extends \WPML\Core\Twig\Node\Expression\Binary\MulBinary
    {
    }
    class Twig_Node_Expression_Binary_LessEqual extends \WPML\Core\Twig\Node\Expression\Binary\LessEqualBinary
    {
    }
    class Twig_Node_Expression_Binary_Matches extends \WPML\Core\Twig\Node\Expression\Binary\MatchesBinary
    {
    }
    class Twig_Node_Expression_Binary_Less extends \WPML\Core\Twig\Node\Expression\Binary\LessBinary
    {
    }
    class Twig_Node_Expression_Binary_Mod extends \WPML\Core\Twig\Node\Expression\Binary\ModBinary
    {
    }
    class Twig_Node_Expression_Binary_BitwiseOr extends \WPML\Core\Twig\Node\Expression\Binary\BitwiseOrBinary
    {
    }
    class Twig_Node_Expression_Binary_In extends \WPML\Core\Twig\Node\Expression\Binary\InBinary
    {
    }
    class Twig_Node_Expression_Binary_Add extends \WPML\Core\Twig\Node\Expression\Binary\AddBinary
    {
    }
    class Twig_Node_Expression_Binary_Or extends \WPML\Core\Twig\Node\Expression\Binary\OrBinary
    {
    }
    class Twig_Node_Expression_Binary_GreaterEqual extends \WPML\Core\Twig\Node\Expression\Binary\GreaterEqualBinary
    {
    }
    class Twig_Node_Expression_Binary_Greater extends \WPML\Core\Twig\Node\Expression\Binary\GreaterBinary
    {
    }
    class Twig_Node_Expression_Binary_Range extends \WPML\Core\Twig\Node\Expression\Binary\RangeBinary
    {
    }
    class Twig_Node_Expression_Binary_Power extends \WPML\Core\Twig\Node\Expression\Binary\PowerBinary
    {
    }
    class Twig_Node_Expression_Binary_FloorDiv extends \WPML\Core\Twig\Node\Expression\Binary\FloorDivBinary
    {
    }
    class Twig_Node_Expression_Binary_NotIn extends \WPML\Core\Twig\Node\Expression\Binary\NotInBinary
    {
    }
    class Twig_Node_Expression_Binary_StartsWith extends \WPML\Core\Twig\Node\Expression\Binary\StartsWithBinary
    {
    }
    class Twig_Node_Expression_Binary_Concat extends \WPML\Core\Twig\Node\Expression\Binary\ConcatBinary
    {
    }
    class Twig_Node_Expression_Binary_And extends \WPML\Core\Twig\Node\Expression\Binary\AndBinary
    {
    }
    class Twig_Node_Expression_Binary_Equal extends \WPML\Core\Twig\Node\Expression\Binary\EqualBinary
    {
    }
    class Twig_Node_Expression_Binary_Div extends \WPML\Core\Twig\Node\Expression\Binary\DivBinary
    {
    }
    class Twig_Node_Expression_Binary_BitwiseXor extends \WPML\Core\Twig\Node\Expression\Binary\BitwiseXorBinary
    {
    }
    class Twig_Node_Expression_Constant extends \WPML\Core\Twig\Node\Expression\ConstantExpression
    {
    }
    class Twig_Node_Expression_AssignName extends \WPML\Core\Twig\Node\Expression\AssignNameExpression
    {
    }
    class Twig_Node_Expression_Unary_Neg extends \WPML\Core\Twig\Node\Expression\Unary\NegUnary
    {
    }
    class Twig_Node_Expression_Unary_Not extends \WPML\Core\Twig\Node\Expression\Unary\NotUnary
    {
    }
    class Twig_Node_Expression_Unary_Pos extends \WPML\Core\Twig\Node\Expression\Unary\PosUnary
    {
    }
    class Twig_Node_Expression_MethodCall extends \WPML\Core\Twig\Node\Expression\MethodCallExpression
    {
    }
    class Twig_Node_Expression_Test extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
    }
    class Twig_Node_Expression_NullCoalesce extends \WPML\Core\Twig\Node\Expression\NullCoalesceExpression
    {
    }
    /**
     * Represents an extension call node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.23 and will be removed in 2.0.
     */
    class Twig_Node_Expression_ExtensionReference extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct($name, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class Twig_Node_Expression_Test_Even extends \WPML\Core\Twig\Node\Expression\Test\EvenTest
    {
    }
    class Twig_Node_Expression_Test_Null extends \WPML\Core\Twig\Node\Expression\Test\NullTest
    {
    }
    class Twig_Node_Expression_Test_Divisibleby extends \WPML\Core\Twig\Node\Expression\Test\DivisiblebyTest
    {
    }
    class Twig_Node_Expression_Test_Constant extends \WPML\Core\Twig\Node\Expression\Test\ConstantTest
    {
    }
    class Twig_Node_Expression_Test_Odd extends \WPML\Core\Twig\Node\Expression\Test\OddTest
    {
    }
    class Twig_Node_Expression_Test_Sameas extends \WPML\Core\Twig\Node\Expression\Test\SameasTest
    {
    }
    class Twig_Node_Expression_Test_Defined extends \WPML\Core\Twig\Node\Expression\Test\DefinedTest
    {
    }
    class Twig_Node_Expression_Call extends \WPML\Core\Twig\Node\Expression\CallExpression
    {
    }
    class Twig_Node_With extends \WPML\Core\Twig\Node\WithNode
    {
    }
    class Twig_Node_Deprecated extends \WPML\Core\Twig\Node\DeprecatedNode
    {
    }
    class Twig_Node_If extends \WPML\Core\Twig\Node\IfNode
    {
    }
    class Twig_Node_AutoEscape extends \WPML\Core\Twig\Node\AutoEscapeNode
    {
    }
    class Twig_Node_Import extends \WPML\Core\Twig\Node\ImportNode
    {
    }
    class Twig_Node_Module extends \WPML\Core\Twig\Node\ModuleNode
    {
    }
    class Twig_Node_Block extends \WPML\Core\Twig\Node\BlockNode
    {
    }
    class Twig_Node_CheckSecurity extends \WPML\Core\Twig\Node\CheckSecurityNode
    {
    }
    class Twig_Node_Include extends \WPML\Core\Twig\Node\IncludeNode
    {
    }
    class Twig_TokenStream extends \WPML\Core\Twig\TokenStream
    {
    }
    class Twig_TemplateWrapper extends \WPML\Core\Twig\TemplateWrapper
    {
    }
    /**
     * Represents a template function.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_FunctionInterface
    {
        /**
         * Compiles a function.
         *
         * @return string The PHP code for the function
         */
        public function compile();
        public function needsEnvironment();
        public function needsContext();
        public function getSafe(\WPML\Core\Twig\Node\Node $filterArgs);
        public function setArguments($arguments);
        public function getArguments();
    }
    /*
     * This file is part of Twig.
     *
     * (c) Fabien Potencier
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */
    /**
     * Represents a callable template function.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_FunctionCallableInterface
    {
        public function getCallable();
    }
    /**
     * Represents a template function.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    abstract class Twig_Function implements \WPML\Core\Twig_FunctionInterface, \WPML\Core\Twig_FunctionCallableInterface
    {
        protected $options;
        protected $arguments = [];
        public function __construct(array $options = [])
        {
        }
        public function setArguments($arguments)
        {
        }
        public function getArguments()
        {
        }
        public function needsEnvironment()
        {
        }
        public function needsContext()
        {
        }
        public function getSafe(\WPML\Core\Twig\Node\Node $functionArgs)
        {
        }
        public function getCallable()
        {
        }
    }
    class Twig_Environment extends \WPML\Core\Twig\Environment
    {
    }
    class Twig_SimpleTest extends \WPML\Core\Twig\TwigTest
    {
    }
    /**
     * Represents a template filter.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_FilterInterface
    {
        /**
         * Compiles a filter.
         *
         * @return string The PHP code for the filter
         */
        public function compile();
        public function needsEnvironment();
        public function needsContext();
        public function getSafe(\WPML\Core\Twig\Node\Node $filterArgs);
        public function getPreservesSafety();
        public function getPreEscape();
        public function setArguments($arguments);
        public function getArguments();
    }
    /*
     * This file is part of Twig.
     *
     * (c) Fabien Potencier
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */
    /**
     * Represents a callable template filter.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_FilterCallableInterface
    {
        public function getCallable();
    }
    /**
     * Represents a template filter.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    abstract class Twig_Filter implements \WPML\Core\Twig_FilterInterface, \WPML\Core\Twig_FilterCallableInterface
    {
        protected $options;
        protected $arguments = [];
        public function __construct(array $options = [])
        {
        }
        public function setArguments($arguments)
        {
        }
        public function getArguments()
        {
        }
        public function needsEnvironment()
        {
        }
        public function needsContext()
        {
        }
        public function getSafe(\WPML\Core\Twig\Node\Node $filterArgs)
        {
        }
        public function getPreservesSafety()
        {
        }
        public function getPreEscape()
        {
        }
        public function getCallable()
        {
        }
    }
    class Twig_NodeTraverser extends \WPML\Core\Twig\NodeTraverser
    {
    }
    class Twig_Markup extends \WPML\Core\Twig\Markup
    {
    }
    class Twig_Extension_GlobalsInterface extends \WPML\Core\Twig\Extension\GlobalsInterface
    {
    }
    class Twig_Extension_Escaper extends \WPML\Core\Twig\Extension\EscaperExtension
    {
    }
    class Twig_Extension_Sandbox extends \WPML\Core\Twig\Extension\SandboxExtension
    {
    }
    class Twig_Extension_Profiler extends \WPML\Core\Twig\Extension\ProfilerExtension
    {
    }
    class Twig_Extension_Staging extends \WPML\Core\Twig\Extension\StagingExtension
    {
    }
    class Twig_Extension_Debug extends \WPML\Core\Twig\Extension\DebugExtension
    {
    }
    class Twig_Extension_StringLoader extends \WPML\Core\Twig\Extension\StringLoaderExtension
    {
    }
    class Twig_Extension_InitRuntimeInterface extends \WPML\Core\Twig\Extension\InitRuntimeInterface
    {
    }
    class Twig_Extension_Optimizer extends \WPML\Core\Twig\Extension\OptimizerExtension
    {
    }
    class Twig_Extension_Core extends \WPML\Core\Twig\Extension\CoreExtension
    {
    }
    class Twig_Compiler extends \WPML\Core\Twig\Compiler
    {
    }
    class Twig_Cache_Null extends \WPML\Core\Twig\Cache\NullCache
    {
    }
    class Twig_Cache_Filesystem extends \WPML\Core\Twig\Cache\FilesystemCache
    {
    }
    class Twig_RuntimeLoaderInterface extends \WPML\Core\Twig\RuntimeLoader\RuntimeLoaderInterface
    {
    }
    class Twig_BaseNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
    }
    class Twig_CacheInterface extends \WPML\Core\Twig\Cache\CacheInterface
    {
    }
    class Twig_Util_TemplateDirIterator extends \WPML\Core\Twig\Util\TemplateDirIterator
    {
    }
    class Twig_Util_DeprecationCollector extends \WPML\Core\Twig\Util\DeprecationCollector
    {
    }
    class Twig_SimpleFunction extends \WPML\Core\Twig\TwigFunction
    {
    }
    class Twig_ExpressionParser extends \WPML\Core\Twig\ExpressionParser
    {
    }
    /**
     * Represents a template filter as a node.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Filter_Node extends \WPML\Core\Twig_Filter
    {
        protected $class;
        public function __construct($class, array $options = [])
        {
        }
        public function getClass()
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a method template filter.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Filter_Method extends \WPML\Core\Twig_Filter
    {
        protected $extension;
        protected $method;
        public function __construct(\WPML\Core\Twig\Extension\ExtensionInterface $extension, $method, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a function template filter.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Filter_Function extends \WPML\Core\Twig_Filter
    {
        protected $function;
        public function __construct($function, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    class Twig_Source extends \WPML\Core\Twig\Source
    {
    }
    class Twig_FileExtensionEscapingStrategy extends \WPML\Core\Twig\FileExtensionEscapingStrategy
    {
    }
    class Twig_TokenParserInterface extends \WPML\Core\Twig\TokenParser\TokenParserInterface
    {
    }
    class Twig_Parser extends \WPML\Core\Twig\Parser
    {
    }
    /**
     * Autoloads Twig classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.21 and will be removed in 2.0. Use Composer instead. 2.0.
     */
    class Twig_Autoloader
    {
        /**
         * Registers Twig_Autoloader as an SPL autoloader.
         *
         * @param bool $prepend whether to prepend the autoloader or not
         */
        public static function register($prepend = \false)
        {
        }
        /**
         * Handles autoloading of classes.
         *
         * @param string $class a class name
         */
        public static function autoload($class)
        {
        }
    }
    class Twig_ExtensionInterface extends \WPML\Core\Twig\Extension\ExtensionInterface
    {
    }
    class Twig_Profiler_Node_EnterProfile extends \WPML\Core\Twig\Profiler\Node\EnterProfileNode
    {
    }
    class Twig_Profiler_Node_LeaveProfile extends \WPML\Core\Twig\Profiler\Node\LeaveProfileNode
    {
    }
    class Twig_Profiler_Profile extends \WPML\Core\Twig\Profiler\Profile
    {
    }
    class Twig_Profiler_Dumper_Html extends \WPML\Core\Twig\Profiler\Dumper\HtmlDumper
    {
    }
    class Twig_Profiler_Dumper_Text extends \WPML\Core\Twig\Profiler\Dumper\TextDumper
    {
    }
    class Twig_Profiler_Dumper_Base extends \WPML\Core\Twig\Profiler\Dumper\BaseDumper
    {
    }
    class Twig_Profiler_Dumper_Blackfire extends \WPML\Core\Twig\Profiler\Dumper\BlackfireDumper
    {
    }
    class Twig_Profiler_NodeVisitor_Profiler extends \WPML\Core\Twig\Profiler\NodeVisitor\ProfilerNodeVisitor
    {
    }
    class Twig_NodeCaptureInterface extends \WPML\Core\Twig\Node\NodeCaptureInterface
    {
    }
    class Twig_Error_Syntax extends \WPML\Core\Twig\Error\SyntaxError
    {
    }
    class Twig_Error_Loader extends \WPML\Core\Twig\Error\LoaderError
    {
    }
    class Twig_Error_Runtime extends \WPML\Core\Twig\Error\RuntimeError
    {
    }
    class Twig_SimpleFilter extends \WPML\Core\Twig\TwigFilter
    {
    }
    /*
     * This file is part of Twig.
     *
     * (c) Fabien Potencier
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */
    /**
     * Represents a callable template test.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_TestCallableInterface
    {
        public function getCallable();
    }
    interface Twig_LoaderInterface extends \WPML\Core\Twig\Loader\LoaderInterface
    {
    }
    /**
     * Represents a template function as a node.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Function_Node extends \WPML\Core\Twig_Function
    {
        protected $class;
        public function __construct($class, array $options = [])
        {
        }
        public function getClass()
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a method template function.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Function_Method extends \WPML\Core\Twig_Function
    {
        protected $extension;
        protected $method;
        public function __construct(\WPML\Core\Twig\Extension\ExtensionInterface $extension, $method, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a function template function.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Function_Function extends \WPML\Core\Twig_Function
    {
        protected $function;
        public function __construct($function, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    class Twig_NodeVisitorInterface extends \WPML\Core\Twig\NodeVisitor\NodeVisitorInterface
    {
    }
    /**
     * Interface implemented by token parser brokers.
     *
     * Token parser brokers allows to implement custom logic in the process of resolving a token parser for a given tag name.
     *
     * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_TokenParserBrokerInterface
    {
        /**
         * Gets a TokenParser suitable for a tag.
         *
         * @param string $tag A tag name
         *
         * @return TokenParserInterface|null A Twig_TokenParserInterface or null if no suitable TokenParser was found
         */
        public function getTokenParser($tag);
        /**
         * Calls Twig\TokenParser\TokenParserInterface::setParser on all parsers the implementation knows of.
         */
        public function setParser(\WPML\Core\Twig_ParserInterface $parser);
        /**
         * Gets the Twig_ParserInterface.
         *
         * @return Twig_ParserInterface|null A Twig_ParserInterface instance or null
         */
        public function getParser();
    }
    /**
     * Default implementation of a token parser broker.
     *
     * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_TokenParserBroker implements \WPML\Core\Twig_TokenParserBrokerInterface
    {
        protected $parser;
        protected $parsers = [];
        protected $brokers = [];
        /**
         * @param array|\Traversable $parsers                 A \Traversable of Twig_TokenParserInterface instances
         * @param array|\Traversable $brokers                 A \Traversable of Twig_TokenParserBrokerInterface instances
         * @param bool               $triggerDeprecationError
         */
        public function __construct($parsers = [], $brokers = [], $triggerDeprecationError = \true)
        {
        }
        public function addTokenParser(\WPML\Core\Twig\TokenParser\TokenParserInterface $parser)
        {
        }
        public function removeTokenParser(\WPML\Core\Twig\TokenParser\TokenParserInterface $parser)
        {
        }
        public function addTokenParserBroker(self $broker)
        {
        }
        public function removeTokenParserBroker(self $broker)
        {
        }
        /**
         * Gets a suitable TokenParser for a tag.
         *
         * First looks in parsers, then in brokers.
         *
         * @param string $tag A tag name
         *
         * @return TokenParserInterface|null A Twig_TokenParserInterface or null if no suitable TokenParser was found
         */
        public function getTokenParser($tag)
        {
        }
        public function getParsers()
        {
        }
        public function getParser()
        {
        }
        public function setParser(\WPML\Core\Twig_ParserInterface $parser)
        {
        }
    }
    class Twig_ContainerRuntimeLoader extends \WPML\Core\Twig\RuntimeLoader\ContainerRuntimeLoader
    {
    }
    class Twig_Token extends \WPML\Core\Twig\Token
    {
    }
    class Twig_ExistsLoaderInterface extends \WPML\Core\Twig\Loader\ExistsLoaderInterface
    {
    }
    class Twig_Extension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
    }
    class Twig_NodeVisitor_Escaper extends \WPML\Core\Twig\NodeVisitor\EscaperNodeVisitor
    {
    }
    class Twig_NodeVisitor_SafeAnalysis extends \WPML\Core\Twig\NodeVisitor\SafeAnalysisNodeVisitor
    {
    }
    class Twig_NodeVisitor_Sandbox extends \WPML\Core\Twig\NodeVisitor\SandboxNodeVisitor
    {
    }
    class Twig_NodeVisitor_Optimizer extends \WPML\Core\Twig\NodeVisitor\OptimizerNodeVisitor
    {
    }
    /*
     * This file is part of Twig.
     *
     * (c) Fabien Potencier
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */
    /**
     * Represents a template test.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_TestInterface
    {
        /**
         * Compiles a test.
         *
         * @return string The PHP code for the test
         */
        public function compile();
    }
    /**
     * Represents a template test.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    abstract class Twig_Test implements \WPML\Core\Twig_TestInterface, \WPML\Core\Twig_TestCallableInterface
    {
        protected $options;
        protected $arguments = [];
        public function __construct(array $options = [])
        {
        }
        public function getCallable()
        {
        }
    }
    class Twig_Error extends \WPML\Core\Twig\Error\Error
    {
    }
    class Twig_TokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
    }
    class Twig_FactoryRuntimeLoader extends \WPML\Core\Twig\RuntimeLoader\FactoryRuntimeLoader
    {
    }
    class Twig_Lexer extends \WPML\Core\Twig\Lexer
    {
    }
    class Twig_TokenParser_Flush extends \WPML\Core\Twig\TokenParser\FlushTokenParser
    {
    }
    class Twig_TokenParser_Macro extends \WPML\Core\Twig\TokenParser\MacroTokenParser
    {
    }
    class Twig_TokenParser_Filter extends \WPML\Core\Twig\TokenParser\FilterTokenParser
    {
    }
    class Twig_TokenParser_Use extends \WPML\Core\Twig\TokenParser\UseTokenParser
    {
    }
    class Twig_TokenParser_For extends \WPML\Core\Twig\TokenParser\ForTokenParser
    {
    }
    class Twig_TokenParser_Sandbox extends \WPML\Core\Twig\TokenParser\SandboxTokenParser
    {
    }
    class Twig_TokenParser_Do extends \WPML\Core\Twig\TokenParser\DoTokenParser
    {
    }
    class Twig_TokenParser_Set extends \WPML\Core\Twig\TokenParser\SetTokenParser
    {
    }
    class Twig_TokenParser_Embed extends \WPML\Core\Twig\TokenParser\EmbedTokenParser
    {
    }
    class Twig_TokenParser_From extends \WPML\Core\Twig\TokenParser\FromTokenParser
    {
    }
    class Twig_TokenParser_Extends extends \WPML\Core\Twig\TokenParser\ExtendsTokenParser
    {
    }
    class Twig_TokenParser_Spaceless extends \WPML\Core\Twig\TokenParser\SpacelessTokenParser
    {
    }
    class Twig_TokenParser_With extends \WPML\Core\Twig\TokenParser\WithTokenParser
    {
    }
    class Twig_TokenParser_Deprecated extends \WPML\Core\Twig\TokenParser\DeprecatedTokenParser
    {
    }
    class Twig_TokenParser_If extends \WPML\Core\Twig\TokenParser\IfTokenParser
    {
    }
    class Twig_TokenParser_AutoEscape extends \WPML\Core\Twig\TokenParser\AutoEscapeTokenParser
    {
    }
    class Twig_TokenParser_Import extends \WPML\Core\Twig\TokenParser\ImportTokenParser
    {
    }
    class Twig_TokenParser_Block extends \WPML\Core\Twig\TokenParser\BlockTokenParser
    {
    }
    class Twig_TokenParser_Include extends \WPML\Core\Twig\TokenParser\IncludeTokenParser
    {
    }
    /**
     * Represents a template test as a Node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Test_Node extends \WPML\Core\Twig_Test
    {
        protected $class;
        public function __construct($class, array $options = [])
        {
        }
        public function getClass()
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a method template test.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Test_Method extends \WPML\Core\Twig_Test
    {
        protected $extension;
        protected $method;
        public function __construct(\WPML\Core\Twig\Extension\ExtensionInterface $extension, $method, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a function template test.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Test_Function extends \WPML\Core\Twig_Test
    {
        protected $function;
        public function __construct($function, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    class Twig_Test_NodeTestCase extends \WPML\Core\Twig\Test\NodeTestCase
    {
    }
    class Twig_Test_IntegrationTestCase extends \WPML\Core\Twig\Test\IntegrationTestCase
    {
    }
    class Twig_NodeOutputInterface extends \WPML\Core\Twig\Node\NodeOutputInterface
    {
    }
    class Twig_Template extends \WPML\Core\Twig\Template
    {
    }
}
namespace {
    class WPML_Mobile_Detect
    {
        protected $scriptVersion = '2.5.7';
        // External info.
        protected $userAgent = \null;
        protected $httpHeaders;
        // Arrays holding all detection rules.
        protected $mobileDetectionRules = \null;
        protected $mobileDetectionRulesExtended = \null;
        // Type of detection to use.
        protected $detectionType = 'mobile';
        // mobile, extended @todo: refactor this.
        // List of mobile devices (phones)
        protected $phoneDevices = array(
            'iPhone' => '\\biPhone.*Mobile|\\biPod|\\biTunes',
            'BlackBerry' => 'BlackBerry|\\bBB10\\b|rim[0-9]+',
            'HTC' => 'HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6425|001HT|Inspire 4G',
            'Nexus' => 'Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile',
            // @todo: Is 'Dell Streak' a tablet or a phone? ;)
            'Dell' => 'Dell.*Streak|Dell.*Aero|Dell.*Venue|DELL.*Venue Pro|Dell Flash|Dell Smoke|Dell Mini 3iX|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b',
            'Motorola' => 'Motorola|\\bDroid\\b.*Build|DROIDX|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT909|XT910|XT912|XT928',
            'Samsung' => 'Samsung|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9300 |GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-P6810|GT-P7100|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N8010',
            'Sony' => 'sony|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i',
            'Asus' => 'Asus.*Galaxy',
            'Palm' => 'PalmSource|Palm',
            // avantgo|blazer|elaine|hiptop|plucker|xiino ; @todo - complete the regex.
            'Vertu' => 'Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature',
            // Just for fun ;)
            // @ref: http://www.pantech.co.kr/en/prod/prodList.do?gbrand=VEGA (PANTECH)
            // Most of the VEGA devices are legacy. PANTECH seem to be newer devices based on Android.
            'Pantech' => 'PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790',
            // @ref: http://www.fly-phone.com/devices/smartphones/ ; Included only smartphones.
            'Fly' => 'IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250',
            // Added simvalley mobile just for fun. They have some interesting devices.
            // @ref: http://www.simvalley.fr/telephonie---gps-_22_telephonie-mobile_telephones_.html
            'SimValley' => '\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b',
            // @Tapatalk is a mobile app; @ref: http://support.tapatalk.com/threads/smf-2-0-2-os-and-browser-detection-plugin-and-tapatalk.15565/#post-79039
            'GenericPhone' => 'Tapatalk|PDA;|PPC;|SAGEM|mmp|pocket|psp|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|wap|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser|LG-P500',
        );
        // List of tablet devices.
        protected $tabletDevices = array(
            'iPad' => 'iPad|iPad.*Mobile',
            // @todo: check for mobile friendly emails topic.
            'NexusTablet' => '^.*Android.*Nexus(((?:(?!Mobile))|(?:(\\s(7|10).+))).)*$',
            'SamsungTablet' => 'SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1010|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P6810|GT-P7501',
            // @reference: http://www.labnol.org/software/kindle-user-agent-string/20378/
            'Kindle' => 'Kindle|Silk.*Accelerated',
            'AsusTablet' => 'Transformer|TF101',
            'BlackBerryTablet' => 'PlayBook|RIM Tablet',
            'HTCtablet' => 'HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200',
            'MotorolaTablet' => 'xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617',
            'NookTablet' => 'Android.*Nook|NookColor|nook browser|BNTV250A|LogicPD Zoom2',
            // @ref: http://www.acer.ro/ac/ro/RO/content/drivers
            // @ref: http://www.packardbell.co.uk/pb/en/GB/content/download (Packard Bell is part of Acer)
            'AcerTablet' => 'Android.*\\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71)\\b',
            // @ref: http://eu.computers.toshiba-europe.com/innovation/family/Tablets/1098744/banner_id/tablet_footerlink/
            // @ref: http://us.toshiba.com/tablets/tablet-finder
            // @ref: http://www.toshiba.co.jp/regza/tablet/
            'ToshibaTablet' => 'Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)',
            // @ref: http://www.nttdocomo.co.jp/english/service/developer/smart_phone/technical_info/spec/index.html
            'LGTablet' => '\\bL-06C|LG-V900|LG-V909',
            'YarvikTablet' => 'Android.*(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468)',
            'MedionTablet' => 'Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB',
            'ArnovaTablet' => 'AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT',
            // @reference: http://wiki.archosfans.com/index.php?title=Main_Page
            'ArchosTablet' => 'Android.*ARCHOS|101G9|80G9',
            // @reference: http://en.wikipedia.org/wiki/NOVO7
            'AinolTablet' => 'NOVO7|Novo7Aurora|Novo7Basic|NOVO7PALADIN',
            // @todo: inspect http://esupport.sony.com/US/p/select-system.pl?DIRECTOR=DRIVER
            // @ref: Readers http://www.atsuhiro-me.net/ebook/sony-reader/sony-reader-web-browser
            // @ref: http://www.sony.jp/support/tablet/
            'SonyTablet' => 'Sony Tablet|Sony Tablet S|SGPT12|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT211|SGPT213|EBRD1101|EBRD1102|EBRD1201',
            // @ref: db + http://www.cube-tablet.com/buy-products.html
            'CubeTablet' => 'Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT',
            // @ref: http://www.cobyusa.com/?p=pcat&pcat_id=3001
            'CobyTablet' => 'MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010',
            // @ref: http://pdadb.net/index.php?m=pdalist&list=SMiT (NoName Chinese Tablets)
            // @ref: http://www.imp3.net/14/show.php?itemid=20454
            'SMiTTablet' => 'Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)',
            // @ref: http://www.rock-chips.com/index.php?do=prod&pid=2
            'RockChipTablet' => 'Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A',
            // @ref: http://www.telstra.com.au/home-phone/thub-2/
            'TelstraTablet' => 'T-Hub2',
            // @ref: http://www.fly-phone.com/devices/tablets/ ; http://www.fly-phone.com/service/
            'FlyTablet' => 'IQ310|Fly Vision',
            // @ref: http://www.bqreaders.com/gb/tablets-prices-sale.html
            'bqTablet' => 'bq.*(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant)',
            // @ref: http://www.huaweidevice.com/worldwide/productFamily.do?method=index&directoryId=5011&treeId=3290
            // @ref: http://www.huaweidevice.com/worldwide/downloadCenter.do?method=index&directoryId=3372&treeId=0&tb=1&type=software (including legacy tablets)
            'HuaweiTablet' => 'MediaPad|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim',
            // Nec or Medias Tab
            'NecTablet' => '\\bN-06D|\\bN-08D',
            // Broncho Tablets: http://www.broncho.cn/ (hard to find)
            'BronchoTablet' => 'Broncho.*(N701|N708|N802|a710)',
            // @ref: http://versusuk.com/support.html
            'VersusTablet' => 'TOUCHPAD.*[78910]',
            // @ref: http://www.zync.in/index.php/our-products/tablet-phablets
            'ZyncTablet' => 'z1000|Z99 2G|z99|z930|z999|z990|z909|Z919|z900',
            // @ref: https://www.nabitablet.com/
            'NabiTablet' => 'Android.*\\bNabi',
            // @note: Avoid detecting 'PLAYSTATION 3' as mobile.
            'PlaystationTablet' => 'Playstation.*(Portable|Vita)',
            'GenericTablet' => 'Android.*\\b97D\\b|Tablet(?!.*PC)|ViewPad7|MID7015|BNTV250A|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|hp-tablet',
        );
        // List of mobile Operating Systems.
        protected $operatingSystems = array(
            'AndroidOS' => 'Android',
            'BlackBerryOS' => 'blackberry|\\bBB10\\b|rim tablet os',
            'PalmOS' => 'PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino',
            'SymbianOS' => 'Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b',
            // @reference: http://en.wikipedia.org/wiki/Windows_Mobile
            'WindowsMobileOS' => 'Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Window Mobile|Windows Phone [0-9.]+|WCE;',
            // @reference: http://en.wikipedia.org/wiki/Windows_Phone
            // http://wifeng.cn/?r=blog&a=view&id=106
            // http://nicksnettravels.builttoroam.com/post/2011/01/10/Bogus-Windows-Phone-7-User-Agent-String.aspx
            'WindowsPhoneOS' => 'Windows Phone OS|XBLWP7|ZuneWP7',
            'iOS' => '\\biPhone.*Mobile|\\biPod|\\biPad',
            // http://en.wikipedia.org/wiki/MeeGo
            // @todo: research MeeGo in UAs
            'MeeGoOS' => 'MeeGo',
            // http://en.wikipedia.org/wiki/Maemo
            // @todo: research Maemo in UAs
            'MaemoOS' => 'Maemo',
            'JavaOS' => 'J2ME/MIDP|Java/',
            'webOS' => 'webOS|hpwOS',
            'badaOS' => '\\bBada\\b',
            'BREWOS' => 'BREW',
        );
        // List of mobile User Agents.
        protected $userAgents = array(
            // @reference: https://developers.google.com/chrome/mobile/docs/user-agent
            'Chrome' => '\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?',
            'Dolfin' => '\\bDolfin\\b',
            'Opera' => 'Opera.*Mini|Opera.*Mobi|Android.*Opera',
            'Skyfire' => 'Skyfire',
            'IE' => 'IEMobile|MSIEMobile',
            'Firefox' => 'fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile',
            'Bolt' => 'bolt',
            'TeaShark' => 'teashark',
            'Blazer' => 'Blazer',
            // @reference: http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/OptimizingforSafarioniPhone/OptimizingforSafarioniPhone.html#//apple_ref/doc/uid/TP40006517-SW3
            'Safari' => 'Version.*Mobile.*Safari|Safari.*Mobile',
            // @ref: http://en.wikipedia.org/wiki/Midori_(web_browser)
            //'Midori'          => 'midori',
            'Tizen' => 'Tizen',
            'UCBrowser' => 'UC.*Browser|UCWEB',
            // @ref: https://github.com/serbanghita/Mobile-Detect/issues/7
            'DiigoBrowser' => 'DiigoBrowser',
            // http://www.puffinbrowser.com/index.php
            'Puffin' => 'Puffin',
            // @ref: http://mercury-browser.com/index.html
            'Mercury' => '\\bMercury\\b',
            // @reference: http://en.wikipedia.org/wiki/Minimo
            // http://en.wikipedia.org/wiki/Vision_Mobile_Browser
            'GenericBrowser' => 'NokiaBrowser|OviBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision',
        );
        // Utilities.
        protected $utilities = array(
            'TV' => 'SonyDTV115',
            // experimental
            'WebKit' => '(webkit)[ /]([\\w.]+)',
            'Bot' => 'Googlebot|DoCoMo|YandexBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|facebookexternalhit',
            'MobileBot' => 'Googlebot-Mobile|DoCoMo|YahooSeeker/M1A1-R2D2',
        );
        // Properties list.
        // @reference: http://user-agent-string.info/list-of-ua#Mobile Browser
        const VER = '([\\w._]+)';
        protected $properties = array(
            // Build
            'Mobile' => 'Mobile/[VER]',
            'Build' => 'Build/[VER]',
            'Version' => 'Version/[VER]',
            'VendorID' => 'VendorID/[VER]',
            // Devices
            'iPad' => 'iPad.*CPU[a-z ]+[VER]',
            'iPhone' => 'iPhone.*CPU[a-z ]+[VER]',
            'iPod' => 'iPod.*CPU[a-z ]+[VER]',
            //'BlackBerry'    => array('BlackBerry[VER]', 'BlackBerry [VER];'),
            'Kindle' => 'Kindle/[VER]',
            // Browser
            'Chrome' => 'Chrome/[VER]',
            'CriOS' => 'CriOS/[VER]',
            'Dolfin' => 'Dolfin/[VER]',
            // @reference: https://developer.mozilla.org/en-US/docs/User_Agent_Strings_Reference
            'Firefox' => 'Firefox/[VER]',
            'Fennec' => 'Fennec/[VER]',
            // @reference: http://msdn.microsoft.com/en-us/library/ms537503(v=vs.85).aspx
            'IEMobile' => array('IEMobile/[VER];', 'IEMobile [VER]'),
            'MSIE' => 'MSIE [VER];',
            // http://en.wikipedia.org/wiki/NetFront
            'NetFront' => 'NetFront/[VER]',
            'NokiaBrowser' => 'NokiaBrowser/[VER]',
            'Opera' => 'Version/[VER]',
            'Opera Mini' => 'Opera Mini/[VER]',
            'Opera Mobi' => 'Version/[VER]',
            'UC Browser' => 'UC Browser[VER]',
            'Safari' => 'Version/[VER]',
            'Skyfire' => 'Skyfire/[VER]',
            'Tizen' => 'Tizen/[VER]',
            'Webkit' => 'webkit[ /][VER]',
            // Engine
            'Gecko' => 'Gecko/[VER]',
            'Trident' => 'Trident/[VER]',
            'Presto' => 'Presto/[VER]',
            // OS
            'Android' => 'Android [VER]',
            'BlackBerry' => array('BlackBerry[\\w]+/[VER]', 'BlackBerry.*Version/[VER]'),
            'BREW' => 'BREW [VER]',
            'Java' => 'Java/[VER]',
            // @reference: http://windowsteamblog.com/windows_phone/b/wpdev/archive/2011/08/29/introducing-the-ie9-on-windows-phone-mango-user-agent-string.aspx
            // @reference: http://en.wikipedia.org/wiki/Windows_NT#Releases
            'Windows Phone OS' => 'Windows Phone OS [VER]',
            'Windows Phone' => 'Windows Phone [VER]',
            'Windows CE' => 'Windows CE/[VER]',
            // http://social.msdn.microsoft.com/Forums/en-US/windowsdeveloperpreviewgeneral/thread/6be392da-4d2f-41b4-8354-8dcee20c85cd
            'Windows NT' => 'Windows NT [VER]',
            'Symbian' => array('SymbianOS/[VER]', 'Symbian/[VER]'),
            'webOS' => array('webOS/[VER]', 'hpwOS/[VER];'),
        );
        function __construct()
        {
        }
        /**
         * Get the current script version.
         * This is useful for the demo.php file,
         * so people can check on what version they are testing
         * for mobile devices.
         */
        public function getScriptVersion()
        {
        }
        public function setHttpHeaders($httpHeaders = \null)
        {
        }
        public function getHttpHeaders()
        {
        }
        public function setUserAgent($userAgent = \null)
        {
        }
        public function getUserAgent()
        {
        }
        function setDetectionType($type = \null)
        {
        }
        public function getPhoneDevices()
        {
        }
        public function getTabletDevices()
        {
        }
        /**
         * Method sets the mobile detection rules.
         *
         * This method is used for the magic methods $detect->is*()
         */
        public function setMobileDetectionRules()
        {
        }
        /**
         * Method sets the mobile detection rules + utilities.
         * The reason this is separate is because utilities rules
         * don't necessary imply mobile.
         *
         * This method is used inside the new $detect->is('stuff') method.
         */
        public function setMobileDetectionRulesExtended()
        {
        }
        /**
         * @return array
         */
        public function getRules()
        {
        }
        /**
        * Check the HTTP headers for signs of mobile.
        * This is the fastest mobile check possible; it's used
        * inside isMobile() method.
        * @return boolean
        */
        public function checkHttpHeadersForMobile()
        {
        }
        /**
         * Magic overloading method.
         *
         * @param string $name
         * @param array $arguments
         * @return mixed
         */
        public function __call($name, $arguments)
        {
        }
        /**
         * Check if the device is mobile.
         * Returns true if any type of mobile device detected, including special ones
         * @param null $userAgent deprecated
         * @param null $httpHeaders deprecated
         * @return bool
         */
        public function isMobile($userAgent = \null, $httpHeaders = \null)
        {
        }
        /**
         * Check if the device is a tablet.
         * Return true if any type of tablet device is detected.
         *
         * @param null $userAgent deprecated
         * @param null $httpHeaders deprecated
         * @return bool
         */
        public function isTablet($userAgent = \null, $httpHeaders = \null)
        {
        }
        /**
         * This method checks for a certain property in the
         * userAgent.
         *
         * @param string $key
         * @param string $userAgent   deprecated
         * @param string $httpHeaders deprecated
         *
         * @return bool|int|null
         * @todo: The httpHeaders part is not yet used.
         *
         */
        public function is($key, $userAgent = \null, $httpHeaders = \null)
        {
        }
        public function getOperatingSystems()
        {
        }
        /**
         * Some detection rules are relative (not standard),
         * because of the diversity of devices, vendors and
         * their conventions in representing the User-Agent or
         * the HTTP headers.
         *
         * This method will be used to check custom regexes against
         * the User-Agent string.
         *
         * @param string $regex
         * @param string $userAgent
         *
         * @return bool
         *
         * @todo: search in the HTTP headers too.
         */
        function match($regex, $userAgent = \null)
        {
        }
        /**
         * Get the properties array.
         * @return array
         */
        function getProperties()
        {
        }
        /**
         * Prepare the version number.
         *
         * @param string $ver
         *
         * @return int
         */
        function prepareVersionNo($ver)
        {
        }
        /**
         * Check the version of the given property in the User-Agent.
         * Will return a float number. (eg. 2_0 will return 2.0, 4.3.1 will return 4.31)
         *
         * @param string $propertyName
         * @return mixed $version
         */
        function version($propertyName)
        {
        }
        function mobileGrade()
        {
        }
    }
    class WPML_Save_Themes_Plugins_Localization_Options
    {
        /**
         * WPML_Save_Themes_Plugins_Localization_Options constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /** @param array $settings */
        public function save_settings($settings)
        {
        }
    }
    interface IWPML_Theme_Plugin_Localization_UI_Strategy
    {
        public function get_model();
        public function get_template();
    }
    class WPML_Theme_Plugin_Localization_Options_UI implements \IWPML_Theme_Plugin_Localization_UI_Strategy
    {
        public function __construct(\SitePress $sitepress)
        {
        }
        /** @return array */
        public function get_model()
        {
        }
        /** @return string */
        public function get_template()
        {
        }
    }
    class WPML_Theme_Plugin_Localization_UI
    {
        const TEMPLATE_PATH = '/templates/theme-plugin-localization/';
        /**
         * @param IWPML_Theme_Plugin_Localization_UI_Strategy $localization_strategy
         */
        public function render(\IWPML_Theme_Plugin_Localization_UI_Strategy $localization_strategy)
        {
        }
    }
    class WPML_Theme_Plugin_Localization_UI_Hooks
    {
        /**
         * WPML_Theme_Plugin_Localization_UI_Hooks constructor.
         *
         * @param WPML_Theme_Plugin_Localization_UI         $localization_ui
         * @param WPML_Theme_Plugin_Localization_Options_UI $options_ui
         */
        public function __construct(\WPML_Theme_Plugin_Localization_UI $localization_ui, \WPML_Theme_Plugin_Localization_Options_UI $options_ui)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_styles()
        {
        }
        public function render_options_ui()
        {
        }
    }
    class WPML_Themes_Plugin_Localization_UI_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return WPML_Theme_Plugin_Localization_UI_Hooks */
        public function create()
        {
        }
        /** @return string */
        public function get_load_action()
        {
        }
    }
    class WPML_Theme_Plugin_Localization_Options_Ajax implements \IWPML_AJAX_Action, \IWPML_DIC_Action
    {
        const NONCE_LOCALIZATION_OPTIONS = 'wpml-localization-options-nonce';
        /**
         * WPML_Themes_Plugins_Localization_Options_Ajax constructor.
         *
         * @param WPML_Save_Themes_Plugins_Localization_Options $save_localization_options
         */
        public function __construct(\WPML_Save_Themes_Plugins_Localization_Options $save_localization_options)
        {
        }
        public function add_hooks()
        {
        }
        public function update_localization_options()
        {
        }
    }
    class WPML_DB_Chunk
    {
        /**
         * @param wpdb $wpdb
         * @param int  $chunk_size
         */
        public function __construct(\wpdb $wpdb, $chunk_size = 1000)
        {
        }
        /**
         * @param string $query
         * @param array  $args
         * @param int    $elements_num
         *
         * @return array
         *
         * @throws \InvalidArgumentException
         */
        public function retrieve($query, $args, $elements_num)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Canonicals
    {
        const CANONICAL_FOR_DUPLICATED_POST = 'duplicate';
        const CANONICAL_FOR_NON_TRANSLATABLE_POST = 'non-translatable';
        /**
         * WPML_Canonicals constructor.
         *
         * @param SitePress                        $sitepress
         * @param WPML_Translation_Element_Factory $translation_element_factory
         * @param WPML_Translations                $wpml_translations
         */
        public function __construct(\SitePress $sitepress, \WPML_Translation_Element_Factory $translation_element_factory, \WPML_Translations $wpml_translations = \null)
        {
        }
        /**
         * @param string $link
         * @param int    $post_id
         *
         * @return null|string
         * @throws \InvalidArgumentException
         */
        public function permalink_filter($link, $post_id)
        {
        }
        /**
         * @param string  $canonical_url
         * @param WP_Post $post
         *
         * @return string|bool
         */
        public function get_canonical_url($canonical_url, $post, $request_language)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function get_general_canonical_url($url)
        {
        }
    }
    /**
     * Class WPML_Canonicals_Hooks
     */
    class WPML_Canonicals_Hooks
    {
        /**
         * WPML_Canonicals_Hooks constructor.
         *
         * @param SitePress          $sitepress
         * @param WPML_URL_Converter $url_converter
         * @param callable           $is_current_request_root_callback
         */
        public function __construct(\SitePress $sitepress, \WPML_URL_Converter $url_converter, $is_current_request_root_callback)
        {
        }
        public function add_hooks()
        {
        }
        public function redirect_pages_from_root_to_default_lang_dir()
        {
        }
        /**
         * When :
         *
         * The current template that user tries to load is for archive page
         *
         * And the default language in a directory mode is active
         *
         * And the language code is not present in the current request URI
         *
         * Then: We make a redirect to the proper URI that contains the default language code as directory.
         */
        public function redirectArchivePageToDefaultLangDir()
        {
        }
        /**
         * First we have to check if we are on front page and the current language is different than the default one.
         * If not, then we don't have to do anything -> return the $redirect_url.
         *
         * Next we check if the $redirect_url is the same as the $requested_url + '/'.
         * Then, we have to check if the permalink structure does not have the trailing slash.
         *
         * If both conditions are true, then we return false, so the redirection will not happen.
         *
         * @param string $redirect_url
         * @param string $requested_url
         *
         * @return string|false
         */
        public function prevent_redirection_of_frontpage_on_secondary_language($redirect_url, $requested_url)
        {
        }
        /**
         * @param string $redirect_url
         *
         * @return string|false
         */
        public function prevent_redirection_with_translated_paged_content($redirect_url)
        {
        }
    }
    /**
     * WPML_TM_Reset_Options_Filter class file
     *
     * @package WPML\TM
     */
    /**
     * Class WPML_TM_Reset_Options_Filter
     */
    class WPML_TM_Reset_Options_Filter implements \IWPML_Action
    {
        /**
         * Add hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Add options to reset.
         *
         * @param array $options Options.
         *
         * @return array
         */
        public function reset_options(array $options)
        {
        }
    }
    /**
     * WPML_TM_Reset_Options_Filter_Factory class file.
     *
     * @package WPML\TM
     */
    /**
     * Class WPML_TM_Reset_Options_Filter_Factory
     */
    class WPML_TM_Reset_Options_Filter_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * Create reset options filter.
         *
         * @return WPML_TM_Reset_Options_Filter
         */
        public function create()
        {
        }
    }
    class WPML_Post_Edit_Terms_Hooks implements \IWPML_Action
    {
        const AFTER_POST_DATA_SANITIZED_ACTION = 'init';
        public function __construct(\IWPML_Current_Language $current_language, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function set_tags_input_with_ids()
        {
        }
        /**
         * @return array|null
         */
        public function get_tags_from_tax_input()
        {
        }
    }
}
namespace WPML\Posts {
    class DeleteTranslatedContentOfLanguages
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class UntranslatedCount
    {
        public function run(\WPML\Collect\Support\Collection $data, \wpdb $wpdb)
        {
        }
    }
    class CountPerPostType
    {
        public function run(\WPML\Collect\Support\Collection $data, \wpdb $wpdb)
        {
        }
    }
}
namespace {
    class WPML_Pre_Option_Page extends \WPML_WPDB_And_SP_User
    {
        const CACHE_GROUP = 'wpml_pre_option_page';
        public function __construct(&$wpdb, &$sitepress, $switched, $lang)
        {
        }
        public function get($type, $from_language = \null)
        {
        }
        public static function clear_cache()
        {
        }
        function fix_trashed_front_or_posts_page_settings($post_id)
        {
        }
    }
    class WPML_Post_Edit_Terms_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\PostTranslation\SpecialPage {
    class Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function deleteCacheOnSettingPage(\WP_Screen $currentScreen)
        {
        }
    }
}
namespace {
    class WPML_Post_Status extends \WPML_WPDB_User
    {
        public function __construct(&$wpdb, $wp_api)
        {
        }
        public function needs_update($post_id)
        {
        }
        public function reload()
        {
        }
        public function set_update_status($post_id, $update)
        {
        }
        /**
         * @param int $post_id
         * @param int $status
         *
         * @return bool
         */
        public function set_status($post_id, $status)
        {
        }
        public function get_status($post_id, $trid = \false, $lang_code = \false)
        {
        }
        public function is_duplicate($post_id)
        {
        }
    }
    class WPML_TM_Email_Twig_Template_Factory
    {
        /** @return WPML_Twig_Template */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_Batch_Report
     */
    class WPML_TM_Batch_Report
    {
        const BATCH_REPORT_OPTION = '_wpml_batch_report';
        /**
         * WPML_TM_Batch_Report constructor.
         *
         * @param WPML_TM_Blog_Translators $blog_translators
         */
        public function __construct(\WPML_TM_Blog_Translators $blog_translators)
        {
        }
        /**
         * @param WPML_Translation_Job $job
         */
        public function set_job(\WPML_Translation_Job $job)
        {
        }
        /**
         * @return array
         */
        public function get_unassigned_jobs()
        {
        }
        /**
         * @return array
         */
        public function get_unassigned_translators()
        {
        }
        /**
         * @return array
         */
        public function get_jobs()
        {
        }
        public function reset_batch_report($translator_id)
        {
        }
    }
    /**
     * Class WPML_TM_Notification_Batch_Hooks
     */
    class WPML_TM_Batch_Report_Hooks
    {
        /**
         * WPML_TM_Batch_Report_Hooks constructor.
         *
         * @param WPML_TM_Batch_Report $batch_report
         * @param WPML_TM_Batch_Report_Email_Process $email_process
         */
        public function __construct(\WPML_TM_Batch_Report $batch_report, \WPML_TM_Batch_Report_Email_Process $email_process)
        {
        }
        public function add_hooks()
        {
        }
        public function set_job($job)
        {
        }
    }
    abstract class WPML_TM_Email_View
    {
        const FOOTER_TEMPLATE = 'email-footer.twig';
        const HEADER_TEMPLATE = 'email-header.twig';
        /** @var WPML_Twig_Template $template_service */
        protected $template_service;
        public function __construct(\WPML_Twig_Template $template_service)
        {
        }
        /**
         * @param string $username
         *
         * @return string
         */
        public function render_header($username = '')
        {
        }
        /**
         * @param string $username
         *
         * @return string
         */
        public function render_casual_header($first_name = '')
        {
        }
        /**
         * @param string $bottom_text
         *
         * @return string
         */
        protected function render_email_footer($bottom_text = '')
        {
        }
    }
    /**
     * Class WPML_TM_Email_Jobs_Summary_View
     */
    class WPML_TM_Email_Jobs_Summary_View extends \WPML_TM_Email_View
    {
        const JOBS_TEMPLATE = 'batch-report/email-job-pairs.twig';
        /**
         * WPML_TM_Batch_Report_Email_Template constructor.
         *
         * @param WPML_Twig_Template $template_service
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param SitePress $sitepress
         */
        public function __construct(\WPML_Twig_Template $template_service, \WPML_TM_Blog_Translators $blog_translators, \SitePress $sitepress)
        {
        }
        /**
         * @param array $language_pairs
         * @param int $translator_id
         * @param string $title_singular
         * @param string $title_plural
         *
         * @return null|string
         */
        public function render_jobs_list($language_pairs, $translator_id, $title_singular, $title_plural = '')
        {
        }
        /** @return string */
        public function render_footer()
        {
        }
        /**
         * @return array
         */
        public function get_assigned_jobs()
        {
        }
    }
    /**
     * Class WPML_TM_Batch_Report_Email_Process
     */
    class WPML_TM_Batch_Report_Email_Process
    {
        /**
         * WPML_TM_Batch_Report_Email_Process constructor.
         *
         * @param WPML_TM_Batch_Report $batch_report
         * @param WPML_TM_Batch_Report_Email_Builder $email_builder
         */
        public function __construct(\WPML_TM_Batch_Report $batch_report, \WPML_TM_Batch_Report_Email_Builder $email_builder)
        {
        }
        public function process_emails()
        {
        }
    }
    /**
     * Class WPML_TM_Batch_Report_Email
     */
    class WPML_TM_Batch_Report_Email_Builder
    {
        /**
         * WPML_TM_Notification_Batch_Email constructor.
         *
         * @param WPML_TM_Batch_Report            $batch_report
         * @param WPML_TM_Email_Jobs_Summary_View $email_template
         */
        public function __construct(\WPML_TM_Batch_Report $batch_report, \WPML_TM_Email_Jobs_Summary_View $email_template)
        {
        }
        /**
         * @param array $batch_jobs
         */
        public function prepare_assigned_jobs_emails($batch_jobs)
        {
        }
        /**
         * @param array $batch_jobs
         */
        public function prepare_unassigned_jobs_emails($batch_jobs)
        {
        }
        /**
         * @return array
         */
        public function get_emails()
        {
        }
    }
    class WPML_TM_ATE_Request_Activation_Email
    {
        const REQUEST_ACTIVATION_TEMPLATE = 'notification/request-ate-activation.twig';
        public function __construct(\WPML_TM_Email_Notification_View $email_view)
        {
        }
        public function send_email($to_manager, $from_user)
        {
        }
    }
    class WPML_TM_Email_Notification_View extends \WPML_TM_Email_View
    {
        const PROMOTE_TRANSLATION_SERVICES_TEMPLATE = 'notification/promote-translation-services.twig';
        /**
         * @param array  $model
         * @param string $template
         *
         * @return string
         */
        public function render_model(array $model, $template)
        {
        }
    }
    interface WPML_TM_Jobs_Summary_Report_Model
    {
        /**
         * @return string
         */
        public function get_subject();
        /**
         * @return string
         */
        public function get_summary_text();
    }
    class WPML_TM_Jobs_Weekly_Summary_Report_Model implements \WPML_TM_Jobs_Summary_Report_Model
    {
        /**
         * @return string
         */
        public function get_subject()
        {
        }
        /**
         * @return string
         */
        public function get_summary_text()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Process_Factory
    {
        /**
         * @return WPML_TM_Jobs_Summary_Report_Process
         */
        public function create_weekly_report()
        {
        }
        /**
         * @return WPML_TM_Jobs_Summary_Report_Process
         */
        public function create_daily_report()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_View extends \WPML_TM_Email_View
    {
        const WEEKLY_SUMMARY_TEMPLATE = 'notification/summary/summary.twig';
        /**
         * @return string
         */
        public function get_report_content()
        {
        }
        /**
         * @param array $jobs
         *
         * @return $this
         */
        public function set_jobs($jobs)
        {
        }
        /**
         * @param int $manager_id
         *
         * @return $this
         */
        public function set_manager_id($manager_id)
        {
        }
        /**
         * @param string $summary_text
         *
         * @return $this
         */
        public function set_summary_text($summary_text)
        {
        }
    }
    class WPML_TM_Jobs_Daily_Summary_Report_Model implements \WPML_TM_Jobs_Summary_Report_Model
    {
        /**
         * @return string
         */
        public function get_subject()
        {
        }
        /**
         * @return string
         */
        public function get_summary_text()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Process
    {
        public function __construct(\WPML_TM_Jobs_Summary_Report_View $view, \WPML_TM_Jobs_Summary_Report_Model $report_model, array $jobs)
        {
        }
        public function send()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TM_Jobs_Summary_Report_Hooks
         */
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Summary
    {
        const WEEKLY_REPORT = 'weekly';
        const DAILY_REPORT = 'daily';
        const DAILY_SCHEDULE = '1 day';
        const WEEKLY_SCHEDULE = '1 week';
        const JOBS_COMPLETED_KEY = 'completed';
        const JOBS_WAITING_KEY = 'waiting';
    }
    class WPML_TM_Jobs_Summary_Report
    {
        public function __construct(\WPML_Translation_Jobs_Collection $jobs_collection, \WPML_TM_String $string_counter, \WPML_TM_Post $post_counter, $type, \WPML_Translation_Element_Factory $element_factory)
        {
        }
        /**
         * @return array
         */
        public function get_jobs()
        {
        }
    }
    class WPML_TM_Jobs_Summary_Report_Hooks
    {
        const EVENT_HOOK = 'wpml_tm_send_summary_report';
        const EVENT_CALLBACK = 'send_summary_report';
        public function __construct(\WPML_TM_Jobs_Summary_Report_Process_Factory $process_factory, \TranslationManagement $tm)
        {
        }
        public function add_hooks()
        {
        }
        public function send_summary_report()
        {
        }
        public function schedule_email()
        {
        }
    }
    /**
     * Class WPML_TM_Mail_Notification
     */
    class WPML_TM_Mail_Notification
    {
        const JOB_COMPLETE_TEMPLATE = 'notification/job-completed.twig';
        const JOB_REVISED_TEMPLATE = 'notification/job-revised.twig';
        const JOB_CANCELED_TEMPLATE = 'notification/job-canceled.twig';
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Translation_Job_Factory $job_factory, \WPML_TM_Email_Notification_View $email_view, array $notification_settings, $has_active_remote_service)
        {
        }
        public function init()
        {
        }
        public function send_queued_mails()
        {
        }
        /**
         * @param WPML_Translation_Job|int $job_id
         * @param bool|false               $update
         *
         * @return void
         */
        public function action_wpml_tm_job_complete_mail($job_id, $update = \false)
        {
        }
        /**
         * @param WPML_Translation_Job|int $job_id
         * @param bool|false               $update
         *
         * @return false|array representation of the email to be sent
         */
        public function wpml_tm_job_complete_mail($job_id, $update = \false)
        {
        }
        /**
         * @param int $job_id
         *
         * @return void
         */
        public function action_revised_job_email($job_id)
        {
        }
        /**
         * @param int $job_id
         *
         * @return array|bool
         */
        public function revised_job_email($job_id)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return void
         */
        public function action_canceled_job_email(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return array|bool
         */
        public function canceled_job_email(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param int                      $translator_id
         * @param WPML_Translation_Job|int $job
         *
         * @return void
         */
        public function action_translator_removed_mail($translator_id, $job)
        {
        }
        /**
         * @param int                      $translator_id
         * @param WPML_Translation_Job|int $job
         *
         * @return bool
         */
        public function translator_removed_mail($translator_id, $job)
        {
        }
        /**
         * @param int                      $translator_id
         * @param int|WPML_Translation_Job $job_id
         *
         * @return void
         */
        public function action_translator_resign_mail($translator_id, $job_id)
        {
        }
        /**
         * @param int                      $translator_id
         * @param int|WPML_Translation_Job $job_id
         *
         * @return array|bool
         */
        public function translator_resign_mail($translator_id, $job_id)
        {
        }
    }
    class WPML_TM_Overdue_Jobs_Report_Factory
    {
        public function create()
        {
        }
    }
    class WPML_TM_Overdue_Jobs_Report
    {
        const OVERDUE_JOBS_REPORT_TEMPLATE = 'notification/overdue-jobs-report.twig';
        /**
         * @param WPML_Translation_Jobs_Collection $jobs_collection
         * @param WPML_TM_Email_Notification_View $email_view
         * @param bool $has_active_remote_service
         * @param array $notification_settings
         * @param SitePress $sitepress
         * @param WPML_TP_Jobs_Collection|null $tp_jobs
         */
        public function __construct(\WPML_Translation_Jobs_Collection $jobs_collection, \WPML_TM_Email_Notification_View $email_view, $has_active_remote_service, array $notification_settings, \SitePress $sitepress, \WPML_TP_Jobs_Collection $tp_jobs = \null)
        {
        }
        public function send()
        {
        }
    }
}
namespace WPML\Setup {
    class DisableNotices implements \IWPML_DIC_Action, \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace WPML\Setup\Endpoint {
    class RecommendedPlugins implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class AddLanguages implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class CurrentStep implements \WPML\Ajax\IHandler
    {
        const STEP_TRANSLATION_SETTINGS = 'translationSettings';
        const STEP_HIGH_COSTS_WARNING = 'highCostsWarning';
        const STEPS = ['languages', 'address', 'license', 'translation', self::STEP_TRANSLATION_SETTINGS, self::STEP_HIGH_COSTS_WARNING, 'pauseTranslateEverything', 'support', 'plugins', 'finished'];
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class CheckTMAllowed implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SetSecondaryLanguages implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class FinishStep implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class AddressStep implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SetOriginalLanguage implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class TranslationStep implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class TranslationServices implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        /**
         * @param array $serviceGroup
         * @param int $serviceId
         * @return array
         */
        public static function filterServices($serviceGroup, $serviceId)
        {
        }
    }
    class LicenseStep implements \WPML\Ajax\IHandler
    {
        const ACTION_REGISTER_SITE_KEY = 'register-site-key';
        const ACTION_GET_SITE_TYPE = 'get-site-type';
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SetSupport implements \WPML\Ajax\IHandler
    {
        const EVENT_SEND_COMPONENTS_AFTER_REGISTRATION = 'otgs_send_components_data_on_product_registration';
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\Setup {
    class Initializer
    {
        public static function loadJS()
        {
        }
        public static function getData()
        {
        }
    }
}
namespace {
    class WPML_Display_As_Translated_Snippet_Filters_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Display_As_Translated_Message_For_New_Post_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Display_As_Translated_Message_For_New_Post implements \IWPML_Action
    {
        public function __construct(\SitePress $sitepress, \WPML_Notices $notices)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        public function get_notice_content()
        {
        }
    }
    /**
     * Class WPML_Current_Screen_Loader_Factory
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_Current_Screen_Loader_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return string */
        public function get_load_action()
        {
        }
        /** @return string */
        protected abstract function get_screen_regex();
        /** @return null|IWPML_Action */
        protected abstract function create_hooks();
        /** @return null|IWPML_Action */
        public function create()
        {
        }
    }
    class WPML_Display_As_Translated_Default_Lang_Messages_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /**
         * @return WPML_Display_As_Translated_Default_Lang_Messages
         */
        public function create_hooks()
        {
        }
        /** @return string */
        public function get_screen_regex()
        {
        }
    }
    class WPML_Display_As_Translated_Snippet_Filters implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function filter_post_types($should_use_snippet, array $post_type)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 28/10/17
     * Time: 5:07 PM
     */
    class WPML_Fix_Links_In_Display_As_Translated_Content implements \IWPML_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function __construct(\SitePress $sitepress, \WPML_Translate_Link_Targets $translate_link_targets)
        {
        }
        public function add_hooks()
        {
        }
        public function fix_fallback_links($content)
        {
        }
    }
    class WPML_Display_As_Translated_Default_Lang_Messages
    {
        const PREVIOUS_LANG_KEY = 'wpml-previous-default-language';
        public function __construct(\SitePress $sitepress, \WPML_Display_As_Translated_Default_Lang_Messages_View $view)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param string $prev_lang
         */
        public function save_previous_lang($prev_lang)
        {
        }
        public function display_messages()
        {
        }
    }
    class WPML_Display_As_Translated_Default_Lang_Messages_View
    {
        const TEMPLATE = 'default-language-change.twig';
        public function __construct(\WPML_Twig_Template $template_service)
        {
        }
        /**
         * @param string $prev_default_lang
         * @param string $default_lang
         */
        public function display($prev_default_lang, $default_lang)
        {
        }
    }
    class WPML_Sync_Custom_Fields
    {
        /**
         * WPML_Sync_Custom_Fields constructor.
         *
         * @param WPML_Translation_Element_Factory $element_factory
         * @param array                            $fields_to_sync
         */
        public function __construct(\WPML_Translation_Element_Factory $element_factory, array $fields_to_sync)
        {
        }
        /**
         * @param int    $post_id_from
         * @param string $meta_key
         */
        public function sync_to_translations($post_id_from, $meta_key)
        {
        }
        /**
         * @param int $post_id_from
         */
        public function sync_all_custom_fields($post_id_from)
        {
        }
        /**
         * @param int    $post_id_from
         * @param int    $post_id_to
         * @param string $meta_key
         */
        public function sync_custom_field($post_id_from, $post_id_to, $meta_key)
        {
        }
    }
    class WPML_Copy_Once_Custom_Field implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /**
         * WPML_Copy_Once_Custom_Field constructor.
         *
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $wpml_post_translation
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $wpml_post_translation)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $post_id
         */
        public function copy($post_id)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_Fields_Post_Meta_Info implements \IWPML_Action
    {
        const RESOURCES_HANDLE = 'wpml-cf-info';
        const AJAX_ACTION = 'wpml-cf-info-get';
        /**
         * WPML_Custom_Fields_Post_Meta_Info constructor.
         *
         * @param WPML_Translation_Element_Factory $translatable_element_factory
         */
        public function __construct(\WPML_Translation_Element_Factory $translatable_element_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function get_info_ajax()
        {
        }
        public function get_info_filter($ignore, $post_id, $meta_key)
        {
        }
    }
    class WPML_Translate_Link_Targets
    {
        /**
         * WPML_Translate_Link_Targets constructor.
         *
         * @param AbsoluteLinks               $absolute_links
         * @param WPML_Absolute_To_Permalinks $permalinks_converter
         */
        public function __construct(\AbsoluteLinks $absolute_links, \WPML_Absolute_To_Permalinks $permalinks_converter)
        {
        }
        /**
         * convert_text
         *
         * @param string $text
         *
         * @return string
         */
        public function convert_text($text)
        {
        }
        public function is_internal_url($url)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function convert_url($url)
        {
        }
    }
    class WPML_Translate_Link_Targets_In_Custom_Fields extends \WPML_Translate_Link_Targets
    {
        /**
         * WPML_Translate_Link_Targets_In_Custom_Fields constructor.
         *
         * @param TranslationManagement       $tm_instance
         * @param WPML_WP_API                 $wp_api
         * @param AbsoluteLinks               $absolute_links
         * @param WPML_Absolute_To_Permalinks $permalinks_converter
         */
        public function __construct(&$tm_instance, &$wp_api, $absolute_links, $permalinks_converter)
        {
        }
        public function has_meta_keys()
        {
        }
        /**
         * maybe_translate_link_targets
         *
         * @param string|array $metadata  - Always null for post metadata.
         * @param int          $object_id - Post ID for post metadata
         * @param string       $meta_key  - metadata key.
         * @param bool         $single    - Indicates if processing only a single $metadata value or array of values.
         *
         * @return string|array Original or Modified $metadata.
         */
        public function maybe_translate_link_targets($metadata, $object_id, $meta_key, $single)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_Fields_Post_Meta_Info_Factory implements \IWPML_AJAX_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Translate_Link_Targets_In_Custom_Fields_Hooks
    {
        /**
         * WPML_Translate_Link_Targets_In_Custom_Fields_Hook constructor.
         *
         * @param WPML_Translate_Link_Targets_In_Custom_Fields $translate_links
         * @param WPML_WP_API                                  $wp_api
         */
        public function __construct($translate_links, &$wp_api)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Template_Service
    {
        public function show($model, $template);
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Twig_Template implements \IWPML_Template_Service
    {
        /**
         * WPML_Twig_Template constructor.
         *
         * @param Twig_Environment $twig
         */
        public function __construct(\WPML\Core\Twig_Environment $twig)
        {
        }
        public function show($model, $template)
        {
        }
    }
    /**
     * Class WPML_Twig_Template_Loader
     */
    class WPML_Twig_Template_Loader
    {
        /**
         * WPML_Twig_Template_Loader constructor.
         *
         * @param array $paths
         */
        public function __construct(array $paths)
        {
        }
        /**
         * @return WPML_Twig_Template
         */
        public function get_template()
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 4/10/17
     * Time: 10:15 AM
     */
    class WPML_Translation_Modes
    {
        public function is_translatable_mode($mode)
        {
        }
        public function get_options_for_post_type($post_type_label)
        {
        }
        public function get_options()
        {
        }
    }
    class WPML_Post_Types extends \WPML_SP_User
    {
        public function get_translatable()
        {
        }
        public function get_readonly()
        {
        }
        public function get_translatable_and_readonly()
        {
        }
    }
    class WPML_WP_Options_General_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        protected function get_screen_regex()
        {
        }
        protected function create_hooks()
        {
        }
    }
    class WPML_WP_Options_General_Hooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function admin_enqueue_scripts($hook)
        {
        }
    }
    abstract class WPML_Templates_Factory
    {
        const NOTICE_GROUP = 'template_factory';
        const OTGS_TWIG_CACHE_DISABLED_KEY = '_otgs_twig_cache_disabled';
        /** @var array */
        protected $custom_filters;
        /** @var array */
        protected $custom_functions;
        /** @var string|array */
        protected $template_paths;
        /** @var string|bool */
        protected $cache_directory;
        protected $template_string;
        /** @var Twig_Environment */
        protected $twig;
        /**
         * WPML_Templates_Factory constructor.
         *
         * @param array       $custom_functions
         * @param array       $custom_filters
         * @param WPML_WP_API $wp_api
         */
        public function __construct(array $custom_functions = array(), array $custom_filters = array(), $wp_api = \null)
        {
        }
        protected abstract function init_template_base_dir();
        /**
         * @param ?string $template
         * @param ?array<string,mixed> $model
         *
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function show($template = \null, $model = \null)
        {
        }
        /**
         * @param ?string $template
         * @param ?array<string,mixed> $model
         *
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function get_view($template = \null, $model = \null)
        {
        }
        protected function maybe_init_twig()
        {
        }
        public abstract function get_template();
        public abstract function get_model();
        /**
         * @return Twig_Environment
         */
        protected function get_twig()
        {
        }
        /**
         * @param RuntimeException $e
         */
        protected function add_exception_notice(\RuntimeException $e)
        {
        }
        /**
         * @return WPML_WP_API
         */
        protected function get_wp_api()
        {
        }
        protected function disable_twig_cache()
        {
        }
        protected function is_caching_enabled()
        {
        }
        /**
         * @return bool
         */
        protected function is_string_template()
        {
        }
        /**
         * @return \WPML\Core\Twig_LoaderInterface
         */
        protected function get_twig_loader()
        {
        }
    }
    /**
     * Class WPML_AJAX_Base_Factory
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_AJAX_Base_Factory implements \IWPML_AJAX_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /**
         * This loader must be deferred at least to 'plugins_loaded' to make sure
         * all the WP functions needed to validate the request are already loaded
         *
         * @return string
         */
        public function get_load_action()
        {
        }
        public function is_valid_action($ajax_action)
        {
        }
        /**
         * @param WPML_AJAX_Action_Validation $ajax_action_validation
         */
        public function set_ajax_action_validation(\WPML_AJAX_Action_Validation $ajax_action_validation)
        {
        }
    }
    /**
     * Class WPML_AJAX_Action_Validation
     *
     * @author OnTheGoSystems
     */
    class WPML_AJAX_Action_Validation
    {
        /**
         * @param string $action_name
         *
         * @return bool
         */
        public function is_valid($action_name)
        {
        }
    }
}
namespace WPML\Action {
    /**
     * Class Type
     *
     * @package WPML\Action
     *
     * Determines the type of action that a class implements. Can be
     * one or more of:
     * backend, frontend, ajax, rest, cli or dic
     *
     * dic means that the class can be loaded via Dependency Injection Container
     */
    class Type
    {
        /**
         * Info constructor.
         *
         * @param string $class_name The class name of the action or action loader
         */
        public function __construct($class_name)
        {
        }
        /**
         * @param string $type The type of action 'backend', 'frontend', 'ajax', 'rest', 'cli' or 'dic'
         *
         * @return bool
         */
        public function is($type)
        {
        }
    }
}
namespace {
    /**
     * WPML_Action_Filter_Loader class file
     *
     * @package WPML\Core
     */
    /**
     * Class WPML_Action_Filter_Loader
     */
    class WPML_Action_Filter_Loader
    {
        /**
         * Load action filter
         *
         * @param string[] $loaders Action loaders.
         */
        public function load($loaders)
        {
        }
        /**
         * Deferred action loader
         */
        public function deferred_loader()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_ICL_Client
    {
        /**
         * WPML_ICL_Client constructor.
         *
         * @param WP_Http     $http
         * @param WPML_WP_API $wp_api
         */
        public function __construct($http, $wp_api)
        {
        }
        function request($request_url)
        {
        }
        public function get_error()
        {
        }
        /**
         * @param string $method
         */
        public function set_method($method)
        {
        }
        public function set_post_data($post_data)
        {
        }
    }
    /**
     * Class WPML_TM_CMS_ID
     */
    class WPML_TM_CMS_ID extends \WPML_TM_Record_User
    {
        /**
         * WPML_TM_CMS_ID constructor.
         *
         * @param WPML_TM_Records              $tm_records
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct(&$tm_records, &$job_factory)
        {
        }
        /**
         * @param int    $post_id
         * @param string $post_type
         * @param string $source_language
         * @param string $target_language
         *
         * @return string
         */
        public function build_cms_id($post_id, $post_type, $source_language, $target_language)
        {
        }
        /**
         * Returns the cms_id for a given job
         *
         * @param int $job_id
         *
         * @return false|string
         */
        function cms_id_from_job_id($job_id)
        {
        }
        /**
         * @param string $cms_id
         *
         * @return array;
         */
        public function parse_cms_id($cms_id)
        {
        }
        /**
         * @param string                        $cms_id
         * @param bool|TranslationProxy_Service $translation_service
         *
         * @return int|null translation id for the given cms_id's target
         */
        public function get_translation_id($cms_id, $translation_service = \false)
        {
        }
    }
    class WPML_Translation_Proxy_Networking
    {
        const API_VERSION = 1.1;
        public function __construct(\WP_Http $http, \WPML_TP_Lock $tp_lock)
        {
        }
        /**
         * @param string    $url
         * @param array     $params
         * @param string    $method
         * @param bool|true $has_return_value
         * @param bool|true $json_response
         * @param bool|true $has_api_response
         *
         * @return array|mixed|stdClass|string
         * @throws WPMLTranslationProxyApiException
         */
        public function send_request($url, $params = array(), $method = 'GET', $has_return_value = \true, $json_response = \true, $has_api_response = \true)
        {
        }
        public function get_extra_fields_remote($project)
        {
        }
    }
    class WPML_TranslationProxy_Communication_Log
    {
        public function __construct(\SitePress $sitepress)
        {
        }
        public function log_call($url, $params)
        {
        }
        public function get_keys_to_block()
        {
        }
        public function log_response($response)
        {
        }
        public function log_error($message)
        {
        }
        public function log_xml_rpc($data)
        {
        }
        public function get_log()
        {
        }
        public function clear_log()
        {
        }
        public function is_logging_enabled()
        {
        }
        /**
         * @param string|array|stdClass $params
         *
         * @return array|stdClass
         */
        public function sanitize_data($params)
        {
        }
        /**
         * @param $url
         *
         * @return mixed
         */
        public function sanitize_url($url)
        {
        }
        public function set_logging_state($state)
        {
        }
        public function add_com_log_link()
        {
        }
    }
    abstract class WPML_TP_Project_User
    {
        /** @var TranslationProxy_Project $project */
        protected $project;
        /**
         * WPML_TP_Project_User constructor.
         *
         * @param TranslationProxy_Project $project
         */
        public function __construct(&$project)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TP_Extra_Field_Display
    {
        /**
         * WPML_TP_Extra_Field_Display constructor.
         */
        public function __construct()
        {
        }
        public function render($field)
        {
        }
    }
    class WPML_TP_String_Job extends \WPML_WPDB_User
    {
        /**
         * WPML_TP_String_Job constructor.
         *
         * @param wpdb                         $wpdb
         * @param WPML_Translation_Basket      $basket
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct(&$wpdb, &$basket, &$job_factory)
        {
        }
        function send_strings_to_translation_service($string_ids, $target_language, $translator_id)
        {
        }
    }
    class WPML_TM_Sync_Jobs_Revision
    {
        /**
         * WPML_TM_Sync_Jobs_Revision constructor.
         *
         * @param WPML_TM_Jobs_Repository $jobs_repository
         * @param WPML_TP_Jobs_API        $tp_api
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Jobs_API $tp_api)
        {
        }
        /**
         * @return WPML_TM_Job_Entity[]
         * @throws WPML_TP_API_Exception
         */
        public function sync()
        {
        }
    }
    class WPML_TP_Sync_Ajax_Handler
    {
        const AJAX_ACTION = 'wpml-tp-sync-job-states';
        /**
         * WPML_TP_Sync_Jobs constructor.
         *
         * @param WPML_TP_Sync_Jobs      $tp_sync
         * @param WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up
         */
        public function __construct(\WPML_TP_Sync_Jobs $tp_sync, \WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up)
        {
        }
        public function add_hooks()
        {
        }
        public function handle()
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return array
         */
        public function map_job_to_result(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Sync_Installer_Wrapper
    {
        /**
         * @return bool
         */
        public function is_wpml_registered()
        {
        }
    }
    class WPML_TP_Sync_Update_Job
    {
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         */
        public function update_state(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Sync_Jobs_Status
    {
        /**
         * WPML_TM_Sync_Jobs_Status constructor.
         *
         * @param WPML_TM_Jobs_Repository $jobs_repository
         * @param WPML_TP_Jobs_API        $tp_api
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Jobs_API $tp_api)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        public function sync()
        {
        }
    }
    class WPML_TP_Sync_Jobs
    {
        /**
         * WPML_TP_Sync_Jobs constructor.
         *
         * @param WPML_TM_Sync_Jobs_Status   $jobs_status_sync
         * @param WPML_TM_Sync_Jobs_Revision $jobs_revision_sync
         * @param WPML_TP_Sync_Update_Job    $update_job
         */
        public function __construct(\WPML_TM_Sync_Jobs_Status $jobs_status_sync, \WPML_TM_Sync_Jobs_Revision $jobs_revision_sync, \WPML_TP_Sync_Update_Job $update_job)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        public function sync()
        {
        }
    }
    class WPML_TP_Sync_Orphan_Jobs_Factory
    {
        /**
         * @return WPML_TP_Sync_Orphan_Jobs
         */
        public function create()
        {
        }
    }
    class WPML_TP_Sync_Orphan_Jobs
    {
        /**
         * @param WPML_TM_Jobs_Repository $jobs_repository
         * @param WPML_TP_Sync_Update_Job $update_job
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Sync_Update_Job $update_job)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         */
        public function cancel_orphans()
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         */
        public function cancel_job(\WPML_TM_Job_Entity $job)
        {
        }
    }
    /**
     * Class WPML_TP_Translator
     */
    class WPML_TP_Translator
    {
        /**
         * Return translator status array.
         *
         * @param bool $force
         *
         * @return array
         */
        public function get_icl_translator_status($force = \false)
        {
        }
    }
    class WPML_TP_HTTP_Request_Filter
    {
        /**
         * @return array filtered response
         */
        public function build_request_context(array $request)
        {
        }
    }
    class WPML_TP_Services
    {
        public function get_current_project()
        {
        }
        public function get_current_service()
        {
        }
        /**
         * @param      $service_id
         * @param bool       $custom_fields
         *
         * @throws WPMLTranslationProxyApiException
         */
        public function select_service($service_id, $custom_fields = \false)
        {
        }
    }
    abstract class WPML_TP_API
    {
        /** @var WPML_TP_API_Client */
        protected $client;
        /** @var WPML_TP_Project */
        protected $project;
        /** @var WPML_TP_API_Log_Interface */
        protected $logger;
        public function __construct(\WPML_TP_API_Client $client, \WPML_TP_Project $project, \WPML_TP_API_Log_Interface $logger = \null)
        {
        }
        protected function log($action, array $params = array())
        {
        }
    }
    class WPML_TP_Batch_Sync_API extends \WPML_TP_API
    {
        const INIT_SYNC = '/batches/sync.json';
        const CHECK_STATUS = '/batches/sync/status.json';
        /**
         * @param array $batch_ids
         *
         * @return int[]
         * @throws WPML_TP_API_Exception
         */
        public function init_synchronization(array $batch_ids)
        {
        }
        /**
         * @return int[]
         * @throws WPML_TP_API_Exception
         */
        public function check_progress()
        {
        }
    }
    class WPML_TP_Project_API extends \WPML_TP_API
    {
        const API_VERSION = 1.1;
        const PROJECTS_ENDPOINT = '/projects.json';
        /**
         * @throws WPML_TP_API_Exception
         */
        public function refresh_language_pairs()
        {
        }
        /**
         * @param stdClass    $service
         * @param SiteDetails $site_details
         *
         * @return stdClass
         * @throws WPML_TP_API_Exception
         */
        public function create_project(\stdClass $service, \WPML\TM\TranslationProxy\Services\Project\SiteDetails $site_details)
        {
        }
        /**
         * @param Project   $project
         * @param \stdClass $credentials
         *
         * @throws WPML_TP_API_Exception
         */
        public function update_project_credentials(\WPML\TM\TranslationProxy\Services\Project\Project $project, \stdClass $credentials)
        {
        }
        /**
         * @param Project $project
         *
         * @return array|mixed|stdClass|string
         * @throws WPML_TP_API_Exception
         */
        public function get_extra_fields(\WPML\TM\TranslationProxy\Services\Project\Project $project)
        {
        }
    }
    class WPML_TP_API_Request
    {
        const API_VERSION = 1.1;
        /**
         * @param string $url
         */
        public function __construct($url)
        {
        }
        /**
         * @param array $params
         */
        public function set_params(array $params)
        {
        }
        /**
         * @param string $method
         */
        public function set_method($method)
        {
        }
        /**
         * @param bool $has_api_response
         */
        public function set_has_api_response($has_api_response)
        {
        }
        /**
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * @return array
         */
        public function get_params()
        {
        }
        /**
         * @return string
         */
        public function get_method()
        {
        }
        /**
         * @return bool
         */
        public function has_api_response()
        {
        }
    }
    class WPML_TP_Xliff_Parser
    {
        /**
         * WPML_TP_Xliff_Parser constructor.
         *
         * @param WPML_TM_Validate_HTML $validate_html
         */
        public function __construct(\WPML_TM_Validate_HTML $validate_html)
        {
        }
        /**
         * @param SimpleXMLElement $xliff
         *
         * @return WPML_TP_Translation_Collection
         */
        public function parse(\SimpleXMLElement $xliff)
        {
        }
        /**
         * @param SimpleXMLElement $xliff_node
         * @param string           $field
         *
         * @return string
         */
        protected function get_cdata_value(\SimpleXMLElement $xliff_node, $field)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function restore_new_line($string)
        {
        }
    }
    class WPML_TP_API_Client
    {
        public function __construct($proxy_url, \WP_Http $http, \WPML_TP_Lock $tp_lock, \WPML_TP_HTTP_Request_Filter $request_filter)
        {
        }
        /**
         * @param WPML_TP_API_Request $request
         * @param bool                $raw_json_response
         *
         * @return array|mixed|stdClass|string
         * @throws WPML_TP_API_Exception
         */
        public function send_request(\WPML_TP_API_Request $request, $raw_json_response = \false)
        {
        }
    }
    class WPML_TP_Job_States
    {
        const RECEIVED = 'received';
        const WAITING_TRANSLATIONS = 'waiting_translation';
        const TRANSLATION_READY = 'translation_ready';
        const DELIVERED = 'delivered';
        const CANCELLED = 'cancelled';
        const ANY = 'any';
        /**
         * @return array
         */
        public static function get_possible_states()
        {
        }
        /**
         * @return string
         */
        public static function get_default_state()
        {
        }
        /**
         * @return array
         */
        public static function get_finished_states()
        {
        }
        public static function map_tp_state_to_local($tp_state)
        {
        }
    }
    interface WPML_TP_API_Log_Interface
    {
        public function log($action, $data = array());
    }
    class WPML_TM_Log implements \WPML_TP_API_Log_Interface
    {
        const LOG_WP_OPTION = '_wpml_tp_api_Logger';
        const LOG_MAX_SIZE = 500;
        public function log($action, $data = array())
        {
        }
        public function flush_log()
        {
        }
        public function get_log_data()
        {
        }
    }
    class WPML_TP_API_Exception extends \Exception
    {
        public function __construct($message, \WPML_TP_API_Request $request = \null, $response = \null)
        {
        }
    }
    class WPML_TP_Job_Status
    {
        /**
         * @param int                        $tp_id
         * @param int                        $batch_id
         * @param string                     $state
         * @param WPML_TM_Job_TS_Status|null $ts_status
         * @param int                        $revision
         */
        public function __construct($tp_id, $batch_id, $state, $revision = 1, $ts_status = \null)
        {
        }
        /**
         * @return int
         */
        public function get_tp_id()
        {
        }
        /**
         * @return int
         */
        public function get_batch_id()
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @return int
         */
        public function get_revision()
        {
        }
        /**
         * @return WPML_TM_Job_TS_Status|null
         */
        public function get_ts_status()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPMLTranslationProxyApiException extends \Exception
    {
        public function __construct($message, $code = 0)
        {
        }
    }
    class WPML_TP_Jobs_API extends \WPML_TP_API
    {
        const CHUNK_SIZE = 100;
        /**
         * @param int[] $tp_job_ids
         *
         * @return WPML_TP_Job_Status[]
         * @throws WPML_TP_API_Exception
         */
        public function get_jobs_statuses(array $tp_job_ids)
        {
        }
        /**
         * @param array $cms_ids
         * @param bool  $archived
         *
         * @return array|mixed|stdClass|string
         * @throws WPML_TP_API_Exception
         */
        public function get_jobs_per_cms_ids(array $cms_ids, $archived = \false)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         * @param string             $state
         * @param string             $post_url
         *
         * @throws WPML_TP_API_Exception
         */
        public function update_job_state(\WPML_TM_Job_Entity $job, $state = \WPML_TP_Job_States::DELIVERED, $post_url = \null)
        {
        }
        /**
         * @return WPML_TP_Job_Status[]
         * @throws WPML_TP_API_Exception
         */
        public function get_revised_jobs()
        {
        }
        /**
         * @param int $tp_job_id
         *
         * @return string
         * @throws WPML_TP_API_Exception When response is incorrect.
         */
        public function get_translated_xliff_download_url($tp_job_id)
        {
        }
    }
    class WPML_TP_XLIFF_API extends \WPML_TP_API
    {
        public function __construct(\WPML_TP_API_Client $client, \WPML_TP_Project $project, \WPML_TP_API_Log_Interface $logger, \WPML_TP_Xliff_Parser $xliff_parser, \WPML_TP_Jobs_API $jobs_api)
        {
        }
        /**
         * @param int  $tp_job_id
         * @param bool $parse
         *
         * @return WPML_TP_Translation_Collection|string
         * @throws WPML_TP_API_Exception
         */
        public function get_remote_translations($tp_job_id, $parse = \true)
        {
        }
    }
    class WPML_TP_Refresh_Language_Pairs
    {
        const AJAX_ACTION = 'wpml-tp-refresh-language-pairs';
        /**
         * WPML_TP_AJAX constructor.
         *
         * @param WPML_TP_Project_API $wpml_tp_api
         */
        public function __construct(\WPML_TP_Project_API $wpml_tp_api)
        {
        }
        public function add_hooks()
        {
        }
        public function refresh_language_pairs()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TP_Extra_Field
    {
        /** @var string */
        public $type = 'text';
        /** @var string */
        public $label;
        /** @var string */
        public $name;
        /** @var array */
        public $items;
    }
}
namespace WPML\TM\TranslationProxy\Services {
    class Storage
    {
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Gets the current translation service
         *
         * @return bool|\stdClass
         */
        public function getCurrentService()
        {
        }
        /**
         * Saves the input service as the current translation service setting.
         *
         * @param \stdClass $service
         */
        public function setCurrentService(\stdClass $service)
        {
        }
    }
}
namespace WPML\TM\TranslationProxy\Services\Project {
    class Project
    {
        /** @var int */
        public $id;
        /** @var string */
        public $accessKey;
        /** @var string */
        public $tsId;
        /** @var string */
        public $tsAccessKey;
        /** @var \stdClass */
        public $extraFields;
        /**
         * @return array
         */
        public function toArray()
        {
        }
        /**
         * @param array $data
         *
         * @return Project
         */
        public static function fromArray(array $data)
        {
        }
        public static function fromResponse(\stdClass $response)
        {
        }
    }
    class SiteDetails
    {
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @return string
         */
        public function getDeliveryMethod()
        {
        }
        /**
         * @return array
         */
        public function getBlogInfo()
        {
        }
        /**
         * @return array
         */
        public function getClientData()
        {
        }
    }
    class Storage
    {
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param \stdClass $service
         *
         * @return Project|null
         */
        public function getByService(\stdClass $service)
        {
        }
        /**
         * @param \stdClass $service
         * @param Project   $project
         */
        public function save(\stdClass $service, \WPML\TM\TranslationProxy\Services\Project\Project $project)
        {
        }
        /**
         * @return Collection
         */
        public function getProjects()
        {
        }
    }
    class Manager
    {
        /**
         * @param \WPML_TP_Project_API $projectApi
         * @param Storage              $projectStorage
         * @param SiteDetails          $siteDetails
         */
        public function __construct(\WPML_TP_Project_API $projectApi, \WPML\TM\TranslationProxy\Services\Project\Storage $projectStorage, \WPML\TM\TranslationProxy\Services\Project\SiteDetails $siteDetails)
        {
        }
        /**
         * @param \stdClass $service
         *
         * @return Project
         * @throws \WPML_TP_API_Exception
         */
        public function create(\stdClass $service)
        {
        }
        /**
         * @param \stdClass $service
         * @param \stdClass $credentials
         *
         * @return Project|null
         * @throws \WPML_TP_API_Exception
         */
        public function updateCredentials(\stdClass $service, \stdClass $credentials)
        {
        }
    }
}
namespace WPML\TM\TranslationProxy\Services {
    class Authorization
    {
        /**
         * @param Storage $storage
         * @param Manager $projectManager
         */
        public function __construct(\WPML\TM\TranslationProxy\Services\Storage $storage, \WPML\TM\TranslationProxy\Services\Project\Manager $projectManager)
        {
        }
        /**
         * @param \stdClass $credentials
         *
         * @throws \RuntimeException
         * @throws \WPML_TP_API_Exception
         */
        public function authorize(\stdClass $credentials)
        {
        }
        /**
         * @param \stdClass $credentials
         *
         * @throws \WPML_TP_API_Exception
         */
        public function updateCredentials(\stdClass $credentials)
        {
        }
        /**
         * @throws \RuntimeException
         */
        public function deauthorize()
        {
        }
    }
    class AuthorizationFactory
    {
        /**
         * @return Authorization
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
}
namespace {
    interface WPML_TP_Apply_Translation_Strategy
    {
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return void
         */
        public function apply(\WPML_TM_Job_Entity $job, \WPML_TP_Translation_Collection $translations);
    }
    class WPML_TP_Apply_Translation_Post_Strategy implements \WPML_TP_Apply_Translation_Strategy
    {
        /**
         * @param WPML_TP_Jobs_API $jobs_api
         */
        public function __construct(\WPML_TP_Jobs_API $jobs_api)
        {
        }
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return void
         * @throws WPML_TP_API_Exception
         */
        public function apply(\WPML_TM_Job_Entity $job, \WPML_TP_Translation_Collection $translations)
        {
        }
    }
    class WPML_TP_Apply_Translation_Strategies
    {
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TP_Apply_Translation_Strategy
         */
        public function get(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TP_Apply_Translation_String_Strategy implements \WPML_TP_Apply_Translation_Strategy
    {
        /**
         * @param WPML_TP_Jobs_API $jobs_api
         * @param wpdb             $wpdb
         */
        public function __construct(\WPML_TP_Jobs_API $jobs_api, \wpdb $wpdb)
        {
        }
        /**
         * @param WPML_TM_Job_Entity             $job
         * @param WPML_TP_Translation_Collection $translations
         *
         * @return void
         * @throws WPML_TP_API_Exception
         */
        public function apply(\WPML_TM_Job_Entity $job, \WPML_TP_Translation_Collection $translations)
        {
        }
    }
    class WPML_TP_Apply_Single_Job
    {
        /**
         * @param WPML_TP_Translations_Repository      $translations_repository
         * @param WPML_TP_Apply_Translation_Strategies $strategy_dispatcher
         */
        public function __construct(\WPML_TP_Translations_Repository $translations_repository, \WPML_TP_Apply_Translation_Strategies $strategy_dispatcher)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return WPML_TM_Job_Entity
         * @throws WPML_TP_API_Exception
         */
        public function apply(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TP_Apply_Translations
    {
        /**
         * @param WPML_TM_Jobs_Repository  $jobs_repository
         * @param WPML_TP_Apply_Single_Job $apply_single_job
         * @param WPML_TP_Sync_Jobs        $tp_sync
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TP_Apply_Single_Job $apply_single_job, \WPML_TP_Sync_Jobs $tp_sync)
        {
        }
        /**
         * @param array $params
         *
         * @return WPML_TM_Jobs_Collection
         * @throws WPML_TP_API_Exception
         */
        public function apply(array $params)
        {
        }
    }
    class WPML_TP_Translation
    {
        /**
         * @param string $field
         * @param string $source
         * @param string $target
         */
        public function __construct($field, $source, $target)
        {
        }
        /**
         * @return string
         */
        public function get_field()
        {
        }
        /**
         * @return string
         */
        public function get_source()
        {
        }
        /**
         * @return string
         */
        public function get_target()
        {
        }
        public function to_array()
        {
        }
    }
    class WPML_TP_Translation_Collection implements \IteratorAggregate
    {
        /**
         * @param WPML_TP_Translation[] $translations
         * @param string                $source_language
         * @param string                $target_language
         */
        public function __construct(array $translations, $source_language, $target_language)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @return string
         */
        public function get_target_language()
        {
        }
        public function getIterator()
        {
        }
        /**
         * @return array
         */
        public function to_array()
        {
        }
    }
    class WPML_TP_Translations_Repository
    {
        /**
         * @param WPML_TP_XLIFF_API       $xliff_api
         * @param WPML_TM_Jobs_Repository $jobs_repository
         */
        public function __construct(\WPML_TP_XLIFF_API $xliff_api, \WPML_TM_Jobs_Repository $jobs_repository)
        {
        }
        /**
         * @param int  $job_id
         * @param int  $job_type
         * @param bool $parse When true, it returns the parsed translation, otherwise, it returns the raw XLIFF.
         *
         * @return WPML_TP_Translation_Collection|string
         * @throws WPML_TP_API_Exception|InvalidArgumentException
         */
        public function get_job_translations($job_id, $job_type, $parse = \true)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         * @param bool               $parse When true, it returns the parsed translation, otherwise, it returns the raw XLIFF.
         *
         * @return WPML_TP_Translation_Collection|string
         * @throws WPML_TP_API_Exception
         */
        public function get_job_translations_by_job_entity(\WPML_TM_Job_Entity $job, $parse = \true)
        {
        }
    }
    class WPML_TP_Lock_Factory
    {
        public function create()
        {
        }
    }
    class WPML_TP_Lock_Notice implements \IWPML_Action
    {
        const NOTICE_GROUP = 'tp-lock';
        const NOTICE_LOCKED = 'locked';
        public function __construct(\WPML_TP_Lock $tp_lock, \WPML_Notices $notices)
        {
        }
        public function add_hooks()
        {
        }
        public function handle_notice()
        {
        }
    }
    class WPML_TP_Lock_Notice_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TP_Lock
    {
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        public function is_locked($url)
        {
        }
        /**
         * @return string|false
         */
        public function get_locker_reason()
        {
        }
    }
    class WPML_Update_PickUp_Method
    {
        public function __construct($sitepress)
        {
        }
        public function update_pickup_method($data, $project = \false)
        {
        }
    }
    class WPML_TranslationProxy_Com_Log
    {
        public static function log_call($url, $params)
        {
        }
        public static function get_keys_to_block()
        {
        }
        public static function log_response($response)
        {
        }
        public static function log_error($message)
        {
        }
        public static function log_xml_rpc($data)
        {
        }
        public static function get_log()
        {
        }
        public static function clear_log()
        {
        }
        public static function is_logging_enabled()
        {
        }
        /**
         * @param string|array|stdClass $params
         *
         * @return array|stdClass
         */
        public static function sanitize_data($params)
        {
        }
        /**
         * @param $url
         *
         * @return mixed
         */
        public static function sanitize_url($url)
        {
        }
        public static function set_logging_state($state)
        {
        }
        public static function add_com_log_link()
        {
        }
    }
    class WPML_TM_API
    {
        /**
         * WPML_TM_API constructor.
         *
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param TranslationManagement    $TranslationManagement
         */
        public function __construct(&$blog_translators, &$TranslationManagement)
        {
        }
        public function get_translation_status_label($status)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param bool        $default
         * @param int|WP_User $user
         * @param array       $args
         *
         * @return bool
         */
        public function is_translator_filter($default, $user, $args)
        {
        }
        public function edit_translator_action($user, $language_pairs)
        {
        }
        public function translator_languages_pairs_filter($default, $user)
        {
        }
    }
    /**
     * WPML_File class file.
     *
     * @package wpml-core
     */
    /**
     * Class WPML_File
     */
    class WPML_File
    {
        /**
         * WPML_File constructor.
         *
         * @param WPML_WP_API|null          $wp_api     WPML WP API instance.
         * @param WP_Filesystem_Direct|null $filesystem WP_Filesystem_Direct instance.
         */
        public function __construct(\WPML_WP_API $wp_api = \null, \WP_Filesystem_Direct $filesystem = \null)
        {
        }
        /**
         * Fix directory separator if backslash is used.
         *
         * @param string $path Path to fix.
         *
         * @return string
         */
        public function fix_dir_separator($path)
        {
        }
        /**
         * Get uri from file path.
         *
         * @param string  $path File path.
         * @param boolean $trimProtocol
         *
         * @return string
         */
        public function get_uri_from_path($path, $trimProtocol = \true)
        {
        }
        /**
         * Get path relative to ABSPATH.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_relative_path($path)
        {
        }
        /**
         * Get full file path.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_full_path($path)
        {
        }
        /**
         * Check if file exists.
         *
         * @param string $path File path.
         *
         * @return bool
         */
        public function file_exists($path)
        {
        }
        /**
         * Get file modification time.
         *
         * @param string $path File path.
         *
         * @return int
         */
        public function get_file_modified_timestamp($path)
        {
        }
    }
    /**
     * Class WPML_TM_Translation_Priorities_Register_Action
     */
    class WPML_TM_Translation_Priorities_Register_Action implements \IWPML_Action
    {
        const TRANSLATION_PRIORITY_TAXONOMY = 'translation_priority';
        /**
         * WPML_TM_Translation_Priorities_Register_Action constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function register_translation_priority_taxonomy()
        {
        }
    }
    /**
     * Class WPML_Translation_Priorities
     */
    class WPML_TM_Translation_Priorities
    {
        const DEFAULT_TRANSLATION_PRIORITY_VALUE_SLUG = 'optional';
        const TAXONOMY = 'translation_priority';
        public function get_values()
        {
        }
        /**
         * @return int
         */
        public function get_default_value_id()
        {
        }
        /**
         * @return WP_Term
         */
        public static function get_default_term()
        {
        }
        /**
         * @param int    $term_taxonomy_id
         * @param string $original_name
         * @param string $target_language
         *
         * @return int|bool
         */
        public static function insert_missing_translation($term_taxonomy_id, $original_name, $target_language)
        {
        }
        public static function insert_missing_default_terms()
        {
        }
    }
    /**
     * Class WPML_TM_Translation_Priorities_Factory
     */
    class WPML_TM_Translation_Priorities_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    abstract class WPML_TM_AJAX_Factory_Obsolete
    {
        protected $ajax_actions;
        /**
         * @var WPML_WP_API
         */
        protected $wpml_wp_api;
        public function __construct(&$wpml_wp_api)
        {
        }
        protected function init()
        {
        }
        protected function add_ajax_action($handle, $callback)
        {
        }
        public abstract function enqueue_resources($hook_suffix);
    }
    class WPML_TM_Service_Activation_AJAX extends \WPML_TM_AJAX_Factory_Obsolete
    {
        /**
         * @param WPML_WP_API                  $wpml_wp_api
         * @param WPML_Translation_Job_Factory $job_factory
         */
        public function __construct(&$wpml_wp_api, &$job_factory)
        {
        }
        public function get_ignore_local_jobs()
        {
        }
        public function set_ignore_local_jobs($value)
        {
        }
        public function cancel_open_local_translators_jobs()
        {
        }
        public function keep_open_local_translators_jobs()
        {
        }
        public function register_resources()
        {
        }
        public function enqueue_resources($hook_suffix)
        {
        }
    }
}
namespace WPML\TM\AutomaticTranslation\Actions {
    class Actions implements \IWPML_Action
    {
        /** @see \WPML\PB\Shutdown\Hooks */
        const PRIORITY_AFTER_PB_PROCESS = 100;
        public function __construct(\WPML_Translation_Element_Factory $translationElementFactory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int           $postId
         * @param callable|null $onComplete
         *
         * @throws \WPML\Auryn\InjectionException
         */
        public function sendToTranslation($postId, $onComplete = null)
        {
        }
        public function createTranslationJobs(\WPML_Post_Element $postElement, $targetLanguages)
        {
        }
        /**
         * @param       $sourceLanguage
         * @param array $elements E.g. [ [1, 'fr'], [1, 'de'], [2, 'fr'] ]
         */
        public function createNewTranslationJobs($sourceLanguage, array $elements)
        {
        }
    }
    class ActionsFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return Actions|null
         * @throws \WPML\Auryn\InjectionException
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_MO_File_Search
    {
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress, \WP_Filesystem_Direct $filesystem = \null)
        {
        }
        /**
         * @param array $active_languages
         *
         * @return bool
         */
        public function has_mo_file_for_any_language($active_languages)
        {
        }
        public function reload_theme_dirs()
        {
        }
        /**
         * @param string $lang_code
         *
         * @return bool
         */
        public function can_find_mo_file($lang_code)
        {
        }
        /**
         * @return string
         */
        protected function get_template_path()
        {
        }
        /**
         * @return array
         */
        public function find_theme_mo_dirs()
        {
        }
        /**
         * @param string $folder
         * @param int $rec
         *
         * @return bool
         */
        public function determine_mo_folder($folder, $rec = 0)
        {
        }
        /**
         * @return array
         */
        public function get_dir_names()
        {
        }
        /**
         * @param array $dirs
         */
        public function save_mo_dirs($dirs)
        {
        }
    }
    /**
     * Class WPML_TM_API_Hook_Links
     *
     * This class provides various links by hooks
     */
    class WPML_TM_API_Hook_Links implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function get_post_translation_settings_link($link)
        {
        }
    }
    /**
     * Class WPML_API_Hook_Links
     *
     * This class provides various links by hooks
     */
    class WPML_API_Hook_Links implements \IWPML_Action
    {
        const POST_TRANSLATION_SETTINGS_PRIORITY = 10;
        const LINK_TO_TRANSLATION_PRIORITY = 9;
        public function __construct(\WPML_Post_Status_Display_Factory $post_status_display_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function get_post_translation_settings_link($link)
        {
        }
        public function get_link_to_edit_translation($link, $post_id, $lang)
        {
        }
    }
    class WPML_TM_API_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_API_Hook_Translation_Element implements \IWPML_Action
    {
        /**
         * WPML_API_Hook_Post constructor.
         *
         * @param SitePress                        $sitepress
         * @param WPML_Translation_Element_Factory $translation_element_factory
         * @param WPML_Flags_Factory               $flags_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_Translation_Element_Factory $translation_element_factory, \WPML_Flags_Factory $flags_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $default
         * @param int    $element_id
         * @param string $element_type any of `WPML_Translation_Element_Factory::ELEMENT_TYPE_POST`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_TERM`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_MENU`
         *
         * @return string
         */
        public function get_post_language_flag_url($default, $element_id, $element_type = \WPML_Translation_Element_Factory::ELEMENT_TYPE_POST)
        {
        }
    }
    class WPML_API_Hook_Permalink implements \IWPML_Action
    {
        public function __construct(\WPML_URL_Converter $url_converter, \IWPML_Resolve_Object_Url $absolute_resolver)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string      $url
         * @param null|string $lang
         * @param bool        $absolute_url If `true`, WPML will try to resolve the object behind the URL
         *                                  and try to find the matching translation's URL.
         *                                  WARNING: This is a heavy process which could lead to performance hit.
         *
         * @return string
         */
        public function wpml_permalink_filter($url, $lang = \null, $absolute_url = \false)
        {
        }
    }
    class WPML_API_Hook_Translation_Mode implements \IWPML_Action
    {
        const OPTION_KEY = 'custom_posts_sync_option';
        /** Allowed modes */
        const DO_NOT_TRANSLATE = 'do_not_translate';
        const TRANSLATE = 'translate';
        const DISPLAY_AS_TRANSLATED = 'display_as_translated';
        public function __construct(\WPML_Settings_Helper $settings)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $post_type
         * @param string $translation_mode any of
         *                                 `WPML_API_Hook_Translation_Mode::DO_NOT_TRANSLATE`,
         *                                 `WPML_API_Hook_Translation_Mode::TRANSLATE`,
         *                                 `WPML_API_Hook_Translation_Mode::DISPLAY_AS_TRANSLATED`
         */
        public function set_mode_for_post_type($post_type, $translation_mode)
        {
        }
    }
    /**
     * Class WPML_API_Hook_Copy_Post_To_Language
     */
    class WPML_API_Hook_Copy_Post_To_Language implements \IWPML_Action
    {
        public function __construct(\WPML_Post_Duplication $post_duplication)
        {
        }
        public function add_hooks()
        {
        }
        public function copy_post_to_language($post_id, $target_language, $mark_as_duplicate)
        {
        }
    }
    class WPML_API_Hook_Sync_Custom_Fields implements \IWPML_Action
    {
        public function __construct(\WPML_Sync_Custom_Fields $sync_custom_fields)
        {
        }
        public function add_hooks()
        {
        }
        public function sync_custom_field($post_id, $custom_field_name)
        {
        }
        public function sync_all_custom_fields($post_id)
        {
        }
    }
    class WPML_API_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_REST_Base
     *
     * @author OnTheGo Systems
     */
    abstract class WPML_REST_Base
    {
        const CAPABILITY_EXTERNAL = 'external';
        const REST_NAMESPACE = 'wpml/v1';
        /**
         * @var string
         */
        protected $namespace;
        /**
         * WPML_REST_Base constructor.
         *
         * @param string|null $namespace Defaults to `\WPML_REST_Base::REST_NAMESPACE`.
         */
        public function __construct($namespace = \null)
        {
        }
        public abstract function add_hooks();
        public function validate_permission(\WP_REST_Request $request)
        {
        }
        public abstract function get_allowed_capabilities(\WP_REST_Request $request);
        /**
         * @param string $route
         * @param array  $args
         */
        protected function register_route($route, array $args)
        {
        }
    }
    class WPML_TM_REST_Batch_Sync extends \WPML_REST_Base
    {
        public function __construct(\WPML_TP_Batch_Sync_API $batch_sync_api)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        public function init(\WP_REST_Request $request)
        {
        }
        public function check_progress()
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function validate_batch_ids($batches)
        {
        }
        public function sanitize_batch_ids($batches)
        {
        }
    }
    /**
     * Class WPML_TM_REST_Jobs
     */
    class WPML_TM_REST_Jobs extends \WPML_REST_Base
    {
        const CAPABILITY = 'translate';
        /**
         * WPML_TM_REST_Jobs constructor.
         *
         * @param WPML_TM_Jobs_Repository           $jobs_repository        Jobs repository.
         * @param WPML_TM_Rest_Jobs_Criteria_Parser $criteria_parser        Rest jobs criteria parser.
         * @param WPML_TM_Rest_Jobs_View_Model      $view_model             View model.
         * @param WPML_TP_Sync_Update_Job           $update_jobs            Update jobs synchronisation.
         * @param WPML_TM_Last_Picked_Up            $wpml_tm_last_picked_up Last picked up jobs.
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, \WPML_TM_Rest_Jobs_Criteria_Parser $criteria_parser, \WPML_TM_Rest_Jobs_View_Model $view_model, \WPML_TP_Sync_Update_Job $update_jobs, \WPML_TM_Last_Picked_Up $wpml_tm_last_picked_up)
        {
        }
        /**
         * Add hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Register routes
         */
        public function register_routes()
        {
        }
        /**
         * Get jobs
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array|WP_Error
         */
        public function get_jobs(\WP_REST_Request $request)
        {
        }
        /**
         * Assign job.
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array
         * @throws \InvalidArgumentException Exception on error.
         */
        public function assign_job(\WP_REST_Request $request)
        {
        }
        /**
         * Cancel job
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array|WP_Error
         */
        public function cancel_jobs(\WP_REST_Request $request)
        {
        }
        /**
         * Get allowed capabilities
         *
         * @param WP_REST_Request $request REST request.
         *
         * @return array|string
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * Validate sorting
         *
         * @param mixed $sorting Sorting parameters.
         *
         * @return bool
         */
        public function validate_sorting($sorting)
        {
        }
    }
}
namespace WPML\Rest {
    class Adaptor extends \WPML_REST_Base
    {
        public function set_target(\WPML\Rest\ITarget $target)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Rest
    {
        /**
         * WPML_Rest constructor.
         *
         * @param WP_Http $http
         */
        public function __construct(\WP_Http $http)
        {
        }
        public function is_available()
        {
        }
        public function is_rest_request()
        {
        }
        public function has_registered_routes()
        {
        }
        public function has_discovered_routes()
        {
        }
        public function get_discovery_url()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_REST_Extend_Args_Factory implements \IWPML_REST_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
}
namespace WPML\Rest {
    interface ITarget
    {
        function get_routes();
        function get_allowed_capabilities(\WP_REST_Request $request);
        function get_namespace();
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_REST_Factory_Loader implements \IWPML_REST_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        const REST_API_INIT_ACTION = 'rest_api_init';
        /**
         * @return string
         */
        public function get_load_action()
        {
        }
    }
    class WPML_TM_REST_TP_XLIFF_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_REST_Batch_Sync_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return WPML_TM_REST_Batch_Sync
         */
        public function create()
        {
        }
    }
    class WPML_TM_REST_Jobs_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return WPML_TM_REST_Jobs
         */
        public function create()
        {
        }
    }
}
namespace WPML\REST\XMLConfig\Custom {
    class Actions extends \WPML_REST_Base
    {
        public function __construct(\WPML_Custom_XML $custom_xml, \WPML_XML_Config_Validate $validate)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * REST
         *
         * @param \WP_REST_Request $request
         *
         * @return string
         */
        public function update_content(\WP_REST_Request $request)
        {
        }
        /**
         * REST
         *
         * @param \WP_REST_Request $request
         *
         * @return \LibXMLError[]
         */
        public function validate_content(\WP_REST_Request $request)
        {
        }
        /**
         * REST
         */
        public function read_content()
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
    class Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_REST_Extend_Args implements \IWPML_Action
    {
        const REST_LANGUAGE_ARGUMENT = 'wpml_language';
        public function __construct(\SitePress $sitepress)
        {
        }
        function add_hooks()
        {
        }
        /**
         * Adds the `wpml_language` argument (optional) to all REST calls with arguments.
         *
         * @param array $endpoints
         *
         * @return array
         */
        public function rest_endpoints(array $endpoints)
        {
        }
        /**
         * If `wpml_language` is provided, backups the current language, then switch to the provided one.
         *
         * @param \WP_REST_Response|array|mixed $response
         * @param \WP_REST_Server|array|mixed   $rest_server
         * @param \WP_REST_Request              $request
         *
         * @return mixed
         */
        public function rest_request_before_callbacks($response, $rest_server, $request)
        {
        }
        /**
         * Restore the backup language, if set.
         *
         * @param \WP_REST_Response|array|mixed $response
         *
         * @return mixed
         */
        public function rest_request_after_callbacks($response)
        {
        }
    }
}
namespace WPML\TM\ATE {
    class Proxy extends \WPML_REST_Base
    {
        public function __construct(\WPML_TM_ATE_AMS_Endpoints $endpoints)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param \WP_REST_Request $request
         */
        public function proxy(\WP_REST_Request $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return string[]|string
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
}
namespace WPML\Rest {
    abstract class Base implements \WPML\Rest\ITarget, \IWPML_Action
    {
        public function __construct(\WPML\Rest\Adaptor $adaptor)
        {
        }
        /**
         * @return string
         */
        public abstract function get_namespace();
        public function add_hooks()
        {
        }
        /**
         * @return array
         */
        public static function getStringType()
        {
        }
        /**
         * @return array
         */
        public static function getIntType()
        {
        }
    }
}
namespace {
    class WPML_TM_REST_Apply_TP_Translation extends \WPML_REST_Base
    {
        public function __construct(\WPML_TP_Apply_Translations $apply_translations)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @return WP_Error|int|array
         */
        public function apply_translations(\WP_REST_Request $request)
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function map_jobs_to_array(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_REST_Apply_TP_Translation_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return WPML_TM_REST_Apply_TP_Translation
         */
        public function create()
        {
        }
    }
    class WPML_TM_Rest_Jobs_Columns
    {
        /**
         * @return array
         */
        public static function get_columns()
        {
        }
        /**
         * @return array
         */
        public static function get_sortable()
        {
        }
    }
    class WPML_TM_Rest_Jobs_Package_Helper_Factory
    {
        /**
         * @return null|WPML_Package_Helper
         */
        public function create()
        {
        }
    }
    class WPML_TM_Rest_Job_Translator_Name
    {
        public function get($translator_id)
        {
        }
    }
    class WPML_TM_Rest_Job_Progress
    {
        public function __construct()
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return string
         */
        public function get(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Rest_Jobs_Translation_Service
    {
        /**
         * @param string|int $service_id
         *
         * @return string
         */
        public function get_name($service_id)
        {
        }
    }
    class WPML_TM_Rest_Jobs_Element_Info
    {
        /**
         * @param WPML_TM_Rest_Jobs_Package_Helper_Factory $package_helper_factory
         */
        public function __construct(\WPML_TM_Rest_Jobs_Package_Helper_Factory $package_helper_factory)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return array
         */
        public function get(\WPML_TM_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Rest_Jobs_Language_Names
    {
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param string $code
         *
         * @return string
         */
        public function get($code)
        {
        }
        /**
         * @return array
         */
        public function get_active_languages()
        {
        }
    }
    class WPML_TM_Rest_Jobs_Criteria_Parser
    {
        /**
         * @param WP_REST_Request $request
         *
         * @return WPML_TM_Jobs_Search_Params
         */
        public function build_criteria(\WP_REST_Request $request)
        {
        }
    }
    class WPML_TM_Rest_Jobs_View_Model
    {
        /**
         * @param WPML_TM_Rest_Jobs_Translation_Service $translation_service
         * @param WPML_TM_Rest_Jobs_Element_Info $element_info
         * @param WPML_TM_Rest_Jobs_Language_Names $language_names
         * @param WPML_TM_Rest_Job_Translator_Name $translator_name
         * @param WPML_TM_Rest_Job_Progress $progress
         * @param ElementLink $element_link
         */
        public function __construct(\WPML_TM_Rest_Jobs_Translation_Service $translation_service, \WPML_TM_Rest_Jobs_Element_Info $element_info, \WPML_TM_Rest_Jobs_Language_Names $language_names, \WPML_TM_Rest_Job_Translator_Name $translator_name, \WPML_TM_Rest_Job_Progress $progress, \WPML\TM\Jobs\Utils\ElementLink $element_link)
        {
        }
        /**
         * @param WPML_TM_Jobs_Collection $jobs
         * @param int $total_jobs_count
         * @param WPML_TM_Jobs_Search_Params $jobs_search_params
         *
         * @return array
         */
        public function build(\WPML_TM_Jobs_Collection $jobs, $total_jobs_count, \WPML_TM_Jobs_Search_Params $jobs_search_params)
        {
        }
    }
}
namespace WPML\TM\REST {
    class FactoryLoader implements \IWPML_REST_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        const REST_API_INIT_ACTION = 'rest_api_init';
        /**
         * @return string
         */
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
}
namespace WPML\TM\ATE\Factories {
    class Proxy extends \WPML_REST_Factory_Loader
    {
        /**
         * @return \WPML\TM\ATE\Proxy
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_TM_REST_TP_XLIFF extends \WPML_REST_Base
    {
        public function __construct(\WPML_TP_Translations_Repository $translation_repository, \WPML_TM_Rest_Download_File $download_file)
        {
        }
        public function add_hooks()
        {
        }
        public function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array|string|WP_Error
         */
        public function get_job_translations_from_tp(\WP_REST_Request $request)
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function validate_job_type($value)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     *
     * The following method can be used as REST arguments validation callback
     */
    class WPML_REST_Arguments_Validation
    {
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function boolean($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function integer($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function float($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function url($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function email($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function is_array($value)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        static function date($value)
        {
        }
    }
    class WPML_TM_Rest_Download_File
    {
        public function send($file_name, $content, $content_type = 'application/x-xliff+xml')
        {
        }
        public function force_wp_rest_server_download($content)
        {
        }
    }
}
namespace WPML\TM\REST {
    abstract class Base extends \WPML\Rest\Base
    {
        /**
         * @return string
         */
        public function get_namespace()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     *
     * The following method can be used as REST arguments sanitation callback
     */
    class WPML_REST_Arguments_Sanitation
    {
        /**
         * @param mixed $value
         *
         * @return bool
         */
        static function boolean($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function integer($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function float($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function string($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function url($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return bool
         */
        static function email($value)
        {
        }
        /**
         *@param mixed $value
         *
         * @return array
         */
        static function array_of_integers($value)
        {
        }
    }
    /**
     * Class WPML_User_Jobs_Notification_Settings_Template
     */
    class WPML_User_Jobs_Notification_Settings_Template
    {
        const TEMPLATE_FILE = 'job-email-notification.twig';
        /**
         * WPML_User_Jobs_Notification_Settings_Template constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /**
         * @param string $notification_input
         *
         * @return string
         */
        public function get_setting_section($notification_input)
        {
        }
    }
}
namespace WPML\TM\User {
    class Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function cleanUserCacheAction()
        {
        }
        public function updatedUserMetaAction()
        {
        }
        public function filter_show_hidden_languages_options($show_hidden_languages_options)
        {
        }
    }
}
namespace {
    abstract class WPML_Translation_Roles_Records
    {
        const USERS_WITH_CAPABILITY = 'LIKE';
        const USERS_WITHOUT_CAPABILITY = 'NOT LIKE';
        const MIN_SEARCH_LENGTH = 3;
        const CACHE_GROUP = __CLASS__;
        const CACHE_PREFIX = 'wpml-cache-translators-';
        const CACHE_KEY_KEYS = 'keys';
        /** @var wpdb */
        protected $wpdb;
        /** @var \WP_Roles */
        protected $wp_roles;
        /**
         * WPML_Translation_Roles_Records constructor.
         *
         * @param \wpdb                       $wpdb
         * @param \WPML_WP_User_Query_Factory $user_query_factory
         * @param \WP_Roles                   $wp_roles
         */
        public function __construct(\wpdb $wpdb, \WPML_WP_User_Query_Factory $user_query_factory, \WP_Roles $wp_roles)
        {
        }
        public function has_users_with_capability()
        {
        }
        /**
         * @return array
         */
        public function get_users_with_capability()
        {
        }
        /**
         * @return int
         */
        public function get_number_of_users_with_capability()
        {
        }
        /**
         * @param string $search
         * @param int    $limit
         *
         * @return array
         */
        public function search_for_users_without_capability($search = '', $limit = -1)
        {
        }
        /**
         * @param int $user_id
         *
         * @return bool
         */
        public function does_user_have_capability($user_id)
        {
        }
        /**
         * Delete records for all users
         */
        public function delete_all()
        {
        }
        /**
         * Delete the record for the user
         *
         * @param int $user_id
         */
        public function delete($user_id)
        {
        }
        public function delete_cache()
        {
        }
        /**
         * @return string
         */
        protected abstract function get_capability();
        /**
         * @return array
         */
        protected abstract function get_required_wp_roles();
    }
    class WPML_TM_Only_I_Language_Pairs implements \IWPML_AJAX_Action, \IWPML_DIC_Action
    {
        public function __construct(\WPML_Language_Pair_Records $language_pair_records)
        {
        }
        public function add_hooks()
        {
        }
        public function update_language_pairs()
        {
        }
    }
    class WPML_User_Jobs_Notification_Settings_Render
    {
        /**
         * WPML_User_Jobs_Notification_Settings_Render constructor.
         *
         * @param WPML_User_Jobs_Notification_Settings_Template|null $notification_settings_template
         */
        public function __construct(\WPML_User_Jobs_Notification_Settings_Template $notification_settings_template)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $user_id
         */
        public function render_options($user_id)
        {
        }
    }
    class WPML_Translator_Records extends \WPML_Translation_Roles_Records
    {
        /**
         * @return string
         */
        protected function get_capability()
        {
        }
        /**
         * @return array
         */
        protected function get_required_wp_roles()
        {
        }
        /**
         * @param string $source_language
         * @param array  $target_languages
         * @param bool   $require_all_languages - Translator must have all target languages if true otherwise they need at least one.
         *
         * @return array
         */
        public function get_users_with_languages($source_language, $target_languages, $require_all_languages = \true)
        {
        }
    }
    class WPML_Translation_Manager_Records extends \WPML_Translation_Roles_Records
    {
        /**
         * @return string
         */
        protected function get_capability()
        {
        }
        /**
         * @return array
         */
        protected function get_required_wp_roles()
        {
        }
        /**
         * Determine if the role can be used for a manager.
         *
         * @param \WP_Role $role The role definition.
         *
         * @return bool
         */
        public function is_required_role(\WP_Role $role)
        {
        }
    }
    /**
     * Class WPML_Jobs_Notification_Settings
     */
    class WPML_User_Jobs_Notification_Settings
    {
        const BLOCK_NEW_NOTIFICATION_FIELD = 'wpml_block_new_email_notifications';
        public function add_hooks()
        {
        }
        /**
         * @param int $user_id
         */
        public function save_new_job_notifications_setting($user_id)
        {
        }
        public static function is_new_job_notification_enabled($user_id)
        {
        }
    }
}
namespace WPML\User\LanguagePairs {
    interface ILanguagePairs
    {
        /**
         * Language pairs are returned in an array of the form
         * array( $from_lang => array( $to_lang_1, $to_lang_2 )
         *
         * For example:
         * array(
         * 	'en' => array( 'de', 'fr' ),
         * 	'fr' => array( 'en' ),
         * )
         *
         * @param int $userId
         *
         * @return array{string:string[]}
         */
        public function get($userId);
    }
}
namespace WPML\User {
    class UsersByCapsRepository
    {
        public function __construct(\wpdb $wpdb, \WPML\User\LanguagePairs\ILanguagePairs $languagePairs)
        {
        }
        /**
         * @param string[] $ownedCaps
         * @param string[] $excludeCaps
         *
         * @return array{
         *     "ID": string,
         *     "full_name": string,
         *     "user_login": string,
         *     "user_email": string,
         *     "display_name": string,
         *     "roles": string[],
         *     "language_pairs": array{string:string[]}
         *  }[]
         */
        public function get(array $ownedCaps, array $excludeCaps = [])
        {
        }
    }
}
namespace {
    class WPML_WP_In_Subdir_URL_Filters implements \IWPML_Action
    {
        /**
         * @param WPML_Debug_BackTrace $backtrace
         * @param SitePress            $sitepress
         * @param WPML_URL_Converter   $url_converter
         * @param string               $uri_without_subdir
         */
        public function __construct(\WPML_Debug_BackTrace $backtrace, \SitePress $sitepress, \WPML_URL_Converter $url_converter, $uri_without_subdir)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * This filter is only applied in `WP::parse_request` in order to get
         * the proper URI cleanup base in `$home_path_regex`
         *
         * @param string $home_url
         *
         * @return string
         */
        public function home_url_filter_on_parse_request($home_url)
        {
        }
    }
    class WPML_URL_HTTP_Referer
    {
        public function __construct(\WPML_Rest $rest)
        {
        }
        /**
         * @param string $backup_url
         *
         * @return string
         */
        public function get_url($backup_url)
        {
        }
        /**
         * @return bool|int
         */
        public function get_trid()
        {
        }
        /**
         * We need this in order to detect the language when adding
         * translation from inside of a Gutenberg page while
         * they don't provide a JS API which allows us to do it
         *
         * @link https://github.com/WordPress/gutenberg/issues/5958
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-5265
         *
         * @return bool
         */
        public function is_rest_request_called_from_post_edit_page()
        {
        }
        public static function is_post_edit_page()
        {
        }
    }
    class WPML_Language_Domains
    {
        public function __construct(\SitePress $sitepress, \WPML_URL_Converter_Url_Helper $converter_url_helper)
        {
        }
        public function get($lang)
        {
        }
    }
    class WPML_Include_Url extends \WPML_WPDB_User
    {
        public function __construct(&$wpdb, $requested_host)
        {
        }
        public function filter_include_url($result)
        {
        }
        public function wpml_password_form_filter($form)
        {
        }
        /**
         * Returns the value of the unfiltered home option directly from the wp_options table.
         *
         * @return string
         */
        public function get_unfiltered_home()
        {
        }
    }
    class WPML_Endpoints_Support_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        public function get_load_action()
        {
        }
        /**
         * @return WPML_Endpoints_Support
         */
        public function create()
        {
        }
    }
    class WPML_URL_Converter_Factory
    {
        const SUBDIR = 1;
        const DOMAIN = 2;
        /**
         * @param array  $settings
         * @param string $default_lang_code
         * @param array  $active_language_codes
         */
        public function __construct($settings, $default_lang_code, $active_language_codes)
        {
        }
        public static function remove_previous_hooks()
        {
        }
        /**
         * @return WPML_Resolve_Object_Url_Helper_Factory
         */
        public function get_object_url_helper_factory()
        {
        }
        /**
         * @param WPML_Resolve_Object_Url_Helper_Factory $factory
         */
        public function set_object_url_helper_factory(\WPML_Resolve_Object_Url_Helper_Factory $factory)
        {
        }
        /**
         * @param int $url_type
         *
         * @return WPML_URL_Converter
         */
        public function create($url_type)
        {
        }
    }
    class WPML_URL_Converter_Lang_Param_Helper
    {
        /**
         * @param array $active_languages
         */
        public function __construct(array $active_languages)
        {
        }
        /**
         *
         * @param string $url
         * @param bool   $only_admin If set to true only language parameters on Admin Screen URLs will be recognized. The
         *                           function will return null for non-Admin Screens.
         *
         * @return null|string Language code
         */
        public function lang_by_param($url, $only_admin = \true)
        {
        }
    }
    class WPML_URL_Converter_Url_Helper
    {
        /**
         *
         * @param wpdb             $wpdb
         * @param WPML_Include_Url $wpml_include_url_filter
         */
        public function __construct(\wpdb $wpdb = \null, \WPML_Include_Url $wpml_include_url_filter = \null)
        {
        }
        /**
         * Returns the unfiltered home_url by directly retrieving it from wp_options.
         *
         * @return string
         */
        public function get_abs_home()
        {
        }
        /**
         * Checks if a $url points to a WP Admin screen.
         *
         * @param string $url
         * @return bool True if the input $url points to an admin screen.
         */
        public function is_url_admin($url)
        {
        }
        /**
         * Returns the unfiltered home option from the database.
         *
         * @uses \WPML_Include_Url::get_unfiltered_home in case the $wpml_include_url_filter global is loaded
         *
         * @return string
         */
        public function get_unfiltered_home_option()
        {
        }
    }
    interface IWPML_URL_Converter_Strategy
    {
        public function add_hooks();
        public function remove_hooks();
        public function convert_url_string($source_url, $lang);
        public function convert_admin_url_string($source_url, $lang);
        public function validate_language($language, $url);
        public function get_lang_from_url_string($url);
        public function get_home_url_relative($url, $lang);
        public function fix_trailingslashit($source_url);
        public function skip_convert_url_string($url, $lang_code);
        public function use_wp_login_url_converter();
    }
    abstract class WPML_URL_Converter_Abstract_Strategy implements \IWPML_URL_Converter_Strategy
    {
        protected $absolute_home;
        protected $default_language;
        protected $active_languages;
        protected $cache;
        /**
         * @var WPML_URL_Converter_Url_Helper
         */
        protected $url_helper;
        /**
         * @var WPML_URL_Converter_Lang_Param_Helper
         */
        protected $lang_param;
        /**
         * @var WPML_Slash_Management
         */
        protected $slash_helper;
        /**
         * @var WP_Rewrite
         */
        protected $wp_rewrite;
        /**
         * @param string                     $default_language
         * @param array<string>              $active_languages
         * @param WP_Rewrite|null            $wp_rewrite
         * @param WPML_Slash_Management|null $splash_helper
         */
        public function __construct($default_language, $active_languages, $wp_rewrite = \null, $splash_helper = \null)
        {
        }
        public function validate_language($language, $url)
        {
        }
        /**
         * @param WPML_URL_Converter_Url_Helper $url_helper
         */
        public function set_url_helper(\WPML_URL_Converter_Url_Helper $url_helper)
        {
        }
        /**
         * @return WPML_URL_Converter_Url_Helper
         */
        public function get_url_helper()
        {
        }
        /**
         * @param WPML_URL_Converter_Lang_Param_Helper $lang_param
         */
        public function set_lang_param(\WPML_URL_Converter_Lang_Param_Helper $lang_param)
        {
        }
        /**
         * @param WPML_Slash_Management $slash_helper
         */
        public function set_slash_helper(\WPML_Slash_Management $slash_helper)
        {
        }
        public function fix_trailingslashit($source_url)
        {
        }
        public function skip_convert_url_string($source_url, $lang_code)
        {
        }
        public function use_wp_login_url_converter()
        {
        }
    }
    class WPML_URL_Converter_Subdir_Strategy extends \WPML_URL_Converter_Abstract_Strategy
    {
        /**
         * @param bool   $use_directory_for_default_lang
         * @param string $default_language
         * @param array  $active_languages
         * @param array  $urls_settings
         */
        public function __construct($use_directory_for_default_lang, $default_language, $active_languages, $urls_settings)
        {
        }
        public function add_hooks()
        {
        }
        public function remove_hooks()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function convertRestUrl($url)
        {
        }
        public function get_lang_from_url_string($url)
        {
        }
        public function validate_language($language, $url)
        {
        }
        public function convert_url_string($source_url, $code)
        {
        }
        public function convert_admin_url_string($source_url, $lang)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        public function use_wp_login_url_converter()
        {
        }
    }
    class WPML_URL_Converter_Parameter_Strategy extends \WPML_URL_Converter_Abstract_Strategy
    {
        public function add_hooks()
        {
        }
        public function remove_hooks()
        {
        }
        public function get_lang_from_url_string($url)
        {
        }
        public function convert_url_string($source_url, $lang_code)
        {
        }
        public function convert_admin_url_string($source_url, $lang)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        /**
         * @param string $source_url
         *
         * @return string
         */
        public function fix_trailingslashit($source_url)
        {
        }
        public function use_wp_login_url_converter()
        {
        }
    }
    class WPML_URL_Converter_Domain_Strategy extends \WPML_URL_Converter_Abstract_Strategy
    {
        /**
         * @param array  $domains
         * @param string $default_language
         * @param array  $active_languages
         */
        public function __construct($domains, $default_language, $active_languages)
        {
        }
        public function add_hooks()
        {
        }
        public function remove_hooks()
        {
        }
        /**
         * Filter REST url to avoid CORS error in Gutenberg.
         * https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-7022
         *
         * @param string $url     REST URL.
         * @param string $path    REST route.
         * @param int    $blog_id Blog ID.
         * @param string $scheme  Sanitization scheme.
         *
         * @return string
         */
        public function convertRestUrlToCurrentDomain($url, $path, $blog_id, $scheme)
        {
        }
        public function get_lang_from_url_string($url)
        {
        }
        public function convert_url_string($source_url, $lang)
        {
        }
        public function convert_admin_url_string($source_url, $lang)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
    }
    class WPML_URL_Converter
    {
        /**
         * @var string
         */
        protected $default_language;
        /**
         * @var string[]
         */
        protected $active_languages;
        /**
         * @var WPML_URL_Converter_Url_Helper
         */
        protected $home_url_helper;
        /**
         * @var WPML_URL_Converter_Lang_Param_Helper
         */
        protected $lang_param;
        /**
         * @var WPML_Slash_Management
         */
        protected $slash_helper;
        /**
         * @var WPML_Resolve_Object_Url_Helper
         */
        protected $object_url_helper;
        /**
         * @param IWPML_URL_Converter_Strategy   $strategy
         * @param IWPML_Resolve_Object_Url		 $object_url_helper
         * @param string                         $default_language
         * @param array<string>                  $active_languages
         */
        public function __construct(\IWPML_URL_Converter_Strategy $strategy, \IWPML_Resolve_Object_Url $object_url_helper, $default_language, $active_languages)
        {
        }
        /**
         * @return IWPML_URL_Converter_Strategy
         */
        public function get_strategy()
        {
        }
        /**
         * @param WPML_URL_Converter_Url_Helper $url_helper
         */
        public function set_url_helper(\WPML_URL_Converter_Url_Helper $url_helper)
        {
        }
        /**
         * @return WPML_URL_Converter_Url_Helper
         */
        public function get_url_helper()
        {
        }
        public function get_abs_home()
        {
        }
        /**
         * @param WPML_URL_Converter_Lang_Param_Helper $lang_param_helper
         */
        public function set_lang_param_helper(\WPML_URL_Converter_Lang_Param_Helper $lang_param_helper)
        {
        }
        /**
         * @param WPML_Slash_Management $slash_helper
         */
        public function set_slash_helper(\WPML_Slash_Management $slash_helper)
        {
        }
        public function get_default_site_url()
        {
        }
        /**
         * Scope of this function:
         * 1. Convert the home URL in the specified language depending on language negotiation:
         *    1. Add a language directory
         *    2. Change the domain
         *    3. Add a language parameter
         * 2. If the requested URL is equal to the current URL, the URI will be adapted
         * with potential slug translations for:
         *    - single post slugs
         *    - taxonomy term slug
         *
         * WARNING: The URI slugs won't be translated for arbitrary URL (not the current one)
         *
         * @param string $url
         * @param bool   $lang_code
         *
         * @return bool|mixed|string
         */
        public function convert_url($url, $lang_code = \false)
        {
        }
        /**
         * Takes a URL and returns the language of the document it points at
         *
         * @param string $url
         * @return string
         */
        public function get_language_from_url($url)
        {
        }
        /**
         * @param string $url
         * @param string $language
         *
         * @return string
         */
        public function get_home_url_relative($url, $language)
        {
        }
        /**
         * @param SitePress $sitepress
         *
         * @return WPLoginUrlConverter|null
         */
        public function get_wp_login_url_converter($sitepress)
        {
        }
        /** @return WPML_URL_Converter */
        public static function getGlobalInstance()
        {
        }
    }
    class WPML_URL_Cached_Converter extends \WPML_URL_Converter
    {
        /**
         * @param string      $url
         * @param string|bool $lang_code
         *
         * @return string
         */
        public function convert_url($url, $lang_code = \false)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function get_language_from_url($url)
        {
        }
    }
    class WPML_URL_Converter_CPT
    {
        /**
         * @param WPML_Slash_Management $slash_helper
         */
        public function __construct(\WPML_Slash_Management $slash_helper = \null)
        {
        }
        /**
         * Adjusts the CPT archive slug for possible slug translations from ST.
         *
         * @param string      $link
         * @param string      $post_type
         * @param null|string $language_code
         *
         * @return string
         */
        public function adjust_cpt_slug_in_url($link, $post_type, $language_code = \null)
        {
        }
    }
    class WPML_Rewrite_Rules_Filter
    {
        /**
         * @param array            $active_languages
         * @param WPML_URL_Filters $wpml_url_filters
         */
        public function __construct($active_languages, $wpml_url_filters = \null)
        {
        }
        /**
         * @param string $htaccess_string Content of the .htaccess file
         *
         * @return string .htaccess file contents with adjusted RewriteBase
         */
        public function rid_of_language_param($htaccess_string)
        {
        }
    }
    class WPML_Tax_Permalink_Filters implements \IWPML_Action
    {
        public function __construct(\WPML_URL_Converter $url_converter, \WPML_WP_Cache_Factory $cache_factory, \WPML_Translation_Element_Factory $term_element_factory, \WPML_Get_LS_Languages_Status $ls_language_status)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string                 $permalink
         * @param int|\WP_Term|\stdClass $tag
         * @param string                 $taxonomy
         *
         * @return string
         */
        public function cached_filter_tax_permalink($permalink, $tag, $taxonomy)
        {
        }
    }
    class WPML_Lang_Domain_Filters
    {
        /**
         * WPML_Lang_Domain_Filters constructor.
         *
         * @param \WPML_URL_Converter $wpml_url_converter
         * @param \WPML_WP_API $wpml_wp_api
         */
        public function __construct(\WPML_URL_Converter $wpml_url_converter, \WPML_WP_API $wpml_wp_api, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function convert_url($url)
        {
        }
        /**
         * @param array $upload_dir
         *
         * @return array
         */
        public function upload_dir_filter_callback($upload_dir)
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function siteurl_callback($url)
        {
        }
        /**
         * @param string $url
         * @param string $path
         *
         * @return string
         */
        public function admin_url_filter($url, $path)
        {
        }
        /**
         * Convert logout url only for front-end.
         *
         * @param string $logout_url
         *
         * @return string
         */
        public function convert_logout_url($logout_url)
        {
        }
    }
    class WPML_Tax_Permalink_Filters_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Lang_Parameter_Filters
    {
        public function add_hooks()
        {
        }
        public function request_filter($request)
        {
        }
        /**
         * Filters the pagination links on taxonomy archives to properly have the language parameter after the URI.
         *
         * @param string $url
         *
         * @return string
         */
        public function paginated_url_filter($url)
        {
        }
        /**
         * Filters the pagination links on paginated posts and pages, acting on the links html
         * output containing the anchor tag the link is a property of.
         *
         * @param string $link_html
         *
         * @return string
         *
         * @hook wp_link_pages_link
         */
        public function paginated_link_filter($link_html)
        {
        }
    }
}
namespace WPML\UrlHandling {
    class WPLoginUrlConverter implements \IWPML_Action
    {
        const PRIORITY_AFTER_URL_FILTERS = 100;
        const SETTINGS_KEY = 'wpml_login_page_translation';
        /**
         * @param \WPML_URL_Converter $url_converter
         * @param \SitePress          $sitepress
         */
        public function __construct($sitepress, $url_converter)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Converts the logout URL to be translated.
         *
         * @param string $url
         * @return string
         */
        public function convert_user_logout_url($url)
        {
        }
        public function add_signup_language_field()
        {
        }
        public function redirect_to_login_url_with_lang()
        {
        }
        public function generate_rewrite_rules()
        {
        }
        /**
         * Converts the redirected string if it's the default one.
         *
         * @param string $redirect_to
         * @param string $requested_redirect_to
         * @return string
         */
        public function convert_default_redirect_url($redirect_to, $requested_redirect_to)
        {
        }
        public function filter_redirect_with_lang($redirect_to)
        {
        }
        public function wpml_login_page_language_from_url($language, $url)
        {
        }
        public function site_url($url, $path, $scheme)
        {
        }
        public function convert_url($url)
        {
        }
        public function on_request($query_vars)
        {
        }
        /**
         * @param bool $validateOrRollback - If true, it will be validated that the translated Login URL is accessible or rollback.
         * @return void
         */
        public static function enable($validateOrRollback = false)
        {
        }
        public static function disable()
        {
        }
        /**
         * @return bool
         */
        public static function isEnabled()
        {
        }
        /**
         * @param bool $state
         * @param bool $validate - if true, will validate the change or undo it.
         *
         */
        public static function saveState($state, $validate = false)
        {
        }
    }
}
namespace {
    class WPML_XDomain_Data_Parser
    {
        const SCRIPT_HANDLER = 'wpml-xdomain-data';
        /**
         * WPML_XDomain_Data_Parser constructor.
         *
         * @param array<string,mixed> $settings
         * @param \WPML_Data_Encryptor $encryptor
         */
        public function __construct(&$settings, $encryptor)
        {
        }
        public function init_hooks()
        {
        }
        public function init()
        {
        }
        public function register_scripts_action()
        {
        }
        public function set_up_xdomain_language_data()
        {
        }
        public function send_xdomain_language_data()
        {
        }
        public function get_xdomain_data()
        {
        }
    }
    /**
     * Class WPML_URL_Filters
     */
    class WPML_URL_Filters
    {
        /**
         * WPML_URL_Filters constructor.
         *
         * @param \WPML_Post_Translation $post_translation
         * @param string                 $url_converter
         * @param \WPML_Canonicals        $canonicals
         * @param \SitePress             $sitepress
         * @param \WPML_Debug_BackTrace   $debug_backtrace
         */
        public function __construct(&$post_translation, &$url_converter, \WPML_Canonicals $canonicals, &$sitepress, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function add_global_hooks()
        {
        }
        public function remove_global_hooks()
        {
        }
        /**
         * @param int    $post_id
         * @param string $url
         *
         * @return int
         *
         * @hook oembed_request_post_id
         */
        public function embedded_front_page_id_filter($post_id, $url)
        {
        }
        /**
         * @param string $embedded_url
         *
         * @return string
         */
        public function fix_post_embedded_url($embedded_url)
        {
        }
        /**
         * Filters the link to a post's edit screen by appending the language query argument
         *
         * @param string $link
         * @param int    $id
         * @param string $context
         *
         * @return string
         *
         * @hook get_edit_post_link
         */
        public function get_edit_post_link($link, $id, $context = 'display')
        {
        }
        /**
         * Permalink filter that is used when the site uses a root page
         *
         * @param string      $link
         * @param int|WP_Post $pid
         *
         * @return string
         */
        public function permalink_filter_root($link, $pid)
        {
        }
        /**
         * @param string $link
         * @param int $pid
         *
         * @return string|WPML_Notice|WPML_Notice_Render
         */
        public function page_link_filter_root($link, $pid)
        {
        }
        /**
         * Filters links to the root page, so that they are displayed properly in the front-end.
         *
         * @param string $url
         *
         * @return string
         */
        public function filter_root_permalink($url)
        {
        }
        /**
         * @param string      $link
         * @param int|WP_Post $post
         *
         * @return string
         */
        public function permalink_filter($link, $post)
        {
        }
        /**
         * @param string      $link
         * @param int|WP_Post $post
         *
         * @return string
         */
        public function page_link_filter($link, $post)
        {
        }
        /**
         * @param string|bool $canonical_url
         * @param WP_Post     $post
         *
         * @return mixed
         * @throws \InvalidArgumentException
         */
        public function get_canonical_url_filter($canonical_url, $post)
        {
        }
        /**
         * @param WP_Screen $current_screen
         */
        public function permalink_options_home_url($current_screen)
        {
        }
        /**
         * @param string $url
         * @param string $path
         * @param string $orig_scheme
         * @param int    $blog_id
         *
         * @return string
         */
        public function home_url_filter($url, $path, $orig_scheme, $blog_id)
        {
        }
        public function frontend_uses_root()
        {
        }
        /**
         * @param string            $link
         * @param int               $post
         * @param WPML_Post_Element $post_element
         *
         * @return bool|false|mixed|string
         */
        public function get_translated_permalink($link, $post, $post_element)
        {
        }
        /**
         * @param string             $link
         * @param int                $post_id
         * @param \WPML_Post_Element $post_element
         *
         * @return bool|mixed|string
         */
        public function get_translated_page_link($link, $post_id, $post_element)
        {
        }
        public function get_request_language()
        {
        }
    }
    class WPML_Allowed_Redirect_Hosts extends \WPML_SP_User
    {
        public function __construct(&$sitepress)
        {
        }
        public function get_hosts($hosts)
        {
        }
    }
    class WPML_Home_Url_Filter_Context
    {
        const REST_REQUEST = 'rest-request';
        const REWRITE_RULES = 'rewrite-rules';
        const PAGINATION = 'pagination';
        public function __construct($language_negotiation_type, $orig_scheme, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        /**
         * @return bool
         */
        public function should_not_filter()
        {
        }
    }
    class WPML_URL_HTTP_Referer_Factory
    {
        /**
         * @return WPML_URL_HTTP_Referer
         */
        public function create()
        {
        }
    }
    class WPML_Root_Page
    {
        public static function init()
        {
        }
        /**
         * Checks if the value in $_SERVER['REQUEST_URI] points towards the root page.
         * Therefore this can be used to check if the current request points towards the root page.
         *
         * @return bool
         */
        public static function is_current_request_root()
        {
        }
        /**
         * @param string $requested_url
         *                       Checks if a requested url points towards the root page.
         *
         * @return bool
         */
        public static function is_root_page($requested_url)
        {
        }
        public static function uses_html_root()
        {
        }
        /**
         * Returns the id of the root page or false if it isn't set.
         *
         * @return bool|int
         */
        public static function get_root_id()
        {
        }
        /**
         * @param false|WP_Post $post
         *              Filters the postID used by the preview for the case of the root page preview.
         *
         * @return null|WP_Post
         */
        public static function front_page_id_filter($post)
        {
        }
        /**
         * Filters the template that is used for the root page
         *
         * @param string $template
         *
         * @return string
         */
        public static function wpml_home_url_template_include($template)
        {
        }
        /**
         * @return string
         */
        public static function get_root_page_template()
        {
        }
    }
}
namespace WPML\UrlHandling {
    class WPLoginUrlConverterRules implements \IWPML_Action
    {
        const MARKED_FOR_UPDATE_AND_VALIDATE_OR_ROLLBACK = 3;
        const MARKED_FOR_UPDATE = true;
        const UNMARKED = false;
        const SKIP_SAVING_LANG_IN_COOKIES_KEY = 'skip_saving_language_cookie';
        const UPDATE_RULES_KEY = 'wpml_login_page_translation_update_rules';
        public function add_hooks()
        {
        }
        public static function markRulesForUpdating($verify = false)
        {
        }
        public static function update()
        {
        }
        /**
         * Validates that the Translated Login URL is accessible.
         * Used to validate the setting when enabled by default.
         */
        public static function validateOrDisable()
        {
        }
    }
}
namespace {
    class WPML_WP_In_Subdir_URL_Filters_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Absolute_To_Permalinks
    {
        public function __construct(\SitePress $sitepress, \WPML\Utils\AutoAdjustIds $auto_adjust_ids = \null)
        {
        }
        public function convert_text($text)
        {
        }
        function show_permalinks_cb($matches)
        {
        }
    }
    class WPML_Absolute_Url_Persisted
    {
        const OPTION_KEY = 'wpml_resolved_url_persist';
        /**
         * @return WPML_Absolute_Url_Persisted
         */
        public static function get_instance()
        {
        }
        protected function __construct()
        {
        }
        /**
         * @throws Exception
         */
        public function __wakeup()
        {
        }
        /** @return bool */
        public function has_urls()
        {
        }
        /**
         * @param string       $original_url
         * @param string       $lang
         * @param string|false $converted_url A `false` value means that the URL could not be resolved
         */
        public function set($original_url, $lang, $converted_url)
        {
        }
        /**
         * @param string $original_url
         * @param string $lang
         *
         * @return string|false|null If the URL has already been processed but could not be resolved, it will return `false`
         */
        public function get($original_url, $lang)
        {
        }
        public function reset()
        {
        }
        public function persist()
        {
        }
    }
    interface IWPML_Resolve_Object_Url
    {
        /**
         * @param string $url
         * @param string $lang
         *
         * @return string|false Will return the resolved URL or `false` if it could not be resolved.
         */
        public function resolve_object_url($url, $lang);
    }
    class WPML_Resolve_Absolute_Url implements \IWPML_Resolve_Object_Url
    {
        public function __construct(\SitePress $sitepress, \WPML_Translate_Link_Targets $translate_link_targets)
        {
        }
        /**
         * @param string $url
         * @param string $lang
         *
         * @return string|false
         */
        public function resolve_object_url($url, $lang)
        {
        }
    }
    class WPML_Resolve_Object_Url_Helper implements \IWPML_Resolve_Object_Url
    {
        const CACHE_GROUP = 'resolve_object_url';
        /**
         * @var bool
         */
        protected $lock = \false;
        /**
         * @param SitePress             $sitepress
         * @param WP_Query              $wp_query
         * @param WPML_Term_Translation $wpml_term_translations
         * @param WPML_Post_Translation $wpml_post_translations
         */
        public function __construct(\SitePress &$sitepress = \null, \WP_Query &$wp_query = \null, \WPML_Term_Translation $wpml_term_translations = \null, \WPML_Post_Translation $wpml_post_translations = \null)
        {
        }
        /**
         * Try to parse the URL to find a related post or term
         *
         * @param string $url
         * @param string $lang_code
         *
         * @return string|bool
         */
        public function resolve_object_url($url, $lang_code)
        {
        }
    }
    class WPML_Resolve_Object_Url_Helper_Factory
    {
        const CURRENT_URL_RESOLVER = 'current';
        const ABSOLUTE_URL_RESOLVER = 'absolute';
        /**
         * @return IWPML_Resolve_Object_Url
         */
        public function create($type = self::CURRENT_URL_RESOLVER)
        {
        }
    }
    class WPML_Resolve_Absolute_Url_Cached implements \IWPML_Resolve_Object_Url
    {
        public function __construct(\WPML_Absolute_Url_Persisted $url_persisted, \WPML_Resolve_Absolute_Url $resolve_url)
        {
        }
        /**
         * @param string $url
         * @param string $lang
         *
         * @return false|string Will return `false` if the URL could not be resolved
         */
        public function resolve_object_url($url, $lang)
        {
        }
    }
    class WPML_Absolute_Url_Persisted_Filters_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Absolute_Url_Persisted_Filters implements \IWPML_Action
    {
        public function __construct(\WPML_Absolute_Url_Persisted $url_persisted)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param mixed $data
         *
         * @return array
         */
        public function reset($data = \null)
        {
        }
        public function action_reset()
        {
        }
    }
    class WPML_Endpoints_Support
    {
        const STRING_CONTEXT = 'WP Endpoints';
        public function __construct(\WPML_Post_Translation $post_translations, $current_language, $default_language)
        {
        }
        public function add_hooks()
        {
        }
        public function add_endpoints_translations()
        {
        }
        /**
         * @param string $key
         * @param string $endpoint
         * @param null|string $language
         *
         * @return string
         */
        public function get_endpoint_translation($key, $endpoint, $language = \null)
        {
        }
        /**
         * @param string $key
         * @param string $endpoint
         */
        public function register_endpoint_string($key, $endpoint)
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function translate_endpoints_in_rewrite_rules($value)
        {
        }
        /**
         * @param string $link
         * @param int $pid
         *
         * @return string
         */
        public function endpoint_permalink_filter($link, $pid)
        {
        }
        /**
         * @param string $endpoint
         * @param string $value
         * @param string $permalink
         * @param bool|string $page_lang
         *
         * @return string
         */
        public function get_endpoint_url($endpoint, $value = '', $permalink = '', $page_lang = \false)
        {
        }
        /**
         * @param string $url
         * @param array $data
         *
         * @return string
         */
        public function add_endpoint_to_current_ls_language_url($url, $data)
        {
        }
        /**
         * @return array
         */
        public function get_registered_endpoints()
        {
        }
        /**
         * @param string $language
         *
         * @return array
         */
        public function get_current_endpoint($language)
        {
        }
    }
}
namespace WPML\UrlHandling {
    class WPLoginUrlConverterFactory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        /**
         * @return array
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_Score_Hierarchy
    {
        /**
         * WPML_Score_Hierarchy constructor.
         *
         * @param object[] $data_set
         * @param string[] $slugs
         */
        public function __construct($data_set, $slugs)
        {
        }
        /**
         * Array of best matched post_ids. Better matches have a lower index!
         *
         * @return int[]
         */
        public function get_possible_ids_ordered()
        {
        }
    }
    class WPML_Absolute_Links_Blacklist
    {
        public function __construct($blacklist_requests)
        {
        }
        public function is_blacklisted($request)
        {
        }
    }
    abstract class WPML_TM_Translatable_Element
    {
        /** @var WPML_TM_Word_Count_Records $word_count_records */
        protected $word_count_records;
        /** @var WPML_TM_Word_Count_Single_Process $single_process */
        protected $single_process;
        /** @var int $id */
        protected $id;
        /**
         * @param int|false                         $id
         * @param WPML_TM_Word_Count_Records        $word_count_records
         * @param WPML_TM_Word_Count_Single_Process $single_process
         */
        public function __construct($id, \WPML_TM_Word_Count_Records $word_count_records, \WPML_TM_Word_Count_Single_Process $single_process)
        {
        }
        public function set_id($id)
        {
        }
        protected abstract function init($id);
        public abstract function get_type_name($label = \null);
        protected abstract function get_type();
        protected abstract function get_total_words();
        /** @return int */
        public function get_words_count()
        {
        }
    }
    class WPML_TM_Post extends \WPML_TM_Translatable_Element
    {
        protected function init($id)
        {
        }
        protected function get_type()
        {
        }
        protected function get_total_words()
        {
        }
        public function get_type_name($label = \null)
        {
        }
    }
    interface IWPML_TM_Count
    {
        public function get_total_words();
        public function get_words_to_translate($lang);
    }
    class WPML_TM_Count_Composite implements \IWPML_TM_Count
    {
        public function add_count(\IWPML_TM_Count $count)
        {
        }
        /** @var IWPML_TM_Count[] $counts */
        public function add_counts($counts)
        {
        }
        /**
         * @param string $lang
         *
         * @return int
         */
        public function get_words_to_translate($lang)
        {
        }
        /** @return int */
        public function get_total_words()
        {
        }
    }
    class WPML_TM_Count implements \IWPML_TM_Count
    {
        /**
         * @param string|null $json_data
         */
        public function __construct($json_data = \null)
        {
        }
        /** @param string $json_data */
        public function set_properties_from_json($json_data)
        {
        }
        /** @return int */
        public function get_total_words()
        {
        }
        /** @param int $total */
        public function set_total_words($total)
        {
        }
        /**
         * @param string $lang
         *
         * @return int|null
         */
        public function get_words_to_translate($lang)
        {
        }
        /** @return string */
        public function to_string()
        {
        }
        public function set_words_to_translate($lang, $quantity)
        {
        }
    }
    abstract class WPML_TM_Word_Count_Background_Process extends \WP_Background_Process
    {
        /** @var IWPML_TM_Word_Count_Queue_Items $queue */
        protected $queue;
        /**
         * @param IWPML_TM_Word_Count_Queue_Items $queue
         * @param IWPML_TM_Word_Count_Set[]       $setters
         */
        public function __construct(\IWPML_TM_Word_Count_Queue_Items $queue, array $setters)
        {
        }
        /**
         * This abstract method is not implemented because we override the `handle` method.
         */
        protected function task($item)
        {
        }
        protected function handle()
        {
        }
        protected function is_queue_empty()
        {
        }
    }
    class WPML_TM_Word_Count_Background_Process_Factory
    {
        const PREFIX = 'wpml_tm';
        const ACTION_REQUESTED_TYPES = 'word_count_background_process_requested_types';
        /**
         * @return WPML_TM_Word_Count_Background_Process_Requested_Types
         */
        public function create_requested_types()
        {
        }
    }
    class WPML_TM_Word_Count_Background_Process_Requested_Types extends \WPML_TM_Word_Count_Background_Process
    {
        /** @var WPML_TM_Word_Count_Queue_Items_Requested_Types $queue */
        protected $queue;
        /**
         * @param WPML_TM_Word_Count_Queue_Items_Requested_Types $queue_items
         * @param IWPML_TM_Word_Count_Set[]                      $setters
         */
        public function __construct(\WPML_TM_Word_Count_Queue_Items_Requested_Types $queue_items, array $setters, \WPML_TM_Word_Count_Records $records)
        {
        }
        public function init($requested_types)
        {
        }
        public function dispatch()
        {
        }
        public function complete()
        {
        }
        /**
         * Filter result of memory_exceeded() function in WP_Background_Process class.
         * Used by it get_memory_limit() function of WP_Background_Process class contains a number of bugs,
         * producing wrong result when 'memory_limit' setting in php.ini is in human readable format like '1G'.
         *
         * @return bool
         */
        public function memory_exceeded_filter()
        {
        }
        /**
         * Get memory limit in bytes.
         *
         * @return int
         */
        protected function get_memory_limit()
        {
        }
        /**
         * Converts a shorthand byte value to an integer byte value.
         *
         * @param string $value A (PHP ini) byte value, either shorthand or ordinary.
         * @return int An integer byte value.
         */
        protected function convert_shorthand_to_bytes($value)
        {
        }
    }
    interface IWPML_TM_Word_Count_Queue_Items
    {
        /**
         * @return array|null a tuple containing the element id and type or null if queue is empty
         */
        public function get_next();
        /**
         * @param int    $id
         * @param string $type
         */
        public function remove($id, $type);
        /** @return bool */
        public function is_completed();
        public function save();
    }
    class WPML_TM_Word_Count_Queue_Items_Requested_Types implements \IWPML_TM_Word_Count_Queue_Items
    {
        const OPTION_KEY = 'wpml_word_count_queue_items_requested_types';
        const STEP_STANDALONE_PACKAGES = 1;
        const STEP_POST_PACKAGES = 2;
        const STEP_POSTS = 3;
        const STEP_COMPLETED = 4;
        public function __construct(\WPML_TM_Word_Count_Records $records)
        {
        }
        /**
         * @return array|null a tuple containing the element id and type or null if queue is empty
         */
        public function get_next()
        {
        }
        /**
         * @param int    $id
         * @param string $type
         */
        public function remove($id, $type)
        {
        }
        /** @return bool */
        public function is_completed()
        {
        }
        public function save()
        {
        }
        public function reset(array $requested_types)
        {
        }
    }
    interface IWPML_TM_Word_Calculator_Post
    {
        public function count_words(\WPML_Post_Element $post_element, $lang = \null);
    }
    class WPML_TM_Word_Calculator_Post_Packages implements \IWPML_TM_Word_Calculator_Post
    {
        public function __construct(\WPML_TM_Word_Count_Records $records)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         * @param string|null       $lang
         *
         * @return int
         */
        public function count_words(\WPML_Post_Element $post_element, $lang = \null)
        {
        }
    }
    class WPML_TM_Word_Calculator_Post_Object implements \IWPML_TM_Word_Calculator_Post
    {
        public function __construct(\WPML_TM_Word_Calculator $calculator, \WPML_TM_Word_Calculator_Post_Packages $packages_calculator)
        {
        }
        /**
         * @param WPML_Post_Element $post_element
         * @param string            $lang
         *
         * @return int
         */
        public function count_words(\WPML_Post_Element $post_element, $lang = \null)
        {
        }
    }
    class WPML_TM_Word_Calculator_Post_Custom_Fields implements \IWPML_TM_Word_Calculator_Post
    {
        /**
         * WPML_TM_Word_Calculator_Post_Custom_Fields constructor.
         *
         * $cf_settings:
         *
         * <code>
         * $array = [
         *   'custom-field-1'      =>  WPML_TRANSLATE_CUSTOM_FIELD,
         *   'custom-field-2'      =>  WPML_COPY_CUSTOM_FIELD,
         *   'custom-field-3'      =>  WPML_IGNORE_CUSTOM_FIELD,
         *   'custom-field-4'      =>  WPML_IGNORE_CUSTOM_FIELD,
         *   'custom-field-5'      =>  WPML_COPY_ONCE_CUSTOM_FIELD,
         * ]
         * </code>
         *
         * @param \WPML_TM_Word_Calculator $calculator  An instance of WPML_TM_Word_Calculator.
         * @param array|null               $cf_settings An associative array where they key is the name of the custom field and the value is an integer representing the translation method.
         *
         * @see inc/constants.php for the values of the constsnts
         */
        public function __construct(\WPML_TM_Word_Calculator $calculator, array $cf_settings = \null)
        {
        }
        public function count_words(\WPML_Post_Element $post_element, $lang = \null)
        {
        }
    }
    /**
     * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmltm-2327
     */
    class WPML_TM_Word_Calculator
    {
        const ASIAN_LANGUAGE_CHAR_SIZE = 6;
        public function __construct(\WPML_PHP_Functions $php_functions)
        {
        }
        /**
         * @param string $string
         * @param string $language_code
         *
         * @return int
         */
        public function count_words($string, $language_code)
        {
        }
        public static function get_asian_languages()
        {
        }
    }
    class WPML_TM_Word_Count_Set_String
    {
        public function __construct(\WPML_TM_Word_Count_Records $records, \WPML_TM_Word_Calculator $calculator)
        {
        }
        /**
         * @param int $string_id
         */
        public function process($string_id)
        {
        }
    }
    class WPML_TM_Word_Count_Set_Package
    {
        public function __construct(\WPML_ST_Package_Factory $package_factory, \WPML_TM_Word_Count_Records $records, array $active_langs)
        {
        }
        /** @param int $package_id */
        public function process($package_id)
        {
        }
    }
    interface IWPML_TM_Word_Count_Set
    {
        public function process($id);
    }
    class WPML_TM_Word_Count_Single_Process_Factory
    {
        public function create()
        {
        }
    }
    class WPML_TM_Word_Count_Set_Post
    {
        /**
         * @param WPML_Translation_Element_Factory $element_factory
         * @param WPML_TM_Word_Count_Records       $records
         * @param IWPML_TM_Word_Calculator_Post[]  $calculators
         * @param array                            $active_langs
         */
        public function __construct(\WPML_Translation_Element_Factory $element_factory, \WPML_TM_Word_Count_Records $records, array $calculators, array $active_langs)
        {
        }
        /**
         * @param int $post_id
         */
        public function process($post_id)
        {
        }
    }
    class WPML_TM_Word_Count_Setters_Factory
    {
        /**
         * @return IWPML_TM_Word_Count_Set[]
         */
        public function create()
        {
        }
    }
    class WPML_TM_Word_Count_Single_Process
    {
        /**
         * @param IWPML_TM_Word_Count_Set[]           $setters
         * @param WPML_ST_String_Dependencies_Builder $dependencies_builder
         */
        public function __construct(array $setters, \WPML_ST_String_Dependencies_Builder $dependencies_builder = \null)
        {
        }
        /**
         * @param string $element_type
         * @param int    $element_id
         */
        public function process($element_type, $element_id)
        {
        }
    }
    class WPML_TM_Word_Count_Report_View
    {
        const TEMPLATE_PATH = '/templates/words-count';
        const TEMPLATE_FILE = 'report.twig';
        public function __construct(\WPML_Twig_Template_Loader $loader, \WPML_WP_Cron_Check $cron_check)
        {
        }
        public function show(array $model)
        {
        }
        public static function get_strings()
        {
        }
    }
    class WPML_TM_Word_Count_Report
    {
        const OPTION_KEY = 'wpml_word_count_report';
        const POSTS_PER_MINUTE = 1200;
        const PACKAGES_PER_MINUTE = 5000;
        const POST_TYPES = 'post_types';
        const PACKAGE_KINDS = 'package_kinds';
        const IS_REQUESTED = 'isRequested';
        /**
         * WPML_TM_Word_Count_Report constructor.
         *
         * @param WPML_TM_Word_Count_Report_View $view
         * @param WPML_TM_Word_Count_Records     $records
         * @param SitePress                      $sitepress
         * @param string|false                   $requested_types_status
         * @param WPML_Package_Helper|null       $st_package_helper
         */
        public function __construct(\WPML_TM_Word_Count_Report_View $view, \WPML_TM_Word_Count_Records $records, \SitePress $sitepress, $requested_types_status, \WPML_Package_Helper $st_package_helper = \null)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        public function set_requested_types(array $requested_types)
        {
        }
        public function get_package_kinds()
        {
        }
    }
    class WPML_TM_Word_Count_Post_Records
    {
        const META_KEY = '_wpml_word_count';
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * Returns only IDs in the source language
         *
         * @return array
         */
        public function get_all_ids_without_word_count()
        {
        }
        /**
         * @param int $post_id
         *
         * @return string raw word count
         */
        public function get_word_count($post_id)
        {
        }
        /**
         * @param int    $post_id
         * @param string $word_count raw word count
         *
         * @return bool|int
         */
        public function set_word_count($post_id, $word_count)
        {
        }
        public function reset_all(array $post_types)
        {
        }
        /**
         * @param array $post_types
         *
         * @return array
         */
        public function get_source_ids_from_types(array $post_types)
        {
        }
        /**
         * @param string $post_type
         *
         * @return int
         */
        public function count_source_items_by_type($post_type)
        {
        }
        public function count_word_counts_by_type($post_type)
        {
        }
        /**
         * @param string $post_type
         *
         * @return array
         */
        public function get_word_counts_by_type($post_type)
        {
        }
    }
    class WPML_TM_Word_Count_Records_Factory
    {
        /**
         * @return \WPML_TM_Word_Count_Records
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    class WPML_TM_Word_Count_Records
    {
        public function __construct(\WPML_TM_Word_Count_Post_Records $post_records, \WPML_ST_Word_Count_Package_Records $package_records = \null, \WPML_ST_Word_Count_String_Records $string_records = \null)
        {
        }
        /** @return array */
        public function get_all_post_ids_without_word_count()
        {
        }
        /**
         * @param $post_id
         *
         * @return WPML_TM_Count
         */
        public function get_post_word_count($post_id)
        {
        }
        /**
         * @param int           $post_id
         * @param WPML_TM_Count $word_count
         *
         * @return bool|int
         */
        public function set_post_word_count($post_id, \WPML_TM_Count $word_count)
        {
        }
        /** @return array */
        public function get_all_package_ids()
        {
        }
        /** @return array */
        public function get_packages_ids_without_word_count()
        {
        }
        /**
         * @param int $post_id
         *
         * @return WPML_TM_Count[]
         */
        public function get_packages_word_counts($post_id)
        {
        }
        /**
         * @param int           $package_id
         * @param WPML_TM_Count $word_count
         */
        public function set_package_word_count($package_id, \WPML_TM_Count $word_count)
        {
        }
        /**
         * @param int $package_id
         *
         * @return WPML_TM_Count
         */
        public function get_package_word_count($package_id)
        {
        }
        /** @return int */
        public function get_strings_total_words()
        {
        }
        /** @return array */
        public function get_all_string_values_without_word_count()
        {
        }
        /**
         * @param string   $lang
         * @param int|null $package_id
         *
         * @return int
         */
        public function get_string_words_to_translate_per_lang($lang, $package_id = \null)
        {
        }
        public function get_string_value_and_language($string_id)
        {
        }
        /**
         * @param int $id
         * @param int $word_count
         */
        public function set_string_word_count($id, $word_count)
        {
        }
        /**
         * @param int $id
         *
         * @return int
         */
        public function get_string_word_count($id)
        {
        }
        public function reset_all(array $requested_types)
        {
        }
        /**
         * @param array $kinds
         *
         * @return array
         */
        public function get_package_ids_from_kind_slugs(array $kinds)
        {
        }
        /**
         * @param array $post_types
         *
         * @return array
         */
        public function get_package_ids_from_post_types(array $post_types)
        {
        }
        /**
         * @param array $package_ids
         *
         * @return array
         */
        public function get_strings_ids_from_package_ids(array $package_ids)
        {
        }
        /**
         * @param array $package_ids
         *
         * @return array
         */
        public function get_post_source_ids_from_types(array $package_ids)
        {
        }
        /**
         * @param string $type
         *
         * @return int
         */
        public function count_items_by_type($group, $type)
        {
        }
        public function count_word_counts_by_type($group, $type)
        {
        }
        public function get_word_counts_by_type($group, $type)
        {
        }
    }
    class WPML_TM_Package_Element extends \WPML_TM_Translatable_Element
    {
        /**
         * @param int                               $id
         * @param WPML_TM_Word_Count_Records        $word_count_records
         * @param WPML_TM_Word_Count_Single_Process $single_process
         * @param WPML_ST_Package_Factory|null      $st_package_factory
         */
        public function __construct($id, \WPML_TM_Word_Count_Records $word_count_records, \WPML_TM_Word_Count_Single_Process $single_process, \WPML_ST_Package_Factory $st_package_factory = \null)
        {
        }
        /** @param int $id */
        protected function init($id)
        {
        }
        protected function get_type()
        {
        }
        /** @return int */
        protected function get_total_words()
        {
        }
        /**
         * @param null $label
         *
         * @return string
         */
        public function get_type_name($label = \null)
        {
        }
    }
    class WPML_TM_String extends \WPML_TM_Translatable_Element
    {
        protected function init($id)
        {
        }
        protected function get_type()
        {
        }
        protected function get_total_words()
        {
        }
        public function get_type_name($label = \null)
        {
        }
    }
    class WPML_TM_Translatable_Element_Provider
    {
        public function __construct(\WPML_TM_Word_Count_Records $word_count_records, \WPML_TM_Word_Count_Single_Process $single_process, \WPML_ST_Package_Factory $st_package_factory = \null)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return null|WPML_TM_Package_Element|WPML_TM_Post|WPML_TM_String
         */
        public function get_from_job(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @param string $type
         * @param int    $id
         *
         * @return null|WPML_TM_Package_Element|WPML_TM_Post|WPML_TM_String
         */
        public function get_from_type($type, $id)
        {
        }
    }
    class WPML_TM_Word_Count_Ajax_Hooks implements \IWPML_Action
    {
        public function __construct(\WPML_TM_Word_Count_Report $report, \WPML_TM_Word_Count_Background_Process_Factory $process_factory, $requested_types_status)
        {
        }
        public function add_hooks()
        {
        }
        public function __call($method_name, $arguments)
        {
        }
    }
    class WPML_TM_Word_Count_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        const PROCESS_PENDING = 'pending';
        const PROCESS_IN_PROGRESS = 'in-progress';
        const PROCESS_COMPLETED = 'completed';
        const OPTION_KEY_REQUESTED_TYPES_STATUS = 'wpml_word_count_requested_types_status';
        const NONCE_ACTION = 'wpml_tm_word_count_ajax';
        public function create()
        {
        }
    }
    class WPML_TM_Word_Count_Process_Hooks implements \IWPML_Action
    {
        /**
         * @param WPML_TM_Word_Count_Background_Process_Factory $process_factory
         */
        public function __construct(\WPML_TM_Word_Count_Background_Process_Factory $process_factory)
        {
        }
        /**
         * We need to include the hooks located in WP_Async_Request::__construct.
         */
        public function add_hooks()
        {
        }
    }
    class WPML_TM_Word_Count_Refresh_Hooks implements \IWPML_Action
    {
        const PRIORITY_AFTER_PB_STRING_REGISTRATION = 50;
        public function __construct(\WPML_TM_Word_Count_Single_Process_Factory $single_process_factory, \WPML_Translation_Element_Factory $element_factory, \WPML_ST_Package_Factory $st_package_factory = \null)
        {
        }
        public function add_hooks()
        {
        }
        /** @param int $post_id */
        public function enqueue_post_word_count_refresh($post_id)
        {
        }
        /** @param int $post_id */
        public function get_refresh_post_word_count($post_id)
        {
        }
        /**
         * @param string $string_value
         * @param string $string_name
         * @param array  $package
         */
        public function register_string_action($string_value, $string_name, $package)
        {
        }
        /** @param array $package */
        public function delete_unused_package_strings_action($package)
        {
        }
        /**
         * @param array $translations
         * @param array $package
         */
        public function set_translated_strings_action($translations, $package)
        {
        }
        public function refresh_packages_word_count()
        {
        }
    }
    class WPML_TM_Word_Count_Admin_Hooks implements \IWPML_Action
    {
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param string $default_url
         *
         * @return string
         */
        public function words_count_url_filter($default_url)
        {
        }
        public function display_dialog_open_link()
        {
        }
    }
    /**
     * Class WPML_TM_Post_Data
     */
    class WPML_TM_Post_Data
    {
        /**
         * @param string $data
         *
         * @return string
         */
        public static function strip_slashes_for_single_quote($data)
        {
        }
    }
    class WPML_Admin_Resources_Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function register_resources()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Download_Localization
    {
        /**
         * WPML_Localization constructor.
         *
         * @param array  $active_languages
         * @param string $default_language
         */
        public function __construct(array $active_languages, $default_language)
        {
        }
        public function download_language_packs()
        {
        }
        public function get_not_founds()
        {
        }
        public function get_errors()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationMethod {
    class TranslationMethodSettings
    {
        public static function addHooks()
        {
        }
        public static function localize()
        {
        }
        /**
         * @return array
         */
        public static function getModeSettingsData()
        {
        }
        public static function render()
        {
        }
    }
}
namespace {
    class WPML_TM_Admin_Menus_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Admin_Menus_Hooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function init_action()
        {
        }
        public function redirect_settings_menu()
        {
        }
        public function redirect_from_empty_basket_page()
        {
        }
        public static function is_tm_basket_empty()
        {
        }
    }
    /**
     * It handles the admin sections shown in the TM page.
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_Admin_Sections
    {
        /**
         * It adds the hooks.
         */
        public function init_hooks()
        {
        }
        public function init_sections()
        {
        }
        /**
         * It returns the tab items.
         *
         * @return array The tab items.
         */
        public function get_tab_items()
        {
        }
        /**
         * Returns the URL of a tab item or an empty string if it cannot be found.
         *
         * @param string $slug
         *
         * @return string
         */
        public function get_item_url($slug)
        {
        }
        /**
         * Returns an instance of IWPML_TM_Admin_Section from its slug or null if it cannot be found.
         *
         * @param string $slug
         *
         * @return \IWPML_TM_Admin_Section|null
         */
        public function get_section($slug)
        {
        }
        /**
         * @return bool
         */
        public static function is_translation_roles_section()
        {
        }
        /**
         * @return bool
         */
        public static function is_translation_services_section()
        {
        }
        /**
         * @return bool
         */
        public static function is_dashboard_section()
        {
        }
    }
    abstract class WPML_TM_MCS_Custom_Field_Settings_Menu
    {
        /** @var  WPML_Custom_Field_Setting_Factory $settings_factory */
        protected $settings_factory;
        /** @var int Initial setting of items per page */
        const ITEMS_PER_PAGE = 20;
        public function __construct(\WPML_Custom_Field_Setting_Factory $settings_factory, \WPML_UI_Unlock_Button $unlock_button_ui, \WPML_Custom_Field_Setting_Query_Factory $query_factory)
        {
        }
        /**
         * This will fetch the data from DB
         * depending on the user inputs (pagination/search)
         *
         * @param array $args
         */
        public function init_data(array $args = array())
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return string
         */
        protected abstract function kind_shorthand();
        /**
         * @return string
         */
        protected abstract function get_title();
        protected abstract function get_meta_type();
        /**
         * @param string $key
         *
         * @return WPML_Custom_Field_Setting
         */
        protected abstract function get_setting($key);
        /**
         * Render search box for Custom Field Settings.
         *
         * @param string $search_string Search String.
         */
        public function render_search($search_string = '')
        {
        }
        /**
         * Render body of Custom Field Settings.
         */
        public function render_body()
        {
        }
        /**
         * Render pagination for Custom Field Settings.
         *
         * @param int $items_per_page Items per page to display.
         * @param int $current_page Which page to display.
         */
        public function render_pagination($items_per_page, $current_page)
        {
        }
        public abstract function get_no_data_message();
        public abstract function get_column_header($id);
    }
    class WPML_TM_MCS_Term_Custom_Field_Settings_Menu extends \WPML_TM_MCS_Custom_Field_Settings_Menu
    {
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        /**
         * @param string $key
         *
         * @return WPML_Term_Custom_Field_Setting
         */
        protected function get_setting($key)
        {
        }
        /**
         * @return string
         */
        protected function get_title()
        {
        }
        /**
         * @return string
         */
        protected function kind_shorthand()
        {
        }
        /**
         * @return string
         */
        public function get_no_data_message()
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function get_column_header($id)
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Search_Render
     */
    class WPML_TM_MCS_Search_Render
    {
        /**
         * Twig template path.
         */
        const TM_MCS_SEARCH_TEMPLATE = 'tm-mcs-search.twig';
        /**
         * WPML_TM_MCS_Search_Render constructor.
         *
         * @param IWPML_Template_Service $template Twig template service.
         * @param string                 $search_string Search string.
         */
        public function __construct(\IWPML_Template_Service $template, $search_string)
        {
        }
        /**
         * Get twig model.
         *
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * Render model via twig.
         *
         * @return mixed
         */
        public function render()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_MCS_ATE extends \WPML_Twig_Template_Loader
    {
        /**
         *
         * /**
         * WPML_TM_MCS_ATE constructor.
         *
         * @param WPML_TM_ATE_Authentication $authentication
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         *
         * @param WPML_TM_MCS_ATE_Strings    $strings
         */
        public function __construct(\WPML_TM_ATE_Authentication $authentication, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML_TM_MCS_ATE_Strings $strings)
        {
        }
        /**
         * @return string
         */
        public function get_template_path()
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get_model(array $args = array())
        {
        }
        public function render()
        {
        }
        public function renderTroubleshooting()
        {
        }
        public function get_strings()
        {
        }
        /**
         * @return array
         */
        public function get_script_data()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Pagination_Ajax
     */
    class WPML_TM_MCS_Pagination_Ajax
    {
        public function __construct(\WPML_TM_MCS_Custom_Field_Settings_Menu_Factory $menu_factory)
        {
        }
        /**
         * Define Ajax hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Update custom fields form.
         */
        public function update_mcs_cf()
        {
        }
    }
    abstract class WPML_TM_MCS_Section_UI
    {
        public function __construct($id, $title)
        {
        }
        /**
         * @return mixed
         */
        public function get_id()
        {
        }
        public function add_hooks()
        {
        }
        public function mcsetup_navigation_links(array $mcsetup_sections)
        {
        }
        public function render()
        {
        }
        /**
         * @return string
         */
        protected abstract function render_content();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_MCS_ATE_Strings
    {
        const AMS_STATUS_ACTIVE_NOT_ALL_SUBSCRIBED = 'active-not-all-subscribed';
        /**
         * WPML_TM_MCS_ATE constructor.
         *
         * @param WPML_TM_ATE_Authentication $authentication
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         */
        public function __construct(\WPML_TM_ATE_Authentication $authentication, \WPML_TM_ATE_AMS_Endpoints $endpoints)
        {
        }
        /**
         * @return string|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_auto_login()
        {
        }
        public function get_status_HTML($status, $all_users_have_subscription = \true)
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @param string     $attribute
         * @param null|mixed $default
         *
         * @return mixed
         */
        public function get_current_status_attribute($attribute, $default = \null)
        {
        }
        /**
         * @param string     $status
         * @param string     $attribute
         * @param null|mixed $default
         *
         * @return mixed
         */
        public function get_status_attribute($status, $attribute, $default = \null)
        {
        }
        public function get_statuses()
        {
        }
        public function get_synchronize_button_text()
        {
        }
    }
    class WPML_TM_MCS_Custom_Field_Settings_Menu_Factory
    {
        /**
         * @return WPML_TM_MCS_Post_Custom_Field_Settings_Menu
         */
        public function create_post()
        {
        }
        /**
         * @return WPML_TM_MCS_Term_Custom_Field_Settings_Menu
         */
        public function create_term()
        {
        }
    }
    class WPML_TM_MCS_Post_Custom_Field_Settings_Menu extends \WPML_TM_MCS_Custom_Field_Settings_Menu
    {
        /**
         * @return string
         */
        protected function get_meta_type()
        {
        }
        /**
         * @param string $key
         *
         * @return WPML_Post_Custom_Field_Setting
         */
        protected function get_setting($key)
        {
        }
        /**
         * @return string
         */
        protected function get_title()
        {
        }
        /**
         * @return string
         */
        protected function kind_shorthand()
        {
        }
        /**
         * @return string
         */
        public function get_no_data_message()
        {
        }
        /**
         * @param string $id
         *
         * @return string
         */
        public function get_column_header($id)
        {
        }
    }
    class WPML_TM_Options_Ajax
    {
        const NONCE_TRANSLATED_DOCUMENT = 'wpml-translated-document-options-nonce';
        public function __construct(\SitePress $sitepress)
        {
        }
        public function ajax_hooks()
        {
        }
        public function wpml_translated_document_options()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Search_Factory
     */
    class WPML_TM_MCS_Search_Factory
    {
        /**
         * Create MCS Search.
         *
         * @param string $search_string
         *
         * @return WPML_TM_MCS_Search_Render
         */
        public function create($search_string = '')
        {
        }
    }
    class WPML_TM_Pickup_Mode_Ajax
    {
        const NONCE_PICKUP_MODE = 'wpml_save_translation_pickup_mode';
        public function __construct(\SitePress $sitepress, \WPML_Pro_Translation $icl_pro_translation)
        {
        }
        public function ajax_hooks()
        {
        }
        public function wpml_save_translation_pickup_mode()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Pagination_Ajax_Factory
     */
    class WPML_TM_MCS_Pagination_Ajax_Factory implements \IWPML_AJAX_Action_Loader
    {
        /**
         * Create MCS Pagination.
         *
         * @return WPML_TM_MCS_Pagination_Ajax
         */
        public function create()
        {
        }
    }
    /**
     * WPML_TM_MCS_Pagination_Render class file.
     *
     * @package wpml-translation-management
     */
    /**
     * Class WPML_TM_MCS_Pagination_Render
     */
    class WPML_TM_MCS_Pagination_Render
    {
        /**
         * Twig template path.
         */
        const TM_MCS_PAGINATION_TEMPLATE = 'tm-mcs-pagination.twig';
        /**
         * WPML_TM_MCS_Pagination_Render constructor.
         *
         * @param IWPML_Template_Service $template   Twig template service.
         * @param WPML_Admin_Pagination  $pagination Admin pagination object.
         */
        public function __construct(\IWPML_Template_Service $template, \WPML_Admin_Pagination $pagination)
        {
        }
        /**
         * Render model via twig.
         *
         * @return mixed
         */
        public function render()
        {
        }
        /**
         * Paginate links.
         *
         * @return array
         */
        public function paginate_links()
        {
        }
    }
    class WPML_Translate_Link_Targets_UI extends \WPML_TM_MCS_Section_UI
    {
        const ID = 'ml-content-setup-sec-links-target';
        public function __construct($title, $wpdb, $sitepress, $pro_translation)
        {
        }
        /**
         * @return string
         */
        protected function render_content()
        {
        }
    }
    /**
     * Class WPML_TM_MCS_Pagination_Render_Factory
     */
    class WPML_TM_MCS_Pagination_Render_Factory
    {
        /**
         * WPML_TM_MCS_Pagination_Render_Factory constructor.
         *
         * @param int $items_per_page
         */
        public function __construct($items_per_page)
        {
        }
        /**
         * @param $items_per_page
         * @param $total_items
         * @param int            $current_page
         *
         * @return WPML_TM_MCS_Pagination_Render
         */
        public function create($total_items, $current_page = 1)
        {
        }
    }
}
namespace WPML\TM\Menu\McSetup {
    class CfMetaBoxOption
    {
        const GROUP = 'core';
        const CF_META_BOX_OPTION_KEY = 'show_cf_meta_box';
        /**
         * @return boolean
         */
        public static function get()
        {
        }
        /**
         * @param boolean $value
         */
        public static function update($value)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Scripts_Factory
    {
        public function init_hooks()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function admin_enqueue_scripts()
        {
        }
        public function register_otgs_notices()
        {
        }
        /**
         * @param $handle
         *
         * @throws \InvalidArgumentException
         */
        public function localize_script($handle, $additional_data = array())
        {
        }
        public function build_localize_script_data($additional_data = array())
        {
        }
        /**
         * @return WPML_TM_MCS_ATE
         * @throws \InvalidArgumentException
         */
        public function create_ate()
        {
        }
        /**
         * @param array $strings
         * @param bool  $all_users_have_subscription
         *
         * @return array
         */
        public function filter_translators_view_strings(array $strings, $all_users_have_subscription)
        {
        }
    }
    class WPML_TM_Jobs_List_Translators
    {
        /**
         * @param WPML_Translator_Records $translator_records
         */
        public function __construct(\WPML_Translator_Records $translator_records)
        {
        }
        public function get()
        {
        }
    }
    class WPML_TM_Jobs_List_Services
    {
        public function __construct(\WPML_TM_Rest_Jobs_Translation_Service $service_names)
        {
        }
        public function get()
        {
        }
    }
    class WPML_TM_Jobs_List_Translated_By_Filters
    {
        /**
         * @param WPML_TM_Jobs_List_Services    $services
         * @param WPML_TM_Jobs_List_Translators $translators
         */
        public function __construct(\WPML_TM_Jobs_List_Services $services, \WPML_TM_Jobs_List_Translators $translators)
        {
        }
        /**
         * @return array
         */
        public function get()
        {
        }
    }
    class WPML_TM_Jobs_List_Script_Data
    {
        const TM_JOBS_PAGE = 'tm-jobs';
        const TRANSLATION_QUEUE_PAGE = 'translation-queue';
        /**
         * @param WPML_TM_Rest_Jobs_Language_Names|null $language_names
         * @param WPML_TM_Jobs_List_Translated_By_Filters|null $translated_by_filters
         * @param WPML_TM_Jobs_List_Translators|null $translators
         * @param WPML_TM_Jobs_List_Services|null $services
         */
        public function __construct(\WPML_TM_Rest_Jobs_Language_Names $language_names = \null, \WPML_TM_Jobs_List_Translated_By_Filters $translated_by_filters = \null, \WPML_TM_Jobs_List_Translators $translators = \null, \WPML_TM_Jobs_List_Services $services = \null)
        {
        }
        /**
         * @return array
         */
        public function get()
        {
        }
    }
    class WPML_Translation_Editor_Header
    {
        public function __construct($job_instance)
        {
        }
        public function get_model()
        {
        }
    }
    class WPML_Editor_UI_Fields
    {
        public function add_field($field)
        {
        }
        public function get_fields()
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_Field_Group extends \WPML_Editor_UI_Fields
    {
        function __construct($title = '', $divider = \true)
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_Field
    {
        protected $id;
        protected $title;
        protected $original;
        protected $translation;
        protected $is_complete;
        function __construct($id, $title, $data, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_Single_Line_Field extends \WPML_Editor_UI_Field
    {
        function __construct($id, $title, $data, $include_copy_button, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
    }
    class WPML_Editor_UI_TextArea_Field extends \WPML_Editor_UI_Field
    {
        function __construct($id, $title, $data, $include_copy_button, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
    }
    class WPML_Editor_UI_Field_Image extends \WPML_Editor_UI_Fields
    {
        function __construct($id, $image_id, $data, $divider = \true)
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_Field_Section extends \WPML_Editor_UI_Fields
    {
        function __construct($title = '', $sub_title = '')
        {
        }
        public function get_layout()
        {
        }
    }
    class WPML_Editor_UI_WYSIWYG_Field extends \WPML_Editor_UI_Field
    {
        function __construct($id, $title, $data, $include_copy_button, $requires_complete = \false)
        {
        }
        public function get_fields()
        {
        }
    }
    class WPML_Custom_Field_Editor_Settings
    {
        public function __construct(\WPML_Custom_Field_Setting_Factory $settingsFactory)
        {
        }
        public function filter_name($fieldType, $default)
        {
        }
        public function filter_style($fieldType, $default)
        {
        }
        public function get_group($fieldType)
        {
        }
    }
    abstract class WPML_TM_Job_Action
    {
        /** @var  WPML_TM_Job_Action_Factory $job_action_factory */
        protected $job_action_factory;
        /**
         * WPML_TM_Job_Action constructor.
         *
         * @param WPML_TM_Job_Action_Factory $job_action_factory
         */
        public function __construct(&$job_action_factory)
        {
        }
    }
    class WPML_TM_Editor_Save_Ajax_Action extends \WPML_TM_Job_Action
    {
        /**
         * WPML_TM_Editor_Save_Ajax_Action constructor.
         *
         * @param WPML_TM_Job_Action_Factory $job_action_factory
         * @param array                      $data
         */
        public function __construct(&$job_action_factory, array $data)
        {
        }
        public function run()
        {
        }
    }
    class WPML_Translation_Editor_Languages extends \WPML_SP_User
    {
        /**
         * @param SitePress $sitepress
         */
        public function __construct(&$sitepress, $job)
        {
        }
        public function get_model()
        {
        }
    }
    class WPML_Editor_UI_Job
    {
        protected $job_id;
        function __construct($job_id, $job_type, $job_type_title, $title, $view_link, $source_lang, $target_lang, $translation_complete, $duplicate)
        {
        }
        public function add_field($field)
        {
        }
        public function add_note($note)
        {
        }
        public function get_all_fields()
        {
        }
        public function get_layout_of_fields()
        {
        }
        public function get_target_language()
        {
        }
        public function is_translation_complete()
        {
        }
        public function save($data)
        {
        }
        public function requires_translation_complete_for_each_field()
        {
        }
        public function display_hide_completed_switcher()
        {
        }
        public function is_hide_empty_fields()
        {
        }
        public function save_translations($translations)
        {
        }
    }
    class WPML_Translation_Editor_UI
    {
        const MAX_ALLOWED_SINGLE_LINE_LENGTH = 50;
        function __construct(\wpdb $wpdb, \SitePress $sitepress, \TranslationManagement $iclTranslationManagement, \WPML_Element_Translation_Job $job_instance, \WPML_TM_Job_Action_Factory $job_factory, \WPML_TM_Job_Layout $job_layout)
        {
        }
        /**
         * Force using uncompressed version tinymce which solves:
         * https://onthegosystems.myjetbrains.com/youtrack/issue/wpmldev-191
         *
         * Seams the compressed and uncompressed have some difference, because even WP has a force_uncompressed_tinymce
         * method, which is triggered whenever a custom theme on TinyMCE is used.
         *
         * @return void
         */
        public function force_uncompressed_tinymce()
        {
        }
        function render()
        {
        }
    }
    class WPML_Translation_Editor extends \WPML_WPDB_And_SP_User
    {
        /**
         * @param SitePress                    $sitepress
         * @param wpdb                         $wpdb
         * @param WPML_Element_Translation_Job $job
         */
        public function __construct(&$sitepress, &$wpdb, $job)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Enqueues the JavaScript used by the TM editor.
         */
        public function enqueue_js()
        {
        }
        public function filter_original_editor_buttons($config, $editor_id)
        {
        }
        public function output_editors($field)
        {
        }
    }
    class WPML_TM_Field_Type_Sanitizer
    {
        /**
         * Get elements custom field `field_type`.
         * Removes last character if it's number.
         * ex. field-custom_field-0 => field-custom_field
         *
         * @param $element
         *
         * @return string
         */
        public static function sanitize($custom_field_type)
        {
        }
    }
    class WPML_TM_Editor_Job_Save
    {
        public function save($data)
        {
        }
    }
    interface IWPML_TM_Admin_Section
    {
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order();
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug();
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities();
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption();
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback();
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook);
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible();
    }
    /**
     * It handles the TM section responsible for displaying the AMS/ATE console.
     *
     * This class takes care of the following:
     * - enqueuing the external script which holds the React APP
     * - adding the ID to the enqueued script (as it's required by the React APP)
     * - adding an inline script to initialize the React APP
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_ATE_Console_Section implements \IWPML_TM_Admin_Section
    {
        const ATE_APP_ID = 'eate_widget';
        const TAB_ORDER = 10000;
        const CONTAINER_SELECTOR = '#ams-ate-console';
        const TAB_SELECTOR = '.wpml-tabs .nav-tab.nav-tab-active.nav-tab-ate-ams';
        const SLUG = 'ate-ams';
        /**
         * WPML_TM_AMS_ATE_Console_Section constructor.
         *
         * @param SitePress                  $sitepress The instance of \SitePress.
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints The instance of WPML_TM_ATE_AMS_Endpoints.
         * @param WPML_TM_ATE_Authentication $auth      The instance of WPML_TM_ATE_Authentication.
         * @param WPML_TM_AMS_API            $ams_api   The instance of WPML_TM_AMS_API.
         */
        public function __construct(\SitePress $sitepress, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML_TM_ATE_Authentication $auth, \WPML_TM_AMS_API $ams_api)
        {
        }
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order()
        {
        }
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities()
        {
        }
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption()
        {
        }
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback()
        {
        }
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible()
        {
        }
        /**
         * Outputs the content of the section.
         */
        public function render()
        {
        }
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook)
        {
        }
        /**
         * @return array<string,mixed>
         */
        public function get_widget_constructor()
        {
        }
        /**
         * @return string
         */
        public function getWidgetScriptUrl()
        {
        }
    }
    interface IWPML_TM_Admin_Section_Factory
    {
        /**
         * Returns an instance of a class implementing \IWPML_TM_Admin_Section.
         *
         * @return \IWPML_TM_Admin_Section
         */
        public function create();
    }
    class WPML_TM_AMS_ATE_Console_Section_Factory implements \IWPML_TM_Admin_Section_Factory
    {
        /**
         * Returns an instance of a class implementing \IWPML_TM_Admin_Section.
         *
         * @return \IWPML_TM_Admin_Section
         */
        public function create()
        {
        }
    }
    class WPML_Basket_Tab_Ajax
    {
        /**
         * @param TranslationProxy_Project|false           $project
         * @param WPML_Translation_Proxy_Basket_Networking $networking
         * @param WPML_Translation_Basket                  $basket
         */
        function __construct($project, $networking, $basket)
        {
        }
        function init()
        {
        }
        /**
         * Handler for the ajax call to commit a chunk of the items in a batch provided in the request.
         *
         * @uses \WPML_Translation_Proxy_Basket_Networking::commit_basket_chunk
         */
        function send_basket_chunk()
        {
        }
        /**
         * Ajax handler for the first ajax request call in the basket commit workflow, responding with an message
         * containing information about the basket's contents.
         *
         * @uses \WPML_Basket_Tab_Ajax::create_remote_batch_message
         */
        function begin_basket_commit()
        {
        }
        /**
         * Last ajax call in the multiple ajax calls made during the commit of a batch.
         * Empties the basket in case the commit worked error free responds to the ajax call.
         */
        function send_basket_commit()
        {
        }
        /**
         * @param $translators
         *
         * @return bool
         */
        public function contains_local_translators_different_than_current_user($translators)
        {
        }
        /**
         * Ajax handler for checking if a current basket/batch name is valid for use with the currently used translation
         * service.
         *
         * @uses \WPML_Translation_Basket::check_basket_name
         */
        function check_basket_name()
        {
        }
        public function rollback_basket()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationBasket {
    class Utility
    {
        /**
         * @param \SitePress               $sitepress
         * @param \WPML_Translator_Records $translatorRecords
         */
        public function __construct(\SitePress $sitepress, \WPML_Translator_Records $translatorRecords)
        {
        }
        /**
         * @return array
         */
        public function getTargetLanguages()
        {
        }
        /**
         * @param $targetLanguages
         *
         * @return bool
         */
        public function isTheOnlyAvailableTranslatorForTargetLanguages($targetLanguages)
        {
        }
        /**
         * @return bool
         */
        public function isTheOnlyAvailableTranslator()
        {
        }
    }
    class Strings
    {
        const ATE_AUTOMATIC_TRANSLATION_SUGGESTION = 'wpml-ate-automatic-translation-suggestion';
        /**
         * @param Utility        $utility
         * @param DismissNotices $dismissNotices
         */
        public function __construct(\WPML\TM\Menu\TranslationBasket\Utility $utility, \WPML\Notices\DismissNotices $dismissNotices)
        {
        }
        public function getAll()
        {
        }
        /**
         * @return string
         */
        public function duplicatePostTranslationWarning()
        {
        }
        /**
         * @return string
         */
        public function jobsSentToLocalTranslator()
        {
        }
        /**
         * @return string
         */
        public function jobsSentToCurrentUserWhoIsTheOnlyTranslator()
        {
        }
        /**
         * @return string
         */
        public function jobsSentDefaultMessage()
        {
        }
        /**
         * @return string
         */
        public function emailNotSentError()
        {
        }
    }
}
namespace {
    class WPML_TM_Translate_Independently
    {
        public function __construct(\TranslationManagement $translation_management, \WPML_Translation_Basket $translation_basket, \SitePress $sitepress)
        {
        }
        /**
         * Init all plugin actions.
         */
        public function init()
        {
        }
        /**
         * Add hidden fields to TM basket.
         * #icl_duplicate_post_in_basket with list of duplicated ids in basket target languages.
         * #icl_disconnect_nonce nonce for AJAX call.
         */
        public function add_hidden_field()
        {
        }
        /**
         * AJAX action to bulk disconnect posts before sending them to translation.
         */
        public function ajax_disconnect_duplicates()
        {
        }
    }
    class SitePress_Table_Basket extends \SitePress_Table
    {
        public static function enqueue_js()
        {
        }
        function prepare_items()
        {
        }
        function get_columns()
        {
        }
        /**
         * @param object $item
         * @param string $column_name
         *
         * @return mixed|string
         */
        function column_default($item, $column_name)
        {
        }
        function column_title($item)
        {
        }
        /**
         * @param array $item
         *
         * @return string
         */
        function column_delete($item)
        {
        }
        function no_items()
        {
        }
        function get_sortable_columns()
        {
        }
        function display_tablenav($which)
        {
        }
        function display()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices {
    class ServicesRetriever
    {
        public static function get(\WPML_TP_API_Services $servicesAPI, $getUserCountry, $mapService)
        {
        }
    }
    class ActiveServiceTemplate
    {
        const ACTIVE_SERVICE_TEMPLATE = 'active-service.twig';
        const HOURS_BEFORE_TS_REFRESH = 24;
        /**
         * @param  callable         $templateRenderer
         * @param  \WPML_TP_Service $active_service
         *
         * @return string
         */
        public static function render($templateRenderer, \WPML_TP_Service $active_service)
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices\Endpoints {
    class Select implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        public static function select($serviceId)
        {
        }
    }
    class Deactivate implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class Activate implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices {
    class ActivationAjaxFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return ActivationAjax
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices\Troubleshooting {
    class RefreshServicesFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return RefreshServices|null
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
        /**
         * @return RefreshServices
         * @throws \Auryn\InjectionException
         */
        public function create_an_instance()
        {
        }
    }
    class RefreshServices
    {
        const TEMPLATE = 'refresh-services.twig';
        const AJAX_ACTION = 'wpml_tm_refresh_services';
        public function __construct(\IWPML_Template_Service $template, \WPML_TP_API_Services $tp_services)
        {
        }
        public function add_hooks()
        {
        }
        public function render()
        {
        }
        public function refresh_services_ajax_handler()
        {
        }
        /**
         * @return bool
         */
        public function refresh_services()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationServices {
    class ServiceMapper
    {
        /**
         * @param \WPML_TP_Service $service
         * @param callable         $getActiveServiceId
         *
         * @return array
         */
        public static function map(\WPML_TP_Service $service, $getActiveServiceId)
        {
        }
    }
    class Section implements \IWPML_TM_Admin_Section
    {
        const SLUG = 'translators';
        /**
         * WPML_TM_Translation_Services_Admin_Section constructor.
         *
         * @param \SitePress $sitepress The SitePress instance.
         * @param callable   $template  The template to use.
         */
        public function __construct(\SitePress $sitepress, $template)
        {
        }
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order()
        {
        }
        /**
         * Outputs the content of the section.
         */
        public function render()
        {
        }
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible()
        {
        }
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities()
        {
        }
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption()
        {
        }
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback()
        {
        }
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook)
        {
        }
    }
    class ActiveServiceTemplateFactory
    {
        /**
         * @return \Closure
         */
        public static function createRenderer()
        {
        }
    }
    class Resources implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function enqueue_styles()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
    class AuthenticationAjaxFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return AuthenticationAjax
         */
        public function create()
        {
        }
    }
    class AuthenticationAjax
    {
        const AJAX_ACTION = 'translation_service_authentication';
        /** @var  AuthorizationFactory */
        protected $authorize_factory;
        /**
         * @param AuthorizationFactory $authorize_factory
         */
        public function __construct(\WPML\TM\TranslationProxy\Services\AuthorizationFactory $authorize_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return void
         */
        public function authenticate_service()
        {
        }
        /**
         * @return void
         */
        public function update_credentials()
        {
        }
        /**
         * @return void
         */
        public function invalidate_service()
        {
        }
        /**
         * @return bool
         */
        public function is_valid_request()
        {
        }
        /**
         * @return bool
         */
        public function is_valid_request_with_params()
        {
        }
    }
    class ActivationAjax
    {
        const NONCE_ACTION = 'translation_service_toggle';
        const REFRESH_TS_INFO_ACTION = 'refresh_ts_info';
        public function __construct(\WPML_TP_Client $tp_client)
        {
        }
        public function add_hooks()
        {
        }
        public function translation_service_toggle()
        {
        }
        public function refresh_ts_info()
        {
        }
    }
    class SectionFactory implements \IWPML_TM_Admin_Section_Factory
    {
        /**
         * @return Section
         */
        public function create()
        {
        }
    }
    class NoSiteKeyTemplate
    {
        const TEMPLATE = 'no-site-key.twig';
        /**
         * @param  callable $templateRenderer
         */
        public static function render($templateRenderer)
        {
        }
    }
    class MainLayoutTemplate
    {
        const SERVICES_LIST_TEMPLATE = 'services-layout.twig';
        /**
         * @param  callable $templateRenderer
         * @param  callable $activeServiceRenderer
         * @param  bool     $hasPreferredService
         * @param  callable $retrieveServiceTabsData
         */
        public static function render($templateRenderer, $activeServiceRenderer, $hasPreferredService, $retrieveServiceTabsData)
        {
        }
    }
    class ActiveServiceRepository
    {
        /**
         * @return \WPML_TP_Service|null
         */
        public static function get()
        {
        }
        public static function getId()
        {
        }
    }
}
namespace {
    class WPML_TM_Translation_Roles_Section implements \IWPML_TM_Admin_Section
    {
        const SLUG = 'translators';
        public function __construct(\WPML\TM\Menu\TranslationServices\Section $translation_services_section)
        {
        }
        /**
         * Returns a value which will be used for sorting the sections.
         *
         * @return int
         */
        public function get_order()
        {
        }
        /**
         * Returns the unique slug of the sections which is used to build the URL for opening this section.
         *
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * Returns one or more capabilities required to display this section.
         *
         * @return string|array
         */
        public function get_capabilities()
        {
        }
        /**
         * Returns the caption to display in the section.
         *
         * @return string
         */
        public function get_caption()
        {
        }
        /**
         * Returns the callback responsible for rendering the content of the section.
         *
         * @return callable
         */
        public function get_callback()
        {
        }
        /**
         * This method is hooked to the `admin_enqueue_scripts` action.
         *
         * @param string $hook The current page.
         */
        public function admin_enqueue_scripts($hook)
        {
        }
        /**
         * Used to extend the logic for displaying/hiding the section.
         *
         * @return bool
         */
        public function is_visible()
        {
        }
        /**
         * Outputs the content of the section.
         */
        public function render()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationRoles {
    class RoleValidator
    {
        /**
         * Checks if a specific role is valid.
         *
         * @param string $roleName
         * @return bool
         */
        public static function isValid($roleName)
        {
        }
        /**
         * @param string $roleName
         *
         * @return string|null
         */
        public static function getTheHighestPossibleIfNotValid($roleName)
        {
        }
    }
}
namespace {
    class WPML_TM_Translation_Roles_Section_Factory implements \IWPML_TM_Admin_Section_Factory
    {
        /**
         * @return \WPML_TM_Admin_Section|\WPML_TM_Translation_Roles_Section
         */
        public function create()
        {
        }
    }
    class WPML_TM_Dashboard_Document_Row
    {
        public function __construct($doc_data, $post_types, $post_statuses, $active_languages, $selected, \SitePress $sitepress, \WPML_TM_Translatable_Element_Provider $translatable_element_provider)
        {
        }
        public function get_word_count()
        {
        }
        public function get_title()
        {
        }
        public function get_type_prefix()
        {
        }
        public function get_type()
        {
        }
        public function display()
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 20/04/17
     * Time: 11:39 AM
     */
    class WPML_TM_WP_Query extends \WP_Query
    {
        public function get_found_count()
        {
        }
        public function getPostCount()
        {
        }
    }
}
namespace WPML\TM\Menu\Dashboard {
    class PostJobsRepository
    {
        /**
         * @param int    $original_element_id
         * @param string $element_type
         *
         * @return array
         */
        public function getJobsGroupedByLang($original_element_id, $element_type)
        {
        }
        /**
         * @param \WPML_TM_Post_Job_Entity $job
         *
         * @return array
         */
        public function mapJob(\WPML_TM_Post_Job_Entity $job)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_Dashboard_Pagination
     */
    class WPML_TM_Dashboard_Pagination
    {
        public function add_hooks()
        {
        }
        public function filter_dashboard_post_query_args_for_pagination($query_args, $args)
        {
        }
        /**
         * Sets value for posts limit query to be used in post_limits filter
         *
         * @param int $value
         *
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmldev-616
         */
        public function setPostsLimitValue($value)
        {
        }
        /**
         * Resets value of posts limit variable.
         *
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmldev-616
         */
        public function resetPostsLimitValue()
        {
        }
        /**
         * Custom callback that's hooked into 'post_limits' filter to set custom limit of retrieved posts.
         *
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmldev-616
         *
         * @return string
         */
        public function getPostsLimitQueryValue()
        {
        }
        /**
         * @param integer $posts_per_page
         * @param integer $found_documents
         */
        public function add_tm_dashboard_pagination($posts_per_page, $found_documents)
        {
        }
    }
    class WPML_TM_Dashboard_Display_Filter
    {
        const PARENT_TAXONOMY_CONTAINER = 'parent-taxonomy-container';
        const PARENT_SELECT_ID = 'parent-filter-control';
        const PARENT_SELECT_NAME = 'filter[parent_type]';
        const PARENT_OR_TAXONOMY_ITEM_CONTAINER = 'parent-taxonomy-item-container';
        public function __construct($active_languages, $source_language_code, $translation_filter, $post_types, $post_statuses, array $priorities, \wpdb $wpdb)
        {
        }
        public function display()
        {
        }
    }
    /**
     * Class WPML_TM_Last_Picked_Up
     */
    class WPML_TM_Last_Picked_Up
    {
        /**
         * WPML_TM_Last_Picked_Up constructor.
         *
         * @param Sitepress $sitepress
         */
        public function __construct($sitepress)
        {
        }
        /**
         * Get last_picked_up setting.
         *
         * @return bool|mixed
         */
        public function get()
        {
        }
        /**
         * Get last_picked_up setting as formatted string.
         *
         * @param string $format
         *
         * @return string
         */
        public function get_formatted($format = 'Y, F jS @g:i a')
        {
        }
        /**
         * Set last_picked_up setting.
         */
        public function set()
        {
        }
    }
    /**
     * Class WPML_TM_Polling_Box
     */
    class WPML_TM_Polling_Box
    {
        /**
         * Renders the html for the TM polling pickup box
         * @uses $GLOBALS['sitepress']
         *
         * @return string
         */
        public function render()
        {
        }
    }
    class WPML_TM_Emails_Settings_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TM_Emails_Settings
         */
        public function create()
        {
        }
    }
    class WPML_TM_Emails_Settings
    {
        const TEMPLATE = 'emails-settings.twig';
        const COMPLETED_JOB_FREQUENCY = 'completed_frequency';
        const NOTIFY_IMMEDIATELY = 1;
        const NOTIFY_DAILY = 2;
        const NOTIFY_WEEKLY = 3;
        public function __construct(\IWPML_Template_Service $template_service, \TranslationManagement $tm)
        {
        }
        public function add_hooks()
        {
        }
        public function render()
        {
        }
        public function remove_scheduled_summary_email()
        {
        }
    }
    class WPML_Translations_Queue
    {
        /**
         * @param SitePress $sitepress
         * @param Editor $editor
         */
        public function __construct(\SitePress $sitepress, \WPML\TM\Editor\Editor $editor)
        {
        }
        public function init_hooks()
        {
        }
        public function load()
        {
        }
        public function display()
        {
        }
        /**
         * @todo this method should be removed but we have to check firts the logic in NextTranslationLink
         * @return array
         */
        public static function get_cookie_filters()
        {
        }
    }
}
namespace WPML\TM\Menu\TranslationQueue {
    class PostTypeFilters
    {
        /**
         * @param \WPML_TM_Jobs_Repository $jobsRepository
         */
        public function __construct(\WPML_TM_Jobs_Repository $jobsRepository)
        {
        }
        public function get(array $filters)
        {
        }
    }
    class CloneJobs
    {
        /**
         * @param WPML_TM_ATE_Jobs $ateJobs
         * @param WPML_TM_ATE_API  $apiClient
         * @param int              $repeatInterval
         */
        public function __construct(\WPML_TM_ATE_Jobs $ateJobs, \WPML_TM_ATE_API $apiClient, $repeatInterval = 5000000)
        {
        }
        /**
         * @param WPML_Element_Translation_Job $jobObject
         * @param int|null                     $sentFrom
         * @param bool                         $hasBeenAlreadyRepeated
         *
         * @return Either<WPML_Element_Translation_Job>
         */
        public function cloneCompletedATEJob(\WPML_Element_Translation_Job $jobObject, $sentFrom = null, $hasBeenAlreadyRepeated = false)
        {
        }
        /**
         * It creates a corresponding ATE job for WPML Job if such ATE job does not exist yet
         *
         * @param int $wpmlJobId
         * @return bool
         */
        public function cloneWPMLJob($wpmlJobId)
        {
        }
    }
}
namespace {
    class WPML_Translate_Independently
    {
        public function __construct()
        {
        }
        public function init()
        {
        }
        public function wpml_translate_independently()
        {
        }
        public function localize_scripts()
        {
        }
        /**
         * Add callback to detect post editor change.
         *
         * @param  array $initArray
         *
         * @return array
         */
        public function add_tiny_mce_change_detection($initArray)
        {
        }
    }
    /**
     * Fetch the wpml config files for known plugins and themes
     *
     * @package wpml-core
     */
    class WPML_Config_Update
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * WPML_Config_Update constructor.
         *
         * @param SitePress     $sitepress
         * @param WP_Http       $http
         * @param WPML_Log|null $log
         */
        public function __construct($sitepress, $http, \WPML_Log $log = \null)
        {
        }
        /**
         * @param WPML_Active_Plugin_Provider $active_plugin_provider
         */
        public function set_active_plugin_provider(\WPML_Active_Plugin_Provider $active_plugin_provider)
        {
        }
        /**
         * @return WPML_Active_Plugin_Provider
         */
        public function get_active_plugin_provider()
        {
        }
        public function run()
        {
        }
    }
    class WPML_TM_Loader
    {
        /**
         * Sets up the XLIFF class handling the frontend xliff related hooks
         * and rendering
         */
        public function load_xliff_frontend()
        {
        }
        /**
         * Wrapper for \tm_after_load()
         */
        public function tm_after_load()
        {
        }
        /**
         * @param WPML_WP_API $wpml_wp_api
         */
        public function load_pro_translation($wpml_wp_api)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_XML_UI_Hooks
    {
        public function __construct(\WPML_Custom_XML_UI_Resources $resources)
        {
        }
        public function init()
        {
        }
        public function add_items($tab_items)
        {
        }
        public function build_content()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_XML_UI_Resources
    {
        function __construct(\WPML_WP_API $wpml_wp_api)
        {
        }
        function admin_enqueue_scripts()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_XML_Factory
    {
        public function create_resources(\WPML_WP_API $wpml_wp_api)
        {
        }
    }
    class WPML_Languages_Notices
    {
        const NOTICE_ID_MISSING_MENU_ITEMS = 'wpml-missing-menu-items';
        const NOTICE_GROUP = 'wpml-core';
        const NOTICE_ID_MISSING_DOWNLOADED_LANGUAGES = 'wpml-missing-downloaded-languages';
        /**
         * WPML_Languages_Notices constructor.
         *
         * @param WPML_Notices $admin_notices
         */
        public function __construct(\WPML_Notices $admin_notices)
        {
        }
        function maybe_create_notice_missing_menu_items($languages_count)
        {
        }
        public function missing_languages($not_found_languages)
        {
        }
        public function is_not_languages_edit_page()
        {
        }
    }
    class WPML_Flags_Factory
    {
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @return WPML_Flags
         */
        public function create()
        {
        }
    }
    class WPML_Slash_Management
    {
        public function match_trailing_slash_to_reference($url, $reference_url)
        {
        }
        /**
         * @param string $url
         * @param string $method Deprecated.
         *
         * @return mixed|string
         */
        public function maybe_user_trailingslashit($url, $method = '')
        {
        }
        /**
         * @see Test_WPML_Lang_Domains_Converter::check_domains_and_subdir
         *
         * @param array $url_parts
         *
         * @return array
         */
        public function parse_missing_host_from_path(array $url_parts)
        {
        }
    }
    class WPML_Temporary_Switch_Admin_Language extends \WPML_SP_User
    {
        /**
         * @param SitePress $sitepress
         * @param string $target_lang
         */
        public function __construct(&$sitepress, $target_lang)
        {
        }
        public function __destruct()
        {
        }
        public function restore_lang()
        {
        }
    }
    class WPML_User extends \WP_User
    {
        /**
         * @see \get_user_meta
         *
         * @param string $key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_meta($key = '', $single = \false)
        {
        }
        /**
         * @see \update_meta
         *
         * @param string $key
         * @param mixed  $value
         * @param mixed  $prev_value
         */
        public function update_meta($key, $value, $prev_value = '')
        {
        }
        /**
         * @see \get_user_option
         *
         * @param string $option
         * @return mixed
         */
        public function get_option($option)
        {
        }
        /**
         * @see \update_user_option
         *
         * @param string $option_name
         * @param mixed  $new_value
         * @param bool   $global
         * @return int|bool
         */
        function update_option($option_name, $new_value, $global = \false)
        {
        }
    }
    class WPML_WP_User_Factory
    {
        public function create($user_id)
        {
        }
        public function create_by_email($user_email)
        {
        }
        public function create_current()
        {
        }
    }
    class WPML_WP_User_Query_Factory
    {
        public function create($args)
        {
        }
    }
    class WPML_String_Functions
    {
        public static function is_css_color($string)
        {
        }
        public static function is_css_length($string)
        {
        }
        public static function is_numeric($string)
        {
        }
        public static function is_not_translatable($string)
        {
        }
    }
    /**
     * Class WPML_Flags
     *
     * @package wpml-core
     */
    class WPML_Flags
    {
        /**
         * @param wpdb                 $wpdb
         * @param icl_cache            $cache
         * @param WP_Filesystem_Direct $filesystem
         */
        public function __construct($wpdb, \icl_cache $cache, \WP_Filesystem_Direct $filesystem)
        {
        }
        /**
         * @param string $lang_code
         *
         * @return \stdClass|null
         */
        public function get_flag($lang_code)
        {
        }
        /**
         * @param string $lang_code
         *
         * @return string
         */
        public function get_flag_url($lang_code)
        {
        }
        /**
         * @param string $lang_code
         * @param int[]  $size An array describing [ $width, $height ]. It defaults to [18, 12].
         * @param string $fallback_text
         * @param string[] $css_classes Array of CSS class strings.
         *
         * @return string
         */
        public function get_flag_image($lang_code, $size = [], $fallback_text = '', $css_classes = [])
        {
        }
        public function clear()
        {
        }
        /**
         * @param array $allowed_file_types
         *
         * @return string[]
         */
        public function get_wpml_flags($allowed_file_types = \null)
        {
        }
        /**
         * @return string
         */
        public final function get_wpml_flags_directory()
        {
        }
        /**
         * @return string
         */
        public static final function get_wpml_flags_url()
        {
        }
        /**
         * @return string
         */
        public static final function get_wpml_flags_by_locales_url()
        {
        }
        /**
         * @return string
         */
        public static final function get_wpml_flag_image_ext()
        {
        }
    }
}
namespace WPML\Utils {
    class AutoAdjustIdsFactory
    {
        /**
         * @return AutoAdjustIds
         */
        public static function create()
        {
        }
    }
}
namespace WPML\Utilities {
    class DebugLog implements \IWPML_Backend_Action, \IWPML_AJAX_Action, \IWPML_REST_Action
    {
        public static $trace;
        public function add_hooks()
        {
        }
        public static function storeBackTrace()
        {
        }
        public function onShutdown()
        {
        }
    }
}
namespace {
    class WPML_Deactivate_Old_Media
    {
        public function __construct(\WPML_PHP_Functions $php_functions)
        {
        }
        public function add_hooks()
        {
        }
        public function deactivate_media()
        {
        }
    }
    class WPML_Temporary_Switch_Language extends \WPML_SP_User
    {
        /**
         * @param SitePress $sitepress
         * @param string $target_lang
         */
        public function __construct(&$sitepress, $target_lang)
        {
        }
        public function __destruct()
        {
        }
        public function restore_lang()
        {
        }
    }
    class WPML_WP_Query_API
    {
        public function __construct(&$wp_query)
        {
        }
        public function get_first_post_type()
        {
        }
    }
    /**
     * Class WPML_Queried_Object
     *
     * @author OnTheGoSystems
     */
    class WPML_Queried_Object
    {
        /**
         * WPML_TF_Queried_Object constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function has_object()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_language_code()
        {
        }
        /**
         * @return string
         */
        public function get_language_code()
        {
        }
        /**
         * @return bool
         */
        public function is_post()
        {
        }
        /**
         * @return null|int
         */
        public function get_id()
        {
        }
        /**
         * @return null|string
         */
        public function get_element_type()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_url()
        {
        }
        public function get_post_type()
        {
        }
        public function get_taxonomy()
        {
        }
        public function get_post_type_name()
        {
        }
        public function is_instance_of_post()
        {
        }
        public function is_instance_of_taxonomy()
        {
        }
        public function is_instance_of_post_type()
        {
        }
        public function is_instance_of_user()
        {
        }
    }
    class WPML_UUID
    {
        /**
         * @param string $object_id
         * @param string $object_type
         * @param int    $timestamp
         *
         * @return string
         */
        public function get($object_id, $object_type, $timestamp = \null)
        {
        }
        /**
         * RFC 4122 compliant UUIDs.
         *
         * The RFC 4122 specification defines a Uniform Resource Name namespace for
         * UUIDs (Universally Unique Identifier), also known as GUIDs (Globally
         * Unique Identifier).  A UUID is 128 bits long, and requires no central
         * registration process.
         *
         * @package UUID
         * @license https://www.gnu.org/licenses/gpl-2.0.txt GPLv2
         * @author bjornjohansen
         * @see https://bjornjohansen.no/uuid-as-wordpress-guid
         *
         * RFC 4122 compliant UUID version 5.
         *
         * @param  string $name    The name to generate the UUID from.
         * @param  string $ns_uuid Namespace UUID. Default is for the NS when name string is a URL.
         *
         * @return string          The UUID string.
         */
        public function get_uuid_v5($name, $ns_uuid = '6ba7b811-9dad-11d1-80b4-00c04fd430c8')
        {
        }
    }
    class WPML_Deactivate_Old_Media_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_WP_Taxonomy_Query
    {
        public function __construct($wp_api)
        {
        }
        public function get_query_vars()
        {
        }
        public function find($taxonomy)
        {
        }
    }
    class WPML_Encoding_Validation
    {
        const MINIMUM_STRING_LENGTH = 100;
        /**
         * Checks if data passed is base64 encoded string and if the length of it is more than or equal to $minimumValidStringLength.
         * Here we check for the length because we had cases were featured image names are passed in a false positive base64 encoding format.,
         * and this made the whole job to be blocked from sending to translation, while if a real field is encoded the length of it should be way more than how the image name will be.
         *
         * @param string $string
         *
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmldev-553
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmldev-1793
         */
        public function is_base64_with_100_chars_or_more($string)
        {
        }
    }
    class WPML_WP_Cache_Item
    {
        /**
         * WPML_WP_Cache_Item constructor.
         *
         * @param WPML_WP_Cache $cache
         * @param string|array  $key
         */
        public function __construct(\WPML_WP_Cache $cache, $key)
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
        /**
         * @param mixed $value
         */
        public function set($value)
        {
        }
    }
}
namespace WPML\Utils {
    class AutoAdjustIds
    {
        const WITH = true;
        const WITHOUT = false;
        /**
         * @param SitePress   $sitepress
         * @param WPML_WP_API $wp
         */
        public function __construct(\SitePress $sitepress, \WPML_WP_API $wp = null)
        {
        }
        /**
         * Enables adjusting ids to retrieve translated post instead of original, runs
         * the given $function and afterwards restore the original behaviour again.
         *
         * @param callable $function
         */
        public function runWith(callable $function)
        {
        }
        /**
         * Disables adjusting ids to retrieve translated post instead of original, runs
         * the given $function and afterwards restore the original behaviour again.
         *
         * @param callable $function
         *
         * @return mixed
         */
        public function runWithout(callable $function)
        {
        }
    }
    class Pager
    {
        /** @var string */
        protected $optionName;
        /** @var int */
        protected $pageSize;
        /**
         * @param string $optionName
         * @param int    $pageSize
         */
        public function __construct($optionName, $pageSize = 10)
        {
        }
        /**
         * @param Collection $collection
         * @param callable   $callback
         * @param int        $timeout
         *
         * @return int
         */
        public function iterate(\WPML\Collect\Support\Collection $collection, callable $callback, $timeout = PHP_INT_MAX)
        {
        }
        /**
         * @param Collection $collection
         *
         * @return int
         */
        public function getPagesCount(\WPML\Collect\Support\Collection $collection)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection $collection
         *
         * @return int
         */
        protected function getRemainingPages(\WPML\Collect\Support\Collection $collection, $processedItems)
        {
        }
        /**
         * @return int
         */
        public function getProcessedCount()
        {
        }
    }
}
namespace {
    class WPML_Simple_Language_Selector extends \WPML_SP_User
    {
        function __construct(&$sitepress)
        {
        }
        function render($options = array())
        {
        }
        public static function enqueue_scripts()
        {
        }
    }
    class WPML_WP_Cache
    {
        /** @var string Key name under which array of all group keys is stored */
        const KEYS = 'WPML_WP_Cache__group_keys';
        /**
         * WPML_WP_Cache constructor.
         *
         * @param string $group Optional. Where the cache contents are grouped. Default empty.
         */
        public function __construct($group = '')
        {
        }
        /**
         * Retrieves the cache contents from the cache by key and group.
         *
         * @param int|string $key    The key under which the cache contents are stored.
         * @param bool       $found  Optional. Whether the key was found in the cache (passed by reference).
         *                           Disambiguates a return of false, a storable value. Default null.
         *
         * @return bool|mixed False on failure to retrieve contents or the cache
         *                    contents on success
         */
        public function get($key, &$found = \null)
        {
        }
        /**
         * Saves the data to the cache.
         *
         * @param int|string $key    The cache key to use for retrieval later.
         * @param mixed      $data   The contents to store in the cache.
         * @param int        $expire Optional. When to expire the cache contents, in seconds.
         *                           Default 0 (no expiration).
         *
         * @return bool False on failure, true on success
         */
        public function set($key, $data, $expire = 0)
        {
        }
        /**
         * Removes the cache contents matching key and group.
         */
        public function flush_group_cache()
        {
        }
        public function execute_and_cache($key, $callback)
        {
        }
        /**
         * @param string $key
         *
         * @return array {
         *    @type mixed   $result @see Return value of \wp_cache_get.
         *    @type bool    $found @see `$found` argument of \wp_cache_get.
         * }
         */
        public function get_with_found($key)
        {
        }
    }
}
namespace WPML\Core\WP\App {
    class Resources
    {
        // enqueueApp :: string $app -> ( string $localizeData )
        public static function enqueueApp($app)
        {
        }
        /**
         * @param string $name
         * @param mixed $value
         */
        public static function enqueueGlobalVariable($name, $value)
        {
        }
    }
}
namespace WPML\Utils {
    /**
     * Class DebugBackTrace
     *
     * @package WPML\Utils
     */
    class DebugBackTrace
    {
        /**
         * DebugBackTrace constructor.
         *
         * @param int         $limit
         * @param bool        $provide_object
         * @param bool        $ignore_args
         * @param null|string $debug_backtrace_function
         */
        public function __construct($limit = 0, $provide_object = false, $ignore_args = true, $debug_backtrace_function = null)
        {
        }
        /**
         * @param array $functions
         * @param bool  $refresh
         *
         * @return bool
         */
        public function are_functions_in_call_stack(array $functions, $refresh = true)
        {
        }
        /**
         * @param string $function_name
         * @param bool   $refresh
         *
         * @return bool
         */
        public function is_function_in_call_stack($function_name, $refresh = true)
        {
        }
        /**
         * @param string $function_name
         * @param bool   $refresh
         *
         * @return int
         */
        public function count_function_in_call_stack($function_name, $refresh = true)
        {
        }
        /**
         * @param string $class_name
         * @param string $function_name
         * @param bool   $refresh
         *
         * @return bool
         */
        public function is_class_function_in_call_stack($class_name, $function_name, $refresh = true)
        {
        }
        /**
         * @return array
         */
        public function get_backtrace()
        {
        }
        public function remove_last_frame()
        {
        }
    }
}
namespace {
    class WPML_WP_Post
    {
        /** @var wpdb $wpdb */
        public $wpdb;
        /**
         * @param wpdb $wpdb
         * @param int $post_id
         */
        public function __construct(\wpdb $wpdb, $post_id)
        {
        }
        /**
         * @param array $post_data_array
         * @param bool  $direct_db_update
         */
        public function update(array $post_data_array, $direct_db_update = \false)
        {
        }
    }
    class WPML_Inactive_Content
    {
        public function __construct(\wpdb $wpdb, $current_language)
        {
        }
        /** @return bool */
        public function has_entries()
        {
        }
        /** @return array */
        public function get_content_types()
        {
        }
        /** @return array */
        public function get_languages()
        {
        }
        /** @return array */
        public function get_language_counts_rows()
        {
        }
        /**
         * @param $langName
         *
         * @return string
         */
        public function getLangCode($langName)
        {
        }
    }
    class WPML_Encoding
    {
        /**
         * @param string $string The string to decode.
         * @param string $encodings A comma separated list of encodings in the order that the data was encoded
         *
         * @return mixed
         */
        public static function decode($string, $encodings)
        {
        }
        /**
         * @param mixed  $data The data to encode.
         * @param string $encodings A comma separated list of encodings in the order that the data was encoded
         *
         * @return string
         */
        public static function encode($data, $encodings)
        {
        }
    }
    /**
     * Class WPML_Debug_BackTrace
     *
     * @deprecated 4.2.8
     */
    class WPML_Debug_BackTrace extends \WPML\Utils\DebugBackTrace
    {
        /**
         * @param string $php_version Deprecated.
         * @param int    $limit
         * @param bool   $provide_object
         * @param bool   $ignore_args
         * @param string $debug_backtrace_function
         * @phpstan-ignore-next-line
         */
        public function __construct($php_version = \null, $limit = 0, $provide_object = \false, $ignore_args = \true, $debug_backtrace_function = \null)
        {
        }
    }
    class WPML_Locale
    {
        /**
         * WPML_Locale constructor.
         *
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         * @param string    $locale
         */
        public function __construct(\wpdb &$wpdb, \SitePress &$sitepress, &$locale)
        {
        }
        public function init()
        {
        }
        /**
         * @see \Test_Admin_Settings::test_locale
         * @fixme
         * Due to the way these tests work (global state issues) I had to create this method
         * to ensure we have full coverage of the code.
         * This method shouldn't be used anywhere else and should be removed once tests are migrated
         * to the new tests framework.
         */
        public function reset_cached_data()
        {
        }
        /**
         * Hooked to 'sanitize_title' in case the user is using a language that has either German or Danish locale, to
         * ensure that WP Core sanitization functions handle special chars accordingly.
         *
         * @param string $title
         * @param string $raw_title
         *
         * @return string
         */
        public function filter_sanitize_title($title, $raw_title)
        {
        }
        /**
         * @return bool|mixed
         */
        public function locale()
        {
        }
        /**
         * @param string $code
         *
         * @return false|string
         */
        public function get_locale($code)
        {
        }
        /**
         * @return Collection
         */
        public function get_all_locales()
        {
        }
        public function switch_locale($lang_code = \false)
        {
        }
        public function get_locale_file_names()
        {
        }
        function _language_attributes($latr)
        {
        }
        /**
         * @return WPML_Locale
         */
        public static function get_instance_from_sitepress()
        {
        }
    }
    class WPML_Admin_Pagination_Render
    {
        const TEMPLATE = 'pagination.twig';
        public function __construct(\IWPML_Template_Service $template, \WPML_Admin_Pagination $pagination)
        {
        }
        public function get_model()
        {
        }
        public static function get_strings($totalItems)
        {
        }
        /**
         * @param array $items
         *
         * @return array
         */
        public function paginate($items)
        {
        }
    }
    class WPML_Admin_Pagination_Factory
    {
        public function __construct($items_per_page)
        {
        }
        /**
         * @return WPML_Admin_Pagination_Render
         */
        public function create($total_items, $page_param_name = 'paged')
        {
        }
    }
    class WPML_Admin_URL
    {
        public static function multilingual_setup($section = \null)
        {
        }
    }
    class WPML_Admin_Table_Sort
    {
        /**
         * @param string $orderby_param
         * @param string $order_param
         */
        public function __construct($orderby_param = 'orderby', $order_param = 'order')
        {
        }
        /**
         * @param string $primary_column
         */
        public function set_primary_column($primary_column)
        {
        }
        /**
         * @param string $column
         *
         * @return string
         */
        public function get_column_url($column)
        {
        }
        /**
         * @param string $column
         *
         * @return string
         */
        public function get_column_classes($column)
        {
        }
        /**
         * @return array
         */
        public function get_current_sorters()
        {
        }
    }
    /**
     * Class WPML_Admin_Pagination
     *
     * @author OnTheGoSystems
     */
    class WPML_Admin_Pagination
    {
        /**
         * @param string $page_param_name
         */
        public function set_page_param_name($page_param_name)
        {
        }
        /**
         * @return string
         */
        public function get_page_param_name()
        {
        }
        /**
         * @param int $items_per_page
         */
        public function set_items_per_page($items_per_page)
        {
        }
        /**
         * @return int
         */
        public function get_items_per_page()
        {
        }
        /**
         * @param int $total_items
         */
        public function set_total_items($total_items)
        {
        }
        /**
         * @return int
         */
        public function get_total_items()
        {
        }
        /**
         * @return int
         */
        public function get_total_pages()
        {
        }
        /**
         * @param int $page
         */
        public function set_current_page($page)
        {
        }
        /**
         * @return int
         */
        public function get_current_page()
        {
        }
        /**
         * @return null|string
         */
        public function get_first_page_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_previous_page_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_next_page_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_last_page_url()
        {
        }
    }
    class WPML_Ajax
    {
        /**
         * @return bool
         */
        public static function is_frontend_ajax_request()
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        public static function is_admin_ajax_request_called_from_frontend($url)
        {
        }
    }
    class WPML_WP_Cache_Factory
    {
        public function create_cache_group($group)
        {
        }
        public function create_cache_item($group, $key)
        {
        }
    }
    /**
     * Class WPML_Transient
     *
     * Due to some conflicts between cached environments (e.g. using W3TC) and the normal
     * WP Transients API, we've added this class which should behaves almost like the normal
     * transients API. Except for the fact that it is stored as normal options, so WP won't
     * recognize/treat it as a transient.
     */
    class WPML_Transient
    {
        const WPML_TRANSIENT_PREFIX = '_wpml_transient_';
        /**
         * @param string $name
         * @param string $value
         * @param string $expiration
         */
        public function set($name, $value, $expiration = '')
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function get($name)
        {
        }
        /**
         * @param string $name
         */
        public function delete($name)
        {
        }
    }
    class WPML_Cache_Factory
    {
        public function __construct()
        {
        }
        /**
         * @param string $cache_name
         *
         * @return WPML_WP_Cache
         * @throws InvalidArgumentException Exception.
         */
        public function get($cache_name)
        {
        }
        /**
         * @param string $cache_name
         * @param array  $clear_actions
         */
        public function define($cache_name, array $clear_actions)
        {
        }
    }
}
namespace WPML\Utilities {
    class NullLock implements \WPML\Utilities\ILock
    {
        public function create($release_timeout = null)
        {
        }
        public function release()
        {
        }
    }
    class KeyedLock extends \WPML\Utilities\Lock
    {
        /**
         * Lock constructor.
         *
         * @param \wpdb  $wpdb
         * @param string $name
         */
        public function __construct(\wpdb $wpdb, $name)
        {
        }
        /**
         * @param string $key
         * @param int    $release_timeout
         *
         * @return string|false The key or false if could not acquire the lock
         */
        public function create($key = null, $release_timeout = null)
        {
        }
        public function release()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Non_Persistent_Cache
     *
     * Implements non-persistent cache based on an array. Suitable to cache objects during single page load.
     */
    class WPML_Non_Persistent_Cache
    {
        /**
         * Retrieves the data contents from the cache, if it exists.
         *
         * @param string|int $key   Cache key.
         * @param string     $group Cache group.
         * @param bool       $found Whether the key was found in the cache (passed by reference).
         *                      Disambiguates a return of false, a storable value.
         *
         * @return mixed|bool
         */
        public static function get($key, $group = 'default', &$found = \null)
        {
        }
        /**
         * Sets the data contents into the cache.
         *
         * @param string|int $key   Cache key.
         * @param mixed	     $data  Data to store in cache.
         * @param string     $group Cache group.
         *
         * @return bool
         */
        public static function set($key, $data, $group = 'default')
        {
        }
        /**
         * Executes callback function and caches its result.
         *
         * @param string   $key      Cache key.
         * @param callable $callback Callback function.
         * @param string   $group    Cache group.
         *
         * @return bool
         */
        public static function execute_and_cache($key, $callback, $group = 'default')
        {
        }
        /**
         * Flush cache.
         *
         * @return bool
         */
        public static function flush()
        {
        }
        /**
         * Flush cache group.
         *
         * @param array|string $groups Cache group name.
         *
         * @return bool
         */
        public static function flush_group($groups = 'default')
        {
        }
    }
    class WPML_Global_AJAX extends \WPML_SP_User
    {
        /**
         * WPML_Global_AJAX constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(&$sitepress)
        {
        }
        public function save_language_negotiation_type_action()
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        function is_external($url)
        {
        }
        /**
         * @param string $site_host
         *
         * @return string
         */
        function remove_www_prefix($site_host)
        {
        }
    }
    /**
     * Class WPML_TM_Translators_Dropdown
     */
    class WPML_TM_Translators_Dropdown
    {
        /**
         * @param WPML_TM_Blog_Translators $blog_translators
         */
        public function __construct($blog_translators)
        {
        }
        /**
         * @param array $args
         *
         * @return string
         */
        public function render($args = array())
        {
        }
    }
}
namespace WPML\Troubleshooting {
    class AssignTranslationStatusToDuplicates
    {
        public static function run()
        {
        }
    }
}
namespace WPML\TM\Troubleshooting\Endpoints\ATESecondaryDomains {
    class EnableSecondaryDomain implements \WPML\Ajax\IHandler
    {
        public function __construct(\WPML\TM\ATE\ClonedSites\Lock $lock, \WPML\TM\ATE\ClonedSites\SecondaryDomains $secondsDomains)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Troubleshoot_Action
     *
     * @author onTheGoSystems
     */
    class WPML_Troubleshoot_Action
    {
        const SYNC_POSTS_TAXONOMIES_SLUG = 'synchronize_posts_taxonomies';
        /**
         * @return bool
         */
        public function is_valid_request()
        {
        }
    }
    class WPML_Table_Collate_Fix implements \IWPML_AJAX_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const AJAX_ACTION = 'fix_tables_collation';
        public function __construct(\wpdb $wpdb, \WPML_Upgrade_Schema $schema)
        {
        }
        public function add_hooks()
        {
        }
        public function fix_collate_ajax()
        {
        }
        public function render_troubleshooting_button()
        {
        }
        public function enqueue_scripts($hook)
        {
        }
        public function fix_collate()
        {
        }
    }
    class WPML_Debug_Information
    {
        /** @var wpdb $wpdb */
        public $wpdb;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /**
         * @param wpdb      $wpdb
         * @param SitePress $sitepress
         */
        public function __construct($wpdb, $sitepress)
        {
        }
        public function run()
        {
        }
        function get_core_info()
        {
        }
        function get_plugins_info()
        {
        }
        function get_theme_info()
        {
        }
        function do_json_encode($data)
        {
        }
    }
    /**
     * Class WPML_Troubleshoot_Sync_Posts_Taxonomies
     */
    class WPML_Troubleshoot_Sync_Posts_Taxonomies
    {
        const BATCH_SIZE = 5;
        public function __construct(\SitePress $sitePress, \WPML_Term_Translation_Utils $term_translation_utils)
        {
        }
        public function run()
        {
        }
    }
}
namespace WPML\TM\Troubleshooting {
    class Loader implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function render()
        {
        }
        public function enqueueScripts($hook)
        {
        }
    }
}
namespace {
    class WPML_Fix_Type_Assignments extends \WPML_WPDB_And_SP_User
    {
        /**
         * WPML_Fix_Type_Assignments constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct($sitepress)
        {
        }
        /**
         * Runs various database repair and cleanup actions on icl_translations.
         *
         * @return int Number of rows in icl_translations that were fixed
         */
        public function run()
        {
        }
    }
    class WPML_TM_Translation_Batch
    {
        const HANDLE_EXISTING_LEAVE = 'leave';
        const HANDLE_EXISTING_OVERRIDE = 'override';
        /**
         * @param WPML_TM_Translation_Batch_Element[] $elements
         * @param string                              $basket_name
         * @param array                               $translators
         * @param DateTime                            $deadline
         *
         * @throws InvalidArgumentException
         */
        public function __construct(array $elements, $basket_name, array $translators, \DateTime $deadline = \null)
        {
        }
        /**
         * @return WPML_TM_Translation_Batch_Element[]
         */
        public function get_elements()
        {
        }
        public function add_element(\WPML_TM_Translation_Batch_Element $element)
        {
        }
        /**
         * @param string $type
         *
         * @return WPML_TM_Translation_Batch_Element[]
         */
        public function get_elements_by_type($type)
        {
        }
        /**
         * @return string
         */
        public function get_basket_name()
        {
        }
        /**
         * @return array
         */
        public function get_translators()
        {
        }
        public function get_translator($lang)
        {
        }
        /**
         * @return DateTime
         */
        public function get_deadline()
        {
        }
        /**
         * @return array
         */
        public function get_target_languages()
        {
        }
        /**
         * @return array
         */
        public function get_remote_target_languages()
        {
        }
        /**
         * @return array
         */
        public function get_batch_options()
        {
        }
        /**
         * @return "auto"|"manual"|null
         */
        public function getTranslationMode()
        {
        }
        /**
         * @param "auto"|"manual"|null $translationMode
         */
        public function setTranslationMode($translationMode)
        {
        }
        /**
         * @return string
         */
        public function getHowToHandleExisting()
        {
        }
        /**
         * @param string $howToHandleExisting
         */
        public function setHowToHandleExisting($howToHandleExisting)
        {
        }
    }
    class WPML_TM_Translation_Batch_Factory
    {
        /**
         * @param WPML_Translation_Basket $basket
         */
        public function __construct(\WPML_Translation_Basket $basket)
        {
        }
        /**
         * @param array $batch_data
         *
         * @return WPML_TM_Translation_Batch
         */
        public function create(array $batch_data)
        {
        }
    }
    class WPML_TM_Translation_Batch_Element
    {
        /**
         * @param int $element_id
         * @param string $element_type
         * @param string $source_lang
         * @param array $target_languages
         * @param array $media_to_translations
         */
        public function __construct($element_id, $element_type, $source_lang, array $target_languages, array $media_to_translations = array())
        {
        }
        /**
         * @return int
         */
        public function get_element_id()
        {
        }
        /**
         * @return string
         */
        public function get_element_type()
        {
        }
        /**
         * @return string
         */
        public function get_source_lang()
        {
        }
        /**
         * @return string[]
         */
        public function get_target_langs()
        {
        }
        /**
         * @return mixed
         */
        public function get_media_to_translations()
        {
        }
    }
    class WPML_TM_Serialized_Custom_Field_Package_Handler
    {
        public function __construct(\WPML_Custom_Field_Setting_Factory $custom_field_setting_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int    $translated
         * @param string $custom_field_job_type - e.g: field-my_custom_field-0-my_attribute.
         *
         * @return int
         */
        public function translate_only_whitelisted_attributes($translated, $custom_field_job_type)
        {
        }
    }
    class WPML_Custom_Field_XML_Settings_Import
    {
        /**
         * WPML_Custom_Field_XML_Settings_Import constructor.
         *
         * @param WPML_Custom_Field_Setting_Factory $setting_factory
         * @param array                             $settings_array
         */
        public function __construct($setting_factory, $settings_array)
        {
        }
        /**
         * Runs the actual import of the xml
         */
        public function run()
        {
        }
    }
    class WPML_TM_Settings_Update extends \WPML_SP_User
    {
        /**
         * @param string                $index_singular
         * @param string                $index_plural
         * @param TranslationManagement $tm_instance
         * @param SitePress             $sitepress
         * @param WPML_Settings_Helper  $settings_helper
         */
        public function __construct($index_singular, $index_plural, &$tm_instance, &$sitepress, $settings_helper)
        {
        }
        /**
         * @param array $config
         */
        public function update_from_config(array $config)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 5/10/17
     * Time: 10:23 PM
     */
    class WPML_Verify_SitePress_Settings
    {
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function verify($settings)
        {
        }
    }
}
namespace WPML\TM\Settings {
    class Repository
    {
        public static function getSetting($indexes)
        {
        }
        public static function getCustomFieldsToTranslate()
        {
        }
        public static function getCustomFields()
        {
        }
    }
}
namespace {
    class WPML_TM_User
    {
        /** @var  TranslationManagement $tm_instance */
        protected $tm_instance;
        /**
         * WPML_Custom_Field_Setting_Factory constructor.
         *
         * @param TranslationManagement $tm_instance
         */
        public function __construct(\TranslationManagement $tm_instance)
        {
        }
    }
    abstract class WPML_Custom_Field_Setting extends \WPML_TM_User
    {
        /**
         * WPML_Custom_Field_Setting constructor.
         *
         * @param TranslationManagement $tm_instance
         * @param string                $index
         */
        public function __construct(&$tm_instance, $index)
        {
        }
        /**
         * @return string
         */
        public function get_index()
        {
        }
        /**
         * @return bool true if the custom field setting is given by a setting in
         *              a wpml-config.xml
         */
        public function is_read_only()
        {
        }
        /**
         * @return bool
         */
        public function is_unlocked()
        {
        }
        /**
         * @return bool
         */
        public function excluded()
        {
        }
        public function status()
        {
        }
        public function make_read_only()
        {
        }
        public function set_to_copy()
        {
        }
        public function set_to_copy_once()
        {
        }
        public function set_to_translatable()
        {
        }
        public function set_to_nothing()
        {
        }
        public function set_editor_style($style)
        {
        }
        public function get_editor_style()
        {
        }
        public function set_editor_label($label)
        {
        }
        public function get_editor_label()
        {
        }
        public function set_editor_group($group)
        {
        }
        public function get_editor_group()
        {
        }
        public function set_translate_link_target($state, $sub_fields)
        {
        }
        public function is_translate_link_target()
        {
        }
        public function get_translate_link_target_sub_fields()
        {
        }
        public function set_convert_to_sticky($state)
        {
        }
        public function is_convert_to_sticky()
        {
        }
        public function set_encoding($encoding)
        {
        }
        public function get_encoding()
        {
        }
        /**
         * @param array $whitelist
         */
        public function set_attributes_whitelist($whitelist)
        {
        }
        public function get_attributes_whitelist()
        {
        }
        /**
         * @return string
         */
        protected abstract function get_state_array_setting_index();
        protected abstract function get_unlocked_setting_index();
        /**
         * @return  string[]
         */
        protected abstract function get_excluded_keys();
        /**
         * @return string
         */
        protected abstract function get_setting_prefix();
        /**
         * @return string
         */
        public function get_html_disabled()
        {
        }
    }
}
namespace WPML\TM\Settings {
    class CustomFieldChangeDetector implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const PREVIOUS_SETTING = 'previous-custom-fields-to-translate';
        const DETECTED_SETTING = 'detected-custom-fields-to-translate';
        /**
         * @param BackgroundTaskService $backgroundTaskService
         */
        public function __construct(\WPML\Core\BackgroundTask\Service\BackgroundTaskService $backgroundTaskService)
        {
        }
        public function add_hooks()
        {
        }
        public static function getNew()
        {
        }
        public static function notify(array $newFields)
        {
        }
        public static function remove(array $fields)
        {
        }
        public static function updatePrevious()
        {
        }
        public static function getDetected()
        {
        }
        public function processNewFields()
        {
        }
    }
}
namespace {
    class WPML_TM_Serialized_Custom_Field_Package_Handler_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Custom_Field_Setting_Query_Factory
    {
        const TYPE_POSTMETA = 'postmeta';
        const TYPE_TERMMETA = 'termmeta';
        public function create($type)
        {
        }
    }
    class WPML_Custom_Field_Setting_Factory extends \WPML_TM_User
    {
        public $show_system_fields = \false;
        /**
         * @param  string $meta_key
         *
         * @return WPML_Post_Custom_Field_Setting
         */
        public function post_meta_setting($meta_key)
        {
        }
        /**
         * @param  string $meta_key
         *
         * @return WPML_Term_Custom_Field_Setting
         */
        public function term_meta_setting($meta_key)
        {
        }
        /**
         * Returns all custom field names for which a site has either a setting
         * in the TM settings or that can be found on any post.
         *
         * @return string[]
         */
        public function get_post_meta_keys()
        {
        }
        /**
         * Returns all term custom field names for which a site has either a setting
         * in the TM settings or that can be found on any term.
         *
         * @return string[]
         */
        public function get_term_meta_keys()
        {
        }
        /**
         * @param array $keys
         *
         * @return array
         */
        public function filter_custom_field_keys($keys)
        {
        }
    }
    class WPML_TM_Default_Settings_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Post_Custom_Field_Setting_Keys
    {
        /**
         * @return string
         */
        public static function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        public static function get_excluded_keys()
        {
        }
    }
    class WPML_Page_Builder_Settings
    {
        const OPTION_KEY = 'wpml_page_builders_options';
        /** @return bool */
        public function is_raw_html_translatable()
        {
        }
        /** @param bool $is_enabled */
        public function set_raw_html_translatable($is_enabled)
        {
        }
        public function save()
        {
        }
    }
}
namespace WPML\Settings {
    class UI implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public static function getData()
        {
        }
    }
}
namespace {
    class WPML_Term_Custom_Field_Setting extends \WPML_Custom_Field_Setting
    {
        /**
         * @return string
         */
        protected function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        protected function get_excluded_keys()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Settings_Filters
    {
        /**
         * @param array $types
         * @param array $read_only_cpt_settings
         * @param array $cpt_unlocked_options
         *
         * @return array
         * @see \WPML_Config::maybe_add_filter
         */
        function get_translatable_documents(array $types, array $read_only_cpt_settings, array $cpt_unlocked_options)
        {
        }
    }
    class WPML_Element_Sync_Settings_Factory
    {
        const POST = 'post';
        const TAX = 'taxonomy';
        const KEY_POST_SYNC_OPTION = 'custom_posts_sync_option';
        const KEY_TAX_SYNC_OPTION = 'taxonomies_sync_option';
        /**
         * @param string $type
         *
         * @return WPML_Element_Sync_Settings
         * @throws Exception
         */
        public static function create($type)
        {
        }
        public static function createPost()
        {
        }
        public static function createTax()
        {
        }
    }
    class WPML_Element_Sync_Settings
    {
        public function __construct(array $settings)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public function is_sync($type)
        {
        }
    }
    class WPML_TM_Default_Settings implements \IWPML_Action
    {
        public function __construct(\TranslationManagement $tm)
        {
        }
        public function add_hooks()
        {
        }
        public function init_action()
        {
        }
    }
}
namespace WPML\BackgroundTask {
    abstract class AbstractTaskEndpoint implements \WPML\Core\BackgroundTask\Model\TaskEndpointInterface
    {
        const LOCK_TIME = 2 * 60;
        const MAX_RETRIES = 0;
        /** @var UpdateBackgroundTask $updateBackgroundTask */
        protected $updateBackgroundTask;
        /** @var BackgroundTaskService $backgroundTaskService */
        protected $backgroundTaskService;
        /**
         * @param UpdateBackgroundTask $updateBackgroundTask
         * @param BackgroundTaskService $backgroundTaskService
         */
        public function __construct(\WPML\Core\BackgroundTask\Command\UpdateBackgroundTask $updateBackgroundTask, \WPML\Core\BackgroundTask\Service\BackgroundTaskService $backgroundTaskService)
        {
        }
        public function isDisplayed()
        {
        }
        public function getLockTime()
        {
        }
        public function getMaxRetries()
        {
        }
        public function getType()
        {
        }
        /**
         * @param BackgroundTask $task
         *
         * @return BackgroundTask
         */
        abstract function runBackgroundTask(\WPML\Core\BackgroundTask\Model\BackgroundTask $task);
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\TM\Settings {
    class ProcessNewTranslatableFields extends \WPML\BackgroundTask\AbstractTaskEndpoint
    {
        const LOCK_TIME = 5;
        const MAX_RETRIES = 10;
        const DESCRIPTION = 'Updating affected posts for changes in translatable fields %s.';
        const POSTS_PER_REQUEST = 10;
        /**
         * @param \wpdb                         $wpdb
         * @param \WPML_TM_Post_Actions         $postActions
         * @param AutotranslateActions          $autotranslateActions
         * @param UpdateBackgroundTask          $updateBackgroundTask
         * @param BackgroundTaskService      $backgroundTaskService
         */
        public function __construct(\wpdb $wpdb, \WPML_TM_Post_Actions $postActions, \WPML\TM\AutomaticTranslation\Actions\Actions $autotranslateActions, \WPML\Core\BackgroundTask\Command\UpdateBackgroundTask $updateBackgroundTask, \WPML\Core\BackgroundTask\Service\BackgroundTaskService $backgroundTaskService)
        {
        }
        public function runBackgroundTask(\WPML\Core\BackgroundTask\Model\BackgroundTask $task)
        {
        }
        public function getDescription(\WPML\Collect\Support\Collection $data)
        {
        }
        public function getTotalRecords(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    class WPML_TM_Settings_Post_Process extends \WPML_TM_User
    {
        /**
         * Saves TM settings to the database in case they have changed after reading a config file.
         */
        public function run()
        {
        }
    }
    class WPML_Custom_Field_Setting_Query
    {
        /**
         * @param wpdb   $wpdb
         * @param array  $excluded_keys
         * @param string $table
         */
        public function __construct(\wpdb $wpdb, array $excluded_keys, $table)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function get(array $args)
        {
        }
        /**
         * @return int
         */
        public function get_total_rows()
        {
        }
    }
    class WPML_Term_Custom_Field_Setting_Keys
    {
        /**
         * @return string
         */
        public static function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        public static function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        public static function get_excluded_keys()
        {
        }
    }
}
namespace WPML\TM\Settings\Flags {
    class FlagsRepository
    {
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function getItems($data = array())
        {
        }
        public function getItemsInstalledByDefault($data = array())
        {
        }
        public function hasSvgFlags()
        {
        }
        public function hasPngFlags()
        {
        }
    }
}
namespace WPML\TM\Settings\Flags\Endpoints {
    class SetFormat
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\TM\Settings\Flags\Command {
    class ConvertFlags
    {
        /**
         * @param \wpdb $wpdb
         * @param FlagsRepository $flags_repository
         */
        public function __construct(\wpdb $wpdb, \WPML\TM\Settings\Flags\FlagsRepository $flags_repository)
        {
        }
        /**
         * @param string $targetExt
         *
         * @return Left<string>|Right<string>
         */
        public function run($targetExt = 'svg')
        {
        }
    }
}
namespace WPML\TM\Settings\Flags {
    class Options
    {
        const FORMAT_OPTION = 'wpml_flags_format';
        /**
         * @param string $format One of the values defined in the `getAllowedTypes` method.
         *
         * @return Either
         */
        public static function saveFormat($format)
        {
        }
        public static function getFormat()
        {
        }
        public static function getAllowedFormats()
        {
        }
    }
}
namespace {
    class WPML_Post_Custom_Field_Setting extends \WPML_Custom_Field_Setting
    {
        /**
         * @return string
         */
        protected function get_state_array_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_unlocked_setting_index()
        {
        }
        /**
         * @return string
         */
        protected function get_setting_prefix()
        {
        }
        /**
         * @return  string[]
         */
        protected function get_excluded_keys()
        {
        }
    }
    /**
     * Class WPML_Links_Fixed_Status
     *
     * @package wpml-translation-management
     */
    abstract class WPML_Links_Fixed_Status
    {
        public abstract function set($status);
        public abstract function are_links_fixed();
    }
    /**
     * Class WPML_Links_Fixed_Status_For_Posts
     *
     * @package wpml-tm
     */
    class WPML_Links_Fixed_Status_For_Posts extends \WPML_Links_Fixed_Status
    {
        public function __construct($wpdb, $element_id, $element_type)
        {
        }
        public function set($status)
        {
        }
        public function are_links_fixed()
        {
        }
        public static function clear($element_id, $element_type)
        {
        }
    }
    /**
     * Class WPML_Translate_Link_Targets_In_Content
     *
     * @package wpml-tm
     */
    abstract class WPML_Translate_Link_Targets_In_Content extends \WPML_WPDB_User
    {
        protected $scanning_in_progress = \false;
        protected $content_to_fix;
        protected $number_of_links_fixed;
        /* var WPML_Pro_Translation	$pro_translation */
        protected $pro_translation;
        const MAX_TO_FIX_FOR_NEW_CONTENT = 10;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $pro_translation)
        {
        }
        public function new_content()
        {
        }
        public function get_number_of_links_that_were_fixed()
        {
        }
        public function fix($start = 0, $count = 0)
        {
        }
        protected abstract function get_contents_with_links_needing_fix($start = 0, $count = 0);
        protected abstract function get_content_type();
        public abstract function get_number_to_be_fixed($start_id = 0, $limit = 0);
    }
    /**
     * Class WPML_Translate_Link_Targets_In_Strings
     *
     * @package wpml-tm
     */
    class WPML_Translate_Link_Targets_In_Strings extends \WPML_Translate_Link_Targets_In_Content
    {
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $wp_api, $pro_translation)
        {
        }
        protected function get_contents_with_links_needing_fix($start = 0, $count = 0)
        {
        }
        protected function get_content_type()
        {
        }
        public function get_number_to_be_fixed($start_id = 0, $limit = 0)
        {
        }
    }
}
namespace WPML\TranslateLinkTargets {
    class Hooks implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
        public static function add_hooks()
        {
        }
        public static function clearStatus($postId)
        {
        }
    }
}
namespace {
    class WPML_Translate_Link_Target_Global_State extends \WPML_SP_User
    {
        const OPTION_NAME = 'WPML_Translate_Link_Target_Global_State';
        const SHOULD_FIX_CONTENT_STATE = 'WPML_Translate_Link_Target_Global_State::should_fix_content';
        public function __construct(\SitePress &$sitepress)
        {
        }
        public function should_fix_content()
        {
        }
        public function is_rescan_required()
        {
        }
        public function set_rescan_required()
        {
        }
        public function clear_rescan_required()
        {
        }
    }
    interface IWPML_AJAX_Action_Run
    {
        public function run();
    }
    abstract class WPML_Ajax_Update_Link_Targets_In_Content extends \WPML_WPDB_User implements \IWPML_AJAX_Action_Run
    {
        /** @var  WPML_Translate_Link_Target_Global_State $translate_link_target_global_state */
        protected $translate_link_target_global_state;
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $post_data)
        {
        }
        public function run()
        {
        }
        protected abstract function create_translate_link_target();
    }
    class WPML_Ajax_Update_Link_Targets_In_Strings extends \WPML_Ajax_Update_Link_Targets_In_Content
    {
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $wp_api, $pro_translation, $post_data)
        {
        }
        protected function create_translate_link_target()
        {
        }
    }
    /**
     * Class WPML_Links_Fixed_Status_Factory
     *
     * @package wpml-translation-management
     */
    class WPML_Links_Fixed_Status_Factory extends \WPML_WPDB_User
    {
        public function __construct(&$wpdb, $wp_api)
        {
        }
        public function create($element_id, $element_type)
        {
        }
    }
    /**
     * Class WPML_Links_Fixed_Status_For_Posts
     *
     * @package wpml-tm
     */
    class WPML_Links_Fixed_Status_For_Strings extends \WPML_Links_Fixed_Status
    {
        public function __construct(&$wp_api, $string_id)
        {
        }
        public function set($status)
        {
        }
        public function are_links_fixed()
        {
        }
    }
    /**
     * Class WPML_Translate_Link_Targets_In_Posts
     *
     * @package wpml-tm
     *
     * Disable phpcs warnings for prepare. Everything is escaped properly.
     * phpcs:disable WordPress.DB.PreparedSQL.NotPrepared, WordPress.DB.PreparedSQL.InterpolatedNotPrepared
     */
    class WPML_Translate_Link_Targets_In_Posts extends \WPML_Translate_Link_Targets_In_Content
    {
        protected function get_contents_with_links_needing_fix($start_id = 0, $count = 0)
        {
        }
        protected function get_content_type()
        {
        }
        public function get_number_to_be_fixed($start_id = 0, $limit = 0)
        {
        }
        protected function get_sql($start_id, $count, $return_count_only)
        {
        }
    }
    class WPML_Translate_Link_Targets_In_Posts_Global extends \WPML_Translate_Link_Targets_In_Posts
    {
    }
    class WPML_Translate_Link_Targets_In_Strings_Global extends \WPML_Translate_Link_Targets_In_Strings
    {
        protected function get_contents_with_links_needing_fix($start_id = 0, $count = 0)
        {
        }
        public function get_number_to_be_fixed($start_id = 0, $limit = 0)
        {
        }
    }
    class WPML_Ajax_Update_Link_Targets_In_Posts extends \WPML_Ajax_Update_Link_Targets_In_Content
    {
        public function __construct(\WPML_Translate_Link_Target_Global_State $translate_link_target_global_state, &$wpdb, $pro_translation, $post_data)
        {
        }
        protected function create_translate_link_target()
        {
        }
    }
    class WPML_Twig_WP_Plugin_Extension extends \WPML\Core\Twig_Extension
    {
        /**
         * Returns the name of the extension.
         * @return string The extension name
         */
        public function getName()
        {
        }
        public function getFilters()
        {
        }
        public function wp_do_action_filter($tag)
        {
        }
    }
}
namespace WPML\TM\TranslationDashboard\EncodedFieldsValidation {
    class FieldTitle
    {
        /**
         * @param string $slug
         *
         * @return string
         */
        public function get($slug)
        {
        }
    }
    /**
     * @template field of array{title:string, content:string}
     */
    class ErrorEntry
    {
        /** @var int ID of post or package */
        public $elementId;
        /** @var string */
        public $elementTitle;
        /** @var field[] */
        public $fields;
        /**
         * @param int     $elementId
         * @param string  $elementTitle
         * @param field[] $fields
         */
        public function __construct($elementId, $elementTitle, $fields)
        {
        }
    }
    class Validator
    {
        public function __construct(\WPML_Encoding_Validation $encoding_validation, \WPML_Element_Translation_Package $package_helper, \WPML\TM\TranslationDashboard\SentContentMessages $sentContentMessages, \WPML\TM\TranslationDashboard\EncodedFieldsValidation\FieldTitle $fieldTitle, \WPML_PB_Factory $pbFactory)
        {
        }
        /**
         * $data may contain two keys: 'post' and 'package'. Each of them has the same shape:
         * [
         *   idOfElement1 => [
         *      checked: 1,
         *      type: 'post',
         *   ],
         *   idOfElement2 => [
         *      type: 'post',
         *   ],
         * ] and so on.
         *
         * If element has "checked" field, it means it has been selected for translation.
         * Therefore, if we want to filter it out from translation, we have to remove that field.
         *
         * The "validateTMDashboardInput" performs similar check for both "post" and "package" lists,
         * checks if their elements contains encoded fields and removes them from the list.
         *
         * @param array $data
         *
         * @return array
         */
        public function validateTMDashboardInput($data)
        {
        }
    }
}
namespace WPML\TM\TranslationDashboard\Endpoints {
    /**
     * It duplicates posts into specified languages.
     */
    class Duplicate
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    /**
     * It calls `new_duplicated_terms_filter` function which displays the admin notice informing about term taxonomies which have to be synced.
     */
    class DisplayNeedSyncMessage
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    class WPML_TM_Parent_Filter_Ajax_Factory implements \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Parent_Filter_Ajax implements \IWPML_Action
    {
        public function __construct(\SitePress $sitepress, array $wp_post_types)
        {
        }
        public function add_hooks()
        {
        }
        public function get_parents_dropdown()
        {
        }
    }
}
namespace WPML\TM\TranslationDashboard {
    class FiltersStorage
    {
        /**
         * @return array
         */
        public static function get()
        {
        }
        /**
         * @return string
         */
        public static function getFromLanguage()
        {
        }
    }
    class SentContentMessages
    {
        public function duplicate()
        {
        }
        public function duplicateAndAutomatic()
        {
        }
        public function duplicateAndMyself()
        {
        }
        public function duplicateAndBasket()
        {
        }
        public function automatic()
        {
        }
        public function myself()
        {
        }
        public function basket()
        {
        }
        /**
         * @param ErrorEntry[] $invalidElements
         */
        public function postsWithEncodedFieldsHasBeenSkipped(array $invalidElements)
        {
        }
        /**
         * @return array{confirmMessage: null|array{message: string, description: string, type: string}, encodedFieldErrorEntries: null|ErrorEntry[]}
         */
        public function get()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Shortcodes_Catcher_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Shortcodes_Catcher implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function register_shortcode($return, $tag)
        {
        }
    }
    /**
     * Class WPML_Term_Clauses
     */
    class WPML_Term_Clauses
    {
        /**
         * WPML_Term_Clauses constructor.
         *
         * @param SitePress                                 $sitepress
         * @param wpdb                                      $wpdb
         * @param WPML_Display_As_Translated_Taxonomy_Query $display_as_translated_query
         * @param WPML_Debug_BackTrace                      $debug_backtrace
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Display_As_Translated_Taxonomy_Query $display_as_translated_query, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        /**
         * @param array $clauses
         * @param array $taxonomies
         * @param array $args
         *
         * @return array
         */
        public function filter($clauses, $taxonomies, $args)
        {
        }
    }
    /**
     * Class WPML_Query_Parser
     *
     * @since 3.2.3
     */
    class WPML_Query_Parser
    {
        const LANG_VAR = 'wpml_lang';
        /** @var  WPML_Post_Translation $post_translations */
        protected $post_translations;
        /** @var  WPML_Term_Translation $post_translations */
        protected $term_translations;
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var wpdb $wpdb */
        public $wpdb;
        /**
         * @param SitePress         $sitepress
         * @param WPML_Query_Filter $query_filter
         */
        public function __construct($sitepress, $query_filter)
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return WP_Query
         */
        function parse_query($q)
        {
        }
        public static function is_permalink_part_of_request($permalink, $request_uri)
        {
        }
    }
    class WPML_Display_As_Translated_Attachments_Query
    {
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param \WP_Query $q
         *
         * @return \WP_Query
         */
        public function adjust_post_parent($q)
        {
        }
    }
    /**
     * Class WPML_Term_Display_As_Translated_Adjust_Count
     */
    class WPML_Term_Display_As_Translated_Adjust_Count
    {
        /**
         * WPML_Term_Display_As_Translated_Adjust_Count constructor.
         *
         * @param SitePress $sitepress
         * @param wpdb      $wpdb
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb)
        {
        }
        public function add_get_term_adjust_count($term, $taxonomy)
        {
        }
        public function remove_get_term_adjust_count($terms)
        {
        }
        public function get_term_adjust_count($term)
        {
        }
    }
    class WPML_Term_Query_Filter
    {
        /**
         * WPML_Term_query_Filter constructor.
         *
         * @param WPML_Term_Translation $term_translation
         * @param WPML_Debug_BackTrace  $debug_backtrace
         * @param wpdb                  $wpdb
         * @param IWPML_Taxonomy_State  $taxonomy_state
         */
        public function __construct(\WPML_Term_Translation $term_translation, \WPML_Debug_BackTrace $debug_backtrace, \wpdb $wpdb, \IWPML_Taxonomy_State $taxonomy_state)
        {
        }
        /** @param string $current_language */
        /** @param string $default_language */
        public function set_lang($current_language, $default_language)
        {
        }
        /**
         * @param array $args
         * @param array $taxonomies
         *
         * @return array
         */
        public function get_terms_args_filter($args, $taxonomies)
        {
        }
    }
    /**
     * Class WPML_404_Guess
     *
     * @package    wpml-core
     * @subpackage post-translation
     *
     * @since      3.2.3
     */
    class WPML_404_Guess extends \WPML_Slug_Resolution
    {
        /**
         * @param wpdb              $wpdb
         * @param SitePress         $sitepress
         * @param WPML_Query_Filter $query_filter
         */
        public function __construct(&$wpdb, &$sitepress, &$query_filter)
        {
        }
        /**
         * Attempts to guess the correct URL based on query vars
         *
         * @since 3.2.3
         *
         * @param string   $name
         * @param WP_Query $query
         *
         * @return array<string|bool> containing most likely name, type and whether or not a match was found
         */
        public function guess_cpt_by_name($name, $query)
        {
        }
    }
    /**
     * Class WPML_Attachments_Urls_With_Identical_Slugs_Factory
     *
     * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4700
     */
    class WPML_Attachments_Urls_With_Identical_Slugs_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    class WPML_Display_As_Translated_Tax_Query implements \IWPML_Action
    {
        // Regex to find the term query.
        // eg. term_taxonomy_id IN (8)
        // We then add the fallback term to the query
        // eg. term_taxonomy_id IN (8,9)
        const TERM_REGEX = '/term_taxonomy_id\\s+(IN|in)\\s*\\(([^\\)]+)\\)/';
        public function __construct(\SitePress $sitepress, \WPML_Term_Translation $term_translation)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string   $where
         * @param WP_Query $q
         *
         * @return string
         */
        public function posts_where_filter($where, \WP_Query $q)
        {
        }
    }
    class WPML_Get_Page_By_Path
    {
        /** @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4918 */
        const BEFORE_REMOVE_PLACEHOLDER_ESCAPE_PRIORITY = -1;
        public function __construct(\wpdb $wpdb, \SitePress $sitepress, \WPML_Debug_BackTrace $debug_backtrace)
        {
        }
        public function get($page_name, $lang, $output = \OBJECT, $post_type = 'page')
        {
        }
        public function get_page_by_path_filter($query)
        {
        }
    }
    class WPML_Display_As_Translated_Tax_Query_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    abstract class WPML_Display_As_Translated_Query
    {
        /** @var wpdb $wpdb */
        protected $wpdb;
        /** @var string $icl_translation_table_alias */
        protected $icl_translation_table_alias;
        /**
         * WPML_Display_As_Translated_Query constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb, $icl_translation_table_alias = 'wpml_translations')
        {
        }
        /**
         * @return string
         */
        public function get_icl_translations_table_alias()
        {
        }
        /**
         * @param string $current_language
         * @param string $fallback_language
         * @param array  $content_types
         * @param bool   $skip_content_type_check Ignore $content_types if true.
         *
         * @return string
         */
        public function get_language_snippet($current_language, $fallback_language, $content_types, $skip_content_type_check = \false)
        {
        }
        /**
         * @param array $content_types
         *
         * @return string
         */
        protected abstract function get_content_types_query($content_types);
        /**
         * @param string $language
         *
         * @return string
         */
        protected abstract function get_query_for_translation_not_published($language);
    }
    class WPML_Display_As_Translated_Taxonomy_Query extends \WPML_Display_As_Translated_Query
    {
        /**
         * WPML_Display_As_Translated_Posts_Query constructor.
         *
         * @param wpdb   $wpdb
         * @param string $term_taxonomy_table_alias
         */
        public function __construct(\wpdb $wpdb, $term_taxonomy_table_alias = \null)
        {
        }
        /**
         * If "display as translated" mode is enabled, we check whether a category has some assigned posts or
         * its equivalent in the default language.
         *
         * @param array  $clauses
         * @param string $default_lang
         *
         * @return array
         */
        public function update_count($clauses, $default_lang)
        {
        }
        /**
         * @param array<string> $taxonomies
         *
         * @return string
         */
        protected function get_content_types_query($taxonomies)
        {
        }
        /**
         * @param string $language
         *
         * @return string
         */
        protected function get_query_for_translation_not_published($language)
        {
        }
    }
    class WPML_Display_As_Translated_Attachments_Query_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Display_As_Translated_Posts_Query extends \WPML_Display_As_Translated_Query
    {
        /**
         * WPML_Display_As_Translated_Posts_Query constructor.
         *
         * @param wpdb $wpdb
         * @param string $post_table_alias
         */
        public function __construct(\wpdb $wpdb, $post_table_alias = \null)
        {
        }
        /**
         * @param array $post_types
         *
         * @return string
         */
        protected function get_content_types_query($post_types)
        {
        }
        /**
         * @param string $language
         *
         * @return string
         */
        protected function get_query_for_translation_not_published($language)
        {
        }
    }
    /**
     * Class WPML_Attachments_Urls_With_Identical_Slugs
     *
     * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4700
     */
    class WPML_Attachments_Urls_With_Identical_Slugs implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * Translate the attachment id in the $wp_query during parse_query
         *
         * @param WP_Query $wp_query
         *
         * @return WP_Query
         */
        public function translate_attachment_id($wp_query)
        {
        }
    }
    /**
     * Class WPML_Query_Filter
     *
     * @package    wpml-core
     * @subpackage post-translation
     */
    class WPML_Query_Filter extends \WPML_Full_Translation_API
    {
        /**
         * @param string $post_type
         *
         * @return WPML_Name_Query_Filter
         */
        public function get_page_name_filter($post_type = 'page')
        {
        }
        /**
         * @return WPML_404_Guess
         */
        public function get_404_util()
        {
        }
        /**
         * @param string $join
         * @param string $post_type
         *
         * @return string
         */
        public function filter_single_type_join($join, $post_type)
        {
        }
        /**
         * Filters comment queries so that only comments in the current language are displayed for translated post types
         *
         * @param string[] $clauses
         * @param WP_Comment_Query $obj
         *
         * @return string[]
         */
        public function comments_clauses_filter($clauses, $obj)
        {
        }
        /**
         * @param string $join
         * @param WP_Query $query
         *
         * @return string
         */
        public function posts_join_filter($join, $query)
        {
        }
        /**
         * @param string $where
         * @param string | String[] $post_type
         *
         * @return string
         */
        public function filter_single_type_where($where, $post_type)
        {
        }
        /**
         * @param string $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function posts_where_filter($where, $query)
        {
        }
        /**
         * @param bool|false        $not
         * @param bool|false|string $posts_alias
         *
         * @return string
         */
        public function in_translated_types_snippet($not = \false, $posts_alias = \false)
        {
        }
    }
    class WPML_Archives_Query implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function __construct(\wpdb $wpdb, \WPML_Language_Where_Clause $language_where_clause, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $join
         * @param array $args
         *
         * @return string
         */
        public function get_archives_join($join, $args)
        {
        }
        /**
         * @param string $where_clause
         * @param array $args
         *
         * @return string
         */
        public function get_archives_where($where_clause, $args)
        {
        }
    }
    /**
     * Class WPML_Term_Adjust_Id
     */
    class WPML_Term_Adjust_Id
    {
        /**
         * WPML_Term_Adjust_Id constructor.
         *
         * @param WPML_Debug_BackTrace  $debug_backtrace
         * @param WPML_Term_Translation $term_translation
         * @param WPML_Post_Translation $post_translation
         * @param SitePress             $sitepress
         */
        public function __construct(\WPML_Debug_BackTrace $debug_backtrace, \WPML_Term_Translation $term_translation, \WPML_Post_Translation $post_translation, \SitePress $sitepress)
        {
        }
        /**
         * @param WP_Term $term
         * @param boolean $adjust_id_url_filter_off
         *
         * @return WP_Term
         */
        public function filter(\WP_Term $term, $adjust_id_url_filter_off)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 27/10/17
     * Time: 4:28 PM
     */
    class WPML_Language_Where_Clause
    {
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Display_As_Translated_Posts_Query $display_as_translated_query)
        {
        }
        public function get($post_type)
        {
        }
    }
    /**
     * Class WPML_Query_Utils
     *
     * @package wpml-core
     */
    class WPML_Query_Utils
    {
        /**
         * WPML_Query_Utils constructor.
         *
         * @param wpdb        $wpdb
         * @param WPML_WP_API $wp_api
         * @param array       $display_as_translated_post_types
         */
        public function __construct(\wpdb $wpdb, \WPML_WP_API $wp_api, $display_as_translated_post_types)
        {
        }
        /**
         * Returns the number of posts for a given post_type, author and language combination that is published.
         *
         * @param array|string $post_type
         * @param WP_User      $author_data
         * @param string       $lang language code to check
         * @param string       $fallback_lang
         *
         * @return bool
         *
         * @used-by \WPML_Languages::add_author_url_to_ls_lang to determine what languages to show in the Language Switcher
         */
        public function author_query_has_posts($post_type, $author_data, $lang, $fallback_lang)
        {
        }
        /**
         * Returns the number of posts for a given post_type, date and language combination that is published.
         *
         * @param string       $lang language code to check
         * @param string       $fallback_lang
         * @param null|int     $year
         * @param null|int     $month
         * @param null|int     $day
         * @param string|array $post_type
         *
         * @return bool
         *
         * @used-by \WPML_Languages::add_date_or_cpt_url_to_ls_lang to determine what languages to show in the Language Switcher
         */
        public function archive_query_has_posts($lang, $fallback_lang, $year = \null, $month = \null, $day = \null, $post_type = 'post')
        {
        }
    }
    class WPML_TM_Update_Translation_Status
    {
        /**
         * @param int $job_id
         * @param int $new_status
         */
        public static function by_job_id($job_id, $new_status)
        {
        }
    }
    class WPML_TM_ICL_Translations extends \WPML_TM_Record_User
    {
        /**
         * WPML_TM_ICL_Translations constructor.
         *
         * @throws InvalidArgumentException if given data does not correspond to a
         * record in icl_translations
         *
         * @param WPML_TM_Records $tm_records
         * @param int|array       $id
         * @param string          $type translation id, trid_lang or id_prefix for now
         */
        public function __construct(&$tm_records, $id, $type = 'translation_id')
        {
        }
        /**
         * @return WPML_TM_ICL_Translations[]
         */
        public function translations()
        {
        }
        /**
         * @return null|int
         */
        public function trid()
        {
        }
        /**
         * @return int
         */
        public function translation_id()
        {
        }
        /**
         * @return null|int
         */
        public function element_id()
        {
        }
        /**
         * @return string|null
         */
        public function language_code()
        {
        }
        /**
         * @return string|null
         */
        public function source_language_code()
        {
        }
        /**
         *
         * @return $this
         */
        public function delete()
        {
        }
    }
    class WPML_TM_Records
    {
        /** @var WPDB $wpdb */
        public $wpdb;
        public function __construct(\wpdb $wpdb, \WPML_Post_Translation $wpml_post_translations, \WPML_Term_Translation $wpml_term_translations)
        {
        }
        public function wpdb()
        {
        }
        public function get_post_translations()
        {
        }
        public function get_term_translations()
        {
        }
        /**
         * @param int $translation_id
         *
         * @return WPML_TM_ICL_Translation_Status
         */
        public function icl_translation_status_by_translation_id($translation_id)
        {
        }
        public function get_preloaded_translation_status($translation_id, $rid)
        {
        }
        /**
         * @param int $rid
         *
         * @return WPML_TM_ICL_Translation_Status
         */
        public function icl_translation_status_by_rid($rid)
        {
        }
        /**
         * @param int $job_id
         *
         * @return WPML_TM_ICL_Translate_Job
         */
        public function icl_translate_job_by_job_id($job_id)
        {
        }
        /**
         * @param int $translation_id
         *
         * @return WPML_TM_ICL_Translations
         */
        public function icl_translations_by_translation_id($translation_id)
        {
        }
        /**
         * @param int    $element_id
         * @param string $type_prefix
         *
         * @return WPML_TM_ICL_Translations
         */
        public function icl_translations_by_element_id_and_type_prefix($element_id, $type_prefix)
        {
        }
        /**
         * @param int    $trid
         * @param string $lang
         *
         * @return WPML_TM_ICL_Translations
         */
        public function icl_translations_by_trid_and_lang($trid, $lang)
        {
        }
        /**
         * @param int $trid
         *
         * @return int[]
         */
        public function get_element_ids_from_trid($trid)
        {
        }
    }
    class WPML_TM_ICL_Translation_Status
    {
        /** @var wpdb $wpdb */
        public $wpdb;
        /**
         * WPML_TM_ICL_Translation_Status constructor.
         *
         * @param wpdb            $wpdb
         * @param WPML_TM_Records $tm_records
         * @param int             $id
         * @param string          $type
         */
        public function __construct(\wpdb $wpdb, \WPML_TM_Records $tm_records, $id, $type = 'translation_id')
        {
        }
        /**
         * @param array $args in the same format used by \wpdb::update()
         *
         * @return $this
         */
        public function update($args)
        {
        }
        /**
         * Wrapper for \wpdb::delete()
         */
        public function delete()
        {
        }
        /**
         * @return int
         */
        public function rid()
        {
        }
        /**
         * @return int
         */
        public function status()
        {
        }
        /**
         * @return Just|Nothing
         */
        public function previous()
        {
        }
        /**
         * @return string
         */
        public function md5()
        {
        }
        /**
         * @return int
         */
        public function translation_id()
        {
        }
        public function trid()
        {
        }
        public function element_id()
        {
        }
        /**
         * @return int
         */
        public function translator_id()
        {
        }
        /**
         * @return string|int
         */
        public function service()
        {
        }
        /**
         * @param $id
         *
         * @return \WPML_TM_ICL_Translation_Status
         * @throws \WPML\Auryn\InjectionException
         */
        public static function makeByRid($id)
        {
        }
    }
    class WPML_TM_ICL_Translate_Job
    {
        /**
         * WPML_TM_ICL_Translation_Status constructor.
         *
         * @param WPML_TM_Records $tm_records
         * @param int             $job_id
         */
        public function __construct(\WPML_TM_Records $tm_records, $job_id)
        {
        }
        /**
         * @return int
         */
        public function translator_id()
        {
        }
        /**
         * @return string|int
         */
        public function service()
        {
        }
        /**
         * @param array $args in the same format used by \wpdb::update()
         *
         * @return $this
         */
        public function update($args)
        {
        }
        /**
         * @return bool true if this job is the most recent job for the element it
         * belongs to and hence may be updated.
         */
        public function is_open()
        {
        }
        public function rid()
        {
        }
        public function editor()
        {
        }
    }
    class WPML_Initialize_Language_For_Post_Type
    {
        public function __construct(\wpdb $wpdb)
        {
        }
        public function run($post_type, $default_language)
        {
        }
    }
    class WPML_Integrations_Requirements_Scripts
    {
        public function add_translation_editor_notice_hook()
        {
        }
        public function enqueue_translation_editor_notice_script()
        {
        }
        public function add_plugins_activation_hook()
        {
        }
        public function enqueue_plugin_activation_script()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Requirements
    {
        /**
         * WPML_Requirements constructor.
         */
        public function __construct()
        {
        }
        public function is_plugin_active($plugin_slug)
        {
        }
        /**
         * @param array $plugin_data
         *
         * @return string|null
         */
        public function get_plugin_slug(array $plugin_data)
        {
        }
        /**
         * @return array
         */
        public function get_missing_requirements()
        {
        }
        /**
         * @param string $type
         * @param string $slug
         *
         * @return array
         */
        public function get_requirements($type, $slug)
        {
        }
        /**
         * @param string $slug
         *
         * @return array
         */
        function get_plugin_data($slug)
        {
        }
    }
}
namespace WPML\Requirements {
    class WordPress
    {
        public static function checkMinimumRequiredVersion()
        {
        }
        public static function displayMissingVersionRequirementNotice()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Integrations
    {
        const SCOPE_WP_CORE = 'wp-core';
        /**
         * WPML_Integrations constructor.
         *
         * @param WPML_WP_API $wpml_wp_api
         */
        function __construct(\WPML_WP_API $wpml_wp_api)
        {
        }
        public function get_results()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Requirements_Notification
    {
        /**
         * WPML_Requirements_Notification constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        public function get_core_message($issues)
        {
        }
        public function get_message($issues, $limit = 0)
        {
        }
        public function get_settings($integrations)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Third_Party_Dependencies
    {
        /**
         * WPML_Third_Party_Dependencies constructor.
         *
         * @param WPML_Integrations $integrations
         * @param WPML_Requirements $requirements
         */
        public function __construct(\WPML_Integrations $integrations, \WPML_Requirements $requirements)
        {
        }
        public function get_issues($scope = \null)
        {
        }
    }
    /**
     * WPML_Whip_Requirements class file.
     *
     * @package wpml-core
     */
    /**
     * Class WPML_Whip_Requirements
     */
    class WPML_Whip_Requirements
    {
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Get host name for message about PHP.
         *
         * @return string
         */
        public function whip_name_of_host()
        {
        }
        /**
         * Get WPML message about PHP.
         *
         * @return string
         */
        public function whip_message_from_host_about_php()
        {
        }
        /**
         * Load Whip.
         */
        public function load_whip()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Integrations_Requirements
    {
        const NOTICE_GROUP = 'requirements';
        const CORE_REQ_NOTICE_ID = 'core-requirements';
        const MISSING_REQ_NOTICE_ID = 'missing-requirements';
        const EDITOR_NOTICE_ID = 'enable-translation-editor';
        const DOCUMENTATION_LINK = 'https://wpml.org/documentation/translating-your-contents/page-builders/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmlcore';
        const DOCUMENTATION_LINK_BLOCK_EDITOR = 'https://wpml.org/?page_id=2909360&utm_source=wpmlplugin&utm_campaign=gutenberg&utm_medium=translation-editor&utm_term=translating-content-created-using-gutenberg-editor';
        /**
         * WPML_Integrations_Requirements constructor.
         *
         * @param SitePress                      $sitepress
         * @param WPML_Third_Party_Dependencies  $third_party_dependencies
         * @param WPML_Requirements_Notification $requirements_notification
         * @param array                          $integrations
         */
        public function __construct(\SitePress $sitepress, \WPML_Third_Party_Dependencies $third_party_dependencies = \null, \WPML_Requirements_Notification $requirements_notification = \null, $integrations = \null)
        {
        }
        public function init_hooks()
        {
        }
        public function init()
        {
        }
        public function set_translation_editor_callback()
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 28/08/17
     * Time: 11:54 AM
     */
    class WPML_TM_Editor_Notice extends \WPML_Notice
    {
        public function is_different(\WPML_Notice $other_notice)
        {
        }
    }
    interface IWPML_Integration_Requirements_Module
    {
        public function get_requirements();
    }
    class WPML_Integration_Requirements_Block_Editor implements \IWPML_Integration_Requirements_Module
    {
        public function __construct(\WPML_Requirements $requirements)
        {
        }
        public function get_requirements()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Privacy_Content_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Privacy_Content_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_Privacy_Content implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function privacy_policy()
        {
        }
        /**
         * @return string
         */
        protected abstract function get_plugin_name();
        /**
         * @return string|array a single or an array of strings (plain text or HTML). Array items will be wrapped by a paragraph tag.
         */
        protected abstract function get_privacy_policy();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Core_Privacy_Content extends \WPML_Privacy_Content
    {
        /**
         * @return string
         */
        protected function get_plugin_name()
        {
        }
        /**
         * @return string|array
         */
        protected function get_privacy_policy()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Privacy_Content extends \WPML_Privacy_Content
    {
        /**
         * @return string
         */
        protected function get_plugin_name()
        {
        }
        /**
         * @return string|array
         */
        protected function get_privacy_policy()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migrate
    {
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress, \WPML_TM_ICL20_Migration_Status $status, \WPML_TM_ICL20_Migrate_Remote $remote_migration, \WPML_TM_ICL20_Migrate_Local $local_migration, \WPML_TP_Services $tp_services)
        {
        }
        public function migrate_project_rollback()
        {
        }
        public function run()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Progress
    {
        const MAX_AUTOMATIC_ATTEMPTS = 5;
        const OPTION_KEY_USER_CONFIRMED = '_wpml_icl20_migration_user_confirmed';
        const OPTION_KEY_MIGRATION_ATTEMPTS = '_wpml_icl20_migration_attempts';
        const OPTION_KEY_MIGRATION_LAST_ATTEMPT = '_wpml_icl20_migration_last_attempt';
        const OPTION_KEY_MIGRATION_LAST_ERROR = '_wpml_icl20_migration_last_error';
        const OPTION_KEY_MIGRATION_LOCAL_PROJECT_INDEX = '_wpml_icl20_migration_local_project_index';
        const OPTION_KEY_MIGRATION_LOCKED = '_wpml_icl20_migration_locked';
        const OPTION_KEY_MIGRATION_REQUIRED = '_wpml_icl20_migration_required';
        const OPTION_KEY_MIGRATION_STEPS = '_wpml_icl20_migration_step_%s';
        const STEP_ICL_ACK = 'icl_ack';
        const STEP_MIGRATE_JOBS_DOCUMENTS = 'migrate_jobs_doc';
        const STEP_MIGRATE_JOBS_STRINGS = 'migrate_jobs_strings';
        const STEP_MIGRATE_LOCAL_PROJECT = 'migrate_local_project';
        const STEP_MIGRATE_LOCAL_SERVICE = 'migrate_local_service';
        const STEP_MIGRATE_REMOTE_PROJECT = 'migrate_remote_project';
        const STEP_TOKEN = 'token';
        const STEP_FAILED = 'failed';
        const STEP_DONE = 'done';
        const VALUE_YES = 'yes';
        const VALUE_NO = 'no';
        /**
         * WPML_TM_ICL20_Migration_Progress constructor.
         */
        public function __construct()
        {
        }
        /**
         * @param string $step
         *
         * @return string|null
         */
        public function get_completed_step($step)
        {
        }
        /**
         * @return int|null
         */
        public function get_last_attempt_timestamp()
        {
        }
        /**
         * @return string|null
         */
        public function get_last_migration_error()
        {
        }
        /**
         * @return string|null
         */
        public function get_project_to_migrate()
        {
        }
        /**
         * @return array
         */
        public function get_steps()
        {
        }
        /**
         * @param string $message
         */
        public function log_failed_attempt($message)
        {
        }
        /**
         * @return bool
         */
        public function is_migration_incomplete()
        {
        }
        /**
         * @param string      $step
         * @param string|bool $value
         */
        public function set_completed_step($step, $value)
        {
        }
        /**
         * @return bool
         */
        public function has_migration_ever_started()
        {
        }
        /**
         * It will mark the migration as done
         */
        public function set_migration_done()
        {
        }
        /**
         * It will remove all the temporary options used to store the status of the migration
         */
        public function clear_temporary_options()
        {
        }
        /**
         * @return bool
         */
        public function is_migration_done()
        {
        }
        /**
         * @return bool
         */
        public function requires_migration()
        {
        }
        /**
         * Sets the migration as started so to know, in the next attempts, if the migration was partial or never started.
         */
        public function set_migration_started()
        {
        }
        /**
         * @return int
         */
        public function get_current_attempts_count()
        {
        }
        /**
         * @return bool
         */
        public function has_too_many_automatic_attempts()
        {
        }
        /**
         * @return bool
         */
        public function are_next_automatic_attempts_locked()
        {
        }
        /**
         * @param string $old_index
         */
        public function set_project_to_migrate($old_index)
        {
        }
        /**
         * @return bool
         */
        public function get_user_confirmed()
        {
        }
        /**
         * User as an opt-in action from the user before starting the migration
         */
        public function set_user_confirmed()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Factory
    {
        /**
         * @return WPML_TM_ICL20_Migration_AJAX
         */
        public function create_ajax()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Locks
         */
        public function create_locks()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Progress
         */
        public function create_progress()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migrate
         */
        public function create_migration()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Status
         */
        public function create_status()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Notices
         */
        public function create_notices()
        {
        }
        /**
         * @return WPML_TM_ICL20_Migration_Support
         */
        public function create_ui_support()
        {
        }
        /**
         * @return bool
         */
        public function can_rollback()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Locks
    {
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress)
        {
        }
        public function add_hooks()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Notices
    {
        const NOTICE_GROUP = 'icl-20-migration';
        const NOTICE_MIGRATION_REQUIRED_ID = 'icl-20-migration';
        const NOTICE_MIGRATION_COMPLETED_ID = 'icl-20-migration-completed';
        /**
         * WPML_TM_ICL20_Migration_Notices constructor.
         *
         * @param WPML_TM_ICL20_Migration_Progress $progress
         * @param WPML_Notices                     $notices
         */
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress, \WPML_Notices $notices)
        {
        }
        /**
         * @param bool $requires_migration
         */
        public function run($requires_migration = \false)
        {
        }
        /**
         * Clear all notices created before and during the migration
         */
        public function clear_migration_required()
        {
        }
        /**
         * Required by `\WPML_TM_ICL20_Migration_Notices::build_migration_required`
         */
        public function admin_enqueue_scripts()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Support
    {
        const PREFIX = 'icl20-migration-reset-';
        const TIMESTAMP_FORMAT = 'Y-m-d H:i:s';
        function __construct(\IWPML_Template_Service $template_service, \WPML_TM_ICL20_Migration_Progress $progress, $can_rollback = \false)
        {
        }
        function add_hooks()
        {
        }
        public function parse_request()
        {
        }
        public function show()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migrate_Local
    {
        const JOBS_TYPES_DOCUMENTS = 'icl_translation_status';
        const JOBS_TYPES_STRINGS = 'icl_string_translations';
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WPML_TP_Services                 $tp_services
         * @param WPML_TM_ICL20_Migration_Status   $status
         * @param WPML_TM_ICL20_Migration_Progress $progress
         * @param SitePress                        $sitepress
         *
         * @internal param SitePress $sitepress
         */
        public function __construct(\WPML_TP_Services $tp_services, \WPML_TM_ICL20_Migration_Status $status, \WPML_TM_ICL20_Migration_Progress $progress, \SitePress $sitepress)
        {
        }
        public function migrate_jobs($table)
        {
        }
        public function migrate_project()
        {
        }
        public function migrate_service($new_token)
        {
        }
        public function rollback_service()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Loader
    {
        /**
         * WPML_TM_ICL20_Migration_Loader constructor.
         *
         * @param WPML_WP_API                     $wp_api
         * @param WPML_TM_ICL20_Migration_Factory $factory
         */
        public function __construct(\WPML_WP_API $wp_api, \WPML_TM_ICL20_Migration_Factory $factory)
        {
        }
        /**
         * This is the main method which deals with the whole logic for handling the migration
         */
        public function run()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Status
    {
        const ICL_20_TS_ID = 67;
        const ICL_LEGACY_TS_ID = 4;
        const ICL_LEGACY_TS_SUID = '6ab1000a33e2cc9ecbcf6abc57254be8';
        const ICL_20_TS_SUID = 'dd17d48516ca4bce0b83043583fabd2e';
        public function __construct($service)
        {
        }
        public function has_active_legacy_icl()
        {
        }
        public function has_active_icl_20()
        {
        }
        public function has_active_service()
        {
        }
        public function get_ICL_LEGACY_TS_ID()
        {
        }
        public function get_ICL_20_TS_ID()
        {
        }
        public function get_ICL_LEGACY_TS_SUID()
        {
        }
        public function get_ICL_20_TS_SUID()
        {
        }
        public function is_preferred_service_legacy_ICL()
        {
        }
        public function set_preferred_service_to_ICL20()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20MigrationException extends \WPMLTranslationProxyApiException
    {
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AJAX
    {
        /**
         * @param string $action
         *
         * @return bool
         */
        protected function is_valid_request($action = '')
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_AJAX extends \WPML_TM_AJAX
    {
        /**
         * WPML_TM_ICL20_Migration_AJAX constructor.
         *
         * @param WPML_TM_ICL20_Migration_Progress $progress
         */
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress)
        {
        }
        /**
         * AJAX callback used to set the user confirmation for starting the migration
         */
        public function user_confirmation()
        {
        }
    }
    class WPML_TM_ICL20_Migrate_Remote
    {
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WPML_TM_ICL20_Migration_Progress  $progress
         * @param WPML_TM_ICL20_Migration_Container $container
         */
        public function __construct(\WPML_TM_ICL20_Migration_Progress $progress, \WPML_TM_ICL20_Migration_Container $container)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return bool
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2322
         */
        public function acknowledge_icl($ts_id, $ts_accesskey)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return string|null
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2285
         */
        public function get_token($ts_id, $ts_accesskey)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         * @param string $new_token
         *
         * @return bool|null
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/tsapi-887
         *
         */
        public function migrate_project($project_id, $access_key, $new_token)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         *
         * @return bool
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/tsapi-887
         *
         */
        public function migrate_project_rollback($project_id, $access_key)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Acknowledge
    {
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WP_Http $http
         * @param string  $end_point
         */
        public function __construct(\WP_Http $http, $end_point)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return bool
         * @throws \WPML_TM_ICL20MigrationException
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2322
         */
        public function acknowledge_icl($ts_id, $ts_accesskey)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Migration_Container
    {
        public function __construct(\WPML_TM_ICL20_Token $token, \WPML_TM_ICL20_Project $project, \WPML_TM_ICL20_Acknowledge $ack)
        {
        }
        /**
         * @return WPML_TM_ICL20_Acknowledge
         */
        public function get_acknowledge()
        {
        }
        /**
         * @return WPML_TM_ICL20_Project
         */
        public function get_project()
        {
        }
        /**
         * @return WPML_TM_ICL20_Token
         */
        public function get_token()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Token
    {
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WP_Http $http
         * @param string  $end_point
         */
        public function __construct(\WP_Http $http, $end_point)
        {
        }
        /**
         * @param string $ts_accesskey
         * @param int    $ts_id
         *
         * @return string|null
         * @throws \WPML_TM_ICL20MigrationException
         *
         * Note: `ts_id` (aka `website_id`) = `website_id`
         *
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/icldev-2285
         */
        public function get_token($ts_id, $ts_accesskey)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ICL20_Project
    {
        /**
         * WPML_TM_ICL20 constructor.
         *
         * @param WP_Http $http
         * @param string  $end_point
         */
        public function __construct(\WP_Http $http, $end_point)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         * @param string $new_token
         *
         * @return bool|null
         * @throws \WPML_TM_ICL20MigrationException
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/tsapi-887
         *
         */
        public function migrate($project_id, $access_key, $new_token)
        {
        }
        /**
         * @param int    $project_id
         * @param string $access_key
         *
         * @return bool
         * @throws WPML_TM_ICL20MigrationException
         */
        public function rollback_migration($project_id, $access_key)
        {
        }
    }
}
namespace WPML\TM\ATE\Download {
    class Job
    {
        /** @var int $ateJobId */
        public $ateJobId;
        /** @var string $url */
        public $url;
        /** @var int */
        public $ateStatus;
        /**
         * This property is not part of the database data,
         * but it can be added when the job is downloaded
         * to provide more information to the UI.
         *
         * @var int $jobId
         */
        public $jobId;
        /** @var int */
        public $status = ICL_TM_IN_PROGRESS;
        /**
         * @param \stdClass $item
         *
         * @return Job
         */
        public static function fromAteResponse(\stdClass $item)
        {
        }
        /**
         * @param \stdClass $row
         *
         * @return Job
         */
        public static function fromDb(\stdClass $row)
        {
        }
    }
    class Consumer
    {
        public function __construct(\WPML_TM_ATE_API $ateApi, \WPML_TM_ATE_Jobs $ateJobs)
        {
        }
        /**
         * @param  $job
         *
         * @return array|\stdClass|false
         * @throws Exception
         */
        public function process($job)
        {
        }
    }
    class Process
    {
        public function __construct(\WPML\TM\ATE\Download\Consumer $consumer, \WPML_TM_ATE_API $ateApi)
        {
        }
        /**
         * @param array $jobs
         *
         * @return Collection
         */
        public function run($jobs)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs
    {
        /**
         * WPML_TM_ATE_Jobs constructor.
         *
         * @param JobRecords $records
         */
        public function __construct(\WPML\TM\ATE\JobRecords $records)
        {
        }
        /**
         * @param int $wpml_job_id
         *
         * @return int
         */
        public function get_ate_job_id($wpml_job_id)
        {
        }
        /**
         * @param int $ate_job_id
         *
         * @return int|null
         */
        public function get_wpml_job_id($ate_job_id)
        {
        }
        /**
         * @param int   $wpml_job_id
         * @param array $ate_job_data
         */
        public function store($wpml_job_id, $ate_job_data)
        {
        }
        /**
         * @todo: Check possible duplicated code / We already have functionality to import XLIFF files from Translator's queue
         *
         * @param string $xliff
         *
         * @return bool|int
         * @throws RequestException The job could not be loaded.
         * @throws \Exception When the xliff cannot be applied to the job.
         */
        public function apply($xliff)
        {
        }
        /**
         * @param int $wpml_job_id
         *
         * @return bool
         */
        public function is_editing_job($wpml_job_id)
        {
        }
        /**
         * @param array $wpml_job_ids
         */
        public function warm_cache(array $wpml_job_ids)
        {
        }
    }
}
namespace WPML\TM\ATE\Retranslation {
    class Endpoint implements \WPML\Ajax\IHandler
    {
        public function __construct(\WPML\TM\ATE\Retranslation\SinglePageBatchHandler $singlePageBatchHandler, \WPML\TM\ATE\Retranslation\Scheduler $scheduler, \WPML\TM\ATE\SyncLock $syncLock)
        {
        }
        /**
         * @param Collection $data
         *
         * @return Right<{lockKey: bool|string, nextPage: int}>|Left<{lockKey: bool|string, nextPage: int}> it returns next page number or 0 if there are no more pages
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class RetranslationPreparer
    {
        /**
         * @param \wpdb $wpdb
         * @param \WPML_TM_ATE_API $ateApi
         */
        public function __construct(\wpdb $wpdb, \WPML_TM_ATE_API $ateApi)
        {
        }
        /**
         * It changes status of corresponding WPML jobs into "waiting to translator" ( means in-progress ),
         * which will trigger the ATE Sync flow for them.
         *
         * @param int[] $ateJobIds
         *
         * @return array{int, int}
         */
        public function delegate(array $ateJobIds) : array
        {
        }
    }
    /**
     * The class is responsible for determining if the re-translation should be run and when.
     * It is used inside WPML\TM\ATE\Loader::add_hooks() to schedule the re-translation.
     */
    class Scheduler
    {
        const LAST_CALL_OPTION = 'wpml_ate_retranslation_last_call';
        const INTERVAL = 60 * 2;
        // 2 minutes
        public function shouldRun() : bool
        {
        }
        public function scheduleNextRun()
        {
        }
        public function disable()
        {
        }
    }
    /**
     * The class calls ATE endpoint to get list of the jobs that have to be re-translated.
     */
    class JobsCollector
    {
        public function __construct(\WPML_TM_ATE_API $ateAPI)
        {
        }
        public function get(int $page = 1) : \WPML\TM\ATE\Retranslation\JobsCollector\ATEResponse
        {
        }
    }
}
namespace WPML\TM\ATE\Retranslation\JobsCollector {
    class ATEResponse
    {
        /**
         * @param bool $retranslationFinished
         * @param int[] $jobIds
         * @param int $currentPage
         * @param int $totalPages
         */
        public function __construct(bool $retranslationFinished, array $jobIds, int $currentPage, int $totalPages)
        {
        }
        /**
         * @return int[]
         */
        public function getJobIds()
        {
        }
        /**
         * @return int
         */
        public function getCurrentPage()
        {
        }
        /**
         * @return int
         */
        public function getTotalPages()
        {
        }
        /**
         * @return bool
         */
        public function isRetranslationFinished()
        {
        }
    }
}
namespace WPML\TM\ATE\Retranslation {
    class SinglePageBatchHandler
    {
        const NOT_FINISHED_IN_ATE = 'retranslations-no-finished-in-ate';
        const FINISHED_IN_WPML = 'retranslations-finished-in-wpml';
        const GO_TO_NEXT_PAGE = 'retranslate-next-page';
        public function __construct(\WPML\TM\ATE\Retranslation\JobsCollector $jobsCollector, \WPML\TM\ATE\Retranslation\RetranslationPreparer $retranslationPreparer)
        {
        }
        /**
         * It tries to handle the Jobs and returns result array with following keys :
         *
         * "state" Defines what's the state of the response that we received from ATE, it can be
         *
         * NOT_FINISHED_IN_ATE : When ATE didn't finish retranslations yet.
         *
         * FINISHED_IN_WPML : When retranslations finished on both ATE and WPML side (no more page to retranslate).
         *
         * GO_TO_NEXT_PAGE : When ATE finished retranslations and WPML is trying to finish them page by page.
         *
         * "nextPage" When combined with the `state` it defines the value of the next page that should be returned in the AJAX response, it can be
         *
         * 0 :  means no more pages to retranslate or ATE didn't finish retranslations yet.
         *
         * $nextPage : the number of next page that WPML needs to handle
         *
         * @param int $pageNumber
         *
         * @return array
         *
         */
        public function handle(int $pageNumber = 1) : array
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     *
     * AMS: https://git.onthegosystems.com/ate/ams/wikis/home
     * ATE: https://git.onthegosystems.com/ate/ams/wikis/home (https://bitbucket.org/emartini_crossover/ate/wiki/browse/API/V1/jobs)
     */
    class WPML_TM_ATE_AMS_Endpoints
    {
        const AMS_BASE_URL = 'https://ams.wpml.org';
        const ATE_BASE_URL = 'https://ate.wpml.org';
        const ATE_JOB_STATUS_CREATED = 0;
        const ATE_JOB_STATUS_TRANSLATING = 1;
        const ATE_JOB_STATUS_TRANSLATED = 6;
        const ATE_JOB_STATUS_DELIVERING = 7;
        const ATE_JOB_STATUS_DELIVERED = 8;
        const ATE_JOB_STATUS_EDITED = 15;
        /**
         * AMS
         */
        const ENDPOINTS_AUTO_LOGIN = '/panel/autologin';
        const ENDPOINTS_CLIENTS = '/api/wpml/clients';
        const ENDPOINTS_CONFIRM = '/api/wpml/jobs/confirm';
        const ENDPOINTS_EDITOR = '/api/wpml/jobs/{job_id}/open?translator={translator_email}&return_url={return_url}';
        const ENDPOINTS_SUBSCRIPTION = '/api/wpml/websites/translators/{translator_email}/enable';
        const ENDPOINTS_SUBSCRIPTION_STATUS = '/api/wpml/websites/{WEBSITE_UUID}/translators/{translator_email}';
        const ENDPOINTS_WEBSITES = '/api/wpml/websites';
        const ENDPOINTS_CREDITS = '/api/wpml/credits';
        const ENDPOINTS_RESUME_ALL = '/api/wpml/jobs/resume/all';
        const ENDPOINTS_SEND_SITEKEY = '/api/wpml/websites/assign_key';
        const ENDPOINTS_TRANSLATION_ENGINES = '/api/wpml/engines';
        /**
         * AMS CLONED SITES
         */
        const ENDPOINTS_SITE_COPY = '/api/wpml/websites/copy';
        const ENDPOINTS_SITE_MOVE = '/api/wpml/websites/move';
        const ENDPOINTS_SITE_CONFIRM = '/api/wpml/websites/confirm';
        const ENDPOINTS_COPY_ATTACHED = '/api/wpml/websites/copy_attached';
        /**
         * ATE
         */
        const ENDPOINTS_JOB = '/api/wpml/job';
        const ENDPOINTS_JOBS = '/api/wpml/jobs';
        const ENDPOINT_JOBS_BY_WPML_JOB_IDS = '/api/wpml/jobs/wpml';
        const ENDPOINT_JOBS_STATUSES = '/api/wpml/jobs/statuses';
        const ENDPOINTS_MANAGERS = '/api/wpml/websites/translation_managers';
        const ENDPOINTS_SITE = '/api/wpml/websites/create_unique';
        const ENDPOINTS_STATUS = '/api/wpml/access_keys/{SHARED_KEY}/status';
        const ENDPOINTS_TRANSLATORS = '/api/wpml/websites/translators';
        const ENDPOINT_SOURCE_ID_MIGRATION = '/api/wpml/migration';
        const ENDPOINTS_SYNC_ALL = '/api/wpml/sync/all';
        const ENDPOINTS_SYNC_PAGE = '/api/wpml/sync/page';
        const ENDPOINTS_RETRANSLATE = '/api/wpml/retranslations/sync';
        const ENDPOINTS_CLONE_JOB = '/api/wpml/jobs/%s/clone';
        const ENDPOINTS_CANCEL_JOBS = '/api/wpml/jobs/cancel';
        const ENDPOINTS_HIDE_JOBS = '/api/wpml/jobs/canceled_on_wpml';
        const ENDPOINTS_LANGUAGES = '/api/wpml/languages';
        const ENDPOINTS_LANGUAGES_MAPPING = '/api/wpml/languages/mappings';
        const ENDPOINTS_LANGUAGES_MAPPING_DELETE = '/api/wpml/languages/delete_mapping';
        const ENDPOINTS_LANGUAGES_CHECK_PAIRS = '/api/wpml/languages/check_pairs';
        const ENDPOINTS_LANGUAGES_SHOW = '/api/wpml/languages/%s';
        const SERVICE_AMS = 'ams';
        const SERVICE_ATE = 'ate';
        const STORE_JOB = '/ate/jobs/store';
        const SYNC_JOBS = '/ate/jobs/sync';
        const DOWNLOAD_JOBS = '/ate/jobs/download';
        const RETRY_JOBS = '/ate/jobs/retry';
        const FIX_JOB = '/ate/jobs/(?P<ateJobId>\\d+)/fix';
        /**
         * ICL to ATE migration
         */
        const ENDPOINTS_IMPORT_TRANSLATORS_FROM_ICL = '/api/wpml/icl/translators/import';
        const ENDPOINTS_START_MIGRATION_IMPORT_FROM_ICL = '/api/wpml/icl/translations/import/start';
        const ENDPOINTS_CHECK_STATUS_MIGRATION_IMPORT_FROM_ICL = '/api/wpml/icl/translations/import/status';
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_auto_login()
        {
        }
        /**
         * @param string     $service
         * @param string     $endpoint
         * @param array|null $query_string
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_endpoint_url($service, $endpoint, array $query_string = \null)
        {
        }
        /**
         * @param $service
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_base_url($service)
        {
        }
        public function get_AMS_host()
        {
        }
        public function get_ATE_host()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_register_client()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_status()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_synchronize_managers()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_synchronize_translators()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_site_copy()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_copy_attached()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_site_move()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ams_site_confirm()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_enable_subscription()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_subscription_status()
        {
        }
        /**
         * @param int|string|array $job_params
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_confirm_job($job_params = \null)
        {
        }
        public function get_translation_engines()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_editor()
        {
        }
        /**
         * @param null|int|string|array $job_params
         * @param null|array            $statuses
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_jobs($job_params = \null, array $statuses = \null)
        {
        }
        public function getAteCancelJobs()
        {
        }
        public function getAteHideJobs()
        {
        }
        public function getLanguages()
        {
        }
        public function getLanguagesMapping()
        {
        }
        public function getDeleteLanguagesMapping()
        {
        }
        public function getLanguagesCheckPairs()
        {
        }
        public function getShowLanguage()
        {
        }
        public function startTranlsationMemoryIclMigration()
        {
        }
        public function checkStatusTranlsationMemoryIclMigration()
        {
        }
        public function importIclTranslators()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_ate_job_status()
        {
        }
        /**
         * @param int() $job_ids
         *
         * @return string
         */
        public function get_ate_jobs_by_wpml_job_ids($job_ids)
        {
        }
        /**
         * @return string
         */
        public function get_websites()
        {
        }
        /**
         * @return string
         */
        public function get_source_id_migration()
        {
        }
        /**
         * @throws \InvalidArgumentException
         * @return string
         */
        public function get_retranslate() : string
        {
        }
        /**
         * @return string
         */
        public function get_sync_all()
        {
        }
        /**
         * @param string $paginationToken
         * @param int    $page
         *
         * @return string
         */
        public function get_sync_page($paginationToken, $page)
        {
        }
        /**
         * @param int $job_id
         *
         * @return string
         */
        public function get_clone_job($job_id)
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_credits()
        {
        }
        /**
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_resume_all()
        {
        }
        public function get_send_sitekey()
        {
        }
    }
}
namespace WPML\TM\ATE\API\CacheStorage {
    interface Storage
    {
        /**
         * @param string $key
         * @param mixed $default
         *
         * @return mixed
         */
        public function get($key, $default = null);
        /**
         * @param string $key
         * @param mixed $value
         */
        public function save($key, $value);
        /**
         * @param string $key
         */
        public function delete($key);
    }
    class Transient implements \WPML\TM\ATE\API\CacheStorage\Storage
    {
        /**
         * @param string $key
         * @param mixed $default
         *
         * @return mixed
         */
        public function get($key, $default = null)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         */
        public function save($key, $value)
        {
        }
        /**
         * @param string $key
         */
        public function delete($key)
        {
        }
    }
    class StaticVariable implements \WPML\TM\ATE\API\CacheStorage\Storage
    {
        public static function getInstance()
        {
        }
        /**
         * @param string $key
         * @param mixed $default
         *
         * @return mixed
         */
        public function get($key, $default = null)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         */
        public function save($key, $value)
        {
        }
        /**
         * @param string $key
         */
        public function delete($key)
        {
        }
    }
}
namespace WPML\TM\ATE\API {
    class FingerprintGenerator
    {
        const SITE_FINGERPRINT_HEADER = 'SITE-FINGERPRINT';
        const NEW_SITE_FINGERPRINT_HEADER = 'NEW-SITE-FINGERPRINT';
        /**
         * @param SecondaryDomains $secondaryDomains
         */
        public function __construct(\WPML\TM\ATE\ClonedSites\SecondaryDomains $secondaryDomains)
        {
        }
        public function getSiteFingerprint()
        {
        }
        protected function getSiteUrl()
        {
        }
    }
    /**
     * Exception for HTTP requests
     */
    class RequestException extends \Exception
    {
        /**
         * Type of exception
         *
         * @var string
         */
        protected $type;
        /**
         * Data associated with the exception
         *
         * @var mixed
         */
        protected $data;
        /**
         * Whether to avoid logging the exception.
         *
         * @var bool
         */
        protected $avoidLogDuplication;
        /**
         * Create a new exception
         *
         * @param string     $message Exception message.
         * @param string|int $type Exception type.
         * @param mixed      $data Associated data.
         * @param int        $code Exception numerical code, if applicable.
         */
        public function __construct($message, $type, $data = null, $code = 0, $avoidLogDuplication = false)
        {
        }
        /**
         * Like {@see getCode()}, but a string code.
         *
         * @return string
         */
        public function getType()
        {
        }
        /**
         * Gives any relevant data
         *
         * @return mixed
         */
        public function getData()
        {
        }
        /**
         * Whether to avoid logging the exception.
         *
         * @return bool
         */
        public function shouldAvoidLogDuplication()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_API
    {
        const TRANSLATED = 6;
        const DELIVERING = 7;
        const NOT_ENOUGH_CREDIT_STATUS = 31;
        const CANCELLED_STATUS = 20;
        const SHOULD_HIDE_STATUS = 42;
        /**
         * WPML_TM_ATE_API constructor.
         *
         * @param WP_Http                    $wp_http
         * @param WPML_TM_ATE_Authentication $auth
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         * @param ClonedSitesHandler  $clonedSitesHandler
         * @param FingerprintGenerator  $fingerprintGenerator
         */
        public function __construct(\WP_Http $wp_http, \WPML_TM_ATE_Authentication $auth, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML\TM\ATE\ClonedSites\ApiCommunication $clonedSitesHandler, \WPML\TM\ATE\API\FingerprintGenerator $fingerprintGenerator)
        {
        }
        /**
         * On success, it returns the map: wpmlJobId => ateJobId inside the 'jobs' key.
         *
         * @param array $params
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/jobs/create
         *
         * @return array{
         *  code: int,
         *  status: string,
         *  message: string,
         *  jobs: array{
         *    int: int
         *  }
         * } | WP_Error
         *
         * @throws \InvalidArgumentException
         */
        public function create_jobs(array $params)
        {
        }
        /**
         * @param int|string|array $ate_job_id
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function confirm_received_job($ate_job_id)
        {
        }
        /**
         * @param array|int $jobIds
         * @param bool      $onlyFailed
         *
         * @return array|mixed|object|string|\WP_Error|null
         */
        public function cancelJobs($jobIds, $onlyFailed = \false)
        {
        }
        /**
         * @param array|int $jobIds
         * @param bool      $force
         *
         * @return array|mixed|object|string|\WP_Error|null
         */
        public function hideJobs($jobIds, $force = \false)
        {
        }
        /**
         * @param int    $job_id
         * @param string $return_url
         *
         * @return string|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_editor_url($job_id, $return_url)
        {
        }
        /**
         * @param int                          $ate_job_id
         * @param WPML_Element_Translation_Job $job_object
         * @param int|null $sentFrom
         *
         * @return array
         */
        public function clone_job($ate_job_id, \WPML_Element_Translation_Job $job_object, $sentFrom = \null)
        {
        }
        /**
         * @param int $ate_job_id
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_job($ate_job_id)
        {
        }
        /**
         * If `$job_ids` is not an empty array,
         * the `$statuses` parameter will be ignored in ATE's endpoint.
         *
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/jobs/status
         *
         * @param null|array $job_ids
         * @param null|array $statuses
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_jobs($job_ids, $statuses = \null)
        {
        }
        public function get_job_status_with_priority($job_id)
        {
        }
        /**
         * @param $wpml_job_ids
         *
         * @return array|mixed|object|WP_Error|null
         */
        public function get_jobs_by_wpml_ids($wpml_job_ids)
        {
        }
        /**
         * @param array $pairs
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/migration/migrate
         * @return bool
         */
        public function migrate_source_id(array $pairs)
        {
        }
        /**
         * @param LanguageMapping[] $languagesToMap
         *
         * @return Either
         */
        public function create_language_mapping(array $languagesToMap)
        {
        }
        /**
         * @param $mappingIds
         *
         * @return false|array
         */
        public function remove_language_mapping($mappingIds)
        {
        }
        /**
         * @param string[] $languageCodes
         * @param null|string $sourceLanguage
         *
         * @return Maybe
         */
        public function get_languages_supported_by_automatic_translations($languageCodes, $sourceLanguage = \null)
        {
        }
        /**
         * It returns language details from ATE including the info about translation engine supporting this language.
         *
         *  If $inTheWebsiteContext is true, then we are taking into consideration user's translation engine settings.
         *  It means that generally language may be supported e.g. by google, but when he turns off this engine, it will be reflected in the response.
         *
         * @param string $languageCode
         * @param bool $inTheWebsiteContext
         *
         * @return Maybe
         */
        public function get_language_details($languageCode, $inTheWebsiteContext = \true)
        {
        }
        /**
         * @return array
         */
        public function get_available_languages()
        {
        }
        /**
         * @return Maybe
         */
        public function get_language_mapping()
        {
        }
        public function start_translation_memory_migration()
        {
        }
        public function check_translation_memory_migration()
        {
        }
        /**
         * @see https://ate.pages.onthegosystems.com/ate-docs/ATE/API/V1/icl/translators/import
         *
         * @param $iclToken
         * @param $iclServiceId
         *
         * @return callable|Either
         */
        public function import_icl_translators($tsId, $tsAccessKey)
        {
        }
        /**
         * @param string $xliff_url
         * @param array|\stdClass|false|null $job
         *
         * @return string
         * @throws RequestException The request to ATE failed.
         */
        public function get_remote_xliff_content($xliff_url, $job = \null)
        {
        }
        public function override_site_id($site_id)
        {
        }
        public function get_website_id($site_url)
        {
        }
        /**
         * @param int $page
         *
         * @return \WPML\FP\Left|\WPML\FP\Right
         */
        public function get_jobs_to_retranslation(int $page = 1)
        {
        }
        /**
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/sync/all
         *
         * @param array $ateJobIds
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function sync_all(array $ateJobIds)
        {
        }
        /**
         * @see https://bitbucket.org/emartini_crossover/ate/wiki/API/V1/sync/page
         *
         * @param string $token
         * @param int    $page
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function sync_page($token, $page)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_API
    {
        const HTTP_ERROR_CODE_400 = 400;
        /**
         * WPML_TM_ATE_API constructor.
         *
         * @param WP_Http                    $wp_http
         * @param WPML_TM_ATE_Authentication $auth
         * @param WPML_TM_ATE_AMS_Endpoints  $endpoints
         * @param ClonedSitesHandler         $clonedSitesHandler
         * @param FingerprintGenerator       $fingerprintGenerator
         */
        public function __construct(\WP_Http $wp_http, \WPML_TM_ATE_Authentication $auth, \WPML_TM_ATE_AMS_Endpoints $endpoints, \WPML\TM\ATE\ClonedSites\ApiCommunication $clonedSitesHandler, \WPML\TM\ATE\API\FingerprintGenerator $fingerprintGenerator)
        {
        }
        /**
         * @param string $translator_email
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function enable_subscription($translator_email)
        {
        }
        /**
         * @param string $translator_email
         *
         * @return bool|WP_Error
         */
        public function is_subscription_activated($translator_email)
        {
        }
        /**
         * @return array|mixed|null|object|WP_Error
         *
         * @throws \InvalidArgumentException Exception.
         */
        public function get_status()
        {
        }
        /**
         * @return WP_Error|null
         */
        public function get_translation_engines()
        {
        }
        /**
         * @param $engine_settings
         *
         * @return bool|WP_Error
         */
        public function update_translation_engines($engine_settings)
        {
        }
        /**
         * Used to register a manager and, at the same time, create a website in AMS.
         * This is called only when registering the site with AMS.
         * To register new managers or translators `\WPML_TM_ATE_AMS_Endpoints::get_ams_synchronize_managers`
         * and `\WPML_TM_ATE_AMS_Endpoints::get_ams_synchronize_translators` will be used.
         *
         * @param WP_User   $manager              The WP_User instance of the manager.
         * @param WP_User[] $translators          An array of WP_User instances representing the current translators.
         * @param WP_User[] $managers             An array of WP_User instances representing the current managers.
         *
         * @return \WPML\FP\Either
         */
        public function register_manager(\WP_User $manager, array $translators, array $managers)
        {
        }
        /**
         * @return array|WP_Error
         */
        public function reportCopiedSite()
        {
        }
        /**
         * @return array|WP_Error
         */
        public function reportMovedSite()
        {
        }
        /**
         * @param string $migrationCode
         *
         * @return array|WP_Error
         */
        public function reportCopiedSiteWithCreditTransfer($migrationCode)
        {
        }
        /**
         * @param array $response Response from reportMovedSite()
         *
         * @return bool|WP_Error
         */
        public function processMoveReport($response)
        {
        }
        /**
         * @param array $response Response from reportCopiedSite()
         *
         * @return bool
         */
        public function processCopyReportConfirmation($response)
        {
        }
        /**
         * @return array
         */
        public function get_registration_data()
        {
        }
        /**
         * @param array $managers
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_managers(array $managers)
        {
        }
        /**
         * @param array $translators
         *
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_translators(array $translators)
        {
        }
        public function override_site_id($site_id)
        {
        }
        /**
         * @return array|WP_Error
         */
        public function getCredits()
        {
        }
        /**
         * @return array|WP_Error
         */
        public function resumeAll()
        {
        }
        public function send_sitekey($sitekey)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Authentication
    {
        const AMS_DATA_KEY = 'WPML_TM_AMS';
        const AMS_STATUS_NON_ACTIVE = 'non-active';
        const AMS_STATUS_ENABLED = 'enabled';
        const AMS_STATUS_ACTIVE = 'active';
        public function get_signed_url_with_parameters($verb, $url, $params = \null)
        {
        }
        public function signUrl($verb, $url, $params = \null)
        {
        }
        public function has_keys()
        {
        }
        /**
         * @param $query
         *
         * @return mixed|string
         */
        protected function build_query($query)
        {
        }
        /**
         * @param string|null $site_id
         */
        public function override_site_id($site_id)
        {
        }
        public function get_site_id()
        {
        }
    }
}
namespace WPML\TM\ATE\API {
    class CachedATEAPI
    {
        const CACHE_OPTION = 'wpml-tm-ate-api-cache';
        /**
         * @param \WPML_TM_ATE_API $ateAPI
         */
        public function __construct(\WPML_TM_ATE_API $ateAPI, \WPML\TM\ATE\API\CacheStorage\Storage $storage)
        {
        }
        public function __call($name, $args)
        {
        }
        public function cacheValue($fnName = null, $args = null, $result = null)
        {
        }
    }
}
namespace WPML\TM\ATE\ClonedSites {
    class Report
    {
        /**
         * @param \WPML_TM_AMS_API $apiClient
         * @param Lock $lock
         * @param \WPML_TM_ATE_Job_Repository $ateJobsRepository
         * @param \WPML_Translation_Job_Factory $translationJobFactory
         */
        public function __construct(\WPML_TM_AMS_API $apiClient, \WPML\TM\ATE\ClonedSites\Lock $lock, \WPML_TM_ATE_Job_Repository $ateJobsRepository, \WPML_TP_Sync_Update_Job $updateJobs, \WPML_Translation_Job_Factory $translationJobFactory)
        {
        }
        /**
         * @return true|\WP_Error
         */
        public function move()
        {
        }
        /**
         * @return bool
         */
        public function copy()
        {
        }
        /**
         * @param string $migrationCode
         *
         * @return bool
         */
        public function copyWithCredit($migrationCode)
        {
        }
    }
}
namespace WPML\TM\ATE\ClonedSites\Endpoints\GetCredits {
    class AMSAPIFactory
    {
        /**
         * It creates an instance of \WPML_TM_AMS_API which uses a special Fingerprint generator.
         * It let us make a call against the AMS API with the fingerprint of the original site.
         *
         * @return \WPML_TM_AMS_API
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\ATE\ClonedSites\Endpoints {
    class Move implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class CopyWithCredits implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class GetCredits implements \WPML\Ajax\IHandler
    {
        public function __construct(\WPML\TM\ATE\ClonedSites\Endpoints\GetCredits\AMSAPIFactory $amsAPIFactory)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class Copy implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\TM\ATE\ClonedSites {
    class ApiCommunication
    {
        const SITE_CLONED_ERROR = 426;
        const SITE_MOVED_OR_COPIED_MESSAGE = "WPML has detected a change in your site's URL. To continue translating your site, go to your <a href='%s'>WordPress Dashboard</a> and tell WPML if your site has been <a href='%s'>moved or copied</a>.";
        const SITE_MOVED_OR_COPIED_DOCS_URL = 'https://wpml.org/documentation/translating-your-contents/advanced-translation-editor/using-advanced-translation-editor-when-you-move-or-use-a-copy-of-your-site/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmltm';
        /**
         * @param Lock $lock
         */
        public function __construct(\WPML\TM\ATE\ClonedSites\Lock $lock)
        {
        }
        public function handleClonedSiteError($response)
        {
        }
        /**
         * @param string $endpointUrl
         *
         * @return \WP_Error|null
         */
        public function checkCloneSiteLock($endpointUrl = '')
        {
        }
    }
    /**
     * One physical site can have multiple domains.
     * In such situation, we have to take a note about it in order to use a proper domain while communicating with AMS/ATE.
     *
     * It is a different case than when a user decides to copy or move a site to another domain.
     * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmldev-2026
     */
    class SecondaryDomains
    {
        const OPTION = 'wpml_tm_ate_secondary_domains';
        const ORIGINAL_SITE_URL = 'wpml_tm_ate_original_site_url';
        /**
         * @param string $domain
         * @param string $originalSiteUrl
         *
         * @return string[]
         */
        public function add($domain, $originalSiteUrl)
        {
        }
        /**
         * The purpose of the method is to fall back to the original site URL
         *  in the case when the current site URL is a secondary domain of the same site,
         *
         * 1. If the current site URL is the same as the original site URL,
         *      then we can use the current site URL.
         * 2. If the current site URL is different from the original site URL and is registered as a secondary domain,
         *      then we can use the current site URL.
         * 3. If the current site URL is different from the original site URL and is not registered as a secondary domain,
         *      then we return the current site url which eventually will cause ATE error with code 421.
         *
         * @return string
         */
        public function maybeFallBackToTheOriginalURL($currentSiteUrl)
        {
        }
        /**
         * @return array{originalSiteUrl: string, aliasDomains: string[]}|null
         */
        public function getInfo()
        {
        }
    }
    class Lock
    {
        const CLONED_SITE_OPTION = 'otgs_wpml_tm_ate_cloned_site_lock';
        public function lock($lockData)
        {
        }
        /**
         * @return array{urlCurrentlyRegisteredInAMS: string, urlUsedToMakeRequest: string, siteMoved: bool}
         */
        public function getLockData()
        {
        }
        /**
         * @return string
         */
        public function getUrlRegisteredInAMS()
        {
        }
        public function unlock()
        {
        }
        public static function isLocked()
        {
        }
    }
    class Loader implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        public function __construct(\WPML\TM\ATE\ClonedSites\Lock $lock)
        {
        }
        public function add_hooks()
        {
        }
        public function getData()
        {
        }
    }
    /**
     * We need this class in order to be able to make an API calls against the original site ( the site that was cloned to the current url ).
     */
    class FingerprintGeneratorForOriginalSite extends \WPML\TM\ATE\API\FingerprintGenerator
    {
        public function __construct(\WPML\TM\ATE\ClonedSites\Lock $lock)
        {
        }
        protected function getSiteUrl()
        {
        }
    }
}
namespace WPML\TM\ATE\API {
    class ErrorMessages
    {
        public static function serverUnavailable($uuid)
        {
        }
        public static function offline($uuid)
        {
        }
        public static function invalidResponse($uuid)
        {
        }
        public static function respondedWithError()
        {
        }
        public static function serverUnavailableHeader()
        {
        }
        public static function invalidResponseDescription($uuid)
        {
        }
        public static function getSupportLink()
        {
        }
        public static function bodyWithoutRequiredFields()
        {
        }
        public static function uuidAlreadyExists()
        {
        }
    }
}
namespace WPML\TM\ATE\Sync {
    class Arguments
    {
        /** @var string|null $lockKey */
        public $lockKey;
        /** @var string|null $ateToken */
        public $ateToken;
        /** @var int|null $page */
        public $page;
        /** @var int|null $numberOfPages */
        public $numberOfPages;
        /** @var boolean $includeManualAndLongstandingJobs */
        public $includeManualAndLongstandingJobs;
    }
    class Result
    {
        /** @var string|false|null $lockKey */
        public $lockKey;
        /** @var string|null $ateToken */
        public $ateToken;
        /** @var int|null $nextPage */
        public $nextPage;
        /** @var int|null $numberOfPages */
        public $numberOfPages;
        /** @var int $downloadQueueSize */
        public $downloadQueueSize = 0;
        /** @var array[wpmlJobId, wpmlStatus, ateStatus, wpmlJobStatus] */
        public $jobs = [];
    }
    class Process
    {
        const LOCK_RELEASE_TIMEOUT = 1 * MINUTE_IN_SECONDS;
        public function __construct(\WPML_TM_ATE_API $api, \WPML_TM_ATE_Job_Repository $ateRepository)
        {
        }
        /**
         * @param Arguments $args
         *
         * @return Result
         */
        public function run(\WPML\TM\ATE\Sync\Arguments $args)
        {
        }
    }
}
namespace WPML\TM\ATE\Sitekey {
    class Endpoint extends \WPML\BackgroundTask\AbstractTaskEndpoint implements \WPML\Ajax\IHandler, \WPML\Core\BackgroundTask\Model\TaskEndpointInterface
    {
        const LOCK_TIME = 30;
        const MAX_RETRIES = 0;
        public function isDisplayed()
        {
        }
        public function runBackgroundTask(\WPML\Core\BackgroundTask\Model\BackgroundTask $task)
        {
        }
        public function getTotalRecords(\WPML\Collect\Support\Collection $data)
        {
        }
        public function getDescription(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class Sync implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /**
         * @param BackgroundTaskService $backgroundTaskService
         */
        public function __construct(\WPML\Core\BackgroundTask\Service\BackgroundTaskService $backgroundTaskService)
        {
        }
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_TM_AMS_Translator_Activation_Records
    {
        const USER_META = 'ate_activated';
        public function __construct(\WPML_WP_User_Factory $user_factory)
        {
        }
        public function is_activated($user_email)
        {
        }
        public function is_current_user_activated()
        {
        }
        public function is_user_activated(\WPML_User $user)
        {
        }
        public function set_activated($user_email, $state)
        {
        }
        public function update(array $translators)
        {
        }
    }
}
namespace WPML\TM\ATE {
    class JobRecords
    {
        const FIELD_ATE_JOB_ID = 'ate_job_id';
        const FIELD_IS_EDITING = 'is_editing';
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * This method will retrieve data from the ATE job ID.
         * Beware of the returned data shape which is not standard.
         *
         * @param int $ateJobId
         *
         * @return array|null
         */
        public function get_data_from_ate_job_id($ateJobId)
        {
        }
        /**
         * @param int   $wpmlJobId
         * @param array $ateJobData
         */
        public function store($wpmlJobId, array $ateJobData)
        {
        }
        /**
         * @param JobRecord $job
         */
        public function persist(\WPML\TM\ATE\JobRecord $job)
        {
        }
        /**
         * This method will load in-memory the required jobs.
         *
         * @param array $wpmlJobIds
         * @param array $ateJobIds
         */
        public function warmCache(array $wpmlJobIds, array $ateJobIds = [])
        {
        }
        /**
         * @param int $wpmlJobId
         *
         * @return int
         */
        public function get_ate_job_id($wpmlJobId)
        {
        }
        /**
         * @param int $wpmlJobId
         *
         * @return bool
         */
        public function is_editing_job($wpmlJobId)
        {
        }
        /**
         * @param $wpmlJobId
         *
         * @return JobRecord
         */
        public function get($wpmlJobId)
        {
        }
    }
    class TranslateEverything
    {
        const LOCK_RELEASE_TIMEOUT = 2 * MINUTE_IN_SECONDS;
        const QUEUE_SIZE = 15;
        public function __construct(\WPML\TM\ATE\TranslateEverything\UntranslatedPosts $untranslatedPosts)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data, \WPML\TM\AutomaticTranslation\Actions\Actions $actions)
        {
        }
        /**
         * @param array $postTypes
         * @param array $targetLanguages
         *
         * @return array Eg. [['post', ['fr', 'de', 'es']], ['page', ['fr', 'de', 'es']]]
         */
        public static function getPostTypesToTranslate(array $postTypes, array $targetLanguages)
        {
        }
        /**
         * @param string $postType
         * @param array $targetLanguages
         *
         * @return string[] Eg. ['fr', 'de', 'es']
         */
        public static function getLanguagesToTranslate($postType, array $targetLanguages)
        {
        }
        /**
         * Checks if Translate Everything is processed for a given Post Type and Language.
         *
         * @param string|bool $postType
         * @param string $language
         *
         * @return bool
         */
        public static function isEverythingProcessedForPostTypeAndLanguage($postType, $language)
        {
        }
        /**
         * @param bool $cached
         *
         * @return bool
         */
        public static function isEverythingProcessed($cached = false)
        {
        }
    }
}
namespace WPML\TM\ATE\TranslateEverything\Pause {
    class PauseAndResume
    {
        public function __construct(\WPML\TranslationMode\Endpoint\SetTranslateEverything $set_translate_everything)
        {
        }
        public function pause()
        {
        }
        public function resume($translateExisting)
        {
        }
    }
    class View implements \WPML\Ajax\IHandler
    {
        const ACTION_PAUSE = 'pause';
        const ACTION_RESUME = 'resume';
        public function __construct(\WPML\TM\ATE\TranslateEverything\Pause\PauseAndResume $translate_everything, \WPML\TM\ATE\TranslateEverything\Pause\UserAuthorisation $user)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class UserAuthorisation
    {
        public function isAllowedToPauseAutomaticTranslation()
        {
        }
        public function isAllowedToResumeAutomaticTranslation()
        {
        }
    }
}
namespace WPML\TM\ATE\TranslateEverything\TranslatableData {
    class DataPreSetup
    {
        const POSTS_CHUNK_SIZE = 100;
        const TERMS_CHUNK_SIZE = 10000;
        const KEY_POST_TYPES = 'post_types';
        const KEY_TAXONOMIES = 'taxonomies';
        public function listTranslatableData()
        {
        }
        /**
         * @param wpdb      $db
         * @param Calculate $calculate
         *
         * @return void
         */
        public function __construct(\wpdb $db, \WPML\TM\ATE\TranslateEverything\TranslatableData\Calculate $calculate)
        {
        }
        public function fetch(\WPML\TM\ATE\TranslateEverything\TranslatableData\Stack $stack)
        {
        }
    }
    class View implements \WPML\Ajax\IHandler
    {
        const ACTION_LIST_TRANSLATABLES = 'list-translatables';
        const ACTION_FETCH_DATA = 'fetch-data';
        /**
         * @param DataPreSetup $data
         *
         * @return void
         */
        public function __construct(\WPML\TM\ATE\TranslateEverything\TranslatableData\DataPreSetup $data)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class Calculate
    {
        const AVERAGE_CHARS_PER_WORD = 5;
        /**
         * @param string $content
         *
         * @return int
         */
        public function chars($content)
        {
        }
        /**
         * @param string $content
         *
         * @return int|float
         */
        public function words($content)
        {
        }
    }
    class Stack
    {
        /**
         * @param string                                  $type
         * @param string                                  $name
         * @param int                                     $count
         * @param int|float                               $words
         * @param array<singular: string, plural: string> $labels
         *
         * @return void
         *
         * @throws \InvalidArgumentException When $type or $name is empty.
         */
        public function __construct($type, $name, $count = 0, $words = 0, $labels = [])
        {
        }
        /** @return string  */
        public function type()
        {
        }
        /** @return string  */
        public function name()
        {
        }
        /** @return int  */
        public function count()
        {
        }
        /**
         * @param int|float $words
         *
         * @return self
         */
        public function addWords($words)
        {
        }
        /**
         * @param int $count
         *
         * @return self
         */
        public function addCount($count)
        {
        }
        public function completed()
        {
        }
        public function toArray()
        {
        }
    }
}
namespace WPML\TM\ATE\TranslateEverything {
    class UntranslatedPosts
    {
        /**
         * @param string[] $secondaryLanguages
         * @param string $postType e.g. 'post', 'page'
         * @param $queueSize
         *
         * @return array{0: int, 1: int} [ [element_id1, language_code1], [element_id1, language_code2], [element_id2, language_code3], ... ]
         */
        public function get(array $secondaryLanguages, $postType, $queueSize)
        {
        }
    }
}
namespace WPML\TM\ATE {
    class StatusBar
    {
        /**
         * @param bool $hasAutomaticJobsInProgress
         * @param int $needsReviewCount
         * @param bool $hasBackgroundTasksInProgress
         *
         * @return void
         */
        public static function add_hooks($hasAutomaticJobsInProgress = false, $needsReviewCount = 0, $hasBackgroundTasksInProgress = false)
        {
        }
        public static function add(\WP_Admin_Bar $adminBar)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Status
    {
        public static function is_enabled()
        {
        }
        public static function is_active()
        {
        }
        public static function is_enabled_and_activated()
        {
        }
    }
}
namespace WPML\TM\ATE\Retry {
    class Trigger
    {
        const RETRY_TIMEOUT = 10 * MINUTE_IN_SECONDS;
        const OPTION_GROUP = 'WPML\\TM\\ATE\\Retry';
        const RETRY_LAST = 'last';
        /**
         * @return bool
         */
        public function isRetryRequired()
        {
        }
        public function setLastRetry($time)
        {
        }
    }
    class Result
    {
        /** @var Collection */
        public $jobsToProcess;
        /** @var array[wpmlJobId] */
        public $processed = [];
        public function __construct()
        {
        }
    }
    class Process
    {
        const JOBS_PROCESSED_PER_REQUEST = 10;
        public function __construct(\WPML_TM_ATE_Job_Repository $ateRepository, \WPML\TM\ATE\Retry\Trigger $trigger)
        {
        }
        /**
         * @param array $jobsToProcess
         *
         * @return Result
         */
        public function run($jobsToProcess)
        {
        }
    }
}
namespace WPML\TM\ATE {
    class Jobs
    {
        const LONGSTANDING_AT_ATE_SYNC_COUNT = 100;
        /**
         * @param array $statuses
         *
         * @return array
         */
        public static function getJobsWithStatus(array $statuses)
        {
        }
        /**
         * @return array
         */
        public static function getJobsToSync()
        {
        }
        /**
         * @return int
         */
        public static function getTotal()
        {
        }
        /**
         * @return int
         */
        public static function getCountOfAutomaticInProgress()
        {
        }
        /**
         * @return bool
         */
        public static function isThereJob()
        {
        }
    }
}
namespace {
    /**
     * Used for helping building other factories.
     *
     * @see    Usage.
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_ATE_Factories
    {
        /**
         * It returns an cached instance of \WPML_TM_ATE_API.
         *
         * @return \WPML_TM_ATE_API
         */
        public function get_ate_api()
        {
        }
        /**
         * It returns an cached instance of \WPML_TM_ATE_API.
         *
         * @return \WPML_TM_AMS_API
         */
        public function get_ams_api()
        {
        }
        /**
         * If ATE is active, it returns true.
         *
         * @return bool
         */
        public function is_ate_active()
        {
        }
    }
}
namespace WPML\TM\ATE\Review {
    class ReviewCompletedNotice implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
    class ReviewTranslation implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param int $jobId
         *
         * @return callable
         */
        public function handleTranslationReview()
        {
        }
        public static function printReviewToolbarAnchor()
        {
        }
        /**
         * @return null This will stop the redirection.
         */
        public static function failGracefullyOnPreviewRedirection()
        {
        }
        public function getData($jobId, $post, $filterTargetLanguages)
        {
        }
        /**
         * Returns completed status based on key 'complete_no_changes' in $params.
         * Returns NOT_COMPLETED if 'complete_no_changes' is not set.
         *
         * @param array $params
         *
         * @return string
         */
        public function isCompletedInATE($params)
        {
        }
        /**
         * @return boolean
         */
        public function isCurrentPageReviewPostTypeTemplate()
        {
        }
        /**
         * @return boolean
         */
        public function isCurrentPageReview()
        {
        }
        /**
         * This filter is called from WP core /wp-includes/blocks.php right before block is rendered.
         * If anything other than null is returned from this filter that value is used as final block rendered value without calling actual block render function.
         *
         * @param string|null $preRenderedContent Pre-rendered context for the block.
         * @param array       $blockParams Block params being rendered.
         *
         * @return string|null $context
         */
        public function onPreRenderBlock($preRenderedContent, $blockParams)
        {
        }
    }
    class PackageJob implements \IWPML_Backend_Action, \IWPML_REST_Action
    {
        const ELEMENT_TYPE_PREFIX = 'package';
        /**
         * @return void
         */
        public function add_hooks()
        {
        }
        /**
         * @param object $job
         *
         * @return bool
         */
        public static function isPackageJob($job)
        {
        }
    }
    class NextTranslationLink
    {
        public static function get($currentJob, $filterTargetLanguages)
        {
        }
    }
    /**
     * Class ReviewStatus
     * @package WPML\TM\ATE\Review
     *
     * @method static callable|bool doesJobNeedReview( ...$job ) - Curried :: \stdClass->bool
     */
    class ReviewStatus
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const NEEDS_REVIEW = 'NEEDS_REVIEW';
        const EDITING = 'EDITING';
        const ACCEPTED = 'ACCEPTED';
        public static function init()
        {
        }
        /**
         * @template A as string|curried
         * @param A $reviewStatus
         *
         * @return (A is curried ? callable : bool)
         */
        public static function needsReview($reviewStatus = null)
        {
        }
    }
    class ApplyJob implements \IWPML_Backend_Action, \IWPML_REST_Action, \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
    }
    class Cancel implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    /**
     * Class PreviewLink
     *
     * @phpstan-type curried "__CURRIED_PLACEHOLDER__"
     *
     * @package WPML\TM\ATE\Review
     *
     * @method static callable|string get( ...$translationPostId, ...$jobId ) : Curried:: int->int->string
     * @method static callable|string getWithLanguagesParam( ...$languages, ...$translationPostId, ...$jobId ) : Curried:: int->int->string
     * @method static callable|string getByJob( ...$job ) : Curried:: \stdClass->string
     */
    class PreviewLink
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
        /**
         * @param string     $returnUrl
         * @param string|int $translationPostId
         * @param string|int $jobId
         *
         * @return string
         *
         * @phpstan-template V1 of string|curried
         * @phpstan-template V2 of string|int|curried
         * @phpstan-template V3 of object|int|curried
         * @phpstan-template P1 of string
         * @phpstan-template P2 of string|int
         * @phpstan-template P3 of string|int
         * @phpstan-template R of string
         *
         * @phpstan-param ?V1 $returnUrl
         * @phpstan-param ?V2 $translationPostId
         * @phpstan-param ?V3 $jobId
         *
         * @phpstan-return ($a is P1
         *  ? ($b is P2
         *    ? ($c is P3
         *      ? R
         *      : callable(P3=):R)
         *    : ($c is P3
         *      ? callable(P2=):R
         *      : callable(P2=,P3=):R)
         *  )
         *  : ($b is P2
         *    ? ($c is P3
         *      ? callable(P1=):R
         *      : callable(P1=,P3=):R)
         *    : ($c is P3
         *      ? callable(P1=,P2=):R
         *      : callable(P1=,P2=,P3=):R)
         *  )
         * )
         */
        public static function getWithSpecifiedReturnUrl($returnUrl = null, $translationPostId = null, $jobId = null)
        {
        }
        /**
         * @template A as string|int|curried
         *
         * @param A $translationPostId
         *
         * @return (A is curried ? callable : string)
         */
        public static function getNonceName($translationPostId = null)
        {
        }
    }
    /**
     * This will allow displaying private CPT reviews on the frontend.
     */
    class NonPublicCPTPreview
    {
        const POST_TYPE = 'wpmlReviewPostType';
        /**
         * @param array $args
         *
         * @return array
         */
        public static function addArgs(array $args)
        {
        }
        /**
         * @return callable
         */
        public static function allowReviewPostTypeQueryVar()
        {
        }
        /**
         * @return callable
         */
        public static function enforceReviewPostTypeIfSet()
        {
        }
    }
    class AcceptTranslation implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class UpdateTranslation implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class StatusIcons implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public static function getReviewTitle($langProp)
        {
        }
        public static function getEditTitle($langProp)
        {
        }
    }
    class ApproveTranslations implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\TM\ATE\LanguageMapping {
    class InvalidateCacheEndpoint implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE
    {
        const SITE_ID_SCOPE = 'ate';
        public function is_translation_method_ate_enabled()
        {
        }
        /**
         * @param int    $trid
         * @param string $language
         *
         * @return bool
         */
        public function is_translation_ready_for_post($trid, $language)
        {
        }
        /**
         * @param int    $trid
         * @param string $language
         *
         * @return int|bool
         */
        public function get_translation_status_id_for_post($trid, $language)
        {
        }
        /**
         * @param int    $trid
         * @param string $language
         *
         * @return array|WP_Error
         */
        public function get_job_data_for_post($trid, $language)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Translator_Login implements \IWPML_Action
    {
        public function __construct(\WPML_TM_AMS_Translator_Activation_Records $translator_activation_records, \WPML_Translator_Records $translator_records, \WPML_TM_AMS_API $ams_api)
        {
        }
        public function add_hooks()
        {
        }
        public function wp_login($user_login, $user)
        {
        }
    }
    /**
     * Factory class for \WPML_TM_ATE_Jobs_Actions.
     *
     * @package wpml\tm
     *
     * @author  OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Actions_Factory implements \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        /**
         * It returns an instance of \WPML_TM_ATE_Jobs_Actions or null if ATE is not enabled and active.
         *
         * @return \WPML_TM_ATE_Jobs_Actions|null
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Post_Edit_Actions_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class JobActions implements \IWPML_Action
    {
        public function __construct(\WPML_TM_ATE_API $apiClient)
        {
        }
        public function add_hooks()
        {
        }
        public function cancelJobInATE(\WPML_TM_Post_Job_Entity $job)
        {
        }
        /**
         * @param \WPML_TM_Post_Job_Entity[]|\WPML_TM_Post_Job_Entity  $jobs
         *
         * @return void
         */
        public function cancelJobsInATE($jobs)
        {
        }
        /**
         * @param array $oldLanguages
         * @return void
         */
        public function hideJobsAfterRemoveLanguage($oldLanguages)
        {
        }
        public function hideJobsAfterTranslationMethodChange($translateEverythingActive)
        {
        }
    }
}
namespace {
    class WPML_TM_ATE_Job_Data_Fallback implements \IWPML_Action
    {
        /**
         * @param WPML_TM_ATE_API $ate_api
         */
        public function __construct(\WPML_TM_ATE_API $ate_api)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         * @param int   $wpml_job_id
         *
         * @return array
         */
        public function get_data_from_api(array $data, $wpml_job_id)
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class ReturnedJobActions implements \IWPML_Action
    {
        /**
         * @param  callable $addToQueue
         * @param  callable $removeTranslationDuplicateStatus
         */
        public function __construct(callable $addToQueue, callable $removeTranslationDuplicateStatus)
        {
        }
        public function add_hooks()
        {
        }
        public function addToQueue()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Post_Edit_Actions implements \IWPML_Action
    {
        /**
         * WPML_TM_ATE_Jobs_Actions constructor.
         *
         * @param WPML_TM_ATE_AMS_Endpoints $endpoints
         */
        public function __construct(\WPML_TM_ATE_AMS_Endpoints $endpoints)
        {
        }
        public function add_hooks()
        {
        }
        public function allowed_redirect_hosts($hosts)
        {
        }
    }
    class WPML_TM_ATE_API_Error
    {
        public function log($message)
        {
        }
    }
    /**
     * \WPML_TM_ATE_Translator_Login factory.
     *
     * @author OnTheGo Systems
     *
     * NOTE: This uses the Frontend loader because is_admin() returns false during wp_login
     */
    class WPML_TM_ATE_Translator_Login_Factory implements \IWPML_Frontend_Action_Loader
    {
        /**
         * It returns an instance of WPML_TM_ATE_Translator_Login is ATE is enabled and active.
         *
         * @return \WPML_TM_ATE_Translator_Logine|\IWPML_Frontend_Action_Loader|null
         */
        public function create()
        {
        }
    }
    class WPML_TM_Old_Editor_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_AMS_Synchronize_Users_On_Access_Denied_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class JobActionsFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace {
    class WPML_TM_Old_Editor implements \IWPML_Action
    {
        const ACTION = 'icl_ajx_custom_call';
        const CUSTOM_AJAX_CALL = 'icl_doc_translation_method';
        const NOTICE_ID = 'wpml-translation-management-old-editor';
        const NOTICE_GROUP = 'wpml-translation-management';
        public function add_hooks()
        {
        }
        public function handle_custom_ajax_call($call, $data)
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class LanguageMappingCache implements \IWPML_Backend_Action, \IWPML_REST_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_TM_ATE_Translator_Message_Classic_Editor implements \IWPML_Action
    {
        const ACTION = 'wpml_ate_translator_classic_editor';
        const USER_OPTION = 'wpml_ate_translator_classic_editor_minimized';
        public function __construct(\WPML_Translation_Manager_Records $translation_manager_records, \WPML_WP_User_Factory $user_factory, \WPML_TM_ATE_Request_Activation_Email $activation_email)
        {
        }
        public function add_hooks()
        {
        }
        public function classic_editor_message()
        {
        }
        public function handle_ajax()
        {
        }
    }
    class WPML_TM_ATE_Translator_Message_Classic_Editor_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return \WPML_TM_ATE_Translator_Message_Classic_Editor|\IWPML_Action|null
         */
        public function create()
        {
        }
    }
    /**
     * @todo Perhaps this class is redundant
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Store_Actions_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|null
         */
        public function create()
        {
        }
    }
    class WPML_TM_ATE_Job_Data_Fallback_Factory implements \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        /**
         * @return WPML_TM_ATE_Job_Data_Fallback
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_Synchronize_Actions_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TM_AMS_Synchronize_Actions|null
         */
        public function create()
        {
        }
    }
    class WPML_TM_AMS_Synchronize_Users_On_Access_Denied
    {
        const ERROR_MESSAGE = 'Authentication error, please contact your translation manager to check your subscription';
        public function add_hooks()
        {
        }
        public function catch_access_error()
        {
        }
        /**
         * @param WPML_TM_AMS_Synchronize_Actions $ams_synchronize_actions
         */
        public function set_ams_synchronize_actions(\WPML_TM_AMS_Synchronize_Actions $ams_synchronize_actions)
        {
        }
        /**
         * @param WPML_TM_ATE_Jobs $ate_jobs
         */
        public function set_ate_jobs(\WPML_TM_ATE_Jobs $ate_jobs)
        {
        }
    }
    /**
     * @todo The hook 'wpml_tm_ate_jobs_store' seems to be never used so this class and its factory may be obsolete
     *
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Store_Actions implements \IWPML_Action
    {
        /**
         * WPML_TM_ATE_Jobs_Actions constructor.
         *
         * @param WPML_TM_ATE_Jobs $ate_jobs
         */
        public function __construct(\WPML_TM_ATE_Jobs $ate_jobs)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int   $wpml_job_id
         * @param array $ate_job_data
         *
         * @return array|null
         */
        public function store($wpml_job_id, $ate_job_data)
        {
        }
        /**
         * @param int   $wpml_job_id
         * @param array $ate_job_data
         *
         * @return void
         */
        public function store_action($wpml_job_id, $ate_job_data)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_AMS_Synchronize_Actions implements \IWPML_Action
    {
        const ENABLED_FOR_TRANSLATION_VIA_ATE = 'wpml_enabled_for_translation_via_ate';
        public function __construct(\WPML_TM_AMS_API $ams_api, \WPML_TM_AMS_Users $ams_user_records, \WPML_WP_User_Factory $user_factory, \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function synchronize_translators()
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function synchronize_managers()
        {
        }
        public function enable_subscription($user_id)
        {
        }
        /**
         * @param int $user_id
         */
        public function prepare_user_deleted($user_id)
        {
        }
        /**
         * @param int $user_id
         */
        public function user_changed($user_id)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Jobs_Actions implements \IWPML_Action
    {
        const RESPONSE_ATE_NOT_ACTIVE_ERROR = 403;
        const RESPONSE_ATE_DUPLICATED_SOURCE_ID = 417;
        const RESPONSE_ATE_UNEXPECTED_ERROR = 500;
        const RESPONSE_ATE_ERROR_NOTICE_ID = 'ate-update-error';
        const RESPONSE_ATE_ERROR_NOTICE_GROUP = 'default';
        const CREATE_ATE_JOB_CHUNK_WORDS_LIMIT = 2000;
        /**
         * WPML_TM_ATE_Jobs_Actions constructor.
         *
         * @param \WPML_TM_ATE_API                           $ate_api
         * @param \WPML_TM_ATE_Jobs                          $ate_jobs
         * @param \SitePress                                 $sitepress
         * @param \WPML_Current_Screen                       $current_screen
         * @param \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records
         */
        public function __construct(\WPML_TM_ATE_API $ate_api, \WPML_TM_ATE_Jobs $ate_jobs, \SitePress $sitepress, \WPML_Current_Screen $current_screen, \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records)
        {
        }
        public function add_hooks()
        {
        }
        public function handle_messages()
        {
        }
        /**
         * @param int    $job_id
         * @param string $translation_service
         *
         * @throws \InvalidArgumentException
         * @throws \RuntimeException
         */
        public function added_translation_job($job_id, $translation_service)
        {
        }
        /**
         * @param array $jobs
         * @param int|null $sentFrom
         * @param \WPML_TM_Translation_Batch $batch
         *
         * @return void
         * @throws \InvalidArgumentException
         * @throws \RuntimeException
         */
        public function added_translation_jobs(array $jobs, $sentFrom = \null, \WPML_TM_Translation_Batch $batch = \null)
        {
        }
        /**
         * @param array    $jobsData
         * @param int|null $sentFrom
         *
         * @return mixed
         * @throws \InvalidArgumentException
         */
        public function create_jobs(array $jobsData, $sentFrom)
        {
        }
        /**
         * @param string      $default_url
         * @param int         $job_id
         * @param null|string $return_url
         *
         * @return string
         * @throws \InvalidArgumentException
         */
        public function get_editor_url($default_url, $job_id, $return_url = \null)
        {
        }
        /**
         * @param $ignore
         * @param array  $translation_jobs
         *
         * @return array
         */
        public function get_ate_jobs_data_filter($ignore, array $translation_jobs)
        {
        }
        /**
         * @param mixed $response
         *
         * @throws \RuntimeException
         */
        protected function check_response_error($response)
        {
        }
    }
}
namespace WPML\TM\ATE\Hooks {
    class ReturnedJobActionsFactory implements \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Required_Actions_Base
    {
        protected function is_ate_enabled()
        {
        }
    }
}
namespace WPML\TM\ATE {
    /**
     * Class ReturnedJobsQueue
     *
     * @package WPML\TM\ATE
     *
     * IMPORTANT!
     * In this class `wpmlJobId` represents job_id column in icl_translate_job
     */
    class ReturnedJobsQueue
    {
        const OPTION_NAME = 'ATE_RETURNED_JOBS_QUEUE';
        const STATUS_COMPLETED = 'complete';
        const STATUS_BACK = 'back';
        /**
         * @param  int      $ateJobId
         * @param  string   $status
         * @param  callable $ateIdToWpmlId @see comment in the class description
         */
        public static function add($ateJobId, $status, callable $ateIdToWpmlId)
        {
        }
        /**
         * For jobs that are completed in ATE, but belong to a Translation that is currently marked as "Duplicate".
         * In such cases, we want to get rid of the Duplicate status, otherwise it will not be processed during ATE sync.
         *
         * @see \WPML\TM\ATE\Loader::getData
         * @see \WPML_Meta_Boxes_Post_Edit_HTML::post_edit_languages_duplicate_of How it's handled for CTE.
         *
         * @param int      $ateJobId
         * @param callable $ateIdToWpmlId
         */
        public static function removeJobTranslationDuplicateStatus($ateJobId, callable $ateIdToWpmlId)
        {
        }
        /**
         * @param  int $wpmlJobId @see comment in the class description
         *
         * @return string|null
         */
        public static function getStatus($wpmlJobId)
        {
        }
        /**
         * @param $wpmlJobId @see comment in the class description
         */
        public static function remove($wpmlJobId)
        {
        }
    }
    class Loader implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const JOB_ID_PLACEHOLDER = '###';
        /**
         * @param BackgroundTaskRepository $backgroundTaskRepository
         */
        public function __construct(\WPML\Core\BackgroundTask\Repository\BackgroundTaskRepository $backgroundTaskRepository)
        {
        }
        public function add_hooks()
        {
        }
        public static function getData()
        {
        }
        /**
         * @return string
         */
        public static function getNotEnoughCreditPopup()
        {
        }
        public static function showAteConsoleContainer()
        {
        }
        public static function getWpmlAutoTranslateContainer()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_TM_ATE_Required_Rest_Base extends \WPML_REST_Base
    {
        const REST_NAMESPACE = 'wpml/tm/v1';
        /**
         * WPML_TM_ATE_Required_Rest_Base constructor.
         */
        public function __construct()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function validate_permission(\WP_REST_Request $request)
        {
        }
        /**
         * @param string $endpoint
         *
         * @return string
         */
        static function get_url($endpoint)
        {
        }
    }
}
namespace WPML\TM\ATE\REST {
    /**
     * @author OnTheGo Systems
     */
    class PublicReceive extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CODE_UNPROCESSABLE_ENTITY = 422;
        const CODE_OK = 200;
        const ENDPOINT_JOBS_RECEIVE = '/ate/jobs/receive/';
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return true|\WP_Error
         */
        public function receive_ate_job(\WP_REST_Request $request)
        {
        }
        /**
         * @param int $wpml_job_id
         *
         * @return string
         */
        public static function get_receive_ate_job_url($wpml_job_id)
        {
        }
    }
    class Sync extends \WPML\TM\REST\Base
    {
        /**
         * @return array
         */
        public function get_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         * @throws \Auryn\InjectionException
         */
        public function sync(\WP_REST_Request $request)
        {
        }
    }
}
namespace {
    class WPML_TM_REST_XLIFF_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\TM\ATE\REST {
    class Retry extends \WPML\TM\REST\Base
    {
        /**
         * @return array
         */
        public function get_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         * @throws \Auryn\InjectionException
         */
        public function retry(\WP_REST_Request $request)
        {
        }
    }
    class Download extends \WPML\TM\REST\Base
    {
        /**
         * @return array
         */
        public function get_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function download(\WP_REST_Request $request)
        {
        }
        /**
         * @param Collection $processedJobs
         * @param string $returnUrl
         *
         * @return Collection
         */
        public static function getJobs(\WPML\Collect\Support\Collection $processedJobs, $returnUrl)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_XLIFF extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CAPABILITY = 'translate';
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         * @throws \InvalidArgumentException
         */
        public function fetch_xliff(\WP_REST_Request $request)
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
}
namespace WPML\TM\ATE\REST {
    class FixJob extends \WPML\TM\REST\Base
    {
        const PARAM_ATE_JOB_ID = 'ateJobId';
        const PARAM_WPML_JOB_ID = 'jobId';
        public function __construct(\WPML\Rest\Adaptor $adaptor, \WPML_TM_ATE_API $ateApi, \WPML_TM_ATE_Jobs $ateJobs)
        {
        }
        /**
         * @return array
         */
        public function get_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return bool[]
         */
        public function fix_job(\WP_REST_Request $request)
        {
        }
        /**
         * Processes the job status.
         *
         * @param $ateJobId
         * @param $wpmlJobId
         *
         * @return bool
         * @throws RequestException
         */
        public function process($ateJobId, $wpmlJobId)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_ATE_Jobs extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CAPABILITY = 'manage_translations';
        /**
         * WPML_TM_REST_ATE_Jobs constructor.
         *
         * @param WPML_TM_ATE_Jobs           $ate_jobs
         * @param WPML_TM_ATE_Job_Repository $job_repository
         */
        public function __construct(\WPML_TM_ATE_Jobs $ate_jobs, \WPML_TM_ATE_Job_Repository $job_repository)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return bool
         * @throws \InvalidArgumentException
         */
        public function store_ate_job(\WP_REST_Request $request)
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_REST_ATE_API extends \WPML_TM_ATE_Required_Rest_Base
    {
        const CAPABILITY_CREATE = 'manage_translations';
        const CAPABILITY_READ = 'translate';
        /**
         * WPML_TM_REST_AMS_Clients constructor.
         *
         * @param WPML_TM_ATE_API $api
         */
        public function __construct(\WPML_TM_ATE_API $api)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function create_jobs(\WP_REST_Request $request)
        {
        }
        /**
         * @param WP_REST_Request $request
         *
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_job(\WP_REST_Request $request)
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
    }
    class WPML_TM_REST_ATE_Jobs_Factory extends \WPML_REST_Factory_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_REST_AMS_Clients_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return \WPML_TM_REST_AMS_Clients
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    class WPML_TM_REST_AMS_Clients extends \WPML_REST_Base
    {
        public function __construct(\WPML_TM_AMS_API $api, \WPML_TM_AMS_Users $ams_user_records, \WPML_TM_AMS_Translator_Activation_Records $translator_activation_records, \WPML_TM_MCS_ATE_Strings $strings)
        {
        }
        function add_hooks()
        {
        }
        function register_routes()
        {
        }
        /**
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function register_manager()
        {
        }
        /**
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_translators()
        {
        }
        /**
         * @return array|WP_Error
         * @throws \InvalidArgumentException
         */
        public function synchronize_managers()
        {
        }
        /**
         * @return array|mixed|null|object|WP_Error
         * @throws \InvalidArgumentException
         */
        public function get_status()
        {
        }
        public function get_console()
        {
        }
        function get_allowed_capabilities(\WP_REST_Request $request)
        {
        }
        public function get_translation_engines()
        {
        }
        public function update_translation_engines(\WP_REST_Request $request)
        {
        }
    }
    class WPML_TM_REST_ATE_API_Factory extends \WPML_REST_Factory_Loader
    {
        /**
         * @return \WPML_TM_REST_ATE_API
         * @throws \Auryn\InjectionException
         */
        public function create()
        {
        }
    }
    class WPML_TM_AMS_Users
    {
        public function __construct(\WPML\User\UsersByCapsRepository $userByCapsRepository)
        {
        }
        public function get_translators()
        {
        }
        public function get_managers()
        {
        }
    }
}
namespace WPML\TM\ATE {
    class NoCreditPopup
    {
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @return array
         */
        public function getData($ateJobIds = null)
        {
        }
        public function getLanguagesData()
        {
        }
    }
    class SyncLock
    {
        public function __construct()
        {
        }
        /**
         * @param null~string $key
         *
         * @return false|string
         */
        public function create($key = null)
        {
        }
        /**
         * @return bool
         */
        public function release()
        {
        }
    }
    class JobRecord
    {
        /** @var int $wpmlJobId */
        public $wpmlJobId;
        /** @var int $ateJobId */
        public $ateJobId;
        /**
         * @todo: Remove this property.
         *
         * @var int $editTimestamp
         */
        public $editTimestamp = 0;
        public function __construct(\stdClass $dbRow = null)
        {
        }
        /**
         * @todo: Remove the "$editTimestamp" and "is_editing", not handled on WPML side anymore.
         *
         * The job is considered as being edited if
         * the timestamp is not greater than 1 day.
         *
         * @return bool
         */
        public function isEditing()
        {
        }
    }
}
namespace {
    class WPML_TM_ATE_Job_Repository
    {
        public function __construct(\WPML_TM_Jobs_Repository $job_repository)
        {
        }
        /**
         * @param bool $includeManualAndLongstandingJobs
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function get_jobs_to_sync($includeManualAndLongstandingJobs = \true)
        {
        }
        /**
         * @param array $ateJobIds
         *
         * @return bool
         */
        public function increment_ate_sync_count(array $ateJobIds)
        {
        }
        /**
         * @return WPML_TM_Jobs_Collection
         */
        public function get_jobs_to_retry()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Models_Job_Create
    {
        /** @var int */
        public $id;
        /** @var int */
        public $deadline;
        /** @var WPML_TM_ATE_Models_Job_File */
        public $file;
        /** @var bool */
        public $notify_enabled;
        /** @var string */
        public $notify_url;
        /** @var int */
        public $source_id;
        /** @var string */
        public $permalink;
        /** @var string */
        public $site_identifier;
        /** @var WPML_TM_ATE_Models_Language */
        public $source_language;
        /** @var WPML_TM_ATE_Models_Language */
        public $target_language;
        /** @var string */
        public $ate_ams_console_url;
        /** @var int */
        public $existing_ate_id;
        /** @var int */
        public $wpml_chars_count;
        /**
         * WPML_TM_ATE_Models_Job_Create constructor.
         *
         * @param array $args
         *
         * @throws \Auryn\InjectionException
         */
        public function __construct(array $args = array())
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Models_Language
    {
        public $code;
        public $name;
        /**
         * @param string $code
         * @param string $name
         */
        public function __construct($code = \null, $name = \null)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Models_Job_File
    {
        public $content;
        public $name;
        public $type;
        /**
         * WPML_TM_ATE_Models_Job_File constructor.
         *
         * @param array $args
         */
        public function __construct(array $args = array())
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Job_Created
    {
        public $job_id;
        public $rid;
        public $translation_service;
        public $translator_id;
        public $translation_package;
        public $batch_options;
        public $data;
        /**
         * WPML_TM_Job_Created constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
    }
}
namespace WPML\ATE\Proxies {
    class Widget implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        const QUERY_VAR_ATE_WIDGET_SCRIPT = 'wpml-app';
        const SCRIPT_NAME = 'ate-widget';
        public function add_hooks()
        {
        }
        /**
         * @return string|void
         */
        public function get_script()
        {
        }
    }
}
namespace WPML\TM\ATE\AutoTranslate\Endpoint {
    class GetATEJobsToSync implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class ActivateLanguage
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class Languages implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class CheckLanguageSupport
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class ResumeAll implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class AutoTranslate implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    /**
     * It returns number of automatic jobs in progress.
     * It is used as an additional safety mechanism in Translate Everything process.
     * As ATE delivers translations also in the background via the public endpoint,
     * we may end up in the situation that some jobs on JS layer are still marked as in progress
     * and the sync endpoint returns an empty collection. Due to that, we display the counter greater than 0
     * while everything is already completed.
     */
    class CountJobsInProgress implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SyncLock implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SetForPostType
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class EnableATE implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class GetNumberOfPosts
    {
        public function run(\WPML\Collect\Support\Collection $data, \wpdb $wpdb)
        {
        }
    }
    class GetCredits implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class CancelJobs implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\TM\ATE\Log {
    class Storage
    {
        const OPTION_GROUP = 'TM\\ATE\\Log';
        const OPTION_NAME = 'logs';
        const MAX_ENTRIES = 50;
        public static function add(\WPML\TM\ATE\Log\Entry $entry, $avoidDuplication = false)
        {
        }
        /**
         * @param Entry $entry
         */
        public static function remove(\WPML\TM\ATE\Log\Entry $entry)
        {
        }
        /**
         * @return Collection Collection of Entry objects.
         */
        public static function getAll()
        {
        }
        public function getCount() : int
        {
        }
    }
    class EventsTypes
    {
        /** Communication errors */
        const SERVER_ATE = 1;
        const SERVER_AMS = 2;
        const SERVER_XLIFF = 3;
        /** Internal errors */
        const JOB_DOWNLOAD = 10;
        /** Retry  */
        const JOB_RETRY = 20;
        const SITE_REGISTRATION_RETRY = 21;
        /** Sync */
        const JOBS_SYNC = 30;
        public static function getLabel($eventType)
        {
        }
    }
    class Hooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const SUBMENU_HANDLE = 'wpml-tm-ate-log';
        public function __construct(\WPML\TM\ATE\Log\ViewFactory $viewFactory)
        {
        }
        public function add_hooks()
        {
        }
        public function addLogSubmenuPage()
        {
        }
        public function renderPage()
        {
        }
    }
    class Entry
    {
        /**
         * @var int $timestamp The log's creation timestamp.
         */
        public $timestamp = 0;
        /**
         * @see EventsTypes
         *
         * @var int $eventType The event code that triggered the log.
         */
        public $eventType = 0;
        /**
         * @var string $description The details of the log (e.g. exception message).
         */
        public $description = '';
        /**
         * @var int $wpmlJobId [Optional] The WPML Job ID (when applies).
         */
        public $wpmlJobId = 0;
        /**
         * @var int $ateJobId [Optional] The ATE Job ID (when applies).
         */
        public $ateJobId = 0;
        /**
         * @var array $extraData [Optional] Complementary serialized data (e.g. API request/response data).
         */
        public $extraData = [];
        /**
         * @param array $item
         *
         * @return Entry
         */
        public function __construct(array $item = null)
        {
        }
        public static function createForType($eventType, $extraData)
        {
        }
        public static function retryJob($wpmlJobId, $extraData)
        {
        }
        /**
         * @return string
         */
        public function getFormattedDate()
        {
        }
        /**
         * @return string
         */
        public function getExtraDataToString()
        {
        }
    }
    class ViewFactory
    {
        public function create()
        {
        }
    }
    class View
    {
        public function __construct(\WPML\Collect\Support\Collection $logs)
        {
        }
        public function renderPage()
        {
        }
        public function renderTableRow(\WPML\TM\ATE\Log\Entry $entry)
        {
        }
    }
}
namespace WPML\TM\ATE {
    class StatusIcons implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function setSpinningIconOnPageList($default, $postId, $languageCode, $trid, $status)
        {
        }
        public function setSpinningIconInTranslationQueue($default, $job)
        {
        }
        public function getIcon($default, $job)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_ATE_Job
    {
        const ATE_JOB_CREATED = 0;
        const ATE_JOB_IN_PROGRESS = 1;
        const ATE_JOB_TRANSLATED = 6;
        const ATE_JOB_DELIVERING = 7;
        const ATE_JOB_DELIVERED = 8;
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Support_Info
    {
        public function is_simplexml_extension_loaded()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_Support_Info_Filter
    {
        function __construct(\WPML_TM_Support_Info $support_info)
        {
        }
        /**
         * @param array $blocks
         *
         * @return array
         */
        public function filter_blocks(array $blocks)
        {
        }
    }
}
namespace WPML\Support\ATE {
    class Hooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        public function __construct(\WPML\Support\ATE\ViewFactory $viewFactory)
        {
        }
        public function add_hooks()
        {
        }
        public function renderSupportSection()
        {
        }
    }
    class ViewFactory
    {
        public function create()
        {
        }
    }
    class View
    {
        public function __construct(int $logCount, \WPML\TM\ATE\ClonedSites\SecondaryDomains $secondaryDomains)
        {
        }
        public function renderSupportSection()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Support_Info
    {
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function is_suhosin_active()
        {
        }
        public function eval_disabled_by_suhosin()
        {
        }
        public function get_max_execution_time()
        {
        }
        public function get_max_input_vars()
        {
        }
        public function get_php_memory_limit()
        {
        }
        public function get_memory_usage()
        {
        }
        public function get_php_version()
        {
        }
        public function get_wp_memory_limit()
        {
        }
        public function get_wp_max_memory_limit()
        {
        }
        public function get_wp_multisite()
        {
        }
        public function get_wp_version()
        {
        }
        public function is_memory_less_than($reference, $memory)
        {
        }
        public function is_version_less_than($reference, $version)
        {
        }
        public function is_utf8mb4_charset_supported()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Support_Info_UI
    {
        function __construct(\WPML_Support_Info $support_info, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * @return string
         */
        public function show()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Support_Info_UI_Factory
    {
        function create()
        {
        }
    }
}
namespace WPML\Installer {
    class DisableRegisterNow implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
    class AddSiteUrl implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_Installer_Domain_URL
    {
        public function __construct($site_url_in_default_lang)
        {
        }
        public function add_hooks()
        {
        }
        public function get_site_url_in_default_lang()
        {
        }
    }
    class WPML_Installer_Domain_URL_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Installer_Gateway
    {
        public static function get_instance()
        {
        }
        public static function set_instance($instance)
        {
        }
        public function class_exists()
        {
        }
        public function get_site_key($repository_id = 'wpml')
        {
        }
        public function get_ts_client_id($repository_id = 'wpml')
        {
        }
        public function get_registering_user_id($repository_id = 'wpml')
        {
        }
    }
}
namespace WPML\CLI\Core {
    class BootStrap
    {
        const MAIN_COMMAND = 'wpml';
        /**
         * @throws \Exception The exception thrown by \WP_CLI::add_command.
         */
        public function init()
        {
        }
    }
}
namespace WPML\CLI\Core\Commands {
    interface IWPML_Command_Factory
    {
        /**
         * @return ICommand
         */
        public function create();
    }
    interface IWPML_Core extends \WPML\CLI\Core\Commands\IWPML_Command_Factory
    {
    }
    class ClearCacheFactory implements \WPML\CLI\Core\Commands\IWPML_Core
    {
        /**
         * @return ClearCache
         * @throws \WPML\Auryn\InjectionException If it's not possible to create the instance (see \WPML\Auryn\Injector::make).
         */
        public function create()
        {
        }
    }
    interface ICommand
    {
        /**
         * @param string[]             $args
         * @param array<string,string> $assoc_args
         *
         * @return mixed
         */
        public function __invoke($args, $assoc_args);
        /**
         * @return string
         */
        public function get_command();
    }
    class ClearCache implements \WPML\CLI\Core\Commands\ICommand
    {
        public function __construct(\WPML_Cache_Directory $cache_directory)
        {
        }
        /**
         * Clear the WPML cache
         *
         * ## EXAMPLE
         *
         *     wp wpml clear-cache
         *
         * @when wpml_loaded
         *
         * {@inheritDoc}
         */
        public function __invoke($args, $assoc_args)
        {
        }
        /**
         * @return string
         */
        public function get_command()
        {
        }
    }
}
namespace {
    class WPML_TM_Post_Edit_Notices_Factory
    {
        const TEMPLATES_PATH = '/templates/notices/post-edit/';
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice_Action
    {
        /**
         * WPML_Admin_Notice_Action constructor.
         *
         * @param string      $text
         * @param string      $url
         * @param bool        $dismiss
         * @param bool        $hide
         * @param bool|string $display_as_button
         * @param bool        $dismiss_different_text
         */
        public function __construct($text, $url = '#', $dismiss = \false, $hide = \false, $display_as_button = \false, $dismiss_different_text = \true)
        {
        }
        public function get_text()
        {
        }
        public function get_url()
        {
        }
        public function can_dismiss()
        {
        }
        public function can_dismiss_different_text()
        {
        }
        public function can_hide()
        {
        }
        public function must_display_as_button()
        {
        }
        public function set_group_to_dismiss($group_name)
        {
        }
        public function get_group_to_dismiss()
        {
        }
        public function set_js_callback($js_callback)
        {
        }
        public function get_js_callback()
        {
        }
        /**
         * @return mixed
         */
        public function get_link_target()
        {
        }
        /**
         * @param mixed $link_target
         */
        public function set_link_target($link_target)
        {
        }
    }
    class WPML_TM_TS_Instructions_Hooks implements \IWPML_Action
    {
        /**
         * WPML_TM_TS_Instructions_Hooks constructor.
         *
         * @param WPML_TM_TS_Instructions_Notice $notice
         */
        public function __construct(\WPML_TM_TS_Instructions_Notice $notice)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param stdClass $service
         * @param stdClass $project
         * @param array    $icl_translation_projects
         */
        public function display_message($service, $project, array $icl_translation_projects)
        {
        }
        public function add_hooks_on_init()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function dismiss()
        {
        }
    }
    class WPML_TM_TS_Instructions_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return WPML_TM_TS_Instructions_Hooks
         */
        public function create()
        {
        }
    }
    class WPML_TM_TS_Instructions_Notice
    {
        const NOTICE_ID = 'translation-service-instructions';
        const NOTICE_GROUP_ID = 'translation-service-instructions';
        const TEMPLATE = 'translation-service-instructions.twig';
        public function __construct(\WPML_Notices $admin_notices, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * @param stdClass $service
         */
        public function add_notice($service)
        {
        }
        public function remove_notice()
        {
        }
        /**
         * @return bool
         */
        public function exists()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notices
    {
        const NOTICES_OPTION_KEY = 'wpml_notices';
        const DISMISSED_OPTION_KEY = '_wpml_dismissed_notices';
        const USER_DISMISSED_KEY = '_wpml_user_dismissed_notices';
        const NONCE_NAME = 'wpml-notices';
        const DEFAULT_GROUP = 'default';
        /**
         * WPML_Notices constructor.
         *
         * @param WPML_Notice_Render $notice_render
         */
        public function __construct(\WPML_Notice_Render $notice_render)
        {
        }
        public function init_notices()
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return array
         */
        public function get_all_notices()
        {
        }
        /**
         * @param string $id
         * @param string $group
         *
         * @return null|WPML_Notice
         */
        public function get_notice($id, $group = 'default')
        {
        }
        /**
         * @param string $id
         * @param string $text
         * @param string $group
         *
         * @return WPML_Notice
         */
        public function create_notice($id, $text, $group = 'default')
        {
        }
        public function add_notice(\WPML_Notice $notice, $force_update = \false)
        {
        }
        /**
         * @param string $id
         * @param string $text
         * @param string $group
         *
         * @return WPML_Notice
         */
        public function get_new_notice($id, $text, $group = 'default')
        {
        }
        /**
         * @param string $text
         * @param string $url
         * @param bool   $dismiss
         * @param bool   $hide
         * @param bool   $display_as_button
         *
         * @return WPML_Notice_Action
         */
        public function get_new_notice_action($text, $url = '#', $dismiss = \false, $hide = \false, $display_as_button = \false)
        {
        }
        public function save_to_option()
        {
        }
        public function remove_notices()
        {
        }
        public function admin_enqueue_scripts()
        {
        }
        public function admin_notices()
        {
        }
        public function wp_ajax_hide_notice()
        {
        }
        public function wp_ajax_dismiss_notice()
        {
        }
        public function wp_ajax_dismiss_group()
        {
        }
        /**
         * @param string     $notice_group
         * @param string|int $notice_id
         */
        public function remove_notice($notice_group, $notice_id)
        {
        }
        /**
         * @param string $notice_group
         */
        public function remove_notice_group($notice_group)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param bool        $persist
         */
        public function dismiss_notice(\WPML_Notice $notice, $persist = \true)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param bool        $persist
         */
        public function undismiss_notice(\WPML_Notice $notice, $persist = \true)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        public function is_notice_dismissed(\WPML_Notice $notice)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return void
         */
        public function add_admin_notices_action()
        {
        }
    }
}
namespace WPML\Notices\ExportImport {
    class Notice implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        // Cascade of priorities before 10.
        // 7: WPML.
        // 8: WCML.
        // 9: WPML Export and Import.
        const PRIORITY = 7;
        const GROUP = 'wpml-import-notices';
        const NOTICE_CLASSES = ['wpml-import-notice', 'wpml-import-notice-from-wpml'];
        const WPML_IMPORT_URL = 'https://wpml.org/documentation/related-projects/wpml-export-and-import/?utm_source=plugin&utm_medium=gui&utm_campaign=wpml-export-import&utm_term=admin-notice';
        const WCML_URL = 'https://wpml.org/documentation/related-projects/woocommerce-multilingual/?utm_source=plugin&utm_medium=gui&utm_campaign=wcml&utm_term=admin-notice';
        const EXPORT_NOTICES = ['wordpress-export' => '/export.php', 'wp-import-export-export' => '/admin.php?page=wpie-new-export', 'wp-all-export' => '/admin.php?page=pmxe-admin-export', 'woocommerce-export' => '/edit.php?post_type=product&page=product_exporter'];
        const IMPORT_NOTICES = ['wordpress-import' => '/admin.php?import=wordpress', 'wp-import-export-import' => '/admin.php?page=wpie-new-import', 'wp-all-import' => '/admin.php?page=pmxi-admin-import', 'woocommerce-import' => '/edit.php?post_type=product&page=product_importer'];
        public function __construct(\WPML_Notices $wpmlNotices)
        {
        }
        public function add_hooks()
        {
        }
        public function manageNotice()
        {
        }
        public function enforceNoticeStyle()
        {
        }
        /**
         * @return bool
         */
        public static function isOnMigrationPages()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice_Render
    {
        public function render(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return string
         */
        public function get_html(\WPML_Notice $notice)
        {
        }
        public function must_display_notice(\WPML_Notice $notice)
        {
        }
    }
    abstract class WPML_Translation_Jobs_Migration_Notice
    {
        const NOTICE_GROUP_ID = 'translation-jobs';
        const TEMPLATE = 'translation-jobs-migration.twig';
        /**
         * WPML_Translation_Jobs_Migration_Notice constructor.
         *
         * @param \WPML_Notices           $admin_notices    An instance of \WPML_Notices.
         * @param \IWPML_Template_Service $template_service A class implementing \IWPML_Template_Service.
         */
        public function __construct(\WPML_Notices $admin_notices, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * It adds the notice to be shown when conditions meet.
         */
        public function add_notice()
        {
        }
        /**
         * It removes the notice.
         */
        public function remove_notice()
        {
        }
        /**
         * It checks is the notice exists.
         *
         * @return bool
         */
        public function exists()
        {
        }
        /**
         * It gets the definition of the notice's content.
         *
         * @return array
         */
        protected abstract function get_model();
        /**
         * It gets the ID of the notice.
         *
         * @return string
         */
        protected abstract function get_notice_id();
    }
    class WPML_Translation_Jobs_Missing_TP_ID_Migration_Notice extends \WPML_Translation_Jobs_Migration_Notice
    {
        /**
         * It gets the definition of the notice's content.
         *
         * @return array
         */
        protected function get_model()
        {
        }
        /**
         * It gets the ID of the notice.
         *
         * @return string
         */
        protected function get_notice_id()
        {
        }
    }
    class WPML_All_Translation_Jobs_Migration_Notice extends \WPML_Translation_Jobs_Migration_Notice
    {
        /**
         * It gets the definition of the notice's content.
         *
         * @return array
         */
        protected function get_model()
        {
        }
        /**
         * It gets the ID of the notice.
         *
         * @return string
         */
        protected function get_notice_id()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * It creates an instance of WPML_Translation_Jobs_Migration_Notice.
         *
         * @return null|WPML_Translation_Jobs_Migration_Hooks|WPML_TM_Restore_Skipped_Migration
         */
        public function create()
        {
        }
    }
    /**
     * The class adds the hook which is triggered in the moment of Translation Service authorization.
     * It checks if the migration has been skipped due to lack of activated service and if so, it turns on the migration.
     */
    class WPML_TM_Restore_Skipped_Migration implements \IWPML_Action
    {
        /**
         * @param WPML_TM_Jobs_Migration_State $migration_state
         */
        public function __construct(\WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function add_hooks()
        {
        }
        public function restore()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Hooks
    {
        public function __construct(\WPML_Translation_Jobs_Migration_Notice $notice, $ajax_handler, \WPML_Translation_Jobs_Migration_Repository $jobs_migration_repository, \WPML_Upgrade_Schema $schema, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function add_hooks()
        {
        }
        public function add_hooks_on_init()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @return bool
         */
        public function lock_tm_ui()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Repository
    {
        public function __construct(\WPML_TM_Jobs_Repository $jobs_repository, $all_jobs = \false)
        {
        }
        public function get()
        {
        }
        public function get_count()
        {
        }
    }
    class WPML_TM_Translation_Jobs_Fix_Summary_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TM_Translation_Jobs_Fix_Summary
         */
        public function create()
        {
        }
    }
    class WPML_TM_Troubleshooting_Fix_Translation_Jobs_TP_ID
    {
        const AJAX_ACTION = 'wpml-fix-translation-jobs-tp-id';
        public function __construct(\WPML_Translation_Jobs_Migration $jobs_migration, \WPML_TM_Jobs_Repository $jobs_repository)
        {
        }
        public function add_hooks()
        {
        }
        public function fix_tp_id_ajax()
        {
        }
        public function enqueue_scripts($hook)
        {
        }
        public function render_troubleshooting_section()
        {
        }
    }
    class WPML_TM_Translation_Jobs_Fix_Summary_Notice extends \WPML_Translation_Jobs_Migration_Notice
    {
        protected function get_model()
        {
        }
        protected function get_notice_id()
        {
        }
    }
    class WPML_Translation_Jobs_Fixing_Migration_Ajax
    {
        const ACTION = 'wpml_translation_jobs_migration';
        const JOBS_MIGRATED_PER_REQUEST = 100;
        const PAGINATION_OPTION = 'wpml_translation_jobs_migration_processed';
        public function __construct(\WPML_Translation_Jobs_Migration $jobs_migration, \WPML_Translation_Jobs_Migration_Repository $jobs_repository, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function run_migration()
        {
        }
    }
    class WPML_TM_Translation_Jobs_Fix_Summary
    {
        const INVALID_JOBS_SYNCED_KEY = 'wpml_tm_migration_invalid_jobs_already_synced';
        public function __construct(\WPML_TM_Translation_Jobs_Fix_Summary_Notice $notice, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function add_hooks()
        {
        }
        public function display_summary()
        {
        }
        public function mark_invalid_jobs_as_synced()
        {
        }
    }
    class WPML_TM_Jobs_Migration_State
    {
        const MIGRATION_DONE_KEY = 'wpml-tm-translation-jobs-migration';
        const FIXING_MIGRATION_STATE_KEY = 'wpml-tm-all-translation-jobs-migration';
        const MIGRATION_SKIPPED = 'wpml-tm-translation-jobs-migration-skipped';
        /**
         * The fixing migration has already been run but it contained errors
         */
        const FIRST_MIGRATION_FIX_HAS_RUN = 1;
        /**
         * We've already cleaned logs of the first fixing migration and are ready to run another this time flawless version
         */
        const READY_TO_RUN_SECOND_MIGRATION_FIX = 2;
        /**
         * The final flawless fixing migration has been run
         */
        const SECOND_MIGRATION_FIX_HAS_RUN = 3;
        /**
         * Checks if the original migration has been finished
         *
         * @return bool
         */
        public function is_migrated()
        {
        }
        /**
         * Checks if the fixing migration ( migration which fixes the flaws of the original migration ) has been run
         *
         * @return bool
         */
        public function is_fixing_migration_done()
        {
        }
        public function mark_migration_as_done()
        {
        }
        public function mark_fixing_migration_as_done()
        {
        }
        /**
         * @param bool $flag
         */
        public function skip_migration($flag = \true)
        {
        }
        /**
         * @return bool
         */
        public function is_skipped()
        {
        }
    }
    class WPML_TM_Troubleshooting_Fix_Translation_Jobs_TP_ID_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Translation_Jobs_Migration_Ajax
    {
        const ACTION = 'wpml_translation_jobs_migration';
        const JOBS_MIGRATED_PER_REQUEST = 100;
        public function __construct(\WPML_Translation_Jobs_Migration $jobs_migration, \WPML_Translation_Jobs_Migration_Repository $jobs_repository, \WPML_TM_Jobs_Migration_State $migration_state)
        {
        }
        public function run_migration()
        {
        }
    }
    class WPML_Translation_Jobs_Migration
    {
        const MIGRATION_FIX_LOG_KEY = 'wpml_fixing_migration_log';
        public function __construct(\WPML_Translation_Jobs_Migration_Repository $jobs_repository, \WPML_TM_CMS_ID $cms_id_builder, \wpdb $wpdb, \WPML_TP_Jobs_API $jobs_api)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity[] $jobs
         * @param bool                      $recover_status
         *
         * @throws WPML_TP_API_Exception
         */
        public function migrate_jobs(array $jobs, $recover_status = \false)
        {
        }
    }
}
namespace WPML\Notices {
    class DismissNotices implements \IWPML_Backend_Action
    {
        const OPTION = 'wpml_dismiss_notice';
        const CSS_CLASS = 'wpml_dismiss_notice';
        public function add_hooks()
        {
        }
        public function toggleDismiss()
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         */
        public function isDismissed($id)
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function renderCheckbox($id)
        {
        }
    }
}
namespace {
    class WPML_Notice_Show_On_Dashboard_And_WPML_Pages
    {
        public static function is_on_page()
        {
        }
    }
    class WPML_TM_Post_Edit_Notices
    {
        const TEMPLATE_TRANSLATION_IN_PROGRESS = 'translation-in-progress.twig';
        const TEMPLATE_EDIT_ORIGINAL_TRANSLATION_IN_PROGRESS = 'edit-original-translation-in-progress.twig';
        const TEMPLATE_USE_PREFERABLY_TM_DASHBOARD = 'use-preferably-tm-dashboard.twig';
        const TEMPLATE_USE_PREFERABLY_TE = 'use-preferably-translation-editor.twig';
        const DO_NOT_SHOW_AGAIN_EDIT_ORIGINAL_TRANSLATION_IN_PROGRESS_ACTION = 'wpml_dismiss_post_edit_original_te_notice';
        const DO_NOT_SHOW_AGAIN_USE_PREFERABLY_TE_ACTION = 'wpml_dismiss_post_edit_te_notice';
        const DISPLAY_LIMIT_TRANSLATIONS_IN_PROGRESS = 5;
        /**
         * @param WPML_Post_Status                   $post_status
         * @param SitePress                          $sitepress
         * @param IWPML_Template_Service             $template_render
         * @param WPML_Super_Globals_Validation      $super_globals
         * @param WPML_TM_Translation_Status_Display $status_display
         * @param WPML_Translation_Element_Factory   $element_factory
         */
        public function __construct(\WPML_Post_Status $post_status, \SitePress $sitepress, \IWPML_Template_Service $template_render, \WPML_Super_Globals_Validation $super_globals, \WPML_TM_Translation_Status_Display $status_display, \WPML_Translation_Element_Factory $element_factory, \WPML_TM_ATE $tm_ate, \WPML_TM_Rest_Job_Translator_Name $translator_name, \WPML_TM_Rest_Jobs_Translation_Service $translation_service)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_assets()
        {
        }
        public function display_notices()
        {
        }
        public function do_not_display_it_again_to_user()
        {
        }
        public function do_not_display_it_again()
        {
        }
    }
    /**
     * Class for handling a unique ID of the site.
     *
     * @author OnTheGo Systems
     */
    class WPML_Site_ID
    {
        /**
         * The name prefix of the option where the ID is stored.
         */
        const SITE_ID_KEY = 'WPML_SITE_ID';
        /**
         * The default scope.
         */
        const SITE_SCOPES_GLOBAL = 'global';
        /**
         * Read and, if needed, generate the site ID based on the scope.
         *
         * @param string $scope      Defaults to "global".
         *                           Use a different value when the ID is used for specific scopes.
         *
         * @param bool   $create_new Forces the creation of a new ID.
         *
         * @return string|null The generated/stored ID or null if it wasn't possible to generate/store the value.
         */
        public function get_site_id($scope = self::SITE_SCOPES_GLOBAL, $create_new = \false)
        {
        }
    }
}
namespace WPML\TaxonomyTermTranslation {
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        const KEY_SKIP_FILTERS = 'wpml_skip_filters';
        /**
         * WHooks constructor.
         *
         * @param \SitePress $sitepress
         * @param \wpdb      $wpdb
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function remove_hooks()
        {
        }
        /**
         * @param array $args
         *
         * @return bool
         */
        public static function shouldSkip($args)
        {
        }
        /**
         * @param int|false $postId
         */
        public function beforeSyncCustomTermFieldsTranslations($postId)
        {
        }
        /**
         * @param int|false $postId
         */
        public function syncCustomTermFieldsTranslations($postId)
        {
        }
    }
}
namespace {
    /**
     * WPML_Term_Actions Class
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Term_Actions extends \WPML_Full_Translation_API
    {
        /**
         * Handle AJAX request to generate unique slug.
         */
        public function generate_unique_term_slug_ajax_handler()
        {
        }
        /**
         * @param int    $tt_id    Taxonomy Term ID of the saved Term
         * @param string $taxonomy Taxonomy of the saved Term
         */
        function save_term_actions($tt_id, $taxonomy)
        {
        }
        /**
         * @param int $term_id
         * @param int $tt_id
         */
        public function sync_term_meta($term_id, $tt_id)
        {
        }
        /**
         * @param int    $term_taxonomy_id term taxonomy id of the deleted term
         * @param string $taxonomy_name    taxonomy of the deleted term
         */
        function delete_term_actions($term_taxonomy_id, $taxonomy_name)
        {
        }
        /**
         * @param int    $trid
         * @param string $deleted_language_code
         */
        public function set_new_original_term($trid, $deleted_language_code)
        {
        }
        /**
         * Whether the term is original or not, there should be a post with same lang code as this term.
         * If the term is original, the post translation with same language code as term should be an unoriginal post (translation) because the original post already has its related term relation deleted.
         *
         * @param stdClass $term
         * @param array $postTranslations
         *
         * @return bool
         *
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wpmldev-673
         */
        public function isTranslatedTermValidForRelationDeletion($term, $postTranslations)
        {
        }
        /**
         * This action is hooked to the 'deleted_term_relationships' hook.
         * It removes terms from translated posts as soon as they are removed from the original post.
         * It only fires, if the setting 'sync_post_taxonomies' is activated.
         *
         * @param int $post_id ID of the post the deleted terms were attached to
         * @param array $delete_terms Array of terms ids that were deleted from the post.
         * @param string $taxonomy
         */
        public function deleted_term_relationships($post_id, $delete_terms, $taxonomy)
        {
        }
        /**
         * Copies taxonomy terms from original posts to their translation, if the translations of these terms exist
         * and the option 'sync_post_taxonomies' is set.
         *
         * @param int $object_id ID of the object, that terms have just been added to.
         */
        public function added_term_relationships($object_id)
        {
        }
        /**
         * This function tries to determine the terms language from the HTTP Referer. This is used in case of ajax actions
         * that save the term.
         *
         * @param string $taxonomy
         * @param string $post_action
         *
         * @return null|string
         */
        public function get_term_lang_ajax($taxonomy, $post_action)
        {
        }
    }
    /**
     * @since      3.1.8.4
     *
     * Class WPML_Term_Language_Synchronization
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Term_Language_Synchronization extends \WPML_WPDB_And_SP_User
    {
        /**
         * @param SitePress               $sitepress
         * @param WPML_Terms_Translations $term_utils
         * @param string                  $taxonomy
         */
        public function __construct(&$sitepress, &$term_utils, $taxonomy)
        {
        }
        /**
         * Wrapper for the two database actions performed by this object.
         * First those terms are created that lack translations and then following that,
         * the assignment of posts and languages is corrected, taking advantage of the newly created terms
         * and resulting in a state of no conflicts in the form of a post language being different from
         * an assigned terms language, remaining.
         */
        public function set_translated()
        {
        }
        /**
         * Helper function for the installation process,
         * finds all terms missing an entry in icl_translations and then
         * assigns them the default language.
         */
        public function set_initial_term_language()
        {
        }
    }
    class WPML_Sync_Term_Meta_Action
    {
        /**
         * WPML_Sync_Term_Meta_Action constructor.
         *
         * @param SitePress $sitepress
         * @param int       $term_taxonomy_id just saved term's term_taxonomy_id
         * @param bool      $is_new_term
         */
        public function __construct($sitepress, $term_taxonomy_id, $is_new_term = \false)
        {
        }
        /**
         * Copies to be synchronized term meta data to the translations of the term.
         */
        public function run()
        {
        }
    }
}
namespace WPML\TaxonomyTermTranslation {
    class AutoSync implements \IWPML_Backend_Action, \IWPML_REST_Action, \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_Update_Term_Count
    {
        const CACHE_GROUP = __CLASS__;
        /**
         * WPML_Update_Term_Count constructor.
         *
         * @param WPML_WP_API $wp_api
         */
        public function __construct($wp_api)
        {
        }
        /**
         * Triggers an update to the term count of all terms associated with the
         * input post_id
         *
         * @param int $post_id
         */
        public function update_for_post($post_id)
        {
        }
    }
    /**
     * Class WPML_Taxonomy_Translation_Help_Notice
     */
    class WPML_Taxonomy_Translation_Help_Notice
    {
        const NOTICE_GROUP = 'taxonomy-term-help-notices';
        /**
         * WPML_Taxonomy_Translation_Help_Notice constructor.
         *
         * @param WPML_Notices $wpml_admin_notices
         * @param SitePress    $sitepress
         */
        public function __construct(\WPML_Notices $wpml_admin_notices, \SitePress $sitepress)
        {
        }
        public function __sleep()
        {
        }
        public function __wakeup()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return bool
         */
        public function should_display_help_notice()
        {
        }
        /**
         * Create and add notice.
         */
        public function add_help_notice()
        {
        }
        /**
         * @param WPML_Notice $notice
         */
        public function set_notice(\WPML_Notice $notice)
        {
        }
        /**
         * @return WPML_Notice
         */
        public function get_notice()
        {
        }
        /**
         * Enqueue JS callback script.
         */
        public function enqueue_scripts()
        {
        }
    }
    class WPML_TM_Page
    {
        public static function is_tm_dashboard()
        {
        }
        public static function is_tm_translators()
        {
        }
        public static function is_settings()
        {
        }
        public static function is_translation_queue()
        {
        }
        public static function is_translation_editor_page()
        {
        }
        public static function is_job_list()
        {
        }
        public static function is_dashboard()
        {
        }
        public static function is_notifications_page()
        {
        }
        public static function get_translators_url($params = array())
        {
        }
    }
}
namespace WPML\BlockEditor\Blocks {
    class LanguageSwitcher
    {
        const BLOCK_LANGUAGE_SWITCHER = 'wpml/language-switcher';
        const BLOCK_NAVIGATION_LANGUAGE_SWITCHER = 'wpml/navigation-language-switcher';
        /**
         * @param Render $render
         */
        public function __construct(\WPML\BlockEditor\Blocks\LanguageSwitcher\Render $render)
        {
        }
        /**
         * Returns the data that needs to be localized in the JS script.
         * @return array
         */
        public function register()
        {
        }
        public function render()
        {
        }
    }
}
namespace WPML\BlockEditor\Blocks\LanguageSwitcher {
    class Repository
    {
        public function __construct(\SitePress $sitepress, \WPML_LS_Dependencies_Factory $dependencies = null)
        {
        }
        /**
         * @return LanguageSwitcher
         */
        public function getCurrentLanguageSwitcher()
        {
        }
    }
    class Parser
    {
        const PATH_LANGUAGE_ITEM = '//*[@data-wpml="language-item"]';
        const PATH_CURRENT_LANGUAGE_ITEM = '//*[@data-wpml="current-language-item"]';
        const PATH_ITEM_LINK = '/*[@data-wpml="link"]';
        const PATH_ITEM_LABEL = '/*[@data-wpml="label"]';
        const PATH_ITEM_CODE_LABEL_TYPE = '/*[@data-wpml-label-type="code"]';
        const PATH_ITEM_CURRENT_LABEL_TYPE = '/*[@data-wpml-label-type="current"]';
        const PATH_ITEM_BOTH_LABEL_TYPE = '/*[@data-wpml-label-type="both"]';
        const PATH_ITEM_NATIVE_LABEL_TYPE = '/*[@data-wpml-label-type="native"]';
        const PATH_ITEM_FLAG_URL = '/*[@data-wpml="flag-url"]';
        const PATH_LANGUAGE_ITEM_CONTAINER = '(//*[@data-wpml="language-item"])[last()]/..';
        const PATH_CONTAINER_TEMPLATE = '(%s)[last()]/..';
        const LABEL_TYPES = [\WPML\BlockEditor\Blocks\LanguageSwitcher\Model\Label\CurrentLanguage::class, \WPML\BlockEditor\Blocks\LanguageSwitcher\Model\Label\LanguageCode::class, \WPML\BlockEditor\Blocks\LanguageSwitcher\Model\Label\NativeLanguage::class, \WPML\BlockEditor\Blocks\LanguageSwitcher\Model\Label\BothLanguages::class];
        /**
         * @param string $blockHTML
         *
         * @return null|LanguageSwitcherTemplate
         */
        public function parse($blockAttrs, $blockHTML, $sourceBlock, $context)
        {
        }
    }
}
namespace WPML\BlockEditor\Blocks\LanguageSwitcher\Model {
    class LanguageItemTemplate
    {
        /**
         * @param \DOMNode $template
         * @param \DOMNode $container
         * @param ?LabelTemplateInterface $labelTemplate
         */
        public function __construct(\DOMNode $template, \DOMNode $container, \WPML\BlockEditor\Blocks\LanguageSwitcher\Model\Label\LabelTemplateInterface $labelTemplate = null)
        {
        }
        /**
         * @return ?\DOMNode
         */
        public function getTemplate()
        {
        }
        /**
         * @return ?\DOMNode
         */
        public function getContainer()
        {
        }
        /**
         * @return ?LabelTemplateInterface
         */
        public function getLabelTemplate()
        {
        }
    }
    class LanguageItem
    {
        /**
         * @param string $displayName
         * @param string $nativeName
         * @param string $code
         * @param string $url
         * @param string $flagUrl
         * @param string $flagTitle
         * @param string $flagAlt
         */
        public function __construct($displayName, $nativeName, $code, $url, $flagUrl, $flagTitle, $flagAlt)
        {
        }
        /**
         * @return string
         */
        public function getDisplayName()
        {
        }
        /**
         * @return string
         */
        public function getCode()
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @return string
         */
        public function getFlagUrl()
        {
        }
        /**
         * @return string
         */
        public function getNativeName()
        {
        }
        /**
         * @return string
         */
        public function getFlagTitle()
        {
        }
        /**
         * @return string
         */
        public function getFlagAlt()
        {
        }
    }
    class LanguageSwitcherTemplate
    {
        /**
         * @param LanguageItemTemplate $languageItemTemplate
         * @param LanguageItemTemplate $currentLanguageItemTemplate
         * @param \DOMDocument $DOMDocument
         */
        public function __construct(\WPML\BlockEditor\Blocks\LanguageSwitcher\Model\LanguageItemTemplate $languageItemTemplate, \WPML\BlockEditor\Blocks\LanguageSwitcher\Model\LanguageItemTemplate $currentLanguageItemTemplate, \DOMDocument $DOMDocument)
        {
        }
        /**
         * @return LanguageItemTemplate
         */
        public function getLanguageItemTemplate()
        {
        }
        /**
         * @return LanguageItemTemplate
         */
        public function getCurrentLanguageItemTemplate()
        {
        }
        /**
         * @return \DOMXPath
         */
        public function getDOMXPath()
        {
        }
        /**
         * @return \DOMDocument
         */
        public function getDOMDocument()
        {
        }
    }
}
namespace WPML\BlockEditor\Blocks\LanguageSwitcher\Model\Label {
    interface LabelTemplateInterface
    {
        /**
         * @param \DOMXPath $domXPath
         * @param $prefix
         * @return boolean
         */
        public function matchesXPath(\DOMXPath $domXPath, $prefix);
        /**
         * @param LanguageItem $languageItem
         * @return string
         */
        public function getDisplayName(\WPML\BlockEditor\Blocks\LanguageSwitcher\Model\LanguageItem $languageItem);
    }
    class LanguageCode implements \WPML\BlockEditor\Blocks\LanguageSwitcher\Model\Label\LabelTemplateInterface
    {
        const XPATH_LOCATOR = '//*[@data-wpml-label-type="code"]';
        public function matchesXPath(\DOMXPath $domXPath, $prefix)
        {
        }
        public function getDisplayName(\WPML\BlockEditor\Blocks\LanguageSwitcher\Model\LanguageItem $languageItem)
        {
        }
    }
    class CurrentLanguage implements \WPML\BlockEditor\Blocks\LanguageSwitcher\Model\Label\LabelTemplateInterface
    {
        const XPATH_LOCATOR = '//*[@data-wpml-label-type="current"]';
        public function matchesXPath(\DOMXPath $domXPath, $prefix)
        {
        }
        public function getDisplayName(\WPML\BlockEditor\Blocks\LanguageSwitcher\Model\LanguageItem $languageItem)
        {
        }
    }
    class NativeLanguage implements \WPML\BlockEditor\Blocks\LanguageSwitcher\Model\Label\LabelTemplateInterface
    {
        const XPATH_LOCATOR = '//*[@data-wpml-label-type="native"]';
        public function matchesXPath(\DOMXPath $domXPath, $prefix)
        {
        }
        public function getDisplayName(\WPML\BlockEditor\Blocks\LanguageSwitcher\Model\LanguageItem $languageItem)
        {
        }
    }
    class BothLanguages implements \WPML\BlockEditor\Blocks\LanguageSwitcher\Model\Label\LabelTemplateInterface
    {
        const XPATH_LOCATOR = '//*[@data-wpml-label-type="both"]';
        public function matchesXPath(\DOMXPath $domXPath, $prefix)
        {
        }
        public function getDisplayName(\WPML\BlockEditor\Blocks\LanguageSwitcher\Model\LanguageItem $languageItem)
        {
        }
    }
}
namespace WPML\BlockEditor\Blocks\LanguageSwitcher\Model {
    class LanguageSwitcher
    {
        /**
         * @param string $currentLanguageItem
         * @param LanguageItem[] $languageItems
         */
        public function __construct($currentLanguageCode, array $languageItems)
        {
        }
        /**
         * @return LanguageItem[]
         */
        public function getLanguageItems()
        {
        }
        /**
         * @return null|LanguageItem
         */
        public function getCurrentLanguageItem()
        {
        }
        /**
         * @return LanguageItem[]
         */
        public function getAlternativeLanguageItems()
        {
        }
        /**
         * @return string
         */
        public function getCurrentLanguageCode()
        {
        }
    }
}
namespace WPML\BlockEditor\Blocks\LanguageSwitcher {
    class Render
    {
        const COLOR_CLASSNAMES_STRING = 'has-text-color has-%s-color';
        const COLOR_STYLE_STRING = 'color:%s;';
        const BACKGROUND_CLASSNAMES_STRING = 'has-background has-%s-background-color';
        const BACKGROUND_STYLE_STRING = 'background-color:%s;';
        public function __construct(\WPML\BlockEditor\Blocks\LanguageSwitcher\Parser $parser, \WPML\BlockEditor\Blocks\LanguageSwitcher\Repository $repository)
        {
        }
        /**
         * @param string $savedHTML
         * @param string $source_block
         * @param \WP_Block $parent_block
         *
         * @return string
         */
        public function render_block($blockAttrs, $savedHTML, $parentBlock)
        {
        }
    }
}
namespace WPML\BlockEditor {
    class Loader implements \IWPML_Backend_Action, \IWPML_REST_Action
    {
        const SCRIPT_NAME = 'wpml-blocks';
        public function add_hooks()
        {
        }
        /**
         * @param array[] $block_categories
         *
         * @return mixed
         */
        public function registerCategory($block_categories)
        {
        }
        /**
         * Register blocks that need server side render.
         */
        public function registerBlocks()
        {
        }
        /**
         * @return void
         */
        public function enqueueBlockAssets()
        {
        }
        public function enqueueBlockStyles()
        {
        }
        /**
         * We inherit the WP navigation block styles while rendering our Language Switcher Block,
         * so when there's no navigation block is rendered, we still need to enqueue the wp-block-navigation styles so that.,
         * the Language Switcher Block renders properly.
         *
         * @return void
         * @see wpmldev-2422
         * @see wpmldev-2491
         *
         */
        public function maybeEnqueueNavigationBlockStyles()
        {
        }
        /**
         * @return string[]
         */
        public function getEditorDependencies()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Block_Editor_Helper
     */
    class WPML_Block_Editor_Helper
    {
        /**
         * Check if Block Editor is active.
         * Must only be used after plugins_loaded action is fired.
         *
         * @return bool
         */
        public static function is_active()
        {
        }
        /**
         * Check if it is admin page to edit any type of post with Block Editor.
         * Must be used not earlier than plugins_loaded action fired.
         *
         * @return bool
         */
        public static function is_edit_post()
        {
        }
        /**
         * Check if Classic Editor plugin is active.
         *
         * @return bool
         */
        public static function is_classic_editor_plugin_active()
        {
        }
        public static function is_block_editor($current_screen)
        {
        }
    }
    class WPML_Translation_Proxy_API
    {
        public function get_current_service_name()
        {
        }
        public function has_preferred_translation_service()
        {
        }
    }
    class WPML_Set_Language extends \WPML_Full_Translation_API
    {
        /**
         * @param int           $el_id the element's ID (for terms we use the `term_taxonomy_id`)
         * @param string        $el_type
         * @param int|bool|null $trid Trid the element is to be assigned to. Input that is == false will cause the term to
         *                            be assigned a new trid and potential translation relations to/from it to disappear.
         * @param string        $language_code
         * @param null|string   $src_language_code
         * @param bool          $check_duplicates
         * @param bool          $check_null
         *
         * @return bool|int|null|string
         */
        public function set($el_id, $el_type, $trid, $language_code, $src_language_code = \null, $check_duplicates = \true, $check_null = \false)
        {
        }
    }
    /**
     * Class WPML_URL_Converter_User
     *
     * @since 3.2.3
     */
    abstract class WPML_URL_Converter_User
    {
        /** @var  WPML_URL_Converter */
        protected $url_converter;
        /**
         * @param \WPML_URL_Converter $url_converter
         */
        public function __construct(&$url_converter)
        {
        }
    }
}
namespace WPML\TM\Container {
    class Config
    {
        public static function getDelegated()
        {
        }
        public static function getSharedClasses()
        {
        }
    }
}
namespace WPML\Container {
    class Config
    {
        public static function getSharedInstances()
        {
        }
        public static function getSharedClasses()
        {
        }
        public static function getAliases()
        {
        }
        public static function getDelegated()
        {
        }
    }
    class Container
    {
        /**
         * @return Container
         */
        public static function get_instance()
        {
        }
        /**
         * class names or instances that should be shared.
         * Shared means that only one instance is ever created when calling the make function.
         *
         * @param array $names_or_instances
         *
         * @throws \WPML\Auryn\ConfigException
         */
        public static function share(array $names_or_instances)
        {
        }
        /**
         * This allows to define aliases classes to be used in place of type hints.
         * e.g. [
         *          // generic => specific
         *          'wpdb' => 'QM_DB',
         *      ]
         *
         * @param array $aliases
         *
         * @throws \WPML\Auryn\ConfigException
         */
        public static function alias(array $aliases)
        {
        }
        /**
         * This allows to delegate the object instantiation to a factory.
         * It can be any kind of callable (class or function).
         *
         * @param array $delegated [ $class_name => $instantiator ]
         *
         * @throws \WPML\Auryn\ConfigException
         */
        public static function delegate(array $delegated)
        {
        }
        /**
         * Make returns a new instance otherwise returns a shared instance if the
         * class_name or an instance is set as shared using the share function
         *
         * @param string $class_name
         * @param array  $args
         *
         * @return mixed
         * @throws \WPML\Auryn\InjectionException
         */
        public static function make($class_name, array $args = array())
        {
        }
        /**
         * Invoke the specified callable or class::method string, provisioning dependencies along the way
         *
         * @param mixed $callableOrMethodStr A valid PHP callable or a provisionable ClassName::methodName string
         * @param array $args Optional array specifying params with which to invoke the provisioned callable
         * @throws \WPML\Auryn\InjectionException
         * @return mixed Returns the invocation result returned from calling the generated executable
         */
        public static function execute($callableOrMethodStr, array $args = [])
        {
        }
    }
}
namespace WPML\Options {
    class Reset implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Multilingual_Options
     */
    class WPML_Multilingual_Options
    {
        /**
         * WPML_Multilingual_Options constructor.
         *
         * @param SitePress                              $sitepress
         * @param WPML_Multilingual_Options_Array_Helper $array_helper
         * @param WPML_Multilingual_Options_Utils        $utils
         */
        public function __construct(\SitePress $sitepress, \WPML_Multilingual_Options_Array_Helper $array_helper, \WPML_Multilingual_Options_Utils $utils)
        {
        }
        /**
         * @param string $new_code         New WPML default language code
         * @param string $previous_default Previous WPML default language code
         */
        public function default_language_changed_action($new_code, $previous_default)
        {
        }
        /**
         * @param string $option_name
         */
        public function multilingual_options_action($option_name)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param mixed  $value
         * @param string $option_name
         *
         * @return mixed
         */
        public function pre_option_filter($value, $option_name)
        {
        }
        /**
         * @param array<mixed>|mixed $new_value
         * @param array<mixed>|mixed $old_value
         * @param string $option_name
         *
         * @return array
         */
        public function pre_update_option_filter($new_value, $old_value, $option_name)
        {
        }
    }
    /**
     * Class WPML_Multilingual_Options_Array_Helper
     */
    class WPML_Multilingual_Options_Array_Helper
    {
        /**
         * @param array $value1
         * @param array $value2
         *
         * @return array
         */
        public function array_diff_recursive(array $value1, array $value2)
        {
        }
        /**
         * @param array $target
         * @param array $source
         *
         * @return array
         */
        public function recursive_merge(array $target, array $source)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_WP_Option
    {
        public abstract function get_key();
        public abstract function get_default();
        public function get()
        {
        }
        public function set($value, $autoload = \true)
        {
        }
    }
    /**
     * Class WPML_Multilingual_Options_Utils
     */
    class WPML_Multilingual_Options_Utils
    {
        /**
         * WPML_Multilingual_Options_Utils constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param string $option_name
         * @param mixed  $default
         *
         * @return mixed|null
         */
        public function get_option_without_filtering($option_name, $default = \null)
        {
        }
    }
}
namespace WPML\TranslationMode\Endpoint {
    class SetTranslateEverything implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\Core {
    /**
     * Class LanguageNegotiation
     * @package WPML\Core
     *
     * @method static callable|void saveMode( ...$mode ) - int|string->void
     *
     * @method static int getMode()
     *
     * @method static string getModeAsString( $mode = null )
     *
     * @method static callable|void saveDomains( ...$domains ) - array->void
     *
     * @method static array getDomains()
     */
    class LanguageNegotiation
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const DIRECTORY = 1;
        const DOMAIN = 2;
        const PARAMETER = 3;
        const DIRECTORY_STRING = 'directory';
        const DOMAIN_STRING = 'domain';
        const PARAMETER_STRING = 'parameter';
        /**
         * @ignore
         */
        public static function init()
        {
        }
    }
}
namespace {
    class WPML_WP_Cron_Check
    {
        const TRANSIENT_NAME = 'wpml_cron_check';
        public function __construct(\WPML_PHP_Functions $php_functions)
        {
        }
        /** @return bool */
        public function verify()
        {
        }
        /** @return bool */
        public function is_doing_cron()
        {
        }
    }
    class WPML_TM_Array_Search
    {
        /**
         * @param array $data
         *
         * @return $this
         */
        public function set_data($data)
        {
        }
        /**
         * @param array $args
         *
         * @return $this
         */
        public function set_where($args)
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
    }
    class WPML_TM_Troubleshooting_Reset_Pro_Trans_Config extends \WPML_TM_AJAX_Factory_Obsolete
    {
        const SCRIPT_HANDLE = 'wpml_reset_pro_trans_config';
        /**
         * WPML_TM_Troubleshooting_Clear_TS constructor.
         *
         * @param SitePress                  $sitepress SitePress object.
         * @param WPML_Translation_Proxy_API $translation_proxy Translation Proxy service.
         * @param WPML_WP_API                $wpml_wp_api WPML WordPress API wrapper.
         * @param wpdb                       $wpdb Wpdb Object to perform DB queries.
         */
        public function __construct(&$sitepress, &$translation_proxy, &$wpml_wp_api, &$wpdb)
        {
        }
        /**
         * Loading actions.
         */
        public function load_action()
        {
        }
        /**
         * Registering WP scripts.
         */
        public function register_resources()
        {
        }
        /**
         * Enqueue WordPress resources.
         *
         * @param string $hook_suffix Hook suffix.
         */
        public function enqueue_resources($hook_suffix)
        {
        }
        /**
         * Rendering user interface.
         */
        public function render_ui()
        {
        }
        /**
         * Resetting professional translation configuration action.
         *
         * @return array|null
         */
        public function reset_pro_translation_configuration_action()
        {
        }
        /**
         * Implementation of core class functionality - resetting professional translation configuration.
         *
         * @return string
         */
        public function reset_pro_translation_configuration()
        {
        }
    }
}
namespace WPML\TM\Troubleshooting\SynchronizeSourceIdOfATEJobs {
    class TriggerSynchronization implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const ACTION_ID = 'wpml-tm-ate-source-id-migration';
        /**
         * @param CommandsStatus $commandStatus
         */
        public function __construct(\WPML\Upgrade\CommandsStatus $commandStatus)
        {
        }
        public function add_hooks()
        {
        }
        public function displayButton()
        {
        }
        public function enqueueScripts($hook)
        {
        }
        public function clearExecutedStateToForceUpgrade()
        {
        }
    }
}
namespace WPML\TM\Troubleshooting {
    class ResetPreferredTranslationService implements \IWPML_Backend_Action
    {
        const ACTION_ID = 'wpml-tm-reset-preferred-translation-service';
        public function add_hooks()
        {
        }
        public function displayButton()
        {
        }
        public function resetAndFetchPreferredTS()
        {
        }
        public function enqueueScripts($page)
        {
        }
    }
}
namespace {
    class WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI_Factory
    {
        /**
         * Creates WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI instance
         *
         * @return WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI
         */
        public function create()
        {
        }
    }
    class WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI
    {
        const TROUBLESHOOTING_RESET_PRO_TRANS_TEMPLATE = 'reset-pro-trans-config.twig';
        /**
         * WPML_TM_Troubleshooting_Reset_Pro_Trans_Config_UI constructor.
         *
         * @param IWPML_Template_Service $template_service WPML_Twig_Template twig service.
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /**
         * Returns of template service render result.
         *
         * @return string
         */
        public function show()
        {
        }
    }
    class WPML_Config_Display_As_Translated
    {
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4859
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4941
         *
         * @param array $config
         *
         * @return array
         */
        public static function merge_to_translate_mode($config)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Log_UI
    {
        function __construct(\WPML_Config_Update_Log $log, \IWPML_Template_Service $template_service)
        {
        }
        /**
         * @return string
         */
        public function show()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Log_Factory
    {
        function create_log()
        {
        }
        function create_ui()
        {
        }
        function create_notice()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Log_Notice
    {
        const NOTICE_ERROR_GROUP = 'wpml-config-update';
        const NOTICE_ERROR_ID = 'wpml-config-update-error';
        public function __construct(\WPML_Log $log)
        {
        }
        public function add_hooks()
        {
        }
        public function refresh_notices()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_XML_Transform
    {
        public function get($source, $get_attributes = \true);
    }
    class WPML_XML2Array implements \WPML_XML_Transform
    {
        public function get($contents, $get_attributes = \true)
        {
        }
    }
    class WPML_Config_Built_With_Page_Builders extends \WPML_WP_Option implements \IWPML_Action, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        const CONFIG_KEY = 'built-with-page-builder';
        public function create()
        {
        }
        public function get_key()
        {
        }
        public function get_default()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $config_data
         *
         * @return array
         */
        public function wpml_config_filter($config_data)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Validate
    {
        function __construct($path_to_xsd = \null)
        {
        }
        /**
         * @return \LibXMLError[]
         */
        public function get_errors()
        {
        }
        /**
         * @param string $file_full_path
         *
         * @return bool
         */
        function from_file($file_full_path)
        {
        }
        /**
         * @param string $xml
         *
         * @return bool
         */
        function from_string($xml)
        {
        }
    }
    class WPML_Config
    {
        const PATH_TO_XSD = \WPML_PLUGIN_PATH . '/res/xsd/wpml-config.xsd';
        static $wpml_config_files = array();
        static $active_plugins = array();
        static function load_config()
        {
        }
        static function load_config_run()
        {
        }
        static function get_custom_fields_translation_settings($translation_actions = array(0))
        {
        }
        static function parse_wpml_config_post_process($config)
        {
        }
        static function parseTaxonomies($config)
        {
        }
        static function parsePostTypes($config)
        {
        }
        static function parseTMSetting($singular, $plural, $config)
        {
        }
        static function load_config_post_process()
        {
        }
        static function load_config_pre_process()
        {
        }
        static function load_plugins_wpml_config()
        {
        }
        static function check_on_config_file($name)
        {
        }
        static function load_theme_wpml_config()
        {
        }
        static function get_theme_wpml_config_file()
        {
        }
        static function parse_wpml_config_files()
        {
        }
        /**
         * @param array<string,array<string,mixed>> $config
         */
        protected static function parse_custom_fields($config)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_XML_Config_Read
    {
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Read_File implements \WPML_XML_Config_Read
    {
        function __construct($file_full_path, \WPML_XML_Config_Validate $validate, \WPML_XML_Transform $transform)
        {
        }
        function get()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_XML_Config_Read_Option implements \WPML_XML_Config_Read
    {
        /**
         * WPML_XML_Config_Read_Option constructor.
         *
         * @param \WPML_WP_Option           $option
         * @param \WPML_XML_Config_Validate $validate
         * @param \WPML_XML_Transform       $transform
         */
        function __construct(\WPML_WP_Option $option, \WPML_XML_Config_Validate $validate, \WPML_XML_Transform $transform)
        {
        }
        function get()
        {
        }
    }
    class WPML_Config_Shortcode_List extends \WPML_WP_Option implements \IWPML_Action, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
        public function get_key()
        {
        }
        public function get_default()
        {
        }
        public function add_hooks()
        {
        }
        public function wpml_config_filter($config_data)
        {
        }
        public function filter_shortcode_list($shortcodes)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_Log
    {
        public function insert($timestamp, array $entry);
        public function get($page_size = 0, $page = 0);
        public function save(array $data);
        public function clear();
        public function is_empty();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Config_Update_Log implements \WPML_Log
    {
        const OPTION_NAME = 'wpml-xml-config-update-log';
        public function get($page_size = 0, $page = 0)
        {
        }
        /**
         * @param string|int|float $timestamp
         * @param array            $entry
         */
        public function insert($timestamp, array $entry)
        {
        }
        public function clear()
        {
        }
        public function save(array $data)
        {
        }
        public function is_empty()
        {
        }
        /**
         * @param array $data
         * @param int   $page_size
         * @param int   $page
         *
         * @return array
         */
        protected function paginate(array $data, $page_size, $page)
        {
        }
        /**
         * @return string
         */
        public function get_log_url()
        {
        }
        /** @return string */
        public static function get_support_page_log_section()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_XML extends \WPML_WP_Option
    {
        public function get_key()
        {
        }
        public function get_default()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate_AJAX_Action_Factory extends \WPML_AJAX_Base_Factory
    {
        /** @return null|WPML_TM_Jobs_Deadline_Estimate_AJAX_Action */
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate_AJAX_Action implements \IWPML_Action
    {
        public function __construct(\WPML_TM_Jobs_Deadline_Estimate $deadline_estimate, array $translation_basket, array $post_data)
        {
        }
        public function add_hooks()
        {
        }
        public function refresh()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Cron_Hooks implements \IWPML_Action
    {
        const CHECK_OVERDUE_JOBS_EVENT = 'wpml-tm-check-overdue-jobs-event';
        public function __construct(\WPML_TM_Overdue_Jobs_Report_Factory $overdue_jobs_report_factory, \TranslationManagement $translation_management)
        {
        }
        public function add_hooks()
        {
        }
        public function schedule_event()
        {
        }
        public function send_overdue_email_report()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Cron_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate_Factory
    {
        public function create()
        {
        }
    }
    class WPML_TM_Jobs_Deadline_Estimate
    {
        const LATENCY_DAYS = 1;
        const WORDS_PER_DAY = 1200;
        public function __construct(\WPML_TM_Translatable_Element_Provider $translatable_element_provider, \WPML_TM_Jobs_Repository $jobs_repository)
        {
        }
        /**
         * @param array $basket
         * @param array $translator_options
         *
         * @return string
         */
        public function get(array $basket, array $translator_options)
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Pagination extends \WP_List_Table
    {
        public function __construct($total, $number_per_page)
        {
        }
        public function show()
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Screen_Options_Pagination
    {
        /**
         * WPML_UI_Screen_Options_Pagination constructor.
         *
         * @param string $option_name
         * @param int    $default_per_page
         */
        public function __construct($option_name, $default_per_page)
        {
        }
        public function init_hooks()
        {
        }
        public function add_screen_options()
        {
        }
        public function set_screen_options_filter($value, $option, $set_value)
        {
        }
        public function get_items_per_page()
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Screen_Options_Factory
    {
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param string $option_name
         * @param int    $default_per_page
         *
         * @return WPML_UI_Screen_Options_Pagination
         */
        public function create_pagination($option_name, $default_per_page)
        {
        }
        public function create_help_tab($id, $title, $content)
        {
        }
        public function create_admin_table_sort()
        {
        }
    }
    class WPML_UI_Unlock_Button
    {
        public function render($disabled, $unlocked, $radio_name, $unlocked_name)
        {
        }
    }
    /**
     * @package wpml-core
     */
    class WPML_UI_Help_Tab
    {
        public function __construct(\WPML_WP_API $wp_api, $id, $title, $content)
        {
        }
        public function init_hooks()
        {
        }
        public function add_help_tab()
        {
        }
    }
    /**
     * @deprecated since WPML 4.2.8
     *
     * Some constants are used in other projects, but it should be removed soon.
     */
    class WPML_Theme_Localization_Type
    {
        const USE_ST = 1;
        const USE_MO_FILES = 2;
        const USE_ST_AND_NO_MO_FILES = 3;
    }
    abstract class WPML_TP_REST_Object
    {
        public function __construct(\stdClass $object = \null)
        {
        }
        protected abstract function get_properties();
        /**
         * @param stdClass|null $object
         */
        protected function populate_properties_from_object($object)
        {
        }
    }
    /**
     * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/translation_services
     */
    class WPML_TP_Service extends \WPML_TP_REST_Object implements \Serializable
    {
        /**
         * @var int
         */
        public $id;
        /**
         * @var string
         */
        public $logo_url;
        /** @var string */
        public $logo_preview_url;
        /**
         * @var string
         */
        public $name;
        /**
         * @var string
         */
        public $description;
        /**
         * @var string
         */
        public $doc_url;
        /**
         * @var bool
         */
        public $tms;
        /**
         * @var bool
         */
        public $partner;
        /**
         * @var stdClass
         */
        public $custom_fields;
        /**
         * @var array
         * @deprecated
         */
        public $custom_fields_data;
        /**
         * @var bool
         * @deprecated
         */
        public $requires_authentication;
        /**
         * @var stdClass
         */
        public $rankings;
        /**
         * @var bool
         */
        public $has_language_pairs;
        /**
         * @var string
         */
        public $url;
        /** @var string */
        public $project_details_url;
        /** @var string */
        public $add_language_pair_url;
        /** @var string */
        public $custom_text_url;
        /** @var string */
        public $select_translator_iframe_url;
        /** @var string */
        public $translator_contact_iframe_url;
        /** @var string */
        public $quote_iframe_url;
        /** @var bool */
        public $has_translator_selection;
        /** @var int */
        public $project_name_length;
        /** @var string */
        public $suid;
        /** @var bool */
        public $notification;
        /** @var bool */
        public $preview_bundle;
        /** @var bool */
        public $deadline;
        /** @var bool */
        public $oauth;
        /** @var string */
        public $oauth_url;
        /** @var int */
        public $default_service;
        /** @var bool */
        public $translation_feedback;
        /** @var string */
        public $feedback_forward_method;
        /** @var int */
        public $last_refresh;
        /** @var string */
        public $popup_message;
        /** @var string */
        public $how_to_get_credentials_desc;
        /** @var string */
        public $how_to_get_credentials_url;
        /** @var string */
        public $client_create_account_page_url;
        /** bool */
        public $redirect_to_ts;
        /** @var \stdClass[] */
        public $countries = [];
        public function __construct(\stdClass $object = \null)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_logo_url()
        {
        }
        public function get_logo_preview_url()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * @return string
         */
        public function get_doc_url()
        {
        }
        /**
         * @return string
         */
        public function get_tms()
        {
        }
        /**
         * @return bool
         */
        public function is_partner()
        {
        }
        /**
         * @param bool $partner
         */
        public function set_partner($partner)
        {
        }
        /**
         * @return array
         */
        public function get_custom_fields()
        {
        }
        /**
         * @return array
         */
        public function get_custom_fields_data()
        {
        }
        /**
         * @return bool
         */
        public function get_requires_authentication()
        {
        }
        /**
         * @return bool
         */
        public function get_url()
        {
        }
        /**
         * @return bool
         */
        public function get_has_language_pairs()
        {
        }
        /**
         * @return stdClass
         */
        public function get_rankings()
        {
        }
        /**
         * @return string
         */
        public function get_popup_message()
        {
        }
        /**
         * @param int $id
         */
        public function set_id($id)
        {
        }
        /**
         * @param string $logo_url
         */
        public function set_logo_url($logo_url)
        {
        }
        /**
         * @param  string $logo_preview_url
         */
        public function set_logo_preview_url($logo_preview_url)
        {
        }
        /**
         * @param string $url
         */
        public function set_url($url)
        {
        }
        /**
         * @param string $name
         */
        public function set_name($name)
        {
        }
        /**
         * @param string $description
         */
        public function set_description($description)
        {
        }
        /**
         * @param string $doc_url
         */
        public function set_doc_url($doc_url)
        {
        }
        /**
         * @param bool $tms
         */
        public function set_tms($tms)
        {
        }
        /**
         * @param stdClass $rankings
         */
        public function set_rankings($rankings)
        {
        }
        /**
         * @param stdClass $custom_fields
         */
        public function set_custom_fields($custom_fields)
        {
        }
        /**
         * @param string $popup_message
         */
        public function set_popup_message($popup_message)
        {
        }
        public function set_custom_fields_data()
        {
        }
        public function set_requires_authentication()
        {
        }
        /**
         * @param bool $value
         */
        public function set_has_language_pairs($value)
        {
        }
        /**
         * @return string
         */
        public function get_project_details_url()
        {
        }
        /**
         * @param string $project_details_url
         */
        public function set_project_details_url($project_details_url)
        {
        }
        /**
         * @return string
         */
        public function get_add_language_pair_url()
        {
        }
        /**
         * @param string $add_language_pair_url
         */
        public function set_add_language_pair_url($add_language_pair_url)
        {
        }
        /**
         * @return string
         */
        public function get_custom_text_url()
        {
        }
        /**
         * @param string $custom_text_url
         */
        public function set_custom_text_url($custom_text_url)
        {
        }
        /**
         * @return string
         */
        public function get_select_translator_iframe_url()
        {
        }
        /**
         * @param string $select_translator_iframe_url
         */
        public function set_select_translator_iframe_url($select_translator_iframe_url)
        {
        }
        /**
         * @return string
         */
        public function get_translator_contact_iframe_url()
        {
        }
        /**
         * @param string $translator_contact_iframe_url
         */
        public function set_translator_contact_iframe_url($translator_contact_iframe_url)
        {
        }
        /**
         * @return string
         */
        public function get_quote_iframe_url()
        {
        }
        /**
         * @param string $quote_iframe_url
         */
        public function set_quote_iframe_url($quote_iframe_url)
        {
        }
        /**
         * @return bool
         */
        public function get_has_translator_selection()
        {
        }
        /**
         * @param bool $has_translator_selection
         */
        public function set_has_translator_selection($has_translator_selection)
        {
        }
        /**
         * @return int
         */
        public function get_project_name_length()
        {
        }
        /**
         * @param int $project_name_length
         */
        public function set_project_name_length($project_name_length)
        {
        }
        /**
         * @return string
         */
        public function get_suid()
        {
        }
        /**
         * @param string $suid
         */
        public function set_suid($suid)
        {
        }
        /**
         * @return bool
         */
        public function get_notification()
        {
        }
        /**
         * @param bool $notification
         */
        public function set_notification($notification)
        {
        }
        /**
         * @return bool
         */
        public function get_preview_bundle()
        {
        }
        /**
         * @param bool $preview_bundle
         */
        public function set_preview_bundle($preview_bundle)
        {
        }
        /**
         * @return bool
         */
        public function get_deadline()
        {
        }
        /**
         * @param bool $deadline
         */
        public function set_deadline($deadline)
        {
        }
        /**
         * @return bool
         */
        public function get_oauth()
        {
        }
        /**
         * @param bool $oauth
         */
        public function set_oauth($oauth)
        {
        }
        /**
         * @return string
         */
        public function get_oauth_url()
        {
        }
        /**
         * @param string $oauth_url
         */
        public function set_oauth_url($oauth_url)
        {
        }
        /**
         * @return int
         */
        public function get_default_service()
        {
        }
        /**
         * @param int $default_service
         */
        public function set_default_service($default_service)
        {
        }
        /**
         * @return bool
         */
        public function get_translation_feedback()
        {
        }
        /**
         * @param bool $translation_feedback
         */
        public function set_translation_feedback($translation_feedback)
        {
        }
        /**
         * @return string
         */
        public function get_feedback_forward_method()
        {
        }
        /**
         * @param string $feedback_forward_method
         */
        public function set_feedback_forward_method($feedback_forward_method)
        {
        }
        /** @return null|int */
        public function get_last_refresh()
        {
        }
        /** @param int */
        public function set_last_refresh($timestamp)
        {
        }
        /** @return null|string */
        public function get_how_to_get_credentials_desc()
        {
        }
        /** @param string */
        public function set_how_to_get_credentials_desc($desc)
        {
        }
        /** @return null|string */
        public function get_how_to_get_credentials_url()
        {
        }
        /** @param string */
        public function set_how_to_get_credentials_url($url)
        {
        }
        /** @return null|string */
        public function get_client_create_account_page_url()
        {
        }
        /** @param string */
        public function set_client_create_account_page_url($url)
        {
        }
        /**
         * @return mixed
         */
        public function get_redirect_to_ts()
        {
        }
        /**
         * @param mixed $redirect_to_ts
         */
        public function set_redirect_to_ts($redirect_to_ts)
        {
        }
        /**
         * @return stdClass[]
         */
        public function get_countries()
        {
        }
        /**
         * @param  stdClass[] $countries
         */
        public function set_countries(array $countries)
        {
        }
        public function serialize()
        {
        }
        public function unserialize($serialized)
        {
        }
        /* phpcs:ignore PHPCompatibility.FunctionNameRestrictions.NewMagicMethods.__serializeFound */
        public function __serialize()
        {
        }
        /* phpcs:ignore PHPCompatibility.FunctionNameRestrictions.NewMagicMethods.__unserializeFound */
        public function __unserialize($simple_array)
        {
        }
        /**
         * @return array
         */
        protected function get_properties()
        {
        }
    }
    class WPML_TP_Job_Factory
    {
        /**
         * @param stdClass $job
         *
         * @return WPML_TP_Job
         */
        public function create(\stdClass $job)
        {
        }
    }
    /**
     * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/add_files_batch_job
     */
    class WPML_TP_Job extends \WPML_TP_REST_Object
    {
        const CANCELLED = 'cancelled';
        /** @param int $id */
        public function set_id($id)
        {
        }
        /** @return int */
        public function get_id()
        {
        }
        /** @return string */
        public function get_cms_id()
        {
        }
        /** @return string */
        public function get_job_state()
        {
        }
        /**
         * @return int|null
         */
        public function get_original_element_id()
        {
        }
        /** @return stdClass */
        public function get_batch()
        {
        }
        /**
         * @param int $id
         */
        public function set_cms_id($id)
        {
        }
        /**
         * @param string $state
         */
        public function set_job_state($state)
        {
        }
        public function set_batch(\stdClass $batch)
        {
        }
        /** @return array */
        protected function get_properties()
        {
        }
    }
    /**
     * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/create_batch_job
     */
    class WPML_TP_Batch extends \WPML_TP_REST_Object
    {
        public function get_id()
        {
        }
        public function set_id($id)
        {
        }
        protected function get_properties()
        {
        }
    }
    class WPML_TP_Jobs_Collection
    {
        public function __construct(\TranslationProxy_Project $project, \WPML_TP_Job_Factory $job_factory, \WPML_Translation_Batch_Factory $batch_factory)
        {
        }
        /**
         * @return WPML_TP_Job[]
         */
        public function get_all()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         *
         * @return bool
         */
        public function is_job_canceled(\WPML_Translation_Job $job)
        {
        }
    }
    /**
     * Class WPML_TP_Client_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_Client_Factory
    {
        /** @return WPML_TP_Client */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TP_TM_Jobs
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_TM_Jobs
    {
        const CACHE_BATCH_ID = 'wpml_tp_tm_jobs_batch_id';
        /**
         * WPML_TF_Rating_TP_API constructor.
         *
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param int $job_id
         *
         * @return null|string
         */
        public function get_batch_id($job_id)
        {
        }
    }
    /**
     * Class WPML_TP_Project
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_Project
    {
        /**
         * WPML_TP_Project constructor.
         *
         * @param false|stdClass $translation_service
         * @param false|array    $translation_projects
         */
        public function __construct($translation_service, $translation_projects)
        {
        }
        /** @return int|null */
        public function get_translation_service_id()
        {
        }
        /** @return string|null */
        public function get_access_key()
        {
        }
        /** @return int|null */
        public function get_id()
        {
        }
    }
    class WPML_TP_Jobs_Collection_Factory
    {
        /**
         * @return WPML_TP_Jobs_Collection
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TP_Abstract_API
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_TP_Abstract_API
    {
        /** @var WPML_TP_Client $tp_client */
        protected $tp_client;
        /** @var null|Exception $exception */
        protected $exception;
        /** @var null|string $error_message */
        protected $error_message;
        public function __construct(\WPML_TP_Client $tp_client)
        {
        }
        /** @return string */
        protected abstract function get_endpoint_uri();
        /** @return bool */
        protected abstract function is_authenticated();
        /**
         * @param array $params
         *
         * @return mixed
         */
        protected function get(array $params = array())
        {
        }
        /**
         * @param array $params
         *
         * @return mixed
         */
        protected function post(array $params = array())
        {
        }
        protected function put(array $params = array())
        {
        }
        protected function delete(array $params = array())
        {
        }
        /**
         * WPML does not store the Translation Proxy Job ID
         * We have to identify the job somehow.
         * This is why we are using `original_file_id`.
         * It is the same as used in the XLIFF file as a value of `original` attribute.
         * The combination of `original_file_id` and `batch_id` will be always unique.
         * Translation Proxy provides this call, with these arguments, for this specific reason.
         *
         * @see https://git.onthegosystems.com/tp/translation-proxy/wikis/rate_translation
         * @see https://git.onthegosystems.com/tp/translation-proxy/wikis/send_feedback
         *
         * @param int $job_id
         * @param int $document_source_id
         *
         * @return string
         */
        protected function get_original_file_id($job_id, $document_source_id)
        {
        }
        /** @return null|Exception */
        public function get_exception()
        {
        }
        /** @return null|string */
        public function get_error_message()
        {
        }
    }
    /**
     * Class WPML_TP_API_TF_Ratings
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_API_TF_Ratings extends \WPML_TP_Abstract_API
    {
        /** @return string */
        protected function get_endpoint_uri()
        {
        }
        /** @return bool */
        protected function is_authenticated()
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return int|false
         */
        public function send(\WPML_TF_Feedback $feedback)
        {
        }
    }
    /**
     * Class WPML_TP_API_Services
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_API_Services extends \WPML_TP_Abstract_API
    {
        const ENDPOINT_SERVICES = '/services.json';
        const ENDPOINT_SERVICE = '/services/{service_id}.json';
        const ENDPOINT_LANGUAGES_MAP = '/services/{service_id}/language_identifiers.json';
        const ENDPOINT_CUSTOM_FIELDS = '/services/{service_id}/custom_fields.json';
        const TRANSLATION_MANAGEMENT_SYSTEM = 'tms';
        const PARTNER = 'partner';
        const TRANSLATION_SERVICE = 'ts';
        const CACHED_SERVICES_KEY_DATA = 'wpml_translation_services';
        const CACHED_SERVICES_TRANSIENT_KEY = 'wpml_translation_services_list';
        const CACHED_SERVICES_KEY_TIMESTAMP = 'wpml_translation_services_timestamp';
        /** @return string */
        protected function get_endpoint_uri()
        {
        }
        /** @return bool */
        protected function is_authenticated()
        {
        }
        /**
         * @param bool $reload
         *
         * @return array
         */
        public function get_all($reload = \false)
        {
        }
        /**
         * @return bool
         */
        public function refresh_cache()
        {
        }
        /**
         * @param bool $partner
         * @return array
         */
        public function get_translation_services($partner = \true)
        {
        }
        /**
         * @return array
         */
        public function get_translation_management_systems()
        {
        }
        /**
         * @param bool $reload
         *
         * @return null|WPML_TP_Service
         */
        public function get_active($reload = \false)
        {
        }
        /**
         * @param int  $service_id
         * @param bool $reload
         *
         * @return null|string
         */
        public function get_name($service_id, $reload = \false)
        {
        }
        public function get_service($service_id, $reload = \false)
        {
        }
        /**
         * @param $service_id
         *
         * @return array
         */
        public function get_languages_map($service_id)
        {
        }
        /**
         * @param $service_id
         *
         * @return mixed
         */
        public function get_custom_fields($service_id)
        {
        }
    }
    /**
     * Class WPML_TP_API_TF_Feedback
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_API_TF_Feedback extends \WPML_TP_Abstract_API
    {
        const URI_SEND = '/batches/{batch_id}/jobs/{original_file_id}/feedbacks';
        const URI_GET_STATUS = '/feedbacks/{feedback_id}';
        /** @return string */
        protected function get_endpoint_uri()
        {
        }
        /** @return bool */
        protected function is_authenticated()
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         * @param array            $args
         *
         * @return int|false
         */
        public function send(\WPML_TF_Feedback $feedback, array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback $feedback
         *
         * @return false[string
         */
        public function status(\WPML_TF_Feedback $feedback)
        {
        }
    }
    /**
     * Class WPML_TP_API_Batches
     */
    class WPML_TP_API_Batches extends \WPML_TP_Abstract_API
    {
        const API_VERSION = 1.1;
        const CREATE_BATCH_ENDPOINT = '/projects/{project_id}/batches.json';
        const ADD_JOB_ENDPOINT = '/batches/{batch_id}/jobs.json';
        protected function get_endpoint_uri()
        {
        }
        protected function is_authenticated()
        {
        }
        /**
         * @throws WPML_TP_Batch_Exception
         *
         * @param array       $batch_data
         * @param false|array $extra_fields
         *
         * @return false|stdClass
         *
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/create_batch_job
         */
        public function create(array $batch_data, $extra_fields)
        {
        }
        /**
         * @param int   $batch_id
         * @param array $job_data
         *
         * @return false|WPML_TP_Job
         *
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/add_files_batch_job
         */
        public function add_job($batch_id, array $job_data)
        {
        }
        /**
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/commit_batch_job
         */
        public function commit()
        {
        }
        /**
         * @link https://git.onthegosystems.com/tp/translation-proxy/wikis/send-preview-bundle-job
         */
        public function send_preview_bundle()
        {
        }
    }
    class WPML_TP_Exception extends \Exception
    {
    }
    class WPML_TP_Batch_Exception extends \WPML_TP_Exception
    {
    }
    /**
     * Class WPML_TP_Client
     *
     * @author OnTheGoSystems
     */
    class WPML_TP_Client
    {
        public function __construct(\WPML_TP_Project $project, \WPML_TP_TM_Jobs $tm_jobs)
        {
        }
        public function services()
        {
        }
        public function batches()
        {
        }
        /** @return WPML_TP_API_TF_Ratings */
        public function ratings()
        {
        }
        /** @return WPML_TP_API_TF_Feedback */
        public function feedback()
        {
        }
        /** @return WPML_TP_Project */
        public function get_project()
        {
        }
        public function get_tm_jobs()
        {
        }
    }
    /**
     * Class WPML_Translation_Job_Factory
     *
     * Use `wpml_tm_load_job_factory` to get an instance of this class
     */
    class WPML_Translation_Job_Factory extends \WPML_Abstract_Job_Collection
    {
        /**
         * @param WPML_TM_Records $tm_records
         */
        public function __construct(&$tm_records)
        {
        }
        /**
         * @return WPML_TM_Records
         */
        public function &tm_records()
        {
        }
        public function init_hooks()
        {
        }
        /**
         * Creates a local translation job for a given post and target language and returns the job_id of the created job.
         *
         * @param int      $post_id
         * @param string   $target_language_code
         * @param int|null $translator_id
         * @param int|null $sendFrom
         *
         * @return int|null
         */
        public function create_local_post_job($post_id, $target_language_code, $translator_id = \null, $sendFrom = \WPML\TM\API\Jobs::SENT_MANUALLY)
        {
        }
        /**
         * @param int $element_id
         * @param string $target_language_code
         * @param int|null $translator_id
         * @param string|null $element_type
         * @param int|null $sendFrom
         * @param string|null $sourceLanguageCode
         *
         * @return int|null
         */
        public function create_local_job($element_id, $target_language_code, $translator_id, $element_type = \null, $sendFrom = \WPML\TM\API\Jobs::SENT_MANUALLY, $sourceLanguageCode = \null)
        {
        }
        public function get_translation_jobs_filter($jobs, $args)
        {
        }
        public function get_translation_job_filter($job_id, $include_non_translatable_elements = \false, $revisions = 0)
        {
        }
        /**
         * @param int  $job_id
         * @param bool $include_non_translatable_elements
         * @param int  $revisions
         * @param bool $as_job_instance returns WPML_Element_Translation_Job instead of plain object if true
         *
         * @return bool|stdClass|WPML_Element_Translation_Job
         */
        public function get_translation_job($job_id, $include_non_translatable_elements = \false, $revisions = 0, $as_job_instance = \false)
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool|stdClass
         */
        public function get_translation_job_as_stdclass($job_id)
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool|WPML_Element_Translation_Job
         */
        public function get_translation_job_as_active_record($job_id)
        {
        }
        /**
         * @param int $translation_id
         *
         * @return bool|stdClass|WPML_Element_Translation_Job
         */
        public function job_by_translation_id($translation_id)
        {
        }
        public function string_job_by_translation_id($string_translation_id)
        {
        }
        public function job_id_by_trid_and_lang($trid, $target_language_code)
        {
        }
        public function get_translation_jobs(array $args = array(), $only_ids = \false, $as_job_instances = \false, $default_sort_jobs = \false)
        {
        }
        /**
         * @param int   $job_id
         * @param array $data
         */
        public function update_job_data($job_id, array $data)
        {
        }
        /**
         * @param int $job_id
         */
        public function delete_job_data($job_id)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Languages_AJAX
    {
        /**
         * WPML_Languages_AJAX constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function ajax_hooks()
        {
        }
        public function set_active_languages_action()
        {
        }
        public function set_default_language_action()
        {
        }
    }
}
namespace WPML\Languages {
    class UI implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public static function getData($editPage)
        {
        }
    }
}
namespace {
    class WPML_Language_Collection
    {
        /**
         * WPML_Language_Collection constructor.
         *
         * @param SitePress $sitepress
         * @param array     $initial_languages Array of language codes
         */
        public function __construct(\SitePress $sitepress, $initial_languages = array())
        {
        }
        public function add($code)
        {
        }
        public function get($code)
        {
        }
        public function get_codes()
        {
        }
    }
    class WPML_Language_Records
    {
        public function __construct(\wpdb $wpdb)
        {
        }
        public function is_valid($code)
        {
        }
        /**
         * @param string $lang_code
         *
         * @return string|null
         */
        public function get_locale($lang_code)
        {
        }
        /**
         * @param string $locale
         *
         * @return string|null
         */
        public function get_language_code($locale)
        {
        }
        /**
         * @return array
         */
        public function get_locale_lang_map()
        {
        }
    }
    class WPML_Language
    {
        public function __construct(\SitePress $sitepress, $code)
        {
        }
        public function is_valid()
        {
        }
        public function get_code()
        {
        }
        public function get_display_name()
        {
        }
        public function get_flag_url()
        {
        }
    }
    /**
     * Class WPML_Translation_Management
     */
    class WPML_Translation_Management
    {
        const PAGE_SLUG_MANAGEMENT = '/menu/main.php';
        const PAGE_SLUG_SETTINGS = '/menu/settings';
        const PAGE_SLUG_QUEUE = '/menu/translations-queue.php';
        var $load_priority = 200;
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * WPML_Translation_Management constructor.
         *
         * @param SitePress             $sitepress
         * @param WPML_TM_Loader        $tm_loader
         * @param TranslationManagement $tm_instance
         * @param WPML_TP_Translator    $wpml_tp_translator
         */
        function __construct($sitepress, $tm_loader, $tm_instance, \WPML_TP_Translator $wpml_tp_translator = \null)
        {
        }
        public function init()
        {
        }
        public function load()
        {
        }
        public function api_hooks()
        {
        }
        public function filter_wpml_config_white_list_pages(array $white_list_pages)
        {
        }
        public function maybe_show_wpml_not_installed_warning()
        {
        }
        function trashed_post_actions($post_id)
        {
        }
        function is_jobs_tab()
        {
        }
        function is_translators_tab()
        {
        }
        function admin_enqueue_scripts()
        {
        }
        function admin_print_styles()
        {
        }
        function translation_service_js_data($data)
        {
        }
        function _no_wpml_warning()
        {
        }
        function _wpml_not_installed_warning()
        {
        }
        function _old_wpml_warning()
        {
        }
        function job_saved_message()
        {
        }
        function job_cancelled_message()
        {
        }
        /**
         * @param string $menu_id
         */
        public function management_menu($menu_id)
        {
        }
        function management_page()
        {
        }
        /**
         * Sets up the menu items for non-admin translators pointing at the TM
         * and ST translators interfaces
         *
         * @param string $menu_id
         */
        public function translators_menu($menu_id)
        {
        }
        /**
         * Renders the TM queue
         *
         * @used-by \WPML_Translation_Management::menu
         */
        function translation_queue_page()
        {
        }
        /**
         * @param string $menu_id
         */
        public function settings_menu($menu_id)
        {
        }
        public function settings_page()
        {
        }
        function dismiss_icl_side_by_site()
        {
        }
        function plugin_action_links($links, $file)
        {
        }
        // Localization
        function plugin_localization()
        {
        }
        function _icl_tm_toggle_promo()
        {
        }
        public function automatic_service_selection_action()
        {
        }
        public function basket_extra_fields_refresh()
        {
        }
        /**
         * If user display Translation Dashboard or Translators
         *
         * @return boolean
         */
        function automatic_service_selection_pages()
        {
        }
        public function add_com_log_link()
        {
        }
        public function service_requires_translators()
        {
        }
        /**
         * @param $custom_field_name
         * @param $translation_option
         */
        public function wpml_save_custom_field_translation_option($custom_field_name, $translation_option)
        {
        }
    }
    class WPML_WP_Comments
    {
        const LANG_CODE_FIELD = 'wpml_language_code';
        /**
         * WPML_WP_Comments constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return mixed
         */
        public function add_wpml_language_field($comment_field)
        {
        }
    }
}
namespace WPML\Core\REST {
    class Status
    {
        const PING_KEY = 'wp-rest-enabled-ping';
        const CACHE_EXPIRATION_IN_SEC = 3600;
        const ENABLED = 'enabled';
        const DISABLED = 'disabled';
        const TIMEOUT = 'timeout';
        /**
         * @param \WP_Http $wp_http
         */
        public function __construct(\WP_Http $wp_http)
        {
        }
        public function isEnabled()
        {
        }
    }
    class RewriteRules implements \IWPML_REST_Action, \IWPML_DIC_Action
    {
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function addOptionRewriteRulesHook()
        {
        }
        public function updateRules($rewriteRules)
        {
        }
    }
}
namespace WPML\TM {
    /**
     * @method static callable getCountryByIp( ...$httpPost, ...$ip ) - Curried :: callable->string->array|null
     */
    class Geolocalization
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
}
namespace {
    abstract class WPML_Request
    {
        /** @var  WPML_URL_Converter */
        protected $url_converter;
        protected $active_languages;
        protected $default_language;
        /** @var CookieLanguage  */
        protected $cookieLanguage;
        /**
         * @param  WPML_URL_Converter $url_converter
         * @param  array              $active_languages
         * @param  string             $default_language
         * @param  CookieLanguage     $cookieLanguage
         */
        public function __construct(\WPML_URL_Converter $url_converter, $active_languages, $default_language, \WPML\Language\Detection\CookieLanguage $cookieLanguage)
        {
        }
        protected abstract function get_cookie_name();
        /**
         * Determines the language of the current request.
         *
         * @return string|false language code of the current request, determined from the requested url and the user's
         *                      cookie.
         */
        public abstract function get_requested_lang();
        /**
         * Returns the current REQUEST_URI optionally filtered
         *
         * @param null|int $filter filter to apply to the REQUEST_URI, takes the same arguments
         *                         as filter_var for the filter type.
         *
         * @return string
         */
        public function get_request_uri($filter = \null)
        {
        }
        /**
         * @global $wpml_url_converter
         *
         * @return string|false language code that can be determined from the currently requested URI.
         */
        public function get_request_uri_lang()
        {
        }
        /**
         * @return string language code stored in the user's wp-wpml_current_language cookie
         */
        public function get_cookie_lang()
        {
        }
        /**
         * Checks whether hidden languages are to be displayed at the moment.
         * They are displayed in the frontend if the users has the respective option icl_show_hidden_languages set in his
         * user_meta. The are displayed in the backend for all admins with manage_option capabilities.
         *
         * @return bool true if hidden languages are to be shown
         */
        public function show_hidden()
        {
        }
        /**
         * Sets the language code of the current screen in the User's wp-wpml_current_language cookie
         *
         * When user is not logged we must set cookie with JS to avoid issues with cached pages
         *
         * @param string $lang_code
         */
        public function set_language_cookie($lang_code)
        {
        }
    }
}
namespace WPML\Language\Detection {
    class Ajax extends \WPML_Request
    {
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
    /**
     * Class WPML_Backend_Request
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class Backend extends \WPML_Request
    {
        /**
         * Determines the requested language in the WP Admin backend from URI, $_POST, $_GET and cookies.
         *
         * @return string The requested language code.
         */
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class Frontend extends \WPML_Request
    {
        public function __construct(\WPML_URL_Converter $url_converter, $active_languages, $default_language, \WPML\Language\Detection\CookieLanguage $cookieLanguage, \WPML_WP_API $wp_api)
        {
        }
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
    class CookieLanguage
    {
        /**
         * @param  \WPML_Cookie $cookie
         * @param  string       $defaultLanguage
         */
        public function __construct(\WPML_Cookie $cookie, $defaultLanguage)
        {
        }
        /**
         * @param bool $isBackend
         *
         * @return string
         */
        public function getAjaxCookieName($isBackend)
        {
        }
        public function getBackendCookieName()
        {
        }
        public function getFrontendCookieName()
        {
        }
        public function get($cookieName)
        {
        }
        public function set($cookieName, $lang_code)
        {
        }
        /**
         * @return bool|string
         */
        public function get_cookie_domain()
        {
        }
    }
    class Rest extends \WPML_Request
    {
        public function __construct($url_converter, $active_languages, $default_language, $cookieLanguage, $backend)
        {
        }
        protected function get_cookie_name()
        {
        }
        public function get_requested_lang()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Language_Pair_Records
     *
     * Language pairs are stored as user meta as an array of the form
     * array( $from_lang => array( $to_lang_1 => '1', $to_lang_2 => '1' )
     */
    class WPML_Language_Pair_Records implements \WPML\User\LanguagePairs\ILanguagePairs
    {
        /**
         * @param wpdb                  $wpdb
         * @param WPML_Language_Records $language_records
         * @param array|null            $active_language_codes
         */
        public function __construct(\wpdb $wpdb, \WPML_Language_Records $language_records, $active_language_codes = \null)
        {
        }
        /**
         * @param int   $user_id
         * @param array $language_pairs
         *
         * Language pairs are an array of the form
         * array( $from_lang => array( $to_lang_1, $to_lang_2 )
         */
        public function store($user_id, $language_pairs)
        {
        }
        /**
         * @param int   $user_id
         * @param array $language_pairs
         *
         * Stores only the language pairs that are active.
         */
        public function store_active($user_id, $language_pairs)
        {
        }
        /**
         * @param int $user_id
         */
        public function remove_all($user_id)
        {
        }
        /**
         * @param int $user_id
         * @return array
         *
         * Language pairs are returned in an array of the form
         * array( $from_lang => array( $to_lang_1, $to_lang_2 )
         */
        public function get($user_id)
        {
        }
        /**
         * @param int $user_id
         */
        public function remove_invalid_language_pairs($user_id)
        {
        }
    }
    class WPML_All_Language_Pairs
    {
        public static function get()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Admin_Menu_Item
    {
        /**
         * WPML_Menu_Item constructor.
         *
         * @param array $args
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(array $args = \null)
        {
        }
        /**
         * Required by `usort` to remove duplicates, as casts array elements to string
         *
         * @return string
         */
        public function __toString()
        {
        }
        public function build($root_slug)
        {
        }
        /**
         * @return mixed
         */
        public function get_parent_slug()
        {
        }
        /**
         * @param mixed $parent_slug
         */
        public function set_parent_slug($parent_slug)
        {
        }
        /**
         * @return mixed
         */
        public function get_page_title()
        {
        }
        /**
         * @param mixed $page_title
         */
        public function set_page_title($page_title)
        {
        }
        /**
         * @return mixed
         */
        public function get_menu_title()
        {
        }
        /**
         * @param mixed $menu_title
         */
        public function set_menu_title($menu_title)
        {
        }
        /**
         * @return mixed
         */
        public function get_capability()
        {
        }
        /**
         * @param mixed $capability
         */
        public function set_capability($capability)
        {
        }
        /**
         * @return mixed
         */
        public function get_menu_slug()
        {
        }
        /**
         * @param mixed $menu_slug
         */
        public function set_menu_slug($menu_slug)
        {
        }
        /**
         * @return mixed
         */
        public function get_function()
        {
        }
        /**
         * @param mixed $function
         */
        public function set_function($function)
        {
        }
        /**
         * @return mixed
         */
        public function get_order()
        {
        }
        /**
         * @param mixed $order
         */
        public function set_order($order)
        {
        }
    }
}
namespace WPML\AdminMenu {
    class Redirect implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function redirectOldMenuUrls()
        {
        }
    }
}
namespace {
    class WPML_Admin_Menu_Root
    {
        /**
         * WPML_Menu_Root constructor.
         *
         * @param array|null $args
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(array $args = \null)
        {
        }
        public function build()
        {
        }
        /**
         * @return string
         */
        public function get_menu_slug()
        {
        }
        /**
         * @return string
         */
        public function get_page_title()
        {
        }
        /**
         * @param string $page_title
         */
        public function set_page_title($page_title)
        {
        }
        /**
         * @return string
         */
        public function get_menu_id()
        {
        }
        /**
         * @return string
         */
        public function get_menu_title()
        {
        }
        /**
         * @param string $menu_title
         */
        public function set_menu_title($menu_title)
        {
        }
        /**
         * @return string
         */
        public function get_capability()
        {
        }
        /**
         * @param string $capability
         */
        public function set_capability($capability)
        {
        }
        /**
         * @return null|callable
         */
        public function get_function()
        {
        }
        /**
         * @param null|callable $function
         */
        public function set_function($function)
        {
        }
        /**
         * @return string
         */
        public function get_icon_url()
        {
        }
        /**
         * @param string $icon_url
         */
        public function set_icon_url($icon_url)
        {
        }
        /**
         * @return array
         */
        public function get_items()
        {
        }
        /**
         * @return int
         */
        public function get_position()
        {
        }
        /**
         * @param int $position
         */
        public function set_position($position)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param WPML_Admin_Menu_Item $item
         *
         * @return WPML_Admin_Menu_Item
         */
        public function menu_order_fixer(\WPML_Admin_Menu_Item $item)
        {
        }
        /**
         * @param WPML_Admin_Menu_Item $a
         * @param WPML_Admin_Menu_Item $b
         *
         * @return int
         */
        public function menu_order_sorter(\WPML_Admin_Menu_Item $a, \WPML_Admin_Menu_Item $b)
        {
        }
        /**
         * @param WPML_Admin_Menu_Item|array $item
         *
         * @throws \InvalidArgumentException
         */
        public function register_menu_item($item)
        {
        }
        public function add_item(\WPML_Admin_Menu_Item $item)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Main_Admin_Menu
    {
        const MENU_ORDER_LANGUAGES = 100;
        const MENU_ORDER_THEMES_AND_PLUGINS_LOCALIZATION = 200;
        const MENU_ORDER_TAXONOMY_TRANSLATION = 900;
        const MENU_ORDER_SETTINGS = 9900;
        const MENU_ORDER_MAX = 10000;
        /**
         * WPML_Menu_Main constructor.
         *
         * @param SitePress $sitepress
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @throws \InvalidArgumentException
         */
        public function configure()
        {
        }
    }
    // adapted from http://wordpress.org/extend/plugins/black-studio-wpml-javascript-redirect/
    // thanks to Blank Studio - http://www.blackstudio.it/
    class WPML_Browser_Redirect
    {
        public function __construct($sitepress)
        {
        }
        public function init_hooks()
        {
        }
        public function init()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
}
namespace WPML\MediaTranslation {
    class MediaTranslationEditorLayoutFactory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class MediaCaption
    {
        public function __construct($caption_shortcode, $attributes_data, $content_string)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        public function get_caption()
        {
        }
        public function get_shortcode_string()
        {
        }
        public function get_content()
        {
        }
        public function get_image_alt()
        {
        }
        public function get_link()
        {
        }
    }
    class MediaAttachmentByUrl
    {
        const SIZE_SUFFIX_REGEXP = '/-([0-9]+)x([0-9]+)\\.([a-z]{3,4})$/';
        const CACHE_KEY_PREFIX = 'attachment-id-from-guid-';
        const CACHE_GROUP = 'wpml-media-setup';
        const CACHE_EXPIRATION = 1800;
        public $cache_hit_flag = null;
        /**
         * WPML_Media_Attachment_By_URL constructor.
         *
         * @param \wpdb   $wpdb
         * @param string $url
         * @param string $language
         */
        public function __construct(\wpdb $wpdb, $url, $language)
        {
        }
        public function get_id()
        {
        }
    }
    class MediaAttachmentByUrlFactory
    {
        public function create($url, $language)
        {
        }
    }
    class PostWithMediaFilesFactory
    {
        public function create($post_id)
        {
        }
    }
    class MediaTranslationStatus implements \IWPML_Action
    {
        const NOT_TRANSLATED = 'media-not-translated';
        const IN_PROGRESS = 'in-progress';
        const TRANSLATED = 'media-translated';
        const NEEDS_MEDIA_TRANSLATION = 'needs-media-translation';
        const STATUS_PREFIX = '_translation_status_';
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function set_translation_status_in_progress(\WPML_TM_Translation_Batch $batch)
        {
        }
        public function save_bundled_media_translation($new_post_id, $fields, $job)
        {
        }
    }
    class MediaCaptionTagsParse
    {
        /**
         * @param string $text
         *
         * @return array
         */
        public function get_captions($text)
        {
        }
    }
    class MediaTranslationStatusFactory implements \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        public function create()
        {
        }
    }
    class MediaImgParse
    {
        /**
         * @param string $text
         *
         * @return array
         */
        public function get_imgs($text)
        {
        }
        function can_parse_blocks($string)
        {
        }
    }
    class AddMediaDataToTranslationPackage implements \IWPML_Backend_Action
    {
        const ALT_PLACEHOLDER = '{%ALT_TEXT%}';
        const CAPTION_PLACEHOLDER = '{%CAPTION%}';
        public function __construct(\WPML\MediaTranslation\PostWithMediaFilesFactory $post_media_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function add_media_strings($package, $post)
        {
        }
    }
    class MediaSettings
    {
        public static function init_settings()
        {
        }
        public static function get_setting($name, $default = false)
        {
        }
    }
    class AddMediaDataToTranslationPackageFactory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class MediaTranslationEditorLayout implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function group_media_fields($fields)
        {
        }
        public function set_custom_labels($fields)
        {
        }
    }
    class PostWithMediaFiles
    {
        /**
         * WPML_Media_Post_With_Media_Files constructor.
         *
         * @param $post_id
         * @param MediaImgParse $media_parser
         * @param MediaAttachmentByUrlFactory $attachment_by_url_factory
         * @param \SitePress $sitepress
         * @param \WPML_Custom_Field_Setting_Factory $cf_settings_factory
         */
        public function __construct($post_id, \WPML\MediaTranslation\MediaImgParse $media_parser, \WPML\MediaTranslation\MediaAttachmentByUrlFactory $attachment_by_url_factory, \SitePress $sitepress, \WPML_Custom_Field_Setting_Factory $cf_settings_factory)
        {
        }
        public function get_media_ids()
        {
        }
        /**
         * @param $languages
         *
         * @return array
         */
        public function get_untranslated_media($languages)
        {
        }
    }
}
namespace {
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher_Hooks
    {
        /**
         * @param WPML_User_Language_Switcher $WPML_User_Language_Switcher
         * @param WPML_User_Language_Switcher_UI $WPML_User_Language_Switcher_UI
         */
        public function __construct(&$WPML_User_Language_Switcher, &$WPML_User_Language_Switcher_UI)
        {
        }
        public function language_switcher_action($args)
        {
        }
        public function language_switcher_form_ajax_callback()
        {
        }
        public function language_switcher_form_ajax()
        {
        }
    }
    /**
     * @package wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_Users_Languages
    {
        /**
         * @param WPML_Language_Code $WPML_Language_Code
         * @param WPML_WP_API        $WPML_WP_API
         */
        public function __construct(&$WPML_Language_Code, &$WPML_WP_API)
        {
        }
        public function register_hooks()
        {
        }
        public function wpml_user_language_filter($language, $email)
        {
        }
    }
    /**
     * @package wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_Users_Languages_Dependencies
    {
        public $WPML_User_Language_Switcher_Hooks;
        public $WPML_Users_Languages;
        public $WPML_User_Language;
        function __construct(&$sitepress)
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher_UI
    {
        /**
         * WPML_User_Language_Switcher_UI constructor.
         *
         * @param WPML_User_Language_Switcher           $WPML_User_Language_Switcher
         * @param WPML_User_Language_Switcher_Resources $WPML_User_Language_Switcher_Resources
         */
        public function __construct($WPML_User_Language_Switcher, $WPML_User_Language_Switcher_Resources)
        {
        }
        /**
         * @param array<string,mixed> $args
         * @param array<string,mixed> $model
         *
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function language_switcher($args, $model)
        {
        }
        /**
         * @param array<string,mixed> $model
         *
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        protected function get_view($model)
        {
        }
    }
    class WPML_User_Admin_Language
    {
        const CACHE_GROUP = 'get_user_admin_language';
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param int|string $user_id
         * @param bool       $reload
         *
         * @return bool|mixed|null|string
         */
        public function get($user_id, $reload = \false)
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher
    {
        /**
         * WPML_User_Language_Switcher constructor.
         *
         * @param WPML_Language_Code $WPML_Language_Code
         */
        public function __construct(&$WPML_Language_Code)
        {
        }
        /**
         * @param string $email
         * @param string $language
         *
         * @return bool|int
         */
        public function save_language_user_meta($email, $language)
        {
        }
        /**
         * @param string $language
         *
         * @return false|string|null
         */
        public function sanitize($language)
        {
        }
        /**
         * @param string $email
         *
         * @return array[]
         */
        public function get_model($email)
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * WPML_User_Language constructor.
         *
         * @param SitePress $sitepress
         * @param wpdb|null $wpdb
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb = \null)
        {
        }
        public function register_hooks()
        {
        }
        /**
         * @param array $wp_languages
         *
         * @return array
         */
        public function intersect_wpml_wp_languages($wp_languages)
        {
        }
        /**
         * @param string $email
         */
        public function switch_language_for_email_action($email)
        {
        }
        public function restore_language_from_email_action()
        {
        }
        /**
         * @param int $user_id
         */
        public function sync_admin_user_language_action($user_id)
        {
        }
        public function sync_default_admin_user_languages()
        {
        }
        /**
         * @param string $lang
         */
        public function update_user_lang_on_cookie_update($lang)
        {
        }
        public function update_user_lang_on_site_setup()
        {
        }
        public function update_user_lang_from_login($username, \WP_User $user)
        {
        }
        public function add_how_to_set_notice()
        {
        }
        public static function getNotice()
        {
        }
        public function show_ui_to_enable_login_translation()
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_Language_Code extends \WPML_SP_User
    {
        function __construct(&$sitepress)
        {
        }
        function sanitize($code)
        {
        }
        function get_from_user_meta($email)
        {
        }
    }
    /**
     * @package    wpml-core
     * @subpackage wpml-user-language
     */
    class WPML_User_Language_Switcher_Resources
    {
        public function __construct()
        {
        }
        /**
         * @param array<string,mixed> $data
         */
        public function enqueue_scripts($data)
        {
        }
    }
    class WPML_TM_Job_TS_Status
    {
        /**
         * WPML_TM_Job_TS_Status constructor.
         *
         * @param string $status
         * @param array  $links
         */
        public function __construct($status, $links)
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @return array
         */
        public function get_links()
        {
        }
        public function __toString()
        {
        }
    }
    class WPML_TM_Jobs_Search_Params
    {
        const SCOPE_REMOTE = 'remote';
        const SCOPE_LOCAL = 'local';
        const SCOPE_ALL = 'all';
        const SCOPE_ATE = 'ate';
        public function __construct(array $params = array())
        {
        }
        /**
         * @return array
         */
        public function get_status()
        {
        }
        /**
         * @param array $status
         *
         * @return self
         */
        public function set_status(array $status)
        {
        }
        /**
         * @return string
         */
        public function get_scope()
        {
        }
        /**
         * @return array
         */
        public function get_tp_id()
        {
        }
        /**
         * @param string $scope
         *
         * @retun self
         */
        public function set_scope($scope)
        {
        }
        /**
         * @return array
         */
        public function get_job_types()
        {
        }
        /**
         * @param int|array $tp_id
         *
         * @return $this
         */
        public function set_tp_id($tp_id)
        {
        }
        /**
         * @param string|array $job_types
         *
         * @return self
         */
        public function set_job_types($job_types)
        {
        }
        /**
         * @return int|null
         */
        public function get_first_local_job_id()
        {
        }
        /**
         * @return int[]
         */
        public function get_local_job_ids()
        {
        }
        /**
         * @param int $local_job_id
         *
         * @return self
         */
        public function set_local_job_id($local_job_id)
        {
        }
        /**
         * @param int[] $local_job_ids
         *
         * @return self
         */
        public function set_local_job_ids(array $local_job_ids)
        {
        }
        /**
         * @return int
         */
        public function get_limit()
        {
        }
        /**
         * @param int $limit
         *
         * @return self
         */
        public function set_limit($limit)
        {
        }
        /**
         * @return int
         */
        public function get_offset()
        {
        }
        /**
         * @param int $offset
         *
         * @return self
         */
        public function set_offset($offset)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @param int $id
         *
         * @return self
         */
        public function set_id($id)
        {
        }
        /**
         * @return int[]
         */
        public function get_ids()
        {
        }
        /**
         * @param int[] $ids
         *
         * @return self
         */
        public function set_ids(array $ids)
        {
        }
        /**
         * @return string[]
         */
        public function get_title()
        {
        }
        /**
         * @param array|string $title
         *
         * @return self
         */
        public function set_title($title)
        {
        }
        /**
         * @return string[]
         */
        public function get_batch_name()
        {
        }
        /**
         * @param string[] $batch_name
         */
        public function set_batch_name($batch_name)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @param string $source_language
         *
         * @return self
         */
        public function set_source_language($source_language)
        {
        }
        /**
         * @return string[]
         */
        public function get_target_language()
        {
        }
        /**
         * @param array|string $target_language
         *
         * @return self
         */
        public function set_target_language($target_language)
        {
        }
        /**
         * @return WPML_TM_Jobs_Sorting_Param[]
         */
        public function get_sorting()
        {
        }
        /**
         * @param WPML_TM_Jobs_Sorting_Param[] $sorting
         *
         * @return self
         */
        public function set_sorting(array $sorting)
        {
        }
        /**
         * @return int
         */
        public function get_translated_by()
        {
        }
        /**
         * @param int|null $translated_by
         *
         * @return self
         */
        public function set_translated_by($translated_by)
        {
        }
        /**
         * @return WPML_TM_Jobs_Date_Range
         */
        public function get_deadline()
        {
        }
        /**
         * @param WPML_TM_Jobs_Date_Range $deadline
         *
         * @return self
         */
        public function set_deadline(\WPML_TM_Jobs_Date_Range $deadline)
        {
        }
        /**
         * @return WPML_TM_Jobs_Date_Range
         */
        public function get_sent()
        {
        }
        /**
         * @return WPML_TM_Jobs_Date_Range
         */
        public function get_completed_date()
        {
        }
        /**
         * @return int
         */
        public function get_original_element_id()
        {
        }
        /**
         * @param WPML_TM_Jobs_Date_Range $sent
         *
         * @return self
         */
        public function set_sent(\WPML_TM_Jobs_Date_Range $sent)
        {
        }
        /**
         * @param WPML_TM_Jobs_Date_Range $completed_date
         *
         * @return self
         */
        public function set_completed_date(\WPML_TM_Jobs_Date_Range $completed_date)
        {
        }
        /**
         * @param int $original_element_id
         *
         * @return $this
         */
        public function set_original_element_id($original_element_id)
        {
        }
        /**
         * @return WPML_TM_Jobs_Needs_Update_Param|null
         */
        public function get_needs_update()
        {
        }
        /**
         * @param WPML_TM_Jobs_Needs_Update_Param|null $needs_update
         *
         * @return $this
         */
        public function set_needs_update(\WPML_TM_Jobs_Needs_Update_Param $needs_update = \null)
        {
        }
        /**
         * @return bool
         */
        public function needs_review()
        {
        }
        /**
         * @return bool
         */
        public function exclude_hidden_jobs()
        {
        }
        /**
         * @param int $max_ate_retries
         *
         * @return $this
         */
        public function set_max_ate_retries($max_ate_retries)
        {
        }
        /**
         * @return int
         */
        public function get_max_ate_retries()
        {
        }
        /**
         * If value is set to NULL then the filter is ignored
         * If value is true then we INCLUDE needs review jobs
         * If value is false then we EXCLUDE needs review jobs
         *
         * @param bool|null $needs_review
         */
        public function set_needs_review($needs_review = \true)
        {
        }
        /**
         * @param bool $exclude_hidden_jobs
         */
        public function set_exclude_hidden_jobs($exclude_hidden_jobs)
        {
        }
        /**
         * @param mixed $value
         *
         * @return bool
         */
        public static function is_valid_scope($value)
        {
        }
        /**
         * @param bool $excludeManual
         */
        public function set_exclude_manual($excludeManual)
        {
        }
        /**
         * @return bool
         */
        public function should_exclude_manual()
        {
        }
        /**
         * @param bool $excludeLongstanding
         */
        public function set_exclude_longstanding($excludeLongstanding)
        {
        }
        /**
         * @return bool
         */
        public function should_exclude_longstanding()
        {
        }
        /**
         * @return array|null
         */
        public function get_columns_to_select()
        {
        }
        /**
         * @param array|null $columns_to_select
         *
         * @retun $this
         */
        public function set_columns_to_select($columns_to_select)
        {
        }
        /**
         * @return string
         */
        public function get_element_type()
        {
        }
        /**
         * @param string $element_type
         *
         * @retrun $this
         */
        public function set_element_type($element_type)
        {
        }
        /**
         * @return bool
         */
        public function should_exclude_cancelled()
        {
        }
        /**
         * @param bool $exclude_cancelled
         *
         * @return $this
         */
        public function set_exclude_cancelled($exclude_cancelled = \true)
        {
        }
        /**
         * @return array
         */
        public function get_custom_where_conditions()
        {
        }
        /**
         * @param array $custom_where_conditions
         *
         * @retun $this
         */
        public function set_custom_where_conditions($custom_where_conditions)
        {
        }
    }
}
namespace WPML\TM\Jobs\Endpoint {
    class Resign implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    class WPML_TM_Job_Entity
    {
        const POST_TYPE = 'post';
        const STRING_TYPE = 'string';
        const STRING_BATCH = 'st-batch_strings';
        const PACKAGE_TYPE = 'package';
        /**
         * @param int                $id
         * @param string             $type
         * @param int                $tp_id
         * @param WPML_TM_Jobs_Batch $batch
         * @param int                $status
         */
        public function __construct($id, $type, $tp_id, \WPML_TM_Jobs_Batch $batch, $status)
        {
        }
        /**
         * @deprecated Use `get_rid` instead.
         *
         * This method is deprecated because it caused confusion
         * between the `job_id` and the `rid`.
         *
         * It's actually returning the `rid`.
         *
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return int
         */
        public function get_rid()
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return int
         */
        public function get_tp_id()
        {
        }
        /**
         * @return WPML_TM_Jobs_Batch
         */
        public function get_batch()
        {
        }
        /**
         * @return int
         */
        public function get_status()
        {
        }
        /**
         * @param int $status
         */
        public function set_status($status)
        {
        }
        /**
         * @return int
         */
        public function get_original_element_id()
        {
        }
        /**
         * @param int $original_element_id
         */
        public function set_original_element_id($original_element_id)
        {
        }
        /**
         * @return string
         */
        public function get_source_language()
        {
        }
        /**
         * @param string $source_language
         */
        public function set_source_language($source_language)
        {
        }
        /**
         * @return string
         */
        public function get_target_language()
        {
        }
        /**
         * @param string $target_language
         */
        public function set_target_language($target_language)
        {
        }
        /**
         * @return string
         */
        public function get_translation_service()
        {
        }
        /**
         * @param string $translation_service
         */
        public function set_translation_service($translation_service)
        {
        }
        /**
         * @return DateTime
         */
        public function get_sent_date()
        {
        }
        /**
         * @param DateTime $sent_date
         */
        public function set_sent_date(\DateTime $sent_date)
        {
        }
        /**
         * @param int $tp_id
         */
        public function set_tp_id($tp_id)
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_deadline()
        {
        }
        /**
         * @param DateTime|null $deadline
         */
        public function set_deadline(\DateTime $deadline = \null)
        {
        }
        /**
         * @return int
         */
        public function get_translator_id()
        {
        }
        /**
         * @param int $translator_id
         *
         * @return self
         */
        public function set_translator_id($translator_id)
        {
        }
        /**
         * @return int
         */
        public function get_revision()
        {
        }
        /**
         * @param int $revision
         */
        public function set_revision($revision)
        {
        }
        /**
         * @return WPML_TM_Job_TS_Status
         */
        public function get_ts_status()
        {
        }
        /**
         * @param WPML_TM_Job_TS_Status|string $ts_status
         */
        public function set_ts_status($ts_status)
        {
        }
        /**
         * @param WPML_TM_Job_Entity $job
         *
         * @return bool
         */
        public function is_equal(\WPML_TM_Job_Entity $job)
        {
        }
        /**
         * @return bool
         */
        public function does_need_update()
        {
        }
        /**
         * @param bool $needs_update
         */
        public function set_needs_update($needs_update)
        {
        }
        /**
         * @return bool
         */
        public function has_completed_translation()
        {
        }
        /**
         * @param bool $has_completed_translation
         */
        public function set_has_completed_translation($has_completed_translation)
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @param  string $title
         */
        public function set_title($title)
        {
        }
        /**
         * @param string $type
         *
         * @return bool
         */
        public static function is_type_valid($type)
        {
        }
    }
    class WPML_TM_Post_Job_Entity extends \WPML_TM_Job_Entity
    {
        public function __construct($id, $type, $tp_id, $batch, $status, $elements)
        {
        }
        /**
         * @return WPML_TM_Job_Element_Entity[]
         */
        public function get_elements()
        {
        }
        /**
         * @return int
         */
        public function get_translate_job_id()
        {
        }
        /**
         * @param int $translate_job_id
         */
        public function set_translate_job_id($translate_job_id)
        {
        }
        /**
         * @return string
         */
        public function get_editor()
        {
        }
        /**
         * @param string $editor
         */
        public function set_editor($editor)
        {
        }
        /**
         * @return int
         */
        public function get_editor_job_id()
        {
        }
        /**
         * @param int $editor_job_id
         */
        public function set_editor_job_id($editor_job_id)
        {
        }
        /**
         * @return bool
         */
        public function is_ate_job()
        {
        }
        /**
         * @return bool
         */
        public function is_ate_editor()
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_completed_date()
        {
        }
        /**
         * @param DateTime|null $completed_date
         */
        public function set_completed_date(\DateTime $completed_date = \null)
        {
        }
        /**
         * @return bool
         */
        public function is_automatic()
        {
        }
        /**
         * @param bool $automatic
         */
        public function set_automatic($automatic)
        {
        }
        /**
         * @return string|null
         */
        public function get_review_status()
        {
        }
        /**
         * @param string|null $review_status
         */
        public function set_review_status($review_status)
        {
        }
        /**
         * @return int
         */
        public function get_trid()
        {
        }
        /**
         * @param int $trid
         */
        public function set_trid($trid)
        {
        }
        /**
         * @return string
         */
        public function get_element_type()
        {
        }
        /**
         * @param string $element_type
         */
        public function set_element_type($element_type)
        {
        }
        /**
         * @return int
         */
        public function get_element_id()
        {
        }
        /**
         * @param int $element_id
         */
        public function set_element_id($element_id)
        {
        }
        public function get_element_type_prefix()
        {
        }
        public function set_element_type_prefix($element_type)
        {
        }
        /**
         * @return string
         */
        public function get_job_title()
        {
        }
        /**
         * @param string $job_title
         */
        public function set_job_title($job_title)
        {
        }
    }
}
namespace WPML\TM\Jobs\Query {
    interface Query
    {
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return string
         */
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params);
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return int
         */
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params);
    }
    abstract class AbstractQuery implements \WPML\TM\Jobs\Query\Query
    {
        /** @var wpdb */
        protected $wpdb;
        /** @var QueryBuilder */
        protected $query_builder;
        /** @var string */
        protected $title_column = 'posts.post_title';
        /** @var string */
        protected $batch_name_column = 'batches.batch_name';
        /**
         * @param wpdb         $wpdb
         * @param QueryBuilder $query_builder
         */
        public function __construct(\wpdb $wpdb, \WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         * @param array                      $columns
         *
         * @return string
         */
        protected function build_query(\WPML_TM_Jobs_Search_Params $params, array $columns)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return bool
         */
        protected function check_job_type(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @return string
         */
        protected abstract function get_type();
        protected function define_joins(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected abstract function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder);
        protected function define_filters(\WPML\TM\Jobs\Query\QueryBuilder $query_builder, \WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class StringsBatchQuery extends \WPML\TM\Jobs\Query\AbstractQuery
    {
        /** @var string */
        protected $title_column = 'translation_batches.batch_name';
        protected function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected function get_type()
        {
        }
    }
    class CompositeQuery implements \WPML\TM\Jobs\Query\Query
    {
        const METHOD_UNION = 'union';
        const METHOD_COUNT = 'count';
        /**
         * @param Query[]  $queries      Job queries.
         * @param LimitQueryHelper $limit_helper Limit helper.
         * @param OrderQueryHelper $order_helper Order helper.
         *
         * @throws InvalidArgumentException In case of error.
         */
        public function __construct(array $queries, \WPML\TM\Jobs\Query\LimitQueryHelper $limit_helper, \WPML\TM\Jobs\Query\OrderQueryHelper $order_helper)
        {
        }
        /**
         * Get data query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @throws InvalidArgumentException In case of error.
         * @return string
         */
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Get count query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return int|string
         */
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class QueryBuilder
    {
        /** @var LimitQueryHelper */
        protected $limit_helper;
        /** @var OrderQueryHelper */
        protected $order_helper;
        /**
         * @param LimitQueryHelper $limit_helper
         * @param OrderQueryHelper $order_helper
         */
        public function __construct(\WPML\TM\Jobs\Query\LimitQueryHelper $limit_helper, \WPML\TM\Jobs\Query\OrderQueryHelper $order_helper)
        {
        }
        /**
         * @param array $columns
         *
         * @return self
         */
        public function set_columns(array $columns)
        {
        }
        /**
         * @param $column
         *
         * @return self
         */
        public function add_column($column)
        {
        }
        /**
         * @param string $from
         *
         * @return self
         */
        public function set_from($from)
        {
        }
        /**
         * @param $join
         *
         * @return self
         */
        public function add_join($join)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return self
         */
        public function set_status_filter($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param string     $column
         * @param array|null $values
         *
         * @return $this
         */
        public function set_multi_value_text_filter($column, $values)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return $this
         */
        public function set_source_language($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return $this
         */
        public function set_target_language($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        public function set_translated_by_filter($local_translator_column, $translation_service_column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param string    $column
         * @param int|int[] $value
         *
         * @return $this
         */
        public function set_numeric_value_filter($column, $value)
        {
        }
        /**
         * @param                            $column
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return $this
         */
        public function set_tp_id_filter($column, \WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param string                  $column
         * @param WPML_TM_Jobs_Date_Range $date_range
         *
         * @return self
         */
        public function set_date_range($column, \WPML_TM_Jobs_Date_Range $date_range)
        {
        }
        public function set_needs_review()
        {
        }
        public function set_do_not_need_review()
        {
        }
        public function set_max_retries($maxRetries)
        {
        }
        public function set_element_type($element_type)
        {
        }
        /**
         * @param bool $automatic
         */
        public function set_automatic($automatic = true)
        {
        }
        /**
         * @param int $maxAteSyncCount
         */
        public function set_max_ate_sync_count($maxAteSyncCount)
        {
        }
        public function set_set_excluded_jobs()
        {
        }
        /**
         * @param string|void $where
         *
         * @return self
         */
        public function add_AND_where_condition($where)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return self
         */
        public function set_order(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return self
         */
        public function set_limit(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        public function build()
        {
        }
    }
    class PostQuery extends \WPML\TM\Jobs\Query\AbstractQuery
    {
        /**
         * @param  QueryBuilder  $query_builder
         */
        protected function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected function get_type()
        {
        }
    }
    class OrderQueryHelper
    {
        public function get_order(\WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class LimitQueryHelper
    {
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return string
         */
        public function get_limit(\WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
    class PackageQuery extends \WPML\TM\Jobs\Query\PostQuery
    {
        /** @var string */
        protected $title_column = 'string_packages.title';
        protected function add_resource_join(\WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        protected function get_type()
        {
        }
    }
    class StringQuery implements \WPML\TM\Jobs\Query\Query
    {
        /**
         * WP database instance
         *
         * @var wpdb
         */
        protected $wpdb;
        /**
         * Query builder instance
         *
         * @var QueryBuilder
         */
        protected $query_builder;
        /** @var string */
        protected $batch_name_column = 'batches.batch_name';
        /**
         * @param wpdb         $wpdb          WP database instance.
         * @param QueryBuilder $query_builder Query builder instance.
         */
        public function __construct(\wpdb $wpdb, \WPML\TM\Jobs\Query\QueryBuilder $query_builder)
        {
        }
        /**
         * Get data query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return string
         */
        public function get_data_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Get count query
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return int|string
         */
        public function get_count_query(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * Check job type.
         *
         * @param WPML_TM_Jobs_Search_Params $params Job search params.
         *
         * @return bool
         */
        protected function check_job_type(\WPML_TM_Jobs_Search_Params $params)
        {
        }
    }
}
namespace {
    class WPML_TM_Job_Elements_Repository
    {
        /**
         * @param wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param WPML_TM_Post_Job_Entity $job
         *
         * @return WPML_TM_Job_Element_Entity[]
         */
        public function get_job_elements(\WPML_TM_Post_Job_Entity $job)
        {
        }
    }
    class WPML_TM_Jobs_Batch
    {
        /**
         * @param int      $id
         * @param string   $name
         * @param int|null $tp_id
         */
        public function __construct($id, $name, $tp_id = \null)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return int|null
         */
        public function get_tp_id()
        {
        }
    }
}
namespace WPML\TM\Jobs\Utils {
    class ElementLinkFactory
    {
        public static function create()
        {
        }
    }
    class ElementLink
    {
        public function __construct(\WPML\TM\Menu\PostLinkUrl $postLinkUrl, \WPML_Post_Translation $postTranslation)
        {
        }
        public function getOriginal(\WPML_TM_Post_Job_Entity $job)
        {
        }
        /**
         * @param \WPML_TM_Post_Job_Entity $job
         *
         * @return string
         */
        public function getTranslation(\WPML_TM_Post_Job_Entity $job)
        {
        }
    }
}
namespace WPML\TM\Jobs {
    class Loader implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function getData()
        {
        }
    }
}
namespace {
    class WPML_TM_Jobs_Date_Range
    {
        /**
         * @param DateTime|null $begin
         * @param DateTime|null $end
         * @param bool          $include_null_date
         */
        public function __construct(\DateTime $begin = \null, \DateTime $end = \null, $include_null_date = \false)
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_begin()
        {
        }
        /**
         * @return DateTime|null
         */
        public function get_end()
        {
        }
        /**
         * @return bool
         */
        public function is_include_null_date()
        {
        }
    }
    class WPML_TM_Job_Element_Entity
    {
        /**
         * @param int    $id
         * @param int    $content_id
         * @param int    $timestamp
         * @param string $type
         * @param string $format
         * @param bool   $is_translatable
         * @param string $data
         * @param string $data_translated
         * @param bool   $finished
         */
        public function __construct($id, $content_id, $timestamp, $type, $format, $is_translatable, $data, $data_translated, $finished)
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return int
         */
        public function get_content_id()
        {
        }
        /**
         * @return int
         */
        public function get_timestamp()
        {
        }
        /**
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * @return string
         */
        public function get_format()
        {
        }
        /**
         * @return bool
         */
        public function is_translatable()
        {
        }
        /**
         * @return string
         */
        public function get_data()
        {
        }
        /**
         * @return string
         */
        public function get_data_translated()
        {
        }
        /**
         * @return bool
         */
        public function is_finished()
        {
        }
    }
    class WPML_TM_Jobs_Collection implements \IteratorAggregate, \Countable
    {
        public function __construct(array $jobs)
        {
        }
        /**
         * @param int $tp_id
         *
         * @return null|WPML_TM_Job_Entity
         */
        public function get_by_tp_id($tp_id)
        {
        }
        /**
         * @param callable $callback
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function filter($callback)
        {
        }
        /**
         * @param array|int $status
         * @param bool      $exclude
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function filter_by_status($status, $exclude = \false)
        {
        }
        /**
         * @param callable $callback
         * @param bool     $return_job_collection
         *
         * @return array|WPML_TM_Jobs_Collection
         *
         * @psalm-return ($return_job_collection is false ? array : WPML_TM_Jobs_Collection)
         */
        public function map($callback, $return_job_collection = \false)
        {
        }
        public function map_to_property($property)
        {
        }
        /**
         * @param $jobs
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function append($jobs)
        {
        }
        /**
         * @return ArrayIterator
         */
        #[\ReturnTypeWillChange]
        public function getIterator()
        {
        }
        public function toArray()
        {
        }
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
    }
}
namespace WPML\TM\Jobs {
    class Manual
    {
        /**
         * @param array $params
         *
         * @return \WPML_Translation_Job|null
         */
        public function createOrReuse(array $params)
        {
        }
        /**
         * @param array $params
         *
         * @return array{targetLanguageCode: string, translatedPostId: int, originalPostId: int, postType: string}|null
         */
        public function maybeGetDataIfTranslationCreatedInNativeEditorViaConnection(array $params)
        {
        }
    }
}
namespace {
    class WPML_TM_Jobs_Repository
    {
        /**
         * @param wpdb                            $wpdb
         * @param Query              $query_builder
         * @param WPML_TM_Job_Elements_Repository $elements_repository
         */
        public function __construct(\wpdb $wpdb, \WPML\TM\Jobs\Query\Query $query_builder, \WPML_TM_Job_Elements_Repository $elements_repository)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return WPML_TM_Jobs_Collection|array
         */
        public function get(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @throws \InvalidArgumentException When get_columns_to_select() is used. In that case use get().
         *
         * @return WPML_TM_Jobs_Collection
         */
        public function get_collection(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param array $ateJobIds
         *
         * @return bool
         */
        public function increment_ate_sync_count(array $ateJobIds)
        {
        }
        /**
         * @param WPML_TM_Jobs_Search_Params $params
         *
         * @return int
         */
        public function get_count(\WPML_TM_Jobs_Search_Params $params)
        {
        }
        /**
         * @param int    $local_job_id
         * @param string $job_type
         *
         * @throws InvalidArgumentException
         * @return WPML_TM_Job_Entity|false
         */
        public function get_job($local_job_id, $job_type)
        {
        }
    }
    class WPML_TM_Jobs_Needs_Update_Param
    {
        const INCLUDE_NEEDS_UPDATE = 'include';
        const EXCLUDE_NEEDS_UPDATE = 'exclude';
        /**
         * @param string $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return bool
         */
        public function is_needs_update_excluded()
        {
        }
        /**
         * @return bool
         */
        public function is_needs_update_included()
        {
        }
        /**
         * @param string $value
         *
         * @return bool
         */
        public static function is_valid($value)
        {
        }
    }
    class WPML_TM_Jobs_Sorting_Param
    {
        /**
         * @param string $column
         * @param string $direction
         */
        public function __construct($column, $direction = 'asc')
        {
        }
        /**
         * @return string
         */
        public function get_column()
        {
        }
        /**
         * @return string
         */
        public function get_direction()
        {
        }
    }
    class WPML_TM_Translation_Basket_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Translation_Basket_Dialog_Hooks implements \IWPML_Action
    {
        const PRIORITY_GREATER_THAN_MEDIA_DIALOG = 5;
        public function __construct(\WPML_TM_Translation_Basket_Dialog_View $dialog_view, \WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        public function display_dialog_markup()
        {
        }
    }
    class WPML_TM_Translation_Basket_Dialog_View
    {
        const TEMPLATE_FILE = 'dialog.twig';
        public function __construct(\IWPML_Template_Service $template_service, \WPML_WP_API $wp_api)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        public static function get_strings()
        {
        }
    }
}
namespace WPML\DatabaseQueries {
    class TranslatedPosts
    {
        /**
         * Returns array of translated content IDs that are related to defined secondary languages.
         *
         * @param array $langs Array of secondary languages codes to get IDs of translated content for them.
         *
         * @return array
         */
        public static function getIdsForLangs($langs)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Adjacent_Links_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_Adjacent_Links_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /** @return WPML_Adjacent_Links_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_Adjacent_Links_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_Adjacent_Links_Hooks implements \IWPML_Action
    {
        /**
         * WPML_Adjacent_Links_Hooks constructor.
         *
         * @param SitePress                  $sitepress
         * @param wpdb                       $wpdb
         * @param WPML_Language_Where_Clause $language_where_clause
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Language_Where_Clause $language_where_clause)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $join_clause
         *
         * @return string
         */
        function get_adjacent_post_join($join_clause)
        {
        }
        /**
         * @param string $where_clause
         *
         * @return string
         */
        function get_adjacent_post_where($where_clause)
        {
        }
    }
    class WPML_TM_Troubleshooting_Clear_TS extends \WPML_TM_AJAX_Factory_Obsolete
    {
        /**
         * WPML_TM_Troubleshooting_Clear_TS constructor.
         *
         * @param WPML_WP_API $wpml_wp_api
         */
        public function __construct(&$wpml_wp_api)
        {
        }
        public function clear_ts_action()
        {
        }
        protected function clear_tp_default_suid()
        {
        }
        public function enqueue_resources($hook_suffix)
        {
        }
        public function register_resources()
        {
        }
        public function load_action()
        {
        }
        public function render_ui()
        {
        }
    }
}
namespace WPML\TranslationRoles {
    class GetManagerRecords implements \WPML\Ajax\IHandler
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    abstract class Remove implements \WPML\Ajax\IHandler
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        protected static abstract function getCap();
        protected function msgUserNotFound()
        {
        }
    }
    class GetTranslatorRecords implements \WPML\Ajax\IHandler
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class RemoveTranslator extends \WPML\TranslationRoles\Remove
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        protected static function getCap()
        {
        }
    }
    abstract class SaveUser implements \WPML\Ajax\IHandler
    {
        /**
         * @param Collection $data
         *
         * @return Left|Right
         */
        protected static function getUser(\WPML\Collect\Support\Collection $data)
        {
        }
        /**
         * @param Collection $data
         *
         * @return Left|Right
         */
        public static function createNewWpUser(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SaveTranslator extends \WPML\TranslationRoles\SaveUser
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class SaveManager extends \WPML\TranslationRoles\SaveUser
    {
        const TRANSLATION_MANAGER_INSTRUCTIONS_TEMPLATE = 'notification/translation-manager-instructions.twig';
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        public static function sendInstructions(\WP_User $manager)
        {
        }
    }
    class RemoveManager extends \WPML\TranslationRoles\Remove
    {
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        protected static function getCap()
        {
        }
    }
    class FindAvailableByRole implements \WPML\Ajax\IHandler
    {
        const USER_SEARCH_LIMIT = 10;
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\TranslationRoles\UI {
    class Initializer
    {
        public static function loadJS()
        {
        }
        public static function getData()
        {
        }
        public static function getEndPoints()
        {
        }
        public static function getTranslationData(callable $userExtra = null, $preload = true)
        {
        }
        public static function getLanguagesData()
        {
        }
    }
}
namespace {
    class WPML_Sticky_Posts_Lang_Filter
    {
        /**
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translation
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation)
        {
        }
        /**
         * @param array $posts
         * @param string $lang
         *
         * @return array
         */
        public function filter_by_language(array $posts, $lang)
        {
        }
    }
    class WPML_Sticky_Posts_Sync
    {
        /**
         * @param SitePress                     $sitepress
         * @param WPML_Post_Translation         $post_translation
         * @param WPML_Sticky_Posts_Lang_Filter $populate_lang_option
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translation, \WPML_Sticky_Posts_Lang_Filter $populate_lang_option)
        {
        }
        /**
         * It returns only those sticky posts which belong to a current language
         *
         * @return array|false
         */
        public function pre_option_sticky_posts_filter()
        {
        }
        /**
         * Ensure that the original main `sticky_posts` option contains sticky posts from ALL languages
         *
         * @param array $posts
         *
         * @return array
         */
        public function pre_update_option_sticky_posts($posts)
        {
        }
        /**
         * It marks as `sticky` all posts which are translation of the post or have the same original post.
         * Basically, it means that they have the same trid in icl_translations table.
         *
         * @param int $post_id
         */
        public function on_post_stuck($post_id)
        {
        }
        /**
         * It un-marks as `sticky` all posts which are translation of the post or have the same original post.
         *
         * @param int $post_id
         */
        public function on_post_unstuck($post_id)
        {
        }
        /**
         * It returns an original, unfiltered `sticky_posts` option which contains sticky posts from ALL languages
         *
         * @return array|false
         */
        public function get_unfiltered_sticky_posts_option()
        {
        }
    }
    class WPML_Sticky_Posts_Loader
    {
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
    }
    class WPML_Active_Plugin_Provider
    {
        /**
         * @return array
         */
        public function get_active_plugins()
        {
        }
        /**
         * @return array
         */
        public function get_active_plugin_names()
        {
        }
    }
    class WPML_Upgrade
    {
        const SCOPE_ADMIN = 'admin';
        const SCOPE_AJAX = 'ajax';
        const SCOPE_FRONT_END = 'front-end';
        const UPDATE_STATUSES_KEY = 'wpml_update_statuses';
        /**
         * WPML_Upgrade constructor.
         *
         * @param array                        $commands
         * @param SitePress                    $sitepress
         * @param WPML_Upgrade_Command_Factory $command_factory
         * @param CommandsStatus               $command_status
         */
        public function __construct(array $commands, \SitePress $sitepress, \WPML_Upgrade_Command_Factory $command_factory, \WPML\Upgrade\CommandsStatus $command_status = \null)
        {
        }
        /**
         * @param array $commands
         */
        public function add_commands(array $commands)
        {
        }
        public function run()
        {
        }
        /**
         * @param IWPML_Upgrade_Command $class
         */
        public function mark_command_as_executed(\IWPML_Upgrade_Command $class)
        {
        }
    }
    /**
     * Class WPML_Upgrade_Loader
     */
    class WPML_Upgrade_Loader implements \IWPML_Action
    {
        const TRANSIENT_UPGRADE_IN_PROGRESS = 'wpml_core_update_in_progress';
        /**
         * WPML_Upgrade_Loader constructor.
         *
         * @param SitePress                    $sitepress        SitePress instance.
         * @param WPML_Upgrade_Schema          $upgrade_schema   Upgrade schema instance.
         * @param WPML_Settings_Helper         $settings         Settings Helper instance.
         * @param WPML_Notices                 $wpml_notices     Notices instance.
         * @param WPML_Upgrade_Command_Factory $factory          Upgrade Command Factory instance.
         */
        public function __construct(\SitePress $sitepress, \WPML_Upgrade_Schema $upgrade_schema, \WPML_Settings_Helper $settings, \WPML_Notices $wpml_notices, \WPML_Upgrade_Command_Factory $factory)
        {
        }
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Upgrade WPML plugin.
         */
        public function wpml_upgrade()
        {
        }
    }
    class WPML_Upgrade_Command_Factory
    {
        /**
         * @param string        $class_name
         * @param array         $dependencies
         * @param array         $scopes
         * @param string|null   $method
         * @param callable|null $factory_method
         *
         * @return WPML_Upgrade_Command_Definition
         */
        public function create_command_definition($class_name, array $dependencies, array $scopes, $method = \null, callable $factory_method = \null)
        {
        }
    }
    class WPML_TM_Upgrade_Loader implements \IWPML_Action
    {
        public function __construct(\SitePress $sitepress, \WPML_Upgrade_Schema $upgrade_schema, \WPML_Settings_Helper $settings, \WPML_Notices $wpml_notices, \WPML_Upgrade_Command_Factory $factory)
        {
        }
        public function add_hooks()
        {
        }
        public function wpml_tm_upgrade()
        {
        }
    }
    interface IWPML_Upgrade_Command
    {
        public function run_admin();
        public function run_ajax();
        public function run_frontend();
        public function get_results();
    }
    abstract class WPML_Upgrade_Run_All implements \IWPML_Upgrade_Command
    {
        /** @var bool $result */
        protected $result = \true;
        protected abstract function run();
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    class WPML_Upgrade_Loader_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_TM_Upgrade_Loader_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WPML_Upgrade_Schema
    {
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param string $table_name
         *
         * @return bool
         */
        public function does_table_exist($table_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         *
         * @return bool
         */
        public function does_column_exist($table_name, $column_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $index_name
         *
         * @return bool
         */
        public function does_index_exist($table_name, $index_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $key_name
         *
         * @return bool
         */
        public function does_key_exist($table_name, $key_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         * @param string $attribute_string
         *
         * @return false|int
         */
        public function add_column($table_name, $column_name, $attribute_string)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         * @param string $attribute_string
         *
         * @return false|int
         */
        public function modify_column($table_name, $column_name, $attribute_string)
        {
        }
        /**
         * @param string $table_name
         * @param string $index_name
         * @param string $attribute_string
         *
         * @return false|int
         */
        public function add_index($table_name, $index_name, $attribute_string)
        {
        }
        /**
         * @param string $table_name
         * @param array  $key_columns
         *
         * @return false|int
         */
        public function add_primary_key($table_name, $key_columns)
        {
        }
        /**
         * @param string $table_name
         * @param string $index_name
         *
         * @return false|int
         */
        public function drop_index($table_name, $index_name)
        {
        }
        /**
         * @param string $table_name
         * @param string $column_name
         *
         * @return null|string
         */
        public function get_column_collation($table_name, $column_name)
        {
        }
        /**
         * @param string $table_name
         *
         * @return string|null
         */
        public function get_table_collation($table_name)
        {
        }
        /**
         * We try to get the collation from the posts table first.
         *
         * @return string|null
         */
        public function get_default_collate()
        {
        }
        /**
         * @param string $table_name
         *
         * @return string|null
         */
        public function get_table_charset($table_name)
        {
        }
        /**
         * We try to get the charset from the posts table first.
         *
         * @return string|null
         */
        public function get_default_charset()
        {
        }
        /**
         * @return wpdb
         */
        public function get_wpdb()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class CreateBackgroundTaskTable implements \IWPML_Upgrade_Command
    {
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    /**
     * Abstract class to upgrade a table by adding a column to it.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Column_To_Table
     */
    abstract class WPML_Upgrade_Add_Column_To_Table implements \IWPML_Upgrade_Command
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected abstract function get_table();
        /**
         * Get column name.
         *
         * @return string
         */
        protected abstract function get_column();
        /**
         * Get column definition.
         *
         * @return string
         */
        protected abstract function get_column_definition();
        /**
         * WPML_Upgrade_Add_Column_To_Table constructor.
         *
         * @param array $args Arguments.
         */
        public function __construct(array $args)
        {
        }
        /**
         * Run in admin.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Run in ajax.
         *
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * Run in frontend.
         *
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * Get upgrade results.
         *
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class AddAteCommunicationRetryColumnToTranslationStatus extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    class RefreshTranslationServices implements \IWPML_Upgrade_Command
    {
        const WPML_VERSION_SINCE_PREVIEW_LOGOS_AVAILABLE = '4.4.0';
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    class WPML_TM_Upgrade_Default_Editor_For_Old_Jobs implements \IWPML_Upgrade_Command
    {
        public function __construct($args)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    class WPML_Upgrade_Media_Without_Language extends \WPML_Upgrade_Run_All
    {
        public function __construct(array $args)
        {
        }
        /** @return bool */
        protected function run()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands\SynchronizeSourceIdOfATEJobs {
    class Repository
    {
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @return \WPML\Collect\Support\Collection
         */
        public function getPairs()
        {
        }
    }
    class Command implements \IWPML_Upgrade_Command
    {
        const CHUNK_SIZE = 1000;
        /**
         * Command constructor.
         *
         * @param Repository       $repository
         * @param \WPML_TM_ATE_API $api
         * @param Pager            $pager
         * @param CommandsStatus   $commandStatus
         */
        public function __construct(\WPML\TM\Upgrade\Commands\SynchronizeSourceIdOfATEJobs\Repository $repository, \WPML_TM_ATE_API $api, \WPML\Utils\Pager $pager, \WPML\Upgrade\CommandsStatus $commandStatus)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
    class CommandFactory
    {
        const PAGER_OPTION_NAME = 'sync-source-id-ate-jobs-pager';
        /**
         * @return Command
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_Upgrade_Table_Translate_Job_For_3_9_0 implements \IWPML_Upgrade_Command
    {
        public function __construct(array $args)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    /**
     * Upgrade 'icl_translate' table by adding 'field_wrap_tag' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Wrap_Column_To_Translate
     */
    class WPML_Upgrade_Add_Wrap_Column_To_Translate extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    abstract class DropIndexFromTable extends \WPML_Upgrade_Run_All
    {
        /**
         * @return string
         */
        protected abstract function get_table();
        /**
         * @return string
         */
        protected abstract function get_index();
        /**
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        protected function run()
        {
        }
    }
    class DropCodeLocaleIndexFromLocaleMap extends \WPML\Upgrade\Commands\DropIndexFromTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
    }
    abstract class AddPrimaryKeyToTable extends \WPML_Upgrade_Run_All
    {
        /**
         * @return string
         */
        protected abstract function get_table();
        /**
         * @return string
         */
        protected abstract function get_key_name();
        /**
         * @return array
         */
        protected abstract function get_key_columns();
        /**
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        protected function run()
        {
        }
    }
    class AddPrimaryKeyToLocaleMap extends \WPML\Upgrade\Commands\AddPrimaryKeyToTable
    {
        protected function get_table()
        {
        }
        protected function get_key_name()
        {
        }
        protected function get_key_columns()
        {
        }
    }
}
namespace {
    class WPML_Upgrade_Remove_Translation_Services_Transient implements \IWPML_Upgrade_Command
    {
        /**
         * @return bool|void
         */
        public function run_admin()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return null
         */
        public function get_results()
        {
        }
    }
    /**
     * Upgrade 'icl_strings' table by adding 'word_count' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Word_Count_Column_To_Strings
     */
    class WPML_Upgrade_Add_Word_Count_Column_To_Strings extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    /**
     * Class Add_Index_To_Table
     */
    abstract class AddIndexToTable extends \WPML_Upgrade_Run_All
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected abstract function get_table();
        /**
         * Get index name.
         *
         * @return string
         */
        protected abstract function get_index();
        /**
         * Get index definition.
         *
         * @return string
         */
        protected abstract function get_index_definition();
        /**
         * Add_Index_To_Table constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * Run the table upgrade.
         *
         * @return bool
         */
        protected function run()
        {
        }
    }
    class AddStringPackageIdIndexToStrings extends \WPML\Upgrade\Commands\AddIndexToTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
        protected function get_index_definition()
        {
        }
    }
    class RemoveTmWcmlPromotionNotice implements \IWPML_Upgrade_Command
    {
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class ResetTranslatorOfAutomaticJobs implements \IWPML_Upgrade_Command
    {
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    class WPML_TM_Upgrade_Service_Redirect_To_Field implements \IWPML_Upgrade_Command
    {
        public function __construct($args)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    class WPML_Upgrade_Element_Type_Length_And_Collation implements \IWPML_Upgrade_Command
    {
        public function __construct(array $args)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class AddStatusIndexToStringTranslations extends \WPML\Upgrade\Commands\AddIndexToTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
        protected function get_index_definition()
        {
        }
    }
    class AddCountryColumnToLanguages extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    class RemoveEndpointsOption extends \WPML_Upgrade_Run_All
    {
        public function run()
        {
        }
    }
}
namespace {
    class WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Core_Status implements \IWPML_Upgrade_Command
    {
        public function __construct(array $args)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class ATEProxyUpdateRewriteRules implements \IWPML_Upgrade_Command
    {
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    class WPML_TM_Upgrade_Translation_Priorities_For_Posts implements \IWPML_Upgrade_Command
    {
        const TRANSLATION_PRIORITY_TAXONOMY = 'translation_priority';
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        /** @return bool */
        public function get_results()
        {
        }
    }
    class WPML_Upgrade_Media_Duplication_In_Core implements \IWPML_Upgrade_Command
    {
        const FEATURED_AS_TRANSLATED_META_KEY = '_wpml_featured_image_as_translated';
        const TRANSIENT_DEFERRED_UPGRADE_IN_PROGRESS = 'wpml_upgrade_media_duplication_in_progress';
        const MAX_TIME = 10;
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        public function deferred_upgrade_admin()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        public function deferred_upgrade_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
    }
    /**
     * Upgrade 'icl_translation_status' table by adding 'uuid' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Add_UUID_Column_To_Translation_Status
     */
    class WPML_Add_UUID_Column_To_Translation_Status extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    /**
     * Upgrades the former option to the new one.
     */
    class WPML_TM_Upgrade_WPML_Site_ID_ATE implements \IWPML_Upgrade_Command
    {
        /**
         * Runs the upgrade process.
         *
         * @return bool
         */
        public function run()
        {
        }
        /**
         * Checks has the old option.
         *
         * @return bool
         */
        protected function site_id_ate_does_not_exist()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class CreateAteDownloadQueueTable implements \IWPML_Upgrade_Command
    {
        const TABLE_NAME = 'icl_translation_downloads';
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    class WPML_TM_Upgrade_Cancel_Orphan_Jobs implements \IWPML_Upgrade_Command
    {
        /**
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return null
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class AddContextIndexToStrings extends \WPML\Upgrade\Commands\AddIndexToTable
    {
        protected function get_table()
        {
        }
        protected function get_index()
        {
        }
        protected function get_index_definition()
        {
        }
    }
}
namespace {
    class WPML_Upgrade_Chinese_Flags implements \IWPML_Upgrade_Command
    {
        /**
         * WPML_Upgrade_Chinese_Flags constructor.
         *
         * @param array $args {
         *                    'wpdb' => @type wpdb
         *                    }
         */
        public function __construct(array $args)
        {
        }
        public function run()
        {
        }
        /**
         * @param \stdClass $flag
         *
         * @return bool
         */
        protected function must_update($flag)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_results()
        {
        }
    }
    class WPML_TM_Add_TP_Revision_And_TS_Status_Columns_To_Translation_Status extends \WPML_Upgrade_Run_All
    {
        public function __construct(array $args)
        {
        }
        /** @return bool */
        protected function run()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class AddReviewStatusColumnToTranslationStatus extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace {
    class WPML_TM_Add_TP_ID_Column_To_Translation_Status extends \WPML_Upgrade_Run_All
    {
        public function __construct(array $args)
        {
        }
        /** @return bool */
        protected function run()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class AddTranslationManagerCapToAdmin extends \WPML_Upgrade_Run_All
    {
        protected function run()
        {
        }
    }
}
namespace WPML\Upgrade\Command {
    class DisableOptionsAutoloading implements \IWPML_Upgrade_Command
    {
        public function run()
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_results()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class AddAteSyncCountToTranslationJob extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace {
    class AddTMAllowedOption extends \WPML_Upgrade_Run_All
    {
        /**
         * @return bool
         */
        public function run()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class AddAutomaticColumnToIclTranslateJob extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace {
    class WPML_Upgrade_Fix_Non_Admin_With_Admin_Cap implements \IWPML_Upgrade_Command
    {
        /**
         * @return bool|void
         */
        public function run_admin()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return null
         */
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade\Commands {
    class RemoveRestDisabledNotice implements \IWPML_Upgrade_Command
    {
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_results()
        {
        }
    }
}
namespace {
    class WPML_Upgrade_Admin_Users_Languages
    {
        const ICL_ADMIN_LANGUAGE_MIGRATED_TO_WP_47 = 'icl_admin_language_migrated_to_wp47';
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function run()
        {
        }
    }
    class WPML_Upgrade_Display_Mode_For_Posts implements \IWPML_Upgrade_Command
    {
        const DISPLAY_MODE_SETTING = 'show_untranslated_blog_posts';
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run_admin()
        {
        }
        public function add_notice()
        {
        }
        /**
         * @return bool
         */
        public function run_ajax()
        {
        }
        /**
         * @return bool
         */
        public function run_frontend()
        {
        }
        /**
         * @return array
         */
        public function get_results()
        {
        }
    }
    /**
     * Upgrade 'icl_strings' table by adding 'wrap' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Wrap_Column_To_Strings
     */
    class WPML_Upgrade_Add_Wrap_Column_To_Strings extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    /**
     * Upgrade 'icl_translate_job' table by adding 'editor' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Editor_Column_To_Icl_Translate_Job
     */
    class WPML_Upgrade_Add_Editor_Column_To_Icl_Translate_Job extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
}
namespace WPML\TM\Upgrade\Commands {
    class MigrateAteRepository implements \IWPML_Upgrade_Command
    {
        const TABLE_NAME = 'icl_translate_job';
        const COLUMN_EDITOR_JOB_ID = 'editor_job_id';
        const COLUMN_EDIT_TIMESTAMP = 'edit_timestamp';
        const OPTION_NAME_REPO = 'WPML_TM_ATE_JOBS';
        public function __construct(array $args)
        {
        }
        /**
         * @return bool
         */
        public function run()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * @return bool
         */
        public function get_results()
        {
        }
    }
}
namespace {
    /**
     * Upgrade 'icl_strings' table by adding 'location' column.
     *
     * @package WPML
     */
    /**
     * Class WPML_Upgrade_Add_Location_Column_To_Strings
     */
    class WPML_Upgrade_Add_Location_Column_To_Strings extends \WPML_Upgrade_Add_Column_To_Table
    {
        /**
         * Get table name.
         *
         * @return string
         */
        protected function get_table()
        {
        }
        /**
         * Get column name.
         *
         * @return string
         */
        protected function get_column()
        {
        }
        /**
         * Get column definition.
         *
         * @return string
         */
        protected function get_column_definition()
        {
        }
    }
    /**
     * Upgrades the former option to the new one.
     */
    class WPML_Upgrade_WPML_Site_ID implements \IWPML_Upgrade_Command
    {
        /**
         * Runs the upgrade process.
         *
         * @return bool
         */
        public function run()
        {
        }
        /**
         * Checks has the old option.
         *
         * @return bool
         */
        protected function old_option_exists()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function get_results()
        {
        }
    }
    /**
     * Some sites were not properly upgraded in 4.2.0.
     * In that case the old option was not deleted
     * and new site IDs were wrongly created.
     */
    class WPML_Upgrade_WPML_Site_ID_Remaining implements \IWPML_Upgrade_Command
    {
        /**
         * @var string
         *
         * @see WPML_TM_ATE::SITE_ID_SCOPE
         */
        const SCOPE_ATE = 'ate';
        /**
         * @return bool
         */
        public function run()
        {
        }
        /**
         * @return bool
         */
        protected function old_and_new_options_exist()
        {
        }
        /**
         * Runs in admin pages.
         *
         * @return bool
         */
        public function run_admin()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_ajax()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function run_frontend()
        {
        }
        /**
         * Unused.
         *
         * @return null
         */
        public function get_results()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Upgrade_Command_Definition
    {
        /**
         * WPML_Upgrade_Command_Definition constructor.
         *
         * @param string      $class_name A class implementing \IWPML_Upgrade_Command.
         * @param array       $dependencies An array of dependencies passed to the `$class_name`'s constructor.
         * @param array       $scopes An array of scope values. Accepted values are: `\WPML_Upgrade::SCOPE_ADMIN`, `\WPML_Upgrade::SCOPE_AJAX`, and `\WPML_Upgrade::SCOPE_FRONT_END`.
         * @param string|null $method The method to call to run the upgrade (otherwise, it calls the "run" method),
         * @param callable    $factory_method
         */
        public function __construct($class_name, array $dependencies, array $scopes, $method = \null, callable $factory_method = \null)
        {
        }
        /**
         * @return array
         */
        public function get_dependencies()
        {
        }
        /**
         * @return string
         */
        public function get_class_name()
        {
        }
        /**
         * @return string
         */
        public function get_method()
        {
        }
        /**
         * @return array
         */
        public function get_scopes()
        {
        }
        /**
         * @return callable|null
         */
        public function get_factory_method()
        {
        }
        /**
         * @return IWPML_Upgrade_Command
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Upgrade_Localization_Files implements \IWPML_Upgrade_Command
    {
        /**
         * WPML_Upgrade_Localization_Files constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        public function run_admin()
        {
        }
        public function run_ajax()
        {
        }
        public function run_frontend()
        {
        }
        public function get_command_id()
        {
        }
        public function get_results()
        {
        }
    }
}
namespace WPML\Upgrade {
    class CommandsStatus
    {
        const OPTION_KEY = 'wpml_update_statuses';
        /**
         * @param string $className
         *
         * @return bool
         */
        public function hasBeenExecuted($className)
        {
        }
        /**
         * @param string $className
         * @param bool   $flag
         */
        public function markAsExecuted($className, $flag = true)
        {
        }
    }
}
namespace {
    class WPML_TM_Translated_Field
    {
        /**
         * WPML_TM_Translated_Field constructor.
         *
         * @param string $original
         * @param string $translation
         * @param bool   $finished_state
         */
        public function __construct($original, $translation, $finished_state)
        {
        }
        public function get_translation()
        {
        }
        public function is_finished($original)
        {
        }
    }
    class WPML_TM_Troubleshooting_Clear_TS_UI extends \WPML_Templates_Factory
    {
        public function get_model()
        {
        }
        public function get_template()
        {
        }
        protected function init_template_base_dir()
        {
        }
    }
    class WPML_Plugins_Check
    {
        /**
         * @param string $bundle_json
         * @param string $tm_version
         * @param string $st_version
         * @param string $wcml_version
         */
        public static function disable_outdated($bundle_json, $tm_version, $st_version, $wcml_version)
        {
        }
    }
}
namespace WPML {
    class Plugins
    {
        const WPML_TM_PLUGIN = 'wpml-translation-management/plugin.php';
        const WPML_CORE_PLUGIN = 'sitepress-multilingual-cms/sitepress.php';
        const WPML_SUBSCRIPTION_TYPE_BLOG = 6718;
        const AFTER_INSTALLER = 999;
        public static function loadCoreFirst()
        {
        }
        public static function isTMAllowed()
        {
        }
        public static function updateTMAllowedOption()
        {
        }
        public static function updateTMAllowedAndTranslateEverythingOnSubscriptionChange()
        {
        }
        /**
         * @param bool $isSetupComplete
         */
        public static function loadEmbeddedTM($isSetupComplete)
        {
        }
        public static function isTMActive()
        {
        }
        public static function showEmbeddedTMNotice()
        {
        }
    }
}
namespace {
    class WPML_REST_Posts_Hooks_Factory implements \IWPML_Deferred_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_REST_Action_Loader
    {
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    class WPML_REST_Posts_Hooks implements \IWPML_Action
    {
        public function __construct(\SitePress $sitepress, \WPML_Term_Translation $term_translations)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WP_REST_Response $response The response object.
         * @param WP_Post          $post     Post object.
         *
         * @return WP_REST_Response
         */
        public function prepare_post($response, $post)
        {
        }
        /**
         * @param WP_HTTP_Response|WP_Error $response Result to send to the client. Usually a WP_REST_Response or WP_Error.
         * @param array                     $handler  Route handler used for the request.
         * @param WP_REST_Request           $request  Request used to generate the response.
         *
         * @return WP_HTTP_Response|WP_Error
         */
        public function reload_wpml_post_translation($response, array $handler, \WP_REST_Request $request)
        {
        }
    }
}
namespace WPML\TM\AdminBar {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function __construct(\WPML_Post_Translation $postTranslations)
        {
        }
        public function add_hooks()
        {
        }
        public function addTranslateMenuItem(\WP_Admin_Bar $wpAdminMenu)
        {
        }
        public function enqueueScripts()
        {
        }
    }
}
namespace {
    /**
     * This code is inspired by WPML Widgets (https://wordpress.org/plugins/wpml-widgets/),
     * created by Jeroen Sormani
     *
     * @author OnTheGo Systems
     */
    class WPML_Widgets_Support_Frontend implements \IWPML_Action
    {
        /**
         * @see \WPML\PB\Gutenberg\Widgets\Block\DisplayTranslation::PRIORITY_BEFORE_REMOVE_BLOCK_MARKUP
         */
        const PRIORITY_AFTER_TRANSLATION_APPLIED = 0;
        /**
         * WPML_Widgets constructor.
         *
         * @param string $current_language
         */
        public function __construct($current_language)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function filterByLanguage($content)
        {
        }
        /**
         * Determine if a block should be rendered depending on its language
         * Returning an empty string will stop the block from being rendered.
         *
         * @param string|null $pre_render The pre-rendered content. Default null.
         * @param array $block The block being rendered.
         *
         * @return string|null
         */
        public function shouldRender($pre_render, $block)
        {
        }
        /**
         * Get display status of the widget.
         *
         * @param array|bool $instance
         *
         * @return array|bool
         */
        public function display($instance)
        {
        }
    }
    /**
     * This code is inspired by WPML Widgets (https://wordpress.org/plugins/wpml-widgets/),
     * created by Jeroen Sormani
     *
     * @author OnTheGo Systems
     */
    class WPML_Widgets_Support_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        public function get_load_action()
        {
        }
        /**
         * @return WPML_Widgets_Support_Backend|WPML_Widgets_Support_Frontend|null
         */
        public function create()
        {
        }
        public function create_frontend_ui(\SitePress $sitepress)
        {
        }
    }
    /**
     * This code is inspired by WPML Widgets (https://wordpress.org/plugins/wpml-widgets/),
     * created by Jeroen Sormani
     *
     * @author OnTheGo Systems
     */
    class WPML_Widgets_Support_Backend implements \IWPML_Action
    {
        const NONCE = 'wpml-language-nonce';
        const NONCE_LEGACY_WIDGET = 'wpml_change_selected_language_for_legacy_widget';
        /**
         * WPML_Widgets constructor.
         *
         * @param array                  $active_languages
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(array $active_languages, \IWPML_Template_Service $template_service)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
        /**
         * @param WP_Widget|null $widget
         * @param string|null    $form
         * @param array          $instance
         */
        public function language_selector($widget, $form, $instance)
        {
        }
        /**
         * @param array     $instance
         * @param array     $new_instance
         * @param array     $old_instance
         * @param WP_Widget $widget_instance
         *
         * @return array
         */
        public function update($instance, $new_instance, $old_instance, $widget_instance)
        {
        }
        public function is_widgets_page()
        {
        }
        public function set_selected_language_for_legacy_widget()
        {
        }
    }
    class WPML_TM_Requirements
    {
        const INVALID_PHP_EXTENSIONS_OPTION = 'wpml-invalid-php-extensions';
        public function __construct()
        {
        }
        public function plugins_loaded_action()
        {
        }
        public function missing_php_extensions()
        {
        }
        /**
         * Missing plugins warning.
         */
        public function missing_plugins_warning()
        {
        }
    }
    class WPML_Remove_Pages_Not_In_Current_Language
    {
        /**
         * @param wpdb $wpdb
         * @param SitePress $sitepress
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress)
        {
        }
        /**
         * @param array $posts Array of posts to filter
         * @param array $get_page_arguments Arguments passed to the `get_pages` function
         * @param \WP_Post[]|array[]|int[] $posts Array of posts or post IDs to filter (post IDs are required in tests but it might not be a real case)
         *
         * @return array
         */
        function filter_pages($posts, $get_page_arguments)
        {
        }
    }
}
namespace WPML\ICLToATEMigration {
    class Data
    {
        const OPTION_KEY = 'wpml_icl_to_ate_migration';
        const MEMORY_MIGRATED = 'memory_migrated';
        const ICL_DEACTIVATED = 'icl-deactivated';
        const ICL_CREDENTIALS = 'icl-credentials';
        /**
         * @param bool $flag
         *
         * @return void
         */
        public static function setMemoryMigrated($flag = true)
        {
        }
        /**
         * @return bool
         */
        public static function isMemoryMigrated()
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public static function setICLDeactivated($flag = true)
        {
        }
        /**
         * @return bool
         */
        public static function isICLDeactivated()
        {
        }
        /**
         * @param array $credentials
         *
         * @return void
         */
        public static function saveICLCredentials(array $credentials)
        {
        }
        /**
         * @return array
         */
        public static function getICLCredentials()
        {
        }
    }
}
namespace WPML\ICLToATEMigration\Endpoints\TranslationMemory {
    class CheckMigrationStatus implements \WPML\Ajax\IHandler
    {
        /**
         * @param WPML_TM_ATE_API $apiClient
         */
        public function __construct(\WPML_TM_ATE_API $apiClient)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class StartMigration implements \WPML\Ajax\IHandler
    {
        /**
         * @param WPML_TM_ATE_API  $apiClient
         */
        public function __construct(\WPML_TM_ATE_API $apiClient)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\ICLToATEMigration\Endpoints {
    class DeactivateICL implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class AuthenticateICL implements \WPML\Ajax\IHandler
    {
        /**
         * @param TranslationServices $translationServices
         */
        public function __construct(\WPML\TM\API\TranslationServices $translationServices)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace WPML\ICLToATEMigration\Endpoints\Translators {
    class Save extends \WPML\TranslationRoles\SaveUser
    {
        const ERROR_MESSAGE_TRANSLATORS = 'There was an error when saving the following translators:';
        const SUCCESS_MESSAGE_TRANSLATORS = 'The translators were saved successfully.';
        /**
         * @inheritDoc
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class GetFromICL implements \WPML\Ajax\IHandler
    {
        public function __construct(\WPML_TM_ATE_API $apiClient)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class GetFromICLResponseMapper
    {
        /**
         * Returns formatted data of translators.
         *
         * @param array $records
         *
         * @return callable|\WPML\FP\Right
         */
        public static function map($records)
        {
        }
        /**
         * Formats translator data
         *
         * @param object $record
         *
         * @return array
         */
        public static function constructUserData($record)
        {
        }
        /**
         * Formats translator language pairs data
         *
         * @param array $langPairs
         *
         * @return array
         */
        public static function constructUserLanguagePairs($langPairs)
        {
        }
    }
}
namespace WPML\ICLToATEMigration {
    class Loader implements \IWPML_Backend_Action
    {
        const ICL_NAME = 'ICanLocalize';
        public function add_hooks()
        {
        }
        /**
         * @return bool
         */
        public static function shouldShowMigration()
        {
        }
        public static function renderContainerIfNeeded()
        {
        }
        public static function getData()
        {
        }
    }
    class ICLStatus
    {
        const ICL_NAME = 'ICanLocalize';
        const ICL_ID = 67;
        const SUID = 'dd17d48516ca4bce0b83043583fabd2e';
        /**
         * @param TranslationServices $translationServices
         */
        public function __construct(\WPML\TM\API\TranslationServices $translationServices)
        {
        }
        /**
         * @return bool
         */
        public function isActivated()
        {
        }
        /**
         * @return bool
         */
        public function isActivatedAndAuthorized()
        {
        }
    }
}
namespace {
    class WPML_Remote_String_Translation
    {
        public static function get_string_status_labels()
        {
        }
        public static function get_string_status_label($status)
        {
        }
        public static function translation_send_strings_local($string_ids, $target, $translator_id = \null, $basket_name = \null)
        {
        }
        public static function display_string_menu($lang_filter)
        {
        }
        public static function string_status_text_filter($text, $string_id)
        {
        }
    }
}
namespace WPML\TM\StringTranslation {
    class StringTranslationRequest
    {
        /**
         * @param array    $post clone of $_POST
         * @param callable $addStringsToBasket :: array $stringIds -> string $fromLang -> array $toLangs -> void
         */
        public static function sendToTranslation($post, callable $addStringsToBasket)
        {
        }
    }
}
namespace {
    class WPML_Config_Update_Integrator
    {
        /**
         * @param WPML_Log                $log
         * @param WPML_Config_Update|null $worker
         */
        public function __construct(\WPML_Log $log, \WPML_Config_Update $worker = \null)
        {
        }
        /**
         * @return WPML_Config_Update
         */
        public function get_worker()
        {
        }
        /**
         * @param WPML_Config_Update $worker
         */
        public function set_worker(\WPML_Config_Update $worker)
        {
        }
        public function add_hooks()
        {
        }
        public function handle_requests()
        {
        }
        public function update_event()
        {
        }
        public function upgrader_process_complete_event()
        {
        }
        public function update_event_ajax()
        {
        }
        public function update_event_cron()
        {
        }
    }
}
namespace WPML\BackgroundTask {
    class BackgroundTaskViewModel
    {
        /**
         * Prepares the endpoint data for the react component to consume it.
         *
         * @param BackgroundTask    $backgroundTask
         * @param bool              $getLock
         *
         * @return ?array{
         *     isPaused: bool,
         *     progressTotal: int,
         *     progressDone: int,
         *     payload: object,
         *     taskId: int,
         *     taskStatus: string,
         *     isCompleted: bool,
         *     description: string,
         *     taskType: string,
         *     hasLock: bool
         * }
         **/
        public static function get($backgroundTask, $getLock = false)
        {
        }
    }
    class BackgroundTaskLoader implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /**
         * @param UpdateBackgroundTask          $updateBackgroundTaskCommand
         * @param BackgroundTaskRepository      $backgroundTaskRepository
         */
        public function __construct(\WPML\Core\BackgroundTask\Command\UpdateBackgroundTask $updateBackgroundTaskCommand, \WPML\Core\BackgroundTask\Repository\BackgroundTaskRepository $backgroundTaskRepository)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection $data
         */
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
        /**
         * @return array
         */
        public function getSerializedTasks()
        {
        }
    }
}
namespace WPML\TM\Jobs {
    /**
     * Class FieldId
     *
     * @package WPML\TM\Jobs
     * @method static callable|int get_term_id( ...$field ) - Curried :: string → int
     * @method static callable|int is_a_term_meta( ...$field ) - Curried :: string → bool
     * @method static callable|int is_a_custom_field( ...$field ) - Curried :: string → bool
     * @method static callable|int is_any_term_field( ...$field ) - Curried :: string → bool
     * @method static callable|string forTerm( ...$termId ) - Curried :: int → string
     * @method static callable|string forTermDescription( ...$termId ) - Curried :: int → string
     * @method static callable|string forTermMeta( ...$termId, $key ) - Curried :: int → string → string
     */
    class FieldId
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const TERM_PREFIX = 't_';
        const TERM_DESCRIPTION_PREFIX = 'tdesc_';
        const TERM_META_FIELD_PREFIX = 'tfield-';
        const CUSTOM_FIELD_PREFIX = 'field-';
        public static function init()
        {
        }
        /**
         * @param string $maybe_term
         *
         * @return callable|bool
         *
         * @phpstan-template A1 of string|curried
         * @phpstan-template P1 of string
         * @phpstan-template R of bool
         *
         * @phpstan-param ?A1 $maybe_term
         *
         * @phpstan-return ($maybe_term is P1 ? R : callable(P1=):R)
         */
        public static function is_a_term($maybe_term = null)
        {
        }
        /**
         * @param string $maybe_term_description
         *
         * @return callable|bool
         *
         * @phpstan-template A1 of string|curried
         * @phpstan-template P1 of string
         * @phpstan-template R of bool
         *
         * @phpstan-param ?A1 $maybe_term_description
         *
         * @phpstan-return ($maybe_term_description is P1 ? R : callable(P1=):R)
         */
        public static function is_a_term_description($maybe_term_description = null)
        {
        }
        /**
         * @param string $maybe_term_meta
         *
         * @return callable|bool
         *
         * @phpstan-template A1 of string|curried
         * @phpstan-template P1 of string
         * @phpstan-template R of bool
         *
         * @phpstan-param ?A1 $maybe_term_meta
         *
         * @phpstan-return ($maybe_term_meta is P1 ? R : callable(P1=):R)
         */
        public static function is_a_term_meta($maybe_term_meta = null)
        {
        }
        /**
         * @param string $maybe_custom_field
         *
         * @return callable|bool
         *
         * @phpstan-template A1 of string|curried
         * @phpstan-template P1 of string
         * @phpstan-template R of bool
         *
         * @phpstan-param ?A1 $maybe_custom_field
         *
         * @phpstan-return ($maybe_custom_field is P1 ? R : callable(P1=):R)
         */
        public static function is_a_custom_field($maybe_custom_field = null)
        {
        }
        /**
         * @param string $termMeta
         *
         * @return callable|string
         *
         * @phpstan-template A1 of string|curried
         * @phpstan-template P1 of string
         * @phpstan-template R of string
         *
         * @phpstan-param ?A1 $termMeta
         *
         * @phpstan-return ($termMeta is null ? callable(P1=):R : R)
         */
        public static function getTermMetaKey($termMeta = null)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_Field_Type_Encoding
     */
    class WPML_TM_Field_Type_Encoding
    {
        const CUSTOM_FIELD_KEY_SEPARATOR = ':::';
        /**
         * @param string $custom_field_name
         * @param array  $attributes
         *
         * @return array
         */
        public static function encode($custom_field_name, $attributes)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function encode_hyphen($string)
        {
        }
        /**
         * Get the custom field name and the attributes from the custom field job.
         *
         * @param string $custom_field_job_type - e.g: field-my_custom_field-0-attribute.
         *
         * @return array An array with field name and attributes
         */
        public static function decode($custom_field_job_type)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public static function decode_hyphen($string)
        {
        }
    }
    /**
     * Class WPML_TM_Unsent_Jobs_Notice
     *
     * @group unsent-jobs-notification
     */
    class WPML_TM_Unsent_Jobs
    {
        /**
         * WPML_TM_Unsent_Jobs constructor.
         *
         * @param WPML_TM_Blog_Translators $blog_translators
         * @param SitePress                $sitepress
         */
        public function __construct(\WPML_TM_Blog_Translators $blog_translators, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WPML_Translation_Job $job
         * @param null                 $translator_id
         */
        public function prepare_unsent_job_for_notice(\WPML_Translation_Job $job, $translator_id = \null)
        {
        }
    }
}
namespace WPML\TM\Jobs {
    class Utils
    {
        /**
         * Inserts an element into an array, nested by keys.
         * Input ['a', 'b'] for the keys, an empty array for $array and $x for the value would lead to
         * [ 'a' => ['b' => $x ] ] being returned.
         *
         * @param string[] $keys indexes ordered from highest to lowest level.
         * @param mixed[]  $array array into which the value is to be inserted.
         * @param mixed    $value to be inserted.
         *
         * @return mixed[]
         */
        public static function insertUnderKeys($keys, $array, $value)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Element_Translation_Package
     *
     * @package wpml-core
     */
    class WPML_Element_Translation_Package extends \WPML_Translation_Job_Helper
    {
        /**
         * The constructor.
         *
         * @param WPML_WP_API $wp_api An instance of the WP API.
         */
        public function __construct(\WPML_WP_API $wp_api = \null)
        {
        }
        /**
         * Create translation package
         *
         * @param \WPML_Package|\WP_Post|int $post
         * @param bool                       $isOriginal
         *
         * @return array<string,string|array<string,string>>
         */
        public function create_translation_package($post, $isOriginal = \false)
        {
        }
        /**
         * @param array $translation_package
         * @param int   $job_id
         * @param array $prev_translation
         */
        public function save_package_to_job(array $translation_package, $job_id, $prev_translation)
        {
        }
        /**
         * @param object $job
         * @param int    $post_id
         * @param array  $fields
         */
        public function save_job_custom_fields($job, $post_id, $fields)
        {
        }
        /**
         * Ensure that any numerics are preserved in the given value. eg any string like '10'
         * will be converted to an integer if the corresponding original value was an integer.
         *
         * @param mixed      $value
         * @param string     $name
         * @param string|int $original_post_id
         * @param bool       $single
         *
         * @return mixed
         */
        public static function preserve_numerics($value, $name, $original_post_id, $single)
        {
        }
        public static function getTermMetaKeysToTranslate()
        {
        }
    }
}
namespace WPML\TM\Jobs {
    class ExtraFieldDataInEditor implements \IWPML_Backend_Action
    {
        const MAX_ALLOWED_SINGLE_LINE_LENGTH = 50;
        public function __construct(\WPML_Custom_Field_Editor_Settings $customFieldEditorSettings)
        {
        }
        public function add_hooks()
        {
        }
        public function appendTitleAndStyle(array $fields, $job, $originalPost)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_Unsent_Jobs_Notice
     */
    class WPML_TM_Unsent_Jobs_Notice
    {
        const OPT_JOBS_NOT_NOTIFIED = '_wpml_jobs_not_notified';
        const NOTICE_ID = 'job-not-notified';
        const NOTICE_GROUP_ID = 'tm-jobs-notification';
        /**
         * WPML_TM_Unsent_Jobs_Notice constructor.
         *
         * @param WPML_WP_API                              $wp_api
         * @param WPML_TM_Unsent_Jobs_Notice_Template|null $notice_template
         */
        public function __construct(\WPML_WP_API $wp_api, \WPML_TM_Unsent_Jobs_Notice_Template $notice_template = \null)
        {
        }
        /**
         * @param WPML_Notices $wpml_admin_notices
         */
        public function add_notice(\WPML_Notices $wpml_admin_notices, $dismissed_option_key)
        {
        }
        /**
         * @param array $args
         */
        public function add_job($args)
        {
        }
        /**
         * @param array $args
         */
        public function remove_job($args)
        {
        }
    }
    /**
     * Class WPML_TM_Unsent_Jobs_Notice_Template
     */
    class WPML_TM_Unsent_Jobs_Notice_Template
    {
        const TEMPLATE_FILE = 'jobs-not-notified.twig';
        /**
         * WPML_TM_Unsent_Jobs_Notice_Template constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /**
         * @param array $jobs
         *
         * @return string
         */
        public function get_notice_body($jobs)
        {
        }
    }
    /**
     * Class WPML_TM_Unsent_Jobs_Notifications_Hooks
     */
    class WPML_TM_Unsent_Jobs_Notice_Hooks
    {
        /** @var string */
        protected $dismissed_option_key;
        /**
         * WPML_TM_Unsent_Jobs_Notice_Hooks constructor.
         *
         * @param WPML_TM_Unsent_Jobs_Notice $wpml_tm_notice_email_notice
         * @param WPML_WP_API                $wp_api
         * @param string                     $dismissed_option_key
         */
        public function __construct(\WPML_TM_Unsent_Jobs_Notice $wpml_tm_notice_email_notice, \WPML_WP_API $wp_api, $dismissed_option_key)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $args
         */
        public function email_for_job($args)
        {
        }
        public function add_notice()
        {
        }
        public function remove_notice()
        {
        }
    }
    class WPML_TM_Job_Action_Factory extends \WPML_TM_Job_Factory_User
    {
        /**
         * @param int $job_id
         *
         * @return WPML_TM_Field_Content_Action
         * @throws \InvalidArgumentException
         */
        public function field_contents($job_id)
        {
        }
        public function save_action(array $data)
        {
        }
    }
    class WPML_TM_Job_Layout
    {
        public $wpdb;
        public function __construct(\wpdb $wpdb, \WPML_WP_API $wp_api)
        {
        }
        public function get_wpdb()
        {
        }
        public function run(array $fields, $tm_instance = \null)
        {
        }
    }
}
namespace WPML\TM\Jobs {
    class ExtraFieldDataInEditorFactory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return ExtraFieldDataInEditor
         */
        public function create()
        {
        }
    }
}
namespace {
    class WPML_TM_Translator_Note
    {
        const META_FIELD_KEY = '_icl_translator_note';
        public static function get($post_id)
        {
        }
        public static function update($post_id, $note)
        {
        }
    }
    class WPML_TM_Field_Content_Action extends \WPML_TM_Job_Factory_User
    {
        /** @var  int $job_id */
        protected $job_id;
        /**
         * WPML_TM_Field_Content_Action constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         * @param int                          $job_id
         *
         * @throws \InvalidArgumentException
         */
        public function __construct($job_factory, $job_id)
        {
        }
        /**
         * Returns an array containing job fields
         *
         * @return array
         * @throws \RuntimeException
         */
        public function run()
        {
        }
    }
}
namespace WPML\TM\Jobs\Dispatch {
    class Messages
    {
        /**
         * @param \WP_Post $post
         * @param string $language
         *
         * @return string
         */
        public function ignoreOriginalPostMessage($post, $language)
        {
        }
        /**
         * @param \WP_Post $post
         * @param string $language
         *
         * @return string
         */
        public function ignoreInProgressPostMessage($post, $language)
        {
        }
        /**
         * @param \WPML_ST_String $string
         * @param $language
         *
         * @return string
         */
        public function ignoreInProgressStringMessage(\WPML_ST_String $string, $language)
        {
        }
        /**
         * @param \WPML_Package $package
         * @param string $language
         *
         * @return string
         */
        public function ignoreInProgressPackageMessage($package, $language)
        {
        }
        /**
         * @param \WPML_Package $package
         * @param string $language
         *
         * @return string
         */
        public function ignoreOriginalPackageMessage($package, $language)
        {
        }
        /**
         * @param array $messages
         * @param string $type
         */
        public function showForPosts(array $messages, $type)
        {
        }
        /**
         * @param array $messages
         * @param string $type
         */
        public function showForStrings(array $messages, $type)
        {
        }
    }
    abstract class Elements
    {
        /**
         * @param callable $sendBatch
         * @param Messages $messages
         * @param callable $buildBatch
         * @param array    $data
         * @param string   $type
         */
        public static function dispatch(callable $sendBatch, \WPML\TM\Jobs\Dispatch\Messages $messages, callable $buildBatch, $data, $type)
        {
        }
        /**
         * @param \stdClass $job
         *
         * @return bool
         */
        protected static function isProgressJob($job)
        {
        }
        /**
         * @param \stdClass $job
         *
         * @return bool
         */
        protected static function isCompletedJob($job)
        {
        }
        /**
         * @param Messages $messages
         * @param array    $elementsData
         * @param array    $targetLanguages
         * @param string   $howToHandleExisting
         * @param bool     $translateAutomatically
         *
         * phpcs:disable Squiz.Commenting.FunctionComment.InvalidNoReturn
         * @return array
         * @throws Exception Throws an exception if the method is not properly extended.
         */
        protected static function filterElements(\WPML\TM\Jobs\Dispatch\Messages $messages, $elementsData, $targetLanguages, $howToHandleExisting, $translateAutomatically)
        {
        }
        /**
         * @param \stdClass $job
         * @param string|null  $howToHandleExisting
         * @param bool $translateAutomatically
         *
         * @return bool
         */
        protected static function shouldJobBeIgnoredBecauseIsCompleted($job, $howToHandleExisting, $translateAutomatically)
        {
        }
    }
    class Posts extends \WPML\TM\Jobs\Dispatch\Elements
    {
        public static function dispatch(callable $sendBatch, \WPML\TM\Jobs\Dispatch\Messages $messages, callable $buildBatch, $data, $type = 'post')
        {
        }
        protected static function filterElements(\WPML\TM\Jobs\Dispatch\Messages $messages, $postsData, $targetLanguages, $howToHandleExisting, $translateAutomatically)
        {
        }
    }
    class Strings
    {
        /**
         * @param callable $sendBatch
         * @param \WPML\TM\Jobs\Dispatch\Messages $messages
         * @param callable $buildBatch
         * @param $stringIds
         * @param $sourceLanguage
         * @param $targetLanguages
         */
        public static function dispatch(callable $sendBatch, \WPML\TM\Jobs\Dispatch\Messages $messages, callable $buildBatch, $stringIds, $sourceLanguage, $targetLanguages)
        {
        }
    }
    /**
     * Class BatchBuilder
     *
     * @phpstan-type curried "__CURRIED_PLACEHOLDER__"
     */
    class BatchBuilder
    {
        use \WPML\FP\Curryable;
        public static function init()
        {
        }
        /**
         * @param array  $data
         * @param string $sourceLanguage
         * @param array  $translators
         *
         * @return callable|\WPML_TM_Translation_Batch|null
         *
         * @phpstan-template A1 of array|curried
         * @phpstan-template A2 of string|curried
         * @phpstan-template A3 of array|curried
         * @phpstan-template P1 of array
         * @phpstan-template P2 of string
         * @phpstan-template P3 of array
         * @phpstan-template R of \WPML_TM_Translation_Batch|null
         *
         * @phpstan-param ?A1 $data
         * @phpstan-param ?A2 $sourceLanguage
         * @phpstan-param ?A3 $translators
         *
         * @phpstan-return ($data is P1
         *  ? ($sourceLanguage is P2
         *    ? ($translators is P3
         *      ? R
         *      : callable(P3=):R)
         *    : ($translators is P3
         *      ? callable(P2=):R
         *      : callable(P2=,P3=):R)
         *  )
         *  : ($sourceLanguage is P2
         *    ? ($translators is P3
         *      ? callable(P1=):R
         *      : callable(P1=,P3=):R)
         *    : ($translators is P3
         *      ? callable(P1=,P2=):R
         *      : callable(P1=,P2=,P3=):R)
         *  )
         * )
         */
        public static function buildPostsBatch($data = null, $sourceLanguage = null, $translators = null)
        {
        }
        /**
         * @param array  $data
         * @param string $sourceLanguage
         * @param array  $translators
         *
         * @return callable|\WPML_TM_Translation_Batch|null
         *
         * @phpstan-template A1 of array|curried
         * @phpstan-template A2 of string|curried
         * @phpstan-template A3 of array|curried
         * @phpstan-template P1 of array
         * @phpstan-template P2 of string
         * @phpstan-template P3 of array
         * @phpstan-template R of \WPML_TM_Translation_Batch|null
         *
         * @phpstan-param ?A1 $data
         * @phpstan-param ?A2 $sourceLanguage
         * @phpstan-param ?A3 $translators
         *
         * @phpstan-return ($data is P1
         *  ? ($sourceLanguage is P2
         *    ? ($translators is P3
         *      ? R
         *      : callable(P3=):R)
         *    : ($translators is P3
         *      ? callable(P2=):R
         *      : callable(P2=,P3=):R)
         *  )
         *  : ($sourceLanguage is P2
         *    ? ($translators is P3
         *      ? callable(P1=):R
         *      : callable(P1=,P3=):R)
         *    : ($translators is P3
         *      ? callable(P1=,P2=):R
         *      : callable(P1=,P2=,P3=):R)
         *  )
         * )
         */
        public static function buildStringsBatch($data = null, $sourceLanguage = null, $translators = null)
        {
        }
        /**
         * @param array $postsForTranslation
         * @param string $sourceLanguage
         *
         * @return callable|array
         *
         * @phpstan-template A1 of array|curried
         * @phpstan-template A2 of string|curried
         * @phpstan-template P1 of array
         * @phpstan-template P2 of string
         * @phpstan-template R of array
         *
         * @phpstan-param ?A1 $postsForTranslation
         * @phpstan-param ?A2 $sourceLanguage
         *
         * @phpstan-return ($postsForTranslation is P1
         *  ? ($sourceLanguage is P2 ? R : callable(P2=):R)
         *  : ($sourceLanguage is P2 ? callable(P1=):R : callable(P1=,P2=):R)
         * )
         */
        public static function getPostElements($postsForTranslation = null, $sourceLanguage = null)
        {
        }
        /**
         * @param array $stringsForTranslation
         * @param string $sourceLanguage
         *
         * @return callable|array
         *
         * @phpstan-template A1 of array|curried
         * @phpstan-template A2 of string|curried
         * @phpstan-template P1 of array
         * @phpstan-template P2 of string
         * @phpstan-template R of array
         *
         * @phpstan-param ?A1 $stringsForTranslation
         * @phpstan-param ?A2 $sourceLanguage
         *
         * @phpstan-return ($stringsForTranslation is P1
         *  ? ($sourceLanguage is P2 ? R : callable(P2=):R)
         *  : ($sourceLanguage is P2 ? callable(P1=):R : callable(P1=,P2=):R)
         * )
         */
        public static function getStringElements($stringsForTranslation = null, $sourceLanguage = null)
        {
        }
    }
    class Packages extends \WPML\TM\Jobs\Dispatch\Elements
    {
        public static function dispatch(callable $sendBatch, \WPML\TM\Jobs\Dispatch\Messages $messages, callable $buildBatch, $data, $type = 'package')
        {
        }
        protected static function filterElements(\WPML\TM\Jobs\Dispatch\Messages $messages, $packagesData, $targetLanguages, $howToHandleExisting, $translateAutomatically)
        {
        }
    }
}
namespace WPML\TM\Jobs {
    class TermMeta
    {
        /**
         * It returns translated term description stored inside wp_icl_translate
         *
         * @param int $iclTranslateJobId
         * @param int $termTaxonomyId
         *
         * @return string
         */
        public static function getTermDescription($iclTranslateJobId, $termTaxonomyId)
        {
        }
        /**
         * It returns term meta stored inside wp_icl_translate table.
         *
         * Data has such format:
         * [
         *   (object)[
         *     field_type => 'some_scalar_field',
         *     field_data_translated => 'Translated value'
         *   ],
         *   (object)[
         *      field_type => 'some_array_valued_field_like_checkboxes'
         *      field_data_translated => [
         *         'Translated option 1', 'Translated option 2', 'Translated option 3'
         *      ]
         *   ],
         *   (object)[
         *      field_type => 'another_array_valued_field_like_checkboxes'
         *      field_data_translated => [
         *         'option1' => ['Translated option 1'],
         *         'option2' => ['Translated option 2'],
         *      ]
         *   ]
         * ]
         *
         * @param int $iclTranslateJobId
         * @param int $term_taxonomy_id
         *
         * @return array
         */
        public static function getTermMeta($iclTranslateJobId, $term_taxonomy_id)
        {
        }
    }
}
namespace {
    class WPML_BBPress_API
    {
        public function bbp_get_user_profile_url($user_id = 0, $user_nicename = '')
        {
        }
    }
    /**
     * WPML_BBPress_Filters class file.
     *
     * @package WPML\Core
     */
    /**
     * Class WPML_BBPress_Filters
     */
    class WPML_BBPress_Filters
    {
        /**
         * WPML_BBPress_Filters constructor.
         *
         * @param WPML_BBPress_API $wpml_bbpress_api WPML_BBPress_API instance.
         */
        public function __construct($wpml_bbpress_api)
        {
        }
        /**
         * Destruct instance.
         */
        public function __destruct()
        {
        }
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Remove hooks.
         */
        public function remove_hooks()
        {
        }
        /**
         * Author link filter.
         *
         * @param string $link            Author link.
         * @param int    $author_id       Author id.
         * @param string $author_nicename Author nicename.
         *
         * @return mixed
         */
        public function author_link_filter($link, $author_id, $author_nicename)
        {
        }
    }
    class WPML_SEO_HeadLangs
    {
        /**
         * WPML_SEO_HeadLangs constructor.
         *
         * @param SitePress                   $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        function head_langs()
        {
        }
        function render_menu()
        {
        }
    }
    abstract class WPML_TM_XLIFF_Phase
    {
        public function get()
        {
        }
        protected abstract function get_data();
        protected abstract function get_phase_name();
        protected abstract function get_process_name();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Shortcodes extends \WPML_TM_XLIFF_Phase
    {
        const SHORTCODE_STORE_OPTION_KEY = 'wpml_xliff_shortcodes';
        /**
         * @return string
         */
        protected function get_data()
        {
        }
        protected function get_phase_name()
        {
        }
        protected function get_process_name()
        {
        }
    }
    class WPML_TM_Xliff_Writer
    {
        const TAB = "\t";
        protected $job_factory;
        /**
         * WPML_TM_xliff constructor.
         *
         * @param WPML_Translation_Job_Factory   $job_factory
         * @param string                         $xliff_version
         * @param \WPML_TM_XLIFF_Shortcodes|null $xliff_shortcodes
         */
        public function __construct(\WPML_Translation_Job_Factory $job_factory, $xliff_version = \TRANSLATION_PROXY_XLIFF_VERSION, \WPML_TM_XLIFF_Shortcodes $xliff_shortcodes = \null)
        {
        }
        /**
         * Generate a XLIFF file for a given job.
         *
         * @param int $job_id
         *
         * @return resource XLIFF representation of the job
         */
        public function get_job_xliff_file($job_id)
        {
        }
        /**
         * Generate a XLIFF string for a given post or external type (e.g. package) job.
         *
         * @param int $job_id
         * @param bool $apply_memory
         *
         * @return string XLIFF representation of the job
         */
        public function generate_job_xliff($job_id, $apply_memory = \true)
        {
        }
        /**
         * Generate a XLIFF file for a given set of strings.
         *
         * @param array  $strings
         * @param string $source_language
         * @param string $target_language
         *
         * @return resource XLIFF file
         */
        public function get_strings_xliff_file($strings, $source_language, $target_language)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        protected function replace_new_line_with_tag($string)
        {
        }
    }
    class WPML_TM_General_Xliff_Import extends \WPML_TM_Job_Factory_User
    {
        /**
         * WPML_TM_General_Xliff_Import constructor.
         *
         * @param WPML_Translation_Job_Factory $job_factory
         * @param WPML_TM_Xliff_Reader_Factory $xliff_reader_factory
         */
        public function __construct(&$job_factory, &$xliff_reader_factory)
        {
        }
        /**
         * Imports the data in the xliff string into an array representation
         * that fits to the given target translation id.
         *
         * @param string $xliff_string
         * @param int    $target_translation_id
         *
         * @return WP_Error|array
         */
        public function import($xliff_string, $target_translation_id)
        {
        }
    }
    abstract class WPML_TM_Xliff_Shared extends \WPML_TM_Job_Factory_User
    {
        /** @var  ?WP_Error $error */
        protected $error;
        /**
         * @param $string
         *
         * @return mixed
         */
        protected function replace_xliff_new_line_tag_with_new_line($string)
        {
        }
        /**
         * @param SimpleXMLElement $xliff
         *
         * @return string
         */
        protected function identifier_from_xliff($xliff)
        {
        }
        /**
         * @param SimpleXMLElement $xliff
         *
         * @return stdClass|WP_Error
         */
        public function get_job_for_xliff(\SimpleXMLElement $xliff)
        {
        }
        /**
         * @param $xliff_node
         *
         * @return string
         */
        protected function get_xliff_node_target($xliff_node)
        {
        }
        /**
         * @param $validator WPML_TM_Validate_HTML
         */
        public function set_validator($validator)
        {
        }
        protected function generate_job_data(\SimpleXMLElement $xliff, $job)
        {
        }
        protected function validate_file($name, $content, $current_user)
        {
        }
        /**
         * @param string $filename
         * @return bool
         */
        function validate_file_name($filename)
        {
        }
        protected function is_user_the_job_owner($current_user, $job)
        {
        }
        protected function not_the_job_owner_error($job)
        {
        }
        /**
         * @param string $name
         * @param string $content
         *
         * @return false|SimpleXMLElement|WP_Error
         */
        protected function check_xml_file($name, $content)
        {
        }
        /**
         * @param $errno
         * @param $errstr
         * @param $errfile
         * @param $errline
         *
         * @throws ErrorException
         */
        protected function error_handler($errno, $errstr, $errfile, $errline)
        {
        }
        /**
         * @param string $name
         *
         * @return WP_Error
         */
        protected function not_xml_file_error($name)
        {
        }
        /**
         * @param array $missing_data
         *
         * @return WP_Error
         */
        protected function invalid_xliff_error(array $missing_data = array())
        {
        }
        /**
         * @return WP_Error
         */
        protected function does_not_belong_error()
        {
        }
    }
    /**
     * Class WPML_TM_Xliff_Frontend
     */
    class WPML_TM_Xliff_Frontend extends \WPML_TM_Xliff_Shared
    {
        /**
         * WPML_TM_Xliff_Frontend constructor
         *
         * @param WPML_Translation_Job_Factory $job_factory  Job factory.
         * @param SitePress                    $sitepress    SitePress instance.
         * @param boolean                      $simplexml_on Is simple xml turned on.
         */
        public function __construct(\WPML_Translation_Job_Factory $job_factory, \SitePress $sitepress, $simplexml_on)
        {
        }
        /**
         * Get available xliff versions
         *
         * @return array
         */
        public function get_available_xliff_versions()
        {
        }
        /**
         * Get init priority
         *
         * @return int
         */
        public function get_init_priority()
        {
        }
        /**
         * Get late init priority
         *
         * @return int
         */
        public function get_late_init_priority()
        {
        }
        /**
         * Init class
         *
         * @return bool
         * @throws Exception Throws an exception in case of errors.
         */
        public function init()
        {
        }
        /**
         * Set xliff options
         */
        public function ajax_set_xliff_options()
        {
        }
        /**
         * New job notification
         *
         * @param array $mail   Email content.
         * @param int   $job_id Job id.
         *
         * @return array
         */
        public function new_job_notification($mail, $job_id)
        {
        }
        /**
         * New job notification attachments
         *
         * @param array $attachments Job notification attachments.
         *
         * @return array
         */
        public function new_job_notification_attachments($attachments)
        {
        }
        /**
         * Get xliff archive
         *
         * @param string     $xliff_version Xliff version.
         * @param array|null $job_ids       Job ids.
         *
         * @return wpml_zip
         *
         * @throws Exception Throws an exception in case of errors.
         */
        public function get_xliff_archive($xliff_version, $job_ids = array())
        {
        }
        /**
         * Stops any redirects from happening when we call the
         * translation manager to save the translations.
         *
         * @return null
         */
        public function stop_redirect()
        {
        }
        /**
         * Translation queue actions
         *
         * @param array  $actions          Actions.
         * @param string $action_name      Action name.
         * @param array  $translation_jobs Translation jobs.
         * @param string $action
         */
        public function translation_queue_xliff_select_actions($actions, $action_name, $translation_jobs, $action)
        {
        }
        /**
         * Adds the various possible XLIFF versions to translations queue page's export actions on display
         *
         * @param array $actions Actions.
         *
         * @return array
         */
        public function translation_queue_add_actions($actions)
        {
        }
        /**
         * Show error messages in admin notices
         */
        public function admin_notices_error()
        {
        }
        /**
         * Show success messages in admin notices
         */
        public function admin_notices_success()
        {
        }
        /**
         * Check translation queue after display
         *
         * @param array $translation_jobs Translation jobs.
         */
        public function translation_queue_after_display($translation_jobs = array())
        {
        }
        /**
         * Print online js script
         */
        public function js_scripts()
        {
        }
        /**
         * Provide translator notification
         */
        public function translator_notification()
        {
        }
    }
    /**
     * Class WPML_TM_Validate_HTML
     */
    class WPML_TM_Validate_HTML
    {
        /**
         * Get validated html.
         *
         * @return string
         */
        public function get_html()
        {
        }
        /**
         * Validate html.
         *
         * @param string $html HTML to process.
         *
         * @return int Number of errors.
         */
        public function validate($html)
        {
        }
        /**
         * Callback to convert WP bugs into wpml commented bugs.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_wp_bug_callback($matches)
        {
        }
        /**
         * Callback to convert wpml commented bugs to WP bugs.
         *
         * @param array $matches
         *
         * @return mixed
         */
        public function restore_bug_callback($matches)
        {
        }
        /**
         * Callback to convert HTML comment to wpml comment.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_comment_callback($matches)
        {
        }
        /**
         * Callback to convert HTML declaration to wpml declaration.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_declaration_callback($matches)
        {
        }
        /**
         * Callback to convert wpml base64 encoded content.
         *
         * @param array $matches
         *
         * @return string
         */
        public function restore_encoded_content_callback($matches)
        {
        }
        /**
         * Callback to convert self-closing tags to wpml self-closing tags.
         *
         * @param $matches
         *
         * @return string
         */
        public function hide_sct_callback($matches)
        {
        }
        /**
         * Callback to convert wpml self-closing tags to self-closing tags.
         *
         * @param $matches
         *
         * @return string
         */
        public function restore_sct_callback($matches)
        {
        }
        /**
         * Convert wpml comments to initial HTML.
         *
         * @param $html
         *
         * @return false|string
         */
        public function restore_html($html)
        {
        }
        /**
         * Callback to convert wpml fragment to HTML fragment.
         *
         * @param $matches
         *
         * @return string
         */
        public function restore_html_fragment_callback($matches)
        {
        }
        /**
         * Callback to convert script to wpml script.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_script_callback($matches)
        {
        }
        /**
         * Callback to convert CDATA to wpml cdata.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_cdata_callback($matches)
        {
        }
        /**
         * Callback to convert style to wpml style.
         *
         * @param array $matches
         *
         * @return string
         */
        public function hide_style_callback($matches)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Post_Type extends \WPML_TM_XLIFF_Phase
    {
        public function __construct($post_type = '')
        {
        }
        /**
         * @return string
         */
        protected function get_data()
        {
        }
        protected function get_phase_name()
        {
        }
        protected function get_process_name()
        {
        }
    }
    class WPML_TM_Xliff_Reader_Factory extends \WPML_TM_Job_Factory_User
    {
        /**
         * @return WPML_TM_General_Xliff_Reader
         */
        public function general_xliff_reader()
        {
        }
        public function general_xliff_import()
        {
        }
        /**
         * @return WPML_TM_String_Xliff_Reader
         */
        public function string_xliff_reader()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF
    {
        /**
         * WPML_TM_XLIFF constructor.
         *
         * @param string $xliff_version
         * @param string $xml_version
         * @param string $xml_encoding
         */
        public function __construct($xliff_version = '1.2', $xml_version = '1.0', $xml_encoding = 'utf-8')
        {
        }
        /**
         * @param array $attributes
         *
         * @return $this
         */
        public function setFileAttributes($attributes)
        {
        }
        /**
         * @param array $args
         *
         * @return $this
         */
        public function setPhaseGroup(array $args)
        {
        }
        /**
         * @param array $references
         *
         * @return $this
         */
        public function setReferences(array $references)
        {
        }
        // phpcs:disable WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid
        /**
         * Set translation units for xliff.
         *
         * @param array $trans_units Translation units.
         *
         * @return $this
         */
        public function setTranslationUnits($trans_units)
        {
        }
        public function toString()
        {
        }
    }
    abstract class WPML_TM_Xliff_Reader extends \WPML_TM_Xliff_Shared
    {
        /**
         * @param string $content Xliff file string content
         *
         * @return array
         */
        public abstract function get_data($content);
        /**
         * Parse a XML containing the XLIFF
         *
         * @param string $content
         *
         * @return SimpleXMLElement|WP_Error The parsed XLIFF or a WP error in case it could not be parsed
         */
        public function load_xliff($content)
        {
        }
    }
    class WPML_TM_String_Xliff_Reader extends \WPML_TM_Xliff_Reader
    {
        /**
         * Retrieve the string translations from a XLIFF
         *
         * @param string $content The XLIFF representing a set of strings
         *
         * @return WP_Error|array The string translation representation or WP_Error
         * on failure
         */
        public function get_data($content)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Factory
    {
        const WPML_XLIFF_DEFAULT_VERSION = \WPML_XLIFF_DEFAULT_VERSION;
        const CREATE_FOR_WRITE = 'WPML_TM_Xliff_Writer';
        const CREATE_FOR_FRONT_END = 'WPML_TM_Xliff_Frontend';
        public function create_writer($xliff_version = self::WPML_XLIFF_DEFAULT_VERSION)
        {
        }
        public function create_frontend()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_TM_XLIFF_Translator_Notes extends \WPML_TM_XLIFF_Phase
    {
        public function __construct($post_id = 0)
        {
        }
        /**
         * @return string
         */
        protected function get_data()
        {
        }
        protected function get_phase_name()
        {
        }
        protected function get_process_name()
        {
        }
    }
    class WPML_TM_General_Xliff_Reader extends \WPML_TM_Xliff_Reader
    {
        public function get_xliff_job_identifier($content)
        {
        }
        /**
         * Retrieve the translation from a XLIFF
         *
         * @param string $content The XLIFF representing a job
         *
         * @return WP_Error|array
         */
        public function get_data($content)
        {
        }
    }
    abstract class WPML_Ajax_Factory
    {
        public function add_route(\WPML_Ajax_Route $route)
        {
        }
        abstract function get_class_names();
        abstract function create($class_name);
    }
    class WPML_TM_Ajax_Factory extends \WPML_Ajax_Factory
    {
        public function __construct($wpdb, $sitepress, $post_data)
        {
        }
        public function get_class_names()
        {
        }
        public function create($class_name)
        {
        }
    }
}
namespace WPML {
    class Roles implements \IWPML_Backend_Action, \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
        public static function remove_caps($userId, $role, $oldRoles)
        {
        }
    }
    class DefaultCapabilities
    {
        public static function get()
        {
        }
    }
}
namespace WPML\SuperGlobals {
    class Server
    {
        public static function getServerName()
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Frontend_Cookie_Setting
     */
    class WPML_Cookie_Setting
    {
        const COOKIE_SETTING_FIELD = 'store_frontend_cookie';
        /**
         * WPML_Frontend_Cookie_Setting constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @return bool|mixed
         */
        public function get_setting()
        {
        }
        /**
         * @param mixed $value
         */
        public function set_setting($value)
        {
        }
    }
    class WPML_Cookie
    {
        /**
         * @param string $name
         * @param string $value
         * @param int $expires
         * @param string $path
         * @param string $domain
         * @param bool $HTTPOnly
         * @param string|null $sameSite
         */
        public function set_cookie($name, $value, $expires, $path, $domain, $HTTPOnly = \false, $sameSite = \null)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function get_cookie($name)
        {
        }
        /**
         * simple wrapper for \headers_sent
         *
         * @return bool
         */
        public function headers_sent()
        {
        }
    }
    /**
     * Class WPML_Cookie_Admin_Scripts
     */
    class WPML_Cookie_Admin_Scripts
    {
        public function enqueue()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
    /**
     * Class WPML_Frontend_Cookie_Setting_Ajax
     */
    class WPML_Cookie_Setting_Ajax
    {
        const NONCE_COOKIE_SETTING = 'wpml-frontend-cookie-setting-nonce';
        const AJAX_RESPONSE_ID = 'icl_ajx_response_cookie';
        const ACTION = 'wpml_update_cookie_setting';
        /**
         * WPML_Frontend_Cookie_Setting_Ajax constructor.
         *
         * @param WPML_Cookie_Setting $wpml_frontend_cookie_setting
         */
        public function __construct(\WPML_Cookie_Setting $wpml_frontend_cookie_setting)
        {
        }
        public function add_hooks()
        {
        }
        public function update_cookie_setting()
        {
        }
    }
    /**
     * Class WPML_Cookie_Scripts
     */
    class WPML_Cookie_Scripts
    {
        /**
         * WPML_Cookie_Scripts constructor.
         *
         * @param string $language_cookie_name
         * @param string $current_language
         */
        public function __construct($language_cookie_name, $current_language)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_scripts()
        {
        }
    }
    /**
     * Class WPML_Cookie_Admin_UI
     */
    class WPML_Cookie_Admin_UI
    {
        const BOX_TEMPLATE = 'admin-cookie-box.twig';
        const BUTTON_ID = 'js-wpml-store-frontend-cookie';
        /**
         * WPML_Cookie_Admin_UI constructor.
         *
         * @param WPML_Twig_Template  $template_service
         * @param WPML_Cookie_Setting $cookie_setting
         */
        public function __construct(\WPML_Twig_Template $template_service, \WPML_Cookie_Setting $cookie_setting)
        {
        }
        public function add_hooks()
        {
        }
        public function render_cookie_box()
        {
        }
    }
    class WPML_Ajax_Route
    {
        const ACTION_PREFIX = 'wp_ajax_';
        const ACTION_PREFIX_LENGTH = 8;
        public function __construct(\WPML_Ajax_Factory $factory)
        {
        }
        public function add($class_name)
        {
        }
        public function do_ajax()
        {
        }
    }
}
namespace WPML\Ajax\Endpoint {
    class Upload implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    class WPML_Ajax_Response
    {
        public function __construct($success, $response_data)
        {
        }
        public function send_json()
        {
        }
        public function is_success()
        {
        }
        public function get_response()
        {
        }
    }
    class WPML_Not_Doing_Ajax_On_Send_Exception extends \Exception
    {
        public $response;
        public function __construct($response)
        {
        }
    }
}
namespace WPML\Ajax {
    class Locale implements \IWPML_AJAX_Action, \IWPML_DIC_Action
    {
        public function __construct(\SitePress $sitePress)
        {
        }
        public function add_hooks()
        {
        }
    }
    class Factory implements \IWPML_AJAX_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    class WPML_Translate_Link_Targets_Hooks
    {
        /**
         * WPML_Translate_Link_Targets_Hooks constructor.
         *
         * @param WPML_Translate_Link_Targets $translate_link_targets
         * @param WPML_WP_API                 $wp_api
         */
        public function __construct($translate_link_targets, $wp_api)
        {
        }
    }
    class WPML_Translation_Management_Filters_And_Actions
    {
        /**
         * @param TranslationManagement $tm_instance
         * @param \SitePress            $sitepress
         */
        public function __construct($tm_instance, $sitepress)
        {
        }
    }
}
namespace WPML\FullSiteEditing {
    class BlockTemplates implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_REST_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array  $package
         * @param object $post
         *
         * @return array
         */
        public static function doNotTranslateTitle(array $package, $post)
        {
        }
        /**
         * @param array  $postData
         * @param object $job
         *
         * @return array
         */
        public static function copyOriginalTitleToTranslation($postData, $job)
        {
        }
        /**
         * @param \WP_Post $post Inserted or updated post object.
         */
        public static function syncPostName(\WP_Post $post)
        {
        }
    }
}
namespace {
    class WPML_LS_Assets
    {
        /**
         * WPML_Language_Switcher_Render_Assets constructor.
         *
         * @param WPML_LS_Templates $templates
         * @param WPML_LS_Settings  $settings
         */
        public function __construct($templates, &$settings)
        {
        }
        public function init_hooks()
        {
        }
        public function wp_enqueue_scripts_action()
        {
        }
        /**
         * @param string $slug
         */
        public function maybe_late_enqueue_template($slug)
        {
        }
    }
    class WPML_LS_Settings
    {
        const SETTINGS_SLUG = 'wpml_language_switcher';
        const DEFAULT_FLAG_WIDTH = 18;
        const DEFAULT_FLAG_HEIGHT = 12;
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /**
         * WPML_LS_Settings constructor.
         *
         * @param WPML_LS_Templates    $templates
         * @param SitePress            $sitepress
         * @param WPML_LS_Slot_Factory $slot_factory
         * @param WPML_LS_Migration    $migration
         */
        public function __construct($templates, $sitepress, $slot_factory, $migration = \null)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param array $ls_config
         */
        public function reset_ls_settings_action(array $ls_config)
        {
        }
        /**
         * @return string|void
         */
        public function get_restore_redirect_url()
        {
        }
        /**
         * @param array $arr
         *
         * @return array
         */
        public function read_config_settings_recursive($arr)
        {
        }
        /**
         * @return string
         */
        public function get_settings_base_slug()
        {
        }
        /**
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * @return array
         */
        public function get_settings_model()
        {
        }
        /**
         * @return array
         */
        public function get_registered_sidebars()
        {
        }
        /**
         * @return array
         */
        public function get_available_menus()
        {
        }
        /**
         * @param string $slot_group
         * @param string|int $slot_slug
         *
         * @return WPML_LS_Slot
         */
        public function get_slot($slot_group, $slot_slug)
        {
        }
        /**
         * @param int $term_id
         *
         * @return WPML_LS_Slot
         */
        public function get_menu_settings_from_id($term_id)
        {
        }
        /**
         * @return array
         */
        public function get_active_slots()
        {
        }
        /**
         * @return array
         */
        public function get_active_templates()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed string|array|null
         */
        public function get_setting($key)
        {
        }
        /**
         * @param array $new_settings
         */
        public function save_settings($new_settings)
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function convert_slot_settings_to_objects(array $settings)
        {
        }
        /**
         * @param array $old_sidebars
         * @param array $sidebars
         */
        public function update_option_sidebars_widgets_action($old_sidebars, $sidebars)
        {
        }
        /**
         * @param array      $instance
         * @param array      $new_instance
         * @param array|null $old_instance
         * @param WP_Widget  $widget
         *
         * @return array
         */
        public function widget_update_callback_filter(array $instance, array $new_instance, $old_instance, \WP_Widget $widget)
        {
        }
        /**
         * @return array
         */
        public function get_ordered_languages()
        {
        }
        /**
         * @return array
         */
        public function get_default_color_schemes()
        {
        }
        /**
         * @param mixed|null|string $slug
         *
         * @return mixed|array|string
         */
        public function get_core_templates($slug = \null)
        {
        }
        /**
         * @param string|null $template_slug
         *
         * @return bool
         */
        public function can_load_styles($template_slug = \null)
        {
        }
        /**
         * @param string|null $template_slug
         *
         * @return bool
         */
        public function can_load_script($template_slug = \null)
        {
        }
    }
    /**
     * Class WPML_Language_Switcher
     *
     * Main class
     */
    class WPML_Language_Switcher extends \WPML_SP_User
    {
        /**
         * WPML_Language_Switcher constructor.
         *
         * @param SitePress                    $sitepress
         * @param WPML_LS_Dependencies_Factory $dependencies
         */
        public function __construct(\SitePress $sitepress, \WPML_LS_Dependencies_Factory $dependencies = \null)
        {
        }
        public function init_hooks()
        {
        }
        public function init_admin_hooks()
        {
        }
        /**
         * @param string $group
         * @param string $slot
         *
         * @return WPML_LS_Slot
         */
        public function get_slot($group, $slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function render($slot)
        {
        }
        /**
         * @param string     $type 'sidebars', 'menus', 'statics'
         * @param string|int $slug_or_id
         *
         * @return string
         */
        public function get_button_to_edit_slot($type, $slug_or_id)
        {
        }
        /**
         * @return array
         */
        public static function parameters()
        {
        }
    }
    class WPML_LS_Widget extends \WP_Widget
    {
        const SLUG = 'icl_lang_sel_widget';
        const ANCHOR_BASE = '#sidebars/';
        public function __construct()
        {
        }
        public static function register()
        {
        }
        /**
         * @param string $hook
         */
        public function admin_enqueue_scripts_action($hook)
        {
        }
        /**
         * @param array<string,mixed> $args
         * @param array               $instance
         */
        public function widget($args, $instance)
        {
        }
        /**
         * @param array $instance
         *
         * @return void
         */
        public function form($instance)
        {
        }
        /**
         * @param array $new_instance
         * @param array $old_instance
         *
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function create_new_instance(\WPML_LS_Slot $slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param int          $widget_id
         */
        public function update_instance(\WPML_LS_Slot $slot, $widget_id = \null)
        {
        }
        /**
         * @param int $widget_id
         */
        public function delete_instance($widget_id = \null)
        {
        }
        /**
         * @param string|int $widget_id
         *
         * @return int
         */
        public function get_number_from_widget_id($widget_id)
        {
        }
        /**
         * @param string $slug
         *
         * @return string
         */
        public function get_settings_page_url($slug)
        {
        }
    }
    class WPML_LS_Templates
    {
        const CONFIG_FILE = 'config.json';
        const OPTION_NAME = 'wpml_language_switcher_template_objects';
        public function __construct(\WPML_File $wpml_file = \null)
        {
        }
        public function init_hooks()
        {
        }
        public function action_after_setup_theme_action()
        {
        }
        /**
         * @return boolean
         */
        public function are_templates_loaded_from_cache()
        {
        }
        /**
         * @return array
         */
        public function after_setup_theme_action()
        {
        }
        public function activated_plugin_action()
        {
        }
        /**
         * @param null|array $in_array
         *
         * @return array
         */
        public function get_templates($in_array = \null)
        {
        }
        /**
         * @param string $template_slug
         *
         * @return WPML_LS_Template
         */
        public function get_template($template_slug)
        {
        }
        public function get_all_templates_data()
        {
        }
    }
    class WPML_LS_Display_As_Translated_Link
    {
        public function __construct(\SitePress $sitepress, \IWPML_URL_Converter_Strategy $url_converter, \WP_Query $wp_query, \WPML_Translation_Element_Factory $element_factory)
        {
        }
        public function get_url($translations, $lang)
        {
        }
        /**
         * The permalink needs to be adjusted when the URL structure contains the category tag (%category%).
         *
         * @param WP_Term $cat
         *
         * @return WP_Term
         */
        public function adjust_category_in_post_permalink($cat)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 17/10/17
     * Time: 5:18 PM
     */
    class WPML_LS_Languages_Cache
    {
        public function __construct($template_args, $current_language, $default_language, $wp_query)
        {
        }
        public function get()
        {
        }
        public function set($ls_languages)
        {
        }
    }
    class WPML_LS_Migration
    {
        const ICL_OPTIONS_SLUG = 'icl_sitepress_settings';
        /**
         * WPML_LS_Migration constructor.
         *
         * @param WPML_LS_Settings     $settings
         * @param SitePress            $sitepress
         * @param WPML_LS_Slot_Factory $slot_factory
         */
        public function __construct($settings, $sitepress, $slot_factory)
        {
        }
        /**
         * @param array $old_settings
         *
         * @return mixed
         */
        public function get_converted_settings($old_settings)
        {
        }
        /**
         * @since 3.7.0 Convert menu LS handled now by ID instead of slugs previously
         *
         * @param array $settings
         *
         * @return array
         */
        public function convert_menu_ids($settings)
        {
        }
    }
    class WPML_LS_Model_Build extends \WPML_SP_User
    {
        const LINK_CSS_CLASS = 'wpml-ls-link';
        /**
         * WPML_Language_Switcher_Render_Model constructor.
         *
         * @param WPML_LS_Settings $settings
         * @param SitePress        $sitepress
         * @param string           $css_prefix
         */
        public function __construct($settings, $sitepress, $css_prefix)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         * @param array        $template_data
         *
         * @return array
         */
        public function get($slot, $template_data = [])
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function get_slot_css_classes($slot)
        {
        }
        /**
         * @param string $group
         * @param string $slug
         *
         * @return string
         */
        public function get_slot_css_main_class($group, $slug)
        {
        }
        /**
         * @return string
         */
        public function get_css_prefix()
        {
        }
    }
}
namespace WPML\LanguageSwitcher {
    class LsTemplateDomainUpdater
    {
        public function run(\WPML\Collect\Support\Collection $data, \wpdb $wpdb)
        {
        }
        public function runUpdate($siteurl = null, $homepath = null)
        {
        }
    }
}
namespace {
    class WPML_LS_Menu_Item
    {
        /**
         * @see wp_setup_nav_menu_item() to decorate the object
         */
        public $ID;
        // The term_id if the menu item represents a taxonomy term.
        public $attr_title;
        // The title attribute of the link element for this menu item.
        public $classes = array();
        // The array of class attribute values for the link element of this menu item.
        public $db_id;
        // The DB ID of this item as a nav_menu_item object, if it exists (0 if it doesn't exist).
        public $description;
        // The description of this menu item.
        public $menu_item_parent;
        // The DB ID of the nav_menu_item that is this item's menu parent, if any. 0 otherwise.
        public $object = 'wpml_ls_menu_item';
        // The type of object originally represented, such as "category," "post", or "attachment."
        public $object_id;
        // The DB ID of the original object this menu item represents, e.g. ID for posts and term_id for categories.
        public $post_parent;
        // The DB ID of the original object's parent object, if any (0 otherwise).
        public $post_title;
        // A "no title" label if menu item represents a post that lacks a title.
        public $target;
        // The target attribute of the link element for this menu item.
        public $title;
        // The title of this menu item.
        public $type = 'wpml_ls_menu_item';
        // The family of objects originally represented, such as "post_type" or "taxonomy."
        public $type_label;
        // The singular label used to describe this type of menu item.
        public $url;
        // The URL to which this menu item points.
        public $xfn;
        // The XFN relationship expressed in the link of this menu item.
        public $_invalid = \false;
        // Whether the menu item represents an object that no longer exists.
        public $menu_order;
        public $post_type = 'nav_menu_item';
        // * Extra property => see [wpmlcore-3855]
        /**
         * WPML_LS_Menu_Item constructor.
         *
         * @param array  $language
         * @param string $item_content
         */
        public function __construct($language, $item_content)
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function __get($property)
        {
        }
    }
    class WPML_LS_Settings_Color_Presets
    {
        /**
         * @return array
         */
        public function get_defaults()
        {
        }
    }
}
namespace WPML\LanguageSwitcher\AjaxNavigation {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function add_hooks()
        {
        }
        public function enqueueScripts()
        {
        }
    }
}
namespace {
    class WPML_LS_Template extends \WPML_Templates_Factory
    {
        const FILENAME = 'template.twig';
        /**
         * WPML_Language_Switcher_Menu constructor.
         *
         * @param array $template_data
         * @param array $template_model
         */
        public function __construct($template_data, $template_model = array())
        {
        }
        /**
         * @param array $model
         */
        public function set_model($model)
        {
        }
        /**
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function get_html()
        {
        }
        /**
         * @param bool $with_version
         *
         * @return array
         */
        public function get_styles($with_version = \false)
        {
        }
        /**
         * @return bool
         */
        public function has_styles()
        {
        }
        /**
         * @param bool $with_version
         *
         * @return array
         */
        public function get_scripts($with_version = \false)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function get_resource_handler($index)
        {
        }
        /**
         * @return mixed|string|bool
         */
        public function get_inline_style_handler()
        {
        }
        /**
         * @return string
         */
        public function get_version()
        {
        }
        protected function init_template_base_dir()
        {
        }
        /**
         * @return string Template filename
         */
        public function get_template()
        {
        }
        /**
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @return array
         */
        public function get_template_data()
        {
        }
        /**
         * @param array $template
         */
        public function set_template_data($template)
        {
        }
        /**
         * return bool
         */
        public function is_core()
        {
        }
        /**
         * @return array
         */
        public function supported_slot_types()
        {
        }
        /**
         * @return array
         */
        public function force_settings()
        {
        }
        public function is_path_valid()
        {
        }
        /**
         * @param string $template_string
         */
        public function set_template_string($template_string)
        {
        }
        /**
         * If an asset has a minified and a non-minified version,
         * we remove the non-minified version.
         *
         * @param array $assets
         *
         * @return array
         */
        public static function remove_non_minified_duplicates(array $assets)
        {
        }
    }
    class WPML_LS_Settings_Strings
    {
        public function __construct($slot_factory)
        {
        }
        /**
         * @param array $new_settings
         * @param array $old_settings
         */
        public function register_all($new_settings, $old_settings)
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function translate_all($settings)
        {
        }
    }
    class WPML_LS_Inline_Styles
    {
        /**
         * WPML_Language_Switcher_Render_Assets constructor.
         *
         * @param WPML_LS_Templates   $templates
         * @param WPML_LS_Settings    $settings
         * @param WPML_LS_Model_Build $model_build
         */
        public function __construct($templates, $settings, $model_build)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param array $slots
         *
         * @return string
         */
        public function get_slots_inline_styles($slots)
        {
        }
        /**
         * @return string
         */
        public function get_additional_style()
        {
        }
        public function wp_enqueue_scripts_action()
        {
        }
        public function admin_output()
        {
        }
    }
    class WPML_LS_Render extends \WPML_SP_User
    {
        const THE_CONTENT_FILTER_PRIORITY = 100;
        /**
         * WPML_Language_Switcher_Menu constructor.
         *
         * @param WPML_LS_Templates     $templates
         * @param WPML_LS_Settings      $settings
         * @param WPML_LS_Model_Build   $model_build
         * @param WPML_LS_Inline_Styles $inline_styles
         * @param SitePress             $sitepress
         */
        public function __construct($templates, $settings, $model_build, $inline_styles, $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return string
         */
        public function render($slot)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return array
         */
        public function get_preview($slot)
        {
        }
        /**
         * @param array   $items
         * @param WP_Term $menu
         *
         * @return array
         */
        public function wp_get_nav_menu_items_filter($items, $menu)
        {
        }
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-4706#comment=102-231339
         *
         * @param WP_Post|WPML_LS_Menu_Item|object $item
         *
         * @return object $item
         */
        public function maybe_repair_menu_item($item)
        {
        }
        public function is_widgets_page()
        {
        }
        /**
         * @param string $content
         *
         * @return string
         */
        public function the_content_filter($content)
        {
        }
        /**
         * @param WPML_LS_Slot $slot
         *
         * @return mixed|string|void
         */
        public function post_translations_label($slot)
        {
        }
        public function wp_footer_action()
        {
        }
    }
    class WPML_Get_LS_Languages_Status
    {
        public function is_getting_ls_languages()
        {
        }
        public function start()
        {
        }
        public function end()
        {
        }
        /**
         * @return WPML_Get_LS_Languages_Status
         */
        public static function get_instance()
        {
        }
        /**
         * @param WPML_Get_LS_Languages_Status $instance
         */
        public static function set_instance($instance)
        {
        }
    }
    class WPML_LS_Dependencies_Factory
    {
        /**
         * WPML_LS_Dependencies_Factory constructor.
         *
         * @param SitePress $sitepress
         * @param array     $parameters
         */
        public function __construct(\SitePress $sitepress, array $parameters = [])
        {
        }
        /**
         * @return SitePress
         */
        public function sitepress()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function parameter($key)
        {
        }
        /**
         * @return WPML_LS_Templates
         */
        public function templates()
        {
        }
        /**
         * @return WPML_LS_Slot_Factory
         */
        public function slot_factory()
        {
        }
        /**
         * @return WPML_LS_Settings
         */
        public function settings()
        {
        }
        /**
         * @return WPML_LS_Model_Build
         */
        public function model_build()
        {
        }
        /**
         * @return WPML_LS_Inline_Styles
         */
        public function inline_styles()
        {
        }
        /**
         * @return WPML_LS_Render
         */
        public function render()
        {
        }
        /**
         * @return WPML_LS_Admin_UI
         */
        public function admin_ui()
        {
        }
        /**
         * @return WPML_LS_Shortcodes
         */
        public function shortcodes()
        {
        }
        /**
         * @return WPML_LS_Shortcodes
         */
        public function actions()
        {
        }
    }
    /**
     * Class WPML_LS_Public_API
     */
    class WPML_LS_Public_API
    {
        /** @var SitePress $sitepress */
        protected $sitepress;
        /**
         * WPML_LS_Public_API constructor.
         *
         * @param WPML_LS_Settings     $settings
         * @param WPML_LS_Render       $render
         * @param SitePress            $sitepress
         * @param WPML_LS_Slot_Factory $slot_factory
         */
        public function __construct(\WPML_LS_Settings $settings, \WPML_LS_Render $render, \SitePress $sitepress, \WPML_LS_Slot_Factory $slot_factory = \null)
        {
        }
        /**
         * @param array       $args
         * @param string|null $twig_template
         *
         * @return string
         */
        protected function render($args, $twig_template = \null)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        protected function convert_shortcode_args_aliases($args)
        {
        }
        /**
         * @return array
         */
        public static function get_argument_aliases()
        {
        }
    }
    /**
     * Class WPML_LS_Shortcodes
     */
    class WPML_LS_Shortcodes extends \WPML_LS_Public_API
    {
        public function init_hooks()
        {
        }
        /**
         * @param array|string $args
         * @param string|null  $content
         * @param string       $tag
         *
         * @return string
         */
        public function callback($args, $content = \null, $tag = '')
        {
        }
    }
    class WPML_LS_Actions extends \WPML_LS_Public_API
    {
        public function init_hooks()
        {
        }
        /**
         * @param array       $args
         * @param string|null $twig_template
         */
        public function callback($args, $twig_template = \null)
        {
        }
    }
    class WPML_LS_Settings_Sanitize
    {
        /**
         * @param array $s
         * @return array
         */
        public function sanitize_all_settings($s)
        {
        }
    }
    /**
     * Class WPML_LS_Slot
     */
    class WPML_LS_Slot
    {
        /**
         * WPML_Language_Switcher_Slot constructor.
         *
         * @param array $args
         */
        public function __construct(array $args = array())
        {
        }
        /**
         * @param string $property
         *
         * @return mixed
         */
        public function get($property)
        {
        }
        /**
         * @param string $property
         * @param mixed  $value
         */
        public function set($property, $value)
        {
        }
        /**
         * @return mixed|string|null
         */
        public function group()
        {
        }
        /**
         * @return mixed|string|null
         */
        public function slug()
        {
        }
        /**
         * @return bool
         */
        public function is_menu()
        {
        }
        /**
         * @return bool
         */
        public function is_sidebar()
        {
        }
        /**
         * @return bool
         */
        public function is_footer()
        {
        }
        /**
         * @return bool
         */
        public function is_post_translations()
        {
        }
        /**
         * @return bool
         */
        public function is_shortcode_actions()
        {
        }
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @return mixed
         */
        public function template()
        {
        }
        /**
         * @return mixed
         */
        public function template_string()
        {
        }
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
        /**
         * The use of a plain object does not work in Twig
         * e.g: slot_settings[ option.name ~ "_normal" ] (see in panel-colors.twig)
         *
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @param string $slug
         *
         * @return string|null
         */
        protected function get_core_template($slug)
        {
        }
    }
    class WPML_LS_Shortcode_Actions_Slot extends \WPML_LS_Slot
    {
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
        public function is_enabled()
        {
        }
    }
    class WPML_LS_Footer_Slot extends \WPML_LS_Slot
    {
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Menu_Slot extends \WPML_LS_Slot
    {
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Sidebar_Slot extends \WPML_LS_Slot
    {
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Post_Translations_Slot extends \WPML_LS_Slot
    {
        /**
         * @return array
         */
        protected function get_allowed_properties()
        {
        }
    }
    class WPML_LS_Slot_Factory
    {
        /**
         * @param array|WPML_LS_Slot $args
         *
         * @return WPML_LS_Slot
         */
        public function get_slot($args)
        {
        }
        /**
         * @param string $slot_group
         *
         * @return array
         */
        public function get_default_slot_arguments($slot_group)
        {
        }
        /**
         * @param string $slot_group
         *
         * @return WPML_LS_Slot
         */
        public function get_default_slot($slot_group)
        {
        }
        /**
         * @param string $slug
         *
         * @return string|null
         */
        public function get_core_templates($slug)
        {
        }
    }
    class WPML_LS_Admin_UI extends \WPML_Templates_Factory
    {
        const NONCE_NAME = 'wpml-language-switcher-admin';
        const MAIN_UI_TEMPLATE = 'layout-main.twig';
        const RESET_UI_TEMPLATE = 'layout-reset.twig';
        const BUTTON_TEMPLATE = 'layout-slot-edit-button.twig';
        const SLOT_SLUG_PLACEHOLDER = '%id%';
        const RESET_NONCE_NAME = 'wpml-language-switcher-reset';
        /**
         * WPML_Language_Switcher_Menu constructor.
         *
         * @param WPML_LS_Templates     $templates
         * @param WPML_LS_Settings      $settings
         * @param WPML_LS_Render        $render
         * @param WPML_LS_Inline_Styles $inline_styles
         * @param SitePress             $sitepress
         * @param WPML_LS_Assets        $assets
         */
        public function __construct($templates, $settings, $render, $inline_styles, $sitepress, $assets = \null)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return string
         */
        public static function get_page_hook()
        {
        }
        /**
         * @param string $hook
         */
        public function admin_enqueue_scripts_action($hook)
        {
        }
        public function admin_head_action()
        {
        }
        public function save_settings_action()
        {
        }
        public function update_preview_action()
        {
        }
        /**
         * @param array $items
         *
         * @return array
         */
        public function languages_navigation_items_filter($items)
        {
        }
        public function after_languages_url_format_action()
        {
        }
        /**
         * @param string|bool $theme_wpml_config_file
         */
        public function after_wpml_love_action($theme_wpml_config_file)
        {
        }
        /**
         * @param string     $type 'sidebars', 'menus', 'statics'
         * @param string|int $slug_or_id
         *
         * @return string
         */
        public function get_button_to_edit_slot($type, $slug_or_id)
        {
        }
        protected function init_template_base_dir()
        {
        }
        /**
         * @return string
         */
        public function get_template()
        {
        }
        /**
         * This method is compulsory but should not be used
         * Use "get_main_ui_model" and "get_reset_ui_model" instead
         *
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @return array
         */
        public function get_main_ui_model()
        {
        }
        /**
         * @return array
         */
        public function get_misc_strings()
        {
        }
        /**
         * @return array
         */
        public function get_tooltip_strings()
        {
        }
        /**
         * @return array
         */
        public function get_options_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_menus_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_sidebars_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_footer_section_strings()
        {
        }
        /**
         * @return array
         */
        public function get_post_translations_strings()
        {
        }
        /**
         * @return array
         */
        public function get_shortcode_actions_strings()
        {
        }
        /**
         * @return array
         */
        public function get_color_picker_strings()
        {
        }
        /**
         * @return array
         */
        public function get_javascript_strings()
        {
        }
        /**
         * @param string|bool $theme_wpml_config_file
         *
         * @return array
         */
        public function get_reset_ui_model($theme_wpml_config_file)
        {
        }
    }
}
namespace WPML\Media\Setup\Endpoint {
    class PrepareSetup implements \WPML\Ajax\IHandler
    {
        const LOCK_RELEASE_TIMEOUT = 2 * MINUTE_IN_SECONDS;
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class PerformSetup implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    class WPML_Media_Settings_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        public function create_hooks()
        {
        }
        public function get_screen_regex()
        {
        }
    }
    class WPML_Media_Settings
    {
        const ID = 'ml-content-setup-sec-media';
        public function __construct($wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_script()
        {
        }
        public function render()
        {
        }
        public function mcsetup_navigation_links(array $mcsetup_sections)
        {
        }
    }
}
namespace WPML\Media\Translate\Endpoint {
    class DuplicateFeaturedImages implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class TranslateExistingMedia implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class PrepareForTranslation implements \WPML\Ajax\IHandler
    {
        const LOCK_RELEASE_TIMEOUT = 2 * MINUTE_IN_SECONDS;
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
    class FinishMediaTranslation implements \WPML\Ajax\IHandler
    {
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    /**
     * WPML_Attachment_Action class file.
     *
     * @package WPML
     */
    /**
     * Class WPML_Attachment_Action
     */
    class WPML_Attachment_Action implements \IWPML_Action
    {
        /**
         * WPML_Attachment_Action constructor.
         *
         * @param SitePress $sitepress SitePress instance.
         * @param wpdb      $wpdb      wpdb instance.
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb)
        {
        }
        /**
         * Add hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Filter views.
         *
         * @param array $views Views.
         *
         * @return array
         */
        public function views_upload_actions($views)
        {
        }
        /**
         * Check if the image is not duplicated to another post before deleting it physically.
         *
         * @param string $file Full file name.
         *
         * @return string|null
         */
        public function delete_file_filter($file)
        {
        }
    }
}
namespace WPML\Media {
    class Loader implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public static function getData()
        {
        }
    }
}
namespace {
    class WPML_Model_Attachments
    {
        const ATTACHMENT_TYPE = 'post_attachment';
        /**
         * @param SitePress $sitepress
         * @param WPML_Post_Status $status_helper
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Status $status_helper)
        {
        }
        /**
         * @param int $attachment_id
         * @param int $duplicated_attachment_id
         */
        public function duplicate_post_meta_data($attachment_id, $duplicated_attachment_id)
        {
        }
        /**
         * @param int $trid
         * @param string $target_language
         *
         * @return null|WP_Post
         */
        public function find_duplicated_attachment($trid, $target_language)
        {
        }
        /**
         * @param WP_Post|null $attachment
         * @param int|false|null $parent_id_of_attachement
         * @param string $target_language
         *
         * @return int|null
         */
        public function fetch_translated_parent_id($attachment, $parent_id_of_attachement, $target_language)
        {
        }
        /**
         * @param int $new_parent_id
         * @param WP_Post $attachment
         */
        public function update_parent_id_in_existing_attachment($new_parent_id, $attachment)
        {
        }
        /**
         * @param int $attachment_id
         * @param string $target_language
         * @param int $parent_id_in_target_language
         * @param int $trid
         *
         * @return int
         * @throws WPML_Media_Exception
         */
        public function duplicate_attachment($attachment_id, $target_language, $parent_id_in_target_language, $trid)
        {
        }
    }
}
namespace WPML\Media {
    class FrontendHooks implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param string $caption
         * @param int    $postId
         *
         * @return string
         */
        public static function translateCaption($caption, $postId)
        {
        }
    }
}
namespace WPML\Media\Duplication {
    abstract class AbstractFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return bool
         */
        protected static function shouldActivateHooks()
        {
        }
    }
    class HooksFactory extends \WPML\Media\Duplication\AbstractFactory
    {
        public function create()
        {
        }
    }
    class Hooks
    {
        public static function add()
        {
        }
        public static function syncAttachedFile($meta_id, $object_id, $meta_key, $meta_value)
        {
        }
    }
}
namespace {
    class WPML_Media_Attachments_Duplication_Factory extends \WPML\Media\Duplication\AbstractFactory
    {
        public function create()
        {
        }
    }
    class WPML_Media_Attachments_Duplication
    {
        const WPML_MEDIA_PROCESSED_META_KEY = 'wpml_media_processed';
        /**
         * WPML_Media_Attachments_Duplication constructor.
         *
         * @param SitePress              $sitepress
         * @param WPML_Model_Attachments $attachments_model
         *
         * @internal param WPML_WP_API $wpml_wp_api
         */
        public function __construct(\SitePress $sitepress, \WPML_Model_Attachments $attachments_model, \wpdb $wpdb, \WPML_Language_Resolution $language_resolution)
        {
        }
        public function add_hooks()
        {
        }
        public function add_settings_hooks()
        {
        }
        public function save_attachment_actions($post_id)
        {
        }
        public function wp_generate_attachment_metadata($metadata, $attachment_id)
        {
        }
        public function save_translated_attachments($post_id)
        {
        }
        public function make_duplicate($master_post_id, $target_lang, $post_array, $target_post_id)
        {
        }
        /**
         * @param int            $attachment_id
         * @param int|false|null $parent_id
         * @param string         $target_language
         *
         * @return int|null
         */
        public function create_duplicate_attachment($attachment_id, $parent_id, $target_language)
        {
        }
        public function sync_on_translation_complete($new_post_id, $fields, $job)
        {
        }
        public function record_original_thumbnail_ids_and_sync($meta_id, $object_id, $meta_key, $meta_value)
        {
        }
        /**
         * @param int     $pidd
         * @param WP_Post $post
         */
        function save_post_actions($pidd, $post)
        {
        }
        /**
         * @param int     $pidd
         * @param WP_Post $post
         */
        function sync_attachments($pidd, $post)
        {
        }
        /**
         * @param int      $post_id
         * @param int|null $request_post_thumbnail_id
         */
        public function sync_post_thumbnail($post_id, $request_post_thumbnail_id = \null)
        {
        }
        protected function are_post_thumbnails_still_in_sync($source_id, $source_thumbnail_id, $translation)
        {
        }
        function duplicate_post_attachments($pidd, $icl_trid, $source_lang = \null, $lang = \null)
        {
        }
        /**
         * @param int    $source_attachment_id
         * @param int    $pidd
         * @param string $lang
         *
         * @return int|null|WP_Error
         */
        public function create_duplicate_attachment_not_static($source_attachment_id, $pidd, $lang)
        {
        }
        /**
         * @param int $limit
         * @param int $offset Offset to use for getting thumbnails. Default: 0.
         *
         * @return array
         */
        public function get_post_thumbnail_map($limit = 0, $offset = 0)
        {
        }
        /**
         * @param \stdClass $post       contains properties `ID` and `post_type`
         * @param array     $thumbnails a map of post ID => thumbnail ID
         */
        public function duplicate_featured_image_in_post($post, $thumbnails = array())
        {
        }
        public function ajax_batch_duplicate_featured_images()
        {
        }
        public function batch_duplicate_featured_images($outputResult = \true, $featured_images_left = \null)
        {
        }
        public function ajax_batch_duplicate_media()
        {
        }
        public function batch_duplicate_media($outputResult = \true)
        {
        }
        public function ajax_batch_translate_media()
        {
        }
        public function batch_translate_media($outputResult = \true)
        {
        }
        public function batch_set_initial_language()
        {
        }
        public function ajax_batch_scan_prepare()
        {
        }
        public function batch_scan_prepare($outputResult = \true)
        {
        }
        public function ajax_batch_mark_processed()
        {
        }
        public function batch_mark_processed($outputResult = \true)
        {
        }
        public function create_duplicated_media($attachment)
        {
        }
        function set_content_defaults_prepare()
        {
        }
        public function wpml_media_set_content_defaults()
        {
        }
    }
    class WPML_Media_Exception extends \Exception
    {
    }
    /**
     * WPML_Attachment_Action_Factory
     *
     * @package WPML
     */
    /**
     * Class WPML_Attachment_Action_Factory
     */
    class WPML_Attachment_Action_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader, \IWPML_AJAX_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /**
         * Get load action.
         *
         * @return string
         */
        public function get_load_action()
        {
        }
        /**
         * Create attachment action.
         *
         * @return WPML_Attachment_Action
         */
        public function create()
        {
        }
    }
    class WPML_TM_Editors
    {
        const ATE = 'ate';
        const WPML = 'wpml';
        const WP = 'wp';
        const NONE = 'none';
    }
}
namespace WPML\TM\Editor {
    class ClassicEditorActions
    {
        public function addHooks()
        {
        }
        public function saveJob()
        {
        }
    }
    class Editor
    {
        const ATE_JOB_COULD_NOT_BE_CREATED = 101;
        const ATE_EDITOR_URL_COULD_NOT_BE_FETCHED = 102;
        const ATE_IS_NOT_ACTIVE = 103;
        /**
         * Editor constructor.
         *
         * @param CloneJobs $clone_jobs
         * @param Manual $manualJobs
         */
        public function __construct(\WPML\TM\Menu\TranslationQueue\CloneJobs $clone_jobs, \WPML\TM\Jobs\Manual $manualJobs)
        {
        }
        /**
         * @param array $params
         *
         * @return array
         */
        public function open($params)
        {
        }
    }
    class ATERetry
    {
        /**
         * @param int $jobId
         *
         * @return bool
         */
        public static function hasFailed($jobId)
        {
        }
        /**
         * @param int $jobId
         *
         * @return int
         */
        public static function getCount($jobId)
        {
        }
        /**
         * @param int $jobId
         */
        public static function incrementCount($jobId)
        {
        }
        /**
         * @param int $jobId
         */
        public static function reset($jobId)
        {
        }
        /**
         * @param int $jobId
         *
         * @return string
         */
        public static function getOptionName($jobId)
        {
        }
    }
    class ManualJobCreationErrorNotice implements \IWPML_Backend_Action
    {
        const RETRY_LIMIT = 3;
        public function add_hooks()
        {
        }
        public static function retryMessage(array $params)
        {
        }
        public static function retryFailedMessage()
        {
        }
        public static function ateNotActiveMessage()
        {
        }
    }
}
namespace {
    class WPML_TM_Old_Jobs_Editor
    {
        const OPTION_NAME = 'wpml-old-jobs-editor';
        public function __construct(\WPML_Translation_Job_Factory $job_factory)
        {
        }
        /**
         * @param int $job_id
         *
         * @return null|string
         */
        public function get($job_id)
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool
         */
        public function shouldStickToWPMLEditor($job_id)
        {
        }
        /**
         * @return string
         */
        public function editorForTranslationsPreviouslyCreatedUsingCTE()
        {
        }
        public function set($job_id, $editor)
        {
        }
        /**
         * @param int $job_id
         *
         * @return null|string
         */
        public function get_current_editor($job_id)
        {
        }
    }
}
namespace WPML\TM\Editor {
    class ATEDetailedErrorMessage
    {
        const ERROR_DETAILS_OPTION = 'wpml_ate_error_details';
        /**
         * Parses error data and saves it to options table.
         *
         * @param $errorResponse
         *
         * @return void
         */
        public static function saveDetailedError($errorResponse)
        {
        }
        /**
         * Returns single or multiple formatted error message depending on errors array existence in response.
         *
         * @param string $appendText
         *
         * @return string|null
         */
        public static function readDetailedError($appendText = null)
        {
        }
    }
}
namespace {
    abstract class WPML_TM_Resources_Factory
    {
        protected $ajax_actions;
        /**
         * @var WPML_WP_API
         */
        protected $wpml_wp_api;
        /**
         * @param WPML_WP_API $wpml_wp_api
         */
        public function __construct(&$wpml_wp_api)
        {
        }
        public abstract function enqueue_resources($hook_suffix);
        public abstract function register_resources($hook_suffix);
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Translations extends \WPML_SP_User
    {
        /** @var bool */
        public $skip_empty = \false;
        /** @var bool */
        public $all_statuses = \false;
        /** @var bool */
        public $skip_cache = \false;
        /** @var bool */
        public $skip_recursions = \false;
        /**
         * WPML_Translations constructor.
         *
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct(\SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @param int    $trid
         * @param string $wpml_element_type
         * @param bool $skipPrivilegeChecking
         *
         * @return array<string,\stdClass>
         */
        public function get_translations($trid, $wpml_element_type, $skipPrivilegeChecking = \false)
        {
        }
        public function link_elements(\WPML_Translation_Element $source_translation_element, \WPML_Translation_Element $target_translation_element, $target_language = \null)
        {
        }
        public function set_source_element(\WPML_Translation_Element $element, \WPML_Translation_Element $source_element)
        {
        }
        /**
         * @param WPML_Translation_Element $element
         * @param string                   $language_code
         */
        public function set_language_code(\WPML_Translation_Element $element, $language_code)
        {
        }
        /**
         * @param WPML_Translation_Element $element
         * @param int                      $trid
         *
         * @throws \UnexpectedValueException
         */
        public function set_trid(\WPML_Translation_Element $element, $trid)
        {
        }
        /**
         * @param \WPML_Translation_Element $duplicate
         * @param \WPML_Translation_Element $original
         *
         * @throws \UnexpectedValueException
         */
        public function make_duplicate_of(\WPML_Translation_Element $duplicate, \WPML_Translation_Element $original)
        {
        }
        /**
         * @param \WPML_Translation_Element $element
         *
         * @return WPML_Post_Element
         * @throws \InvalidArgumentException
         */
        public function is_a_duplicate_of(\WPML_Translation_Element $element)
        {
        }
        /**
         * @param \WPML_Translation_Element $element
         *
         * @return array
         * @throws \UnexpectedValueException
         * @throws \InvalidArgumentException
         */
        public function is_duplicated_by(\WPML_Translation_Element $element)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    interface WPML_Duplicable_Element
    {
    }
    /**
     * Use this class as parent class for translatable elements in WPML,
     * to have a common approach for retrieving and setting translation information.
     *
     * @author OnTheGo Systems
     */
    abstract class WPML_Translation_Element extends \WPML_SP_User
    {
        /** @var int */
        protected $id;
        /** @var WPML_WP_Cache */
        protected $wpml_cache;
        /**
         * WPML_Translation_Element constructor.
         *
         * @param int           $id
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct($id, \SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        public function get_id()
        {
        }
        /**
         * @return string|null
         */
        public function get_source_language_code()
        {
        }
        /**
         * @return stdClass
         * @throws \UnexpectedValueException
         */
        protected function get_language_details()
        {
        }
        abstract function get_element_id();
        abstract function get_wpml_element_type();
        /**
         * @param string $language_code
         *
         * @return WPML_Translation_Element|null
         * @throws \InvalidArgumentException
         */
        public function get_translation($language_code)
        {
        }
        /**
         * @return WPML_Translation_Element[]
         */
        public function get_translations()
        {
        }
        /**
         * @return WPML_Translation_Element[]
         */
        public function maybe_init_translations()
        {
        }
        /**
         * @return false|int
         */
        public function get_trid()
        {
        }
        /**
         * @return string|WP_Error
         */
        function get_wp_element_type()
        {
        }
        /**
         * @return mixed|WP_Error
         */
        abstract function get_wp_object();
        /**
         * @param mixed $element
         *
         * @return string
         */
        abstract function get_type($element = \null);
        /**
         * @param null|object $element_data null, or a standard object containing at least the `translation_id`, `language_code`, `element_id`, `source_language_code`, `element_type`, and `original` properties.
         *
         * @return WPML_Translation_Element
         */
        abstract function get_new_instance($element_data);
        /**
         * @return null|WPML_Translation_Element
         */
        public function get_source_element()
        {
        }
        /**
         * Determines whether the current element language is the root source element.
         *
         * @return bool
         */
        public function is_root_source()
        {
        }
        /**
         * @return string|null
         */
        public function get_language_code()
        {
        }
        protected function init_language_details()
        {
        }
        public function flush_cache()
        {
        }
        /** @return bool */
        public function is_in_default_language()
        {
        }
        abstract function is_translatable();
        abstract function is_display_as_translated();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Post_Element extends \WPML_Translation_Element implements \WPML_Duplicable_Element
    {
        /**
         * @return WP_Post
         */
        function get_wp_object()
        {
        }
        /**
         * @param WP_Post $post
         *
         * @return string
         */
        function get_type($post = \null)
        {
        }
        public function get_wpml_element_type()
        {
        }
        function get_element_id()
        {
        }
        /**
         * @param null|stdClass $element_data null, or a standard object containing at least the `translation_id`, `language_code`, `element_id`, `source_language_code`, `element_type`, and `original` properties.
         *
         * @return WPML_Post_Element
         * @throws \InvalidArgumentException
         */
        function get_new_instance($element_data)
        {
        }
        function is_translatable()
        {
        }
        function is_display_as_translated()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Term_Element extends \WPML_Translation_Element
    {
        /** @var string Taxonomy name */
        protected $taxonomy;
        /**
         * WPML_Term_Element constructor.
         *
         * @param int           $id term_id of Term Element.
         * @param SitePress     $sitepress
         * @param string        $taxonomy
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct($id, \SitePress $sitepress, $taxonomy = '', \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @return array|null|WP_Error|WP_Term
         */
        public function get_wp_object()
        {
        }
        /**
         * @param WP_Term $term
         *
         * @return string
         */
        public function get_type($term = \null)
        {
        }
        public function get_wpml_element_type()
        {
        }
        public function get_element_id()
        {
        }
        /**
         * @param null|stdClass $element_data null, or a standard object containing at least the `translation_id`, `language_code`, `element_id`, `source_language_code`, `element_type`, and `original` properties.
         *
         * @return WPML_Term_Element
         * @throws \InvalidArgumentException Exception.
         */
        public function get_new_instance($element_data)
        {
        }
        public function is_translatable()
        {
        }
        public function is_display_as_translated()
        {
        }
    }
    /** NOTE:
     *  Use the $wpml_post_translations or $wpml_term_translations globals for posts and taxonomy
     *  They are more efficient
     */
    class WPML_Element_Type_Translation
    {
        public function __construct(\wpdb $wpdb, \WPML_Cache_Factory $cache_factory, $element_type)
        {
        }
        function get_element_lang_code($element_id)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Menu_Element extends \WPML_Term_Element
    {
        /**
         * WPML_Menu_Element constructor.
         *
         * @param int           $id
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct($id, \SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @param stdClass $element_data standard object containing at least the `term_id` property.
         *
         * @return WPML_Menu_Element
         * @throws \InvalidArgumentException Exception.
         */
        public function get_new_instance($element_data)
        {
        }
    }
    class WPML_Translation_Element_Factory
    {
        const ELEMENT_TYPE_POST = 'Post';
        const ELEMENT_TYPE_TERM = 'Term';
        const ELEMENT_TYPE_MENU = 'Menu';
        /**
         * @param SitePress     $sitepress
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct(\SitePress $sitepress, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        /**
         * @param int    $id
         * @param string $type any of `WPML_Translation_Element_Factory::ELEMENT_TYPE_POST`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_TERM`, `WPML_Translation_Element_Factory::ELEMENT_TYPE_MENU`.
         *
         * @return WPML_Translation_Element
         * @throws InvalidArgumentException InvalidArgumentException.
         */
        public function create($id, $type)
        {
        }
        public function create_post($id)
        {
        }
        public function create_term($id)
        {
        }
        public function create_menu($id)
        {
        }
    }
    class WPML_TM_Post_Edit_TM_Editor_Select_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WPML\TM\PostEditScreen\Endpoints {
    class SetEditorMode implements \WPML\Ajax\IHandler
    {
        public function __construct(\SitePress $sitepress)
        {
        }
        public function run(\WPML\Collect\Support\Collection $data)
        {
        }
    }
}
namespace {
    class WPML_TM_Post_Edit_TM_Editor_Mode
    {
        const POST_META_KEY_USE_NATIVE = '_wpml_post_translation_editor_native';
        const TM_KEY_FOR_POST_TYPE_USE_NATIVE = 'post_translation_editor_native_for_post_type';
        const TM_KEY_GLOBAL_USE_NATIVE = 'post_translation_editor_native';
        /**
         * Check post meta first
         * Then check setting for post type
         * Then finally check global setting
         *
         * @param SitePress $sitepress
         * @param $post
         *
         * @return bool
         */
        public static function is_using_tm_editor(\SitePress $sitepress, $post_id)
        {
        }
        /**
         * @param SitePress $sitepress
         * @param int $postId
         *
         * @return array
         */
        public static function get_editor_settings(\SitePress $sitepress, $postId)
        {
        }
        /**
         * @param array $postIds list of post ids that should be checked is blocked.
         *
         * @return array list of post ids that are blocked and the reason why they are blocked.
         */
        public static function get_blocked_posts($postIds)
        {
        }
        /**
         * @param null|string $post_type
         */
        public static function delete_all_posts_option($post_type = \null)
        {
        }
    }
}
namespace WPML\TM\PostEditScreen {
    class TranslationEditorPostSettings
    {
        public function __construct($sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public static function localize()
        {
        }
        public function render($post)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WPML_XMLRPC extends \WPML_SP_User
    {
        /**
         * WPML_XMLRPC constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function init_hooks()
        {
        }
        function get_languages($args)
        {
        }
        public function get_post_trid($args)
        {
        }
        /**
         * @param int   $post_ID
         * @param array $args
         *
         * @throws \UnexpectedValueException
         * @throws \InvalidArgumentException
         */
        public function meta_weblog_xmlrpc_post_update_action($post_ID, $args)
        {
        }
        public function save_post_action($pidd, $post)
        {
        }
        public function xmlrpc_call($action)
        {
        }
        public function xmlrpc_methods($methods)
        {
        }
    }
}
namespace WPML\BrowserLanguageRedirect {
    class Dialog implements \IWPML_Backend_Action
    {
        const ACCEPTED = 'accepted';
        const USER_META = 'wpml-browser-redirect-dialog';
        const ACCEPT_ACTION = 'accept_wpml_browser_language_redirect_message';
        const NONCE_KEY = 'wpml-browser-language-redirect-message';
        public function add_hooks()
        {
        }
        public function enqueue_res()
        {
        }
        public function print_dialog_container()
        {
        }
        public function accept()
        {
        }
    }
}
namespace WPML\AdminLanguageSwitcher {
    class AdminLanguageSwitcher implements \IWPML_Frontend_Action
    {
        const LANGUAGE_SWITCHER_KEY = 'wpml_show_login_page_language_switcher';
        public function add_hooks()
        {
        }
        public function maybeSaveNewLanguage()
        {
        }
        public function triggerDropdown()
        {
        }
        /**
         * @param bool $state
         */
        public static function saveState($state)
        {
        }
        /**
         * @return bool
         */
        public static function isEnabled()
        {
        }
        public static function enable()
        {
        }
        public static function disable()
        {
        }
    }
    class DisableWpLanguageSwitcher implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param string $redirect_to
         * @param string $requested_redirect_to
         * @return string
         */
        public function removeWPLangFromRedirectUrl($redirect_to, $requested_redirect_to)
        {
        }
    }
    class AdminLanguageSwitcherRenderer
    {
        public static function render($languageOptions)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_Language_Per_Domain_SSO
     */
    class WPML_Language_Per_Domain_SSO
    {
        const SSO_NONCE = 'wpml_sso';
        const TRANSIENT_SSO_STARTED = 'wpml_sso_started';
        const TRANSIENT_DOMAIN = 'wpml_sso_domain_';
        const TRANSIENT_USER = 'wpml_sso_user_';
        const TRANSIENT_SESSION_TOKEN = 'wpml_sso_session_';
        const IFRAME_USER_TOKEN_KEY = 'wpml_sso_token';
        const IFRAME_USER_TOKEN_KEY_FOR_DOMAIN = 'wpml_sso_token_domain';
        const IFRAME_DOMAIN_HASH_KEY = 'wpml_sso_iframe_hash';
        const IFRAME_USER_STATUS_KEY = 'wpml_sso_user_status';
        const SSO_TIMEOUT = \MINUTE_IN_SECONDS;
        public function __construct(\SitePress $sitepress, \WPML_PHP_Functions $php_functions, \WPML_Cookie $wpml_cookie)
        {
        }
        public function init_hooks()
        {
        }
        public function init_action()
        {
        }
        /**
         * @param string  $user_login
         * @param WP_User $user
         */
        public function wp_login_action($user_login, \WP_User $user)
        {
        }
        /**
         * @param string           $redirect_to
         * @param string           $requested_redirect_to
         * @param WP_User|WP_Error $user
         *
         * @return string
         */
        public function add_redirect_user_token($redirect_to, $requested_redirect_to, $user)
        {
        }
        public function add_iframes_to_footer()
        {
        }
    }
    class WPML_REST_Request_Analyze_Factory
    {
        /**
         * @return WPML_REST_Request_Analyze
         */
        public static function create()
        {
        }
    }
    class WPML_Frontend_Redirection_Url
    {
        /**
         * @param string $url
         */
        public function __construct($url)
        {
        }
        /**
         * URL is being checked for apostrophes. If there are any, apostrophes are encoded.
         *
         * @return string URL with the encoded apostrophes.
         */
        public function encode_apostrophes_in_url()
        {
        }
    }
    class WPML_REST_Request_Analyze
    {
        public function __construct(\WPML_URL_Converter $url_converter, array $active_language_codes, \WP_Rewrite $wp_rewrite)
        {
        }
        /** @return bool */
        public function is_rest_request()
        {
        }
    }
    /**
     * Class WPML_Language_Resolution
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class WPML_Language_Resolution
    {
        /**
         * WPML_Language_Resolution constructor.
         *
         * @param string[] $active_language_codes
         * @param string   $default_lang
         */
        public function __construct($active_language_codes, $default_lang)
        {
        }
        public function reload()
        {
        }
        public function current_lang_filter($lang, \WPML_Request $wpml_request_handler)
        {
        }
        public function get_active_language_codes()
        {
        }
        public function is_language_hidden($lang_code)
        {
        }
        public function is_language_active($lang_code, $is_all_active = \false)
        {
        }
        /**
         * Returns the language_code of the http referrer's location from which a request originated.
         * Used to correctly determine the language code on ajax link lists for the post edit screen or
         * the flat taxonomy auto-suggest.
         *
         * @return string|null
         */
        public function get_referrer_language_code()
        {
        }
    }
    /*
     * @deprecated deprecated since version 4.4.0
     * This class has been replaced by WPML\Language\Detection\Frontend and is going to be removed in the next major release.
     *
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     *
     */
    class WPML_Frontend_Request extends \WPML_Request
    {
        public function __construct($url_converter, $active_languages, $default_language, $cookieLanguage, $wp_api)
        {
        }
        /**
         * @deprecated deprecated since version 4.4.0
         * @return false|string
         */
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
    /**
     * @deprecated This class has been replaced by WPML\Language\Detection\Backend and is going to be removed in the next major release.
     * @since 4.4.0
     * @see WPML\Language\Detection\Backend
     *
     * @package    wpml-core
     * @subpackage wpml-requests
     */
    class WPML_Backend_Request extends \WPML_Request
    {
        public function __construct($url_converter, $active_languages, $default_language, $cookieLanguage)
        {
        }
        /**
         * @return false|string
         */
        public function get_requested_lang()
        {
        }
        protected function get_cookie_name()
        {
        }
    }
    class WPML_Language_Domain_Validation
    {
        const VALIDATE_DOMAIN_KEY = '____icl_validate_domain';
        /**
         * @param WPML_WP_API $wp_api
         * @param WP_Http     $http
         *
         * @throws \InvalidArgumentException
         */
        public function __construct(\WPML_WP_API $wp_api, \WP_Http $http)
        {
        }
        /**
         * @param string $url
         *
         * @return bool
         */
        public function is_valid($url)
        {
        }
    }
    abstract class WPML_Redirection extends \WPML_URL_Converter_User
    {
        /** @var  WPML_Request $request_handler */
        protected $request_handler;
        /** @var WPML_Language_Resolution $lang_resolution */
        protected $lang_resolution;
        /**
         * @param WPML_URL_Converter       $url_converter
         * @param WPML_Request             $request_handler
         * @param WPML_Language_Resolution $lang_resolution
         */
        function __construct(&$url_converter, &$request_handler, &$lang_resolution)
        {
        }
        public abstract function get_redirect_target();
        protected function redirect_hidden_home()
        {
        }
    }
    class WPML_Redirect_By_Subdir extends \WPML_Redirection
    {
        /**
         * @return bool|string
         */
        public function get_redirect_target()
        {
        }
    }
    class WPML_Rootpage_Redirect_By_Subdir extends \WPML_Redirect_By_Subdir
    {
        /**
         * @param  array                    $urls
         * @param  WPML_Request             $request_handler
         * @param  WPML_URL_Converter       $url_converter
         * @param WPML_Language_Resolution $lang_resolution
         */
        public function __construct($urls, &$request_handler, &$url_converter, &$lang_resolution)
        {
        }
        public function get_redirect_target()
        {
        }
    }
    class WPML_Redirect_By_Param extends \WPML_Redirection
    {
        /**
         * @param array                    $tax_sync_option
         * @param WPML_URL_Converter       $url_converter
         * @param WPML_Request             $request_handler
         * @param WPML_Language_Resolution $lang_resolution
         * @param SitePress                $sitepress
         */
        public function __construct($tax_sync_option, &$url_converter, &$request_handler, &$lang_resolution, &$sitepress)
        {
        }
        public function init_hooks()
        {
        }
        /**
         * @return bool|string
         */
        public function get_redirect_target()
        {
        }
        /**
         * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-2822
         */
        public function template_redirect_action()
        {
        }
    }
    class WPML_Redirect_By_Domain extends \WPML_Redirection
    {
        /**
         * @param array                    $domains
         * @param WPML_WP_API              $wp_api
         * @param WPML_URL_Converter       $url_converter
         * @param WPML_Request             $request_handler
         * @param WPML_Language_Resolution $lang_resolution
         */
        public function __construct($domains, &$wp_api, &$request_handler, &$url_converter, &$lang_resolution)
        {
        }
        public function get_redirect_target($language = \false)
        {
        }
    }
    class WPML_Super_Globals_Validation
    {
        /**
         * @param string $key
         * @param int    $filter
         * @param mixed  $options
         *
         * @return mixed|null
         */
        public function get($key, $filter = \FILTER_SANITIZE_FULL_SPECIAL_CHARS, $options = \null)
        {
        }
        /**
         * @param string $key
         * @param int    $filter
         * @param mixed  $options
         *
         * @return mixed|null
         */
        public function post($key, $filter = \FILTER_SANITIZE_FULL_SPECIAL_CHARS, $options = \null)
        {
        }
    }
    class WPML_Frontend_Redirection extends \WPML_SP_User
    {
        /**
         * WPML_Frontend_Redirection constructor.
         *
         * @param  SitePress                $sitepress
         * @param  Frontend                 $request_handler
         * @param  WPML_Redirection         $redir_helper
         * @param  WPML_Language_Resolution $lang_resolution
         */
        public function __construct(&$sitepress, &$request_handler, &$redir_helper, &$lang_resolution)
        {
        }
        /**
         * Redirects to a URL corrected for the language information in it, in case request URI and $_REQUEST['lang'],
         * requested domain or $_SERVER['REQUEST_URI'] do not match and gives precedence to the explicit language parameter if
         * there.
         *
         * @return string The language code of the currently requested URL in case no redirection was necessary.
         */
        public function maybe_redirect()
        {
        }
    }
    class WPML_TM_Wizard_Options
    {
        const CURRENT_STEP = 'WPML_TM_Wizard_For_Manager_Current_Step';
        const WIZARD_COMPLETE_FOR_MANAGER = 'WPML_TM_Wizard_For_Manager_Complete';
        const WIZARD_COMPLETE_FOR_ADMIN = 'WPML_TM_Wizard_For_Admin_Complete';
        const WHO_WILL_TRANSLATE_MODE = 'WPML_TM_Wizard_Who_Mode';
        const ONLY_I_USER_META = 'WPML_TM_Wizard_Only_I';
    }
    class WPML_TM_Translation_Status
    {
        /** @var WPML_TM_Records $tm_records */
        protected $tm_records;
        public function __construct(\WPML_TM_Records $tm_records)
        {
        }
        public function init()
        {
        }
        public function filter_translation_status($status, $trid, $target_lang_code)
        {
        }
        public function reload()
        {
        }
        public function is_in_active_job($element_id, $target_lang_code, $element_type_prefix, $return_status = \false)
        {
        }
    }
    class WPML_TM_Post_Target_Lang_Filter extends \WPML_TM_Record_User
    {
        public function __construct(&$tm_records, &$tm_status, &$post_translations)
        {
        }
        /**
         * @param string[] $allowed_langs
         * @param int      $element_id
         * @param string   $element_type_prefix
         *
         * @return string[]
         */
        public function filter_target_langs($allowed_langs, $element_id, $element_type_prefix)
        {
        }
    }
    class WPML_TM_Translation_Status_Display
    {
        /**
         * @var WPML_TM_API
         */
        protected $tm_api;
        /**
         * @var SitePress
         */
        protected $sitepress;
        /**
         * WPML_TM_Translation_Status_Display constructor.
         *
         * @param wpdb $wpdb
         * @param SitePress $sitepress
         * @param WPML_Post_Status $status_helper
         * @param WPML_Translation_Job_Factory $job_factory
         * @param WPML_TM_API $tm_api
         */
        public function __construct(\wpdb $wpdb, \SitePress $sitepress, \WPML_Post_Status $status_helper, \WPML_Translation_Job_Factory $job_factory, \WPML_TM_API $tm_api)
        {
        }
        public function init()
        {
        }
        public function filter_status_css_class($css_class, $post_id, $lang, $trid)
        {
        }
        public function filter_status_text($text, $original_post_id, $lang, $trid)
        {
        }
        /**
         * @param string $link
         * @param int $post_id
         * @param string $lang
         * @param int $trid
         *
         * @return string
         */
        public function filter_status_link($link, $post_id, $lang, $trid)
        {
        }
        /**
         * @param string $html
         * @param int $post_id
         * @param string $lang
         * @param int $trid
         *
         * @return string
         */
        public function add_links_data_attributes($html, $post_id, $lang, $trid)
        {
        }
        public static function get_link_for_existing_job($job_id)
        {
        }
        /**
         * @param string $lang_to
         * @param string $lang_from
         * @param int $post_id
         *
         * @return bool
         */
        protected function is_lang_pair_allowed($lang_to, $lang_from = \null, $post_id = 0)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: andreasciamanna
     * Date: 22/05/2018
     * Time: 08:44
     */
    class WPML_Current_Screen
    {
        public function is_edit_posts_list()
        {
        }
        public function is_edit_post()
        {
        }
        public function get_posts()
        {
        }
        public function get_post_type()
        {
        }
        public function id_ends_with($suffix)
        {
        }
    }
    /**
     * Class WPML_Custom_Columns
     */
    class WPML_Custom_Columns implements \IWPML_Action
    {
        const COLUMN_KEY = 'icl_translations';
        const CUSTOM_COLUMNS_PRIORITY = 1010;
        /**
         * @var WPML_Post_Status_Display
         */
        public $post_status_display;
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_posts_management_column($columns)
        {
        }
        public function get_flags_column()
        {
        }
        /**
         * Add posts management column.
         *
         * @param string   $column_name
         * @param int|null $post_id
         */
        public function add_content_for_posts_management_column($column_name, $post_id = \null)
        {
        }
        /**
         * Check translation management column screen option.
         *
         * @param string $post_type Current post type.
         *
         * @return bool
         */
        public function show_management_column_content($post_type)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Add custom columns hooks.
         */
        public function add_custom_columns_hooks()
        {
        }
        public function preloadTranslationData()
        {
        }
    }
    /**
     * Class WPML_User_Options_Menu
     * Renders the WPML UI elements on the WordPress user profile edit screen
     */
    class WPML_User_Options_Menu
    {
        /**
         * WPML_User_Options_Menu constructor.
         *
         * @param SitePress $sitepress
         * @param WP_User   $current_user
         */
        public function __construct(\SitePress $sitepress, \WP_User $current_user)
        {
        }
        /**
         * @return string the html for the user profile edit screen element WPML
         * adds to it
         */
        public function render()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Custom_Columns_Factory implements \IWPML_Backend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        /**
         * @return WPML_Custom_Columns
         */
        public function create()
        {
        }
    }
    abstract class WPML_TM_Post_Link
    {
        /** @var SitePress $sitepress */
        protected $sitepress;
        /** @var int $post */
        protected $post_id;
        /**
         * WPML_TM_Post_Link constructor.
         *
         * @param SitePress $sitepress
         * @param int       $post_id
         */
        public function __construct($sitepress, $post_id)
        {
        }
    }
    abstract class WPML_TM_Post_Link_Anchor extends \WPML_TM_Post_Link
    {
        /**
         * WPML_TM_Post_Link_Anchor constructor.
         *
         * @param SitePress $sitepress
         * @param int $post_id
         * @param string $anchor
         * @param string $target
         */
        public function __construct(\SitePress $sitepress, $post_id, $anchor, $target = '')
        {
        }
        public function __toString()
        {
        }
        protected abstract function link_target();
    }
    class WPML_Custom_Types_Translation_UI
    {
        public function __construct(\WPML_Translation_Modes $translation_modes, \WPML_UI_Unlock_Button $unlock_button_ui)
        {
        }
        public function render_custom_types_header_ui($type_label)
        {
        }
        public function render_row($content_label, $name, $content_slug, $disabled, $current_translation_mode, $unlocked, $content_label_singular = \false)
        {
        }
        /**
         * @param bool   $unlocked
         * @param bool   $disabled
         * @param int    $mode
         * @param string $content_slug
         *
         * @return array
         */
        public static function get_disabled_state_for_mode($unlocked, $disabled, $mode, $content_slug)
        {
        }
        public function renderModeLabels()
        {
        }
    }
}
namespace WPML\Settings {
    class PostTypesUI extends \WPML_Custom_Types_Translation_UI
    {
        public function renderModeLabels()
        {
        }
        public function render_row($content_label, $name, $content_slug, $disabled, $current_translation_mode, $unlocked, $content_label_singular = false)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_Post_Edit_Custom_Field_Settings_Menu
     */
    class WPML_TM_Post_Edit_Custom_Field_Settings_Menu
    {
        /**
         * WPML_TM_Post_Edit_Custom_Field_Settings_Menu constructor.
         *
         * @param WPML_Custom_Field_Setting_Factory $settings_factory
         * @param WP_Post                           $post
         */
        public function __construct(&$settings_factory, $post)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return bool true if there were actual custom fields to display options for
         */
        public function is_rendered()
        {
        }
    }
    /**
     * Class WPML_Translation_Tree
     *
     * @package    wpml-core
     * @subpackage taxonomy-term-translation
     */
    class WPML_Translation_Tree extends \WPML_SP_User
    {
        /**
         * @param SitePress $sitepress
         * @param string    $element_type
         * @param object[]  $terms
         */
        public function __construct(&$sitepress, $element_type, $terms)
        {
        }
        /**
         * Returns all terms in the translation tree, ordered by hierarchy and as well as alphabetically within a level and/or parent term relationship.
         *
         * @return array
         */
        public function get_alphabetically_ordered_list()
        {
        }
    }
}
namespace WPML\TM\Menu {
    class PostLinkUrl
    {
        /**
         * @param int $postId
         *
         * @return string
         */
        public function viewLinkUrl($postId)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_TM_Post_View_Link_Anchor
     *
     * Creates post links with a given anchor text, pointing at the front-end
     * post view
     */
    class WPML_TM_Post_View_Link_Anchor extends \WPML_TM_Post_Link_Anchor
    {
        protected function link_target()
        {
        }
    }
    /**
     * Class WPML_Taxonomy_Translation_UI
     */
    class WPML_Taxonomy_Translation_UI
    {
        /**
         * WPML_Taxonomy_Translation constructor.
         *
         * @param SitePress                      $sitepress
         * @param string                         $taxonomy if given renders a specific taxonomy,
         *                                                 otherwise renders a placeholder
         * @param bool[]                         $args array with possible indices:
         *                                             'taxonomy_selector' => bool .. whether or not to show the taxonomy selector
         * @param WPML_UI_Screen_Options_Factory $screen_options_factory
         */
        public function __construct(\SitePress $sitepress, $taxonomy = '', array $args = array(), \WPML_UI_Screen_Options_Factory $screen_options_factory = \null)
        {
        }
        /**
         * Echos the HTML that serves as an entry point for the taxonomy translation
         * screen and enqueues necessary js.
         */
        public function render()
        {
        }
    }
    /**
     * Class WPML_Lang_Domains_Box
     *
     * Displays the table holding the language domains on languages.php
     */
    class WPML_Lang_Domains_Box extends \WPML_SP_User
    {
        public function render()
        {
        }
    }
    /**
     * class WPML_Taxonomy_Translation
     *
     * Used by WCML so be careful about modifications to the contructor
     */
    class WPML_Taxonomy_Translation
    {
        /**
         * WPML_Taxonomy_Translation constructor.
         *
         * @param string                         $taxonomy if given renders a specific taxonomy,
         *                                                 otherwise renders a placeholder
         * @param bool[]                         $args array with possible indices:
         *                                             'taxonomy_selector' => bool .. whether or not to show the taxonomy selector
         * @param WPML_UI_Screen_Options_Factory $screen_options_factory
         */
        public function __construct($taxonomy = '', $args = array(), $screen_options_factory = \null)
        {
        }
        /**
         * Echos the HTML that serves as an entry point for the taxonomy translation
         * screen and enqueues necessary js.
         */
        public function render()
        {
        }
    }
    class WPML_Admin_Scripts_Setup extends \WPML_Full_Translation_API
    {
        const PRIORITY_ENQUEUE_SCRIPTS = 10;
        /**
         * @param wpdb                    $wpdb
         * @param SitePress               $sitepress
         * @param WPML_Post_Translation   $post_translation
         * @param WPML_Terms_Translations $term_translation
         * @param string                  $page
         */
        public function __construct(&$wpdb, &$sitepress, &$post_translation, &$term_translation, $page)
        {
        }
        public function add_admin_hooks()
        {
        }
        public function register_styles()
        {
        }
        public function wpml_js_scripts_setup()
        {
        }
        function wpml_css_setup()
        {
        }
    }
    /**
     * Class WPML_TM_Post_Edit_Link_Anchor
     *
     * Creates post links with a given anchor text, pointing at the back-end
     * post edit view
     */
    class WPML_TM_Post_Edit_Link_Anchor extends \WPML_TM_Post_Link_Anchor
    {
        protected function link_target()
        {
        }
    }
    class WPML_Taxonomy_Translation_Screen_Data extends \WPML_WPDB_And_SP_User
    {
        const WPML_TAXONOMY_TRANSLATION_MAX_TERMS_RESULTS_SET = 1000;
        /**
         * WPML_Taxonomy_Translation_Screen_Data constructor.
         *
         * @param SitePress $sitepress
         * @param string    $taxonomy
         */
        public function __construct(&$sitepress, $taxonomy)
        {
        }
        /**
         * The returned array from this function is indexed as follows.
         * It holds an array of all terms to be displayed under [terms]
         * and the count of all terms matching the filter under [count].
         *
         * The array under [terms] itself is index as such:
         * [trid][lang]
         *
         * It holds in itself the terms objects of the to be displayed terms.
         * These are ordered by their names alphabetically.
         * Also their objects are amended by the index $term->translation_of holding the term_taxonomy_id of their original element
         * and their level under $term->level in case of hierarchical terms.
         *
         * Also the index [trid][source_lang] holds the source language of the term group.
         *
         * @return array
         */
        public function terms()
        {
        }
    }
    class WPML_Inactive_Content_Render extends \WPML_Twig_Template_Loader
    {
        const TEMPLATE = 'inactive-content.twig';
        public function __construct(\WPML_Inactive_Content $inactive_content, array $paths)
        {
        }
        public function render()
        {
        }
    }
    /**
     * Class WPML_TM_Post_Link_Factory
     *
     * Creates post links for the TM dashboard and the translation queue
     */
    class WPML_TM_Post_Link_Factory
    {
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Link to the front end, link text is the post title
         *
         * @param int $post_id
         *
         * @return string
         */
        public function view_link($post_id)
        {
        }
        /**
         * Link to the front end, link text is given by the anchor
         *
         * @param int    $post_id
         * @param string $anchor
         *
         * @return string
         */
        public function view_link_anchor($post_id, $anchor, $target = '')
        {
        }
        /**
         * Link to the backend, link text is given by the anchor
         *
         * @param int    $post_id
         * @param string $anchor
         *
         * @return string
         */
        public function edit_link_anchor($post_id, $anchor)
        {
        }
    }
    class WPML_Support_Page
    {
        /**
         * WPML_Support_Page constructor.
         *
         * @param WPML_WP_API $wpml_wp_api
         */
        public function __construct(&$wpml_wp_api)
        {
        }
        public function display_compatibility_issues()
        {
        }
    }
    class WPML_Post_Edit_Screen
    {
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Enqueues scripts and styles for the post edit screen.
         */
        function scripts_setup()
        {
        }
        /**
         * Filters the preview links on the post edit screen so that they always point to the currently used language
         * domain. This ensures that the user can actually see the preview, as he might not have the login cookie set for
         * the actual language domain of the post.
         *
         * @param string $link
         *
         * @return mixed
         */
        public function preview_post_link_filter($link)
        {
        }
        /**
         * @param array $permalink Array containing the sample permalink with placeholder for the post name, and the post name.
         *
         * @return array
         */
        public function get_sample_permalink_filter(array $permalink)
        {
        }
    }
    /**
     * Class WPML_TM_Post_View_Link_Title
     *
     * Creates post links with the post title as anchor text, pointing at the front-end
     * post view
     */
    class WPML_TM_Post_View_Link_Title extends \WPML_TM_Post_View_Link_Anchor
    {
        public function __construct(&$sitepress, $post_id)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Styles
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Styles
    {
        const HANDLE = 'wpml-tf-backend-options';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Styles
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Styles
    {
        const HANDLE = 'wpml-tf-frontend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Styles
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Styles
    {
        const HANDLE = 'wpml-tf-backend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Module
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Module
    {
        /**
         * WPML_TF_Module constructor.
         *
         * @param WPML_Action_Filter_Loader $action_filter_loader
         * @param IWPML_TF_Settings         $settings
         */
        public function __construct(\WPML_Action_Filter_Loader $action_filter_loader, \IWPML_TF_Settings $settings)
        {
        }
        public function run()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Feedback_Row_View
     */
    class WPML_TF_Backend_Feedback_Row_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/backend/';
        const SUMMARY_TEMPLATE = 'feedback-list-page-table-row.twig';
        const DETAILS_TEMPLATE = 'feedback-list-page-table-row-details.twig';
        /**
         * WPML_TF_Backend_Feedback_Row_View constructor.
         *
         * @param IWPML_Template_Service $template_service
         */
        public function __construct(\IWPML_Template_Service $template_service)
        {
        }
        /** @param WPML_TF_Feedback $feedback */
        public function render_summary_row(\WPML_TF_Feedback $feedback)
        {
        }
        /** @param WPML_TF_Feedback $feedback */
        public function render_details_row(\WPML_TF_Feedback $feedback)
        {
        }
        /** @return array */
        public static function get_columns_strings()
        {
        }
        /** @return array */
        public static function get_summary_strings()
        {
        }
        /** @return array */
        public static function get_details_strings()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_View
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/backend/';
        const TEMPLATE = 'options-ui.twig';
        const MAX_EXPIRATION_QUANTITY = 10;
        /**
         * WPML_TF_Frontend_Hooks constructor.
         *
         * @param IWPML_Template_Service $template_service
         * @param WPML_TF_Settings       $settings
         * @param SitePress              $sitepress
         */
        public function __construct(\IWPML_Template_Service $template_service, \WPML_TF_Settings $settings, \SitePress $sitepress)
        {
        }
        /**
         * @return string
         */
        public function render()
        {
        }
        /**
         * @return array
         */
        public static function get_strings()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Feedback_View
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Feedback_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/frontend/';
        const FORM_TEMPLATE = 'feedback-form.twig';
        const OPEN_TEMPLATE = 'feedback-open-button.twig';
        const CUSTOM_OPEN_LINK_TEMPLATE = 'feedback-custom-open-link.twig';
        const JS_OPEN_NODE_CLASS = 'js-wpml-tf-feedback-icon';
        /**
         * WPML_TF_Frontend_Hooks constructor.
         *
         * @param IWPML_Template_Service $template_service
         * @param SitePress              $sitepress
         * @param WPML_Queried_Object    $queried_object
         * @param WPML_TF_Settings       $settings
         */
        public function __construct(\IWPML_Template_Service $template_service, \SitePress $sitepress, \WPML_Queried_Object $queried_object, \WPML_TF_Settings $settings)
        {
        }
        /**
         * @return string
         */
        public function render_form()
        {
        }
        /**
         * @return string
         */
        public function render_open_button()
        {
        }
        /**
         * @param string|array $args
         *
         * @return string
         */
        public function render_custom_open_link($args)
        {
        }
        /** @return array */
        public static function get_default_arguments_for_open_link()
        {
        }
        /** @return array */
        public static function get_icon_css_classes()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Feedback_List_View
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Feedback_List_View
    {
        const TEMPLATE_FOLDER = '/templates/translation-feedback/backend/';
        const TEMPLATE_NAME = 'feedback-list-page.twig';
        const ITEMS_PER_PAGE = 20;
        /**
         * WPML_TF_Backend_Feedback_List_View constructor.
         *
         * @param IWPML_Template_Service       $template_service
         * @param WPML_TF_Feedback_Query       $feedback_query
         * @param WPML_Admin_Pagination        $pagination
         * @param WPML_Admin_Table_Sort        $table_sort
         * @param WPML_TF_Feedback_Page_Filter $page_filter
         */
        public function __construct(\IWPML_Template_Service $template_service, \WPML_TF_Feedback_Query $feedback_query, \WPML_Admin_Pagination $pagination, \WPML_Admin_Table_Sort $table_sort, \WPML_TF_Feedback_Page_Filter $page_filter)
        {
        }
        /** @return string */
        public function render_page()
        {
        }
    }
    /**
     * Interface WPML_Settings_Interface
     *
     * @author OnTheGoSystems
     */
    interface IWPML_TF_Settings
    {
        /**
         * @return array of name/value pairs
         *
         * Each property should have its own setter "set_{$property_name}"
         */
        public function get_properties();
    }
    /**
     * Class WPML_TF_Settings_Handler
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_TF_Settings_Handler
    {
        /**
         * @param string $class_name
         *
         * @return string
         */
        protected function get_option_name($class_name)
        {
        }
    }
    /**
     * Class WPML_TF_Settings
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Settings implements \IWPML_TF_Settings
    {
        const BUTTON_MODE_DISABLED = 'disabled';
        const BUTTON_MODE_LEFT = 'left';
        const BUTTON_MODE_RIGHT = 'right';
        const BUTTON_MODE_CUSTOM = 'custom';
        const ICON_STYLE_LEGACY = 'translation';
        const ICON_STYLE_STAR = 'star';
        const ICON_STYLE_THUMBSUP = 'thumbsup';
        const ICON_STYLE_BULLHORN = 'bullhorn';
        const ICON_STYLE_COMMENT = 'comment';
        const ICON_STYLE_QUOTE = 'quote';
        const DISPLAY_ALWAYS = 'always';
        const DISPLAY_CUSTOM = 'custom';
        const EXPIRATION_ON_PUBLISH_OR_UPDATE = 'publish_or_update';
        const EXPIRATION_ON_PUBLISH_ONLY = 'publish_only';
        const EXPIRATION_ON_UPDATE_ONLY = 'update_only';
        const DELAY_DAY = 1;
        const DELAY_WEEK = 7;
        const DELAY_MONTH = 30;
        /**
         * @param bool $enabled
         */
        public function set_enabled($enabled)
        {
        }
        /**
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @param string $button_mode
         */
        public function set_button_mode($button_mode)
        {
        }
        /**
         * @return string
         */
        public function get_button_mode()
        {
        }
        /** @param string $style */
        public function set_icon_style($style)
        {
        }
        /** @return string */
        public function get_icon_style()
        {
        }
        /**
         * @param array $languages_to
         */
        public function set_languages_to(array $languages_to)
        {
        }
        /**
         * @return null|array
         */
        public function get_languages_to()
        {
        }
        /**
         * @param string $display_mode
         */
        public function set_display_mode($display_mode)
        {
        }
        /**
         * @return string
         */
        public function get_display_mode()
        {
        }
        /**
         * @param string $expiration_mode
         */
        public function set_expiration_mode($expiration_mode)
        {
        }
        /**
         * @return string
         */
        public function get_expiration_mode()
        {
        }
        /**
         * @param int $expiration_delay_quantity
         */
        public function set_expiration_delay_quantity($expiration_delay_quantity)
        {
        }
        /**
         * @return int
         */
        public function get_expiration_delay_quantity()
        {
        }
        /**
         * @param int $expiration_delay_unit
         */
        public function set_expiration_delay_unit($expiration_delay_unit)
        {
        }
        /**
         * @return int
         */
        public function get_expiration_delay_unit()
        {
        }
        /**
         * @return int delay in days before expiration
         */
        public function get_expiration_delay_in_days()
        {
        }
        /**
         * @return array
         */
        public function get_properties()
        {
        }
    }
    /**
     * Class WPML_TF_Settings_Read
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Settings_Read extends \WPML_TF_Settings_Handler
    {
        /**
         * @param string $settings_class
         *
         * @return IWPML_TF_Settings
         *
         * @throws InvalidArgumentException
         */
        public function get($settings_class)
        {
        }
    }
    /**
     * Class WPML_TF_Settings_Write
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Settings_Write extends \WPML_TF_Settings_Handler
    {
        /**
         * @param IWPML_TF_Settings $settings
         *
         * @return bool
         */
        public function save(\IWPML_TF_Settings $settings)
        {
        }
    }
    /**
     * Class WPML_TF_TP_Ratings_Synchronize
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_TP_Ratings_Synchronize_Factory
    {
        /**
         * @return WPML_TF_TP_Ratings_Synchronize
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Feedback_List_View_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Feedback_List_View_Factory
    {
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Feedback_Update_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Feedback_Update_Factory
    {
        /** @return WPML_TF_XML_RPC_Feedback_Update */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Bulk_Actions_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Bulk_Actions_Factory
    {
        /**
         * @return WPML_TF_Backend_Bulk_Actions
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Common_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_WP_Cron_Events_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /** @return WPML_TF_WP_Cron_Events */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return WPML_TF_Backend_Hooks
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Common_Hooks_Factory
     * @author OnTheGoSystems
     */
    class WPML_TF_Common_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return WPML_TF_Common_Hooks
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        protected function get_screen_regex()
        {
        }
        /** @return null|WPML_TF_Backend_Options_Hooks */
        protected function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Post_List_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Post_List_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        protected function get_screen_regex()
        {
        }
        /** @return WPML_TF_Backend_Post_List_Hooks */
        protected function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Promote_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Promote_Hooks_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return string */
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_TF_AJAX_Feedback_List_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_AJAX_Feedback_List_Hooks_Factory implements \IWPML_AJAX_Action_Loader
    {
        /** @return WPML_TM_TF_Feedback_List_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_AJAX_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_AJAX_Hooks_Factory extends \WPML_AJAX_Base_Factory implements \IWPML_Backend_Action_Loader
    {
        const AJAX_ACTION = 'wpml-tf-backend-options';
        /**
         * @return IWPML_Action|null
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_AJAX_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_AJAX_Hooks_Factory extends \WPML_AJAX_Base_Factory
    {
        const AJAX_ACTION = 'wpml-tf-frontend-feedback';
        /**
         * @return IWPML_Action|null
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TM_TF_Feedback_List_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_Feedback_List_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        public function get_screen_regex()
        {
        }
        /** @return WPML_TM_TF_Feedback_List_Hooks */
        public function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Service_Change_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Service_Change_Hooks_Factory implements \IWPML_Backend_Action_Loader
    {
        /** @return WPML_TF_Translation_Service_Change_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Hooks_Factory implements \IWPML_Frontend_Action_Loader
    {
        /** @return WPML_TF_XML_RPC_Hooks */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Hooks_Factory implements \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /**
         * WPML_TF_Frontend_Hooks_Factory constructor.
         *
         * @param WPML_Queried_Object                   $queried_object
         * @param WPML_TF_Frontend_Display_Requirements $display_requirements
         */
        public function __construct(\WPML_Queried_Object $queried_object = \null, \WPML_TF_Frontend_Display_Requirements $display_requirements = \null)
        {
        }
        /**
         * The frontend hooks must be loaded when the request has been parsed (in "wp")
         * to avoid unnecessary instantiation if the current page is not a translation
         *
         * @return string
         */
        public function get_load_action()
        {
        }
        /**
         * @return null|WPML_TF_Frontend_Hooks
         */
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks_Factory extends \WPML_AJAX_Base_Factory implements \IWPML_Backend_Action_Loader
    {
        const AJAX_ACTION = 'wpml-tf-backend-feedback-edit';
        public function create()
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Queue_Hooks_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Queue_Hooks_Factory extends \WPML_Current_Screen_Loader_Factory
    {
        /** @return string */
        protected function get_screen_regex()
        {
        }
        /** @return WPML_TF_Translation_Queue_Hooks */
        protected function create_hooks()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Bulk_Actions
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Bulk_Actions
    {
        /**
         * WPML_TF_Feedback_List_Bulk_Action_Hooks constructor.
         *
         * @param WPML_TF_Data_Object_Storage $feedback_storage
         * @param WPML_WP_API                 $wp_api
         * @param WPML_TF_Backend_Notices     $backend_notices
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_WP_API $wp_api, \WPML_TF_Backend_Notices $backend_notices)
        {
        }
        /**
         * Method bulk_action_callback
         */
        public function process()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Notices
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Notices
    {
        const GROUP = 'wpml_tf_backend_notices';
        const BULK_UPDATED = 'bulk_updated';
        /**
         * @param array $updated_feedback_ids
         * @parem string
         */
        public function add_bulk_updated_notice(array $updated_feedback_ids, $action)
        {
        }
        /**
         * Add action to remove updated notice after display
         */
        public function remove_bulk_updated_notice_after_display()
        {
        }
        /**
         * Remove bulk_updated notice
         */
        public function remove_bulk_updated_notice()
        {
        }
    }
    /**
     * Class WPML_TF_Promote_Notices
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Promote_Notices
    {
        const NOTICE_GROUP = 'wpml-tf-promote';
        const NOTICE_NEW_SITE = 'notice-new-site';
        const DOC_URL = 'https://wpml.org/documentation/getting-started-guide/getting-visitor-feedback-about-your-sites-translations/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmlcore';
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param int $user_id
         */
        public function show_notice_for_new_site($user_id)
        {
        }
        public function remove()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Display_Requirements
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Display_Requirements
    {
        /**
         * WPML_TF_Frontend_Display_Requirements constructor.
         *
         * @param WPML_Queried_Object $queried_object
         * @param WPML_TF_Settings    $settings
         */
        public function __construct(\WPML_Queried_Object $queried_object, \WPML_TF_Settings $settings)
        {
        }
        /**
         * @return bool
         */
        public function verify()
        {
        }
    }
    /**
     * Class WPML_TF_Rating_Average
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Post_Rating_Metrics
    {
        const QUANTITY_KEY = 'wpml_tf_post_rating_quantity';
        const AVERAGE_KEY = 'wpml_tf_post_rating_average';
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param int $post_id
         *
         * @return string
         */
        public function get_display($post_id)
        {
        }
        /** @param int $post_id */
        public function refresh($post_id)
        {
        }
    }
    /**
     * Class WPML_TF_Document_Information
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Document_Information
    {
        /** @var  SitePress $sitepress */
        protected $sitepress;
        /** @var  int $id */
        protected $id;
        /** @var  string $type */
        protected $type;
        /** @var  stdClass $language_details */
        protected $language_details;
        /**
         * WPML_TF_Document_Information constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * @param int    $id
         * @param string $type
         */
        public function init($id, $type)
        {
        }
        /**
         * @return string|null
         */
        public function get_source_language()
        {
        }
        /**
         * @return string
         */
        public function get_language()
        {
        }
        /**
         * @return null|int
         */
        public function get_job_id()
        {
        }
        /**
         * @return null|int
         */
        protected function get_trid()
        {
        }
        /**
         * @param int $job_id
         *
         * @return bool
         */
        public function is_local_translation($job_id)
        {
        }
        /**
         * @param int $job_id
         *
         * @return int|stdClass
         */
        protected function get_translation_job($job_id)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Document_Information
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Document_Information extends \WPML_TF_Document_Information
    {
        /**
         * WPML_TF_Backend_Document_Information constructor.
         *
         * @param SitePress              $sitepress
         * @param WPML_TP_Client_Factory $tp_client_factory
         */
        public function __construct(\SitePress $sitepress, \WPML_TP_Client_Factory $tp_client_factory = \null)
        {
        }
        /**
         * @return false|null|string
         */
        public function get_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_title()
        {
        }
        /**
         * @param string $language_code
         *
         * @return string
         */
        public function get_flag_url($language_code)
        {
        }
        /**
         * @return string
         */
        public function get_edit_url()
        {
        }
        /**
         * @return null|int
         */
        public function get_source_id()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_url()
        {
        }
        /**
         * @return null|string
         */
        public function get_source_title()
        {
        }
        /**
         * @param int $job_id
         *
         * @return string
         */
        public function get_translator_name($job_id)
        {
        }
        /**
         * @param string $from
         * @param string $to
         *
         * @return array
         */
        public function get_available_translators($from, $to)
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Service
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Service
    {
        /**
         * WPML_TF_Translation_Service constructor.
         *
         * @param WPML_TP_Client_Factory $tp_client_factory
         */
        public function __construct(\WPML_TP_Client_Factory $tp_client_factory = \null)
        {
        }
        /** @return bool */
        public function allows_translation_feedback()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Page_Filter
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Page_Filter
    {
        /**
         * WPML_TF_Feedback_Page_Filter constructor.
         *
         * @param SitePress              $sitepress
         * @param WPML_TF_Feedback_Query $feedback_query
         */
        public function __construct(\SitePress $sitepress, \WPML_TF_Feedback_Query $feedback_query)
        {
        }
        /**
         * @return array
         */
        public static function get_filter_keys()
        {
        }
        /**
         * Will not create filters inside the trash
         * And will not include the "trash" status in the status row
         */
        public function populate_counters_and_labels()
        {
        }
        /**
         * @return array
         */
        public function get_all_and_trash_data()
        {
        }
        /**
         * @return array
         */
        public function get_statuses_data()
        {
        }
        /**
         * @return array
         */
        public function get_languages_data()
        {
        }
        /**
         * @return array
         */
        public function get_current_filters()
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Scripts
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Scripts
    {
        const HANDLE = 'wpml-tf-frontend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Scripts
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Scripts
    {
        const HANDLE = 'wpml-tf-backend';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Scripts
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Scripts
    {
        const HANDLE = 'wpml-tf-backend-options';
        /**
         * method enqueue
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class WPML_TM_TF_Module
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_Module
    {
        /**
         * WPML_TF_Module constructor.
         *
         * @param WPML_Action_Filter_Loader $action_filter_loader
         * @param WPML_TF_Settings          $settings
         */
        public function __construct(\WPML_Action_Filter_Loader $action_filter_loader, \WPML_TF_Settings $settings)
        {
        }
        public function run()
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Feedback_Update
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Feedback_Update
    {
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TP_Project $tp_project)
        {
        }
        public function set_status(array $args)
        {
        }
    }
    /**
     * Class WPML_TF_XML_RPC_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_XML_RPC_Hooks implements \IWPML_Action
    {
        public function __construct(\WPML_TF_XML_RPC_Feedback_Update_Factory $xml_rpc_feedback_update_factory, \WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $methods
         *
         * @return array
         */
        public function add_tf_xmlrpc_methods($methods)
        {
        }
        /** @param array $args */
        public function update_feedback_status(array $args)
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_Hooks implements \IWPML_Action
    {
        /**
         * WPML_TF_Frontend_Hooks constructor.
         *
         * @param WPML_TF_Frontend_Feedback_View $feedback_view
         * @param WPML_TF_Frontend_Scripts       $scripts
         * @param WPML_TF_Frontend_Styles        $styles
         */
        public function __construct(\WPML_TF_Frontend_Feedback_View $feedback_view, \WPML_TF_Frontend_Scripts $scripts, \WPML_TF_Frontend_Styles $styles)
        {
        }
        /**
         * method init
         */
        public function add_hooks()
        {
        }
        /**
         * method enqueue_scripts_action
         */
        public function enqueue_scripts_action()
        {
        }
        /**
         * method render_feedback_form
         */
        public function render_feedback_form()
        {
        }
        /** @param string|array $args */
        public function render_custom_form_open_link($args)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Promote_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Promote_Hooks implements \IWPML_Action
    {
        /**
         * WPML_TF_Backend_Promote_Hooks constructor.
         *
         * @param WPML_TF_Promote_Notices          $promote_notices
         * @param bool                             $is_setup_complete
         * @param WPML_TF_Translation_Service $translation_service
         */
        public function __construct(\WPML_TF_Promote_Notices $promote_notices, $is_setup_complete, \WPML_TF_Translation_Service $translation_service)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int      $new_post_id
         * @param array    $fields
         * @param stdClass $job
         */
        public function add_notice_for_manager_on_job_completed($new_post_id, $fields, $job)
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Service_Change_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Service_Change_Hooks implements \IWPML_Action
    {
        public function __construct(\WPML_TF_Settings_Read $settings_read, \WPML_TF_Settings_Write $settings_write, \WPML_TF_TP_Ratings_Synchronize_Factory $tp_ratings_synchronize_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function before_set_translation_service_callback(\stdClass $service)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Hooks implements \IWPML_Action
    {
        const PAGE_HOOK = 'wpml-translation-feedback-list';
        /**
         * WPML_TF_Backend_Hooks constructor.
         *
         * @param WPML_TF_Backend_Bulk_Actions_Factory       $bulk_actions_factory
         * @param WPML_TF_Backend_Feedback_List_View_Factory $feedback_list_view_factory
         * @param WPML_TF_Backend_Styles                     $backend_styles
         * @param WPML_TF_Backend_Scripts                    $backend_scripts
         * @param wpdb                                       $wpdb
         */
        public function __construct(\WPML_TF_Backend_Bulk_Actions_Factory $bulk_actions_factory, \WPML_TF_Backend_Feedback_List_View_Factory $feedback_list_view_factory, \WPML_TF_Backend_Styles $backend_styles, \WPML_TF_Backend_Scripts $backend_scripts, \wpdb $wpdb)
        {
        }
        /**
         * method add_hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Define translation feedback list menu and callback
         *
         * @param string $menu_id
         */
        public function add_translation_feedback_list_menu($menu_id)
        {
        }
        /**
         * Callback to display the feedback list page
         */
        public function translation_feedback_list_display()
        {
        }
        /**
         * @param string $hook
         */
        public function admin_enqueue_scripts_action($hook)
        {
        }
        public function bulk_actions_callback($current_screen)
        {
        }
        /**
         * @param string   $where
         * @param WP_Query $query
         *
         * @return string
         */
        public function maybe_exclude_rating_only_status($where, $query)
        {
        }
    }
    /**
     * Class WPML_TF_Frontend_AJAX_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Frontend_AJAX_Hooks implements \IWPML_Action
    {
        /**
         * WPML_TF_Frontend_AJAX_Hooks constructor.
         *
         * @param WPML_TF_Data_Object_Storage  $feedback_storage
         * @param WPML_TF_Document_Information $document_information
         * @param WPML_TF_Post_Rating_Metrics  $post_rating_metrics
         * @param WPML_TP_Client_Factory|null  $tp_client_factory
         * @param mixed[]|null                 $post_data
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TF_Document_Information $document_information, \WPML_TF_Post_Rating_Metrics $post_rating_metrics, \WPML_TP_Client_Factory $tp_client_factory = \null, array $post_data = \null)
        {
        }
        /**
         * method init
         */
        public function add_hooks()
        {
        }
        /**
         * Method callback
         */
        public function save_feedback_callback()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_Hooks implements \IWPML_Action
    {
        const WPML_LOVE_ID = '#lang-sec-10';
        /**
         * WPML_TF_Backend_Options_Hooks constructor.
         *
         * @param WPML_TF_Backend_Options_View    $options_view
         * @param WPML_TF_Backend_Options_Scripts $scripts
         * @param WPML_TF_Backend_Options_Styles  $styles
         * @param WPML_TF_Translation_Service     $translation_service
         */
        public function __construct(\WPML_TF_Backend_Options_View $options_view, \WPML_TF_Backend_Options_Scripts $scripts, \WPML_TF_Backend_Options_Styles $styles, \WPML_TF_Translation_Service $translation_service)
        {
        }
        /**
         * Method add_hooks
         */
        public function add_hooks()
        {
        }
        /**
         * Method to render the options UI
         */
        public function display_options_ui()
        {
        }
        /**
         * @param array $items
         *
         * @return mixed
         */
        public function insert_navigation_item($items)
        {
        }
        public function enqueue_scripts_action()
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Options_AJAX_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Options_AJAX_Hooks implements \IWPML_Action
    {
        /**
         * WPML_TF_Frontend_AJAX_Hooks constructor.
         *
         * @param WPML_TF_Settings        $settings
         * @param WPML_TF_Settings_Write  $settings_write
         * @param WPML_TF_Promote_Notices $promote_notices
         * @param array                   $post_data
         */
        public function __construct(\WPML_TF_Settings $settings, \WPML_TF_Settings_Write $settings_write, \WPML_TF_Promote_Notices $promote_notices, array $post_data)
        {
        }
        public function add_hooks()
        {
        }
        public function save_settings_callback()
        {
        }
    }
    /**
     * Class WPML_TM_TF_Feedback_List_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TM_TF_Feedback_List_Hooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param int|bool $use_translation_editor
         *
         * @return int|bool
         */
        public function maybe_force_to_use_translation_editor($use_translation_editor)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_Post_List_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_Post_List_Hooks implements \IWPML_Action
    {
        const RATING_COLUMN_ID = 'translation_rating';
        public function __construct(\WPML_TF_Post_Rating_Metrics $post_rating_metrics, \WPML_TF_Document_Information $document_information, \WPML_TF_Backend_Styles $styles)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_rating_column_header(array $columns)
        {
        }
        /**
         * @param string $column_name
         * @param int    $post_id
         */
        public function add_rating_column_content($column_name, $post_id)
        {
        }
        /**
         * @param array $columns
         *
         * @return array
         */
        public function add_rating_sortable_column(array $columns)
        {
        }
        public function order_posts_by_rating(\WP_Query $query)
        {
        }
        public function admin_enqueue_scripts_action()
        {
        }
    }
    /**
     * Class WPML_TF_Common_Hooks
     * @author OnTheGoSystems
     */
    class WPML_TF_Common_Hooks implements \IWPML_Action
    {
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage)
        {
        }
        /**
         * method init
         */
        public function add_hooks()
        {
        }
        /**
         * method init_action
         */
        public function init_action()
        {
        }
        /** @param int $post_id */
        public function cleanup_post_feedback_data($post_id)
        {
        }
    }
    /**
     * Class WPML_TF_Translation_Queue_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Translation_Queue_Hooks implements \IWPML_Action
    {
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage)
        {
        }
        public function add_hooks()
        {
        }
        public function add_reviewer_to_allowed_translators(array $allowed_translators, \WPML_Translation_Job $translation_job)
        {
        }
    }
    /**
     * Class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Backend_AJAX_Feedback_Edit_Hooks implements \IWPML_Action
    {
        /**
         * WPML_TF_Backend_AJAX_Feedback_Edit_Hooks constructor.
         *
         * @param WPML_TF_Feedback_Edit             $feedback_edit
         * @param WPML_TF_Backend_Feedback_Row_View $row_view
         * @param array                             $post_data
         */
        public function __construct(\WPML_TF_Feedback_Edit $feedback_edit, \WPML_TF_Backend_Feedback_Row_View $row_view, array $post_data)
        {
        }
        public function add_hooks()
        {
        }
        public function edit_feedback_callback()
        {
        }
    }
    /**
     * Class WPML_TF_TP_Ratings_Synchronize
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_TP_Ratings_Synchronize
    {
        const MAX_RATINGS_TO_SYNCHRONIZE = 5;
        const PENDING_SYNC_RATING_IDS_OPTION = 'wpml_tf_pending_sync_rating_ids';
        const MAX_ATTEMPTS_TO_SYNC = 3;
        /**
         * WPML_TF_TP_Ratings_Synchronize constructor.
         *
         * @param WPML_TF_Data_Object_Storage $feedback_storage
         * @param WPML_TP_API_TF_Ratings      $tp_ratings
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TP_API_TF_Ratings $tp_ratings)
        {
        }
        /** @param bool $clear_all_pending_ratings */
        public function run($clear_all_pending_ratings = \false)
        {
        }
    }
    /**
     * Class WPML_TF_WP_Cron_Events
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_WP_Cron_Events implements \IWPML_Action
    {
        const SYNCHRONIZE_RATINGS_EVENT = 'wpml_tf_synchronize_ratings_event';
        /**
         * WPML_TF_WP_Cron_Events constructor.
         *
         * @param WPML_TF_Settings_Read                  $settings_read
         * @param WPML_TF_TP_Ratings_Synchronize_Factory $ratings_synchronize_factory
         */
        public function __construct(\WPML_TF_Settings_Read $settings_read, \WPML_TF_TP_Ratings_Synchronize_Factory $ratings_synchronize_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function init_action()
        {
        }
        public function synchronize_ratings()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Update_Exception
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Update_Exception extends \Exception
    {
    }
    /**
     * Class WPML_TF_AJAX_Exception
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_AJAX_Exception extends \Exception
    {
    }
    /**
     * Interface IWPML_TF_Data_Object
     *
     * @author OnTheGoSystems
     */
    interface IWPML_TF_Data_Object
    {
        /**
         * @return int
         */
        public function get_id();
        /**
         * @return int|null
         */
        public function get_feedback_id();
        /**
         * @param \WPML_TF_Message $message
         */
        public function add_message(\WPML_TF_Message $message);
    }
    /**
     * Class WPML_TF_Message
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message implements \IWPML_TF_Data_Object
    {
        /**
         * WPML_Translation_Feedback constructor.
         *
         * @param array $data
         */
        public function __construct($data = array())
        {
        }
        /**
         * @return int|mixed|null
         */
        public function get_id()
        {
        }
        /**
         * @return int|null
         */
        public function get_feedback_id()
        {
        }
        /**
         * @param \WPML_TF_Message $message
         */
        public function add_message(\WPML_TF_Message $message)
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_date_created()
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_content()
        {
        }
        /**
         * @return int|null
         */
        public function get_author_id()
        {
        }
        /** @return string */
        public function get_author_display_label()
        {
        }
        /** @return bool */
        public function author_is_current_user()
        {
        }
    }
    /**
     * Class WPML_TF_Collection
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Collection implements \Iterator, \Countable
    {
        /** @var array<\IWPML_TF_Data_Object> */
        protected $collection = array();
        /**
         * @param \IWPML_TF_Data_Object $data_object
         */
        public function add(\IWPML_TF_Data_Object $data_object)
        {
        }
        /**
         * @return array
         */
        public function get_ids()
        {
        }
        /**
         * @param int $id
         *
         * @return IWPML_TF_Data_Object|null
         */
        public function get($id)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        public function rewind()
        {
        }
        /**
         * @return mixed
         */
        public function current()
        {
        }
        /**
         * @return mixed
         */
        public function key()
        {
        }
        public function next()
        {
        }
        /**
         * @return bool
         */
        public function valid()
        {
        }
    }
    /**
     * Class WPML_TF_Message_Collection
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message_Collection extends \WPML_TF_Collection
    {
    }
    /**
     * Class WPML_TF_Data_Object_Post_Convert
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_TF_Data_Object_Post_Convert
    {
        /**
         * @return array
         */
        public abstract function get_post_fields();
        /**
         * @return array
         */
        public abstract function get_meta_fields();
        /**
         * @param IWPML_TF_Data_Object $data_object
         *
         * @return array
         */
        public abstract function to_post_data(\IWPML_TF_Data_Object $data_object);
        /**
         * @param array $post_data
         *
         * @return object
         */
        public abstract function to_object(array $post_data);
        /**
         * @param array $post_data
         *
         * @return array
         */
        protected function build_object_data_for_constructor(array $post_data)
        {
        }
    }
    /**
     * Class WPML_TF_Message_Post_Convert
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message_Post_Convert extends \WPML_TF_Data_Object_Post_Convert
    {
        const POST_TYPE = 'wpml_tf_message';
        /**
         * @return array
         */
        public function get_post_fields()
        {
        }
        /**
         * @return array
         */
        public function get_meta_fields()
        {
        }
        /**
         * @param IWPML_TF_Data_Object $message
         *
         * @return array
         * @throws Exception
         */
        public function to_post_data(\IWPML_TF_Data_Object $message)
        {
        }
        /**
         * @param array $post_data
         *
         * @return WPML_TF_Message
         */
        public function to_object(array $post_data)
        {
        }
    }
    /**
     * Interface IWPML_TF_Collection_Filter
     *
     * @author OnTheGoSystems
     */
    interface IWPML_TF_Collection_Filter
    {
        /**
         * @return array
         */
        public function get_posts_args();
        /**
         * @return WPML_TF_Collection
         */
        public function get_new_collection();
    }
    /**
     * Class WPML_TF_Message_Collection_Filter
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Message_Collection_Filter implements \IWPML_TF_Collection_Filter
    {
        /**
         * WPML_TF_Feedback_Collection_Filter constructor.
         *
         * @param array $args
         */
        public function __construct(array $args = array())
        {
        }
        /**
         * @return array
         */
        public function get_posts_args()
        {
        }
        /**
         * @return WPML_TF_Message_Collection
         */
        public function get_new_collection()
        {
        }
    }
    class WPML_TF_Collection_Filter_Factory
    {
        /**
         * @param string $type
         * @param array  $args
         *
         * @return null|IWPML_TF_Collection_Filter
         */
        public function create($type, array $args = array())
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Status
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Status
    {
        /**
         * WPML_TF_Feedback_Status constructor.
         *
         * @param string $status
         */
        public function __construct($status = \null)
        {
        }
        /** @param string $status*/
        public function set_value($status)
        {
        }
        /** @return string */
        public function get_value()
        {
        }
        /** @return null|string */
        public function get_display_text()
        {
        }
        /**
         * This is used by the blue button on the feedback list
         *
         * @return array|null
         */
        public function get_next_status()
        {
        }
        /** @return bool */
        public function is_pending()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Collection_Filter
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Collection_Filter implements \IWPML_TF_Collection_Filter
    {
        /**
         * WPML_TF_Feedback_Collection_Filter constructor.
         *
         * @param array $args
         */
        public function __construct(array $args)
        {
        }
        /** @return array */
        public function get_posts_args()
        {
        }
        /** @return WPML_TF_Feedback_Collection */
        public function get_new_collection()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Factory
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Factory
    {
        /**
         * @param array $feedback_data
         *
         * @return WPML_TF_Feedback
         */
        public function create(array $feedback_data)
        {
        }
    }
    /**
     * Class WPML_TF_Feedback
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback implements \IWPML_TF_Data_Object
    {
        /**
         * WPML_Translation_Feedback constructor.
         *
         * @param array                                $data
         * @param WPML_TF_Backend_Document_Information $document_information
         */
        public function __construct($data = array(), \WPML_TF_Backend_Document_Information $document_information = \null)
        {
        }
        /**
         * @return int|mixed|null
         */
        public function get_id()
        {
        }
        /**
         * @return int|null
         */
        public function get_feedback_id()
        {
        }
        /**
         * @param \WPML_TF_Message $message
         */
        public function add_message(\WPML_TF_Message $message)
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_date_created()
        {
        }
        /**
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * @param string $status
         */
        public function set_status($status)
        {
        }
        /**
         * @return int
         */
        public function get_rating()
        {
        }
        /**
         * @param int $rating
         */
        public function set_rating($rating)
        {
        }
        /**
         * @return mixed|null|string
         */
        public function get_content()
        {
        }
        /**
         * @param string $content
         */
        public function set_content($content)
        {
        }
        /**
         * @return int|null
         */
        public function get_document_id()
        {
        }
        /**
         * @return null|string
         */
        public function get_document_type()
        {
        }
        /**
         * @return null|string
         */
        public function get_language_from()
        {
        }
        /**
         * @return null|string
         */
        public function get_language_to()
        {
        }
        /**
         * @return int|null
         */
        public function get_job_id()
        {
        }
        /**
         * @return WPML_TF_Feedback_Reviewer
         */
        public function get_reviewer()
        {
        }
        /**
         * @param int $reviewer_id
         */
        public function set_reviewer($reviewer_id)
        {
        }
        /**
         * @return WPML_TF_Collection
         */
        public function get_messages()
        {
        }
        /** @param WPML_TF_TP_Responses $tp_responses */
        public function set_tp_responses(\WPML_TF_TP_Responses $tp_responses)
        {
        }
        /** @return WPML_TF_TP_Responses */
        public function get_tp_responses()
        {
        }
        /**
         * @return string|null
         */
        public function get_text_status()
        {
        }
        /** @return array */
        public function get_next_status()
        {
        }
        /** @return bool */
        public function is_pending()
        {
        }
        /**
         * @return string
         */
        public function get_document_flag_url()
        {
        }
        /**
         * @return string
         */
        public function get_source_document_flag_url()
        {
        }
        /**
         * @return bool
         */
        public function is_local_translation()
        {
        }
        /**
         * @return string
         */
        public function get_translator_name()
        {
        }
        /**
         * @return array
         */
        public function get_available_translators()
        {
        }
        /**
         * @param WPML_TF_Backend_Document_Information $document_information
         */
        public function set_document_information(\WPML_TF_Backend_Document_Information $document_information)
        {
        }
        /** @return WPML_TF_Backend_Document_Information */
        public function get_document_information()
        {
        }
    }
    /**
     * Class WPML_TF_TP_Responses
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_TP_Responses
    {
        const FEEDBACK_FORWARD_MANUAL = 'manual';
        const FEEDBACK_FORWARD_EMAIL = 'email';
        const FEEDBACK_FORWARD_API = 'api';
        const FEEDBACK_TP_URL_ENDPOINT = '/feedbacks/{feedback_id}/external';
        public function __construct(array $args = array())
        {
        }
        /** @param string|int $rating_id */
        public function set_rating_id($rating_id)
        {
        }
        /** @return string|int */
        public function get_rating_id()
        {
        }
        /** @param int $feedback_id */
        public function set_feedback_id($feedback_id)
        {
        }
        /** @return null|int */
        public function get_feedback_id()
        {
        }
        /** @param string $method */
        public function set_feedback_forward_method($method)
        {
        }
        /** @return null|string */
        public function get_feedback_forward_method()
        {
        }
        /** @return bool */
        public function is_manual_feedback()
        {
        }
        /** @return bool */
        public function is_email_feedback()
        {
        }
        /** @return bool */
        public function is_api_feedback()
        {
        }
        /** @return null|string */
        public function get_feedback_tp_url()
        {
        }
        /** @return array */
        public function get_strings()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Collection
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Collection extends \WPML_TF_Collection
    {
        /**
         * @param int $offset
         * @param int $length
         */
        public function reduce_collection($offset, $length)
        {
        }
        /**
         * @param string $property
         * @param string $order
         */
        public function sort_collection($property, $order)
        {
        }
        /**
         * @param WPML_TF_Message_Collection $message_collection
         */
        public function link_messages_to_feedback(\WPML_TF_Message_Collection $message_collection)
        {
        }
        /**
         * @param string $property
         * @param string $value
         */
        public function filter_by($property, $value)
        {
        }
        public function remove_trashed()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Post_Convert
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Post_Convert extends \WPML_TF_Data_Object_Post_Convert
    {
        const POST_TYPE = 'wpml_tf_feedback';
        /**
         * @return array
         */
        public function get_post_fields()
        {
        }
        /**
         * @return array
         */
        public function get_meta_fields()
        {
        }
        /**
         * @param IWPML_TF_Data_Object $feedback
         *
         * @return array
         * @throws Exception
         */
        public function to_post_data(\IWPML_TF_Data_Object $feedback)
        {
        }
        /**
         * @param array $post_data
         *
         * @return WPML_TF_Feedback
         */
        public function to_object(array $post_data)
        {
        }
    }
    /**
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Reviewer
    {
        /**
         * WPML_TF_Feedback_Reviewer constructor.
         *
         * @param int $id
         */
        public function __construct($id)
        {
        }
        /**
         * @return int|null
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_reviewer_display_name()
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Edit
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Edit
    {
        /**
         * WPML_TF_Feedback_Edit constructor.
         *
         * @param \WPML_TF_Feedback_Query      $feedback_query
         * @param \WPML_TF_Data_Object_Storage $feedback_storage
         * @param \WPML_TF_Data_Object_Storage $message_storage
         * @param \WPML_TP_Client_Factory|null $tp_client_factory
         */
        public function __construct(\WPML_TF_Feedback_Query $feedback_query, \WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TF_Data_Object_Storage $message_storage, \WPML_TP_Client_Factory $tp_client_factory = \null)
        {
        }
        /**
         * @param int   $feedback_id
         * @param array $args
         *
         * @return null|WPML_TF_Feedback
         * @throws \WPML_TF_Feedback_Update_Exception
         */
        public function update($feedback_id, array $args)
        {
        }
        /**
         * @param int $feedback_id
         *
         * @return bool
         */
        public function delete($feedback_id)
        {
        }
    }
    /**
     * Class WPML_TF_Feedback_Query
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Feedback_Query
    {
        /**
         * WPML_TF_Feedback_Collection_Factory constructor.
         *
         * @param WPML_TF_Data_Object_Storage         $feedback_storage
         * @param WPML_TF_Data_Object_Storage         $message_storage
         * @param WPML_TF_Collection_Filter_Factory   $collection_filter_factory
         */
        public function __construct(\WPML_TF_Data_Object_Storage $feedback_storage, \WPML_TF_Data_Object_Storage $message_storage, \WPML_TF_Collection_Filter_Factory $collection_filter_factory)
        {
        }
        /**
         * @return WPML_TF_Feedback_Collection
         */
        public function get_unfiltered_collection()
        {
        }
        /**
         * @param array $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        public function get(array $args)
        {
        }
        /**
         * @param WPML_TF_Feedback_Collection $feedback_collection
         * @param array                       $args
         *
         * @return WPML_TF_Feedback_Collection
         */
        public function trash_filter_collection(\WPML_TF_Feedback_Collection $feedback_collection, array $args)
        {
        }
        /**
         * @return int
         */
        public function get_total_items_count()
        {
        }
        /** @return int */
        public function get_total_trashed_items_count()
        {
        }
        /** @return int */
        public function get_filtered_items_count()
        {
        }
        /** @return bool */
        public function is_in_trash()
        {
        }
        /**
         * @param int  $feedback_id
         * @param bool $with_messages
         *
         * @return null|\IWPML_TF_Data_Object
         */
        public function get_one($feedback_id, $with_messages = \true)
        {
        }
    }
    /**
     * Class WPML_TF_Data_Object_Storage
     *
     * @author OnTheGoSystems
     */
    class WPML_TF_Data_Object_Storage
    {
        const META_PREFIX = 'wpml_tf_';
        /**
         * WPML_TF_Data_Object_Storage constructor.
         *
         * @param WPML_TF_Data_Object_Post_Convert $post_convert
         */
        public function __construct(\WPML_TF_Data_Object_Post_Convert $post_convert)
        {
        }
        /**
         * @param int $id
         *
         * @return IWPML_TF_Data_Object|null
         */
        public function get($id)
        {
        }
        /**
         * @param IWPML_TF_Data_Object $data_object
         *
         * @return int|WP_Error
         */
        public function persist(\IWPML_TF_Data_Object $data_object)
        {
        }
        /**
         * @param int  $id
         * @param bool $force_delete
         */
        public function delete($id, $force_delete = \false)
        {
        }
        /** @param int $id */
        public function untrash($id)
        {
        }
        /**
         * @param IWPML_TF_Collection_Filter $collection_filter
         *
         * @return WPML_TF_Collection
         */
        public function get_collection(\IWPML_TF_Collection_Filter $collection_filter)
        {
        }
    }
    interface IWPML_WP_Element_Type
    {
        /**
         * @param string $element_name
         *
         * @return mixed
         */
        public function get_wp_element_type_object($element_name);
    }
    class WPML_WP_Post_Type implements \IWPML_WP_Element_Type
    {
        /**
         * @param string $post_type
         *
         * @return null|WP_Post_Type
         */
        public function get_wp_element_type_object($post_type)
        {
        }
    }
    /**
     * Wrapper class for basic PHP functions
     */
    class WPML_PHP_Functions
    {
        /**
         * Wrapper around PHP constant defined
         *
         * @param string $constant_name
         *
         * @return bool
         */
        public function defined($constant_name)
        {
        }
        /**
         * Wrapper around PHP constant lookup
         *
         * @param string $constant_name
         *
         * @return string|int
         */
        public function constant($constant_name)
        {
        }
        /**
         * @param string $function_name The function name, as a string.
         *
         * @return bool true if <i>function_name</i> exists and is a function, false otherwise.
         * This function will return false for constructs, such as <b>include_once</b> and <b>echo</b>.
         * @return bool
         */
        public function function_exists($function_name)
        {
        }
        /**
         * @param string $class_name The class name. The name is matched in a case-insensitive manner.
         * @param bool   $autoload   [optional] Whether or not to call &link.autoload; by default.
         *
         * @return bool true if <i>class_name</i> is a defined class, false otherwise.
         * @return bool
         */
        public function class_exists($class_name, $autoload = \true)
        {
        }
        /**
         * @param string $name The extension name
         *
         * @return bool true if the extension identified by <i>name</i> is loaded, false otherwise.
         */
        public function extension_loaded($name)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public function mb_strtolower($string)
        {
        }
        /**
         * Wrapper for \phpversion()
         *
         * * @param string $extension (optional)
         *
         * @return string
         */
        public function phpversion($extension = \null)
        {
        }
        /**
         * Compares two "PHP-standardized" version number strings
         *
         * @see \WPML_WP_API::version_compare
         *
         * @param string  $version1
         * @param string  $version2
         * @param ?string $operator
         *
         * @return mixed
         */
        public function version_compare($version1, $version2, $operator = \null)
        {
        }
        /**
         * @param array $array
         * @param int   $sort_flags
         *
         * @return array
         */
        public function array_unique($array, $sort_flags = \SORT_REGULAR)
        {
        }
        /**
         * @param string $message
         * @param int    $message_type
         * @param string $destination
         * @param string $extra_headers
         *
         * @return bool
         */
        public function error_log($message, $message_type = \null, $destination = \null, $extra_headers = \null)
        {
        }
        public function exit_php()
        {
        }
    }
    class WPML_WP_API extends \WPML_PHP_Functions
    {
        /**
         * @param string $file
         * @param string $filename
         *
         * @return false | string
         */
        public function get_file_mime_type($file, $filename)
        {
        }
        /**
         * Wrapper for \get_option
         *
         * @param string     $option
         * @param bool|false $default
         *
         * @return mixed
         */
        public function get_option($option, $default = \false)
        {
        }
        public function is_url($value)
        {
        }
        public function get_transient($transient)
        {
        }
        public function set_transient($transient, $value, $expiration = 0)
        {
        }
        /**
         * @param string      $option
         * @param mixed       $value
         * @param string|bool $autoload
         *
         * @return bool False if value was not updated and true if value was updated.
         */
        public function update_option($option, $value, $autoload = \null)
        {
        }
        /**
         * @param string|int|WP_Post $ID Optional. Post ID or post object. Default empty.
         *
         * @return false|string
         */
        public function get_post_status($ID = '')
        {
        }
        /**
         * Wrapper for \get_term_link
         *
         * @param WP_Term|int|string $term
         * @param string             $taxonomy
         *
         * @return string|WP_Error
         */
        public function get_term_link($term, $taxonomy = '')
        {
        }
        /**
         *  Wrapper for \get_term_by
         *
         * @param string     $field
         * @param string|int $value
         * @param string     $taxonomy
         * @param string     $output
         * @param string     $filter
         *
         * @return bool|WP_Term
         */
        public function get_term_by($field, $value, $taxonomy = '', $output = \OBJECT, $filter = 'raw')
        {
        }
        /**
         * Wrapper for \add_submenu_page
         *
         * @param string       $parent_slug
         * @param string       $page_title
         * @param string       $menu_title
         * @param string       $capability
         * @param string       $menu_slug
         * @param array|string $function
         *
         * @return false|string
         */
        public function add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function = '')
        {
        }
        /**
         * @param string       $page_title
         * @param string       $menu_title
         * @param string       $capability
         * @param string       $menu_slug
         * @param array|string $function
         * @param string       $icon_url
         * @param null         $position
         *
         * @return string
         */
        public function add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '', $position = \null)
        {
        }
        /**
         * Wrapper for \get_post_type_archive_link
         *
         * @param string $post_type
         *
         * @return string
         */
        public function get_post_type_archive_link($post_type)
        {
        }
        /**
         * Wrapper for \get_edit_post_link
         *
         * @param int    $id
         * @param string $context
         *
         * @return null|string|void
         */
        public function get_edit_post_link($id = 0, $context = 'display')
        {
        }
        /**
         * Wrapper for get_the_title
         *
         * @param int|WP_Post $post
         *
         * @return string
         */
        public function get_the_title($post)
        {
        }
        /**
         * Wrapper for \get_day_link
         *
         * @param int $year
         * @param int $month
         * @param int $day
         *
         * @return string
         */
        public function get_day_link($year, $month, $day)
        {
        }
        /**
         * Wrapper for \get_month_link
         *
         * @param int $year
         * @param int $month
         *
         * @return string
         */
        public function get_month_link($year, $month)
        {
        }
        /**
         * Wrapper for \get_year_link
         *
         * @param int $year
         *
         * @return string
         */
        public function get_year_link($year)
        {
        }
        /**
         * Wrapper for \get_author_posts_url
         *
         * @param int    $author_id
         * @param string $author_nicename
         *
         * @return string
         */
        public function get_author_posts_url($author_id, $author_nicename = '')
        {
        }
        /**
         * Wrapper for \current_user_can
         *
         * @param string $capability
         *
         * @return bool
         */
        public function current_user_can($capability)
        {
        }
        /**
         * @param int    $user_id
         * @param string $key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_user_meta($user_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \get_post_type
         *
         * @param null|int|WP_Post $post
         *
         * @return false|string
         */
        public function get_post_type($post = \null)
        {
        }
        public function is_archive()
        {
        }
        public function is_front_page()
        {
        }
        public function is_home()
        {
        }
        /**
         * @param int|string|array $page Optional. Page ID, title, slug, or array of such. Default empty.
         *
         * @return bool
         */
        public function is_page($page = '')
        {
        }
        public function is_paged()
        {
        }
        /**
         * @param string $post
         *
         * @return int|string|array $post Optional. Post ID, title, slug, or array of such. Default empty.
         */
        public function is_single($post = '')
        {
        }
        /**
         * @param string|array $post_types
         *
         * @return bool
         */
        public function is_singular($post_types = '')
        {
        }
        /**
         * @param int|WP_User $user
         * @param string      $capability
         *
         * @return bool
         */
        public function user_can($user, $capability)
        {
        }
        /**
         * Wrapper for add_filter
         *
         * @param string   $tag
         * @param callable $function_to_add
         * @param int      $priority
         * @param int      $accepted_args
         *
         * @return bool|mixed|true|void
         */
        public function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * Wrapper for remove_filter
         *
         * @param string   $tag
         * @param callable $function_to_remove
         * @param int      $priority
         *
         * @return bool
         */
        public function remove_filter($tag, $function_to_remove, $priority = 10)
        {
        }
        /**
         * Wrapper for current_filter
         */
        public function current_filter()
        {
        }
        /**
         * @param null|string $tab
         * @param null|string $hash
         *
         * @return string
         */
        public function get_tm_url($tab = \null, $hash = \null)
        {
        }
        /**
         * Wrapper for \is_admin()
         *
         * @return bool
         */
        public function is_admin()
        {
        }
        public function is_jobs_tab()
        {
        }
        /**
         * @param string|null $tab
         * @param string|null $page_type
         *
         * @return bool
         */
        public function is_tm_page($tab = \null, $page_type = 'management')
        {
        }
        public function is_translation_queue_page()
        {
        }
        public function is_string_translation_page()
        {
        }
        public function is_support_page()
        {
        }
        public function is_troubleshooting_page()
        {
        }
        /**
         * @param string $page
         *
         * @return bool
         */
        public function is_core_page($page = '')
        {
        }
        public function is_back_end()
        {
        }
        public function is_front_end()
        {
        }
        public function is_ajax()
        {
        }
        public function is_cron_job()
        {
        }
        public function is_heartbeat()
        {
        }
        public function is_post_edit_page()
        {
        }
        public function is_new_post_page()
        {
        }
        public function is_term_edit_page()
        {
        }
        public function is_customize_page()
        {
        }
        public function is_comments_post_page()
        {
        }
        public function is_plugins_page()
        {
        }
        public function is_themes_page()
        {
        }
        /**
         * Wrapper for \is_feed that returns false if called before the loop
         *
         * @param string $feeds
         *
         * @return bool
         */
        public function is_feed($feeds = '')
        {
        }
        /**
         * Wrapper for \wp_update_term_count
         *
         * @param int[]      $terms given by their term_taxonomy_ids
         * @param string     $taxonomy
         * @param bool|false $do_deferred
         *
         * @return bool
         */
        public function wp_update_term_count($terms, $taxonomy, $do_deferred = \false)
        {
        }
        /**
         * Wrapper for \get_taxonomy
         *
         * @param string $taxonomy
         *
         * @return bool|object
         */
        public function get_taxonomy($taxonomy)
        {
        }
        /**
         * Wrapper for \wp_set_object_terms
         *
         * @param int              $object_id The object to relate to.
         * @param array|int|string $terms     A single term slug, single term id, or array of either term slugs or ids.
         *                                    Will replace all existing related terms in this taxonomy.
         * @param string           $taxonomy  The context in which to relate the term to the object.
         * @param bool             $append    Optional. If false will delete difference of terms. Default false.
         *
         * @return array|WP_Error Affected Term IDs.
         */
        public function wp_set_object_terms($object_id, $terms, $taxonomy, $append = \false)
        {
        }
        /**
         * Wrapper for \get_post_types
         *
         * @param array  $args
         * @param string $output
         * @param string $operator
         *
         * @return array
         */
        public function get_post_types($args = array(), $output = 'names', $operator = 'and')
        {
        }
        public function wp_send_json($response)
        {
        }
        public function wp_send_json_success($data = \null)
        {
        }
        public function wp_send_json_error($data = \null)
        {
        }
        /**
         * Wrapper for \get_current_user_id
         *
         * @return int
         */
        public function get_current_user_id()
        {
        }
        /**
         * Wrapper for \get_post
         *
         * @param null|int|WP_Post $post
         * @param string           $output
         * @param string           $filter
         *
         * @return array|null|WP_Post
         */
        public function get_post($post = \null, $output = \OBJECT, $filter = 'raw')
        {
        }
        /**
         * Wrapper for \get_post_meta
         *
         * @param int    $post_id Post ID.
         * @param string $key Optional. The meta key to retrieve. By default, returns
         *                        data for all keys. Default empty.
         * @param bool   $single Optional. Whether to return a single value. Default false.
         *
         * @return mixed Will be an array if $single is false. Will be value of meta data
         *               field if $single is true.
         */
        public function get_post_meta($post_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \update_post_meta
         *
         * @param int    $post_id Post ID.
         * @param string $key
         * @param mixed  $value
         * @param mixed  $prev_value
         *
         * @return int|bool
         */
        public function update_post_meta($post_id, $key, $value, $prev_value = '')
        {
        }
        /**
         * Wrapper for add_post_meta
         *
         * @param int    $post_id    Post ID.
         * @param string $meta_key   Metadata name.
         * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.
         * @param bool   $unique     Optional. Whether the same key should not be added.
         *                           Default false.
         * @return int|false Meta ID on success, false on failure.
         */
        public function add_post_meta($post_id, $meta_key, $meta_value, $unique = \false)
        {
        }
        /**
         * Wrapper for delete_post_meta
         *
         * @param int    $post_id    Post ID.
         * @param string $meta_key   Metadata name.
         * @param mixed  $meta_value Optional. Metadata value. Must be serializable if
         *                           non-scalar. Default empty.
         * @return bool True on success, false on failure.
         */
        public function delete_post_meta($post_id, $meta_key, $meta_value = '')
        {
        }
        /**
         * Wrapper for \get_term_meta
         *
         * @param int    $term_id
         * @param string $key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_term_meta($term_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \get_permalink
         *
         * @param int        $id
         * @param bool|false $leavename
         *
         * @return bool|string
         */
        public function get_permalink($id = 0, $leavename = \false)
        {
        }
        /**
         * Wrapper for \wp_mail
         *
         * @param string       $to
         * @param string       $subject
         * @param string       $message
         * @param string|array $headers
         * @param array|array  $attachments
         *
         * @return bool
         */
        public function wp_mail($to, $subject, $message, $headers = '', $attachments = array())
        {
        }
        /**
         * Wrapper for \get_post_custom
         *
         * @param int $post_id
         *
         * @return array
         */
        public function get_post_custom($post_id = 0)
        {
        }
        public function is_dashboard_tab()
        {
        }
        public function wp_safe_redirect($redir_target, $status = 302)
        {
        }
        /**
         * Wrapper for \load_textdomain
         *
         * @param string $domain
         * @param string $mofile
         *
         * @return bool
         */
        public function load_textdomain($domain, $mofile)
        {
        }
        /**
         * Wrapper for \get_home_url
         *
         * @param null|int    $blog_id
         * @param string      $path
         * @param null|string $scheme
         *
         * @return string
         */
        public function get_home_url($blog_id = \null, $path = '', $scheme = \null)
        {
        }
        /**
         * Wrapper for \get_site_url
         *
         * @param null|int    $blog_id
         * @param string      $path
         * @param null|string $scheme
         *
         * @return string
         */
        public function get_site_url($blog_id = \null, $path = '', $scheme = \null)
        {
        }
        /**
         * Wrapper for \is_multisite
         *
         * @return bool
         */
        public function is_multisite()
        {
        }
        /**
         * Wrapper for \is_main_site
         *
         * @param null|int $site_id
         *
         * @return bool
         */
        public function is_main_site($site_id = \null)
        {
        }
        /**
         * Wrapper for \ms_is_switched
         *
         * @return bool
         */
        public function ms_is_switched()
        {
        }
        /**
         * Wrapper for \get_current_blog_id
         *
         * @return int
         */
        public function get_current_blog_id()
        {
        }
        /**
         * Wrapper for wp_get_post_terms
         *
         * @param int    $post_id
         * @param string $taxonomy
         * @param array  $args
         *
         * @return array|WP_Error
         */
        public function wp_get_post_terms($post_id = 0, $taxonomy = 'post_tag', $args = array())
        {
        }
        /**
         * Wrapper for get_taxonomies
         *
         * @param array  $args
         * @param string $output
         * @param string $operator
         *
         * @return array
         */
        public function get_taxonomies($args = array(), $output = 'names', $operator = 'and')
        {
        }
        /**
         * Wrapper for \wp_get_theme
         *
         * @param string $stylesheet
         * @param string $theme_root
         *
         * @return WP_Theme
         */
        public function wp_get_theme($stylesheet = \null, $theme_root = \null)
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Name')
         *
         * @return string
         */
        public function get_theme_name()
        {
        }
        /**
         * Wrapper for \wp_get_theme->parent_theme
         *
         * @return string
         */
        public function get_theme_parent_name()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('URI')
         *
         * @return string
         */
        public function get_theme_URI()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Author')
         *
         * @return string
         */
        public function get_theme_author()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('AuthorURI')
         *
         * @return string
         */
        public function get_theme_authorURI()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Template')
         *
         * @return string
         */
        public function get_theme_template()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Version')
         *
         * @return string
         */
        public function get_theme_version()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('TextDomain')
         *
         * @return string
         */
        public function get_theme_textdomain()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('DomainPath')
         *
         * @return string
         */
        public function get_theme_domainpath()
        {
        }
        /**
         * Wrapper for \get_plugins()
         *
         * @return array
         */
        public function get_plugins()
        {
        }
        /**
         * Wrapper for \get_post_custom_keys
         *
         * @param int $post_id
         *
         * @return array|void
         */
        public function get_post_custom_keys($post_id)
        {
        }
        /**
         * Wrapper for \get_bloginfo
         *
         * @param string $show (optional)
         * @param string $filter (optional)
         *
         * @return string
         */
        public function get_bloginfo($show = '', $filter = 'raw')
        {
        }
        /**
         * Compare version in their "naked" form
         *
         * @see \WPML_WP_API::get_naked_version
         * @see \WPML_WP_API::version_compare
         * @see \version_compare
         *
         * @param string $version1
         * @param string $version2
         * @param null   $operator
         *
         * @return mixed
         */
        public function version_compare_naked($version1, $version2, $operator = \null)
        {
        }
        /**
         * Returns only the first 3 numeric elements of a version (assuming to use MAJOR.MINOR.PATCH
         *
         * @param string $version
         *
         * @return string
         */
        public function get_naked_version($version)
        {
        }
        public function has_filter($tag, $function_to_check = \false)
        {
        }
        public function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1)
        {
        }
        public function get_current_screen()
        {
        }
        /**
         * Wrapper for \get_query_var
         *
         * @param string $var
         * @param mixed  $default
         *
         * @return mixed
         */
        public function get_query_var($var, $default = '')
        {
        }
        /**
         * Wrapper for \get_queried_object
         */
        public function get_queried_object()
        {
        }
        public function get_raw_post_data()
        {
        }
        public function wp_verify_nonce($nonce, $action = -1)
        {
        }
        /**
         * @param string $action
         *
         * @return int The number of times action hook $tag is fired.
         */
        public function did_action($action)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        public function get_wp_post_types_global()
        {
        }
        /**
         * @return wp_xmlrpc_server
         */
        public function get_wp_xmlrpc_server()
        {
        }
        /**
         * Wrapper for $wp_taxonomies global variable
         */
        public function get_wp_taxonomies()
        {
        }
        /**
         * Wrapper for get_category_link function
         *
         * @param int $category_id
         *
         * @return string
         */
        public function get_category_link($category_id)
        {
        }
        /**
         * Wrapper for is_wp_error function
         *
         * @param mixed $thing
         *
         * @return bool
         */
        public function is_wp_error($thing)
        {
        }
        /**
         * @param int  $limit
         * @param bool $provide_object
         * @param bool $ignore_args
         *
         * @return array
         */
        public function get_backtrace($limit = 0, $provide_object = \false, $ignore_args = \true)
        {
        }
        /**
         * @return WP_Filesystem_Direct
         */
        public function get_wp_filesystem_direct()
        {
        }
        /**
         * @return WPML_Notices
         */
        public function get_admin_notices()
        {
        }
        /**
         * @param Twig_LoaderInterface $loader
         * @param array                $environment_args
         *
         * @return Twig_Environment
         */
        public function get_twig_environment($loader, $environment_args)
        {
        }
        /**
         * @param array $template_paths
         *
         * @return Twig_Loader_Filesystem|\WPML\Core\Twig_LoaderInterface
         */
        public function get_twig_loader_filesystem($template_paths)
        {
        }
        /**
         * @return \WPML\Core\Twig_Loader_String|\WPML\Core\Twig_LoaderInterface
         */
        public function get_twig_loader_string()
        {
        }
        public function is_a_REST_request()
        {
        }
    }
    class WPML_WP_Roles
    {
        const ROLES_ADMINISTRATOR = 'administrator';
        const ROLES_EDITOR = 'editor';
        const ROLES_CONTRIBUTOR = 'contributor';
        const ROLES_SUBSCRIBER = 'subscriber';
        const EDITOR_LEVEL = 'level_7';
        const CONTRIBUTOR_LEVEL = 'level_1';
        const SUBSCRIBER_LEVEL = 'level_0';
        /**
         * Returns an array of roles which meet the capability level set in \WPML_WP_Roles::EDITOR_LEVEL.
         *
         * @return array
         */
        public static function get_editor_roles()
        {
        }
        /**
         * Returns an array of roles which meet the capability level set in \WPML_WP_Roles::CONTRIBUTOR_LEVEL.
         *
         * @return array
         */
        public static function get_contributor_roles()
        {
        }
        /**
         * Returns an array of roles wich meet the capability level set in \WPML_WP_Roles::SUBSCRIBER_LEVEL.
         *
         * @return array
         */
        public static function get_subscriber_roles()
        {
        }
        /**
         * @return array
         */
        public static function get_roles_up_to_user_level(\WP_User $user)
        {
        }
        /**
         * @param  WP_User $user
         *
         * @return int
         */
        public static function get_user_max_level(\WP_User $user)
        {
        }
        public static function get_highest_level(array $capabilities)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 30/10/17
     * Time: 9:09 PM
     */
    class WPML_WP_Taxonomy implements \IWPML_WP_Element_Type
    {
        public static function get_linked_post_types($taxonomy)
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return false|WP_Taxonomy
         */
        public function get_wp_element_type_object($taxonomy)
        {
        }
    }
    class WPMLCpi
    {
        // supported plugins
        static $wpml_cpi_plugins = array('wp-super-cache/wp-cache.php' => 'WP_CPI_WP_Super_Cache');
        function __construct()
        {
        }
        function init()
        {
        }
        function validate_settings()
        {
        }
        function save_settings()
        {
        }
        function ajx_calls($call, $data)
        {
        }
        function menu()
        {
        }
        function icl_save_settings_cb($settings)
        {
        }
        function call_cache_clear($do_clear = \false)
        {
        }
    }
}
namespace OTGS\Installer\FP {
    /**
     * Returns new function which will behave like $function with
     * predefined left arguments passed to partial
     *
     * @param callable $function
     * @param mixed ...$args
     *
     * @return callable
     */
    function partial(callable $function, $args)
    {
    }
    /**
     * Returns new function which applies each given function to the result of another from left to right
     * pipe(f, g, h)(x) is the same as h(g(f(x)))
     *
     * @param callable $f
     * @param callable $g
     *
     * @return callable
     */
    function pipe(callable $f, callable $g)
    {
    }
    /**
     * Returns new function which applies each given function to the result of another from right to left
     * compose(f, g, h)(x) is the same as f(g(h(x)))
     *
     * @param callable $f
     * @param callable $g
     *
     * @return callable
     */
    function compose(callable $f, callable $g)
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    function flip(callable $fn)
    {
    }
    /**
     * Wraps the given function and returns a function that can take individual arguments and invokes
     * the wrapped function with individual arguments gathered into an array
     *
     * @param callable $fn
     *
     * @return \Closure
     */
    function gatherArgs(callable $fn)
    {
    }
    /**
     * Returns an Invoker that runs the member function. Use `with` to set the arguments
     * of the member function and then invoke with `()`
     *
     * eg. give Test class:
     * class Test {
     *
     *    private $times;
     *
     *    public function __construct( $times ) {
     *       $this->times = $times;
     *    }
     *
     *    public function multiply( $x ) {
     *       return $x * $this->times;
     *    }
     * }
     *
     * $invoker = invoke( 'multiply' )->with( 10 );
     * $result = $invoker( new Test( 2 ) );  // 20
     *
     *
     * @param string $fnName
     *
     * @return _Invoker
     */
    function invoke($fnName)
    {
    }
    /**
     * @param int      $count
     * @param callable $fn
     *
     * @return \Closure
     */
    function curryN($count, callable $fn)
    {
    }
    /**
     * @param callable $fn
     *
     * @return Either
     */
    function tryCatch(callable $fn)
    {
    }
}
namespace WPML\FP\System {
    /**
     * Returns a filter function to filter a collection by the given key
     * Use like:
     * $theCollection->map( getFilterFor( 'my-key' )->using( santatizeString() )->defaultTo( '' ) )
     * This will filter the collection item with a key of 'my-key' using the 'FILTER_SANITIZE_STRING'.
     * If the key doesn't exist it defaults to an empty string.
     *
     * defaultTo can be a value or a callable that returns a value
     *
     * @param string $key
     *
     * @return _Filter
     */
    function getFilterFor($key)
    {
    }
    /**
     * Returns a function of the defined type that can then be used to map
     * over a variable.
     *
     * @param int $filter - Filter type same as for php filter_var function
     *
     * @return \Closure
     */
    function filterVar($filter)
    {
    }
    /**
     * returns a function that will sanitize a string.
     * @return \Closure
     */
    function sanitizeString($flags = ENT_QUOTES)
    {
    }
    /**
     * Returns a validator function to filter a collection by the given key
     * Use like:
     * map( getValidatorFor( 'my-key' )->using( Logic::isNotNull() )->error( 'It was false' ) ), $myCollection)
     * This will run the validator on the collection item with a key of 'my-key' and return Either::Right
     * containing the given collection or Either::Left containing the error depending if the supplied
     * using function returns true or false
     *
     * error can be a value or a callable that returns a value
     *
     * @param string $key
     *
     * @return _Validator
     */
    function getValidatorFor($key)
    {
    }
}
namespace WPML\FP\Strings {
    /**
     * ltrimWith :: string -> ( string -> string )
     * @param string $trim
     *
     * @return callable
     */
    function ltrimWith($trim)
    {
    }
    /**
     * rtrimWith :: string -> ( string -> string )
     * @param string $trim
     *
     * @return callable
     */
    function rtrimWith($trim)
    {
    }
    /**
     * explodeToCollection :: string -> ( string -> Collection )
     * @param string $delimiter
     *
     * @return callable
     */
    function explodeToCollection($delimiter)
    {
    }
    /**
     * replace :: string -> string -> ( string -> string )
     * @param string $search
     * @param string $replace
     *
     * @return callable
     */
    function replace($search, $replace)
    {
    }
    /**
     * remove :: string -> ( string -> string )
     * @param string $remove
     *
     * @return callable
     */
    function remove($remove)
    {
    }
}
namespace WPML\FP {
    /**
     * Wraps the given function and returns a function that can take arguments as an array and invokes
     * the wrapped function with individual arguments
     *
     * @param callable $fn
     *
     * @return \Closure
     */
    function spreadArgs(callable $fn)
    {
    }
    /**
     * Wraps the given function and returns a function that can take individual arguments and invokes
     * the wrapped function with individual arguments gathered into an array
     *
     * @param callable $fn
     *
     * @return \Closure
     */
    function gatherArgs(callable $fn)
    {
    }
    /**
     * Returns new function which applies each given function to the result of another from right to left
     * compose(f, g, h)(x) is the same as f(g(h(x)))
     *
     * @param callable $f
     * @param callable $g
     *
     * @return callable
     */
    function compose(callable $f, callable $g)
    {
    }
    /**
     * Returns new function which applies each given function to the result of another from left to right
     * pipe(f, g, h)(x) is the same as h(g(f(x)))
     *
     * @param callable $f
     * @param callable $g
     *
     * @return callable
     */
    function pipe(callable $f, callable $g)
    {
    }
    /**
     * Returns new function which will behave like $function with
     * predefined left arguments passed to partial
     *
     * @param callable $function
     * @param mixed    $arg1
     *
     * @return callable
     */
    function partial(callable $function, $arg1)
    {
    }
    /**
     * Returns new partial function which will behave like $function with
     * predefined right arguments passed to partialRight
     *
     * @param callable $function
     * @param mixed    $arg1
     *
     * @return callable
     */
    function partialRight(callable $function, $arg1)
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    function tap(callable $fn)
    {
    }
    /**
     * @param callable $f
     * @param callable $g
     *
     * @return \Closure
     */
    function either(callable $f, callable $g)
    {
    }
    /**
     * @param int      $count
     * @param callable $fn
     *
     * @return \Closure
     */
    function curryN($count, callable $fn)
    {
    }
    /**
     * @param callable $fn
     * @param bool     $required
     *
     * @return \Closure
     * @throws \ReflectionException
     */
    function curry(callable $fn, $required = true)
    {
    }
    /**
     * @param string $fnName
     *
     * @return \Closure
     */
    function apply($fnName)
    {
    }
    /**
     * Returns an Invoker that runs the member function. Use `with` to set the arguments
     * of the member function and then invoke with `()`
     *
     * eg. give Test class:
     * class Test {
     *
     *    private $times;
     *
     *    public function __construct( $times ) {
     *       $this->times = $times;
     *    }
     *
     *    public function multiply( $x ) {
     *       return $x * $this->times;
     *    }
     * }
     *
     * $invoker = invoke( 'multiply' )->with( 10 );
     * $result = $invoker( new Test( 2 ) );  // 20
     *
     *
     * @param string $fnName
     *
     * @return _Invoker
     */
    function invoke($fnName)
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    function chain(callable $fn)
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    function flatMap(callable $fn)
    {
    }
    /**
     * @param callable $fn
     *
     * @return Either
     */
    function tryCatch(callable $fn)
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    function flip(callable $fn)
    {
    }
}
namespace WPML\Core {
    function twig_var_dump(\WPML\Core\Twig\Environment $env, $context, array $vars = [])
    {
    }
}
namespace WPML\Core {
    /**
     * Cycles over a value.
     *
     * @param \ArrayAccess|array $values
     * @param int                $position The cycle position
     *
     * @return string The next value in the cycle
     */
    function twig_cycle($values, $position)
    {
    }
    /**
     * Returns a random value depending on the supplied parameter type:
     * - a random item from a \Traversable or array
     * - a random character from a string
     * - a random integer between 0 and the integer parameter.
     *
     * @param \Traversable|array|int|float|string $values The values to pick a random item from
     * @param int|null                            $max    Maximum value used when $values is an int
     *
     * @throws RuntimeError when $values is an empty array (does not apply to an empty string which is returned as is)
     *
     * @return mixed A random value from the given sequence
     */
    function twig_random(\WPML\Core\Twig\Environment $env, $values = null, $max = null)
    {
    }
    /**
     * Converts a date to the given format.
     *
     *   {{ post.published_at|date("m/d/Y") }}
     *
     * @param \DateTime|\DateTimeInterface|\DateInterval|string $date     A date
     * @param string|null                                       $format   The target format, null to use the default
     * @param \DateTimeZone|string|false|null                   $timezone The target timezone, null to use the default, false to leave unchanged
     *
     * @return string The formatted date
     */
    function twig_date_format_filter(\WPML\Core\Twig\Environment $env, $date, $format = null, $timezone = null)
    {
    }
    /**
     * Returns a new date object modified.
     *
     *   {{ post.published_at|date_modify("-1day")|date("m/d/Y") }}
     *
     * @param \DateTime|string $date     A date
     * @param string           $modifier A modifier string
     *
     * @return \DateTime
     */
    function twig_date_modify_filter(\WPML\Core\Twig\Environment $env, $date, $modifier)
    {
    }
    /**
     * Converts an input to a \DateTime instance.
     *
     *    {% if date(user.created_at) < date('+2days') %}
     *      {# do something #}
     *    {% endif %}
     *
     * @param \DateTime|\DateTimeInterface|string|null $date     A date
     * @param \DateTimeZone|string|false|null          $timezone The target timezone, null to use the default, false to leave unchanged
     *
     * @return \DateTime
     */
    function twig_date_converter(\WPML\Core\Twig\Environment $env, $date = null, $timezone = null)
    {
    }
    /**
     * Replaces strings within a string.
     *
     * @param string             $str  String to replace in
     * @param array|\Traversable $from Replace values
     * @param string|null        $to   Replace to, deprecated (@see https://secure.php.net/manual/en/function.strtr.php)
     *
     * @return string
     */
    function twig_replace_filter($str, $from, $to = null)
    {
    }
    /**
     * Rounds a number.
     *
     * @param int|float $value     The value to round
     * @param int|float $precision The rounding precision
     * @param string    $method    The method to use for rounding
     *
     * @return int|float The rounded number
     */
    function twig_round($value, $precision = 0, $method = 'common')
    {
    }
    /**
     * Number format filter.
     *
     * All of the formatting options can be left null, in that case the defaults will
     * be used.  Supplying any of the parameters will override the defaults set in the
     * environment object.
     *
     * @param mixed  $number       A float/int/string of the number to format
     * @param int    $decimal      the number of decimal points to display
     * @param string $decimalPoint the character(s) to use for the decimal point
     * @param string $thousandSep  the character(s) to use for the thousands separator
     *
     * @return string The formatted number
     */
    function twig_number_format_filter(\WPML\Core\Twig\Environment $env, $number, $decimal = null, $decimalPoint = null, $thousandSep = null)
    {
    }
    /**
     * URL encodes (RFC 3986) a string as a path segment or an array as a query string.
     *
     * @param string|array $url A URL or an array of query parameters
     *
     * @return string The URL encoded value
     */
    function twig_urlencode_filter($url)
    {
    }
    /**
     * JSON encodes a variable.
     *
     * @param mixed $value   the value to encode
     * @param int   $options Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT
     *
     * @return mixed The JSON encoded value
     */
    function twig_jsonencode_filter($value, $options = 0)
    {
    }
    function _twig_markup2string(&$value)
    {
    }
    /**
     * Merges an array with another one.
     *
     *  {% set items = { 'apple': 'fruit', 'orange': 'fruit' } %}
     *
     *  {% set items = items|merge({ 'peugeot': 'car' }) %}
     *
     *  {# items now contains { 'apple': 'fruit', 'orange': 'fruit', 'peugeot': 'car' } #}
     *
     * @param array|\Traversable $arr1 An array
     * @param array|\Traversable $arr2 An array
     *
     * @return array The merged array
     */
    function twig_array_merge($arr1, $arr2)
    {
    }
    /**
     * Slices a variable.
     *
     * @param mixed $item         A variable
     * @param int   $start        Start of the slice
     * @param int   $length       Size of the slice
     * @param bool  $preserveKeys Whether to preserve key or not (when the input is an array)
     *
     * @return mixed The sliced variable
     */
    function twig_slice(\WPML\Core\Twig\Environment $env, $item, $start, $length = null, $preserveKeys = \false)
    {
    }
    /**
     * Returns the first element of the item.
     *
     * @param mixed $item A variable
     *
     * @return mixed The first element of the item
     */
    function twig_first(\WPML\Core\Twig\Environment $env, $item)
    {
    }
    /**
     * Returns the last element of the item.
     *
     * @param mixed $item A variable
     *
     * @return mixed The last element of the item
     */
    function twig_last(\WPML\Core\Twig\Environment $env, $item)
    {
    }
    /**
     * Joins the values to a string.
     *
     * The separators between elements are empty strings per default, you can define them with the optional parameters.
     *
     *  {{ [1, 2, 3]|join(', ', ' and ') }}
     *  {# returns 1, 2 and 3 #}
     *
     *  {{ [1, 2, 3]|join('|') }}
     *  {# returns 1|2|3 #}
     *
     *  {{ [1, 2, 3]|join }}
     *  {# returns 123 #}
     *
     * @param array       $value An array
     * @param string      $glue  The separator
     * @param string|null $and   The separator for the last pair
     *
     * @return string The concatenated string
     */
    function twig_join_filter($value, $glue = '', $and = null)
    {
    }
    /**
     * Splits the string into an array.
     *
     *  {{ "one,two,three"|split(',') }}
     *  {# returns [one, two, three] #}
     *
     *  {{ "one,two,three,four,five"|split(',', 3) }}
     *  {# returns [one, two, "three,four,five"] #}
     *
     *  {{ "123"|split('') }}
     *  {# returns [1, 2, 3] #}
     *
     *  {{ "aabbcc"|split('', 2) }}
     *  {# returns [aa, bb, cc] #}
     *
     * @param string $value     A string
     * @param string $delimiter The delimiter
     * @param int    $limit     The limit
     *
     * @return array The split string as an array
     */
    function twig_split_filter(\WPML\Core\Twig\Environment $env, $value, $delimiter, $limit = null)
    {
    }
    // The '_default' filter is used internally to avoid using the ternary operator
    // which costs a lot for big contexts (before PHP 5.4). So, on average,
    // a function call is cheaper.
    /**
     * @internal
     */
    function _twig_default_filter($value, $default = '')
    {
    }
    /**
     * Returns the keys for the given array.
     *
     * It is useful when you want to iterate over the keys of an array:
     *
     *  {% for key in array|keys %}
     *      {# ... #}
     *  {% endfor %}
     *
     * @param array $array An array
     *
     * @return array The keys
     */
    function twig_get_array_keys_filter($array)
    {
    }
    /**
     * Reverses a variable.
     *
     * @param array|\Traversable|string $item         An array, a \Traversable instance, or a string
     * @param bool                      $preserveKeys Whether to preserve key or not
     *
     * @return mixed The reversed input
     */
    function twig_reverse_filter(\WPML\Core\Twig\Environment $env, $item, $preserveKeys = \false)
    {
    }
    /**
     * Sorts an array.
     *
     * @param array|\Traversable $array
     *
     * @return array
     */
    function twig_sort_filter($array)
    {
    }
    /**
     * @internal
     */
    function twig_in_filter($value, $compare)
    {
    }
    /**
     * Returns a trimmed string.
     *
     * @return string
     *
     * @throws RuntimeError When an invalid trimming side is used (not a string or not 'left', 'right', or 'both')
     */
    function twig_trim_filter($string, $characterMask = null, $side = 'both')
    {
    }
    /**
     * Removes whitespaces between HTML tags.
     *
     * @return string
     */
    function twig_spaceless($content)
    {
    }
    /**
     * Escapes a string.
     *
     * @param mixed  $string     The value to be escaped
     * @param string $strategy   The escaping strategy
     * @param string $charset    The charset
     * @param bool   $autoescape Whether the function is called by the auto-escaping feature (true) or by the developer (false)
     *
     * @return string
     */
    function twig_escape_filter(\WPML\Core\Twig\Environment $env, $string, $strategy = 'html', $charset = null, $autoescape = \false)
    {
    }
    /**
     * @internal
     */
    function twig_escape_filter_is_safe(\WPML\Core\Twig\Node\Node $filterArgs)
    {
    }
    function _twig_escape_js_callback($matches)
    {
    }
    function _twig_escape_css_callback($matches)
    {
    }
    /**
     * This function is adapted from code coming from Zend Framework.
     *
     * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (https://www.zend.com)
     * @license   https://framework.zend.com/license/new-bsd New BSD License
     */
    function _twig_escape_html_attr_callback($matches)
    {
    }
    /**
     * @internal
     */
    function twig_ensure_traversable($seq)
    {
    }
    /**
     * @internal
     */
    function twig_to_array($seq, $preserveKeys = \true)
    {
    }
    /**
     * Checks if a variable is empty.
     *
     *    {# evaluates to true if the foo variable is null, false, or the empty string #}
     *    {% if foo is empty %}
     *        {# ... #}
     *    {% endif %}
     *
     * @param mixed $value A variable
     *
     * @return bool true if the value is empty, false otherwise
     */
    function twig_test_empty($value)
    {
    }
    /**
     * Checks if a variable is traversable.
     *
     *    {# evaluates to true if the foo variable is an array or a traversable object #}
     *    {% if foo is iterable %}
     *        {# ... #}
     *    {% endif %}
     *
     * @param mixed $value A variable
     *
     * @return bool true if the value is traversable
     */
    function twig_test_iterable($value)
    {
    }
    /**
     * Renders a template.
     *
     * @param array        $context
     * @param string|array $template      The template to render or an array of templates to try consecutively
     * @param array        $variables     The variables to pass to the template
     * @param bool         $withContext
     * @param bool         $ignoreMissing Whether to ignore missing templates or not
     * @param bool         $sandboxed     Whether to sandbox the template or not
     *
     * @return string The rendered template
     */
    function twig_include(\WPML\Core\Twig\Environment $env, $context, $template, $variables = [], $withContext = \true, $ignoreMissing = \false, $sandboxed = \false)
    {
    }
    /**
     * Returns a template content without rendering it.
     *
     * @param string $name          The template name
     * @param bool   $ignoreMissing Whether to ignore missing templates or not
     *
     * @return string The template source
     */
    function twig_source(\WPML\Core\Twig\Environment $env, $name, $ignoreMissing = \false)
    {
    }
    /**
     * Provides the ability to get constants from instances as well as class/global constants.
     *
     * @param string      $constant The name of the constant
     * @param object|null $object   The object to get the constant from
     *
     * @return string
     */
    function twig_constant($constant, $object = null)
    {
    }
    /**
     * Checks if a constant exists.
     *
     * @param string      $constant The name of the constant
     * @param object|null $object   The object to get the constant from
     *
     * @return bool
     */
    function twig_constant_is_defined($constant, $object = null)
    {
    }
    /**
     * Batches item.
     *
     * @param array $items An array of items
     * @param int   $size  The size of the batch
     * @param mixed $fill  A value used to fill missing items
     *
     * @return array
     */
    function twig_array_batch($items, $size, $fill = null, $preserveKeys = \true)
    {
    }
    function twig_array_filter($array, $arrow)
    {
    }
    function twig_array_map($array, $arrow)
    {
    }
    function twig_array_reduce($array, $arrow, $initial = null)
    {
    }
}
namespace WPML\Core {
    /**
     * Marks a variable as being safe.
     *
     * @param string $string A PHP variable
     *
     * @return string
     */
    function twig_raw_filter($string)
    {
    }
}
namespace WPML\Core {
    /**
     * Loads a template from a string.
     *
     *     {{ include(template_from_string("Hello {{ name }}")) }}
     *
     * @param string $template A template as a string or object implementing __toString()
     * @param string $name     An optional name of the template to be used in error messages
     *
     * @return TemplateWrapper
     */
    function twig_template_from_string(\WPML\Core\Twig\Environment $env, $template, $name = null)
    {
    }
}
namespace {
    \define('WPML_TM_VERSION', '2.11.0');
    \define('WPML_TM_PATH', \dirname(__FILE__));
    function initialize_wpml_cache_factory()
    {
    }
    /**
     * Load plugin.
     *
     * @param SitePress $sitepress WPML main plugin instance.
     */
    function wpml_tm_load($sitepress = \null)
    {
    }
    /**
     * Get support info.
     * This filter is documented WPML Core in classes/support/class-wpml-support-info-ui.php.
     *
     * @param array $blocks Support info blocks.
     *
     * @return array
     */
    function wpml_tm_support_info(array $blocks)
    {
    }
    /**
     * Migration from ICL 2.0
     */
    function wpml_tm_icl20_migration()
    {
    }
    /**
     * WPML reset user options filter.
     *
     * @param array $options User options.
     *
     * @return array
     */
    function wpml_tm_reset_user_options(array $options)
    {
    }
    /**
     * WPML Page Builders can be installed as a standalone glue plugin,
     * but it also comes packaged with WPML Core.
     *
     * To include it on WPML Core, do as follows:
     * - Include this repository as a Composer dependency.
     * - Wait until plugins_loaded to include this loader.php file.
     *
     * This will ensure that the glue plugin can be used if available;
     * otherwise, this will ensure that the WPML plugin packing the newest version will push it.
     *
     * $wpml_page_builders_version must be increased on every new version of the glue plugin.
     * Also, having a negative priority ensures that the highest version number gets called first.
     */
    /**
     * WARNING: INCREASE THIS LOADER VERSION ON EVERY NEW RELEASE.
     */
    $wpml_page_builders_version = 22;
    \define('HTTP_URL_REPLACE', 1);
    \define('HTTP_URL_JOIN_PATH', 2);
    \define('HTTP_URL_JOIN_QUERY', 4);
    \define('HTTP_URL_STRIP_USER', 8);
    \define('HTTP_URL_STRIP_PASS', 16);
    \define('HTTP_URL_STRIP_AUTH', 32);
    \define('HTTP_URL_STRIP_PORT', 64);
    \define('HTTP_URL_STRIP_PATH', 128);
    \define('HTTP_URL_STRIP_QUERY', 256);
    \define('HTTP_URL_STRIP_FRAGMENT', 512);
    \define('HTTP_URL_STRIP_ALL', 1024);
    /**
     * Build a URL.
     *
     * The parts of the second URL will be merged into the first according to
     * the flags argument.
     *
     * @param mixed $url     (part(s) of) an URL in form of a string or
     *                       associative array like parse_url() returns
     * @param mixed $parts   same as the first argument
     * @param int   $flags   a bitmask of binary or'ed HTTP_URL constants;
     *                       HTTP_URL_REPLACE is the default
     * @param array $new_url if set, it will be filled with the parts of the
     *                       composed url like parse_url() would return
     * @return string
     */
    function http_build_url($url, $parts = array(), $flags = \HTTP_URL_REPLACE, &$new_url = array())
    {
    }
    /**
     * @param string $fileIdentifier
     * @param string $file
     * @return void
     */
    function composerRequire80c12143e38f72b0252b5fc1bac6346b($fileIdentifier, $file)
    {
    }
    \define('WPML_PAGE_BUILDERS_VERSION', '2.2.0');
    \define('WPML_PAGE_BUILDERS_PATH', __DIR__);
    /* DEBUG ACTION */
    /**
     * @param \stdClass $term_object
     *
     * @return int
     */
    function get_term_taxonomy_id_from_term_object($term_object)
    {
    }
    function get_ATE_account_data()
    {
    }
    function prepare_synchronization_needed_warning($elements, $type)
    {
    }
    /**	@var PostTypesUI $custom_types_ui */
    $custom_post_types_ui = \WPML\Container\make(\WPML\Settings\PostTypesUI::class);
    /**	@var WPML_Custom_Types_Translation_UI $custom_types_ui */
    $custom_tax_types_ui = \WPML\Container\make(\WPML_Custom_Types_Translation_UI::class);
    /**
     * @param array $navigation_items
     */
    $navigation_items = \apply_filters('wpml_admin_languages_navigation_items', $navigation_items);
    /** @var SitePress $sitepress */
    /** @var ICLMenusSync $icl_menus_sync */
    $active_languages = $sitepress->get_active_languages();
    /** @var \stdClass $res */
    $res = $wpdb->get_row($res_prepared);
    /**
     * Checks if the language switcher is to be displayed.
     * Used to check if the displayed page is a root page and the switcher is to be hidden because of it.
     *
     * @return bool true if the switcher is to be hidden
     */
    function wpml_home_url_ls_hide_check()
    {
    }
    /**
     * @package wpml-core
     */
    function icl_reset_language_data()
    {
    }
    function icl_sitepress_activate()
    {
    }
    function icl_sitepress_deactivate()
    {
    }
    function icl_enable_capabilities()
    {
    }
    /**
     * Fires at plugins_loaded action, to call icl_enable_capabilities().
     * https://onthegosystems.myjetbrains.com/youtrack/issue/wpmlcore-5695
     */
    function wpml_enable_capabilities()
    {
    }
    /**
     * Registers scripts so that they can be reused throughout WPML plugins
     */
    function wpml_tm_register_js_scripts()
    {
    }
    function icl_incomp_plugins_warn()
    {
    }
    \define('CUSTOM_TEXT_MAX_LENGTH', 1000);
    \define('ICL_LANGUAGE_NOT_SUPPORTED', 3);
    function translation_service_details($service, $show_project = \false)
    {
    }
    function object_to_array($obj)
    {
    }
    \define('ICL_PRODUCTION_MODE', '2.1.1');
    function icl_language_canonical_redirects()
    {
    }
    function _cleanup_header_comment($str)
    {
    }
    function esc_textarea($text)
    {
    }
    function array_replace_recursive_recurse($array, $array1)
    {
    }
    /*
     @todo: [WPML 3.3] check if needed in 3.3 */
    /* This file includes a set of functions that can be used by WP plugins developers to make their plugins interact with WPML */
    /* constants */
    \define('WPML_API_SUCCESS', 0);
    \define('WPML_API_ERROR', 99);
    \define('WPML_API_INVALID_LANGUAGE_CODE', 1);
    \define('WPML_API_INVALID_TRID', 2);
    \define('WPML_API_LANGUAGE_CODE_EXISTS', 3);
    \define('WPML_API_CONTENT_NOT_FOUND', 4);
    \define('WPML_API_TRANSLATION_NOT_FOUND', 5);
    \define('WPML_API_INVALID_CONTENT_TYPE', 6);
    \define('WPML_API_CONTENT_EXISTS', 7);
    \define('WPML_API_FUNCTION_ALREADY_DECLARED', 8);
    \define('WPML_API_CONTENT_TRANSLATION_DISABLED', 9);
    \define('WPML_API_GET_CONTENT_ERROR', 0);
    \define('WPML_API_MAGIC_NUMBER', 6);
    \define('WPML_API_ASIAN_LANGUAGES', 'zh-hans|zh-hant|ja|ko');
    \define('WPML_API_COST_PER_WORD', 0.09);
    function _wpml_api_allowed_content_type($content_type)
    {
    }
    /**
     * Add translatable content to the WPML translations table
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string      $content_type  Content type.
     * @param int         $content_id    Content ID.
     * @param bool|string $language_code Content language code. (defaults to current language)
     * @param bool|int    $trid          Content trid - if a translation in a different language already exists.
     *
     * @return int error code
     */
    function wpml_add_translatable_content($content_type, $content_id, $language_code = \false, $trid = \false)
    {
    }
    /**
     * Update translatable content in the WPML translations table
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string $content_type  Content type.
     * @param int    $content_id    Content ID.
     * @param string $language_code Content language code.
     *
     * @return int error code
     */
    function wpml_update_translatable_content($content_type, $content_id, $language_code)
    {
    }
    /**
     * Update translatable content in the WPML translations table
     *
     * @since      1.3
     * @deprecated deprecated since 3.2
     *
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string      $content_type  Content type.
     * @param int         $content_id    Content ID.
     * @param bool|string $language_code Content language code. (when ommitted - delete all translations associated with the respective content)
     *
     * @return int error code
     */
    function wpml_delete_translatable_content($content_type, $content_id, $language_code = \false)
    {
    }
    /**
     * Get trid value for a specific piece of content
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int    $content_id Content ID.
     *
     * @return int trid or 0 for error
     *  */
    function wpml_get_content_trid($content_type, $content_id)
    {
    }
    /**
     * Detects the current language and returns the language relevant content id. optionally it can return the original id if a translation is not found
     * See also wpml_object_id_filter() in \template-functions.php
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int    $content_id Content ID.
     * @param bool   $return_original return the original id when translation not found.
     *
     * @return int trid or 0 for error
     */
    function wpml_get_content($content_type, $content_id, $return_original = \true)
    {
    }
    /**
     * Get translations for a certain piece of content
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int    $content_id   Content ID.
     * @param bool   $skip_missing
     *
     * @internal   param bool $return_original return the original id when translation not found.
     *
     * @return array|int translations or error code
     */
    function wpml_get_content_translations($content_type, $content_id, $skip_missing = \true)
    {
    }
    /**
     *  Returns a certain translation for a piece of content
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     * @param int    $content_id Content ID.
     * @param bool   $language_code
     *
     * @return int|array error code or array('lang'=>element_id)
     */
    function wpml_get_content_translation($content_type, $content_id, $language_code)
    {
    }
    /**
     * Returns the list of active languages
     * See also wpml_get_active_languages_filter() in \template-functions.php
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @return array
     *  */
    function wpml_get_active_languages()
    {
    }
    /**
     *  Get contents of a specific type
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string $content_type Content type.
     *
     * @param bool   $language_code
     *
     * @return int or array
     */
    function wpml_get_contents($content_type, $language_code = \false)
    {
    }
    /**
     * Returns the number of the words that will be sent to translation and a cost estimate
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param string      $string
     * @param bool|string $language - should be specified when the language is one of zh-hans|zh-hant|ja|ko
     *
     * @return array (count, cost)
     */
    function wpml_get_word_count($string, $language = \false)
    {
    }
    /**
     *  Check user is translator
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param string $from_language Language to translate from
     * @param string $to_language Language to translate into
     *
     * @return bool (true if translator)
     */
    function wpml_check_user_is_translator($from_language, $to_language)
    {
    }
    /**
     *  Check user is translator
     *
     * @param int         $post_id          Post ID
     * @param int         $cred_form_id
     * @param bool|string $current_language (optional) current language
     *
     * @return bool (true if translator)
     * @package    WPML
     * @subpackage WPML API
     *
     * @internal   param int $form_id Form ID
     * @since      1.3
     */
    function wpml_generate_controls($post_id, $cred_form_id, $current_language = \false)
    {
    }
    /**
     *  Get original content
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param int    $post_id Post ID
     * @param string $field   Post field
     *
     * @param string|false   $field_name
     *
     * @return string or array
     */
    function wpml_get_original_content($post_id, $field, $field_name = \false)
    {
    }
    /**
     *  Get synchronizing taxonomies
     *
     * @since      1.3
     * @package    WPML
     * @subpackage WPML API
     *
     * @param int    $post_id Post ID
     *
     * @param string $tax_name
     *
     * @return array
     */
    function wpml_get_synchronizing_taxonomies($post_id, $tax_name)
    {
    }
    /**
     *  Get synchronizing fields
     *
     * @since 1.3
     * @package WPML
     * @subpackage WPML API
     *
     * @param int    $post_id Post ID
     * @param string $field_name Field name
     * @return array
     */
    function wpml_get_synchronizing_fields($post_id, $field_name)
    {
    }
    \define('WPML_TM_FOLDER', 'tm');
    \define('WPML_TM_URL', \plugins_url('', \dirname(__FILE__)));
    \define('TP_MIGRATION_NOT_STARTED', 0);
    \define('TP_MIGRATION_REQUESTED', 2);
    \define('TP_MIGRATION_IN_PROGRESS', 3);
    \define('TP_MIGRATION_WAITING_CONFIRMATION', 4);
    \define('TP_MIGRATION_COMPLETED', 1);
    \define('TRANSLATION_PROXY_XLIFF_VERSION', '12');
    \define('WPML_XLIFF_TM_URL', \plugins_url('', \dirname(__FILE__)));
    \define('WPML_XLIFF_TM_NEWLINES_REPLACE', 1);
    \define('WPML_XLIFF_TM_NEWLINES_ORIGINAL', 2);
    \define('WPML_XLIFF_DEFAULT_VERSION', '12');
    \define('TA_URL_ENDPOINT', 'https://www.icanlocalize.com');
    \define('TA_SCHEDULE_OCCURENCE', 'daily');
    function icl_xml2array($contents, $get_attributes = \true)
    {
    }
    /**
     * Registers scripts so that they can be reused throughout WPML plugins
     * Hooked to `admin_enqueue_scripts`
     */
    function wpml_register_js_scripts()
    {
    }
    function icl_dev_mode_warning()
    {
    }
    function icl_load_hacks()
    {
    }
    /**
     * Loads compatibility classes for active plugins.
     */
    function wpml_plugins_integration_setup()
    {
    }
    /**
     * Loads compatibility classes for active themes.
     */
    function wpml_themes_integration_setup()
    {
    }
    /**
     * @param string $input
     * @param string $default_if_invalid
     *
     * @return string
     */
    function wpml_sanitize_hex_color($input, $default_if_invalid = '')
    {
    }
    function wpml_sanitize_hex_color_array($input, $default_if_invalid = '', $bypass_non_strings = \true, $recursive = \false)
    {
    }
    /**
     * @param string|array $input
     *
     * @return bool
     */
    function wpml_is_valid_hex_color($input)
    {
    }
    function wpml_get_valid_hex_color_pattern()
    {
    }
    /**
     * Convert RGB color code to HEX code.
     *
     * @param array $rgb
     *
     * @return string|false
     */
    function wpml_rgb_to_hex($rgb)
    {
    }
    /**
     * Fetch the wpml config files for known plugins and themes
     *
     * @package wpml-core
     */
    function update_wpml_config_index_event()
    {
    }
    function new_duplicated_terms_filter($post_ids, $duplicates_only = \true)
    {
    }
    function display_tax_sync_message($post_id)
    {
    }
    function remove_taxonomy_hierarchy_message()
    {
    }
    /**
     * @return WPML_Notices
     */
    function wpml_get_admin_notices()
    {
    }
    function wpml_validate_language_domain_action()
    {
    }
    function update_string_statuses()
    {
    }
    function fix_icl_string_status()
    {
    }
    function icl_upgrade_2_0_0_steps($step, $stepper)
    {
    }
    function icl_migrate_2_0_0()
    {
    }
    function icl_ajx_upgrade_2_0_0($call, $request)
    {
    }
    function update_icl_strings_charset_and_collations()
    {
    }
    function update_seo_settings()
    {
    }
    function upgrade_3_5_1_get_language_charset_and_collation()
    {
    }
    /**
     * @package wpml-core
     */
    function update_gettext_context_schema()
    {
    }
    function update_domain_name_context()
    {
    }
    function wpml_load_request_handler($is_admin, $active_language_codes, $default_language)
    {
    }
    function icl_wpmuadminedit()
    {
    }
    function icl_network_administration_menu()
    {
    }
    function icl_network_reset_wpml()
    {
    }
    function icl_network_deactivate_wpml($blog_id = \false)
    {
    }
    function icl_network_activate_wpml($blog_id = \false)
    {
    }
    /**
     * @param int|object $element
     *
     * @return string
     */
    function wpml_tm_element_md5($element)
    {
    }
    /**
     * Filters the possible target languages for creating a new post translation
     * on the post edit screen.
     *
     * @param string[] $allowed_langs
     * @param int      $element_id
     * @param string   $element_type_prefix
     *
     * @return string[]
     */
    function wpml_tm_filter_post_target_langs($allowed_langs, $element_id, $element_type_prefix)
    {
    }
    function icl_import_xml()
    {
    }
    function icl_import_xml_start()
    {
    }
    /**
     * SitePress Template functions
     *
     * @package wpml-core
     */
    /**
     * @since      3.2.3
     * @deprecated Use 'wpml_get_capabilities' instead.
     */
    function icl_sitepress_get_capabilities()
    {
    }
    function wpml_get_capabilities_names()
    {
    }
    function wpml_get_capabilities_labels()
    {
    }
    function wpml_get_capabilities()
    {
    }
    function wpml_get_read_only_capabilities_filter($empty)
    {
    }
    function wpml_get_roles()
    {
    }
    function wpml_roles_read_only_filter($empty)
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_home_url' filter instead.
     */
    function icl_get_home_url()
    {
    }
    /**
     * Get the home url in the current language
     * To be used in place of get_option('home')
     * Note: Good code will make use of get_home_url() or home_url() which apply filters natively.
     * In this case there is no need to replace anything.
     *
     * @return string
     * @since 3.2
     * @uses  \SitePress::api_hooks
     */
    function wpml_get_home_url_filter()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_active_languages' filter instead.
     *
     * @param string $a
     *
     * @return mixed
     */
    function icl_get_languages($a = '')
    {
    }
    /**
     * Get a list of the active languages
     * Usually used to create custom language switchers
     *
     * @param mixed        $empty_value   This is normally the value the filter will be modifying.
     *                                    We are not filtering anything here therefore the NULL value
     *                                    This for the filter function to actually receive the full argument list:
     *                                    apply_filters( 'wpml_active_languages', '', $args)
     * @param array|string $args          {
     *                                    Optional A string of arguments to filter the language output
     *
     * @type bool          $skip_missing  How to treat languages with no translations. 0 | Skip language or 1 | Link to home of language for missing translations.
     * @type string        $link_empty_to Works in conjunction with skip_missing = 0 and allows using custom links for the languages that do not have translations
     *                                    for the current element. {%lang} can be used as placeholder for the language code. Empty by default.
     * @type string        $orderby       Accepts id|code|name Defaults to custom.
     *                                    The custom order can be defined in the WordPress admin under WPML > Languages > Language Switcher Options
     * @type string        $order         Accepts asc|desc
     *                                    }
     * @return array
     * @since                             3.2
     *
     * @uses                              \SitePress::api_hooks
     */
    function wpml_get_active_languages_filter($empty_value, $args = '')
    {
    }
    /**
     * @param string $native_name
     * @param bool   $translated_name
     * @param bool   $lang_native_hidden
     * @param bool   $lang_translated_hidden
     *
     * @return string
     * @deprecated 3.2 use 'wpml_display_language_names' filter instead.
     *
     * @since      unknown
     */
    function icl_disp_language($native_name, $translated_name = \false, $lang_native_hidden = \false, $lang_translated_hidden = \false)
    {
    }
    /**
     * @param mixed       $empty_value
     *
     * @param string      $native_name            Required The language native name
     * @param string|bool $translated_name        Required The language translated name Defaults to FALSE
     * @param bool        $lang_native_hidden     Optional, default is FALSE 0|false or 1|true Whether to hide the language native name or not.
     * @param bool        $lang_translated_hidden Optional, default is FALSE 0|false or 1|true Whether to hide the language translated name or not.
     *
     * @return string HTML content
     * @deprecated since 3.6.0 / See new Language Switcher API with use of Twig templates
     *
     * Get the native or translated language name or both
     * Checks if native_language_name and translated_language_name are different.
     * If so, it returns them both, otherwise, it returns only one.
     * Usually used in custom language switchers
     * @since      3.2
     *
     * @see        \wpml_get_active_languages_filter
     *
     * @uses       \SitePress::api_hooks
     */
    function wpml_display_language_names_filter($empty_value, $native_name, $translated_name = \false, $lang_native_hidden = \false, $lang_translated_hidden = \false)
    {
    }
    /**
     * @param int    $element_id
     * @param string $element_type
     * @param string $link_text
     * @param array  $optional_parameters
     * @param string $anchor
     * @param bool   $echo
     * @param bool   $return_original_if_missing
     *
     * @return string
     * @since      unknown
     * @deprecated 3.2 use 'wpml_element_link' filter instead.
     *
     */
    function icl_link_to_element($element_id, $element_type = 'post', $link_text = '', $optional_parameters = array(), $anchor = '', $echo = \true, $return_original_if_missing = \true)
    {
    }
    /**
     * Get the link to an element in the current language
     * Produces localized links for WordPress elements (post types and taxonomy terms)
     *
     * @param int    $element_id                 Required The ID of the post type (post, page) or taxonomy term (tag or category) to link to.
     * @param string $element_type               Optional The type of element to link to. Can be 'post', 'page', 'tag' or 'category'.    Defaults to 'post'
     * @param string $link_text                  Optional The link text. Defaults to the element's name.
     * @param array  $optional_parameters        Optional Arguments for the link.
     * @param string $anchor                     Optional Anchor for the link.
     * @param bool   $echo                       Optional 0|false to return or 1|true to echo the localized link. Defaults to true.
     * @param bool   $return_original_if_missing Optional, default is TRUE If set to true it will always return a value (the original value, if translation is missing)
     *
     * @return string HTML content
     * @since 3.2
     *
     * @uses  \SitePress::api_hooks
     */
    function wpml_link_to_element_filter($element_id, $element_type = 'post', $link_text = '', $optional_parameters = array(), $anchor = '', $echo = \true, $return_original_if_missing = \true)
    {
    }
    /**
     * @param int         $element_id
     * @param string      $element_type
     * @param bool        $return_original_if_missing
     * @param null|string $ulanguage_code
     *
     * @return null|int
     * @deprecated 3.2 use 'wpml_object_id' filter instead.
     *
     * @since      unknown
     */
    function icl_object_id($element_id, $element_type = 'post', $return_original_if_missing = \false, $ulanguage_code = \null)
    {
    }
    /**
     * Get the element in the current language
     *
     * @param int         $element_id                 Use term_id for taxonomies, post_id for posts
     * @param string      $element_type               Use post, page, {custom post type name}, nav_menu, nav_menu_item, category, tag, etc.
     *                                                You can also pass 'any', to let WPML guess the type, but this will only work for posts.
     * @param bool        $return_original_if_missing Optional, default is FALSE. If set to true it will always return a value (the original value, if translation is missing).
     * @param string|NULL $language_code              Optional, default is NULL. If missing, it will use the current language.
     *                                                If set to a language code, it will return a translation for that language code or
     *                                                the original if the translation is missing and $return_original_if_missing is set to TRUE.
     *
     * @return int|NULL
     * @since 3.2
     *
     * @uses  \SitePress::api_hooks
     */
    function wpml_object_id_filter($element_id, $element_type = 'post', $return_original_if_missing = \false, $language_code = \null)
    {
    }
    /**
     * @param string $lang_code
     * @param bool   $display_code
     *
     * @return string
     * @deprecated 3.2 use 'wpml_translated_language_name' filter instead
     *
     * @since      unknown
     */
    function icl_get_display_language_name($lang_code, $display_code = \false)
    {
    }
    /**
     * Returns the translated name of a language in another language.
     * The languages involved do not need to be active.
     *
     * @param mixed       $empty_value
     *
     * @param string      $lang_code          The language name will be for this language. Accepts a 2-letter code e.g. en
     * @param string|bool $display_code       The language name will display translated in this language. Accepts a 2-letter code e.g. de.
     *                                        If set to false it will return the translated name in the current language. Default is FALSE.
     *
     * @return string The language translated name
     * @see   \wpml_get_active_languages_filter
     *
     * @since 3.2
     *
     * @uses  \SitePress::api_hooks
     */
    function wpml_translated_language_name_filter($empty_value, $lang_code, $display_code = \false)
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_current_language' filter instead.
     */
    function icl_get_current_language()
    {
    }
    /**
     * Get the current language
     *
     * @since      3.2
     * @deprecated Use apply_filters('wpml_current_language', '');
     * Example: $my_current_lang = apply_filters('wpml_current_language', '');
     */
    function wpml_get_current_language_filter()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_default_language' filter instead
     */
    function icl_get_default_language()
    {
    }
    /**
     * Get the default language
     *
     * @param mixed $empty_value
     *
     * @return string
     * @see   \wpml_get_active_languages_filter
     * @uses  \SitePress::api_hooks
     * @since 3.2
     *
     */
    function wpml_get_default_language_filter($empty_value)
    {
    }
    /**
     * Returns the default language
     *
     * @since 1.3
     * @return string
     */
    function wpml_get_default_language()
    {
    }
    /**
     * Get current language
     *
     * @since 1.3
     * @return string
     */
    function wpml_get_current_language()
    {
    }
    /**
     * @param string $folder
     *
     * @return bool
     */
    function icl_tf_determine_mo_folder($folder)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param array $attributes
     * @param bool  $checked
     * @param bool  $disabled
     *
     * @return string
     */
    // $field_prefix = 'wpml_cf_translation_preferences_option_ignore_'
    function wpml_input_field_helper($attributes = array(), $checked = \false, $disabled = \false)
    {
    }
    /**
     * @param array<string,string> $attributes
     * @param string               $caption
     *
     * @return string
     * @todo: [WPML 3.3] refactor in 3.3
     *
     */
    function wpml_label_helper($attributes, $caption)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param array<mixed> $args
     * @param string       $id_prefix
     * @param string|int   $value
     * @param string       $caption
     *
     * @return string
     */
    function wpml_translation_preference_input_helper($args, $id_prefix, $value, $caption)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @param string $id
     * @param bool   $custom_field
     * @param string $class
     * @param bool   $ajax
     * @param string $default_value
     * @param bool   $fieldset
     * @param bool   $suppress_error
     *
     * @return string
     */
    function wpml_cf_translation_preferences($id, $custom_field = \false, $class = 'wpml', $ajax = \false, $default_value = 'ignore', $fieldset = \false, $suppress_error = \false)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     * wpml_get_copied_fields_for_post_edit
     * return a list of fields that are marked for copying and the
     * original post id that the fields should be copied from
     * This should be used to populate any custom field controls when
     * a new translation is selected and the field is marked as "copy" (sync)
     *
     * @param array $fields
     *
     * @return array
     */
    function wpml_get_copied_fields_for_post_edit($fields = array())
    {
    }
    /**
     * Retrieve language information of a post by its ID
     * The language information includes
     * the post locale,
     * the language text direction (True for RTL, False for LTR),
     * the post language translated name and native name and
     * whether the current language is different to the post language (True/False)
     *
     * @param mixed $empty_value
     *
     * @see  \wpml_get_active_languages_filter
     *
     * @param int   $post_id Optional The post id to retrieve information of (post, page, attachment, custom) Defaults to current post ID.
     *
     * @return array|WP_Error
     * @uses \SitePress::api_hooks
     */
    function wpml_get_language_information($empty_value = \null, $post_id = \null)
    {
    }
    /**
     * Add metabox definition to edit post type in Types
     *
     * @since x.x.x
     *
     * @param array $boxes Meta boxes in Types.
     *
     * @return array Meta boxes in Types.
     */
    function wpml_wpcf_meta_box_order_defaults($boxes)
    {
    }
    /**
     * @todo: [WPML 3.3] refactor in 3.3
     *
     * @return string
     */
    function wpml_custom_post_translation_options()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_add_language_selector' filter instead
     */
    function icl_language_selector()
    {
    }
    /**
     * Display the drop down language selector
     *
     * @since 3.2
     * Will use the language selector settings from "Language switcher as shortcode or action"
     * @uses  \SitePress::api_hooks
     * example: do_action( 'wpml_add_language_selector' );
     */
    function wpml_add_language_selector_action()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_footer_language_selector' filter instead
     */
    function icl_language_selector_footer()
    {
    }
    /**
     * Display the footer language selector
     *
     * @since 3.2
     * Will use the language selector include configuration from the WPML -> Language admin screen
     * @uses  \SitePress::api_hooks
     * example: do_action('wpml_footer_language_selector');
     */
    function wpml_footer_language_selector_action()
    {
    }
    /**
     * Returns an HTML hidden input field with name="lang" and value of current language
     * This is for theme authors, to make their themes compatible with WPML when using the search form.
     * In order to make the search form work properly, they should use standard WordPress template tag get_search_form()
     * In this case WPML will handle the the rest.
     * If for some reasons the template function can't be used and form is created differently,
     * authors must the following code between inside the form
     * <?php
     * if (function_exists('wpml_the_language_input_field')) {
     *    wpml_the_language_input_field();
     * }
     *
     * @global SitePress $sitepress
     * @return string|null HTML input field or null
     * @since      3.2
     * @deprecated 3.2 use 'wpml_add_language_form_field' action instead
     */
    function wpml_get_language_input_field()
    {
    }
    /**
     * Echoes the value returned by \wpml_get_language_input_field
     *
     * @since      3.1.7.3
     * @deprecated 3.2 use 'wpml_add_language_form_field' filter instead
     */
    function wpml_the_language_input_field()
    {
    }
    /**
     * @since 3.2
     * Returns an HTML hidden input field with name="lang" and as value the current language
     * In order to add a search form to your theme you would normally use the standard WordPress template tag: <code>get_search_form()</code>
     * If you are making use of the default WordPress search form, you do not need to edit anything. WPML will handle the rest.
     * However, there may be times when <code>get_search_form()</code> can't be used.
     * If you are creating a custom search form and you need to make it WPML compatible then this action hook is what you need.
     * Add the action hook  inside the form:
     * <?php
     * do_action('wpml_add_language_form_field');
     * ?>
     * @global SitePress $sitepress
     * @uses  \SitePress::api_hooks
     */
    function wpml_add_language_form_field_action()
    {
    }
    function wpml_language_form_field_shortcode()
    {
    }
    function wpml_get_language_form_field()
    {
    }
    /**
     * @since      unknown
     * @deprecated 3.2 use 'wpml_element_translation_type' filter instead
     *
     * @param int    $id
     * @param string $type
     *
     * @return bool|int
     */
    function wpml_get_translation_type($id, $type = 'post')
    {
    }
    /**
     * @since 3.2
     * Accepts the ID and type of an element and returns its translation type.
     * Values will be one of these:
     *      WPML_ELEMENT_IS_NOT_TRANSLATED  = 0
     *      WPML_ELEMENT_IS_TRANSLATED      = 1
     *      WPML_ELEMENT_IS_DUPLICATED      = 2
     *      WPML_ELEMENT_IS_A_DUPLICATE     = 3
     *
     * @param mixed  $empty_value
     *
     * @see   \wpml_get_active_languages_filter
     *
     * @param int    $element_id    The element id to retrieve the information of. Use term_id for taxonomies, post_id for posts
     * @param string $element_type  Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                              or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *
     * @return int
     * @uses  \SitePress::api_hooks
     */
    function wpml_get_element_translation_type_filter($empty_value, $element_id, $element_type)
    {
    }
    /**
     * Accepts the ID of a post and returns its translation type.
     * Values will be one of these:
     *      WPML_ELEMENT_IS_NOT_TRANSLATED  = 0
     *      WPML_ELEMENT_IS_TRANSLATED      = 1
     *      WPML_ELEMENT_IS_DUPLICATED      = 2
     *      WPML_ELEMENT_IS_A_DUPLICATE     = 3
     *
     * @param int $post_id The ID of the post from which to get translation information
     *
     * @return int
     * @internal   param string $post_type
     * @since      3.2
     * @deprecated 3.2 use 'wpml_element_translation_type' filter instead
     */
    function wpml_get_post_translation_type($post_id)
    {
    }
    /**
     * @param int    $post_id
     * @param string $post_type
     *
     * @return bool
     * @since      3.2
     * @deprecated 3.2 use 'wpml_element_has_translations' filter instead
     */
    function wpml_post_has_translations($post_id, $post_type = 'post')
    {
    }
    /**
     * Checks if an element has translations
     * A translation can be a manual translation or a duplication.
     *
     * @since 3.2
     *
     * @param mixed  $empty_value
     *
     * @see   \wpml_get_active_languages_filter
     *
     * @param int    $element_id    Use term_id for taxonomies, post_id for posts
     * @param string $element_type  Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                              or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *
     * @return bool
     * @uses  \SitePress::api_hooks
     */
    function wpml_element_has_translations_filter($empty_value, $element_id, $element_type = 'post')
    {
    }
    function wpml_get_content_translations_filter($empty, $post_id, $content_type = 'post')
    {
    }
    /**
     * @param int $post_id
     *
     * @return mixed
     * @since      3.2
     * @deprecated 3.2 use 'wpml_master_post_from_duplicate' filter instead
     */
    function wpml_get_master_post_from_duplicate($post_id)
    {
    }
    /**
     * Get the original post from the duplicated post
     *
     * @param int $post_id The duplicated post ID
     *
     * @return int or empty string if there is nothing to return
     * @uses \SitePress::api_hooks
     */
    function wpml_get_master_post_from_duplicate_filter($post_id)
    {
    }
    /**
     * @param int $master_post_id
     *
     * @return mixed
     * @since      3.2
     * @deprecated 3.2 use 'wpml_post_duplicates' filter instead
     */
    function wpml_get_post_duplicates($master_post_id)
    {
    }
    /**
     * Get the duplicated post ids
     * Will return an associative array with language codes as indexes and post_ids as values
     *
     * @param int $master_post_id The original post id from which duplicates exist
     *
     * @return array
     * @uses \SitePress::api_hooks
     */
    function wpml_get_post_duplicates_filter($master_post_id)
    {
    }
    /**
     * Filters a WordPress element by adding the WPML prefix 'post_', 'tax_', or nothing for 'comment' as used in icl_translations db table
     *
     * @since 3.2
     *
     * @param string $element_type    Accepts comment, post, page, attachment, nav_menu_item, {custom post key},
     *                                nav_menu, category, post_tag, {custom taxonomy key}
     *
     * @return string
     * @uses  \SitePress::api_hooks
     */
    function wpml_element_type_filter($element_type)
    {
    }
    /**
     * Retrieves language information for a translatable element
     * Checks icl_translations db table and returns an object with the element's
     * trid, source language code and language code
     *
     * @since                             3.2.2
     *
     * @param mixed $element_object       A WordPress object.
     * @param array $args                 {
     *                                    Required An array of arguments to be used
     *
     * @type int    $element_id           Use term_taxonomy_id for taxonomies, post_id for posts
     * @type string $element_type         Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                                    or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *                                    }
     * @return object
     * @uses                              \SitePress::api_hooks
     */
    function wpml_element_language_details_filter($element_object, $args)
    {
    }
    /**
     * Retrieves the language code for a translatable element
     * Checks icl_translations db table and returns the element's language code
     *
     * @since                             3.2.2
     *
     * @param mixed $language_code        A 2-letter language code.
     * @param array $args                 {
     *                                    Required An array of arguments to be used
     *
     * @type int    $element_id           Use term_taxonomy_id for taxonomies, post_id for posts
     * @type string $element_type         Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                                    or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *                                    }
     * @return string
     * @uses                              \SitePress::api_hooks
     */
    function wpml_element_language_code_filter($language_code, $args)
    {
    }
    /**
     * Retrieves the elements without translations
     * Queries the database and returns an array with ids
     *
     * @since                             3.2.2
     *
     * @param array $element_ids          An array of element ids.
     * @param array $args                 {
     *                                    Required An array of arguments to be used
     *
     * @type string $target_language      The target language code
     * @type string $source_language      The source language code
     * @type string $element_type         Can be a post type: post, page, attachment, nav_menu_item, {custom post key}
     *                                    or taxonomy: category, post_tag, nav_menu {custom taxonomy key}
     *                                    }
     * @return array
     * @uses                              \SitePress::api_hooks
     */
    function wpml_elements_without_translations_filter($element_ids, $args)
    {
    }
    /**
     * @deprecated Use the filter hook `wpml_permalink` instead
     *
     * Filters a WordPress permalink and converts it to a language specific permalink based on plugin settings
     *
     * @since 3.2.2
     *
     * @param string      $url           The WordPress generated url to filter
     * @param null|string $language_code if null, it falls back to default language for root page,
     *                                   or current language in all other cases.
     *
     * @return string
     */
    function wpml_permalink_filter($url, $language_code = \null)
    {
    }
    /**
     * Switches WPML's query language
     *
     * @since                           3.2.2
     * @type null|string $language_code The language code to switch  to
     *                                  If set to null it restores the original language
     *                                  If set to 'all' it will query content from all active languages
     *                                  Defaults to null
     * @uses                            \SitePress::api_hooks
     */
    function wpml_switch_language_action($language_code = \null)
    {
    }
    function wpml_get_authenticated_action()
    {
    }
    /**
     * Validates a nonce according to the schema also used by \wpml_nonce_field
     *
     * @param string $action
     *
     * @return false|int
     */
    function wpml_is_action_authenticated($action)
    {
    }
    /**
     * Generates HTML for the hidden nonce input field following the schema
     * used by \wpml_is_action_authenticated
     *
     * @param string $action
     *
     * @return string
     */
    function wpml_nonce_field($action)
    {
    }
    function uuid_v5($name, $ns_uuid = '6ba7b811-9dad-11d1-80b4-00c04fd430c8')
    {
    }
    /**
     * @param string   $object_id
     * @param string   $object_type
     * @param int|null $timestamp   If this parameter is `null`, it will be assigned the current time
     *                              Set this parameter to 0 if the uuid should not have a time footprint
     *
     * @return string
     */
    function wpml_uuid($object_id, $object_type, $timestamp = \null)
    {
    }
    /**
     * A more helpful version of `admin_url`
     * Is not called it `wpml_admin_url` because there is already a class with the same name
     *
     * @param array $args
     *
     * @return string
     */
    function wpml_get_admin_url(array $args = array())
    {
    }
    \define('ICL_DISABLE_CACHE', \false);
    function icl_disable_cache()
    {
    }
    function icl_cache_get($key)
    {
    }
    function icl_cache_set($key, $value = \null)
    {
    }
    function icl_cache_clear($key = \false, $key_as_prefix = \false)
    {
    }
    function w3tc_translate_cache_key_filter($key)
    {
    }
    /**
     * @return mixed
     */
    function icl_get_languages_names()
    {
    }
    /**
     * @return array
     */
    function icl_get_languages_codes()
    {
    }
    /**
     * @return array
     */
    function icl_get_languages_locales()
    {
    }
    \define('WPML_UPGRADE_NOT_POSSIBLE', \true);
    function icl_plugin_upgrade()
    {
    }
    function icl_upgrade_version($version, $force = \false)
    {
    }
    function icl_plugin_too_old()
    {
    }
    function icl_table_column_exists($table_name, $column_name)
    {
    }
    function icl_table_index_exists($table_name, $index_name)
    {
    }
    function icl_alter_table_columns($table_name, $column_definitions)
    {
    }
    function icl_drop_table_index($table_name, $index_name)
    {
    }
    function icl_create_table_index($table_name, $index_definition)
    {
    }
    /**
     * @param array<mixed>  $array
     * @param array<string> $required_keys
     *
     * @return bool
     */
    function icl_array_has_required_keys($array, $required_keys)
    {
    }
    function wpml_tm_save_job_fields_from_post($job_id)
    {
    }
    /**
     * @param array $data
     * @param bool  $redirect_after_saving
     *
     * @return bool
     */
    function wpml_tm_save_data(array $data, $redirect_after_saving = \true)
    {
    }
    function action_wpml_tm_save_data($data)
    {
    }
    function wpml_tm_add_translation_job($rid, $translator_id, $translation_package, $batch_options)
    {
    }
    /**
     * @param int $job_id
     */
    function wpml_set_job_translated_term_values($job_id)
    {
    }
    function wpml_tm_assign_translation_job($job_id, $translator_id, $service, $type)
    {
    }
    /**
     * Potentially handles the request to add strings to the translation basket,
     * triggered by String Translation.
     */
    function wpml_tm_add_strings_to_basket()
    {
    }
    function getTranslationSendMethod()
    {
    }
    function deprecated_icl_data_from_pro_translation($translation)
    {
    }
    /**
     * @return WPML_TM_Element_Translations
     */
    function wpml_tm_load_element_translations()
    {
    }
    function wpml_tm_load_status_display_filter()
    {
    }
    /**
     * @depecated since WPML 4.5.0
     *
     * @return \WPML_TM_Page_Builders_Hooks
     */
    function wpml_tm_page_builders_hooks()
    {
    }
    /**
     * @return \WPML_Custom_XML_Factory
     */
    function wpml_tm_custom_xml_factory()
    {
    }
    /**
     * @return \WPML_Custom_XML_UI_Hooks
     */
    function wpml_tm_custom_xml_ui_hooks()
    {
    }
    /**
     * @return \WPML_UI_Screen_Options_Factory
     */
    function wpml_ui_screen_options_factory()
    {
    }
    /**
     * @return \WPML_TM_Loader
     */
    function wpml_tm_loader()
    {
    }
    /**
     * @return \WPML_TP_Translator
     */
    function wpml_tm_translator()
    {
    }
    /**
     * It returns a single instance of \WPML_Translation_Management.
     *
     * @return \WPML_Translation_Management
     */
    function wpml_translation_management()
    {
    }
    /**
     * @return \WPML_Translation_Basket
     */
    function wpml_translation_basket()
    {
    }
    /**
     * @return \WPML_TM_Translate_Independently
     */
    function wpml_tm_translate_independently()
    {
    }
    /**
     * @return WPML_Translation_Proxy_Basket_Networking
     */
    function wpml_tm_load_basket_networking()
    {
    }
    /**
     * @return WPML_Translation_Proxy_Networking
     */
    function wpml_tm_load_tp_networking()
    {
    }
    /**
     * @return WPML_TM_Blog_Translators
     */
    function wpml_tm_load_blog_translators()
    {
    }
    /**
     * @return WPML_TM_Translators_Dropdown
     */
    function wpml_tm_get_translators_dropdown()
    {
    }
    /**
     * @return WPML_TM_Mail_Notification
     */
    function wpml_tm_init_mail_notifications()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_Dashboard_Ajax
     */
    function wpml_tm_load_tm_dashboard_ajax()
    {
    }
    function wpml_tm_load_and_intialize_dashboard_ajax()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_Translation_Job_Factory
     */
    function wpml_tm_load_job_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_TM_XLIFF_Factory
     */
    function wpml_tm_xliff_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return WPML_TM_XLIFF_Shortcodes
     */
    function wpml_tm_xliff_shortcodes()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return \WPML_TM_Old_Jobs_Editor
     */
    function wpml_tm_load_old_jobs_editor()
    {
    }
    function tm_after_load()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return WPML_TM_Records
     */
    function wpml_tm_get_records()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return WPML_TM_Xliff_Frontend
     */
    function setup_xliff_frontend()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @param int $job_id The ID of the job.
     * @param bool $applyTranslationMemoryForCompletedJobs
     *
     * @return WPML_TM_ATE_Models_Job_Create
     */
    function wpml_tm_create_ATE_job_creation_model($job_id, $applyTranslationMemoryForCompletedJobs = \true)
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @param int   $job_id The ID of the job.
     * @param bool  $apply_memory
     *
     * @return string
     */
    function wpml_tm_get_job_xliff($job_id, $apply_memory = \true)
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_Rest
     */
    function wpml_tm_get_wpml_rest()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_API_Client
     */
    function wpml_tm_get_tp_api_client()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Project
     */
    function wpml_tm_get_tp_project()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Jobs_API
     */
    function wpml_tm_get_tp_jobs_api()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Project_API
     */
    function wpml_tm_get_tp_project_api()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_XLIFF_API
     */
    function wpml_tm_get_tp_xliff_api()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @param bool $forceReload
     * @param bool $loadObsoleteStringQuery
     * @param bool $dontCache
     *
     * @return \WPML_TM_Jobs_Repository
     */
    function wpml_tm_get_jobs_repository($forceReload = \false, $loadObsoleteStringQuery = \true, $dontCache = \false)
    {
    }
    function wpml_tm_reload_jobs_repository()
    {
    }
    /**
     * It returns an instance of the class.
     *
     * @return WPML_TM_ATE_Job_Repository
     */
    function wpml_tm_get_ate_jobs_repository()
    {
    }
    /**
     * @return \WPML\TM\ATE\JobRecords
     */
    function wpml_tm_get_ate_job_records()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Sync_Jobs
     */
    function wpml_tm_get_tp_sync_jobs()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TP_Translations_Repository
     */
    function wpml_tm_get_tp_translations_repository()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_WP_User_Query_Factory
     */
    function wpml_tm_get_wp_user_query_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_WP_User_Factory
     */
    function wpml_tm_get_wp_user_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TM_Email_Twig_Template_Factory
     */
    function wpml_tm_get_email_twig_template_factory()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WPML_TM_AMS_ATE_Factories
     */
    function wpml_tm_ams_ate_factories()
    {
    }
    /**
     * @return string
     * @throws \Auryn\InjectionException
     */
    function wpml_tm_get_ams_ate_console_url()
    {
    }
    /**
     * @param \WPML\TM\ATE\Log\Entry $entry
     * @param bool $avoidDuplication
     *
     * @throws \WPML\Auryn\InjectionException
     */
    function wpml_tm_ate_ams_log(\WPML\TM\ATE\Log\Entry $entry, $avoidDuplication = \false)
    {
    }
    /**
     * @param \WPML\TM\ATE\Log\Entry $entry
     *
     * @throws \WPML\Auryn\InjectionException
     */
    function wpml_tm_ate_ams_log_remove(\WPML\TM\ATE\Log\Entry $entry)
    {
    }
    /**
     * @param string $original
     * @param string $translation
     * @param bool $finished_state
     *
     * @return WPML_TM_Translated_Field
     */
    function wpml_tm_create_translated_field($original, $translation, $finished_state)
    {
    }
    /**
     * @param int $post_id
     * @param \WP_Post $post
     * @param bool $force_set_status
     */
    function wpml_tm_save_post($post_id, $post, $force_set_status = \false)
    {
    }
    function get_debug_info()
    {
    }
    function icl_reset_wpml($blog_id = \false)
    {
    }
    /**
     * Ajax handler for type assignment fix troubleshoot action
     */
    function icl_repair_broken_type_and_language_assignments()
    {
    }
    \define('OTG_SANDBOX', \true);
    \define('ICL_API_ENDPOINT', 'https://www.icanlocalize.com');
    \define('OTG_TRANSLATION_PROXY_URL', 'https://tp.wpml.org');
    \define('ICL_PLUGIN_INACTIVE', \false);
    // phpcs:disable PHPCompatibility.Constants.NewConstants.php_int_minFound -- A check for the presence of the constant is made
    \define('WPML_PRIORITY_BEFORE_EVERYTHING', \PHP_INT_MIN);
    \define('ICL_TM_NOT_TRANSLATED', 0);
    \define('ICL_TM_WAITING_FOR_TRANSLATOR', 1);
    \define('ICL_TM_IN_PROGRESS', 2);
    \define('ICL_TM_NEEDS_UPDATE', 3);
    // virt. status code (based on needs_update)
    \define('ICL_TM_TRANSLATION_READY_TO_DOWNLOAD', 4);
    // when translation is ready in TP
    \define('ICL_TM_DUPLICATE', 9);
    \define('ICL_TM_COMPLETE', 10);
    \define('ICL_TM_IN_BASKET', 20);
    \define('ICL_TM_NEEDS_REVIEW', 30);
    // Virtual status - NOT STORE IN DB.
    \define('ICL_TM_ATE_NEEDS_RETRY', 40);
    // @since 3.2
    \define('ICL_TM_PENDING_TP', 102);
    \define('ICL_TM_ATE_CANCELLED', 42);
    /** @deprecated Use constants in WPML_TM_Emails_Settings instead */
    \define('ICL_TM_NOTIFICATION_NONE', 0);
    /** @deprecated Use WPML_TM_Emails_Settings::NOTIFY_IMMEDIATELY instead */
    \define('ICL_TM_NOTIFICATION_IMMEDIATELY', 1);
    /** @deprecated Use WPML_TM_Emails_Settings::NOTIFY_DAILY instead */
    \define('ICL_TM_NOTIFICATION_DAILY', 2);
    \define('ICL_TM_TMETHOD_MANUAL', 0);
    \define('ICL_TM_TMETHOD_EDITOR', 1);
    \define('ICL_TM_TMETHOD_PRO', 2);
    \define('ICL_TM_TMETHOD_ATE', 'ATE');
    \define('ICL_TM_DOCS_PER_PAGE', 20);
    \define('ICL_ASIAN_LANGUAGE_CHAR_SIZE', 6);
    /* legacy? */
    \define('CMS_REQUEST_WAITING_FOR_PROJECT_CREATION', 1);
    \define('ICL_FINANCE_LINK', '/finance');
    \define('MESSAGE_TRANSLATION_IN_PROGRESS', 3);
    \define('MESSAGE_TRANSLATION_COMPLETE', 4);
    \define('ICL_LANG_SEL_BLUE_FONT_CURRENT_NORMAL', '#ffffff');
    \define('ICL_LANG_SEL_BLUE_FONT_CURRENT_HOVER', '#000000');
    \define('ICL_LANG_SEL_BLUE_BACKGROUND_CURRENT_NORMAL', '#0099cc');
    \define('ICL_LANG_SEL_BLUE_BACKGROUND_CURRENT_HOVER', '#0099cc');
    \define('ICL_LANG_SEL_BLUE_FONT_OTHER_NORMAL', '#000000');
    \define('ICL_LANG_SEL_BLUE_FONT_OTHER_HOVER', '#000000');
    \define('ICL_LANG_SEL_BLUE_BACKGROUND_OTHER_NORMAL', '#eeeeee');
    \define('ICL_LANG_SEL_BLUE_BACKGROUND_OTHER_HOVER', '#cccccc');
    \define('ICL_LANG_SEL_BLUE_BORDER', '#000000');
    \define('ICL_LANG_SEL_WHITE_FONT_CURRENT_NORMAL', '#444444');
    \define('ICL_LANG_SEL_WHITE_FONT_CURRENT_HOVER', '#000000');
    \define('ICL_LANG_SEL_WHITE_BACKGROUND_CURRENT_NORMAL', '#ffffff');
    \define('ICL_LANG_SEL_WHITE_BACKGROUND_CURRENT_HOVER', '#eeeeee');
    \define('ICL_LANG_SEL_WHITE_FONT_OTHER_NORMAL', '#444444');
    \define('ICL_LANG_SEL_WHITE_FONT_OTHER_HOVER', '#000000');
    \define('ICL_LANG_SEL_WHITE_BACKGROUND_OTHER_NORMAL', '#ffffff');
    \define('ICL_LANG_SEL_WHITE_BACKGROUND_OTHER_HOVER', '#eeeeee');
    \define('ICL_LANG_SEL_WHITE_BORDER', '#aaaaaa');
    \define('ICL_LANG_SEL_GRAY_FONT_CURRENT_NORMAL', '#222222');
    \define('ICL_LANG_SEL_GRAY_FONT_CURRENT_HOVER', '#000000');
    \define('ICL_LANG_SEL_GRAY_BACKGROUND_CURRENT_NORMAL', '#eeeeee');
    \define('ICL_LANG_SEL_GRAY_BACKGROUND_CURRENT_HOVER', '#dddddd');
    \define('ICL_LANG_SEL_GRAY_FONT_OTHER_NORMAL', '#222222');
    \define('ICL_LANG_SEL_GRAY_FONT_OTHER_HOVER', '#000000');
    \define('ICL_LANG_SEL_GRAY_BACKGROUND_OTHER_NORMAL', '#eeeeee');
    \define('ICL_LANG_SEL_GRAY_BACKGROUND_OTHER_HOVER', '#dddddd');
    \define('ICL_LANG_SEL_GRAY_BORDER', '#555555');
    \define('ICL_PRO_TRANSLATION_COST_PER_WORD', 0.09);
    \define('ICL_PRO_TRANSLATION_PICKUP_XMLRPC', 0);
    \define('ICL_PRO_TRANSLATION_PICKUP_POLLING', 1);
    \define('ICL_REMOTE_WPML_CONFIG_FILES_INDEX', 'http://cdn.wpml.org/');
    \define('ICL_ICONS_URL', \ICL_PLUGIN_URL . '/res/img/');
    \define('WPML_ELEMENT_IS_NOT_TRANSLATED', 0);
    \define('WPML_ELEMENT_IS_TRANSLATED', 1);
    \define('WPML_ELEMENT_IS_DUPLICATED', 2);
    \define('WPML_ELEMENT_IS_A_DUPLICATE', 3);
    \define('WPML_STRING_TABLE_NAME_CONTEXT_LENGTH', 160);
    \define('WPML_QUERY_IS_ROOT', 1);
    \define('WPML_QUERY_IS_OTHER_THAN_ROOT', 2);
    \define('WPML_QUERY_IS_NOT_FOR_POST', 3);
    \define('WPML_XDOMAIN_DATA_OFF', 0);
    \define('WPML_XDOMAIN_DATA_GET', 1);
    \define('WPML_XDOMAIN_DATA_POST', 2);
    \define('WPML_TT_TAXONOMIES_NOT_TRANSLATED', 1);
    \define('WPML_TT_TAXONOMIES_ALL', 0);
    // This sets the number of rows in the table to be displayed by this class, not the actual number of terms.
    \define('WPML_TT_TERMS_PER_PAGE', 10);
    \define('WPML_TRANSLATE_CUSTOM_FIELD', 2);
    \define('WPML_COPY_CUSTOM_FIELD', 1);
    \define('WPML_IGNORE_CUSTOM_FIELD', 0);
    \define('WPML_COPY_ONCE_CUSTOM_FIELD', 3);
    \define('WPML_POST_META_CONFIG_INDEX_SINGULAR', 'custom-field');
    \define('WPML_POST_META_SETTING_INDEX_SINGULAR', 'custom_field');
    \define('WPML_POST_META_CONFIG_INDEX_PLURAL', 'custom-fields');
    \define('WPML_POST_META_SETTING_INDEX_PLURAL', 'custom_fields_translation');
    \define('WPML_TERM_META_CONFIG_INDEX_SINGULAR', 'custom-term-field');
    \define('WPML_TERM_META_CONFIG_INDEX_PLURAL', 'custom-term-fields');
    \define('WPML_TERM_META_SETTING_INDEX_SINGULAR', 'custom_term_field');
    \define('WPML_TERM_META_SETTING_INDEX_PLURAL', 'custom_term_fields_translation');
    \define('WPML_POST_META_READONLY_SETTING_INDEX', 'custom_fields_readonly_config');
    \define('WPML_TERM_META_READONLY_SETTING_INDEX', 'custom_term_fields_readonly_config');
    \define('WPML_POST_META_UNLOCKED_SETTING_INDEX', 'custom_fields_unlocked_config');
    \define('WPML_TERM_META_UNLOCKED_SETTING_INDEX', 'custom_term_fields_unlocked_config');
    \define('WPML_POST_TYPE_READONLY_SETTING_INDEX', 'custom_types_readonly_config');
    \define('WPML_LANGUAGE_NEGOTIATION_TYPE_DIRECTORY', 1);
    \define('WPML_LANGUAGE_NEGOTIATION_TYPE_DOMAIN', 2);
    \define('WPML_LANGUAGE_NEGOTIATION_TYPE_PARAMETER', 3);
    \define('WPML_ELEMENT_TRANSLATIONS_CACHE_GROUP', 'element_translations');
    \define('WEBSITE_DETAILS_TRANSIENT_KEY', 'wpml_icl_query_website_details');
    \define('WPML_CONTENT_TYPE_DONT_TRANSLATE', 0);
    \define('WPML_CONTENT_TYPE_TRANSLATE', 1);
    \define('WPML_CONTENT_TYPE_DISPLAY_AS_IF_TRANSLATED', 2);
    /**
     * Returns true if the site uses ICanLocalize.
     *
     * @return bool
     */
    function wpml_site_uses_icl()
    {
    }
    /**
     * Returns the value of a given key setting.
     *
     * @param string      $key     The setting's key.
     * @param mixed|false $default The value to use if the setting does not exist.
     *
     * @return bool|mixed
     * @since      3.1
     * @deprecated 3.2 use `\wpml_setting` or 'wpml_get_setting_filter' filter instead
     */
    function icl_get_setting($key, $default = \false)
    {
    }
    /**
     * Get a WPML setting value.
     * If the Main SitePress Class cannot be accessed by the function it will read the setting from the database.
     * It will return `$default` if the requested key is not set.
     *
     * @param string     $key          The setting's key.
     * @param mixed|null $default      Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     *
     * @return mixed The value of the requested setting, or `$default`
     * @since 4.1
     */
    function wpml_get_setting($key, $default = \null)
    {
    }
    /**
     * Get a WPML setting value.
     * If the Main SitePress Class cannot be access to the function will read the setting from the database.
     * Will return false if the requested key is not set or.
     * the default value passed in the function's second parameter.
     *
     * @param mixed|false $default     Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     * @param string      $key         The setting's key.
     *
     * @return mixed The value of the requested setting, or $default
     * @since 3.2
     * @uses  \SitePress::api_hooks
     */
    function wpml_get_setting_filter($default, $key)
    {
    }
    /**
     * Returns the value of a given key sub-setting.
     *
     * @param string      $key         The setting's key.
     * @param string      $sub_key     The settings name key to return the value of.
     * @param mixed|false $default     Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     *
     * @return bool|mixed
     * @since      3.1
     * @deprecated 3.2 use 'wpml_sub_setting' filter instead
     */
    function icl_get_sub_setting($key, $sub_key, $default = \false)
    {
    }
    /**
     * Gets a WPML sub setting value.
     *
     * @param mixed|false $default     Required. The value to return if the settings key does not exist
     *                                 (typically it's false, but you may want to use something else).
     * @param string      $key         The settings name key the sub key belongs to.
     * @param string      $sub_key     The sub key to return the value of.
     * @param mixed       $deprecated  Deprecated param.
     *
     * @return mixed The value of the requested setting, or $default
     * @todo  [WPML 3.3] Remove deprecated argument
     *
     * @uses  \wpml_get_setting_filter
     *
     * @since 3.2
     * @uses  \SitePress::api_hooks
     */
    function wpml_get_sub_setting_filter($default, $key, $sub_key, $deprecated = \null)
    {
    }
    /**
     * Saves the value of a given key.
     *
     * @param string $key      The settings name key the sub key belongs to.
     * @param mixed  $value    The value to assign to the given key.
     * @param bool   $save_now Must call icl_save_settings() to permanently store the value.
     *
     * @return bool Always True. If `$save_now === true`, it returns the result of `update_option`
     */
    function icl_set_setting($key, $value, $save_now = \false)
    {
    }
    /**
     * Save the settings in the db.
     */
    function icl_save_settings()
    {
    }
    /**
     * Gets all the settings.
     *
     * @return array|false
     */
    function icl_get_settings()
    {
    }
    /**
     * Add settings link to plugin page.
     *
     * @param SitePress     $sitepress
     * @param array<string> $links
     * @param string        $file
     *
     * @return array
     */
    function icl_plugin_action_links(\SitePress $sitepress, $links, $file)
    {
    }
    function _icl_deprecated_icl_debug_mode()
    {
    }
    function icl_js_escape($str)
    {
    }
    /**
     * Read and, if needed, generate the site ID based on the scope.
     *
     * @param string $scope      Defaults to "global".
     *                           Use a different value when the ID is used for specific scopes.
     *
     * @param bool   $create_new Forces the creation of a new ID.
     *
     * @return string|null The generated/stored ID or null if it wasn't possible to generate/store the value.
     */
    function wpml_get_site_id($scope = \WPML_Site_ID::SITE_SCOPES_GLOBAL, $create_new = \false)
    {
    }
    function _icl_tax_has_objects_recursive($id, $term_id = -1, $rec = 0)
    {
    }
    function _icl_trash_restore_prompt()
    {
    }
    /**
     * Build or update duplicated posts from a master post.
     *
     * @param  string $master_post_id The ID of the post to duplicate from. Master post doesn't need to be in the default language.
     *
     * @uses       SitePress
     * @uses       TranslationManagement
     * @since      unknown
     * @deprecated 3.2 use 'wpml_admin_make_duplicates' action instead
     */
    function icl_makes_duplicates($master_post_id)
    {
    }
    /**
     * Build or update duplicated posts from a master post.
     * To be used only for admin backend actions
     *
     * @param int $master_post_id     The ID of the post to duplicate from.
     *                                The ID can be that of a post, page or custom post
     *                                Master post doesn't need to be in the default language.
     *
     * @see   $iclTranslationManagement in \SitePress:: __construct
     *
     * @uses  SitePress
     * @uses  TranslationManagement
     * @since 3.2
     * @uses  \SitePress::api_hooks
     */
    function wpml_admin_make_post_duplicates_action($master_post_id)
    {
    }
    /**
     * Build duplicated posts from a master post only in case of the duplicate not being present at the time.
     *
     * @param  string $master_post_id The ID of the post to duplicate from. Master post doesn't need to be in the default language.
     *
     * @uses       SitePress
     * @since      unknown
     * @deprecated 3.2 use 'wpml_make_post_duplicates' action instead
     */
    function icl_makes_duplicates_public($master_post_id)
    {
    }
    /**
     * Build duplicated posts from a master post only in case of the duplicate not being present at the time.
     *
     * @param int $master_post_id     The ID of the post to duplicate from.
     *                                Master post doesn't need to be in the default language.
     *
     * @uses       SitePress
     * @since      3.2
     * @uses       \SitePress::api_hooks
     */
    function wpml_make_post_duplicates_action($master_post_id)
    {
    }
    /**
     * Wrapper function for deprecated like_escape() and recommended wpdb::esc_like()
     *
     * @global wpdb  $wpdb
     *
     * @param string $text
     *
     * @return string
     */
    function wpml_like_escape($text)
    {
    }
    function icl_do_not_promote()
    {
    }
    /**
     * @param string $time
     *
     * @return string
     */
    function icl_convert_to_user_time($time)
    {
    }
    /**
     * Check if given language is activated
     *
     * @global sitepress $sitepress
     *
     * @param string $language 2 letters language code
     *
     * @return boolean
     * @since      unknown
     * @deprecated 3.2 use 'wpml_language_is_active' filter instead
     */
    function icl_is_language_active($language)
    {
    }
    /**
     * Checks if given language is enabled
     *
     * @param mixed      $empty_value   This is normally the value the filter will be modifying.
     *                                  We are not filtering anything here therefore the NULL value
     *                                  This for the filter function to actually receive the full argument list:
     *                                  apply_filters('wpml_language_is_active', '', $language_code);
     * @param string     $language_code The language code to check Accepts a 2-letter language code
     *
     * @return boolean
     * @global sitepress $sitepress
     *
     * @since 3.2
     * @uses  \SitePress::api_hooks
     */
    function wpml_language_is_active_filter($empty_value, $language_code)
    {
    }
    /**
     * @param string $url url either with or without schema
     *                    Removes the subdirectory in which WordPress is installed from a url.
     *                    If WordPress is not installed in a subdirectory, then the input is returned unaltered.
     *
     * @return string the url input without the blog's subdirectory. Potentially existing schemata on the input are kept intact.
     */
    function wpml_strip_subdir_from_url($url)
    {
    }
    /**
     * Changes array of items into string of items, separated by comma and sql-escaped
     *
     * @see https://coderwall.com/p/zepnaw
     * @global wpdb       $wpdb
     *
     * @param mixed|array $items  item(s) to be joined into string
     * @param string      $format %s or %d
     *
     * @return string Items separated by comma and sql-escaped
     */
    function wpml_prepare_in($items, $format = '%s')
    {
    }
    function is_not_installing_plugins()
    {
    }
    function wpml_mb_strtolower($string)
    {
    }
    function wpml_mb_strpos($haystack, $needle, $offset = 0)
    {
    }
    function wpml_set_plugin_as_inactive()
    {
    }
    function wpml_version_is($version_to_check, $comparison = '==')
    {
    }
    /**
     * Interrupts the plugin activation process if the WPML Core Plugin could not be activated
     */
    function icl_suppress_activation()
    {
    }
    /**
     * @param SitePress $sitepress
     */
    function activate_installer($sitepress = \null)
    {
    }
    function wpml_missing_filter_input_notice()
    {
    }
    function repair_el_type_collate()
    {
    }
    /**
     * Wrapper for `parse_url` using `wp_parse_url`
     *
     * @param string $url
     * @param int    $component
     *
     * @return array|string|int|null
     *
     * @phpstan-return ($component is -1
     *  ? array|null
     *  : ($component is PHP_URL_PORT ? int|null : string|null)
     *  )
     */
    function wpml_parse_url($url, $component = -1)
    {
    }
    /**
     * Wrapper function to prevent ampersand to be encoded (depending on some PHP versions)
     *
     * @link http://php.net/manual/en/function.http-build-query.php#102324
     *
     * @param array|object $query_data
     *
     * @return string
     */
    function wpml_http_build_query($query_data)
    {
    }
    /**
     * @param array $array
     * @param int   $sort_flags
     *
     * @uses \wpml_array_unique_fallback
     *
     * @return array
     */
    function wpml_array_unique($array, $sort_flags = \SORT_REGULAR)
    {
    }
    /**
     * @param array<mixed> $array
     * @param bool         $keep_key_assoc
     *
     * @return array
     * @see \wpml_array_unique
     */
    function wpml_array_unique_fallback($array, $keep_key_assoc)
    {
    }
    /**
     * @return bool
     */
    function wpml_is_rest_request()
    {
    }
    /**
     * @return bool
     */
    function wpml_is_rest_enabled()
    {
    }
    function wpml_is_cli()
    {
    }
    function wpml_sticky_post_sync(\SitePress $sitepress = \null)
    {
    }
    /**
     * @return WP_Filesystem_Direct
     */
    function wpml_get_filesystem_direct()
    {
    }
    /**
     * @param array       $postarray It will be escaped inside the function
     * @param string|null $lang
     * @param bool        $wp_error
     *
     * @return int|\WP_Error
     */
    function wpml_update_escaped_post(array $postarray, $lang = \null, $wp_error = \false)
    {
    }
    /**
     * @param string $group
     *
     * @return WPML_WP_Cache
     */
    function wpml_get_cache($group = '')
    {
    }
    /**
     * wpml_is_ajax - Returns true when the page is loaded via ajax.
     *
     * @since  3.1.5
     *
     * @return bool
     */
    function wpml_is_ajax()
    {
    }
    /**
     * wpml_get_flag_file_name - Returns the SVG or PNG flag file name based on language code if it exists in '/res/flags/' dir.
     *
     * @param $lang_code
     *
     * @return string
     * @since 4.6.0
     *
     */
    function wpml_get_flag_file_name($lang_code)
    {
    }
    function wpml_is_setup_complete()
    {
    }
    /**
     * Loads global variables providing functionality that is used throughout the plugin.
     *
     * @param null|bool $is_admin If set to `null` it will read from `is_admin()`
     */
    function load_essential_globals($is_admin = \null)
    {
    }
    function wpml_load_post_translation($is_admin, $settings)
    {
    }
    function wpml_load_query_filter($installed)
    {
    }
    function load_wpml_url_converter($settings, $domain_validation, $default_lang_code)
    {
    }
    /**
     * @param string             $req_uri
     * @param WPML_URL_Converter $wpml_url_converter
     * @param bool               $directory
     *
     * @return string
     */
    function wpml_validate_host($req_uri, $wpml_url_converter, $directory = \true)
    {
    }
    /**
     * Checks if a given taxonomy is currently translated
     *
     * @param string $taxonomy name/slug of a taxonomy
     * @return bool true if the taxonomy is currently set to being translatable in WPML
     */
    function is_taxonomy_translated($taxonomy)
    {
    }
    /**
     * Checks if a given post_type is currently translated
     *
     * @param string $post_type name/slug of a post_type
     * @return bool true if the post_type is currently set to being translatable in WPML
     */
    function is_post_type_translated($post_type)
    {
    }
    function setup_admin_menus()
    {
    }
    function maybe_load_translated_tax_screen()
    {
    }
    /**
     * @param bool $override
     *
     * @return array
     */
    function wpml_reload_active_languages_setting($override = \false)
    {
    }
    /**
     * Returns and if necessary instantiates an instance of the WPML_Installation Class
     *
     * @return \WPML_Installation
     */
    function wpml_get_setup_instance()
    {
    }
    function wpml_load_admin_files()
    {
    }
    function wpml_get_post_status_helper()
    {
    }
    function wpml_get_create_post_helper()
    {
    }
    /**
     * @return \TranslationManagement
     */
    function wpml_load_core_tm()
    {
    }
    function wpml_get_langs_in_dirs_val($wpml_url_converter)
    {
    }
    function wpml_get_root_page_actions_obj()
    {
    }
    function wpml_get_hierarchy_sync_helper($type = 'post')
    {
    }
    function wpml_maybe_setup_post_edit()
    {
    }
    /**
     * @return \WPML_Frontend_Tax_Filters
     */
    function wpml_load_frontend_tax_filters()
    {
    }
    /**
     * @return \WPML_Settings_Helper
     */
    function wpml_load_settings_helper()
    {
    }
    function wpml_get_term_translation_util()
    {
    }
    /**
     * @return \WPML_Term_Filters
     */
    function wpml_load_term_filters()
    {
    }
    function wpml_show_user_options()
    {
    }
    /**
     * @return \WPML_Upgrade_Command_Factory
     */
    function wpml_get_upgrade_command_factory()
    {
    }
    function wpml_get_upgrade_schema()
    {
    }
    /**
     * @param string      $class_name   A class implementing \IWPML_Upgrade_Command.
     * @param array       $dependencies An array of dependencies passed to the `$class_name`'s constructor.
     * @param array       $scopes       An array of scope values. Accepted values are: `\WPML_Upgrade::SCOPE_ADMIN`, `\WPML_Upgrade::SCOPE_AJAX`, and `\WPML_Upgrade::SCOPE_FRONT_END`.
     * @param string|null $method       The method to call to run the upgrade (otherwise, it calls the "run" method),
     *
     * @return \WPML_Upgrade_Command_Definition
     */
    function wpml_create_upgrade_command_definition($class_name, array $dependencies, array $scopes, $method = \null)
    {
    }
    \define('OTGS_ICONS_VERSION', '1.0.4');
    function otgs_icons()
    {
    }
    function otgs_icons_register()
    {
    }
    function otgs_icons_register_assets($assets_data, $assets_version)
    {
    }
    /**
     * Returns true if the current request is a REST one.
     *
     * @return bool
     */
    function otgs_is_rest_request()
    {
    }
    /**
     * If Installer 1.7.0+ is present, unregister Installer from old WPML.
     * Force Installer 1.7.0+ being used over older Installer versions.
     */
    $installer_171_plus_on = \false;
    /**
     * When all plugins load pick the newest version.
     */
    function wpml_installer_instance_delegator()
    {
    }
    /**
     * $args:
     *  plugins_install_tab = true|false (default: true)
     *  repositories_include = array() (default: all)
     *  repositories_exclude = array() (default: none)
     *  template = name (default: default)
     *
     * @param int   $wp_installer_instance The WP_Installer instance.
     * @param array $args                  The repository configuration.
     *
     * phpcs:disable WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid
     */
    function WP_Installer_Setup($wp_installer_instance, $args = array())
    {
    }
    // Ext function
    function WP_Installer_Show_Products($args = array())
    {
    }
    function WP_Installer_get_local_components_setting_ui($args)
    {
    }
    /**
     * @deprecated
     */
    function WP_Installer()
    {
    }
    function OTGS_Installer()
    {
    }
    function WP_Installer_Channels()
    {
    }
    function otgs_installer_get_logger_storage()
    {
    }
    function get_OTGS_Installer_Factory()
    {
    }
    \define('WP_INSTALLER_VERSION', $delegate['version']);
    /**
     * Load the shared OTGS UI library, on demand.
     *
     * =================
     * Usage
     * =================
     * $vendor_path = [ path to the root of your relative vendor directory housing this repository, no training slash ]
     * $vendor_url = [ URL of the root of your relative vendor directory housing this repository, no trailing slash ]
     * require_once( $vendor_path . '/otgs/ui/loader.php' );
     * otgs_ui_initialize( $vendor_path . '/otgs/ui', $vendor_url . '/otgs/ui' );
     *
     * =================
     * Restrictions
     * =================
     * - Assets are registered at init:1: doing it earlier will cause problems with core assets registered at init:0
     * - Their handles are stored in constants that you can use as dependencies, on assets registered after init:-100.
     *
     * @package otgs/ui
     */
    /**
     * OTGS UI version - increase after every major update.
     */
    $otg_ui_version = 111;
    /**
     * @param string $vendor_path Path to the root of your relative vendor directory housing this repository (no trailing slash).
     * @param string $vendor_url  URL of the root of your relative vendor directory housing this repository, no trailing slash.
     */
    function otgs_ui_initialize($vendor_path, $vendor_url)
    {
    }
    /**
     * Function hooked to the `plugins_loaded` action as early as possible.
     */
    function otgs_ui_plugins_loaded()
    {
    }
    /**
     * Facade to quickly check if version requirements are met.
     *
     * @param array $requirements The requirements to check.
     */
    function whip_wp_check_versions($requirements)
    {
    }
    function includeIfExists($file)
    {
    }
    /**
     * @param string $fileIdentifier
     * @param string $file
     * @return void
     */
    function composerRequired32b990c0cd3cc6015d4bae6724d5ec7($fileIdentifier, $file)
    {
    }
    /**
     * @param mixed|null $value
     *
     * @return \WPML\Collect\Support\Collection<mixed>
     */
    function wpml_collect($value = \null)
    {
    }
    /**
     * Return the default value of the given value.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    function value($value)
    {
    }
    /**
     * Get an item from an array or object using "dot" notation.
     *
     * @param  mixed   $target
     * @param  string|string[]  $key
     * @param  mixed   $default
     * @return mixed
     */
    function data_get($target, $key, $default = \null)
    {
    }
    /**
     * Return the given object. Useful for chaining.
     *
     * @param  mixed  $object
     * @return mixed
     */
    function with($object)
    {
    }
    \define('ICL_SITEPRESS_VERSION', '4.6.10');
    // Do not uncomment the following line!
    // If you need to use this constant, use it in the wp-config.php file
    // define('ICL_SITEPRESS_DEV_VERSION', '3.4-dev');
    \define('WPML_PLUGIN_BASENAME', \plugin_basename(__FILE__));
    \define('WPML_PLUGIN_FOLDER', \dirname(\WPML_PLUGIN_BASENAME));
    \define('WPML_PLUGIN_PATH', __DIR__);
    \define('WPML_PLUGINS_DIR', \realpath(__DIR__ . '/..'));
    \define('WPML_PLUGIN_FILE', \basename(\WPML_PLUGIN_BASENAME));
    /** @deprecated since 3.7.0 and will be removed in 3.8.0, use `WPML_PLUGIN_BASENAME` instead */
    \define('ICL_PLUGIN_FULL_PATH', \WPML_PLUGIN_BASENAME);
    /** @deprecated since 3.7.0 and will be removed in 3.8.0, use `WPML_PLUGIN_FOLDER` instead */
    \define('ICL_PLUGIN_FOLDER', \WPML_PLUGIN_FOLDER);
    /** @deprecated since 3.7.0 and will be removed in 3.8.0, use `WPML_PLUGIN_PATH` instead */
    \define('ICL_PLUGIN_PATH', \WPML_PLUGIN_PATH);
    /** @deprecated since 3.7.0 and will be removed in 3.8.0, use `WPML_PLUGIN_FILE` instead */
    \define('ICL_PLUGIN_FILE', \WPML_PLUGIN_FILE);
    function wpml_disable_outdated_plugins()
    {
    }
    \define('ICL_PLUGIN_URL', $icl_plugin_url);
    /** @var \WPML_WP_API $wpml_wp_api */
    $wpml_wp_api = $sitepress->get_wp_api();
    /** @var WPML_TF_Settings $tf_settings */
    $tf_settings = $tf_settings_read->get('WPML_TF_Settings');
    /** @var array $sitepress_settings */
    $sitepress_settings = $sitepress->get_settings();
    function wpml_init_cli()
    {
    }
    function wpml_init_language_switcher()
    {
    }
    function wpml_mlo_init()
    {
    }
    /**
     * @param SitePress $sitepress
     */
    function wpml_loaded($sitepress)
    {
    }
    function wpml_integrations_requirements()
    {
    }
    function wpml_troubleshoot_action_load()
    {
    }
    function wpml_init_language_cookie_settings()
    {
    }
    /** @var SitePress $this */
    $request = \filter_input(\INPUT_POST, 'icl_ajx_action');
    /**
     * gzdecode implementation
     *
     * @see http://hu.php.net/manual/en/function.gzencode.php#44470
     *
     * @param string $data
     * @param string $filename
     * @param string $error
     * @param int    $maxlength
     * @return string
     */
    function icl_gzdecode($data, &$filename = '', &$error = '', $maxlength = \null)
    {
    }
    // HOME URL
    // USAGE: replace references to the blog home url such as:
    // - get_option('home')
    // - bloginfo('home')
    // - bloginfo('url')
    // - get_bloginfo('url')
    // - etc...
    // with wpml_get_home_url()
    // * IMPORTANT: Most themes also add a trailing slash (/) to the URL. This function already includes it, so don't add the slash when using it.
    function wpml_get_home_url()
    {
    }
    // LANGUAGE SELECTOR
    // USAGE place this on the single.php, page.php, index.php etc... - inside the loop
    // function wpml_content_languages($args)
    // args: skip_missing, before, after
    // defaults: skip_missing = 1, before =  __('This post is also available in: '), after = ''
    function wpml_content_languages($args = '')
    {
    }
    // LINKS TO SPECIFIC ELEMENTS
    // USAGE
    // args: $element_id, $element_type='post', $link_text='', $optional_parameters=array(), $anchor='', $echoit = true
    function wpml_link_to_element($element_id, $element_type = 'post', $link_text = '', $optional_parameters = array(), $anchor = '', $echoit = \true)
    {
    }
    // Languages links to display in the footer
    //
    function wpml_languages_list($skip_missing = 0, $div_id = 'footer_language_list')
    {
    }
    function wpml_languages_selector()
    {
    }
    function wpml_t($context, $name, $original_value)
    {
    }
    function wpml_register_string($context, $name, $value)
    {
    }
    function wpml_get_object_id($element_id, $element_type = 'post', $return_original_if_missing = \false, $ulanguage_code = \null)
    {
    }
    function wpml_default_link($anchor)
    {
    }
    /**
     *
     * @return  WPML_Redirection
     */
    function _wpml_get_redirect_helper()
    {
    }
}