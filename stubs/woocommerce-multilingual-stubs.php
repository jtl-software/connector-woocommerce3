<?php

namespace {
    /**
     * @author OnTheGo Systems
     */
    class OTGS_UI_Assets
    {
        const ASSETS_TYPES_SCRIPT = 'script';
        const ASSETS_TYPES_STYLE = 'style';
        /**
         * OTGS_UI_Assets constructor.
         *
         * @param string             $assets_root_url Root URL for the dist directory on this vendor library.
         * @param \OTGS_Assets_Store $assets_store
         */
        public function __construct($assets_root_url, \OTGS_Assets_Store $assets_store)
        {
        }
        /**
         * Registers both scripts and styles
         */
        public function register()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class OTGS_UI_Loader
    {
        /**
         * OTGS_UI_Loader constructor.
         *
         * @param \OTGS_Assets_Store $locator
         * @param \OTGS_UI_Assets    $assets
         *
         * @throws InvalidArgumentException
         */
        public function __construct(\OTGS_Assets_Store $locator = \null, \OTGS_UI_Assets $assets = \null)
        {
        }
        /**
         * Hooks to the registration of all assets to the `ìnit` action
         */
        public function load()
        {
        }
        /**
         * Adds the assets and registers them
         */
        public function register()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class OTGS_Assets_Store
    {
        /**
         * @param string $type
         * @param null   $handle
         *
         * @return array|mixed
         */
        public function get($type, $handle = \null)
        {
        }
        /**
         * @param string $path
         */
        public function add_assets_location($path)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class OTGS_Assets_Handles
    {
        const POPOVER_TOOLTIP = 'otgsPopoverTooltip';
        const SWITCHER = 'otgsSwitcher';
        const TABLE_STICKY_HEADER = 'otgsTableStickyHeader';
    }
}
namespace WPML\Auryn {
    class InjectorException extends \Exception
    {
    }
    class ConfigException extends \WPML\Auryn\InjectorException
    {
    }
    interface Reflector
    {
        /**
         * Retrieves ReflectionClass instances, caching them for future retrieval
         *
         * @param string $class
         * @return \ReflectionClass
         */
        public function getClass($class);
        /**
         * Retrieves and caches the constructor (ReflectionMethod) for the specified class
         *
         * @param string $class
         * @return \ReflectionMethod
         */
        public function getCtor($class);
        /**
         * Retrieves and caches an array of constructor parameters for the given class
         *
         * @param string $class
         * @return \ReflectionParameter[]
         */
        public function getCtorParams($class);
        /**
         * Retrieves the class type-hint from a given ReflectionParameter
         *
         * There is no way to directly access a parameter's type-hint without
         * instantiating a new ReflectionClass instance and calling its getName()
         * method. This method stores the results of this approach so that if
         * the same parameter type-hint or ReflectionClass is needed again we
         * already have it cached.
         *
         * @param \ReflectionFunctionAbstract $function
         * @param \ReflectionParameter $param
         */
        public function getParamTypeHint(\ReflectionFunctionAbstract $function, \ReflectionParameter $param);
        /**
         * Retrieves and caches a reflection for the specified function
         *
         * @param string $functionName
         * @return \ReflectionFunction
         */
        public function getFunction($functionName);
        /**
         * Retrieves and caches a reflection for the specified class method
         *
         * @param mixed $classNameOrInstance
         * @param string $methodName
         * @return \ReflectionMethod
         */
        public function getMethod($classNameOrInstance, $methodName);
    }
    class StandardReflector implements \WPML\Auryn\Reflector
    {
        public function getClass($class)
        {
        }
        public function getCtor($class)
        {
        }
        public function getCtorParams($class)
        {
        }
        public function getParamTypeHint(\ReflectionFunctionAbstract $function, \ReflectionParameter $param)
        {
        }
        public function getFunction($functionName)
        {
        }
        public function getMethod($classNameOrInstance, $methodName)
        {
        }
    }
    interface ReflectionCache
    {
        public function fetch($key);
        public function store($key, $data);
    }
    class ReflectionCacheArray implements \WPML\Auryn\ReflectionCache
    {
        public function fetch($key)
        {
        }
        public function store($key, $data)
        {
        }
    }
    class ReflectionCacheApc implements \WPML\Auryn\ReflectionCache
    {
        public function __construct(\WPML\Auryn\ReflectionCache $localCache = null)
        {
        }
        public function setTimeToLive($seconds)
        {
        }
        public function fetch($key)
        {
        }
        public function store($key, $data)
        {
        }
    }
    class CachingReflector implements \WPML\Auryn\Reflector
    {
        const CACHE_KEY_CLASSES = 'auryn.refls.classes.';
        const CACHE_KEY_CTORS = 'auryn.refls.ctors.';
        const CACHE_KEY_CTOR_PARAMS = 'auryn.refls.ctor-params.';
        const CACHE_KEY_FUNCS = 'auryn.refls.funcs.';
        const CACHE_KEY_METHODS = 'auryn.refls.methods.';
        public function __construct(\WPML\Auryn\Reflector $reflector = null, \WPML\Auryn\ReflectionCache $cache = null)
        {
        }
        public function getClass($class)
        {
        }
        public function getCtor($class)
        {
        }
        public function getCtorParams($class)
        {
        }
        public function getParamTypeHint(\ReflectionFunctionAbstract $function, \ReflectionParameter $param)
        {
        }
        public function getFunction($functionName)
        {
        }
        public function getMethod($classNameOrInstance, $methodName)
        {
        }
    }
    class Executable
    {
        public function __construct(\ReflectionFunctionAbstract $reflFunc, $invocationObject = null)
        {
        }
        public function __invoke()
        {
        }
        public function getCallableReflection()
        {
        }
        public function getInvocationObject()
        {
        }
        public function isInstanceMethod()
        {
        }
    }
    class InjectionException extends \WPML\Auryn\InjectorException
    {
        public $dependencyChain;
        public function __construct(array $inProgressMakes, $message = "", $code = 0, \Exception $previous = null)
        {
        }
        /**
         * Add a human readable version of the invalid callable to the standard 'invalid invokable' message.
         */
        public static function fromInvalidCallable(array $inProgressMakes, $callableOrMethodStr, \Exception $previous = null)
        {
        }
        /**
         * Returns the hierarchy of dependencies that were being created when
         * the exception occurred.
         * @return array
         */
        public function getDependencyChain()
        {
        }
    }
    class Injector
    {
        const A_RAW = ':';
        const A_DELEGATE = '+';
        const A_DEFINE = '@';
        const I_BINDINGS = 1;
        const I_DELEGATES = 2;
        const I_PREPARES = 4;
        const I_ALIASES = 8;
        const I_SHARES = 16;
        const I_ALL = 31;
        const E_NON_EMPTY_STRING_ALIAS = 1;
        const M_NON_EMPTY_STRING_ALIAS = "Invalid alias: non-empty string required at arguments 1 and 2";
        const E_SHARED_CANNOT_ALIAS = 2;
        const M_SHARED_CANNOT_ALIAS = "Cannot alias class %s to %s because it is currently shared";
        const E_SHARE_ARGUMENT = 3;
        const M_SHARE_ARGUMENT = "%s::share() requires a string class name or object instance at Argument 1; %s specified";
        const E_ALIASED_CANNOT_SHARE = 4;
        const M_ALIASED_CANNOT_SHARE = "Cannot share class %s because it is currently aliased to %s";
        const E_INVOKABLE = 5;
        const M_INVOKABLE = "Invalid invokable: callable or provisional string required";
        const E_NON_PUBLIC_CONSTRUCTOR = 6;
        const M_NON_PUBLIC_CONSTRUCTOR = "Cannot instantiate protected/private constructor in class %s";
        const E_NEEDS_DEFINITION = 7;
        const M_NEEDS_DEFINITION = "Injection definition required for %s %s";
        const E_MAKE_FAILURE = 8;
        const M_MAKE_FAILURE = "Could not make %s: %s";
        const E_UNDEFINED_PARAM = 9;
        const M_UNDEFINED_PARAM = "No definition available to provision typeless parameter \$%s at position %d in %s()%s";
        const E_DELEGATE_ARGUMENT = 10;
        const M_DELEGATE_ARGUMENT = "%s::delegate expects a valid callable or executable class::method string at Argument 2%s";
        const E_CYCLIC_DEPENDENCY = 11;
        const M_CYCLIC_DEPENDENCY = "Detected a cyclic dependency while provisioning %s";
        const E_MAKING_FAILED = 12;
        const M_MAKING_FAILED = "Making %s did not result in an object, instead result is of type '%s'";
        public function __construct(\WPML\Auryn\Reflector $reflector = null)
        {
        }
        public function __clone()
        {
        }
        /**
         * Define instantiation directives for the specified class
         *
         * @param string $name The class (or alias) whose constructor arguments we wish to define
         * @param array $args An array mapping parameter names to values/instructions
         * @return self
         */
        public function define($name, array $args)
        {
        }
        /**
         * Assign a global default value for all parameters named $paramName
         *
         * Global parameter definitions are only used for parameters with no typehint, pre-defined or
         * call-time definition.
         *
         * @param string $paramName The parameter name for which this value applies
         * @param mixed $value The value to inject for this parameter name
         * @return self
         */
        public function defineParam($paramName, $value)
        {
        }
        /**
         * Define an alias for all occurrences of a given typehint
         *
         * Use this method to specify implementation classes for interface and abstract class typehints.
         *
         * @param string $original The typehint to replace
         * @param string $alias The implementation name
         * @throws ConfigException if any argument is empty or not a string
         * @return self
         */
        public function alias($original, $alias)
        {
        }
        /**
         * Share the specified class/instance across the Injector context
         *
         * @param mixed $nameOrInstance The class or object to share
         * @throws ConfigException if $nameOrInstance is not a string or an object
         * @return self
         */
        public function share($nameOrInstance)
        {
        }
        /**
         * Register a prepare callable to modify/prepare objects of type $name after instantiation
         *
         * Any callable or provisionable invokable may be specified. Preparers are passed two
         * arguments: the instantiated object to be mutated and the current Injector instance.
         *
         * @param string $name
         * @param mixed $callableOrMethodStr Any callable or provisionable invokable method
         * @throws InjectionException if $callableOrMethodStr is not a callable.
         *                            See https://github.com/rdlowrey/auryn#injecting-for-execution
         * @return self
         */
        public function prepare($name, $callableOrMethodStr)
        {
        }
        /**
         * Delegate the creation of $name instances to the specified callable
         *
         * @param string $name
         * @param mixed $callableOrMethodStr Any callable or provisionable invokable method
         * @throws ConfigException if $callableOrMethodStr is not a callable.
         * @return self
         */
        public function delegate($name, $callableOrMethodStr)
        {
        }
        /**
         * Retrieve stored data for the specified definition type
         *
         * Exposes introspection of existing binds/delegates/shares/etc for decoration and composition.
         *
         * @param string $nameFilter An optional class name filter
         * @param int $typeFilter A bitmask of Injector::* type constant flags
         * @return array
         */
        public function inspect($nameFilter = null, $typeFilter = null)
        {
        }
        /**
         * Instantiate/provision a class instance
         *
         * @param string $name
         * @param array $args
         * @throws InjectionException if a cyclic gets detected when provisioning
         * @return mixed
         */
        public function make($name, array $args = array())
        {
        }
        /**
         * Invoke the specified callable or class::method string, provisioning dependencies along the way
         *
         * @param mixed $callableOrMethodStr A valid PHP callable or a provisionable ClassName::methodName string
         * @param array $args Optional array specifying params with which to invoke the provisioned callable
         * @throws \Auryn\InjectionException
         * @return mixed Returns the invocation result returned from calling the generated executable
         */
        public function execute($callableOrMethodStr, array $args = array())
        {
        }
        /**
         * Provision an Executable instance from any valid callable or class::method string
         *
         * @param mixed $callableOrMethodStr A valid PHP callable or a provisionable ClassName::methodName string
         * @return \Auryn\Executable
         */
        public function buildExecutable($callableOrMethodStr)
        {
        }
    }
}
namespace {
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInita4c103d11e2145c959f5c8e45a9f7dc2
    {
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInita4c103d11e2145c959f5c8e45a9f7dc2
    {
        public static $files = array('5f5b8f7c1db2e892006e8805f0ed573c' => __DIR__ . '/..' . '/wpml/collect/src/Illuminate/Support/helpers.php', '914c4a8cb7e06f7d6e1ddf6997c1785f' => __DIR__ . '/..' . '/wpml/fp/core/functions.php', '348332d63f916da7598941d18c24311d' => __DIR__ . '/..' . '/wpml/fp/core/strings_functions.php', '766b758ee51e52c53cf3312a1dba9e34' => __DIR__ . '/..' . '/wpml/fp/core/system.php', '4f861be014c38ae526415a9a3c62913a' => __DIR__ . '/../..' . '/lib/classes/container/functions.php');
        public static $prefixLengthsPsr4 = array('W' => array('WPML\\Collect\\' => 13, 'WPML\\Auryn\\' => 11), 'P' => array('Psr\\Log\\' => 8));
        public static $prefixDirsPsr4 = array('WPML\\Collect\\' => array(0 => __DIR__ . '/..' . '/wpml/collect/src/Illuminate'), 'WPML\\Auryn\\' => array(0 => __DIR__ . '/..' . '/otgs/auryn/lib'), 'Psr\\Log\\' => array(0 => __DIR__ . '/..' . '/psr/log/Psr/Log'));
        public static $classMap = array('Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php', 'ICL_AdminNotifier' => __DIR__ . '/../..' . '/lib/inc/icl-admin-notifier.php', 'IWPML_AJAX_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-ajax-action.php', 'IWPML_AJAX_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-ajax-action-loader.php', 'IWPML_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-action.php', 'IWPML_Action_Loader_Factory' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-action-loader-factory.php', 'IWPML_Backend_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-backend-action.php', 'IWPML_Backend_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-backend-action-loader.php', 'IWPML_CLI_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-cli-action.php', 'IWPML_CLI_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-cli-action-loader.php', 'IWPML_Current_Language' => __DIR__ . '/../..' . '/lib/classes/languages/interface-iwpml-current-language.php', 'IWPML_DIC_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-dic-action.php', 'IWPML_Deferred_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-deferred-action-loader.php', 'IWPML_Frontend_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-frontend-action.php', 'IWPML_Frontend_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-frontend-action-loader.php', 'IWPML_REST_Action' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-rest-action.php', 'IWPML_REST_Action_Loader' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/actions/interface-iwpml-rest-action-loader.php', 'IWPML_Template_Service' => __DIR__ . '/../..' . '/lib/classes/templates/interface-iwpml-template-service.php', 'IWPML_WP_Element_Type' => __DIR__ . '/../..' . '/lib/classes/wpml-wp/iwpml-wp-element-type.php', 'OTGS_Assets_Handles' => __DIR__ . '/..' . '/otgs/ui/src/php/OTGS_Assets_Handles.php', 'OTGS_Assets_Store' => __DIR__ . '/..' . '/otgs/ui/src/php/OTGS_Assets_Store.php', 'OTGS_UI_Assets' => __DIR__ . '/..' . '/otgs/ui/src/php/OTGS_UI_Assets.php', 'OTGS_UI_Loader' => __DIR__ . '/..' . '/otgs/ui/src/php/OTGS_UI_Loader.php', 'WPML\\API\\PostTypes' => __DIR__ . '/..' . '/wpml/core-api/core/PostTypes.php', 'WPML\\API\\Sanitize' => __DIR__ . '/..' . '/wpml/core-api/core/Sanitize.php', 'WPML\\API\\Settings' => __DIR__ . '/..' . '/wpml/core-api/core/Settings.php', 'WPML\\API\\Version' => __DIR__ . '/..' . '/wpml/core-api/core/Version.php', 'WPML\\Action\\Type' => __DIR__ . '/../..' . '/lib/classes/action-filter-loader/class-wpml-action-type.php', 'WPML\\Ajax\\IHandler' => __DIR__ . '/..' . '/wpml/core-api/core/interfaces/ajax/Handler.php', 'WPML\\Container\\Config' => __DIR__ . '/../..' . '/lib/classes/container/class-config.php', 'WPML\\Container\\Container' => __DIR__ . '/../..' . '/lib/classes/container/class-wpml-container.php', 'WPML\\Convert\\Ids' => __DIR__ . '/..' . '/wpml/core-api/core/Convert/Ids.php', 'WPML\\Core\\BackgroundTask\\Command\\PersistBackgroundTask' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Command/PersistBackgroundTask.php', 'WPML\\Core\\BackgroundTask\\Command\\UpdateBackgroundTask' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Command/UpdateBackgroundTask.php', 'WPML\\Core\\BackgroundTask\\Exception\\TaskIsNotRunnableException' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Exception/TaskIsNotRunnableException.php', 'WPML\\Core\\BackgroundTask\\Exception\\TaskNotRunnable\\ExceededMaxRetriesException' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Exception/TaskNotRunnable/ExceededMaxRetriesException.php', 'WPML\\Core\\BackgroundTask\\Exception\\TaskNotRunnable\\TaskIsCompletedException' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Exception/TaskNotRunnable/TaskIsCompletedException.php', 'WPML\\Core\\BackgroundTask\\Exception\\TaskNotRunnable\\TaskIsPausedException' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Exception/TaskNotRunnable/TaskIsPausedException.php', 'WPML\\Core\\BackgroundTask\\Model\\BackgroundTask' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Model/BackgroundTask.php', 'WPML\\Core\\BackgroundTask\\Model\\TaskEndpointInterface' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Model/TaskEndpointInterface.php', 'WPML\\Core\\BackgroundTask\\Repository\\BackgroundTaskRepository' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Repository/BackgroundTaskRepository.php', 'WPML\\Core\\BackgroundTask\\Service\\BackgroundTaskService' => __DIR__ . '/..' . '/wpml/core-api/core/BackgroundTask/Service/BackgroundTaskService.php', 'WPML\\Core\\ISitePress' => __DIR__ . '/../..' . '/lib/classes/ISitePress.php', 'WPML\\Core\\Twig\\Cache\\CacheInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Cache/CacheInterface.php', 'WPML\\Core\\Twig\\Cache\\FilesystemCache' => __DIR__ . '/../..' . '/lib/lib/twig/src/Cache/FilesystemCache.php', 'WPML\\Core\\Twig\\Cache\\NullCache' => __DIR__ . '/../..' . '/lib/lib/twig/src/Cache/NullCache.php', 'WPML\\Core\\Twig\\Compiler' => __DIR__ . '/../..' . '/lib/lib/twig/src/Compiler.php', 'WPML\\Core\\Twig\\Environment' => __DIR__ . '/../..' . '/lib/lib/twig/src/Environment.php', 'WPML\\Core\\Twig\\Error\\Error' => __DIR__ . '/../..' . '/lib/lib/twig/src/Error/Error.php', 'WPML\\Core\\Twig\\Error\\LoaderError' => __DIR__ . '/../..' . '/lib/lib/twig/src/Error/LoaderError.php', 'WPML\\Core\\Twig\\Error\\RuntimeError' => __DIR__ . '/../..' . '/lib/lib/twig/src/Error/RuntimeError.php', 'WPML\\Core\\Twig\\Error\\SyntaxError' => __DIR__ . '/../..' . '/lib/lib/twig/src/Error/SyntaxError.php', 'WPML\\Core\\Twig\\ExpressionParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/ExpressionParser.php', 'WPML\\Core\\Twig\\Extension\\AbstractExtension' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/AbstractExtension.php', 'WPML\\Core\\Twig\\Extension\\CoreExtension' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/CoreExtension.php', 'WPML\\Core\\Twig\\Extension\\DebugExtension' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/DebugExtension.php', 'WPML\\Core\\Twig\\Extension\\EscaperExtension' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/EscaperExtension.php', 'WPML\\Core\\Twig\\Extension\\ExtensionInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/ExtensionInterface.php', 'WPML\\Core\\Twig\\Extension\\GlobalsInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/GlobalsInterface.php', 'WPML\\Core\\Twig\\Extension\\InitRuntimeInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/InitRuntimeInterface.php', 'WPML\\Core\\Twig\\Extension\\OptimizerExtension' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/OptimizerExtension.php', 'WPML\\Core\\Twig\\Extension\\ProfilerExtension' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/ProfilerExtension.php', 'WPML\\Core\\Twig\\Extension\\RuntimeExtensionInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/RuntimeExtensionInterface.php', 'WPML\\Core\\Twig\\Extension\\SandboxExtension' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/SandboxExtension.php', 'WPML\\Core\\Twig\\Extension\\StagingExtension' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/StagingExtension.php', 'WPML\\Core\\Twig\\Extension\\StringLoaderExtension' => __DIR__ . '/../..' . '/lib/lib/twig/src/Extension/StringLoaderExtension.php', 'WPML\\Core\\Twig\\FileExtensionEscapingStrategy' => __DIR__ . '/../..' . '/lib/lib/twig/src/FileExtensionEscapingStrategy.php', 'WPML\\Core\\Twig\\Lexer' => __DIR__ . '/../..' . '/lib/lib/twig/src/Lexer.php', 'WPML\\Core\\Twig\\Loader\\ArrayLoader' => __DIR__ . '/../..' . '/lib/lib/twig/src/Loader/ArrayLoader.php', 'WPML\\Core\\Twig\\Loader\\ChainLoader' => __DIR__ . '/../..' . '/lib/lib/twig/src/Loader/ChainLoader.php', 'WPML\\Core\\Twig\\Loader\\ExistsLoaderInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Loader/ExistsLoaderInterface.php', 'WPML\\Core\\Twig\\Loader\\FilesystemLoader' => __DIR__ . '/../..' . '/lib/lib/twig/src/Loader/FilesystemLoader.php', 'WPML\\Core\\Twig\\Loader\\LoaderInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Loader/LoaderInterface.php', 'WPML\\Core\\Twig\\Loader\\SourceContextLoaderInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Loader/SourceContextLoaderInterface.php', 'WPML\\Core\\Twig\\Markup' => __DIR__ . '/../..' . '/lib/lib/twig/src/Markup.php', 'WPML\\Core\\Twig\\NodeTraverser' => __DIR__ . '/../..' . '/lib/lib/twig/src/NodeTraverser.php', 'WPML\\Core\\Twig\\NodeVisitor\\AbstractNodeVisitor' => __DIR__ . '/../..' . '/lib/lib/twig/src/NodeVisitor/AbstractNodeVisitor.php', 'WPML\\Core\\Twig\\NodeVisitor\\EscaperNodeVisitor' => __DIR__ . '/../..' . '/lib/lib/twig/src/NodeVisitor/EscaperNodeVisitor.php', 'WPML\\Core\\Twig\\NodeVisitor\\NodeVisitorInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/NodeVisitor/NodeVisitorInterface.php', 'WPML\\Core\\Twig\\NodeVisitor\\OptimizerNodeVisitor' => __DIR__ . '/../..' . '/lib/lib/twig/src/NodeVisitor/OptimizerNodeVisitor.php', 'WPML\\Core\\Twig\\NodeVisitor\\SafeAnalysisNodeVisitor' => __DIR__ . '/../..' . '/lib/lib/twig/src/NodeVisitor/SafeAnalysisNodeVisitor.php', 'WPML\\Core\\Twig\\NodeVisitor\\SandboxNodeVisitor' => __DIR__ . '/../..' . '/lib/lib/twig/src/NodeVisitor/SandboxNodeVisitor.php', 'WPML\\Core\\Twig\\Node\\AutoEscapeNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/AutoEscapeNode.php', 'WPML\\Core\\Twig\\Node\\BlockNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/BlockNode.php', 'WPML\\Core\\Twig\\Node\\BlockReferenceNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/BlockReferenceNode.php', 'WPML\\Core\\Twig\\Node\\BodyNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/BodyNode.php', 'WPML\\Core\\Twig\\Node\\CheckSecurityNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/CheckSecurityNode.php', 'WPML\\Core\\Twig\\Node\\CheckToStringNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/CheckToStringNode.php', 'WPML\\Core\\Twig\\Node\\DeprecatedNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/DeprecatedNode.php', 'WPML\\Core\\Twig\\Node\\DoNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/DoNode.php', 'WPML\\Core\\Twig\\Node\\EmbedNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/EmbedNode.php', 'WPML\\Core\\Twig\\Node\\Expression\\AbstractExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/AbstractExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\ArrayExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/ArrayExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\ArrowFunctionExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/ArrowFunctionExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\AssignNameExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/AssignNameExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\AbstractBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/AbstractBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\AddBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/AddBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\AndBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/AndBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\BitwiseAndBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/BitwiseAndBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\BitwiseOrBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/BitwiseOrBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\BitwiseXorBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/BitwiseXorBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\ConcatBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/ConcatBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\DivBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/DivBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\EndsWithBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/EndsWithBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\EqualBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/EqualBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\FloorDivBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/FloorDivBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\GreaterBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/GreaterBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\GreaterEqualBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/GreaterEqualBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\InBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/InBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\LessBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/LessBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\LessEqualBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/LessEqualBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\MatchesBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/MatchesBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\ModBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/ModBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\MulBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/MulBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\NotEqualBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/NotEqualBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\NotInBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/NotInBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\OrBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/OrBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\PowerBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/PowerBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\RangeBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/RangeBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\StartsWithBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/StartsWithBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Binary\\SubBinary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Binary/SubBinary.php', 'WPML\\Core\\Twig\\Node\\Expression\\BlockReferenceExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/BlockReferenceExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\CallExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/CallExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\ConditionalExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/ConditionalExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\ConstantExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/ConstantExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\FilterExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/FilterExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\Filter\\DefaultFilter' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Filter/DefaultFilter.php', 'WPML\\Core\\Twig\\Node\\Expression\\FunctionExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/FunctionExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\GetAttrExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/GetAttrExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\InlinePrint' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/InlinePrint.php', 'WPML\\Core\\Twig\\Node\\Expression\\MethodCallExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/MethodCallExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\NameExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/NameExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\NullCoalesceExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/NullCoalesceExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\ParentExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/ParentExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\TempNameExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/TempNameExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\TestExpression' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/TestExpression.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\ConstantTest' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Test/ConstantTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\DefinedTest' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Test/DefinedTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\DivisiblebyTest' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Test/DivisiblebyTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\EvenTest' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Test/EvenTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\NullTest' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Test/NullTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\OddTest' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Test/OddTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Test\\SameasTest' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Test/SameasTest.php', 'WPML\\Core\\Twig\\Node\\Expression\\Unary\\AbstractUnary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Unary/AbstractUnary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Unary\\NegUnary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Unary/NegUnary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Unary\\NotUnary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Unary/NotUnary.php', 'WPML\\Core\\Twig\\Node\\Expression\\Unary\\PosUnary' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Expression/Unary/PosUnary.php', 'WPML\\Core\\Twig\\Node\\FlushNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/FlushNode.php', 'WPML\\Core\\Twig\\Node\\ForLoopNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/ForLoopNode.php', 'WPML\\Core\\Twig\\Node\\ForNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/ForNode.php', 'WPML\\Core\\Twig\\Node\\IfNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/IfNode.php', 'WPML\\Core\\Twig\\Node\\ImportNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/ImportNode.php', 'WPML\\Core\\Twig\\Node\\IncludeNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/IncludeNode.php', 'WPML\\Core\\Twig\\Node\\MacroNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/MacroNode.php', 'WPML\\Core\\Twig\\Node\\ModuleNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/ModuleNode.php', 'WPML\\Core\\Twig\\Node\\Node' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/Node.php', 'WPML\\Core\\Twig\\Node\\NodeCaptureInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/NodeCaptureInterface.php', 'WPML\\Core\\Twig\\Node\\NodeOutputInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/NodeOutputInterface.php', 'WPML\\Core\\Twig\\Node\\PrintNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/PrintNode.php', 'WPML\\Core\\Twig\\Node\\SandboxNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/SandboxNode.php', 'WPML\\Core\\Twig\\Node\\SandboxedPrintNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/SandboxedPrintNode.php', 'WPML\\Core\\Twig\\Node\\SetNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/SetNode.php', 'WPML\\Core\\Twig\\Node\\SetTempNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/SetTempNode.php', 'WPML\\Core\\Twig\\Node\\SpacelessNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/SpacelessNode.php', 'WPML\\Core\\Twig\\Node\\TextNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/TextNode.php', 'WPML\\Core\\Twig\\Node\\WithNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Node/WithNode.php', 'WPML\\Core\\Twig\\Parser' => __DIR__ . '/../..' . '/lib/lib/twig/src/Parser.php', 'WPML\\Core\\Twig\\Profiler\\Dumper\\BaseDumper' => __DIR__ . '/../..' . '/lib/lib/twig/src/Profiler/Dumper/BaseDumper.php', 'WPML\\Core\\Twig\\Profiler\\Dumper\\BlackfireDumper' => __DIR__ . '/../..' . '/lib/lib/twig/src/Profiler/Dumper/BlackfireDumper.php', 'WPML\\Core\\Twig\\Profiler\\Dumper\\HtmlDumper' => __DIR__ . '/../..' . '/lib/lib/twig/src/Profiler/Dumper/HtmlDumper.php', 'WPML\\Core\\Twig\\Profiler\\Dumper\\TextDumper' => __DIR__ . '/../..' . '/lib/lib/twig/src/Profiler/Dumper/TextDumper.php', 'WPML\\Core\\Twig\\Profiler\\NodeVisitor\\ProfilerNodeVisitor' => __DIR__ . '/../..' . '/lib/lib/twig/src/Profiler/NodeVisitor/ProfilerNodeVisitor.php', 'WPML\\Core\\Twig\\Profiler\\Node\\EnterProfileNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Profiler/Node/EnterProfileNode.php', 'WPML\\Core\\Twig\\Profiler\\Node\\LeaveProfileNode' => __DIR__ . '/../..' . '/lib/lib/twig/src/Profiler/Node/LeaveProfileNode.php', 'WPML\\Core\\Twig\\Profiler\\Profile' => __DIR__ . '/../..' . '/lib/lib/twig/src/Profiler/Profile.php', 'WPML\\Core\\Twig\\RuntimeLoader\\ContainerRuntimeLoader' => __DIR__ . '/../..' . '/lib/lib/twig/src/RuntimeLoader/ContainerRuntimeLoader.php', 'WPML\\Core\\Twig\\RuntimeLoader\\FactoryRuntimeLoader' => __DIR__ . '/../..' . '/lib/lib/twig/src/RuntimeLoader/FactoryRuntimeLoader.php', 'WPML\\Core\\Twig\\RuntimeLoader\\RuntimeLoaderInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/RuntimeLoader/RuntimeLoaderInterface.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityError' => __DIR__ . '/../..' . '/lib/lib/twig/src/Sandbox/SecurityError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityNotAllowedFilterError' => __DIR__ . '/../..' . '/lib/lib/twig/src/Sandbox/SecurityNotAllowedFilterError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityNotAllowedFunctionError' => __DIR__ . '/../..' . '/lib/lib/twig/src/Sandbox/SecurityNotAllowedFunctionError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityNotAllowedMethodError' => __DIR__ . '/../..' . '/lib/lib/twig/src/Sandbox/SecurityNotAllowedMethodError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityNotAllowedPropertyError' => __DIR__ . '/../..' . '/lib/lib/twig/src/Sandbox/SecurityNotAllowedPropertyError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityNotAllowedTagError' => __DIR__ . '/../..' . '/lib/lib/twig/src/Sandbox/SecurityNotAllowedTagError.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityPolicy' => __DIR__ . '/../..' . '/lib/lib/twig/src/Sandbox/SecurityPolicy.php', 'WPML\\Core\\Twig\\Sandbox\\SecurityPolicyInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/Sandbox/SecurityPolicyInterface.php', 'WPML\\Core\\Twig\\Source' => __DIR__ . '/../..' . '/lib/lib/twig/src/Source.php', 'WPML\\Core\\Twig\\Template' => __DIR__ . '/../..' . '/lib/lib/twig/src/Template.php', 'WPML\\Core\\Twig\\TemplateWrapper' => __DIR__ . '/../..' . '/lib/lib/twig/src/TemplateWrapper.php', 'WPML\\Core\\Twig\\Test\\IntegrationTestCase' => __DIR__ . '/../..' . '/lib/lib/twig/src/Test/IntegrationTestCase.php', 'WPML\\Core\\Twig\\Test\\NodeTestCase' => __DIR__ . '/../..' . '/lib/lib/twig/src/Test/NodeTestCase.php', 'WPML\\Core\\Twig\\Token' => __DIR__ . '/../..' . '/lib/lib/twig/src/Token.php', 'WPML\\Core\\Twig\\TokenParser\\AbstractTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/AbstractTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\ApplyTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/ApplyTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\AutoEscapeTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/AutoEscapeTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\BlockTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/BlockTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\DeprecatedTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/DeprecatedTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\DoTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/DoTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\EmbedTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/EmbedTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\ExtendsTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/ExtendsTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\FilterTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/FilterTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\FlushTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/FlushTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\ForTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/ForTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\FromTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/FromTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\IfTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/IfTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\ImportTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/ImportTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\IncludeTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/IncludeTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\MacroTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/MacroTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\SandboxTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/SandboxTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\SetTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/SetTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\SpacelessTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/SpacelessTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\TokenParserInterface' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/TokenParserInterface.php', 'WPML\\Core\\Twig\\TokenParser\\UseTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/UseTokenParser.php', 'WPML\\Core\\Twig\\TokenParser\\WithTokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenParser/WithTokenParser.php', 'WPML\\Core\\Twig\\TokenStream' => __DIR__ . '/../..' . '/lib/lib/twig/src/TokenStream.php', 'WPML\\Core\\Twig\\TwigFilter' => __DIR__ . '/../..' . '/lib/lib/twig/src/TwigFilter.php', 'WPML\\Core\\Twig\\TwigFunction' => __DIR__ . '/../..' . '/lib/lib/twig/src/TwigFunction.php', 'WPML\\Core\\Twig\\TwigTest' => __DIR__ . '/../..' . '/lib/lib/twig/src/TwigTest.php', 'WPML\\Core\\Twig\\Util\\DeprecationCollector' => __DIR__ . '/../..' . '/lib/lib/twig/src/Util/DeprecationCollector.php', 'WPML\\Core\\Twig\\Util\\TemplateDirIterator' => __DIR__ . '/../..' . '/lib/lib/twig/src/Util/TemplateDirIterator.php', 'WPML\\Core\\Twig_Autoloader' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Autoloader.php', 'WPML\\Core\\Twig_BaseNodeVisitor' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/BaseNodeVisitor.php', 'WPML\\Core\\Twig_CacheInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/CacheInterface.php', 'WPML\\Core\\Twig_Cache_Filesystem' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Cache/Filesystem.php', 'WPML\\Core\\Twig_Cache_Null' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Cache/Null.php', 'WPML\\Core\\Twig_Compiler' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Compiler.php', 'WPML\\Core\\Twig_CompilerInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/CompilerInterface.php', 'WPML\\Core\\Twig_ContainerRuntimeLoader' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/ContainerRuntimeLoader.php', 'WPML\\Core\\Twig_Environment' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Environment.php', 'WPML\\Core\\Twig_Error' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Error.php', 'WPML\\Core\\Twig_Error_Loader' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Error/Loader.php', 'WPML\\Core\\Twig_Error_Runtime' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Error/Runtime.php', 'WPML\\Core\\Twig_Error_Syntax' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Error/Syntax.php', 'WPML\\Core\\Twig_ExistsLoaderInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/ExistsLoaderInterface.php', 'WPML\\Core\\Twig_ExpressionParser' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/ExpressionParser.php', 'WPML\\Core\\Twig_Extension' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension.php', 'WPML\\Core\\Twig_ExtensionInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/ExtensionInterface.php', 'WPML\\Core\\Twig_Extension_Core' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension/Core.php', 'WPML\\Core\\Twig_Extension_Debug' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension/Debug.php', 'WPML\\Core\\Twig_Extension_Escaper' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension/Escaper.php', 'WPML\\Core\\Twig_Extension_GlobalsInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension/GlobalsInterface.php', 'WPML\\Core\\Twig_Extension_InitRuntimeInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension/InitRuntimeInterface.php', 'WPML\\Core\\Twig_Extension_Optimizer' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension/Optimizer.php', 'WPML\\Core\\Twig_Extension_Profiler' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension/Profiler.php', 'WPML\\Core\\Twig_Extension_Sandbox' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension/Sandbox.php', 'WPML\\Core\\Twig_Extension_Staging' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension/Staging.php', 'WPML\\Core\\Twig_Extension_StringLoader' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Extension/StringLoader.php', 'WPML\\Core\\Twig_FactoryRuntimeLoader' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/FactoryRuntimeLoader.php', 'WPML\\Core\\Twig_FileExtensionEscapingStrategy' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/FileExtensionEscapingStrategy.php', 'WPML\\Core\\Twig_Filter' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Filter.php', 'WPML\\Core\\Twig_FilterCallableInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/FilterCallableInterface.php', 'WPML\\Core\\Twig_FilterInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/FilterInterface.php', 'WPML\\Core\\Twig_Filter_Function' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Filter/Function.php', 'WPML\\Core\\Twig_Filter_Method' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Filter/Method.php', 'WPML\\Core\\Twig_Filter_Node' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Filter/Node.php', 'WPML\\Core\\Twig_Function' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Function.php', 'WPML\\Core\\Twig_FunctionCallableInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/FunctionCallableInterface.php', 'WPML\\Core\\Twig_FunctionInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/FunctionInterface.php', 'WPML\\Core\\Twig_Function_Function' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Function/Function.php', 'WPML\\Core\\Twig_Function_Method' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Function/Method.php', 'WPML\\Core\\Twig_Function_Node' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Function/Node.php', 'WPML\\Core\\Twig_Lexer' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Lexer.php', 'WPML\\Core\\Twig_LexerInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/LexerInterface.php', 'WPML\\Core\\Twig_LoaderInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/LoaderInterface.php', 'WPML\\Core\\Twig_Loader_Array' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Loader/Array.php', 'WPML\\Core\\Twig_Loader_Chain' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Loader/Chain.php', 'WPML\\Core\\Twig_Loader_Filesystem' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Loader/Filesystem.php', 'WPML\\Core\\Twig_Loader_String' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Loader/String.php', 'WPML\\Core\\Twig_Markup' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Markup.php', 'WPML\\Core\\Twig_Node' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node.php', 'WPML\\Core\\Twig_NodeCaptureInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/NodeCaptureInterface.php', 'WPML\\Core\\Twig_NodeInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/NodeInterface.php', 'WPML\\Core\\Twig_NodeOutputInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/NodeOutputInterface.php', 'WPML\\Core\\Twig_NodeTraverser' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/NodeTraverser.php', 'WPML\\Core\\Twig_NodeVisitorInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/NodeVisitorInterface.php', 'WPML\\Core\\Twig_NodeVisitor_Escaper' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/NodeVisitor/Escaper.php', 'WPML\\Core\\Twig_NodeVisitor_Optimizer' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/NodeVisitor/Optimizer.php', 'WPML\\Core\\Twig_NodeVisitor_SafeAnalysis' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/NodeVisitor/SafeAnalysis.php', 'WPML\\Core\\Twig_NodeVisitor_Sandbox' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/NodeVisitor/Sandbox.php', 'WPML\\Core\\Twig_Node_AutoEscape' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/AutoEscape.php', 'WPML\\Core\\Twig_Node_Block' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Block.php', 'WPML\\Core\\Twig_Node_BlockReference' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/BlockReference.php', 'WPML\\Core\\Twig_Node_Body' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Body.php', 'WPML\\Core\\Twig_Node_CheckSecurity' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/CheckSecurity.php', 'WPML\\Core\\Twig_Node_Deprecated' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Deprecated.php', 'WPML\\Core\\Twig_Node_Do' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Do.php', 'WPML\\Core\\Twig_Node_Embed' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Embed.php', 'WPML\\Core\\Twig_Node_Expression' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression.php', 'WPML\\Core\\Twig_Node_Expression_Array' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Array.php', 'WPML\\Core\\Twig_Node_Expression_AssignName' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/AssignName.php', 'WPML\\Core\\Twig_Node_Expression_Binary' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Add' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Add.php', 'WPML\\Core\\Twig_Node_Expression_Binary_And' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/And.php', 'WPML\\Core\\Twig_Node_Expression_Binary_BitwiseAnd' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/BitwiseAnd.php', 'WPML\\Core\\Twig_Node_Expression_Binary_BitwiseOr' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/BitwiseOr.php', 'WPML\\Core\\Twig_Node_Expression_Binary_BitwiseXor' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/BitwiseXor.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Concat' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Concat.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Div' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Div.php', 'WPML\\Core\\Twig_Node_Expression_Binary_EndsWith' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/EndsWith.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Equal' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Equal.php', 'WPML\\Core\\Twig_Node_Expression_Binary_FloorDiv' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/FloorDiv.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Greater' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Greater.php', 'WPML\\Core\\Twig_Node_Expression_Binary_GreaterEqual' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/GreaterEqual.php', 'WPML\\Core\\Twig_Node_Expression_Binary_In' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/In.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Less' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Less.php', 'WPML\\Core\\Twig_Node_Expression_Binary_LessEqual' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/LessEqual.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Matches' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Matches.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Mod' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Mod.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Mul' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Mul.php', 'WPML\\Core\\Twig_Node_Expression_Binary_NotEqual' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/NotEqual.php', 'WPML\\Core\\Twig_Node_Expression_Binary_NotIn' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/NotIn.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Or' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Or.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Power' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Power.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Range' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Range.php', 'WPML\\Core\\Twig_Node_Expression_Binary_StartsWith' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/StartsWith.php', 'WPML\\Core\\Twig_Node_Expression_Binary_Sub' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Binary/Sub.php', 'WPML\\Core\\Twig_Node_Expression_BlockReference' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/BlockReference.php', 'WPML\\Core\\Twig_Node_Expression_Call' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Call.php', 'WPML\\Core\\Twig_Node_Expression_Conditional' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Conditional.php', 'WPML\\Core\\Twig_Node_Expression_Constant' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Constant.php', 'WPML\\Core\\Twig_Node_Expression_ExtensionReference' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/ExtensionReference.php', 'WPML\\Core\\Twig_Node_Expression_Filter' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Filter.php', 'WPML\\Core\\Twig_Node_Expression_Filter_Default' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Filter/Default.php', 'WPML\\Core\\Twig_Node_Expression_Function' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Function.php', 'WPML\\Core\\Twig_Node_Expression_GetAttr' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/GetAttr.php', 'WPML\\Core\\Twig_Node_Expression_MethodCall' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/MethodCall.php', 'WPML\\Core\\Twig_Node_Expression_Name' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Name.php', 'WPML\\Core\\Twig_Node_Expression_NullCoalesce' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/NullCoalesce.php', 'WPML\\Core\\Twig_Node_Expression_Parent' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Parent.php', 'WPML\\Core\\Twig_Node_Expression_TempName' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/TempName.php', 'WPML\\Core\\Twig_Node_Expression_Test' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Test.php', 'WPML\\Core\\Twig_Node_Expression_Test_Constant' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Test/Constant.php', 'WPML\\Core\\Twig_Node_Expression_Test_Defined' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Test/Defined.php', 'WPML\\Core\\Twig_Node_Expression_Test_Divisibleby' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Test/Divisibleby.php', 'WPML\\Core\\Twig_Node_Expression_Test_Even' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Test/Even.php', 'WPML\\Core\\Twig_Node_Expression_Test_Null' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Test/Null.php', 'WPML\\Core\\Twig_Node_Expression_Test_Odd' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Test/Odd.php', 'WPML\\Core\\Twig_Node_Expression_Test_Sameas' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Test/Sameas.php', 'WPML\\Core\\Twig_Node_Expression_Unary' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Unary.php', 'WPML\\Core\\Twig_Node_Expression_Unary_Neg' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Unary/Neg.php', 'WPML\\Core\\Twig_Node_Expression_Unary_Not' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Unary/Not.php', 'WPML\\Core\\Twig_Node_Expression_Unary_Pos' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Expression/Unary/Pos.php', 'WPML\\Core\\Twig_Node_Flush' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Flush.php', 'WPML\\Core\\Twig_Node_For' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/For.php', 'WPML\\Core\\Twig_Node_ForLoop' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/ForLoop.php', 'WPML\\Core\\Twig_Node_If' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/If.php', 'WPML\\Core\\Twig_Node_Import' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Import.php', 'WPML\\Core\\Twig_Node_Include' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Include.php', 'WPML\\Core\\Twig_Node_Macro' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Macro.php', 'WPML\\Core\\Twig_Node_Module' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Module.php', 'WPML\\Core\\Twig_Node_Print' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Print.php', 'WPML\\Core\\Twig_Node_Sandbox' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Sandbox.php', 'WPML\\Core\\Twig_Node_SandboxedPrint' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/SandboxedPrint.php', 'WPML\\Core\\Twig_Node_Set' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Set.php', 'WPML\\Core\\Twig_Node_SetTemp' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/SetTemp.php', 'WPML\\Core\\Twig_Node_Spaceless' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Spaceless.php', 'WPML\\Core\\Twig_Node_Text' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/Text.php', 'WPML\\Core\\Twig_Node_With' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Node/With.php', 'WPML\\Core\\Twig_Parser' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Parser.php', 'WPML\\Core\\Twig_ParserInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/ParserInterface.php', 'WPML\\Core\\Twig_Profiler_Dumper_Base' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Profiler/Dumper/Base.php', 'WPML\\Core\\Twig_Profiler_Dumper_Blackfire' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Profiler/Dumper/Blackfire.php', 'WPML\\Core\\Twig_Profiler_Dumper_Html' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Profiler/Dumper/Html.php', 'WPML\\Core\\Twig_Profiler_Dumper_Text' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Profiler/Dumper/Text.php', 'WPML\\Core\\Twig_Profiler_NodeVisitor_Profiler' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Profiler/NodeVisitor/Profiler.php', 'WPML\\Core\\Twig_Profiler_Node_EnterProfile' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Profiler/Node/EnterProfile.php', 'WPML\\Core\\Twig_Profiler_Node_LeaveProfile' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Profiler/Node/LeaveProfile.php', 'WPML\\Core\\Twig_Profiler_Profile' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Profiler/Profile.php', 'WPML\\Core\\Twig_RuntimeLoaderInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/RuntimeLoaderInterface.php', 'WPML\\Core\\Twig_Sandbox_SecurityError' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Sandbox/SecurityError.php', 'WPML\\Core\\Twig_Sandbox_SecurityNotAllowedFilterError' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Sandbox/SecurityNotAllowedFilterError.php', 'WPML\\Core\\Twig_Sandbox_SecurityNotAllowedFunctionError' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Sandbox/SecurityNotAllowedFunctionError.php', 'WPML\\Core\\Twig_Sandbox_SecurityNotAllowedMethodError' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Sandbox/SecurityNotAllowedMethodError.php', 'WPML\\Core\\Twig_Sandbox_SecurityNotAllowedPropertyError' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Sandbox/SecurityNotAllowedPropertyError.php', 'WPML\\Core\\Twig_Sandbox_SecurityNotAllowedTagError' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Sandbox/SecurityNotAllowedTagError.php', 'WPML\\Core\\Twig_Sandbox_SecurityPolicy' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Sandbox/SecurityPolicy.php', 'WPML\\Core\\Twig_Sandbox_SecurityPolicyInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Sandbox/SecurityPolicyInterface.php', 'WPML\\Core\\Twig_SimpleFilter' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/SimpleFilter.php', 'WPML\\Core\\Twig_SimpleFunction' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/SimpleFunction.php', 'WPML\\Core\\Twig_SimpleTest' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/SimpleTest.php', 'WPML\\Core\\Twig_Source' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Source.php', 'WPML\\Core\\Twig_SourceContextLoaderInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/SourceContextLoaderInterface.php', 'WPML\\Core\\Twig_Template' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Template.php', 'WPML\\Core\\Twig_TemplateInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TemplateInterface.php', 'WPML\\Core\\Twig_TemplateWrapper' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TemplateWrapper.php', 'WPML\\Core\\Twig_Test' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Test.php', 'WPML\\Core\\Twig_TestCallableInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TestCallableInterface.php', 'WPML\\Core\\Twig_TestInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TestInterface.php', 'WPML\\Core\\Twig_Test_Function' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Test/Function.php', 'WPML\\Core\\Twig_Test_IntegrationTestCase' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Test/IntegrationTestCase.php', 'WPML\\Core\\Twig_Test_Method' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Test/Method.php', 'WPML\\Core\\Twig_Test_Node' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Test/Node.php', 'WPML\\Core\\Twig_Test_NodeTestCase' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Test/NodeTestCase.php', 'WPML\\Core\\Twig_Token' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Token.php', 'WPML\\Core\\Twig_TokenParser' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser.php', 'WPML\\Core\\Twig_TokenParserBroker' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParserBroker.php', 'WPML\\Core\\Twig_TokenParserBrokerInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParserBrokerInterface.php', 'WPML\\Core\\Twig_TokenParserInterface' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParserInterface.php', 'WPML\\Core\\Twig_TokenParser_AutoEscape' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/AutoEscape.php', 'WPML\\Core\\Twig_TokenParser_Block' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Block.php', 'WPML\\Core\\Twig_TokenParser_Deprecated' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Deprecated.php', 'WPML\\Core\\Twig_TokenParser_Do' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Do.php', 'WPML\\Core\\Twig_TokenParser_Embed' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Embed.php', 'WPML\\Core\\Twig_TokenParser_Extends' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Extends.php', 'WPML\\Core\\Twig_TokenParser_Filter' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Filter.php', 'WPML\\Core\\Twig_TokenParser_Flush' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Flush.php', 'WPML\\Core\\Twig_TokenParser_For' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/For.php', 'WPML\\Core\\Twig_TokenParser_From' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/From.php', 'WPML\\Core\\Twig_TokenParser_If' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/If.php', 'WPML\\Core\\Twig_TokenParser_Import' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Import.php', 'WPML\\Core\\Twig_TokenParser_Include' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Include.php', 'WPML\\Core\\Twig_TokenParser_Macro' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Macro.php', 'WPML\\Core\\Twig_TokenParser_Sandbox' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Sandbox.php', 'WPML\\Core\\Twig_TokenParser_Set' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Set.php', 'WPML\\Core\\Twig_TokenParser_Spaceless' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Spaceless.php', 'WPML\\Core\\Twig_TokenParser_Use' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/Use.php', 'WPML\\Core\\Twig_TokenParser_With' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenParser/With.php', 'WPML\\Core\\Twig_TokenStream' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/TokenStream.php', 'WPML\\Core\\Twig_Util_DeprecationCollector' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Util/DeprecationCollector.php', 'WPML\\Core\\Twig_Util_TemplateDirIterator' => __DIR__ . '/../..' . '/lib/lib/twig/lib/Twig/Util/TemplateDirIterator.php', 'WPML\\DocPage' => __DIR__ . '/..' . '/wpml/core-api/core/DocPage.php', 'WPML\\Element\\API\\Entity\\LanguageMapping' => __DIR__ . '/..' . '/wpml/core-api/core/Entity/LanguageMapping.php', 'WPML\\Element\\API\\IfOriginalPost' => __DIR__ . '/..' . '/wpml/core-api/core/IfOriginalPost.php', 'WPML\\Element\\API\\Languages' => __DIR__ . '/..' . '/wpml/core-api/core/Languages.php', 'WPML\\Element\\API\\Post' => __DIR__ . '/..' . '/wpml/core-api/core/Post.php', 'WPML\\Element\\API\\PostTranslations' => __DIR__ . '/..' . '/wpml/core-api/core/PostTranslations.php', 'WPML\\Element\\API\\Translations' => __DIR__ . '/..' . '/wpml/core-api/core/Translations.php', 'WPML\\Element\\API\\TranslationsRepository' => __DIR__ . '/..' . '/wpml/core-api/core/TranslationsRepository.php', 'WPML\\FP\\Applicative' => __DIR__ . '/..' . '/wpml/fp/core/Functor/Applicative.php', 'WPML\\FP\\Cast' => __DIR__ . '/..' . '/wpml/fp/core/Cast.php', 'WPML\\FP\\ConstApplicative' => __DIR__ . '/..' . '/wpml/fp/core/Functor/ConstApplicative.php', 'WPML\\FP\\Curryable' => __DIR__ . '/..' . '/wpml/fp/core/traits/Curryable.php', 'WPML\\FP\\Debug' => __DIR__ . '/..' . '/wpml/fp/core/Debug.php', 'WPML\\FP\\Either' => __DIR__ . '/..' . '/wpml/fp/core/Either.php', 'WPML\\FP\\FP' => __DIR__ . '/..' . '/wpml/fp/core/FP.php', 'WPML\\FP\\Fns' => __DIR__ . '/..' . '/wpml/fp/core/Fns.php', 'WPML\\FP\\Functor\\ConstFunctor' => __DIR__ . '/..' . '/wpml/fp/core/Functor/ConstFunctor.php', 'WPML\\FP\\Functor\\Functor' => __DIR__ . '/..' . '/wpml/fp/core/Functor/Functor.php', 'WPML\\FP\\Functor\\IdentityFunctor' => __DIR__ . '/..' . '/wpml/fp/core/Functor/IdentityFunctor.php', 'WPML\\FP\\Functor\\Pointed' => __DIR__ . '/..' . '/wpml/fp/core/Functor/Pointed.php', 'WPML\\FP\\Invoker\\BeforeAfter' => __DIR__ . '/..' . '/wpml/fp/core/Invoker/BeforeAfter.php', 'WPML\\FP\\Invoker\\_Invoker' => __DIR__ . '/..' . '/wpml/fp/core/Invoker/Invoker.php', 'WPML\\FP\\Json' => __DIR__ . '/..' . '/wpml/fp/core/Json.php', 'WPML\\FP\\Just' => __DIR__ . '/..' . '/wpml/fp/core/Maybe.php', 'WPML\\FP\\Left' => __DIR__ . '/..' . '/wpml/fp/core/Either.php', 'WPML\\FP\\Lens' => __DIR__ . '/..' . '/wpml/fp/core/Lens.php', 'WPML\\FP\\Logic' => __DIR__ . '/..' . '/wpml/fp/core/Logic.php', 'WPML\\FP\\Lst' => __DIR__ . '/..' . '/wpml/fp/core/Lst.php', 'WPML\\FP\\Math' => __DIR__ . '/..' . '/wpml/fp/core/Math.php', 'WPML\\FP\\Maybe' => __DIR__ . '/..' . '/wpml/fp/core/Maybe.php', 'WPML\\FP\\Monoid\\All' => __DIR__ . '/..' . '/wpml/fp/core/monoid/All.php', 'WPML\\FP\\Monoid\\Any' => __DIR__ . '/..' . '/wpml/fp/core/monoid/Any.php', 'WPML\\FP\\Monoid\\Monoid' => __DIR__ . '/..' . '/wpml/fp/core/monoid/Monoid.php', 'WPML\\FP\\Monoid\\Str' => __DIR__ . '/..' . '/wpml/fp/core/monoid/Str.php', 'WPML\\FP\\Monoid\\Sum' => __DIR__ . '/..' . '/wpml/fp/core/monoid/Sum.php', 'WPML\\FP\\Nothing' => __DIR__ . '/..' . '/wpml/fp/core/Maybe.php', 'WPML\\FP\\Obj' => __DIR__ . '/..' . '/wpml/fp/core/Obj.php', 'WPML\\FP\\Promise' => __DIR__ . '/..' . '/wpml/fp/core/Promise.php', 'WPML\\FP\\Relation' => __DIR__ . '/..' . '/wpml/fp/core/Relation.php', 'WPML\\FP\\Right' => __DIR__ . '/..' . '/wpml/fp/core/Either.php', 'WPML\\FP\\Str' => __DIR__ . '/..' . '/wpml/fp/core/Strings.php', 'WPML\\FP\\System\\System' => __DIR__ . '/..' . '/wpml/fp/core/SystemClass.php', 'WPML\\FP\\System\\_Filter' => __DIR__ . '/..' . '/wpml/fp/core/Filter.php', 'WPML\\FP\\System\\_Validator' => __DIR__ . '/..' . '/wpml/fp/core/Validator.php', 'WPML\\FP\\Type' => __DIR__ . '/..' . '/wpml/fp/core/Type.php', 'WPML\\FP\\Undefined' => __DIR__ . '/..' . '/wpml/fp/core/Undefined.php', 'WPML\\FP\\Wrapper' => __DIR__ . '/..' . '/wpml/fp/core/Wrapper.php', 'WPML\\LIB\\WP\\App\\Resources' => __DIR__ . '/..' . '/wpml/wp/classes/Resources.php', 'WPML\\LIB\\WP\\Attachment' => __DIR__ . '/..' . '/wpml/wp/classes/Attachment.php', 'WPML\\LIB\\WP\\Cache' => __DIR__ . '/..' . '/wpml/wp/classes/Cache.php', 'WPML\\LIB\\WP\\Gutenberg' => __DIR__ . '/..' . '/wpml/wp/classes/Gutenberg.php', 'WPML\\LIB\\WP\\Hooks' => __DIR__ . '/..' . '/wpml/wp/classes/Hooks.php', 'WPML\\LIB\\WP\\Http' => __DIR__ . '/..' . '/wpml/wp/classes/Http.php', 'WPML\\LIB\\WP\\Nonce' => __DIR__ . '/..' . '/wpml/wp/classes/Nonce.php', 'WPML\\LIB\\WP\\Option' => __DIR__ . '/..' . '/wpml/wp/classes/Option.php', 'WPML\\LIB\\WP\\Post' => __DIR__ . '/..' . '/wpml/wp/classes/Post.php', 'WPML\\LIB\\WP\\PostType' => __DIR__ . '/..' . '/wpml/wp/classes/PostType.php', 'WPML\\LIB\\WP\\Roles' => __DIR__ . '/..' . '/wpml/wp/classes/Roles.php', 'WPML\\LIB\\WP\\Transient' => __DIR__ . '/..' . '/wpml/wp/classes/Transient.php', 'WPML\\LIB\\WP\\Url' => __DIR__ . '/..' . '/wpml/wp/classes/Url.php', 'WPML\\LIB\\WP\\User' => __DIR__ . '/..' . '/wpml/wp/classes/User.php', 'WPML\\LIB\\WP\\WPDB' => __DIR__ . '/..' . '/wpml/wp/classes/WPDB.php', 'WPML\\LIB\\WP\\WordPress' => __DIR__ . '/..' . '/wpml/wp/classes/WP.php', 'WPML\\Media\\Option' => __DIR__ . '/..' . '/wpml/core-api/core/media/Option.php', 'WPML\\Notices\\DismissNotices' => __DIR__ . '/../..' . '/lib/classes/notices/DismissNotices.php', 'WPML\\Records\\Translations' => __DIR__ . '/..' . '/wpml/core-api/core/Records/Translations.php', 'WPML\\Settings\\LanguageNegotiation' => __DIR__ . '/..' . '/wpml/core-api/core/settings/LanguageNegotiation.php', 'WPML\\Settings\\PostType\\Automatic' => __DIR__ . '/..' . '/wpml/core-api/core/settings/Automatic.php', 'WPML\\Setup\\Option' => __DIR__ . '/..' . '/wpml/core-api/core/setup/Option.php', 'WPML\\Timer' => __DIR__ . '/..' . '/wpml/core-api/core/Timer.php', 'WPML\\UIPage' => __DIR__ . '/..' . '/wpml/core-api/core/UIPage.php', 'WPML\\Utilities\\ILock' => __DIR__ . '/..' . '/wpml/core-api/core/utility/ILock.php', 'WPML\\Utilities\\Lock' => __DIR__ . '/..' . '/wpml/core-api/core/utility/Lock.php', 'WPML\\Utilities\\Logger' => __DIR__ . '/..' . '/wpml/core-api/core/utility/Logger.php', 'WPML\\WP\\OptionManager' => __DIR__ . '/..' . '/wpml/core-api/core/OptionManager.php', 'WPML_AJAX_Action_Validation' => __DIR__ . '/../..' . '/lib/classes/action-filter-loader/class-wpml-ajax-action-validation.php', 'WPML_AJAX_Base_Factory' => __DIR__ . '/../..' . '/lib/classes/action-filter-loader/class-wpml-ajax-action-base-factory.php', 'WPML_Action_Filter_Loader' => __DIR__ . '/../..' . '/lib/classes/action-filter-loader/class-wpml-action-filter-loader.php', 'WPML_Block_Editor_Helper' => __DIR__ . '/../..' . '/lib/classes/block-editor/class-wpml-block-editor-helper.php', 'WPML_Cookie' => __DIR__ . '/../..' . '/lib/classes/cookie/class-wpml-cookie.php', 'WPML_Core_Privacy_Content' => __DIR__ . '/../..' . '/lib/classes/privacy/class-wpml-core-privacy-content.php', 'WPML_Current_Screen_Loader_Factory' => __DIR__ . '/../..' . '/lib/classes/action-filter-loader/class-wpml-current-screen-loader-factory.php', 'WPML_File' => __DIR__ . '/../..' . '/lib/classes/class-wpml-file.php', 'WPML_Notice' => __DIR__ . '/../..' . '/lib/classes/notices/class-wpml-notice.php', 'WPML_Notice_Action' => __DIR__ . '/../..' . '/lib/classes/notices/class-wpml-notice-action.php', 'WPML_Notice_Render' => __DIR__ . '/../..' . '/lib/classes/notices/class-wpml-notice-render.php', 'WPML_Notice_Show_On_Dashboard_And_WPML_Pages' => __DIR__ . '/../..' . '/lib/classes/notices/pages/class-wpml-notice-show-on-dashboard-and-wpml-pages.php', 'WPML_Notices' => __DIR__ . '/../..' . '/lib/classes/notices/class-wpml-notices.php', 'WPML_PHP_Functions' => __DIR__ . '/../..' . '/lib/classes/wpml-wp/wpml-php-functions.php', 'WPML_Privacy_Content' => __DIR__ . '/../..' . '/lib/classes/privacy/class-wpml-privacy-content.php', 'WPML_Privacy_Content_Factory' => __DIR__ . '/../..' . '/lib/classes/privacy/class-wpml-privacy-content-factory.php', 'WPML_Templates_Factory' => __DIR__ . '/../..' . '/lib/classes/templating/class-wpml-templates-factory.php', 'WPML_Twig_Template' => __DIR__ . '/../..' . '/lib/classes/templates/class-wpml-twig-template.php', 'WPML_Twig_Template_Loader' => __DIR__ . '/../..' . '/lib/classes/templates/wpml-twig-template-loader.php', 'WPML_Twig_WP_Plugin_Extension' => __DIR__ . '/../..' . '/lib/classes/twig-extensions/wpml-twig-wp-plugin-extension.php', 'WPML_WP_API' => __DIR__ . '/../..' . '/lib/classes/wpml-wp/class-wpml-wp-api.php', 'WPML_WP_Cache' => __DIR__ . '/../..' . '/lib/classes/utilities/class-wpml-wp-cache.php', 'WPML_WP_Post_Type' => __DIR__ . '/../..' . '/lib/classes/wpml-wp/wpml-wp-post-type.php', 'WPML_WP_Roles' => __DIR__ . '/../..' . '/lib/classes/wpml-wp/class-wpml-wp-roles.php', 'WPML_WP_Taxonomy' => __DIR__ . '/../..' . '/lib/classes/wpml-wp/class-wpml-wp-taxonomy.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace WPML\Setup {
    class Option
    {
        const POSTS_LIMIT_FOR_AUTOMATIC_TRANSLATION = 10;
        const OPTION_GROUP = 'setup';
        const CURRENT_STEP = 'current-step';
        const ORIGINAL_LANG = 'original-lang';
        const TRANSLATED_LANGS = 'translated-langs';
        const LANGUAGES_MAPPING = 'languages-mapping';
        const WHO_MODE = 'who-mode';
        const TRANSLATE_EVERYTHING = 'translate-everything';
        const TRANSLATE_EVERYTHING_COMPLETED = 'translate-everything-completed';
        const TRANSLATE_EVERYTHING_IS_PAUSED = 'translate-everything-is-paused';
        const TM_ALLOWED = 'is-tm-allowed';
        const REVIEW_MODE = 'review-mode';
        const NO_REVIEW = 'no-review';
        const PUBLISH_AND_REVIEW = 'publish-and-review';
        const HOLD_FOR_REVIEW = 'before-publish';
        public static function getCurrentStep()
        {
        }
        public static function saveCurrentStep($step)
        {
        }
        public static function getOriginalLang()
        {
        }
        public static function setOriginalLang($lang)
        {
        }
        public static function getTranslationLangs()
        {
        }
        public static function setTranslationLangs(array $langs)
        {
        }
        /**
         * Sets service as default translation mode if there's a default Translation Service linked to this instance.
         *
         * @param bool $hasPreferredTranslationService
         */
        public static function setDefaultTranslationMode($hasPreferredTranslationService = false)
        {
        }
        public static function setOnlyMyselfAsDefault()
        {
        }
        public static function setTranslationMode(array $mode)
        {
        }
        public static function getTranslationMode()
        {
        }
        public static function setTranslateEverythingDefault()
        {
        }
        public static function shouldTranslateEverything($default = false)
        {
        }
        /** @param bool $state */
        public static function setTranslateEverything($state)
        {
        }
        /**
         * @return bool
         */
        public static function isPausedTranslateEverything()
        {
        }
        /** @param bool $state */
        public static function setIsPausedTranslateEverything($state)
        {
        }
        /**
         * @return bool
         */
        public static function getTranslateEverything()
        {
        }
        public static function setTranslateEverythingCompleted($completed)
        {
        }
        public static function markPostTypeAsCompleted($postType, $languages)
        {
        }
        public static function removePostTypeFromCompleted($postType)
        {
        }
        public static function removeLanguageFromCompleted($language)
        {
        }
        public static function getTranslateEverythingCompleted()
        {
        }
        public static function isTMAllowed()
        {
        }
        public static function setTMAllowed($isTMAllowed)
        {
        }
        public static function setReviewMode($mode)
        {
        }
        public static function getReviewMode($default = self::HOLD_FOR_REVIEW)
        {
        }
        public static function shouldBeReviewed()
        {
        }
        /**
         * @return LanguageMapping[]
         */
        public static function getLanguageMappings()
        {
        }
        /**
         * @param LanguageMapping $languageMapping
         */
        public static function addLanguageMapping(\WPML\Element\API\Entity\LanguageMapping $languageMapping)
        {
        }
        /**
         * @param bool $hasPreferredTranslationService
         * @return bool
         */
        public static function getTranslateEverythingDefaultInSetup($hasPreferredTranslationService = false)
        {
        }
    }
}
namespace WPML\Convert {
    class Ids
    {
        const ANY_POST = 'any_post';
        const ANY_TERM = 'any_term';
        /**
         * @param int|string|array|mixed $ids
         * @param string|null            $elementType
         * @param bool                   $fallbackToOriginal
         * @param string|null            $targetLang
         *
         * @return callable|mixed|null
         */
        public static function convert($ids, $elementType = null, $fallbackToOriginal = false, $targetLang = null)
        {
        }
        /**
         * Finds the unique separator pattern between IDs or return false otherwise.
         *
         * @param string $string
         *
         * @return false|string
         */
        public static function guessGlue($string)
        {
        }
    }
}
namespace WPML\Collect\Support\Traits {
    trait Macroable
    {
        /**
         * The registered string macros.
         *
         * @var callable[]
         */
        protected static $macros = [];
        /**
         * Register a custom macro.
         *
         * @param  string    $name
         * @param  callable  $macro
         * @return void
         */
        public static function macro($name, callable $macro)
        {
        }
        /**
         * Checks if macro is registered.
         *
         * @param  string  $name
         * @return bool
         */
        public static function hasMacro($name)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param  string  $method
         * @param  mixed[]   $parameters
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public static function __callStatic($method, $parameters)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param  string  $method
         * @param  mixed[]   $parameters
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public function __call($method, $parameters)
        {
        }
    }
}
namespace WPML\Element\API {
    /**
     * Class PostTranslations
     * @package WPML\Element\API
     * @method static callable|int setAsSource( ...$el_id, ...$language_code ) - Curried :: int → string → void
     * @method static callable|int setAsTranslationOf( ...$el_id, ...$translated_id, ...$language_code )
     * @method static callable|array get( ...$el_id ) - Curried :: int → [object]
     * @method static callable|array|null getInLanguage( ...$el_id, ...$language_code ) - Curried :: int → string → array|null
     * @method static callable|array|null getInCurrentLanguage( ...$el_id ) - Curried :: int → array|null
     * @method static callable|array getIfOriginal( ...$el_id ) - Curried :: int → [object]
     * @method static callable|array getOriginal( ...$element_id ) - Curried :: int → object|null
     * @method static callable|array getOriginalId( ...$element_id ) - Curried :: int → int
     */
    class PostTranslations
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @param callable $fn
         *
         * @return \Closure
         */
        public static function withPostType($fn)
        {
        }
    }
}
namespace WPML {
    class Timer
    {
        public function start($timeOut)
        {
        }
        public function hasTimedOut()
        {
        }
        public function hasNotTimedOut()
        {
        }
    }
}
namespace WPML\Element\API {
    /**
     * @method static callable|string getCodeByName( ...$name ) - Curried :: string->string
     *
     * It returns language code according to the given name in the current display language.
     *
     * eg. 'Französisch' in German will return 'fr'
     *
     * @method static array getActive()
     *
     * It returns an array of the active languages.
     *
     * The returned array is indexed by language code and every element has the following structure:
     * ```
     *  'fr' => [
     *      'code'           => 'fr',
     *      'id'             => 3,
     *      'english_name'   => 'French',
     *      'native_name'    => 'Français',
     *      'major'          => 1,
     *      'default_locale' => 'fr_FR',
     *      'encode_url'     => 0,
     *      'tag'            => 'fr ,
     *      'display_name'   => 'French
     *  ]
     * ```
     * @method static array getSecondaries()
     *
     * It returns an array of the secondary languages.
     *
     * The returned array is indexed by language code and every element has the following structure:
     * ```
     *  'fr' => [
     *      'code'           => 'fr',
     *      'id'             => 3,
     *      'english_name'   => 'French',
     *      'native_name'    => 'Français',
     *      'major'          => 1,
     *      'default_locale' => 'fr_FR',
     *      'encode_url'     => 0,
     *      'tag'            => 'fr ,
     *      'display_name'   => 'French
     *  ]
     * ```
     * @method static array getSecondaryCodes()
     *
     * It returns an array of the secondary language codes.
     *
     * @method static array|callback getLanguageDetails( ...$code ) - Curried :: string->array
     *
     * It returns details of a language.
     *
     * An example output:
     * ```
     * [
     *      'code'           => 'fr',
     *      'id'             => 3,
     *      'english_name'   => 'French',
     *      'native_name'    => 'Français',
     *      'major'          => 1,
     *      'default_locale' => 'fr_FR',
     *      'encode_url'     => 0,
     *      'tag'            => 'fr ,
     *      'display_name'   => 'French
     *  ]
     * ```
     *
     *
     * @method static array getDefault()
     *
     * It returns a default language details.
     *
     * An example output:
     *```
     *[
     *      'code'           => 'fr',
     *      'id'             => 3,
     *      'english_name'   => 'French',
     *      'native_name'    => 'Français',
     *      'major'          => 1,
     *      'default_locale' => 'fr_FR',
     *      'encode_url'     => 0,
     *      'tag'            => 'fr ,
     *      'display_name'   => 'French
     * ]
     *```
     *
     * @method static string getDefaultCode()
     *
     * It returns a default language code.
     *
     * @method static string getCurrentCode()
     *
     * It returns a current language code.
     *
     * @method static callable|string getFlagUrl( ...$code ) - Curried :: string → string
     *
     * Gets the flag url for the given language code.
     *
     * @method static callable|string getFlag( ...$code ) - Curried :: string → [string, bool]
     *
     * Returns flag url and from_template
     *
     * @method static callable|array withFlags( ...$langs ) - Curried :: [code => lang] → [code => lang]
     *
     * Adds the language flag url to the array of languages.
     *
     * @method static array getAll( $lang = false ) string|false → [lang]
     *
     * It returns an array of the all the languages.
     *
     * The returned array is indexed by language code and every element has the following structure:
     * ```
     *  'fr' => [
     *      'code'           => 'fr',
     *      'id'             => 3,
     *      'english_name'   => 'French',
     *      'native_name'    => 'Français',
     *      'major'          => 1,
     *      'default_locale' => 'fr_FR',
     *      'encode_url'     => 0,
     *      'tag'            => 'fr ,
     *      'display_name'   => 'French
     *  ]
     * ```
     *
     * @method static callable|int|false setLanguageTranslation( ...$langCode, ...$displayLangCode, ...$name ) - Curried :: string->string->string->int|false
     *
     * It sets a language translation.
     *
     * @method static callable|int|false setFlag( ...$langCode, ...$flag, ...$fromTemplate ) - Curried :: string->string->bool->int|false
     *
     * It sets a language flag.
     *
     * @method static callable|string getWPLocale( ...$langDetails ) - Curried :: array->string
     *
     * @method static callable|string downloadWPLocale( $locale ) - Curried :: string->string
     *
     * It attempts to download a WP language pack for a specific locale, stores the result in settings.
     */
    class Languages
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const LANGUAGES_MAPPING_OPTION = 'wpml_languages_mapping';
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Curried :: string → bool
         * Determine if the language is Right to Left
         *
         * @param string|null $code
         *
         * @return callable|bool
         */
        public static function isRtl($code = null)
        {
        }
        /**
         * Curried :: [code => lang] → [code => lang]
         *
         * Adds language direction, right to left, to the languages data
         *
         * @param string[] $langs
         *
         * @return callable|mixed[]
         */
        public static function withRtl($langs = null)
        {
        }
        /**
         * Curried :: string -> string|false
         *
         * Returns the language code given a locale
         *
         * @param string|null $locale
         *
         * @return callable|string|false
         */
        public static function localeToCode($locale = null)
        {
        }
        /**
         * @param string $code
         * @param string $english_name
         * @param string $default_locale
         * @param int    $major
         * @param int    $active
         * @param int    $encode_url
         * @param string $tag
         * @param string $country
         *
         * @return bool|int
         */
        public static function add($code, $english_name, $default_locale, $major = 0, $active = 0, $encode_url = 0, $tag = '', $country = null)
        {
        }
        /**
         * @return Just|Nothing
         */
        public static function getUserLanguageCode()
        {
        }
        public static function withBuiltInInfo($languages)
        {
        }
        public static function addBuiltInInfo($language)
        {
        }
        /**
         * It lets you run a function in a specific language.
         *
         * ```php
         *  $result = Languages::whileInLanguage( 'de' )
         *		->invoke( 'my_function' )
         *		->runWith( 1, 2, 'some' );
         * ```
         *
         * @param string $lang
         *
         * @return BeforeAfter
         */
        public static function whileInLanguage($lang)
        {
        }
    }
}
namespace WPML\Records {
    /**
     * Class Translations
     * @package WPML\Records
     *
     * @method static callable|array getByTrid( ...$trid )
     *
     * Returns array of records from wp_icl_translations matching given $trid
     */
    class Translations
    {
        const OLDEST_FIRST = 'ASC';
        const NEWEST_FIRST = 'DESC';
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @param array|null  $order
         * @param string|null $postType
         *
         * @return callable|Collection
         */
        public static function getForPostType(array $order = null, $postType = null)
        {
        }
        /**
         * @param string|null     $lang
         * @param Collection|null $translations
         *
         * @return callable|Collection
         */
        public static function getSourceInLanguage($lang = null, \WPML\Collect\Support\Collection $translations = null)
        {
        }
        public static function getSource(\WPML\Collect\Support\Collection $translations = null)
        {
        }
        public static function getSourceByTrid($trid = null)
        {
        }
    }
}
namespace WPML\Settings\PostType {
    class Automatic
    {
        const GROUP = 'post-type';
        const FROM_CONFIG = 'automatic-config';
        const OVERRIDE = 'automatic-override';
        public static function saveFromConfig(array $config)
        {
        }
        public static function isAutomatic($postType)
        {
        }
        public static function set($postType, $state)
        {
        }
        public static function shouldTranslate($postType)
        {
        }
    }
}
namespace WPML\Settings {
    class LanguageNegotiation
    {
        /**
         * @return bool
         */
        public static function isDomain()
        {
        }
        /**
         * @return bool
         */
        public static function isDir()
        {
        }
        /**
         * @return bool
         */
        public static function isParam()
        {
        }
    }
}
namespace WPML\Element\API {
    class IfOriginalPost
    {
        /**
         * Gets the element details for the translations of the given post id.
         * Returns an empty array if the id is not an original post.
         *
         * element details structure:
         * ```php
         * (object) [
         *  'original' => false,            // bool True if the element is the original, false if a translation
         *  'element_id' => 123,            // int The element id
         *  'source_language_code' => 'en', // string The source language code
         *  'language_code' => 'de',        // string The language of the element
         *  'trid' => 456,                  // int The translation id that links translations to source.
         * ]
         * ```
         *
         * @param int $id The post id. Optional. If missing then returns a callable waiting for the id.
         *
         * @return \WPML\Collect\Support\Collection<mixed>|callable
         */
        public static function getTranslations($id = null)
        {
        }
        /**
         * Get the element ids for the translations of the given post id.
         * Returns an empty array if the id is not an original post.
         *
         * @param int $id The post id. Optional. If missing then returns a callable waiting for the id.
         *
         * @return \WPML\Collect\Support\Collection<mixed>|callable
         */
        public static function getTranslationIds($id = null)
        {
        }
    }
}
namespace WPML\API {
    class PostTypes
    {
        /**
         * @return array  eg. [ 'page', 'post' ]
         */
        public static function getTranslatable()
        {
        }
        /**
         * Get an array of post types where keys are like: 'post', 'page' and so on
         *
         * @return array<string, \WP_Post_Type>
         */
        public static function getTranslatableWithInfo()
        {
        }
        /**
         * @return array  eg. [ 'page', 'post' ]
         */
        public static function getDisplayAsTranslated()
        {
        }
        /**
         * Gets post types that are translatable and excludes ones that are display as translated.
         *
         * @return array  eg. [ 'page', 'post' ]
         */
        public static function getOnlyTranslatable()
        {
        }
        /**
         * Gets post types that are automatically translatable.
         * Attachment post type is excluded.
         *
         * @return array  eg. [ 'page', 'post' ]
         */
        public static function getAutomaticTranslatable()
        {
        }
        public static function withNames($postTypes)
        {
        }
    }
}
namespace WPML\Element\API\Entity {
    class LanguageMapping
    {
        /**
         * @param string $sourceCode
         * @param string $sourceName
         * @param int $targetId
         * @param string $targetCode
         */
        public function __construct($sourceCode = null, $sourceName = null, $targetId = null, $targetCode = null)
        {
        }
        /**
         * @return array
         */
        public function toATEFormat()
        {
        }
        public function __get($name)
        {
        }
        public function __isset($name)
        {
        }
        public function matches($languageCode)
        {
        }
    }
}
namespace WPML {
    class DocPage
    {
        public static function getTranslateAutomatically()
        {
        }
        public static function gettingStartedGuide()
        {
        }
        public static function editorOptions()
        {
        }
        public static function addTranslationServiceForm()
        {
        }
        public static function aboutATE()
        {
        }
    }
}
namespace WPML\FP {
    trait Curryable
    {
        /**
         * The registered string curried methods.
         *
         * @var string[]
         */
        protected static $curried = [];
        /**
         * Register a custom curried function.
         *
         * @param string   $name
         * @param int      $argCount
         * @param callable $fn
         *
         * @return void
         */
        public static function curryN($name, $argCount, callable $fn)
        {
        }
        /**
         * Checks if curried function is registered.
         *
         * @param string $name
         *
         * @return bool
         */
        public static function hasCurry($name)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param string  $method
         * @param mixed[] $parameters
         *
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public static function __callStatic($method, $parameters)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param string  $method
         * @param mixed[] $parameters
         *
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public function __call($method, $parameters)
        {
        }
        /**
         * @param int     $count
         * @param \Closure $fn
         *
         * @return \Closure
         */
        private function curryItCall($count, \Closure $fn)
        {
        }
        /**
         * @param int     $count
         * @param \Closure $fn
         *
         * @return \Closure
         */
        private static function curryItStaticCall($count, \Closure $fn)
        {
        }
    }
}
namespace WPML\Element\API {
    /**
     * Class Post
     * @package WPML\Element\API
     *
     * @method static callable|string getLang( ...$postId ): Curried :: int->string
     */
    class Post
    {
        use \WPML\FP\Curryable;
        public static function init()
        {
        }
    }
    /**
     * Class Translations
     * @package WPML\Element\API
     * @method static callable|int setLanguage( ...$el_id, ...$el_type, ...$trid, ...$language_code, ...$src_language_code, ...$check_duplicates )
     *
     * - Curried :: int → string → int|null → string → string → string|null → bool → bool|int|null|string
     *
     *          Wrapper function for SitePress::set_element_language_details
     *
     * - int         $el_id the element's ID (for terms we use the `term_taxonomy_id`)
     * - string      $el_type
     * - int         $trid
     * - string      $language_code
     * - null|string $src_language_code
     * - bool        $check_duplicates
     *
     * returns bool|int|null|string
     *
     * @method static callable|int setAsSource( ...$el_id, ...$el_type, ...$language_code )
     * @method static callable|int setAsTranslationOf( ...$el_id, ...$el_type, ...$translated_id, ...$language_code )
     * @method static callable|array get( ...$el_id, ...$el_type )
     * @method static callable|array|null getInLanguage( ...$el_id, ...$el_type, ...$language_code )
     * @method static callable|array|null getInCurrentLanguage( ...$el_id, ...$el_type )
     * @method static callable|array getIfOriginal( ...$el_id, ...$el_type )
     * @method static callable|array getOriginal( ...$element_id, ...$element_type )
     * @method static callable|array getOriginalId( ...$element_id, ...$element_type )
     * @method static callable|bool isOriginal( ...$el_id, ...$translations )
     */
    class Translations
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    class TranslationsRepository
    {
        public static function preloadForPosts($posts)
        {
        }
        public static function reset()
        {
        }
        public static function getByTridAndLanguage($trid, $language)
        {
        }
        public static function getByTranslationId($translationId)
        {
        }
    }
}
namespace WPML\API {
    class Settings
    {
        const WPML_DOWNLOADED_LOCALES_KEY = 'wpml_downloaded_locales';
        /**
         * @param string $key
         * @param bool|mixed $default
         *
         * @return bool|mixed
         */
        public static function get($key, $default = false)
        {
        }
        /**
         * @param mixed $default
         * @param string $key
         *
         * @return bool|mixed
         */
        public static function getOr($default, $key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return bool
         */
        public static function set($key, $value)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         *
         * @return bool
         */
        public static function setAndSave($key, $value)
        {
        }
        /**
         * Updates the setting using the sub key and value.
         * Assumes that the setting found by the main key is an array or object
         *
         * @param string $key
         * @param string $subKey
         * @param mixed $value
         *
         * @return bool
         */
        public static function assoc($key, $subKey, $value)
        {
        }
        public static function pathOr($default, $path)
        {
        }
    }
    /**
     * Class Version
     * @package WPML\API
     *
     * @method static string firstInstallation()
     *
     * It returns the version of WPML which has been used during the first installation.
     *
     * @method static callback|bool isHigherThanInstallation( ...$version ) - Curried :: string->bool
     *
     * It compares the specified version with the version which has been used during the first installation.
     *
     * @method static string current()
     *
     * It gets the current WPML version.
     */
    class Version
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    class Sanitize
    {
        /**
         * @param string $value
         *
         * @return false|string
         */
        public static function string($value, $flags = ENT_QUOTES)
        {
        }
        /**
         * @param string $property
         * @param array $arr
         *
         * @return null|false|string
         */
        public static function stringProp($property, $arr, $flags = ENT_QUOTES)
        {
        }
    }
}
namespace WPML\WP {
    class OptionManager
    {
        /**
         * Get a WordPress option that is stored by group.
         *
         * @param string $group
         * @param string $key
         * @param mixed  $default
         *
         * @return mixed
         */
        public function get($group, $key, $default = false)
        {
        }
        /**
         * Save a WordPress option that is stored by group
         * The value is then stored by key in the group.
         *
         * eg. set( 'TM-wizard', 'complete', 'true' ) will create or add to the option WPML(TM-wizard)
         * The dat in the option will then be an array of items stored by key.
         *
         * @param string $group
         * @param string $key
         * @param mixed  $value
         * @param bool   $autoload
         */
        public function set($group, $key, $value, $autoload = true)
        {
        }
        /**
         * Returns all the options that need to be deleted on WPML reset.
         *
         * @param array $options
         *
         * @return array
         */
        public function reset_options($options)
        {
        }
        /**
         * Curried :: string → string → a → void
         * @param string|null $group
         * @param string|null $key
         * @param mixed|null $value
         *
         * @return callable|void
         */
        public static function updateWithoutAutoLoad($group = null, $key = null, $value = null)
        {
        }
        /**
         * Curried :: string → string → a → void
         * @param string|null $group
         * @param string|null $key
         * @param mixed|null $value
         *
         * @return callable|void
         */
        public static function update($group = null, $key = null, $value = null)
        {
        }
        /**
         * Curried :: a → string → string → b
         * @param mixed|null $default
         * @param string|null $group
         * @param string|null $key
         *
         * @return callable|mixed
         */
        public static function getOr($default = null, $group = null, $key = null)
        {
        }
    }
}
namespace WPML\Utilities {
    interface ILock
    {
        public function create($release_timeout = null);
        public function release();
    }
    class Lock implements \WPML\Utilities\ILock
    {
        /** @var string  */
        protected $name;
        /**
         * Lock constructor.
         *
         * @param \wpdb  $wpdb
         * @param string $name
         */
        public function __construct(\wpdb $wpdb, $name)
        {
        }
        public static function whileLocked($lockName, $releaseTimeout, callable $fn)
        {
        }
        /**
         * Creates a lock using WordPress options ( Based on WP class WP_Upgrader ).
         *
         * @param int $release_timeout Optional. The duration in seconds to respect an existing lock.
         *                             Default: 1 hour.
         * @return bool False if a lock couldn't be created or if the lock is still valid. True otherwise.
         */
        public function create($release_timeout = null)
        {
        }
        /**
         * Releases an upgrader lock.
         *
         * @return bool True if the lock was successfully released. False on failure.
         */
        public function release()
        {
        }
    }
}
namespace Psr\Log {
    /**
     * Describes a logger instance.
     *
     * The message MUST be a string or object implementing __toString().
     *
     * The message MAY contain placeholders in the form: {foo} where foo
     * will be replaced by the context data in key "foo".
     *
     * The context array can contain arbitrary data. The only assumption that
     * can be made by implementors is that if an Exception instance is given
     * to produce a stack trace, it MUST be in a key named "exception".
     *
     * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
     * for the full interface specification.
     */
    interface LoggerInterface
    {
        /**
         * System is unusable.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function emergency($message, array $context = array());
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function alert($message, array $context = array());
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function critical($message, array $context = array());
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function error($message, array $context = array());
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function warning($message, array $context = array());
        /**
         * Normal but significant events.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function notice($message, array $context = array());
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function info($message, array $context = array());
        /**
         * Detailed debug information.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function debug($message, array $context = array());
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed   $level
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         *
         * @throws \Psr\Log\InvalidArgumentException
         */
        public function log($level, $message, array $context = array());
    }
}
namespace WPML\Utilities {
    class Logger implements \Psr\Log\LoggerInterface
    {
        /** @inheritDoc */
        public function emergency($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function alert($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function critical($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function error($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function warning($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function notice($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function info($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function debug($message, array $context = [])
        {
        }
        /** @inheritDoc */
        public function log($level, $message, array $context = [])
        {
        }
        /**
         * Interpolates context values into the message placeholders.
         *
         * @param string $message
         * @param array  $context
         *
         * @return string
         */
        protected function interpolate($message, array $context = [])
        {
        }
    }
}
namespace WPML\Media {
    class Option
    {
        const OPTION_KEY = '_wpml_media';
        const DUPLICATE_MEDIA_KEY = '_wpml_media_duplicate';
        const DUPLICATE_FEATURED_KEY = '_wpml_media_featured';
        const SETUP_FINISHED = 'starting_help';
        public static function isSetupFinished()
        {
        }
        public static function setSetupFinished($setupFinished = true)
        {
        }
        /**
         * It gets default setting for new content creation.
         * It determines if media should be translated, duplicated or not.
         *
         * @return array{always_translate_media: bool, duplicate_media: bool, duplicate_featured: bool}
         */
        public static function getNewContentSettings()
        {
        }
        /**
         * @param array{always_translate_media: bool, duplicate_media: bool, duplicate_featured: bool} $settings
         *
         * @return void
         */
        public static function setNewContentSettings(array $settings)
        {
        }
        /**
         * @param int $postId
         * @param bool $useGlobalSettings
         *
         * @return bool|null
         */
        public static function shouldDuplicateMedia($postId, $useGlobalSettings = true)
        {
        }
        /**
         * @param int $postId
         * @param bool $useGlobalSettings
         *
         * @return bool|null
         */
        public static function shouldDuplicateFeatured($postId, $useGlobalSettings = true)
        {
        }
        /**
         * @param int $postId
         * @param bool $flag
         */
        public static function setDuplicateMediaForIndividualPost($postId, $flag)
        {
        }
        /**
         * @param int $postId
         * @param bool $flag
         */
        public static function setDuplicateFeaturedForIndividualPost($postId, $flag)
        {
        }
        /**
         * @param bool $flag
         *
         * @return void
         */
        public static function setTranslateMediaLibraryTexts($flag)
        {
        }
        /**
         * @return bool
         */
        public static function getTranslateMediaLibraryTexts()
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Action_Loader_Factory
    {
        /**
         * @return IWPML_Action|IWPML_Action[]|callable|null
         */
        public function create();
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_AJAX_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Action
    {
        public function add_hooks();
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_CLI_Action extends \IWPML_Action
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_AJAX_Action extends \IWPML_Action
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Frontend_Action extends \IWPML_Action
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_REST_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_DIC_Action extends \IWPML_Action
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_REST_Action extends \IWPML_Action
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Frontend_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Deferred_Action_Loader extends \IWPML_Action_Loader_Factory
    {
        /**
         * @return string
         */
        public function get_load_action();
    }
    /**
     * IWPML_CLI_Action_Loader interface
     *
     * @package WPML\Core
     */
    /**
     * Interface IWPML_CLI_Action_Loader
     *
     * @author OnTheGo Systems
     */
    interface IWPML_CLI_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Backend_Action extends \IWPML_Action
    {
    }
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Backend_Action_Loader extends \IWPML_Action_Loader_Factory
    {
    }
}
namespace WPML\Ajax {
    interface IHandler
    {
        /**
         * @param \WPML\Collect\Support\Collection<mixed> $data
         *
         * @return \WPML\FP\Either
         */
        public function run(\WPML\Collect\Support\Collection $data);
    }
}
namespace WPML\Core\BackgroundTask\Exception {
    class TaskIsNotRunnableException extends \Exception
    {
    }
}
namespace WPML\Core\BackgroundTask\Exception\TaskNotRunnable {
    class TaskIsCompletedException extends \WPML\Core\BackgroundTask\Exception\TaskIsNotRunnableException
    {
    }
    class TaskIsPausedException extends \WPML\Core\BackgroundTask\Exception\TaskIsNotRunnableException
    {
    }
    class ExceededMaxRetriesException extends \WPML\Core\BackgroundTask\Exception\TaskIsNotRunnableException
    {
    }
}
namespace WPML\Core\BackgroundTask\Service {
    /**
     * Class BackgroundTaskService
     *
     * @package WPML\Core
     *
     * Class to add background ajax tasks.
     * Call the `add` function with the class name of the endpoint and any data that the end point requires.
     */
    class BackgroundTaskService
    {
        /**
         * @param BackgroundTaskRepository $backgroundTaskRepository
         * @param PersistBackgroundTask $persistBackgroundTaskCommand
         * @param UpdateBackgroundTask $updateBackgroundTaskCommand
         */
        public function __construct(\WPML\Core\BackgroundTask\Repository\BackgroundTaskRepository $backgroundTaskRepository, \WPML\Core\BackgroundTask\Command\PersistBackgroundTask $persistBackgroundTaskCommand, \WPML\Core\BackgroundTask\Command\UpdateBackgroundTask $updateBackgroundTaskCommand)
        {
        }
        /**
         * @param TaskEndpointInterface $taskEndpoint
         * @param Collection $payload
         *
         * @throws TaskIsNotRunnableException
         * @return BackgroundTask|null
         */
        public function startByTaskId($taskId)
        {
        }
        /**
         * @param TaskEndpointInterface $taskEndpoint
         * @param Collection $payload
         *
         * @return BackgroundTask|null
         */
        public function addOnce(\WPML\Core\BackgroundTask\Model\TaskEndpointInterface $taskEndpoint, \WPML\Collect\Support\Collection $payload)
        {
        }
        /**
         * @param TaskEndpointInterface $taskEndpoint
         * @param Collection $payload
         *
         * @return BackgroundTask|null
         */
        public function add(\WPML\Core\BackgroundTask\Model\TaskEndpointInterface $taskEndpoint, \WPML\Collect\Support\Collection $payload)
        {
        }
    }
}
namespace WPML\Core\BackgroundTask\Command {
    class PersistBackgroundTask
    {
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param $task_type
         * @param $task_status
         * @param $total_count
         * @param $completed_ids
         * @param $payload
         *
         * @return BackgroundTask
         */
        public function run($task_type, $task_status, $total_count, $payload, $completed_ids)
        {
        }
    }
    class UpdateBackgroundTask
    {
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param BackgroundTask $task
         * @param TaskEndpointInterface $taskEndpoint
         * 
         * @return BackgroundTask
         */
        public function startTask(\WPML\Core\BackgroundTask\Model\BackgroundTask $task, \WPML\Core\BackgroundTask\Model\TaskEndpointInterface $taskEndpoint)
        {
        }
        /**
         * @param BackgroundTask $model
         */
        public function runUpdate(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
        /**
         * @param BackgroundTask $model
         */
        public function runStop(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
        /**
         * @param BackgroundTask $model
         */
        public function saveStatusPaused(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
        /**
         * @param BackgroundTask $model
         */
        public function saveStatusResumed(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
        /**
         * @param BackgroundTask $model
         */
        public function saveStatusRestart(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
        /**
         * @param BackgroundTask $model
         * @return BackgroundTask
         */
        public function runRetry(\WPML\Core\BackgroundTask\Model\BackgroundTask $model)
        {
        }
    }
}
namespace WPML\Core\BackgroundTask\Model {
    interface TaskEndpointInterface
    {
        /** @return bool */
        public function isDisplayed();
        /** @return string */
        public function getType();
        /** @return int */
        public function getMaxRetries();
        /** @return int */
        public function getLockTime();
        /**
         * @param Collection $data
         * @return int
         */
        public function getTotalRecords(\WPML\Collect\Support\Collection $data);
        /**
         * @param Collection $data
         * @return int
         */
        public function getDescription(\WPML\Collect\Support\Collection $data);
        /**
         * @param Collection $data
         * @return callable|Right|Left
         */
        public function run(\WPML\Collect\Support\Collection $data);
    }
    /**
     * Class BackgroundTask
     *
     * @author OnTheGoSystems
     */
    class BackgroundTask
    {
        const TABLE_NAME = 'icl_background_task';
        const ITEMS_COUNT_IN_TASK = 10;
        const TASK_TYPE_DEFAULT = 'Default';
        const TASK_TYPE_PROCESS_NEW_TRANSLATABLE_FIELDS = 'ProcessNewTranslatableFields';
        const TASK_STATUS_PENDING = 0;
        const TASK_STATUS_INPROGRESS = 1;
        const TASK_STATUS_PAUSED = 2;
        const TASK_STATUS_COMPLETED = 3;
        //const EXPIRE_AFTER_SECONDS = 2 * MINUTE_IN_SECONDS;
        const EXPIRE_AFTER_SECONDS = 3600;
        const MAX_RETRY_COUNT = 2;
        /**
         * @return array
         */
        public function serialize()
        {
        }
        public function finish()
        {
        }
        /**
         * @param int|string|null $taskId
         */
        public function setTaskId($taskId)
        {
        }
        /**
         * @return int|null
         */
        public function getTaskId()
        {
        }
        /**
         * @param string|null
         */
        public function setTaskType($taskType)
        {
        }
        /**
         * @return string
         */
        public function getTaskType()
        {
        }
        /**
         * @param int|null $status
         */
        public function setStatus($status)
        {
        }
        /**
         * @return int
         */
        public function getStatus()
        {
        }
        /**
         * @return bool
         */
        public function isStatusPending()
        {
        }
        /**
         * @return bool
         */
        public function isStatusInProgress()
        {
        }
        /**
         * @return bool
         */
        public function isStatusPaused()
        {
        }
        /**
         * @return bool
         */
        public function isStatusCompleted()
        {
        }
        /**
         * @return string
         */
        public function getStatusName()
        {
        }
        /**
         * @param \DateTime|null $startingDate
         */
        public function setStartingDate($startingDate)
        {
        }
        /**
         * @return \DateTime|null
         */
        public function getStartingDate()
        {
        }
        /**
         * @return bool
         */
        public function hasStartingDate()
        {
        }
        /**
         * @param int|string|null $totalCount
         */
        public function setTotalCount($totalCount)
        {
        }
        /**
         * @return int
         */
        public function getTotalCount()
        {
        }
        /**
         * @param int $completed_count
         */
        public function addCompletedCount($completed_count)
        {
        }
        /**
         * @return int
         */
        public function getCompletedCount()
        {
        }
        /**
         * @param int|string|null $completedCount
         */
        public function setCompletedCount($completedCount)
        {
        }
        /**
         * @param array $completed_ids
         */
        public function addCompletedIds($completed_ids)
        {
        }
        /**
         * @return array|null
         */
        public function getCompletedIds()
        {
        }
        /**
         * @param array|null $completedIds
         */
        public function setCompletedIds($completedIds)
        {
        }
        /**
         * @param bool
         */
        public function hasCompletedIds()
        {
        }
        /**
         * @param array|null $payload
         */
        public function setPayload($payload)
        {
        }
        /**
         * @return array
         */
        public function getPayload()
        {
        }
        /**
         * @param int|string|null $retryCount
         */
        public function setRetryCount($retryCount)
        {
        }
        /**
         * @return int
         */
        public function getRetryCount()
        {
        }
    }
}
namespace WPML\Core\BackgroundTask\Repository {
    class BackgroundTaskRepository
    {
        /** @var \wpdb $wpdb */
        protected $wpdb;
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        /**
         * @param int $task_id
         *
         * @return BackgroundTask
         */
        public function getByTaskId($task_id)
        {
        }
        /**
         * @param string $task_type
         *
         * @return BackgroundTask|null
         */
        public function getLastIncompletedByType($task_type)
        {
        }
        /**
         * @param array $statuses
         * 
         * @return BackgroundTask[]
         */
        public function getAllByTaskStatus(array $statuses)
        {
        }
        /**
         * @return BackgroundTask[]
         */
        public function getAllRunnableTasks()
        {
        }
        /**
         * @return int
         */
        public function getCountRunnableTasks()
        {
        }
        /**
         * @param array $data
         *
         * @return BackgroundTask
         */
        public function createFromQueryResult(array $data)
        {
        }
    }
}
namespace WPML {
    /**
     * Class UIPage
     * @package WPML
     *
     * @method static callback|bool isLanguages( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTranslationManagement( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTMDashboard( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTMBasket( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTMJobs( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTMTranslators( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTMATE( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTroubleshooting( ...$get ) - Curried :: array → bool
     * @method static callback|bool isTranslationQueue( ...$get ) - Curried :: array → bool
     * @method static callback|bool isPage( ...$page, ...$get ) - Curried :: string → array → bool
     * @method static string getLanguages()
     * @method static string getTroubleshooting()
     * @method static string getTM()
     * @method static string getTMDashboard()
     * @method static string getTMBasket()
     * @method static string getTMATE()
     * @method static string getTMTranslators()
     * @method static string getTMJobs()
     * @method static string getTranslationQueue()
     */
    class UIPage
    {
        const TM_PAGE = 'tm/menu/main.php';
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
        public static function isSettings(array $get = null)
        {
        }
        /**
         * @param array|null $get
         *
         * @return bool
         */
        public static function isMainSettingsTab(array $get = null)
        {
        }
        /**
         * @param array|null $get
         *
         * @return bool
         */
        public static function isNotificationSettingsTab(array $get = null)
        {
        }
        /**
         * @param array|null $get
         *
         * @return bool
         */
        public static function isCustomXMLConfigSettingsTab(array $get = null)
        {
        }
        /**
         * @param string|null $tab
         * @param array|null $get
         *
         * @return bool
         */
        public static function isSettingTab($tab = null, array $get = null)
        {
        }
        public static function getSettings()
        {
        }
    }
}
namespace WPML\LIB\WP {
    /**
     * Class Cache
     * @package WPML\LIB\WP
     * @method static callable memorize( ...$group, ...$expire, ...$fn ) :: string → int -> callable → callable
     * @method static callable memorizeWithCheck( ...$group, ...$checkingFn, ...$expire, ...$fn ) :: string → callable → int -> callable → callable
     * @method static callable|bool set( ...$group, ...$key, ...$expire, ...$value ) :: string → string → mixed → int->bool
     * @method static callable|Just|Nothing get( ...$group, ...$key ) :: string → string → Nothing | Just( mixed )
     */
    class Cache
    {
        const KEYS = 'WPML_WP_Cache__group_keys';
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @param string $group
         * @param string $key
         *
         * @return \WPML\FP\Just|\WPML\FP\Nothing
         */
        public static function getInternal($group, $key)
        {
        }
        /**
         * @param string $group
         *
         * @return void
         */
        public static function flushGroup($group)
        {
        }
        /**
         * Clear cache for a memoized function. The function must be memoized using `memorize` or `memorizeWithCheck`.
         * The clearMemoizedFunction must be called with the same arguments as memoized function.
         *
         * For example if you have a function:
         * $fn = function( $a, $b ) { return $a + $b; };
         * $memoizedFn = Cache::memorize( 'group', 3600, $fn );
         * $memoizedFn( 1, 2 );
         *
         * Then you can clear the cache for this function by calling:
         * Cache::clearMemoizedFunction( 'group', 1, 2 );
         *
         * @param string $group
         * @param ...$functionArgs
         *
         * @return void
         */
        public static function clearMemoizedFunction($group, ...$functionArgs)
        {
        }
        /**
         * Delete a cached value using the key and group.
         *
         *
         * @param string $group
         * @param string $key
         *
         * @return void
         */
        public static function delete($group, $key)
        {
        }
        /**
         * We store the list of keys belonging to a group in a separate key in order to be able to flush the group
         * as many engines like Redis does not support `flush_group` function ( which was introduced in WP 6.1 ).
         *
         * @return array
         */
        public static function getKeysInGroup($group)
        {
        }
        /**
         * It is internal function used to build a key for a function arguments. Do not use it directly.
         *
         * @param array $args
         *
         * @return string
         */
        public static function _buildKeyForFunctionArguments(array $args)
        {
        }
    }
    class Hooks
    {
        /**
         * @param string|string[] $action
         * @param int             $priority
         * @param int             $accepted_args
         *
         * @return \WPML\FP\Promise
         */
        public static function onAction($action, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * @param string|string[] $filter
         * @param int             $priority
         * @param int             $accepted_args
         *
         * @return \WPML\FP\Promise
         */
        public static function onFilter($filter, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * @param callable        $fn
         * @param string|string[] $actionOrFilter
         * @param int             $priority
         * @param int             $accepted_args
         *
         * @return \WPML\FP\Promise
         */
        public static function onHook(callable $fn, $actionOrFilter, $priority = 10, $accepted_args = 1)
        {
        }
        public static function callWithFilter($fn, $name, $filterFn, $priority = 10, $acceptedArgs = 1)
        {
        }
        public static function getArgs(array $argsLabels)
        {
        }
    }
    class Roles
    {
        public static function hasCap($cap = null, $role = null)
        {
        }
    }
    /**
     * @method static callable|Either post( ...$url, ...$args ) - Curried :: string → array → Left( WP_Error ) | Right(string)
     */
    class Http
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    class WPDB
    {
        /**
         * It prevents MySQL errors in debug.log.
         *
         * @param callable $func
         *
         * @return mixed
         */
        public static function withoutError(callable $func)
        {
        }
    }
    /**
     * @method static callable|bool hasBlock( ...$string ) - Curried :: string → bool
     * @method static callable|bool doesNotHaveBlock( ...$string ) - Curried :: string → bool
     * @method static callable|bool stripBlockData( ...$string ) - Curried :: string → string
     */
    class Gutenberg
    {
        use \WPML\FP\Curryable;
        const GUTENBERG_OPENING_START = '<!-- wp:';
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * Class Post
     * @package WPML\LIB\WP
     * @method static callable|Either getTerms( ...$postId, ...$taxonomy )  - Curried:: int → string → Either false|WP_Error [WP_Term]
     * @method static callable|mixed getMetaSingle( ...$postId, ...$key ) - Curried :: int → string → mixed
     * @method static callable|int|bool updateMeta( ...$postId, ...$key, ...$value ) - Curried :: int → string → mixed → int|bool
     * @method static callable|bool deleteMeta( ...$postId, ...$key ) - Curried :: int → string → bool
     * @method static callable|string|false getType( ...$postId ) - Curried :: int → string|bool
     * @method static callable|\WP_Post|null get( ...$postId ) - Curried :: int → \WP_Post|null
     * @method static callable|string|false getStatus( ...$postId ) - Curried :: int → string|bool
     * @method static callable|int update(...$data) - Curried :: array -> int
     * @method static callable|int insert(...$data) - Curried :: array -> int
     * @method static callable|int setStatus(...$id, ...$status) - Curried :: int -> string -> int
     * @method static callable|int setStatusWithoutFilters(...$id, ...$status) - Curried :: int -> string -> int
     * @method static callable|\WP_Post|false|null delete(...$id) - Curried :: int -> \WP_Post|false|null
     * @method static callable|\WP_Post|false|null trash(...$id) - Curried :: int -> \WP_Post|false|null
     */
    class Post
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|mixed get( ...$name ) - Curried :: string → mixed
     * @method static callable|mixed getRaw( ...$name ) - Curried :: string → null|string
     * @method static callable|mixed getOr( ...$name, ...$default ) - Curried :: string → mixed → mixed
     * @method static callable|mixed attemptSerializedRecovery( ...$name, ...$default ) - Curried :: string → mixed → mixed
     * @method static callable|bool update( ...$name, ...$value ) - Curried :: string → mixed → bool
     * @method static callable|bool updateWithoutAutoLoad( ...$name, ...$value ) - Curried :: string → mixed → bool
     * @method static callable|bool delete( ...$name ) - Curried :: string → bool
     */
    class Option
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * This function is used to get an option value from the database
         * attempting to restore it if the option is serialized but returns false.
         *
         * Also, this method will return the $default value when the option is corrupted.
         *
         * @method static callable|mixed getOrAttemptRecovery( ...$name, ...$default ) - Curried :: string → mixed → mixed
         */
        public static function getOrAttemptRecovery($name = null, $default = null)
        {
        }
    }
    /**
     * Class PostType
     * @package WPML\LIB\WP
     * @method static callable|int getPublishedCount( ...$postType ) - Curried :: string → int
     * @method static callable|Just|Nothing getObject( ...$postType ) - Curried :: string → Maybe( WP_Post_Type )|Nothing
     * @method static callable|Just|Nothing getPluralName( ...$postType ) - Curried :: string → Maybe(string) |Nothing
     * @method static callable|Just|Nothing getSingularName( ...$postType ) - Curried :: string → Maybe(string) |Nothing
     */
    class PostType
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * Class Url
     * @package WPML\LIB\WP
     *
     * @method static callable|mixed isAdmin( ...$url ) - Curried :: string → bool
     * @method static callable|mixed isLogin( ...$url ) - Curried :: string → bool
     * @method static callable|mixed isContentDirectory( ...$url ) - Curried :: string → bool
     */
    class Url
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return bool
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|mixed get( ...$name ) - Curried :: string → mixed
     * @method static callable|mixed getOr( ...$name, ...$default ) - Curried :: string → mixed → mixed
     * @method static callable|mixed set( ...$name, ...$value, ...$expiration ) - Curried :: string → mixed → int -> mixed
     * @method static callable|mixed delete( ...$name ) - Curried :: string → mxied
     */
    class Transient
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
    /**
     * @method static callable|Either verify(string ...$action, Collection ...$data) - Curried :: string -> Collection -> Left('Nonce error') | Right(Collection)
     * @method static callable|Either verifyEndPoint(Collection ...$data) - Curried :: Collection -> Left('Nonce error') | Right(Collection)
     * @method static callable|string create(string ...$action ) - Curried :: string -> string
     */
    class Nonce
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
}
namespace WPML\LIB\WP\App {
    class Resources
    {
        /**
         * Enqueue a JavaScript application file from the dist directory.
         *
         * @param string        $app
         * @param string        $pluginBaseUrl
         * @param string        $pluginBasePath
         * @param string        $version
         * @param null|string   $domain
         * @param null|string[] $localize
         *
         * @return void
         */
        public static function enqueue($app, $pluginBaseUrl, $pluginBasePath, $version, $domain = null, $localize = null)
        {
        }
        /**
         * Enqueue a JavaScript application file from the dist directory, with dependencies.
         *
         * @param string        $app
         * @param string        $pluginBaseUrl
         * @param string        $pluginBasePath
         * @param string        $version
         * @param null|string   $domain
         * @param null|string[] $localize
         * @param null|string[] $dependencies
         *
         * @return void
         */
        public static function enqueueWithDeps($app, $pluginBaseUrl, $pluginBasePath, $version, $domain = null, $localize = null, $dependencies = [])
        {
        }
    }
}
namespace WPML\LIB\WP {
    class WordPress
    {
        /**
         * Compare the WordPress version.
         * @param string $operator
         * @param string $version
         *
         * @return bool
         */
        public static function versionCompare($operator, $version)
        {
        }
        /**
         * @param mixed $var
         *
         * @return \WPML\FP\Either|callable
         */
        public static function handleError($var = null)
        {
        }
    }
    class Attachment
    {
        /**
         * @param string $url
         *
         * @return int|null The found post ID, or null on failure.
         */
        public static function idFromUrl($url)
        {
        }
        /**
         * @param string $url
         *
         * @return int The found post ID, or 0 on failure.
         */
        public static function idByGuid($url)
        {
        }
    }
    class User
    {
        const CAP_MANAGE_TRANSLATIONS = 'manage_translations';
        const CAP_MANAGE_OPTIONS = 'manage_options';
        const CAP_ADMINISTRATOR = 'administrator';
        const CAP_TRANSLATE = 'translate';
        const CAP_MANAGE_TRANSLATION_MANAGEMENT = 'wpml_manage_translation_management';
        /**
         * @param int|WP_User $user
         * @param string      $capability
         *
         * @return bool
         */
        public static function userCan($user, $capability)
        {
        }
        /**
         * @param string $capability
         *
         * @return bool
         */
        public static function currentUserCan($capability)
        {
        }
        /**
         * @return int
         */
        public static function getCurrentId()
        {
        }
        /**
         * @return \WP_User|null
         */
        public static function getCurrent()
        {
        }
        /**
         * Curried function to update the user meta.
         *
         * @param int    $userId
         * @param string $metaKey
         * @param mixed  $metaValue
         *
         * @return callable|int|bool
         */
        public static function updateMeta($userId = null, $metaKey = null, $metaValue = null)
        {
        }
        /**
         * Curried function to get the user meta
         *
         * @param int    $userId
         * @param string $metaKey
         *
         * @return callable|mixed
         */
        public static function getMetaSingle($userId = null, $metaKey = null)
        {
        }
        /**
         * Curried function to get the user meta
         *
         * @param int    $userId
         * @param string $metaKey
         *
         * @return callable|bool
         */
        public static function deleteMeta($userId = null, $metaKey = null)
        {
        }
        /**
         * @param int|null $userId
         *
         * @return callable|\WP_User
         */
        public static function get($userId = null)
        {
        }
        /**
         * @param array|null $data
         *
         * @return callable|int|\WP_Error
         */
        public static function insert($data = null)
        {
        }
        /**
         * @param int|null $userId
         *
         * @return callable|int
         */
        public static function notifyNew($userId = null)
        {
        }
        /**
         * Add the avatar to a user.
         *
         * @param object|\WP_User $user
         *
         * @return callable|object
         */
        public static function withAvatar($user = null)
        {
        }
        /**
         * Add the edit link to a user.
         *
         * @param object|\WP_User $user
         *
         * @return callable|object
         */
        public static function withEditLink($user = null)
        {
        }
        /**
         * Checks if the given user has the requested capability.
         * The current user is used if no user is defined.
         *
         * @param string $capability Capability to check for.
         * @param ?\WP_User $user User to check. Using current user if not defined.
         */
        public static function hasCap($capabilitiy, \WP_User $user = null)
        {
        }
        /**
         * Check if user can manage translations (Translation Manager).
         * Alias for self::hasCap( User::CAP_MANAGE_TRANSLATIONS ).
         *
         * @param ?\WP_User $user User to check. Using current user if not defined.
         */
        public static function canManageTranslations(\WP_User $user = null)
        {
        }
        /**
         * Check if user can manage options (Administrator).
         * Alias for self::hasCap( User::CAP_MANAGE_OPTIONS ).
         *
         * @param ?\WP_User $user User to check. Using current user if not defined.
         */
        public static function canManageOptions(\WP_User $user = null)
        {
        }
        /**
         * @param \WP_User|null $user User to check. Using current user if not defined.
         *
         * @return bool
         */
        public static function isAdministrator(\WP_User $user = null)
        {
        }
    }
}
namespace WPML\Collect\Support {
    class Arr
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * Determine whether the given value is array accessible.
         *
         * @param  mixed  $value
         * @return bool
         */
        public static function accessible($value)
        {
        }
        /**
         * Add an element to an array using "dot" notation if it doesn't exist.
         *
         * @param  mixed[]   $array
         * @param  string  $key
         * @param  mixed   $value
         * @return mixed[]
         */
        public static function add($array, $key, $value)
        {
        }
        /**
         * Collapse an array of arrays into a single array.
         *
         * @param  mixed[]  $array
         * @return mixed[]
         */
        public static function collapse($array)
        {
        }
        /**
         * Divide an array into two arrays. One with keys and the other with values.
         *
         * @param  mixed[]  $array
         * @return mixed[]
         */
        public static function divide($array)
        {
        }
        /**
         * Flatten a multi-dimensional associative array with dots.
         *
         * @param  mixed[]   $array
         * @param  string  $prepend
         * @return mixed[]
         */
        public static function dot($array, $prepend = '')
        {
        }
        /**
         * Get all of the given array except for a specified array of items.
         *
         * @param  mixed[]  $array
         * @param  mixed[]|string  $keys
         * @return mixed[]
         */
        public static function except($array, $keys)
        {
        }
        /**
         * Determine if the given key exists in the provided array.
         *
         * @param  \ArrayAccess<mixed>|mixed[]  $array
         * @param  string|int  $key
         * @return bool
         */
        public static function exists($array, $key)
        {
        }
        /**
         * Return the first element in an array passing a given truth test.
         *
         * @param  mixed[]  $array
         * @param  callable|null  $callback
         * @param  mixed  $default
         * @return mixed
         */
        public static function first($array, callable $callback = null, $default = null)
        {
        }
        /**
         * Return the last element in an array passing a given truth test.
         *
         * @param  mixed[]  $array
         * @param  callable|null  $callback
         * @param  mixed  $default
         * @return mixed
         */
        public static function last($array, callable $callback = null, $default = null)
        {
        }
        /**
         * Flatten a multi-dimensional array into a single level.
         *
         * @param  mixed[]  $array
         * @param  int  $depth
         * @return array
         */
        public static function flatten($array, $depth = INF)
        {
        }
        /**
         * Remove one or many array items from a given array using "dot" notation.
         *
         * @param  mixed[]  $array
         * @param  mixed[]|string  $keys
         * @return void
         */
        public static function forget(&$array, $keys)
        {
        }
        /**
         * Get an item from an array using "dot" notation.
         *
         * @param  \ArrayAccess<mixed>|mixed[]  $array
         * @param  string  $key
         * @param  mixed   $default
         * @return mixed
         */
        public static function get($array, $key, $default = null)
        {
        }
        /**
         * Check if an item or items exist in an array using "dot" notation.
         *
         * @param  \ArrayAccess<mixed>|mixed[]  $array
         * @param  string|mixed[]  $keys
         * @return bool
         */
        public static function has($array, $keys)
        {
        }
        /**
         * Determines if an array is associative.
         *
         * An array is "associative" if it doesn't have sequential numerical keys beginning with zero.
         *
         * @param  mixed[]  $array
         * @return bool
         */
        public static function isAssoc(array $array)
        {
        }
        /**
         * Get a subset of the items from the given array.
         *
         * @param  mixed[]  $array
         * @param  mixed[]|string  $keys
         * @return array
         */
        public static function only($array, $keys)
        {
        }
        /**
         * Pluck an array of values from an array.
         *
         * @param  mixed[]  $array
         * @param  string|mixed[]  $value
         * @param  string|mixed[]|null  $key
         * @return mixed[]
         */
        public static function pluck($array, $value, $key = null)
        {
        }
        /**
         * Explode the "value" and "key" arguments passed to "pluck".
         *
         * @param  string|mixed[]  $value
         * @param  string|mixed[]|null  $key
         * @return mixed[]
         */
        protected static function explodePluckParameters($value, $key)
        {
        }
        /**
         * Push an item onto the beginning of an array.
         *
         * @param  mixed[]  $array
         * @param  mixed  $value
         * @param  mixed  $key
         * @return mixed[]
         */
        public static function prepend($array, $value, $key = null)
        {
        }
        /**
         * Get a value from the array, and remove it.
         *
         * @param  mixed[]   $array
         * @param  string  $key
         * @param  mixed   $default
         * @return mixed
         */
        public static function pull(&$array, $key, $default = null)
        {
        }
        /**
         * Set an array item to a given value using "dot" notation.
         *
         * If no key is given to the method, the entire array will be replaced.
         *
         * @param  mixed[]   $array
         * @param  string  $key
         * @param  mixed   $value
         * @return mixed[]
         */
        public static function set(&$array, $key, $value)
        {
        }
        /**
         * Sort the array using the given callback or "dot" notation.
         *
         * @param  mixed[]  $array
         * @param  callable|string  $callback
         * @return mixed[]
         */
        public static function sort($array, $callback)
        {
        }
        /**
         * Recursively sort an array by keys and values.
         *
         * @param  mixed[]  $array
         * @return mixed[]
         */
        public static function sortRecursive($array)
        {
        }
        /**
         * Filter the array using the given callback.
         *
         * @param  mixed[]  $array
         * @param  callable  $callback
         * @return mixed[]
         */
        public static function where($array, callable $callback)
        {
        }
        /**
         * @param mixed ...$arrays
         *
         * @return mixed[]|mixed[mixed]
         */
        public static function crossJoin(...$arrays)
        {
        }
    }
}
namespace WPML\Collect\Contracts\Support {
    interface Arrayable
    {
        /**
         * Get the instance as an array.
         *
         * @return array
         */
        public function toArray();
    }
    interface Jsonable
    {
        /**
         * Convert the object to its JSON representation.
         *
         * @param  int  $options
         * @return string
         */
        public function toJson($options = 0);
    }
}
namespace WPML\Collect\Support {
    class Collection implements \ArrayAccess, \WPML\Collect\Contracts\Support\Arrayable, \Countable, \IteratorAggregate, \WPML\Collect\Contracts\Support\Jsonable, \JsonSerializable
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * The items contained in the collection.
         *
         * @var mixed[]
         */
        protected $items = [];
        /**
         * Create a new collection.
         *
         * @param  mixed  $items
         * @return void
         */
        public function __construct($items = [])
        {
        }
        /**
         * Create a new collection instance if the value isn't one already.
         *
         * @param  mixed[]  $items
         * @return static
         */
        public static function make($items = [])
        {
        }
        /**
         * Get all of the items in the collection.
         *
         * @return mixed[]
         */
        public function all()
        {
        }
        /**
         * Get the average value of a given key.
         *
         * @param  callable|string|null  $callback
         * @return float|void
         */
        public function avg($callback = null)
        {
        }
        /**
         * Alias for the "avg" method.
         *
         * @param  callable|string|null  $callback
         * @return float|void
         */
        public function average($callback = null)
        {
        }
        /**
         * Get the median of a given key.
         *
         * @param  null $key
         * @return float|void
         */
        public function median($key = null)
        {
        }
        /**
         * Get the mode of a given key.
         *
         * @param  null $key
         * @return mixed[]|void
         */
        public function mode($key = null)
        {
        }
        /**
         * Collapse the collection of items into a single array.
         *
         * @return static
         */
        public function collapse()
        {
        }
        /**
         * Determine if an item exists in the collection.
         *
         * @param  mixed  $key
         * @param  mixed  $value
         * @return bool
         */
        public function contains($key, $value = null)
        {
        }
        /**
         * Determine if an item exists in the collection using strict comparison.
         *
         * @param  mixed  $key
         * @param  mixed  $value
         * @return bool
         */
        public function containsStrict($key, $value = null)
        {
        }
        /**
         * Get the items in the collection that are not present in the given items.
         *
         * @param  mixed  $items
         * @return static
         */
        public function diff($items)
        {
        }
        /**
         * Get the items in the collection whose keys are not present in the given items.
         *
         * @param  mixed  $items
         * @return static
         */
        public function diffKeys($items)
        {
        }
        /**
         * Execute a callback over each item.
         *
         * @param  callable  $callback
         * @return $this
         */
        public function each(callable $callback)
        {
        }
        /**
         * Create a new collection consisting of every n-th element.
         *
         * @param  int  $step
         * @param  int  $offset
         * @return static
         */
        public function every($step, $offset = 0)
        {
        }
        /**
         * Get all items except for those with the specified keys.
         *
         * @param  mixed  $keys
         * @return static
         */
        public function except($keys)
        {
        }
        /**
         * Run a filter over each of the items.
         *
         * @param  callable|null  $callback
         * @return static
         */
        public function filter(callable $callback = null)
        {
        }
        /**
         * Filter items by the given key value pair.
         *
         * @param  string  $key
         * @param  mixed  $operator
         * @param  mixed  $value
         * @return static
         */
        public function where($key, $operator, $value = null)
        {
        }
        /**
         * Get an operator checker callback.
         *
         * @param  string  $key
         * @param  string  $operator
         * @param  mixed  $value
         * @return \Closure
         */
        protected function operatorForWhere($key, $operator, $value)
        {
        }
        /**
         * Filter items by the given key value pair using strict comparison.
         *
         * @param  string  $key
         * @param  mixed  $value
         * @return static
         */
        public function whereStrict($key, $value)
        {
        }
        /**
         * Filter items by the given key value pair.
         *
         * @param  string  $key
         * @param  mixed  $values
         * @param  bool  $strict
         * @return static
         */
        public function whereIn($key, $values, $strict = false)
        {
        }
        /**
         * Filter items by the given key value pair using strict comparison.
         *
         * @param  string  $key
         * @param  mixed  $values
         * @return static
         */
        public function whereInStrict($key, $values)
        {
        }
        /**
         * Get the first item from the collection.
         *
         * @param  callable|null  $callback
         * @param  mixed  $default
         * @return mixed
         */
        public function first(callable $callback = null, $default = null)
        {
        }
        /**
         * Get a flattened array of the items in the collection.
         *
         * @param  int  $depth
         * @return static
         */
        public function flatten($depth = INF)
        {
        }
        /**
         * Flip the items in the collection.
         *
         * @return static
         */
        public function flip()
        {
        }
        /**
         * Remove an item from the collection by key.
         *
         * @param  string|array  $keys
         * @return $this
         */
        public function forget($keys)
        {
        }
        /**
         * Get an item from the collection by key.
         *
         * @param  mixed  $key
         * @param  mixed  $default
         * @return mixed
         */
        public function get($key, $default = null)
        {
        }
        /**
         * Group an associative array by a field or using a callback.
         *
         * @param  callable|string  $groupBy
         * @param  bool  $preserveKeys
         * @return static
         */
        public function groupBy($groupBy, $preserveKeys = false)
        {
        }
        /**
         * Key an associative array by a field or using a callback.
         *
         * @param  callable|string  $keyBy
         * @return static
         */
        public function keyBy($keyBy)
        {
        }
        /**
         * Determine if an item exists in the collection by key.
         *
         * @param  mixed  $key
         * @return bool
         */
        public function has($key)
        {
        }
        /**
         * Concatenate values of a given key as a string.
         *
         * @param  string  $value
         * @param  string  $glue
         * @return string
         */
        public function implode($value, $glue = null)
        {
        }
        /**
         * Intersect the collection with the given items.
         *
         * @param  mixed  $items
         * @return static
         */
        public function intersect($items)
        {
        }
        /**
         * Determine if the collection is empty or not.
         *
         * @return bool
         */
        public function isEmpty()
        {
        }
        /**
         * Determine if the given value is callable, but not a string.
         *
         * @param  mixed  $value
         * @return bool
         */
        protected function useAsCallable($value)
        {
        }
        /**
         * Get the keys of the collection items.
         *
         * @return static
         */
        public function keys()
        {
        }
        /**
         * Get the last item from the collection.
         *
         * @param  callable|null  $callback
         * @param  mixed  $default
         * @return mixed
         */
        public function last(callable $callback = null, $default = null)
        {
        }
        /**
         * Get the values of a given key.
         *
         * @param  string  $value
         * @param  string|null  $key
         * @return static
         */
        public function pluck($value, $key = null)
        {
        }
        /**
         * Run a map over each of the items.
         *
         * @param  callable  $callback
         * @return static
         */
        public function map(callable $callback)
        {
        }
        /**
         * Run an associative map over each of the items.
         *
         * The callback should return an associative array with a single key/value pair.
         *
         * @param  callable  $callback
         * @return static
         */
        public function mapWithKeys(callable $callback)
        {
        }
        /**
         * Map a collection and flatten the result by a single level.
         *
         * @param  callable  $callback
         * @return static
         */
        public function flatMap(callable $callback)
        {
        }
        /**
         * Get the max value of a given key.
         *
         * @param  callable|string|null  $callback
         * @return mixed
         */
        public function max($callback = null)
        {
        }
        /**
         * Merge the collection with the given items.
         *
         * @param  mixed  $items
         * @return static
         */
        public function merge($items)
        {
        }
        /**
         * Create a collection by using this collection for keys and another for its values.
         *
         * @param  mixed  $values
         * @return static
         */
        public function combine($values)
        {
        }
        /**
         * Union the collection with the given items.
         *
         * @param  mixed  $items
         * @return static
         */
        public function union($items)
        {
        }
        /**
         * Get the min value of a given key.
         *
         * @param  callable|string|null  $callback
         * @return mixed
         */
        public function min($callback = null)
        {
        }
        /**
         * Get the items with the specified keys.
         *
         * @param  mixed  $keys
         * @return static
         */
        public function only($keys)
        {
        }
        /**
         * "Paginate" the collection by slicing it into a smaller collection.
         *
         * @param  int  $page
         * @param  int  $perPage
         * @return static
         */
        public function forPage($page, $perPage)
        {
        }
        /**
         * Partition the collection into two arrays using the given callback or key.
         *
         * @param  callable|string  $key
         * @param  mixed  $operator
         * @param  mixed  $value
         * @return static
         */
        public function partition($key, $operator = null, $value = null)
        {
        }
        /**
         * Pass the collection to the given callback and return the result.
         *
         * @param  callable $callback
         * @return mixed
         */
        public function pipe(callable $callback)
        {
        }
        /**
         * Get and remove the last item from the collection.
         *
         * @return mixed
         */
        public function pop()
        {
        }
        /**
         * Push an item onto the beginning of the collection.
         *
         * @param  mixed  $value
         * @param  mixed  $key
         * @return $this
         */
        public function prepend($value, $key = null)
        {
        }
        /**
         * Push an item onto the end of the collection.
         *
         * @param  mixed  $value
         * @return $this
         */
        public function push($value)
        {
        }
        /**
         * Get and remove an item from the collection.
         *
         * @param  mixed  $key
         * @param  mixed  $default
         * @return mixed
         */
        public function pull($key, $default = null)
        {
        }
        /**
         * Put an item in the collection by key.
         *
         * @param  mixed  $key
         * @param  mixed  $value
         * @return $this
         */
        public function put($key, $value)
        {
        }
        /**
         * Get one or more items randomly from the collection.
         *
         * @param  int  $amount
         * @return mixed
         *
         * @throws \InvalidArgumentException
         */
        public function random($amount = 1)
        {
        }
        /**
         * Reduce the collection to a single value.
         *
         * @param  callable  $callback
         * @param  mixed     $initial
         * @return mixed
         */
        public function reduce(callable $callback, $initial = null)
        {
        }
        /**
         * Create a collection of all elements that do not pass a given truth test.
         *
         * @param  callable|mixed  $callback
         * @return static
         */
        public function reject($callback)
        {
        }
        /**
         * Reverse items order.
         *
         * @return static
         */
        public function reverse()
        {
        }
        /**
         * Search the collection for a given value and return the corresponding key if successful.
         *
         * @param  mixed  $value
         * @param  bool   $strict
         * @return mixed
         */
        public function search($value, $strict = false)
        {
        }
        /**
         * Get and remove the first item from the collection.
         *
         * @return mixed
         */
        public function shift()
        {
        }
        /**
         * Shuffle the items in the collection.
         *
         * @param int $seed
         * @return static
         */
        public function shuffle($seed = null)
        {
        }
        /**
         * Slice the underlying collection array.
         *
         * @param  int   $offset
         * @param  int   $length
         * @return static
         */
        public function slice($offset, $length = null)
        {
        }
        /**
         * Split a collection into a certain number of groups.
         *
         * @param  int  $numberOfGroups
         * @return static
         */
        public function split($numberOfGroups)
        {
        }
        /**
         * Chunk the underlying collection array.
         *
         * @param  int   $size
         * @return static
         */
        public function chunk($size)
        {
        }
        /**
         * Sort through each item with a callback.
         *
         * @param  callable|null  $callback
         * @return static
         */
        public function sort(callable $callback = null)
        {
        }
        /**
         * Sort the collection using the given callback.
         *
         * @param  callable|string  $callback
         * @param  int   $options
         * @param  bool  $descending
         * @return static
         */
        public function sortBy($callback, $options = SORT_REGULAR, $descending = false)
        {
        }
        /**
         * Sort the collection in descending order using the given callback.
         *
         * @param  callable|string  $callback
         * @param  int  $options
         * @return static
         */
        public function sortByDesc($callback, $options = SORT_REGULAR)
        {
        }
        /**
         * Splice a portion of the underlying collection array.
         *
         * @param  int  $offset
         * @param  int|null  $length
         * @param  mixed  $replacement
         * @return static
         */
        public function splice($offset, $length = null, $replacement = [])
        {
        }
        /**
         * Get the sum of the given values.
         *
         * @param  callable|string|null  $callback
         * @return mixed
         */
        public function sum($callback = null)
        {
        }
        /**
         * Take the first or last {$limit} items.
         *
         * @param  int  $limit
         * @return static
         */
        public function take($limit)
        {
        }
        /**
         * Transform each item in the collection using a callback.
         *
         * @param  callable  $callback
         * @return $this
         */
        public function transform(callable $callback)
        {
        }
        /**
         * Return only unique items from the collection array.
         *
         * @param  string|callable|null  $key
         * @param  bool  $strict
         *
         * @return static
         */
        public function unique($key = null, $strict = false)
        {
        }
        /**
         * Return only unique items from the collection array using strict comparison.
         *
         * @param  string|callable|null  $key
         * @return static
         */
        public function uniqueStrict($key = null)
        {
        }
        /**
         * Reset the keys on the underlying array.
         *
         * @return static
         */
        public function values()
        {
        }
        /**
         * Get a value retrieving callback.
         *
         * @param  string  $value
         * @return callable
         */
        protected function valueRetriever($value)
        {
        }
        /**
         * Zip the collection together with one or more arrays.
         *
         * e.g. new Collection([1, 2, 3])->zip([4, 5, 6]);
         *      => [[1, 4], [2, 5], [3, 6]]
         *
         * @param  mixed ...$items
         * @return static
         */
        public function zip($items)
        {
        }
        /**
         * Get the collection of items as a plain array.
         *
         * @return array
         */
        public function toArray()
        {
        }
        /**
         * Convert the object into something JSON serializable.
         *
         * @return array
         */
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
        /**
         * Get the collection of items as JSON.
         *
         * @param  int  $options
         * @return string
         */
        public function toJson($options = 0)
        {
        }
        /**
         * Get an iterator for the items.
         *
         * @return \ArrayIterator
         */
        #[\ReturnTypeWillChange]
        public function getIterator()
        {
        }
        /**
         * Get a CachingIterator instance.
         *
         * @param  int  $flags
         * @return \CachingIterator
         */
        public function getCachingIterator($flags = \CachingIterator::CALL_TOSTRING)
        {
        }
        /**
         * Count the number of items in the collection.
         *
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
        /**
         * Get a base Support collection instance from this collection.
         *
         * @return \WPML\Collect\Support\Collection
         */
        public function toBase()
        {
        }
        /**
         * Determine if an item exists at an offset.
         *
         * @param  mixed  $key
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($key)
        {
        }
        /**
         * Get an item at a given offset.
         *
         * @param  mixed  $key
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($key)
        {
        }
        /**
         * Set the item at a given offset.
         *
         * @param  mixed  $key
         * @param  mixed  $value
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($key, $value)
        {
        }
        /**
         * Unset the item at a given offset.
         *
         * @param  string  $key
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($key)
        {
        }
        /**
         * Convert the collection to its string representation.
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Results array of items from Collection or Arrayable.
         *
         * @param  mixed  $items
         * @return array
         */
        protected function getArrayableItems($items)
        {
        }
        /** Those methods exist in the latest version of the library and have been copied here */
        /**
         * Run a dictionary map over the items.
         *
         * The callback should return an associative array with a single key/value pair.
         *
         * @param  callable  $callback
         * @return $this
         */
        public function mapToDictionary(callable $callback)
        {
        }
        /**
         * Run a grouping map over the items.
         *
         * The callback should return an associative array with a single key/value pair.
         *
         * @param  callable  $callback
         * @return static
         */
        public function mapToGroups(callable $callback)
        {
        }
        /**
         * Move the items meeting the condition to the front of the collection
         *
         * @param callable $condition
         *
         * @return Collection - A new collection
         */
        public function prioritize(callable $condition)
        {
        }
        /**
         * Convert an associative array of key => value to array of pairs [ key, value ].
         *
         * @return Collection
         */
        public function assocToPair()
        {
        }
        /**
         * Convert an array of pairs [ key, value ] to an associative array of key => value.
         *
         * @return Collection
         */
        public function pairToAssoc()
        {
        }
        /**
         * Executes the given function for each item while the total execution time is less than the time out.
         * Returns the unprocessed items if a timeout occurred.
         *
         * @param callable $fn Function to all for each item.
         * @param int $timeout Timeout in seconds.
         *
         * @return Collection
         */
        public function eachWithTimeout(callable $fn, $timeout)
        {
        }
        /**
         * Determine if the collection is not empty.
         *
         * @return bool
         */
        public function isNotEmpty()
        {
        }
        /**
         * Cross join with the given lists, returning all possible permutations.
         *
         * @param  mixed  ...$lists
         * @return static
         */
        public function crossJoin(...$lists)
        {
        }
    }
}
namespace WPML\FP\System {
    class System
    {
        /**
         * @return \Closure
         */
        public static function getPostData()
        {
        }
    }
}
namespace WPML\FP {
    /**
     * @method static callable always( ...$a ) Curried :: a → ( * → a )
     *
     * Returns a function that always returns the given value.
     *
     * ```php
     * $t = Fns::always( 'Tee' );
     * $t(); //=> 'Tee'
     * ```
     *
     * @method static callable converge( ...$convergingFn, ...$branchingFns ) - Curried :: ( ( x1, x2, … ) → z ) → [( ( a, b, … ) → x1 ), ( ( a, b, … ) → x2 ), …] → ( a → b → … → z )
     *
     * Accepts a converging function and a list of branching functions and returns a new function. The arity of the new function is the same as the arity of the longest branching function. When invoked, this new function is applied to some arguments, and each branching function is applied to those same arguments. The results of each branching function are passed as arguments to the converging function to produce the return value.
     *
     * ```php
     * $divide = curryN( 2, function ( $num, $dom ) { return $num / $dom; } );
     * $sum    = function ( Collection $collection ) { return $collection->sum(); };
     * $length = function ( Collection $collection ) { return $collection->count(); };
     *
     * $average = Fns::converge( $divide, [ $sum, $length ] );
     * $this->assertEquals( 4, $average( wpml_collect( [ 1, 2, 3, 4, 5, 6, 7 ] ) ) );
     * ```
     *
     * @method static callable|mixed map( ...$fn, ...$target ) - Curried :: ( a→b )→f a→f b
     *
     * Takes a function and a *functor*, applies the function to each of the functor's values, and returns a functor of the same shape.
     *
     * And array is considered a *functor*
     *
     * Dispatches to the *map* method of the second argument, if present
     *
     * @method static callable|mixed each ( ...$fn, ...$target ) - Curried :: ( a→b )→f a→f b
     * @method static callable|mixed identity( mixed ...$data ) - Curried :: a->a
     * @method static callable|mixed tap( callable  ...$fn, mixed ...$data ) - Curried :: fn->data->data
     * @method static callable|mixed reduce( ...$fn, ...$initial, ...$target ) - Curried :: ( ( a, b ) → a ) → a → [b] → a
     * @method static callable|mixed reduceRight( ...$fn, ...$initial, ...$target ) - Curried :: ( ( a, b ) → a ) → a → [b] → a
     *
     * Takes a function, an initial value and an array and returns the result.
     *
     * The function receives two values, the accumulator and the current value, and should return a result.
     *
     * The array values are passed to the function in the reverse order.
     *
     * ```php
     * $numbers = [ 1, 2, 3, 4, 5, 8, 19 ];
     *
     * $append = function( $acc, $val ) {
     *    $acc[] = $val;
     *    return $acc;
     * };
     *
     * $reducer = Fns::reduceRight( $append, [] );
     * $result = $reducer( $numbers ); // [ 19, 8, 5, 4, 3, 2, 1 ]
     *
     * // Works on collections too.
     * $result = $reducer( wpml_collect( $numbers ) ); // [ 19, 8, 5, 4, 3, 2, 1 ]
     * ```
     *
     * @method static callable|mixed filter( ...$predicate, ...$target ) - Curried :: ( a → bool ) → [a] → [a]
     * @method static callable|mixed reject( ...$predicate, ...$target ) - Curried :: ( a → bool ) → [a] → [a]
     * @method static callable|mixed value( mixed ...$data ) - Curried :: a|( *→a ) → a
     * @method static callable|object constructN( ...$argCount, ...$className ) - Curried :: int → string → object
     * @method static callable|int ascend( ...$fn, ...$a, ...$b ) - Curried :: ( a → b ) → a → a → int
     * @method static callable|int descend( ...$fn, ...$a, ...$b ) - Curried :: ( a → b ) → a → a → int
     * @method static callable useWith( ...$fn, ...$transformations ) - Curried :: ( ( x1, x2, … ) → z ) → [( a → x1 ), ( b → x2 ), …] → ( a → b → … → z )
     * @method static callable nthArg( ...$n ) - Curried :: int → *… → *
     * @method static callable|mixed either( ...$f, ...$g, ...$e ) - Curried:: ( a → b ) → ( b → c ) → Either a b → c
     * @method static callable|mixed maybe( ...$v, ...$f, ...$m ) - Curried:: b → ( a → b ) → Maybe a → b
     * @method static callable|bool isRight( ...$e ) - Curried:: e → bool
     * @method static callable|bool isLeft( ...$e ) - Curried:: e → bool
     * @method static callable|bool isJust( ...$m ) - Curried:: e → bool
     * @method static callable|bool isNothing( ...$m ) - Curried:: e → bool
     * @method static callable|mixed T( ...$_ ) - Curried :: _ → bool
     * @method static callable|mixed F( ...$_ ) - Curried :: _ → bool
     * @method static callable|Maybe safe( ...$fn ) - Curried :: ( a → b ) → ( a → Maybe b )
     * @method static callable|object make( ...$className ) - Curried :: string → object
     * @method static callable|object makeN( ...$argCount, ...$className ) - Curried :: int → string → object
     * @method static callable unary( ...$fn ) - Curried:: ( * → b ) → ( a → b )
     * @method static callable|mixed memorizeWith( ...$cacheKeyFn, ...$fn ) - Curried :: ( *… → String ) → ( *… → a ) → ( *… → a )
     * @method static callable|mixed memorize( ...$fn ) - Curried :: ( *… → a ) → ( *… → a )
     * @method static callable|mixed once( ...$fn ) - Curried :: ( *… → a ) → ( *… → a )
     * @method static callable|mixed withNamedLock( ...$name, ...$returnFn, ...$fn ) - Curried :: String → ( *… → String ) → ( *… → a ) → ( *… → a )
     *
     * Creates a new function that is *locked* so that it wont be called recursively. Multiple functions can use the same lock so they are blocked from calling each other recursively
     *
     * ```php
     *      $lockName = 'my-lock';
     *      $addOne = Fns::withNamedLock(
     *          $lockName,
     *          Fns::identity(),
     *          function ( $x ) use ( &$addOne ) { return $addOne( $x + 1 ); }
     *      );
     *
     *      $this->assertEquals( 13, $addOne( 12 ), 'Should not recurse' );
     *
     *      $addTwo = Fns::withNamedLock(
     *          $lockName,
     *          Fns::identity(),
     *          function ( $x ) use ( $addOne ) { return pipe( $addOne, $addOne) ( $x ); }
     *      );
     *
     *      $this->assertEquals( 10, $addTwo( 10 ), 'Should return 10 because $addOne is locked by the same name as $addTwo' );
     * ```
     *
     * @method static callable|mixed withoutRecursion( ...$returnFn, ...$fn ) - Curried :: ( *… → String ) → ( *… → a ) → ( *… → a )
     * @method static callable|mixed liftA2( ...$fn, ...$monadA, ...$monadB ) - Curried :: ( a → b → c ) → m a → m b → m c
     * @method static callable|mixed liftA3( ...$fn, ...$monadA, ...$monadB, ...$monadC ) - Curried :: ( a → b → c → d ) → m a → m b → m c → m d
     * @method static callable|mixed liftN( ...$n, ...$fn, ...$monad ) - Curried :: Number->( ( * ) → a ) → ( *m ) → m a
     *
     * @method static callable|mixed until( ...$predicate, ...$fns ) - Curried :: ( b → bool ) → [( a → b )] → a → b
     *
     * Executes consecutive functions until their $predicate($fn(...$args)) is true. When a result fulfils predicate then it is returned.
     *
     * ```
     *       $fns = [
     *         $add(1),
     *         $add(5),
     *         $add(10),
     *         $add(23),
     *      ];
     *
     *      $this->assertSame( 20, Fns::until( Relation::gt( Fns::__, 18 ), $fns )( 10 ) );
     * ```
     *
     */
    class Fns
    {
        use \WPML\Collect\Support\Traits\Macroable;
        const __ = '__CURRIED_PLACEHOLDER__';
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @return \Closure
         */
        public static function noop()
        {
        }
        /**
         * Curried function that transforms a Maybe into an Either.
         *
         * @param mixed|null $or
         * @param Maybe|null $maybe
         *
         * @return callable|Either
         */
        public static function maybeToEither($or = null, $maybe = null)
        {
        }
    }
}
namespace WPML\FP\System {
    class _Filter
    {
        /**
         * _Filter constructor.
         *
         * @param string $key
         */
        public function __construct($key)
        {
        }
        /**
         * @param callable $fn
         *
         * @return _Filter
         */
        public function using(callable $fn)
        {
        }
        /**
         * @param mixed $default
         *
         * @return _Filter
         */
        public function defaultTo($default)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection<mixed> $collection
         *
         * @return \WPML\Collect\Support\Collection<mixed>
         */
        public function __invoke(\WPML\Collect\Support\Collection $collection)
        {
        }
    }
}
namespace WPML\FP {
    /**
     * @method static callable|bool toBool( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|int toInt( mixed ...$v ) - Curried :: mixed->int
     * @method static callable|string toStr( mixed ...$v ) - Curried :: mixed->string
     * @method static callable|array toArr( mixed ...$v ) - Curried :: mixed->array
     */
    class Cast
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
    /**
     * @method static callable|bool not( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isNotNull( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|mixed ifElse( ...$predicate, ...$first, ...$second, ...$data ) - Curried :: ( a->bool )->callable->callable->callable
     * @method static callable when( ...$predicate, ...$fn ) - Curried :: ( a->bool )->callable->callable
     * @method static callable unless( ...$predicate, ...$fn ) - Curried :: ( a->bool )->callable->callable
     * @method static callable cond( ...$conditions, ...$fn ) - Curried :: [( a->bool ), callable]->callable
     * @method static callable both( ...$a, ...$b, ...$data ) - Curried :: ( a → bool ) → ( a → bool ) → a → bool
     * @method static callable|bool allPass( ...$predicates, ...$data ) - Curried :: [( *… → bool )] → ( *… → bool )
     * @method static callable|bool anyPass( ...$predicates, ...$data ) - Curried :: [( *… → bool )] → ( *… → bool )
     * @method static callable complement( ...$fn ) - Curried :: ( *… → * ) → ( *… → bool )
     * @method static callable|mixed defaultTo( ...$a, ...$b ) - Curried :: a → b → a | b
     * @method static callable|bool either( ...$a, ...$b ) - Curried :: ( *… → bool ) → ( *… → bool ) → ( *… → bool )
     * @method static callable|mixed until ( ...$predicate, ...$transform, ...$data ) - Curried :: ( a → bool ) → ( a → a ) → a → a
     * @method static callable|bool propSatisfies( ...$predicate, ...$prop, ...$data ) - Curried :: ( a → bool ) → String → [String => a] → bool
     * @method static callable|bool isArray ( ...$a ) - Curried :: a → bool
     * @method static callable|bool isMappable ( ...$a ) - Curried :: a → bool
     * @method static callable|bool isEmpty( ...$a ) - Curried:: a → bool
     * @method static callable|bool isNotEmpty( ...$a ) - Curried:: a → bool
     * @method static callable|mixed firstSatisfying( ...$predicate, ...$functions, ...$data ) - Curried:: callable->callable[]->mixed->mixed
     * @method static callable|bool isTruthy( ...$data ) - Curried:: mixed->bool
     */
    class Logic
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|mixed prop( ...$key, ...$obj ) - Curried :: string->Collection|array|object->mixed|null
     * @method static callable|mixed propOr( ...$default, ...$key, ...$obj ) - Curried :: mixed->string->Collection|array|object->mixed|null
     * @method static callable|array props( ...$keys, ...$obj ) - Curried :: [keys] → Collection|array|object → [v]
     * @method static callable|array|\stdClass addProp( ...$key, ...$transformation, ...$obj ) - Curried :: string->callable->object|array->object->array
     * @method static callable|array|\stdClass removeProp( ...$key, ...$obj ) - Curried :: string->object|array->object->array
     * @method static callable|array|\stdClass renameProp( ...$key, ...$newKey, ...$obj ) - Curried :: string->string->object|array->object->array
     * @method static callable|mixed path( ...$path, ...$obj ) - Curried :: array->Collection|array|object->mixed|null
     * @method static callable|mixed pathOr( ...$default, ...$path, ...$obj ) - Curried :: mixed → array → Collection|array|object → mixed
     * @method static callable assoc( ...$key, ...$value, ...$item ) - Curried :: string->mixed->Collection|array|object->mixed|null
     * @method static callable assocPath( ...$path, ...$value, ...$item ) - Curried :: array->mixed->Collection|array|object->mixed|null
     * @method static callable lens( ...$getter, ...$setter ) - Curried :: callable->callable->callable
     * @method static callable lensProp( ...$prop ) - Curried :: string->callable
     * @method static callable lensPath( ...$path ) - Curried :: array->callable
     * @method static callable lensMapped( ...$toFunctorFn ) - Curried :: callable->callable
     * @method static callable lensMappedProp( ...$prop ) - Curried :: string->callable
     * @method static callable view( ...$lens, ...$obj ) - Curried :: callable->Collection|array|object->mixed
     * @method static callable set( ...$lens, ...$value, ...$obj ) - Curried :: callable->mixed->Collection|array|object->mixed
     * @method static callable over( ...$lens, ...$transformation, ...$obj ) - Curried :: callable->callable->Collection|array|object->mixed
     * @method static callable pick( ...$props, ...$obj ) - Curried :: array->Collection|array->Collection|array
     * @method static callable pickAll( ...$props, ...$obj ) - Curried :: array->Collection|array->Collection|array
     * @method static callable pickBy( ...$predicate, ...$obj ) - Curried :: ( ( v, k ) → bool ) → Collection|array->Collection|array
     * @method static callable pickByKey( ...$predicate, ...$obj ) - Curried :: ( ( k ) → bool ) → Collection|array->callable|Collection|array|object
     * @method static callable project( ...$props, ...$target ) - Curried :: array->Collection|array->Collection|array
     * @method static callable where( array $condition ) - Curried :: [string → ( * → bool )] → bool
     * @method static callable|bool has( ...$prop, ...$item ) - Curried :: string → a → bool
     * @method static callable|bool hasPath( ...$path, ...$item ) - Curried :: array<string> → a → bool
     * @method static callable|mixed evolve( ...$transformations, ...$item ) - Curried :: array → array → array
     *
     * @method static callable|array objOf( ...$key, ...$value ) - Curried :: string->mixed->array
     *
     * Creates an object containing a single key:value pair.
     *
     * @method static callable|array keys( ...$obj ) - Curried :: object|array->array
     *
     * Returns
     *  - keys if argument is an array
     *  - public properties' names if argument is an object
     *  - keys if argument is Collection
     *
     * ```
     * $this->assertEquals( [ 0, 1, 2 ], Obj::keys( [ 'a', 'b', 'c' ] ) );
     * $this->assertEquals( [ 'a', 'b', 'c' ], Obj::keys( [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) );
     *
     * $this->assertEquals( [ 0, 1, 2 ], Obj::keys( \wpml_collect( [ 'a', 'b', 'c' ] ) ) );
     * $this->assertEquals( [ 'a', 'b', 'c' ], Obj::keys( \wpml_collect( [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) ) );
     *
     * $this->assertEquals( [ 'a', 'b', 'c' ], Obj::keys( (object) [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) );
     * ```
     *
     * @method static callable|array values( ...$obj ) - Curried :: object|array->array
     *
     * Returns
     *  - values if argument is an array
     *  - public properties' values if argument is an object
     *  - values if argument is Collection
     *
     * ```
     * $this->assertEquals( [ 'a', 'b', 'c' ], Obj::values( [ 'a', 'b', 'c' ] ) );
     * $this->assertEquals( [ 1, 2, 3 ], Obj::values( [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) );
     *
     * $this->assertEquals( [ 'a', 'b', 'c' ], Obj::values( \wpml_collect( [ 'a', 'b', 'c' ] ) ) );
     * $this->assertEquals( [ 1, 2, 3 ], Obj::values( \wpml_collect( [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) ) );
     *
     * $this->assertEquals( [ 1, 2, 3 ], Obj::values( (object) [ 'a' => 1, 'b' => 2, 'c' => 3 ] ) );
     * ```
     *
     * @method static callable|array replaceRecursive( array ...$newValue, ...$target ) - Curried :: array->array->array
     *
     * @method static callable|array toArray( Collection|Object ...$item ) - Curried :: Collection|Object->array
     */
    class Obj
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Curried :: mixed → array|object|Collection → array|object|Collection
         * function to remove an item by key from an array.
         *
         * @param string|int                   $key
         * @param array|object|Collection|null $item
         *
         * @return callable|array|object|Collection
         */
        static function without($key = null, $item = null)
        {
        }
        /**
         * Curried :: array|object -> array|object -> array|object
         *
         * It merges the new data with item.
         *
         * @param array|object $newData
         * @param array|object $item
         *
         * @return array|object
         */
        public static function merge($newData = null, $item = null)
        {
        }
    }
}
namespace WPML\FP\Functor {
    trait Functor
    {
        /** @var mixed */
        protected $value;
        /**
         * @param  mixed  $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
        /**
         * @param callable $callback
         *
         * @return \WPML\FP\Either
         */
        public abstract function map(callable $callback);
    }
}
namespace WPML\FP {
    /**
     * Class Either
     * @package WPML\FP
     *
     * @method static callable|Right of( ...$value ) - Curried :: a → Right a
     *
     * @method static callable|Left left( ...$value ) - Curried :: a → Left a
     *
     * @method static callable|Right right( ...$value ) - Curried :: a → Right a
     *
     * @method static callable|Left|Right fromNullable( ...$value ) - Curried :: a → Either a
     *
     * @method static callable|Left|Right fromBool( ...$value ) - Curried :: a → Either a
     *
     * @method static Either tryCatch( ...$fn ) - Curried :: a → Either a
     *
     * @method static mixed getOrElse( ...$other )
     */
    abstract class Either
    {
        use \WPML\FP\Functor\Functor;
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @return Either
         */
        public function join()
        {
        }
        /**
         * @param callable $fn
         *
         * @return mixed
         */
        public abstract function chain(callable $fn);
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public abstract function bichain(callable $leftFn, callable $rightFn);
        /**
         * @param callable $fn
         *
         * @return mixed
         */
        public abstract function orElse(callable $fn);
        public abstract function bimap(callable $leftFn, callable $rightFn);
        public abstract function coalesce(callable $leftFn, callable $rightFn);
        public abstract function alt(\WPML\FP\Either $alt);
        public abstract function filter(callable $fn);
    }
    trait ConstApplicative
    {
        /**
         * @param mixed $otherContainer
         *
         * @return mixed
         */
        public function ap($otherContainer)
        {
        }
    }
}
namespace WPML\FP\Functor {
    trait Pointed
    {
        /**
         * of :: a -> M a
         *
         * Curried function that returns an instance of the derived class
         * @param mixed $value (optional)
         *
         * @return mixed|callable
         */
        public static function of($value = null)
        {
        }
    }
}
namespace WPML\FP {
    class Left extends \WPML\FP\Either
    {
        use \WPML\FP\ConstApplicative;
        use \WPML\FP\Functor\Pointed;
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function map(callable $fn)
        {
        }
        public function bimap(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Right
         */
        public function coalesce(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @return void
         * @throws \Exception
         */
        public function get()
        {
        }
        /**
         * @param mixed $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Right
         */
        public function orElse(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public function bichain(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         * @throws \Exception
         */
        public function getOrElseThrow($value)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function tryCatch(callable $fn)
        {
        }
        public function alt(\WPML\FP\Either $alt)
        {
        }
    }
    trait Applicative
    {
        /**
         * @param mixed $otherContainer
         *
         * @return mixed
         */
        public function ap($otherContainer)
        {
        }
    }
    class Right extends \WPML\FP\Either
    {
        use \WPML\FP\Applicative;
        use \WPML\FP\Functor\Pointed;
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function map(callable $fn)
        {
        }
        public function bimap(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Right
         */
        public function coalesce(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param Either $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function orElse(callable $fn)
        {
        }
        /**
         * @param mixed $value
         *
         * @return mixed
         */
        public function getOrElseThrow($value)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public function bichain(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function tryCatch(callable $fn)
        {
        }
        public function alt(\WPML\FP\Either $alt)
        {
        }
    }
    /**
     * Class Maybe
     * @package WPML\FP
     * @method static callable|Just|Nothing fromNullable( ...$value ) - Curried :: a → Nothing | Just a
     *
     * if $value is null or false it returns a Nothing otherwise returns a Just containing the value
     *
     * @method static callable safe( ...$fn ) - Curried :: ( a → b ) → ( a → Maybe b )
     *
     * returns a function that when called will run the passed in function and put the result into a Maybe
     *
     * @method static callable safeAfter( ...$predicate, ...$fn ) - Curried :: ( b → bool ) → ( a → b ) → ( a → Maybe b )
     *
     * returns a function that when called will run the passed in function and pass the result of the function
     * to the predicate. If the predicate returns true the result will be a Just containing the result of the function.
     * Otherwise it returns a Nothing if the predicate returns false.
     *
     * @method static callable safeBefore( ...$predicate, ...$fn ) - Curried :: ( a → bool ) → ( a → b ) → ( a → Maybe b )
     *
     * returns a function that when called will pass the given value to the predicate.
     * If the predicate returns true the value will be lifted into a Just instance and
     * the passed in function will then be mapped.
     * Otherwise it returns a Nothing if the predicate returns false.
     *
     * @method static callable|Just just( ...$value ) - Curried :: a → Just a
     *
     * returns a Just containing the value.
     *
     * @method static callable|Just of( ...$value ) - Curried :: a → Just a
     *
     * returns a Just containing the value.
     *
     */
    class Maybe
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @return Nothing
         */
        public static function nothing()
        {
        }
        /**
         * @return bool
         */
        public function isNothing()
        {
        }
        /**
         * @return bool
         */
        public function isJust()
        {
        }
    }
    class Just extends \WPML\FP\Maybe
    {
        use \WPML\FP\Functor\Functor;
        use \WPML\FP\Functor\Pointed;
        use \WPML\FP\Applicative;
        /**
         * @param callable $fn
         *
         * @return Just|Nothing
         */
        public function map(callable $fn)
        {
        }
        /**
         * @param mixed $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Just|Nothing
         */
        public function filter($fn = null)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Just|Nothing
         */
        public function reject($fn = null)
        {
        }
        /**
         * @param callable $fn
         *
         * @return mixed
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @return bool
         */
        public function isJust()
        {
        }
    }
    class Nothing extends \WPML\FP\Maybe
    {
        use \WPML\FP\ConstApplicative;
        /**
         * @param callable $fn
         *
         * @return Nothing
         */
        public function map(callable $fn)
        {
        }
        /**
         * @return void
         * @throws \Exception
         */
        public function get()
        {
        }
        /**
         * @param mixed|callable $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Nothing
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Nothing
         */
        public function reject(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Nothing
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @return bool
         */
        public function isNothing()
        {
        }
    }
    /**
     * @method static callable|mixed inspect( mixed ...$input )
     * @method static callable|mixed log( string ...$label )
     * @method static callable|mixed logDump( string ...$label, mixed ...$input )
     * @method static callable|mixed logPrintR( string ...$label, mixed ...$input )
     * @method static callable|mixed logBacktrace( string ...$label, mixed ...$input )
     */
    class Debug
    {
        use \WPML\Collect\Support\Traits\Macroable;
        public static function init()
        {
        }
    }
}
namespace WPML\FP\Monoid {
    abstract class Monoid
    {
        public static function concat($a = null, $b = null)
        {
        }
        public static function of(array $array = null)
        {
        }
    }
    class All extends \WPML\FP\Monoid\Monoid
    {
        public static function _concat($a, $b)
        {
        }
        public static function mempty()
        {
        }
    }
    class Sum extends \WPML\FP\Monoid\Monoid
    {
        public static function _concat($a, $b)
        {
        }
        public static function mempty()
        {
        }
    }
    class Any extends \WPML\FP\Monoid\Monoid
    {
        public static function _concat($a, $b)
        {
        }
        public static function mempty()
        {
        }
    }
    class Str extends \WPML\FP\Monoid\Monoid
    {
        public static function _concat($a, $b)
        {
        }
        public static function mempty()
        {
        }
    }
}
namespace WPML\FP {
    /**
     * @method static string tail( string ...$str ) - Curried :: string->string
     * @method static array split( ...$delimiter, ...$str ) - Curried :: string->string->string
     * @method static callable|array parse( ...$string ) - Curried :: string → array
     * @method static callable|bool includes( ...$needle, ...$str ) - Curried :: string → string → bool
     * @method static callable|string trim( ...$trim, ...$str ) - Curried :: string → string → string
     * @method static callable|string trimPrefix( ...$trim, ...$str ) - Curried :: string → string → string
     *
     * Trims the prefix from the start of the string if the prefix exists
     *
     * ```
     * $trimmed = Str::trimPrefix( 'prefix-', 'prefix-test' );
     * ```
     *
     * @method static callable|string concat( ...$a, ...$b ) - Curried :: string → string → string
     * @method static callable|string sub( ...$start, ...$str ) - Curried :: int → string → string
     * @method static callable|string startsWith( ...$test, ...$str ) - Curried :: string → string → bool
     * @method static callable|string endsWith( ...$test, ...$str ) - Curried :: string → string → bool
     * @method static callable|int pos( ...$test, ...$str ) - Curried :: string → string → int
     * @method static callable|int len( ...$str ) - Curried :: string → int
     * @method static callable|string replace( ...$find, ...$replace, ...$str ) - Curried :: string → string → string → string
     * @method static callable|string pregReplace( ...$pattern, ...$replace, ...$str ) - Curried :: string → string → string → string
     * @method static callable|string match( ...$pattern, ...$str ) - Curried :: string → string → array
     * @method static callable|string matchAll( ...$pattern, ...$str ) - Curried :: string → string → array
     * @method static callable|string wrap( ...$before, ...$after, ...$str ) - Curried :: string → string → string
     * @method static callable|string toUpper( string ...$str ) - Curried :: string → string
     * @method static callable|string toLower( string ...$str ) - Curried :: string → string
     *
     * Wraps a string inside 2 other strings
     *
     * ```
     * $wrapsInDiv = Str::wrap( '<div>', '</div>' );
     * $wrapsInDiv( 'To be wrapped' ); // '<div>To be wrapped</div>'
     * ```
     *
     */
    class Str
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
}
namespace WPML\FP\Invoker {
    /**
     * Class BeforeAfterInvoker
     * @package WPML\FP
     *
     * Helper class that allows a before function and an after function to be run
     * when running another function
     *
     * ```php
     * $withFilter = function ( $name, $filterFn, $priority = 10, $count = 1 ) {
     *     $before = partial( 'add_filter', $name, $filterFn, $priority, $count );
     *     $after = partial( 'remove_filter', $name, $filterFn, $priority, $count );
     *     return BeforeAfterInvoker::of( $before, $after );
     * }
     *
     * $result = $withFilter( 'query', $some_callback, 10, 1 )
     *          ->invoke( $somefunction )
     *          ->runWith( 123, 456 )
     * ```
     *
     * This will call add_filter to add the filter then call the function to be invoked
     * and finally call remove_filter to remove the filter.
     *
     */
    class BeforeAfter
    {
        /**
         * Set the function to be invoked
         * @param callable $fn
         *
         * @return $this
         */
        public function invoke(callable $fn)
        {
        }
        /**
         * Add another pair of before and after functions.
         * When it's finally run it executes before1 then before2
         * then the function
         * then after2 followed by after1
         *
         * @param callable $before
         * @param callable $after
         *
         * @return BeforeAfter
         */
        public function then(callable $before, callable $after)
        {
        }
        /**
         * Invoke the function with the arguments
         * Calls the before function first then the function and then the after function
         * @param mixed ...$args
         *
         * @return mixed
         */
        public function runWith(...$args)
        {
        }
        public static function of(callable $before, callable $after)
        {
        }
    }
    class _Invoker
    {
        /**
         * _Invoker constructor.
         *
         * @param string $fnName
         */
        public function __construct($fnName)
        {
        }
        /**
         * @param mixed ...$args
         *
         * @return _Invoker
         */
        public function with(...$args)
        {
        }
        /**
         * @param mixed $instance
         *
         * @return mixed
         */
        public function __invoke($instance)
        {
        }
    }
}
namespace WPML\FP {
    /**
     * @method static callable iso( ...$to, ...$from ) - Curried :: callable->callable->callable
     * @method static callable isoIdentity() :: callable->callable->callable
     * @method static callable isoUnserialized() :: callable->callable->callable
     * @method static callable isoJsonDecoded() :: callable->callable->callable
     * @method static callable isoUrlDecoded() :: callable->callable->callable
     * @method static callable isoBase64Decoded() :: callable->callable->callable
     * @method static callable isoParsedUrl() :: callable->callable->callable
     * @method static callable isoParsedQuery() :: callable->callable->callable
     */
    class Lens
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
}
namespace WPML\FP\Functor {
    class ConstFunctor
    {
        use \WPML\FP\Functor\Functor;
        use \WPML\FP\Functor\Pointed;
        /**
         * @param callable $callback
         *
         * @return ConstFunctor
         */
        public function map($callback)
        {
        }
    }
    class IdentityFunctor
    {
        use \WPML\FP\Functor\Functor;
        use \WPML\FP\Functor\Pointed;
        /**
         * @param callable $callback
         *
         * @return IdentityFunctor
         */
        public function map($callback)
        {
        }
    }
}
namespace WPML\FP {
    /**
     * @method static callable|array|null toArray(string ...$str) - Curried :: json -> array
     * @method static callable|Collection|null toCollection(string ...$str) Curried :: json -> null | Collection
     */
    class Json
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|mixed multiply( ...$a, ...$b ) - Curried :: Number → Number → Number
     * @method static callable|mixed divide( ...$a, ...$b ) - Curried :: Number → Number → Number
     * @method static callable|mixed add( ...$a, ...$b ) - Curried :: Number → Number → Number
     * @method static callable|mixed product( ...$array ) - Curried :: [Number] → Number
     */
    class Math
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @deprecated Use Fn instead
     *
     * @method static callable|mixed map( callable ...$fn, mixed ...$target ) - Curried :: (a -> b) -> f a -> f b
     * @method static callable|mixed identity( mixed ...$data ) - Curried :: a -> a
     * @method static callable|mixed always( ...$a, ...$b ) - Curried :: a -> b -> a
     * @method static callable|mixed reduce( ...$fn, ...$initial, ...$target ) - Curried :: ((a, b) → a) → a → [b] → a
     * @method static callable\mixed converge( ...$convergingFn, ...$branchingFns, ...$data ) - Curried :: callable -> [callable] -> mixed -> callable
     */
    class FP
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|bool isNull( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isBool( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isInt( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isNumeric( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isFloat( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isString( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isScalar( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isArray( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isObject( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isCallable( mixed ...$v ) - Curried :: mixed->bool
     *
     * @method static callable|bool isSerialized( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isJson( mixed ...$v ) - Curried :: mixed->bool
     */
    class Type
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|bool equals( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool lt( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool lte( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool gt( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool gte( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool propEq( ...$prop, ...$value, ...$obj ) - Curried :: String → a → array → bool
     * @method static callable|array sortWith( ...$comparators, ...$array ) - Curried :: [(a, a) → int] → [a] → [a]
     */
    class Relation
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    class Wrapper
    {
        use \WPML\FP\Functor\Functor;
        use \WPML\FP\Functor\Pointed;
        /**
         * @param callable $fn
         *
         * @return Wrapper
         */
        public function map(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return mixed|null
         */
        public function filter($fn = null)
        {
        }
        /**
         * @return mixed
         */
        public function join()
        {
        }
        /**
         * @param mixed $value
         *
         * @return Wrapper
         */
        public function ap($value)
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
    }
    class Promise
    {
        /**
         * @param mixed $data
         *
         * @return mixed
         */
        public function resolve($data)
        {
        }
        /**
         * @param mixed $data
         *
         * @return mixed
         */
        public function reject($data)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Promise
         */
        public function then(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Promise
         */
        public function onError(callable $fn)
        {
        }
    }
    /**
     * Class Undefined
     * @package WPML\FP
     *
     * Class represents Undefined value. It let us handle correctly expected, but falsy values like null, 0 or false.
     */
    class Undefined
    {
    }
}
namespace WPML\FP\System {
    class _Validator
    {
        /**
         * _Validator constructor.
         *
         * @param string $key
         */
        public function __construct($key)
        {
        }
        /**
         * @param callable $fn
         *
         * @return _Validator
         */
        public function using(callable $fn)
        {
        }
        /**
         * @param string $error
         *
         * @return _Validator
         */
        public function error($error)
        {
        }
        /**
         * @param \WPML\Collect\Support\Collection<mixed> $collection
         *
         * @return callable|\WPML\FP\Either
         */
        public function __invoke(\WPML\Collect\Support\Collection $collection)
        {
        }
    }
}
namespace WPML\FP {
    /**
     * Lst class contains functions for working on ordered arrays indexed with numerical keys
     *
     * @method static callable|array append( mixed ...$newItem, array ...$data ) - Curried :: mixed->array->array
     * @method static callable|array fromPairs( array ...$array ) - Curried :: [[a, b]] → [a => b]
     * @method static callable|array toObj( array ...$array ) - Curried :: array → object
     * @method static callable|array pluck( ...$prop, ...$array ) - Curried :: string → array → array
     * @method static callable|array partition( ...$predicate, ...$target ) - Curried :: ( a → bool ) → [a] → [[a], [a]]
     * @method static callable|array sort( ...$fn, ...$target ) - Curried :: ( ( a, a ) → int|bool ) → [a] → [a]
     * @method static callable|array unfold( ...$fn, ...$seed ) - Curried :: ( a → [b] ) → * → [b]
     * @method static callable|array zip( ...$a, ...$b ) - Curried :: [a] → [b] → [[a, b]]
     * @method static callable|array zipObj( ...$a, ...$b ) - Curried :: [a] → [b] → [a => b]
     * @method static callable|array zipWith( ...$f, ...$a, ...$b ) - Curried :: ( ( a, b ) → c ) → [a] → [b] → [c]
     * @method static callable|string join( ...$glue, ...$array ) - Curried :: string → [a] → string
     * @method static callable|string joinWithCommasAndAnd( ...$array ) - Curried :: [a] → string
     * @method static callable|array concat( ...$a, ...$b ) - Curried :: [a] → [a] → [a]
     * @method static callable|array|null find( ...$predicate, ...$array ) - Curried :: ( a → bool ) → [a] → a | null
     * @method static callable|array flattenToDepth( ...$depth, ...$array ) - Curried :: int → [[a]] → [a]
     * @method static callable|array flatten( ...$array ) - Curried :: [[a]] → [a]
     * @method static callable|bool includes( ...$val, ...$array ) - Curried :: a → [a] → bool
     * @method static callable|bool includesAll( ...$values, ...$array ) - Curried :: [a] → [a] → bool
     *
     * Determines if all the values are in the given array
     *
     * ```
     * $includes10and20 = Lst::includesAll( [ 10, 20 ] );
     *
     * $this->assertTrue( $includes10and20( [ 5, 10, 15, 20 ] ) );
     * $this->assertFalse( $includes10and20( [ 5, 15, 20 ] ) );
     * ```
     * @method static callable|bool nth( ...$n, ...$array ) - Curried :: int → [a] → a | null
     * @method static callable|bool first( ...$array ) - Curried :: [a, b] → a | null
     * @method static callable|bool last( ...$array ) - Curried :: [a, b] → b | null
     * @method static callable|int length( ...$array ) - Curried :: [a] → int
     * @method static callable|array take( ...$n, ...$array ) - Curried :: int → [a] → [a]
     * @method static callable|array takeLast( ...$n, ...$array ) - Curried :: int → [a] → [a]
     * @method static callable|array slice( ...$offset, ...$limit, ...$array ) - Curried :: int → int->[a] → [a]
     * @method static callable|array drop( ...$n, ...$array ) - Curried :: int → [a] → [a]
     * @method static callable|array dropLast( ...$n, ...$array ) - Curried :: int → [a] → [a]
     * @method static callable|array makePair( ...$a, ...$b ) - Curried :: mixed → mixed → array
     * @method static callable|array make ( ...$a ) - Curried :: mixed → array
     * @method static callable|array insert( ...$index, ...$v, ...$array ) - Curried :: int → mixed → array → array
     * @method static callable|array range( ...$from, ...$to )  - Curried :: int → int → array
     * @method static callable|array xprod( ...$a, ...$b ) - Curried :: [a]->[b]->[a, b]
     *
     * Creates a new list out of the two supplied by creating each possible pair from the lists.
     *
     * ```
     * $a              = [ 1, 2, 3 ];
     * $b              = [ 'a', 'b', 'c' ];
     * $expectedResult = [
     *   [ 1, 'a' ], [ 1, 'b' ], [ 1, 'c' ],
     *   [ 2, 'a' ], [ 2, 'b' ], [ 2, 'c' ],
     *   [ 3, 'a' ], [ 3, 'b' ], [ 3, 'c' ],
     * ];
     *
     * $this->assertEquals( $expectedResult, Lst::xprod( $a, $b ) );
     * ```
     * @method static callable|array prepend( ...$val, ...$array ) - Curried:: a → [a] → [a]
     *
     * Returns a new array with the given element at the front, followed by the contents of the list.
     *
     * @method static callable|array reverse( ...$array ) - Curried:: [a] → [a]
     *
     * Returns a new array with the elements reversed.
     *
     */
    class Lst
    {
        use \WPML\Collect\Support\Traits\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Curried function that keys the array by the given key
         *
         * keyBy :: string -> array -> array
         *
         * ```
         * $data = [
         *    [ 'x' => 'a', 'y' => 123 ],
         *    [ 'x' => 'b', 'y' => 456 ],
         * ];
         *
         * Lst::keyBy( 'x', $data );
         * [
         *    'a' => [ 'x' => 'a', 'y' => 123 ],
         *    'b' => [ 'x' => 'b', 'y' => 456 ],
         * ],
         * ```
         *
         * @param string $key
         * @param mixed[]  $array
         *
         * @return mixed[]|callable
         */
        public static function keyBy($key = null, $array = null)
        {
        }
        /**
         * Curried function that wraps each item in array with pair: [$key => $item1]
         *
         * keyWith :: string -> array -> array
         *
         * ```
         * $data = [ 1, 2.3, 'some data', - 2, 'a' ];
         *
         * Lst::keyWith('myKey', $data);
         * [ [ 'myKey' => 1 ], [ 'myKey' => 2.3 ], [ 'myKey' => 'some data' ], [ 'myKey' => - 2 ], [ 'myKey' => 'a' ] ]
         * ```
         *
         * @param string $key
         * @param mixed[] $array
         *
         * @return mixed[]|callable
         */
        public static function keyWith($key = null, $array = null)
        {
        }
        /**
         * This method will return the values in the original collection that are not present in the given collection:
         *
         * @param array|Collection $array1
         * @param array|Collection $array2
         *
         * @return callable|Collection|array
         */
        public static function diff($array1 = null, $array2 = null)
        {
        }
        /**
         * It returns array of $val elements repeated $times times.
         *
         * @param mixed $val
         * @param int $times
         *
         * @return callable|array[mixed]
         */
        public static function repeat($val = null, $times = null)
        {
        }
        /**
         * @param array|Collection $param
         *
         * @return callable|int
         */
        public static function sum($param = null)
        {
        }
    }
}
namespace Psr\Log {
    class InvalidArgumentException extends \InvalidArgumentException
    {
    }
    /**
     * Describes a logger-aware instance.
     */
    interface LoggerAwareInterface
    {
        /**
         * Sets a logger instance on the object.
         *
         * @param LoggerInterface $logger
         *
         * @return void
         */
        public function setLogger(\Psr\Log\LoggerInterface $logger);
    }
    /**
     * This is a simple Logger trait that classes unable to extend AbstractLogger
     * (because they extend another class, etc) can include.
     *
     * It simply delegates all log-level-specific methods to the `log` method to
     * reduce boilerplate code that a simple Logger that does the same thing with
     * messages regardless of the error level has to implement.
     */
    trait LoggerTrait
    {
        /**
         * System is unusable.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function emergency($message, array $context = array())
        {
        }
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function alert($message, array $context = array())
        {
        }
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function critical($message, array $context = array())
        {
        }
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function error($message, array $context = array())
        {
        }
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function warning($message, array $context = array())
        {
        }
        /**
         * Normal but significant events.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function notice($message, array $context = array())
        {
        }
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function info($message, array $context = array())
        {
        }
        /**
         * Detailed debug information.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function debug($message, array $context = array())
        {
        }
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed  $level
         * @param string $message
         * @param array  $context
         *
         * @return void
         *
         * @throws \Psr\Log\InvalidArgumentException
         */
        public abstract function log($level, $message, array $context = array());
    }
    /**
     * This is a simple Logger implementation that other Loggers can inherit from.
     *
     * It simply delegates all log-level-specific methods to the `log` method to
     * reduce boilerplate code that a simple Logger that does the same thing with
     * messages regardless of the error level has to implement.
     */
    abstract class AbstractLogger implements \Psr\Log\LoggerInterface
    {
        /**
         * System is unusable.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function emergency($message, array $context = array())
        {
        }
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function alert($message, array $context = array())
        {
        }
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function critical($message, array $context = array())
        {
        }
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function error($message, array $context = array())
        {
        }
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function warning($message, array $context = array())
        {
        }
        /**
         * Normal but significant events.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function notice($message, array $context = array())
        {
        }
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function info($message, array $context = array())
        {
        }
        /**
         * Detailed debug information.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function debug($message, array $context = array())
        {
        }
    }
    /**
     * Describes log levels.
     */
    class LogLevel
    {
        const EMERGENCY = 'emergency';
        const ALERT = 'alert';
        const CRITICAL = 'critical';
        const ERROR = 'error';
        const WARNING = 'warning';
        const NOTICE = 'notice';
        const INFO = 'info';
        const DEBUG = 'debug';
    }
    /**
     * This Logger can be used to avoid conditional log calls.
     *
     * Logging should always be optional, and if no logger is provided to your
     * library creating a NullLogger instance to have something to throw logs at
     * is a good way to avoid littering your code with `if ($this->logger) { }`
     * blocks.
     */
    class NullLogger extends \Psr\Log\AbstractLogger
    {
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed  $level
         * @param string $message
         * @param array  $context
         *
         * @return void
         *
         * @throws \Psr\Log\InvalidArgumentException
         */
        public function log($level, $message, array $context = array())
        {
        }
    }
}
namespace Psr\Log\Test {
    /**
     * Used for testing purposes.
     *
     * It records all records and gives you access to them for verification.
     *
     * @method bool hasEmergency($record)
     * @method bool hasAlert($record)
     * @method bool hasCritical($record)
     * @method bool hasError($record)
     * @method bool hasWarning($record)
     * @method bool hasNotice($record)
     * @method bool hasInfo($record)
     * @method bool hasDebug($record)
     *
     * @method bool hasEmergencyRecords()
     * @method bool hasAlertRecords()
     * @method bool hasCriticalRecords()
     * @method bool hasErrorRecords()
     * @method bool hasWarningRecords()
     * @method bool hasNoticeRecords()
     * @method bool hasInfoRecords()
     * @method bool hasDebugRecords()
     *
     * @method bool hasEmergencyThatContains($message)
     * @method bool hasAlertThatContains($message)
     * @method bool hasCriticalThatContains($message)
     * @method bool hasErrorThatContains($message)
     * @method bool hasWarningThatContains($message)
     * @method bool hasNoticeThatContains($message)
     * @method bool hasInfoThatContains($message)
     * @method bool hasDebugThatContains($message)
     *
     * @method bool hasEmergencyThatMatches($message)
     * @method bool hasAlertThatMatches($message)
     * @method bool hasCriticalThatMatches($message)
     * @method bool hasErrorThatMatches($message)
     * @method bool hasWarningThatMatches($message)
     * @method bool hasNoticeThatMatches($message)
     * @method bool hasInfoThatMatches($message)
     * @method bool hasDebugThatMatches($message)
     *
     * @method bool hasEmergencyThatPasses($message)
     * @method bool hasAlertThatPasses($message)
     * @method bool hasCriticalThatPasses($message)
     * @method bool hasErrorThatPasses($message)
     * @method bool hasWarningThatPasses($message)
     * @method bool hasNoticeThatPasses($message)
     * @method bool hasInfoThatPasses($message)
     * @method bool hasDebugThatPasses($message)
     */
    class TestLogger extends \Psr\Log\AbstractLogger
    {
        /**
         * @var array
         */
        public $records = [];
        public $recordsByLevel = [];
        /**
         * @inheritdoc
         */
        public function log($level, $message, array $context = [])
        {
        }
        public function hasRecords($level)
        {
        }
        public function hasRecord($record, $level)
        {
        }
        public function hasRecordThatContains($message, $level)
        {
        }
        public function hasRecordThatMatches($regex, $level)
        {
        }
        public function hasRecordThatPasses(callable $predicate, $level)
        {
        }
        public function __call($method, $args)
        {
        }
        public function reset()
        {
        }
    }
    /**
     * Provides a base test class for ensuring compliance with the LoggerInterface.
     *
     * Implementors can extend the class and implement abstract methods to run this
     * as part of their test suite.
     */
    abstract class LoggerInterfaceTest extends \PHPUnit\Framework\TestCase
    {
        /**
         * @return LoggerInterface
         */
        public abstract function getLogger();
        /**
         * This must return the log messages in order.
         *
         * The simple formatting of the messages is: "<LOG LEVEL> <MESSAGE>".
         *
         * Example ->error('Foo') would yield "error Foo".
         *
         * @return string[]
         */
        public abstract function getLogs();
        public function testImplements()
        {
        }
        /**
         * @dataProvider provideLevelsAndMessages
         */
        public function testLogsAtAllLevels($level, $message)
        {
        }
        public function provideLevelsAndMessages()
        {
        }
        /**
         * @expectedException \Psr\Log\InvalidArgumentException
         */
        public function testThrowsOnInvalidLevel()
        {
        }
        public function testContextReplacement()
        {
        }
        public function testObjectCastToString()
        {
        }
        public function testContextCanContainAnything()
        {
        }
        public function testContextExceptionKeyCanBeExceptionOrOtherValues()
        {
        }
    }
    /**
     * This class is internal and does not follow the BC promise.
     *
     * Do NOT use this class in any way.
     *
     * @internal
     */
    class DummyTest
    {
        public function __toString()
        {
        }
    }
}
namespace Psr\Log {
    /**
     * Basic Implementation of LoggerAwareInterface.
     */
    trait LoggerAwareTrait
    {
        /**
         * The logger instance.
         *
         * @var LoggerInterface|null
         */
        protected $logger;
        /**
         * Sets a logger.
         *
         * @param LoggerInterface $logger
         */
        public function setLogger(\Psr\Log\LoggerInterface $logger)
        {
        }
    }
}
namespace {
    class ICL_AdminNotifier
    {
        public static function init()
        {
        }
        public static function add_script()
        {
        }
        /**
         * @param string $message
         * @param string $type
         */
        public static function add_instant_message($message, $type = '')
        {
        }
        /**
         * @param int $message_id
         *
         * @return bool|array
         */
        public static function get_message($message_id)
        {
        }
        public static function message_id_exists($message_id)
        {
        }
        /**
         * @param array<mixed> $args
         *    Args attributes:
         *    string        id - An unique identifier for the message
         *    string        msg - The actual message
         *    string        type (optional) - Any string: it will be used as css class fro the message container. A typical value is 'error', but the following strings can be also used: icl-admin-message-information, icl-admin-message-warning
         *    array         classes (optional) - Display the notice only on specific url(s)
         *    bool          hide (optional) - Enable the toggle link to permanently hide the notice
         *    bool          hide_per_user (optional) - Enable the toggle link per user basis (overrides hide option)
         *    bool          dismiss (optional) - Enable the dismiss option
         *    bool          dismiss_per_user (optional) - Enable the dismiss option per user basis (overrides dismiss option)
         *    bool|string   fallback_text (optional) - A message to show when the notice gets hidden
         *    bool|string   fallback_type (optional) - The message type to use in the fallback message (@see $type)
         *    array         fallback_classes (optional) - The message type to use in the fallback message (@see $type)
         *    bool|string   group (optional) - A way to group messages: when displaying messages stored with this method, it's possible to filter them by group (@see ICL_AdminNotifier::displayMessages)
         *    bool          admin_notice (optional) - Hook the rendering to the 'admin_notice' action
         *    string|array  limit_to_page (optional) - Display the notice only on specific page(s)
         */
        public static function add_message($args)
        {
        }
        public static function is_user_dismissed($message_data)
        {
        }
        public static function is_globally_dismissed($message_data)
        {
        }
        public static function is_globally_hidden($message_data)
        {
        }
        public static function hide_message()
        {
        }
        public static function get_message_id()
        {
        }
        public static function show_message()
        {
        }
        public static function engage_message()
        {
        }
        public static function remove_message($message_id)
        {
        }
        public static function remove_message_group($message_group)
        {
        }
        public static function display_messages($group = \false)
        {
        }
        /**
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::display_message()
         *
         * @param bool $group
         */
        public static function displayMessages($group = \false)
        {
        }
        public static function admin_notices()
        {
        }
        public static function display_instant_message($message, $type = 'information', $class = \false, $return = \false, $fadeout = \false)
        {
        }
        static function troubleshooting_js_data($data)
        {
        }
        static function has_hidden_messages()
        {
        }
        static function troubleshooting()
        {
        }
        static function remove_notifications()
        {
        }
        static function restore_notifications()
        {
        }
        /** Deprecated methods */
        /**
         * @param int $message_id
         *
         * @return bool
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::remove_message()
         *
         */
        public static function removeMessage($message_id)
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         */
        public static function hideMessage()
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         *
         * @param string $message
         * @param string $type
         */
        public static function addInstantMessage($message, $type = '')
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         */
        public static function addScript()
        {
        }
        /**
         * @deprecated deprecated @since version 3.2
         *
         * @param string $id               An unique identifier for the message
         * @param string $msg              The actual message
         * @param string $type             (optional) Any string: it will be used as css class fro the message container. A typical value is 'error', but the following strings can be also used: icl-admin-message-information, icl-admin-message-warning
         * @param bool   $hide             (optional) Enable the toggle link to permanently hide the notice
         * @param bool   $fallback_message (optional) A message to show when the notice gets hidden
         * @param bool   $fallback_type    (optional) The message type to use in the fallback message (@see $type)
         * @param bool   $group            (optional) A way to group messages: when displaying messages stored with this method, it's possible to filter them by group (@see ICL_AdminNotifier::displayMessages)
         * @param bool   $admin_notice     (optional) Hook the rendering to the 'admin_notice' action
         */
        public static function addMessage($id, $msg, $type = '', $hide = \true, $fallback_message = \false, $fallback_type = \false, $group = \false, $admin_notice = \false)
        {
        }
        /**
         * @param string $message
         * @param string $type
         * @param bool   $class
         * @param bool   $return
         *
         * @return string
         * @deprecated deprecated @since version 3.2. Use ICL_AdminNotifier::display_instant_message()
         *
         */
        public static function displayInstantMessage($message, $type = 'information', $class = \false, $return = \false)
        {
        }
        /**
         * @param string $message
         *
         * @return string
         */
        public static function sanitize_and_format_message($message)
        {
        }
    }
}
namespace WPML\Core\Twig\Error {
    /**
     * Twig base exception.
     *
     * This exception class and its children must only be used when
     * an error occurs during the loading of a template, when a syntax error
     * is detected in a template, or when rendering a template. Other
     * errors must use regular PHP exception classes (like when the template
     * cache directory is not writable for instance).
     *
     * To help debugging template issues, this class tracks the original template
     * name and line where the error occurred.
     *
     * Whenever possible, you must set these information (original template name
     * and line number) yourself by passing them to the constructor. If some or all
     * these information are not available from where you throw the exception, then
     * this class will guess them automatically (when the line number is set to -1
     * and/or the name is set to null). As this is a costly operation, this
     * can be disabled by passing false for both the name and the line number
     * when creating a new instance of this class.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Error extends \Exception
    {
        protected $lineno;
        // to be renamed to name in 2.0
        protected $filename;
        protected $rawMessage;
        /**
         * Constructor.
         *
         * Set the line number to -1 to enable its automatic guessing.
         * Set the name to null to enable its automatic guessing.
         *
         * @param string             $message  The error message
         * @param int                $lineno   The template line where the error occurred
         * @param Source|string|null $source   The source context where the error occurred
         * @param \Exception         $previous The previous exception
         */
        public function __construct($message, $lineno = -1, $source = null, \Exception $previous = null)
        {
        }
        /**
         * Gets the raw message.
         *
         * @return string The raw message
         */
        public function getRawMessage()
        {
        }
        /**
         * Gets the logical name where the error occurred.
         *
         * @return string The name
         *
         * @deprecated since 1.27 (to be removed in 2.0). Use getSourceContext() instead.
         */
        public function getTemplateFile()
        {
        }
        /**
         * Sets the logical name where the error occurred.
         *
         * @param string $name The name
         *
         * @deprecated since 1.27 (to be removed in 2.0). Use setSourceContext() instead.
         */
        public function setTemplateFile($name)
        {
        }
        /**
         * Gets the logical name where the error occurred.
         *
         * @return string The name
         *
         * @deprecated since 1.29 (to be removed in 2.0). Use getSourceContext() instead.
         */
        public function getTemplateName()
        {
        }
        /**
         * Sets the logical name where the error occurred.
         *
         * @param string $name The name
         *
         * @deprecated since 1.29 (to be removed in 2.0). Use setSourceContext() instead.
         */
        public function setTemplateName($name)
        {
        }
        /**
         * Gets the template line where the error occurred.
         *
         * @return int The template line
         */
        public function getTemplateLine()
        {
        }
        /**
         * Sets the template line where the error occurred.
         *
         * @param int $lineno The template line
         */
        public function setTemplateLine($lineno)
        {
        }
        /**
         * Gets the source context of the Twig template where the error occurred.
         *
         * @return Source|null
         */
        public function getSourceContext()
        {
        }
        /**
         * Sets the source context of the Twig template where the error occurred.
         */
        public function setSourceContext(\WPML\Core\Twig\Source $source = null)
        {
        }
        public function guess()
        {
        }
        public function appendMessage($rawMessage)
        {
        }
        /**
         * @internal
         */
        protected function updateRepr()
        {
        }
        /**
         * @internal
         */
        protected function guessTemplateInfo()
        {
        }
    }
}
namespace WPML\Core\Twig\Sandbox {
    /**
     * Exception thrown when a security error occurs at runtime.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SecurityError extends \WPML\Core\Twig\Error\Error
    {
    }
    /**
     * Exception thrown when a not allowed class property is used in a template.
     *
     * @author Kit Burton-Senior <mail@kitbs.com>
     */
    class SecurityNotAllowedPropertyError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
        public function __construct($message, $className, $propertyName, $lineno = -1, $filename = null, \Exception $previous = null)
        {
        }
        public function getClassName()
        {
        }
        public function getPropertyName()
        {
        }
    }
    /**
     * Exception thrown when a not allowed class method is used in a template.
     *
     * @author Kit Burton-Senior <mail@kitbs.com>
     */
    class SecurityNotAllowedMethodError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
        public function __construct($message, $className, $methodName, $lineno = -1, $filename = null, \Exception $previous = null)
        {
        }
        public function getClassName()
        {
        }
        public function getMethodName()
        {
        }
    }
    /**
     * Exception thrown when a not allowed tag is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     */
    class SecurityNotAllowedTagError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
        public function __construct($message, $tagName, $lineno = -1, $filename = null, \Exception $previous = null)
        {
        }
        public function getTagName()
        {
        }
    }
    /**
     * Exception thrown when a not allowed function is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     */
    class SecurityNotAllowedFunctionError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
        public function __construct($message, $functionName, $lineno = -1, $filename = null, \Exception $previous = null)
        {
        }
        public function getFunctionName()
        {
        }
    }
    /**
     * Exception thrown when a not allowed filter is used in a template.
     *
     * @author Martin Hasoň <martin.hason@gmail.com>
     */
    class SecurityNotAllowedFilterError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
        public function __construct($message, $functionName, $lineno = -1, $filename = null, \Exception $previous = null)
        {
        }
        public function getFilterName()
        {
        }
    }
    /**
     * Interface that all security policy classes must implements.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface SecurityPolicyInterface
    {
        public function checkSecurity($tags, $filters, $functions);
        public function checkMethodAllowed($obj, $method);
        public function checkPropertyAllowed($obj, $method);
    }
    /**
     * Represents a security policy which need to be enforced when sandbox mode is enabled.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SecurityPolicy implements \WPML\Core\Twig\Sandbox\SecurityPolicyInterface
    {
        protected $allowedTags;
        protected $allowedFilters;
        protected $allowedMethods;
        protected $allowedProperties;
        protected $allowedFunctions;
        public function __construct(array $allowedTags = [], array $allowedFilters = [], array $allowedMethods = [], array $allowedProperties = [], array $allowedFunctions = [])
        {
        }
        public function setAllowedTags(array $tags)
        {
        }
        public function setAllowedFilters(array $filters)
        {
        }
        public function setAllowedMethods(array $methods)
        {
        }
        public function setAllowedProperties(array $properties)
        {
        }
        public function setAllowedFunctions(array $functions)
        {
        }
        public function checkSecurity($tags, $filters, $functions)
        {
        }
        public function checkMethodAllowed($obj, $method)
        {
        }
        public function checkPropertyAllowed($obj, $property)
        {
        }
    }
}
namespace WPML\Core\Twig\Loader {
    /**
     * Adds a getSourceContext() method for loaders.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.27 (to be removed in 3.0)
     */
    interface SourceContextLoaderInterface
    {
        /**
         * Returns the source context for a given template logical name.
         *
         * @param string $name The template logical name
         *
         * @return Source
         *
         * @throws LoaderError When $name is not found
         */
        public function getSourceContext($name);
    }
    /**
     * Interface all loaders must implement.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface LoaderInterface
    {
        /**
         * Gets the source code of a template, given its name.
         *
         * @param string $name The name of the template to load
         *
         * @return string The template source code
         *
         * @throws LoaderError When $name is not found
         *
         * @deprecated since 1.27 (to be removed in 2.0), implement Twig\Loader\SourceContextLoaderInterface
         */
        public function getSource($name);
        /**
         * Gets the cache key to use for the cache for a given template name.
         *
         * @param string $name The name of the template to load
         *
         * @return string The cache key
         *
         * @throws LoaderError When $name is not found
         */
        public function getCacheKey($name);
        /**
         * Returns true if the template is still fresh.
         *
         * @param string $name The template name
         * @param int    $time Timestamp of the last modification time of the
         *                     cached template
         *
         * @return bool true if the template is fresh, false otherwise
         *
         * @throws LoaderError When $name is not found
         */
        public function isFresh($name, $time);
    }
    /**
     * Adds an exists() method for loaders.
     *
     * @author Florin Patan <florinpatan@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface ExistsLoaderInterface
    {
        /**
         * Check if we have the source code of a template, given its name.
         *
         * @param string $name The name of the template to check if we can load
         *
         * @return bool If the template source code is handled by this loader or not
         */
        public function exists($name);
    }
    /**
     * Loads a template from an array.
     *
     * When using this loader with a cache mechanism, you should know that a new cache
     * key is generated each time a template content "changes" (the cache key being the
     * source code of the template). If you don't want to see your cache grows out of
     * control, you need to take care of clearing the old cache file by yourself.
     *
     * This loader should only be used for unit testing.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ArrayLoader implements \WPML\Core\Twig\Loader\LoaderInterface, \WPML\Core\Twig\Loader\ExistsLoaderInterface, \WPML\Core\Twig\Loader\SourceContextLoaderInterface
    {
        protected $templates = [];
        /**
         * @param array $templates An array of templates (keys are the names, and values are the source code)
         */
        public function __construct(array $templates = [])
        {
        }
        /**
         * Adds or overrides a template.
         *
         * @param string $name     The template name
         * @param string $template The template source
         */
        public function setTemplate($name, $template)
        {
        }
        public function getSource($name)
        {
        }
        public function getSourceContext($name)
        {
        }
        public function exists($name)
        {
        }
        public function getCacheKey($name)
        {
        }
        public function isFresh($name, $time)
        {
        }
    }
    /**
     * Loads template from the filesystem.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class FilesystemLoader implements \WPML\Core\Twig\Loader\LoaderInterface, \WPML\Core\Twig\Loader\ExistsLoaderInterface, \WPML\Core\Twig\Loader\SourceContextLoaderInterface
    {
        /** Identifier of the main namespace. */
        const MAIN_NAMESPACE = '__main__';
        protected $paths = [];
        protected $cache = [];
        protected $errorCache = [];
        /**
         * @param string|array $paths    A path or an array of paths where to look for templates
         * @param string|null  $rootPath The root path common to all relative paths (null for getcwd())
         */
        public function __construct($paths = [], $rootPath = null)
        {
        }
        /**
         * Returns the paths to the templates.
         *
         * @param string $namespace A path namespace
         *
         * @return array The array of paths where to look for templates
         */
        public function getPaths($namespace = self::MAIN_NAMESPACE)
        {
        }
        /**
         * Returns the path namespaces.
         *
         * The main namespace is always defined.
         *
         * @return array The array of defined namespaces
         */
        public function getNamespaces()
        {
        }
        /**
         * Sets the paths where templates are stored.
         *
         * @param string|array $paths     A path or an array of paths where to look for templates
         * @param string       $namespace A path namespace
         */
        public function setPaths($paths, $namespace = self::MAIN_NAMESPACE)
        {
        }
        /**
         * Adds a path where templates are stored.
         *
         * @param string $path      A path where to look for templates
         * @param string $namespace A path namespace
         *
         * @throws LoaderError
         */
        public function addPath($path, $namespace = self::MAIN_NAMESPACE)
        {
        }
        /**
         * Prepends a path where templates are stored.
         *
         * @param string $path      A path where to look for templates
         * @param string $namespace A path namespace
         *
         * @throws LoaderError
         */
        public function prependPath($path, $namespace = self::MAIN_NAMESPACE)
        {
        }
        public function getSource($name)
        {
        }
        public function getSourceContext($name)
        {
        }
        public function getCacheKey($name)
        {
        }
        public function exists($name)
        {
        }
        public function isFresh($name, $time)
        {
        }
        /**
         * Checks if the template can be found.
         *
         * @param string $name The template name
         *
         * @return string|false|null The template name or false/null
         */
        protected function findTemplate($name)
        {
        }
        protected function parseName($name, $default = self::MAIN_NAMESPACE)
        {
        }
        protected function normalizeName($name)
        {
        }
        protected function validateName($name)
        {
        }
    }
    /**
     * Loads templates from other loaders.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ChainLoader implements \WPML\Core\Twig\Loader\LoaderInterface, \WPML\Core\Twig\Loader\ExistsLoaderInterface, \WPML\Core\Twig\Loader\SourceContextLoaderInterface
    {
        protected $loaders = [];
        /**
         * @param LoaderInterface[] $loaders
         */
        public function __construct(array $loaders = [])
        {
        }
        public function addLoader(\WPML\Core\Twig\Loader\LoaderInterface $loader)
        {
        }
        /**
         * @return LoaderInterface[]
         */
        public function getLoaders()
        {
        }
        public function getSource($name)
        {
        }
        public function getSourceContext($name)
        {
        }
        public function exists($name)
        {
        }
        public function getCacheKey($name)
        {
        }
        public function isFresh($name, $time)
        {
        }
    }
}
namespace WPML\Core\Twig\RuntimeLoader {
    /**
     * Creates runtime implementations for Twig elements (filters/functions/tests).
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface RuntimeLoaderInterface
    {
        /**
         * Creates the runtime implementation of a Twig element (filter/function/test).
         *
         * @param string $class A runtime class
         *
         * @return object|null The runtime instance or null if the loader does not know how to create the runtime for this class
         */
        public function load($class);
    }
    /**
     * Lazily loads Twig runtime implementations from a PSR-11 container.
     *
     * Note that the runtime services MUST use their class names as identifiers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Robin Chalas <robin.chalas@gmail.com>
     */
    class ContainerRuntimeLoader implements \WPML\Core\Twig\RuntimeLoader\RuntimeLoaderInterface
    {
        public function __construct(\WPML\Core\Psr\Container\ContainerInterface $container)
        {
        }
        public function load($class)
        {
        }
    }
    /**
     * Lazy loads the runtime implementations for a Twig element.
     *
     * @author Robin Chalas <robin.chalas@gmail.com>
     */
    class FactoryRuntimeLoader implements \WPML\Core\Twig\RuntimeLoader\RuntimeLoaderInterface
    {
        /**
         * @param array $map An array where keys are class names and values factory callables
         */
        public function __construct($map = [])
        {
        }
        public function load($class)
        {
        }
    }
}
namespace WPML\Core {
    /**
     * Represents a node in the AST.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface Twig_NodeInterface extends \Countable, \IteratorAggregate
    {
        /**
         * Compiles the node to PHP.
         */
        public function compile(\WPML\Core\Twig\Compiler $compiler);
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getLine();
        public function getNodeTag();
    }
}
namespace WPML\Core\Twig\Node {
    /**
     * Represents a node in the AST.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Node implements \WPML\Core\Twig_NodeInterface
    {
        protected $nodes;
        protected $attributes;
        protected $lineno;
        protected $tag;
        /**
         * @param array  $nodes      An array of named nodes
         * @param array  $attributes An array of attributes (should not be nodes)
         * @param int    $lineno     The line number
         * @param string $tag        The tag name associated with the Node
         */
        public function __construct(array $nodes = [], array $attributes = [], $lineno = 0, $tag = null)
        {
        }
        public function __toString()
        {
        }
        /**
         * @deprecated since 1.16.1 (to be removed in 2.0)
         */
        public function toXml($asDom = \false)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function getTemplateLine()
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getLine()
        {
        }
        public function getNodeTag()
        {
        }
        /**
         * @return bool
         */
        public function hasAttribute($name)
        {
        }
        /**
         * @return mixed
         */
        public function getAttribute($name)
        {
        }
        /**
         * @param string $name
         * @param mixed  $value
         */
        public function setAttribute($name, $value)
        {
        }
        public function removeAttribute($name)
        {
        }
        /**
         * @return bool
         */
        public function hasNode($name)
        {
        }
        /**
         * @return Node
         */
        public function getNode($name)
        {
        }
        public function setNode($name, $node = null)
        {
        }
        public function removeNode($name)
        {
        }
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
        #[\ReturnTypeWillChange]
        public function getIterator()
        {
        }
        public function setTemplateName($name)
        {
        }
        public function getTemplateName()
        {
        }
        public function setSourceContext(\WPML\Core\Twig\Source $source)
        {
        }
        public function getSourceContext()
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function setFilename($name)
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getFilename()
        {
        }
    }
    /**
     * Represents a spaceless node.
     *
     * It removes spaces between HTML tags.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SpacelessNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $body, $lineno, $tag = 'spaceless')
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a deprecated node.
     *
     * @author Yonel Ceruto <yonelceruto@gmail.com>
     */
    class DeprecatedNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an import node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ImportNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, \WPML\Core\Twig\Node\Expression\AbstractExpression $var, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an if node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class IfNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $tests, \WPML\Core\Twig_NodeInterface $else = null, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a displayable node in the AST.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface NodeOutputInterface
    {
    }
    /**
     * Represents a block call node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BlockReferenceNode extends \WPML\Core\Twig\Node\Node implements \WPML\Core\Twig\Node\NodeOutputInterface
    {
        public function __construct($name, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a node that outputs an expression.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class PrintNode extends \WPML\Core\Twig\Node\Node implements \WPML\Core\Twig\Node\NodeOutputInterface
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Adds a check for the __toString() method when the variable is an object and the sandbox is activated.
     *
     * When there is a simple Print statement, like {{ article }},
     * and if the sandbox is enabled, we need to check that the __toString()
     * method is allowed if 'article' is an object.
     *
     * Not used anymore, to be deprecated in 2.x and removed in 3.0
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SandboxedPrintNode extends \WPML\Core\Twig\Node\PrintNode
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        /**
         * Removes node filters.
         *
         * This is mostly needed when another visitor adds filters (like the escaper one).
         *
         * @return Node
         */
        protected function removeNodeFilter(\WPML\Core\Twig\Node\Node $node)
        {
        }
    }
    /**
     * Represents a nested "with" scope.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class WithNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig\Node\Node $body, \WPML\Core\Twig\Node\Node $variables = null, $only = \false, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a text node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TextNode extends \WPML\Core\Twig\Node\Node implements \WPML\Core\Twig\Node\NodeOutputInterface
    {
        public function __construct($data, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Internal node used by the for node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ForLoopNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a module node.
     *
     * Consider this class as being final. If you need to customize the behavior of
     * the generated class, consider adding nodes to the following nodes: display_start,
     * display_end, constructor_start, constructor_end, and class_end.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ModuleNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $body, \WPML\Core\Twig\Node\Expression\AbstractExpression $parent = null, \WPML\Core\Twig_NodeInterface $blocks, \WPML\Core\Twig_NodeInterface $macros, \WPML\Core\Twig_NodeInterface $traits, $embeddedTemplates, $name, $source = '')
        {
        }
        public function setIndex($index)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileTemplate(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileGetParent(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileClassHeader(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileConstructor(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileDisplay(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileClassFooter(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileMacros(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileGetTemplateName(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileIsTraitable(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileDebugInfo(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileGetSource(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileGetSourceContext(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileLoadTemplate(\WPML\Core\Twig\Compiler $compiler, $node, $var)
        {
        }
    }
    /**
     * Represents a flush node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class FlushNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($lineno, $tag)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an include node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class IncludeNode extends \WPML\Core\Twig\Node\Node implements \WPML\Core\Twig\Node\NodeOutputInterface
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, $variables, $only, $ignoreMissing, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function addGetTemplate(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function addTemplateArguments(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an embed node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EmbedNode extends \WPML\Core\Twig\Node\IncludeNode
    {
        // we don't inject the module to avoid node visitors to traverse it twice (as it will be already visited in the main module)
        public function __construct($name, $index, \WPML\Core\Twig\Node\Expression\AbstractExpression $variables = null, $only = \false, $ignoreMissing = \false, $lineno, $tag = null)
        {
        }
        protected function addGetTemplate(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a node that captures any nested displayable nodes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface NodeCaptureInterface
    {
    }
}
namespace WPML\Core\Twig\Node\Expression {
    /**
     * Abstract class for all nodes that represents an expression.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class AbstractExpression extends \WPML\Core\Twig\Node\Node
    {
    }
    abstract class CallExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        protected function compileCallable(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        protected function compileArguments(\WPML\Core\Twig\Compiler $compiler, $isArray = \false)
        {
        }
        protected function getArguments($callable, $arguments)
        {
        }
        protected function normalizeName($name)
        {
        }
    }
    class FunctionExpression extends \WPML\Core\Twig\Node\Expression\CallExpression
    {
        public function __construct($name, \WPML\Core\Twig_NodeInterface $arguments, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an arrow function.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ArrowFunctionExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, \WPML\Core\Twig\Node\Node $names, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class FilterExpression extends \WPML\Core\Twig\Node\Expression\CallExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Node\Expression\ConstantExpression $filterName, \WPML\Core\Twig_NodeInterface $arguments, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class ArrayExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        protected $index;
        public function __construct(array $elements, $lineno)
        {
        }
        public function getKeyValuePairs()
        {
        }
        public function hasElement(\WPML\Core\Twig\Node\Expression\AbstractExpression $key)
        {
        }
        public function addElement(\WPML\Core\Twig\Node\Expression\AbstractExpression $value, \WPML\Core\Twig\Node\Expression\AbstractExpression $key = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class TestExpression extends \WPML\Core\Twig\Node\Expression\CallExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $node, $name, \WPML\Core\Twig_NodeInterface $arguments = null, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class TempNameExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct($name, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression\Filter {
    /**
     * Returns the value or the default value when it is undefined or empty.
     *
     *  {{ var.foo|default('foo item on var is not defined') }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DefaultFilter extends \WPML\Core\Twig\Node\Expression\FilterExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Node\Expression\ConstantExpression $filterName, \WPML\Core\Twig_NodeInterface $arguments, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression\Binary {
    abstract class AbstractBinary extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $left, \WPML\Core\Twig_NodeInterface $right, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public abstract function operator(\WPML\Core\Twig\Compiler $compiler);
    }
    class StartsWithBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class BitwiseXorBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class ModBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class DivBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class BitwiseAndBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class GreaterBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class EndsWithBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class RangeBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class LessBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class MatchesBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class EqualBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class PowerBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class InBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class NotEqualBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class MulBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class AndBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class BitwiseOrBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class SubBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class GreaterEqualBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class LessEqualBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class OrBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class FloorDivBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class NotInBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class ConcatBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class AddBinary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression {
    /**
     * Represents a block call node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BlockReferenceExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        /**
         * @param Node|null $template
         */
        public function __construct(\WPML\Core\Twig_NodeInterface $name, $template = null, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * @internal
     */
    final class InlinePrint extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Node $node, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression\Unary {
    abstract class AbstractUnary extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $node, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public abstract function operator(\WPML\Core\Twig\Compiler $compiler);
    }
    class NegUnary extends \WPML\Core\Twig\Node\Expression\Unary\AbstractUnary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class NotUnary extends \WPML\Core\Twig\Node\Expression\Unary\AbstractUnary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class PosUnary extends \WPML\Core\Twig\Node\Expression\Unary\AbstractUnary
    {
        public function operator(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression {
    class NameExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        protected $specialVars = ['_self' => '$this', '_context' => '$context', '_charset' => '$this->env->getCharset()'];
        public function __construct($name, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
        public function isSpecial()
        {
        }
        public function isSimple()
        {
        }
    }
    class ConditionalExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr1, \WPML\Core\Twig\Node\Expression\AbstractExpression $expr2, \WPML\Core\Twig\Node\Expression\AbstractExpression $expr3, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class NullCoalesceExpression extends \WPML\Core\Twig\Node\Expression\ConditionalExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $left, \WPML\Core\Twig_NodeInterface $right, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class AssignNameExpression extends \WPML\Core\Twig\Node\Expression\NameExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class MethodCallExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $node, $method, \WPML\Core\Twig\Node\Expression\ArrayExpression $arguments, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class GetAttrExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $node, \WPML\Core\Twig\Node\Expression\AbstractExpression $attribute, \WPML\Core\Twig\Node\Expression\AbstractExpression $arguments = null, $type, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a parent node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ParentExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct($name, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression\Test {
    /**
     * Checks if a number is even.
     *
     *  {{ var is even }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EvenTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if a number is odd.
     *
     *  {{ var is odd }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class OddTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if a variable is defined in the current context.
     *
     *    {# defined works with variable names and variable attributes #}
     *    {% if foo is defined %}
     *        {# ... #}
     *    {% endif %}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DefinedTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $node, $name, \WPML\Core\Twig_NodeInterface $arguments = null, $lineno)
        {
        }
        protected function changeIgnoreStrictCheck(\WPML\Core\Twig\Node\Expression\GetAttrExpression $node)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if a variable is divisible by a number.
     *
     *  {% if loop.index is divisible by(3) %}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DivisiblebyTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if a variable is the same as another one (=== in PHP).
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SameasTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if a variable is the exact same value as a constant.
     *
     *    {% if post.status is constant('Post::PUBLISHED') %}
     *      the status attribute is exactly the same as Post::PUBLISHED
     *    {% endif %}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ConstantTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks that a variable is null.
     *
     *  {{ var is none }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class NullTest extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node\Expression {
    class ConstantExpression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct($value, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Node {
    /**
     * Represents a for node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class ForNode extends \WPML\Core\Twig\Node\Node
    {
        protected $loop;
        public function __construct(\WPML\Core\Twig\Node\Expression\AssignNameExpression $keyTarget, \WPML\Core\Twig\Node\Expression\AssignNameExpression $valueTarget, \WPML\Core\Twig\Node\Expression\AbstractExpression $seq, \WPML\Core\Twig\Node\Expression\AbstractExpression $ifexpr = null, \WPML\Core\Twig_NodeInterface $body, \WPML\Core\Twig_NodeInterface $else = null, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Checks if casting an expression to __toString() is allowed by the sandbox.
     *
     * For instance, when there is a simple Print statement, like {{ article }},
     * and if the sandbox is enabled, we need to check that the __toString()
     * method is allowed if 'article' is an object. The same goes for {{ article|upper }}
     * or {{ random(article) }}
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class CheckToStringNode extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a set node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SetNode extends \WPML\Core\Twig\Node\Node implements \WPML\Core\Twig\Node\NodeCaptureInterface
    {
        public function __construct($capture, \WPML\Core\Twig_NodeInterface $names, \WPML\Core\Twig_NodeInterface $values, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a do node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class DoNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig\Node\Expression\AbstractExpression $expr, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a body node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BodyNode extends \WPML\Core\Twig\Node\Node
    {
    }
    /**
     * Represents a sandbox node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SandboxNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct(\WPML\Core\Twig_NodeInterface $body, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class CheckSecurityNode extends \WPML\Core\Twig\Node\Node
    {
        protected $usedFilters;
        protected $usedTags;
        protected $usedFunctions;
        public function __construct(array $usedFilters, array $usedTags, array $usedFunctions)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * @internal
     */
    class SetTempNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($name, $lineno)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a macro node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class MacroNode extends \WPML\Core\Twig\Node\Node
    {
        const VARARGS_NAME = 'varargs';
        public function __construct($name, \WPML\Core\Twig_NodeInterface $body, \WPML\Core\Twig_NodeInterface $arguments, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents an autoescape node.
     *
     * The value is the escaping strategy (can be html, js, ...)
     *
     * The true value is equivalent to html.
     *
     * If autoescaping is disabled, then the value is false.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class AutoEscapeNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($value, \WPML\Core\Twig_NodeInterface $body, $lineno, $tag = 'autoescape')
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a block node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class BlockNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($name, \WPML\Core\Twig_NodeInterface $body, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig {
    /**
     * Represents a token stream.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TokenStream
    {
        protected $tokens;
        protected $current = 0;
        protected $filename;
        /**
         * @param array       $tokens An array of tokens
         * @param string|null $name   The name of the template which tokens are associated with
         * @param string|null $source The source code associated with the tokens
         */
        public function __construct(array $tokens, $name = null, $source = null)
        {
        }
        public function __toString()
        {
        }
        public function injectTokens(array $tokens)
        {
        }
        /**
         * Sets the pointer to the next token and returns the old one.
         *
         * @return Token
         */
        public function next()
        {
        }
        /**
         * Tests a token, sets the pointer to the next one and returns it or throws a syntax error.
         *
         * @return Token|null The next token if the condition is true, null otherwise
         */
        public function nextIf($primary, $secondary = null)
        {
        }
        /**
         * Tests a token and returns it or throws a syntax error.
         *
         * @return Token
         */
        public function expect($type, $value = null, $message = null)
        {
        }
        /**
         * Looks at the next token.
         *
         * @param int $number
         *
         * @return Token
         */
        public function look($number = 1)
        {
        }
        /**
         * Tests the current token.
         *
         * @return bool
         */
        public function test($primary, $secondary = null)
        {
        }
        /**
         * Checks if end of stream was reached.
         *
         * @return bool
         */
        public function isEOF()
        {
        }
        /**
         * @return Token
         */
        public function getCurrent()
        {
        }
        /**
         * Gets the name associated with this stream (null if not defined).
         *
         * @return string|null
         *
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getFilename()
        {
        }
        /**
         * Gets the source code associated with this stream.
         *
         * @return string
         *
         * @internal Don't use this as it might be empty depending on the environment configuration
         *
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getSource()
        {
        }
        /**
         * Gets the source associated with this stream.
         *
         * @return Source
         *
         * @internal
         */
        public function getSourceContext()
        {
        }
    }
    /**
     * Exposes a template to userland.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    final class TemplateWrapper
    {
        /**
         * This method is for internal use only and should never be called
         * directly (use \\WPML\\Core\\Twig\\Environment::load() instead).
         *
         * @internal
         */
        public function __construct(\WPML\Core\Twig\Environment $env, \WPML\Core\Twig\Template $template)
        {
        }
        /**
         * Renders the template.
         *
         * @param array $context An array of parameters to pass to the template
         *
         * @return string The rendered template
         */
        public function render($context = [])
        {
        }
        /**
         * Displays the template.
         *
         * @param array $context An array of parameters to pass to the template
         */
        public function display($context = [])
        {
        }
        /**
         * Checks if a block is defined.
         *
         * @param string $name    The block name
         * @param array  $context An array of parameters to pass to the template
         *
         * @return bool
         */
        public function hasBlock($name, $context = [])
        {
        }
        /**
         * Returns defined block names in the template.
         *
         * @param array $context An array of parameters to pass to the template
         *
         * @return string[] An array of defined template block names
         */
        public function getBlockNames($context = [])
        {
        }
        /**
         * Renders a template block.
         *
         * @param string $name    The block name to render
         * @param array  $context An array of parameters to pass to the template
         *
         * @return string The rendered block
         */
        public function renderBlock($name, $context = [])
        {
        }
        /**
         * Displays a template block.
         *
         * @param string $name    The block name to render
         * @param array  $context An array of parameters to pass to the template
         */
        public function displayBlock($name, $context = [])
        {
        }
        /**
         * @return Source
         */
        public function getSourceContext()
        {
        }
        /**
         * @return string
         */
        public function getTemplateName()
        {
        }
        /**
         * @internal
         *
         * @return Template
         */
        public function unwrap()
        {
        }
    }
    /**
     * Stores the Twig configuration.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Environment
    {
        const VERSION = '1.42.4';
        const VERSION_ID = 14204;
        const MAJOR_VERSION = 1;
        const MINOR_VERSION = 42;
        const RELEASE_VERSION = 4;
        const EXTRA_VERSION = '';
        protected $charset;
        protected $loader;
        protected $debug;
        protected $autoReload;
        protected $cache;
        protected $lexer;
        protected $parser;
        protected $compiler;
        protected $baseTemplateClass;
        protected $extensions;
        protected $parsers;
        protected $visitors;
        protected $filters;
        protected $tests;
        protected $functions;
        protected $globals;
        protected $runtimeInitialized = \false;
        protected $extensionInitialized = \false;
        protected $loadedTemplates;
        protected $strictVariables;
        protected $unaryOperators;
        protected $binaryOperators;
        protected $templateClassPrefix = '\\WPML\\Core\\__TwigTemplate_';
        protected $functionCallbacks = [];
        protected $filterCallbacks = [];
        protected $staging;
        /**
         * Constructor.
         *
         * Available options:
         *
         *  * debug: When set to true, it automatically set "auto_reload" to true as
         *           well (default to false).
         *
         *  * charset: The charset used by the templates (default to UTF-8).
         *
         *  * base_template_class: The base template class to use for generated
         *                         templates (default to \Twig\Template).
         *
         *  * cache: An absolute path where to store the compiled templates,
         *           a \Twig\Cache\CacheInterface implementation,
         *           or false to disable compilation cache (default).
         *
         *  * auto_reload: Whether to reload the template if the original source changed.
         *                 If you don't provide the auto_reload option, it will be
         *                 determined automatically based on the debug value.
         *
         *  * strict_variables: Whether to ignore invalid variables in templates
         *                      (default to false).
         *
         *  * autoescape: Whether to enable auto-escaping (default to html):
         *                  * false: disable auto-escaping
         *                  * true: equivalent to html
         *                  * html, js: set the autoescaping to one of the supported strategies
         *                  * name: set the autoescaping strategy based on the template name extension
         *                  * PHP callback: a PHP callback that returns an escaping strategy based on the template "name"
         *
         *  * optimizations: A flag that indicates which optimizations to apply
         *                   (default to -1 which means that all optimizations are enabled;
         *                   set it to 0 to disable).
         */
        public function __construct(\WPML\Core\Twig\Loader\LoaderInterface $loader = null, $options = [])
        {
        }
        /**
         * Gets the base template class for compiled templates.
         *
         * @return string The base template class name
         */
        public function getBaseTemplateClass()
        {
        }
        /**
         * Sets the base template class for compiled templates.
         *
         * @param string $class The base template class name
         */
        public function setBaseTemplateClass($class)
        {
        }
        /**
         * Enables debugging mode.
         */
        public function enableDebug()
        {
        }
        /**
         * Disables debugging mode.
         */
        public function disableDebug()
        {
        }
        /**
         * Checks if debug mode is enabled.
         *
         * @return bool true if debug mode is enabled, false otherwise
         */
        public function isDebug()
        {
        }
        /**
         * Enables the auto_reload option.
         */
        public function enableAutoReload()
        {
        }
        /**
         * Disables the auto_reload option.
         */
        public function disableAutoReload()
        {
        }
        /**
         * Checks if the auto_reload option is enabled.
         *
         * @return bool true if auto_reload is enabled, false otherwise
         */
        public function isAutoReload()
        {
        }
        /**
         * Enables the strict_variables option.
         */
        public function enableStrictVariables()
        {
        }
        /**
         * Disables the strict_variables option.
         */
        public function disableStrictVariables()
        {
        }
        /**
         * Checks if the strict_variables option is enabled.
         *
         * @return bool true if strict_variables is enabled, false otherwise
         */
        public function isStrictVariables()
        {
        }
        /**
         * Gets the current cache implementation.
         *
         * @param bool $original Whether to return the original cache option or the real cache instance
         *
         * @return CacheInterface|string|false A Twig\Cache\CacheInterface implementation,
         *                                     an absolute path to the compiled templates,
         *                                     or false to disable cache
         */
        public function getCache($original = \true)
        {
        }
        /**
         * Sets the current cache implementation.
         *
         * @param CacheInterface|string|false $cache A Twig\Cache\CacheInterface implementation,
         *                                           an absolute path to the compiled templates,
         *                                           or false to disable cache
         */
        public function setCache($cache)
        {
        }
        /**
         * Gets the cache filename for a given template.
         *
         * @param string $name The template name
         *
         * @return string|false The cache file name or false when caching is disabled
         *
         * @deprecated since 1.22 (to be removed in 2.0)
         */
        public function getCacheFilename($name)
        {
        }
        /**
         * Gets the template class associated with the given string.
         *
         * The generated template class is based on the following parameters:
         *
         *  * The cache key for the given template;
         *  * The currently enabled extensions;
         *  * Whether the Twig C extension is available or not;
         *  * PHP version;
         *  * Twig version;
         *  * Options with what environment was created.
         *
         * @param string   $name  The name for which to calculate the template class name
         * @param int|null $index The index if it is an embedded template
         *
         * @return string The template class name
         */
        public function getTemplateClass($name, $index = null)
        {
        }
        /**
         * Gets the template class prefix.
         *
         * @return string The template class prefix
         *
         * @deprecated since 1.22 (to be removed in 2.0)
         */
        public function getTemplateClassPrefix()
        {
        }
        /**
         * Renders a template.
         *
         * @param string|TemplateWrapper $name    The template name
         * @param array                  $context An array of parameters to pass to the template
         *
         * @return string The rendered template
         *
         * @throws LoaderError  When the template cannot be found
         * @throws SyntaxError  When an error occurred during compilation
         * @throws RuntimeError When an error occurred during rendering
         */
        public function render($name, array $context = [])
        {
        }
        /**
         * Displays a template.
         *
         * @param string|TemplateWrapper $name    The template name
         * @param array                  $context An array of parameters to pass to the template
         *
         * @throws LoaderError  When the template cannot be found
         * @throws SyntaxError  When an error occurred during compilation
         * @throws RuntimeError When an error occurred during rendering
         */
        public function display($name, array $context = [])
        {
        }
        /**
         * Loads a template.
         *
         * @param string|TemplateWrapper|\Twig\Template $name The template name
         *
         * @throws LoaderError  When the template cannot be found
         * @throws RuntimeError When a previously generated cache is corrupted
         * @throws SyntaxError  When an error occurred during compilation
         *
         * @return TemplateWrapper
         */
        public function load($name)
        {
        }
        /**
         * Loads a template internal representation.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param string $name  The template name
         * @param int    $index The index if it is an embedded template
         *
         * @return \Twig_TemplateInterface A template instance representing the given template name
         *
         * @throws LoaderError  When the template cannot be found
         * @throws RuntimeError When a previously generated cache is corrupted
         * @throws SyntaxError  When an error occurred during compilation
         *
         * @internal
         */
        public function loadTemplate($name, $index = null)
        {
        }
        /**
         * @internal
         */
        public function loadClass($cls, $name, $index = null)
        {
        }
        /**
         * Creates a template from source.
         *
         * This method should not be used as a generic way to load templates.
         *
         * @param string $template The template source
         * @param string $name     An optional name of the template to be used in error messages
         *
         * @return TemplateWrapper A template instance representing the given template name
         *
         * @throws LoaderError When the template cannot be found
         * @throws SyntaxError When an error occurred during compilation
         */
        public function createTemplate($template, $name = null)
        {
        }
        /**
         * Returns true if the template is still fresh.
         *
         * Besides checking the loader for freshness information,
         * this method also checks if the enabled extensions have
         * not changed.
         *
         * @param string $name The template name
         * @param int    $time The last modification time of the cached template
         *
         * @return bool true if the template is fresh, false otherwise
         */
        public function isTemplateFresh($name, $time)
        {
        }
        /**
         * Tries to load a template consecutively from an array.
         *
         * Similar to load() but it also accepts instances of \Twig\Template and
         * \Twig\TemplateWrapper, and an array of templates where each is tried to be loaded.
         *
         * @param string|Template|\Twig\TemplateWrapper|array $names A template or an array of templates to try consecutively
         *
         * @return TemplateWrapper|Template
         *
         * @throws LoaderError When none of the templates can be found
         * @throws SyntaxError When an error occurred during compilation
         */
        public function resolveTemplate($names)
        {
        }
        /**
         * Clears the internal template cache.
         *
         * @deprecated since 1.18.3 (to be removed in 2.0)
         */
        public function clearTemplateCache()
        {
        }
        /**
         * Clears the template cache files on the filesystem.
         *
         * @deprecated since 1.22 (to be removed in 2.0)
         */
        public function clearCacheFiles()
        {
        }
        /**
         * Gets the Lexer instance.
         *
         * @return \Twig_LexerInterface
         *
         * @deprecated since 1.25 (to be removed in 2.0)
         */
        public function getLexer()
        {
        }
        public function setLexer(\WPML\Core\Twig_LexerInterface $lexer)
        {
        }
        /**
         * Tokenizes a source code.
         *
         * @param string|Source $source The template source code
         * @param string        $name   The template name (deprecated)
         *
         * @return TokenStream
         *
         * @throws SyntaxError When the code is syntactically wrong
         */
        public function tokenize($source, $name = null)
        {
        }
        /**
         * Gets the Parser instance.
         *
         * @return \Twig_ParserInterface
         *
         * @deprecated since 1.25 (to be removed in 2.0)
         */
        public function getParser()
        {
        }
        public function setParser(\WPML\Core\Twig_ParserInterface $parser)
        {
        }
        /**
         * Converts a token stream to a node tree.
         *
         * @return ModuleNode
         *
         * @throws SyntaxError When the token stream is syntactically or semantically wrong
         */
        public function parse(\WPML\Core\Twig\TokenStream $stream)
        {
        }
        /**
         * Gets the Compiler instance.
         *
         * @return \Twig_CompilerInterface
         *
         * @deprecated since 1.25 (to be removed in 2.0)
         */
        public function getCompiler()
        {
        }
        public function setCompiler(\WPML\Core\Twig_CompilerInterface $compiler)
        {
        }
        /**
         * Compiles a node and returns the PHP code.
         *
         * @return string The compiled PHP source code
         */
        public function compile(\WPML\Core\Twig_NodeInterface $node)
        {
        }
        /**
         * Compiles a template source code.
         *
         * @param string|Source $source The template source code
         * @param string        $name   The template name (deprecated)
         *
         * @return string The compiled PHP source code
         *
         * @throws SyntaxError When there was an error during tokenizing, parsing or compiling
         */
        public function compileSource($source, $name = null)
        {
        }
        public function setLoader(\WPML\Core\Twig\Loader\LoaderInterface $loader)
        {
        }
        /**
         * Gets the Loader instance.
         *
         * @return LoaderInterface
         */
        public function getLoader()
        {
        }
        /**
         * Sets the default template charset.
         *
         * @param string $charset The default charset
         */
        public function setCharset($charset)
        {
        }
        /**
         * Gets the default template charset.
         *
         * @return string The default charset
         */
        public function getCharset()
        {
        }
        /**
         * Initializes the runtime environment.
         *
         * @deprecated since 1.23 (to be removed in 2.0)
         */
        public function initRuntime()
        {
        }
        /**
         * Returns true if the given extension is registered.
         *
         * @param string $class The extension class name
         *
         * @return bool Whether the extension is registered or not
         */
        public function hasExtension($class)
        {
        }
        /**
         * Adds a runtime loader.
         */
        public function addRuntimeLoader(\WPML\Core\Twig\RuntimeLoader\RuntimeLoaderInterface $loader)
        {
        }
        /**
         * Gets an extension by class name.
         *
         * @param string $class The extension class name
         *
         * @return ExtensionInterface
         */
        public function getExtension($class)
        {
        }
        /**
         * Returns the runtime implementation of a Twig element (filter/function/test).
         *
         * @param string $class A runtime class name
         *
         * @return object The runtime implementation
         *
         * @throws RuntimeError When the template cannot be found
         */
        public function getRuntime($class)
        {
        }
        public function addExtension(\WPML\Core\Twig\Extension\ExtensionInterface $extension)
        {
        }
        /**
         * Removes an extension by name.
         *
         * This method is deprecated and you should not use it.
         *
         * @param string $name The extension name
         *
         * @deprecated since 1.12 (to be removed in 2.0)
         */
        public function removeExtension($name)
        {
        }
        /**
         * Registers an array of extensions.
         *
         * @param array $extensions An array of extensions
         */
        public function setExtensions(array $extensions)
        {
        }
        /**
         * Returns all registered extensions.
         *
         * @return ExtensionInterface[] An array of extensions (keys are for internal usage only and should not be relied on)
         */
        public function getExtensions()
        {
        }
        public function addTokenParser(\WPML\Core\Twig\TokenParser\TokenParserInterface $parser)
        {
        }
        /**
         * Gets the registered Token Parsers.
         *
         * @return \Twig_TokenParserBrokerInterface
         *
         * @internal
         */
        public function getTokenParsers()
        {
        }
        /**
         * Gets registered tags.
         *
         * Be warned that this method cannot return tags defined by \Twig_TokenParserBrokerInterface classes.
         *
         * @return TokenParserInterface[]
         *
         * @internal
         */
        public function getTags()
        {
        }
        public function addNodeVisitor(\WPML\Core\Twig\NodeVisitor\NodeVisitorInterface $visitor)
        {
        }
        /**
         * Gets the registered Node Visitors.
         *
         * @return NodeVisitorInterface[]
         *
         * @internal
         */
        public function getNodeVisitors()
        {
        }
        /**
         * Registers a Filter.
         *
         * @param string|TwigFilter                $name   The filter name or a \Twig_SimpleFilter instance
         * @param \Twig_FilterInterface|TwigFilter $filter
         */
        public function addFilter($name, $filter = null)
        {
        }
        /**
         * Get a filter by name.
         *
         * Subclasses may override this method and load filters differently;
         * so no list of filters is available.
         *
         * @param string $name The filter name
         *
         * @return \Twig_Filter|false
         *
         * @internal
         */
        public function getFilter($name)
        {
        }
        public function registerUndefinedFilterCallback($callable)
        {
        }
        /**
         * Gets the registered Filters.
         *
         * Be warned that this method cannot return filters defined with registerUndefinedFilterCallback.
         *
         * @return \Twig_FilterInterface[]
         *
         * @see registerUndefinedFilterCallback
         *
         * @internal
         */
        public function getFilters()
        {
        }
        /**
         * Registers a Test.
         *
         * @param string|TwigTest              $name The test name or a \Twig_SimpleTest instance
         * @param \Twig_TestInterface|TwigTest $test A \Twig_TestInterface instance or a \Twig_SimpleTest instance
         */
        public function addTest($name, $test = null)
        {
        }
        /**
         * Gets the registered Tests.
         *
         * @return \Twig_TestInterface[]
         *
         * @internal
         */
        public function getTests()
        {
        }
        /**
         * Gets a test by name.
         *
         * @param string $name The test name
         *
         * @return \Twig_Test|false
         *
         * @internal
         */
        public function getTest($name)
        {
        }
        /**
         * Registers a Function.
         *
         * @param string|TwigFunction                  $name     The function name or a \Twig_SimpleFunction instance
         * @param \Twig_FunctionInterface|TwigFunction $function
         */
        public function addFunction($name, $function = null)
        {
        }
        /**
         * Get a function by name.
         *
         * Subclasses may override this method and load functions differently;
         * so no list of functions is available.
         *
         * @param string $name function name
         *
         * @return \Twig_Function|false
         *
         * @internal
         */
        public function getFunction($name)
        {
        }
        public function registerUndefinedFunctionCallback($callable)
        {
        }
        /**
         * Gets registered functions.
         *
         * Be warned that this method cannot return functions defined with registerUndefinedFunctionCallback.
         *
         * @return \Twig_FunctionInterface[]
         *
         * @see registerUndefinedFunctionCallback
         *
         * @internal
         */
        public function getFunctions()
        {
        }
        /**
         * Registers a Global.
         *
         * New globals can be added before compiling or rendering a template;
         * but after, you can only update existing globals.
         *
         * @param string $name  The global name
         * @param mixed  $value The global value
         */
        public function addGlobal($name, $value)
        {
        }
        /**
         * Gets the registered Globals.
         *
         * @return array An array of globals
         *
         * @internal
         */
        public function getGlobals()
        {
        }
        /**
         * Merges a context with the defined globals.
         *
         * @param array $context An array representing the context
         *
         * @return array The context merged with the globals
         */
        public function mergeGlobals(array $context)
        {
        }
        /**
         * Gets the registered unary Operators.
         *
         * @return array An array of unary operators
         *
         * @internal
         */
        public function getUnaryOperators()
        {
        }
        /**
         * Gets the registered binary Operators.
         *
         * @return array An array of binary operators
         *
         * @internal
         */
        public function getBinaryOperators()
        {
        }
        /**
         * @deprecated since 1.23 (to be removed in 2.0)
         */
        public function computeAlternatives($name, $items)
        {
        }
        /**
         * @internal
         */
        protected function initGlobals()
        {
        }
        /**
         * @internal
         */
        protected function initExtensions()
        {
        }
        /**
         * @internal
         */
        protected function initExtension(\WPML\Core\Twig\Extension\ExtensionInterface $extension)
        {
        }
        /**
         * @deprecated since 1.22 (to be removed in 2.0)
         */
        protected function writeCacheFile($file, $content)
        {
        }
    }
    /**
     * A node traverser.
     *
     * It visits all nodes and their children and calls the given visitor for each.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class NodeTraverser
    {
        protected $env;
        protected $visitors = [];
        /**
         * @param NodeVisitorInterface[] $visitors
         */
        public function __construct(\WPML\Core\Twig\Environment $env, array $visitors = [])
        {
        }
        public function addVisitor(\WPML\Core\Twig\NodeVisitor\NodeVisitorInterface $visitor)
        {
        }
        /**
         * Traverses a node and calls the registered visitors.
         *
         * @return \Twig_NodeInterface
         */
        public function traverse(\WPML\Core\Twig_NodeInterface $node)
        {
        }
        protected function traverseForVisitor(\WPML\Core\Twig\NodeVisitor\NodeVisitorInterface $visitor, \WPML\Core\Twig_NodeInterface $node = null)
        {
        }
    }
    /**
     * Marks a content as safe.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Markup implements \Countable
    {
        protected $content;
        protected $charset;
        public function __construct($content, $charset)
        {
        }
        public function __toString()
        {
        }
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
    }
}
namespace WPML\Core\Twig\Extension {
    /**
     * Enables usage of the deprecated Twig\Extension\AbstractExtension::getGlobals() method.
     *
     * Explicitly implement this interface if you really need to implement the
     * deprecated getGlobals() method in your extensions.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface GlobalsInterface
    {
    }
    /**
     * Interface implemented by extension classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface ExtensionInterface
    {
        /**
         * Initializes the runtime environment.
         *
         * This is where you can load some file that contains filter functions for instance.
         *
         * @deprecated since 1.23 (to be removed in 2.0), implement \Twig_Extension_InitRuntimeInterface instead
         */
        public function initRuntime(\WPML\Core\Twig\Environment $environment);
        /**
         * Returns the token parser instances to add to the existing list.
         *
         * @return TokenParserInterface[]
         */
        public function getTokenParsers();
        /**
         * Returns the node visitor instances to add to the existing list.
         *
         * @return NodeVisitorInterface[]
         */
        public function getNodeVisitors();
        /**
         * Returns a list of filters to add to the existing list.
         *
         * @return TwigFilter[]
         */
        public function getFilters();
        /**
         * Returns a list of tests to add to the existing list.
         *
         * @return TwigTest[]
         */
        public function getTests();
        /**
         * Returns a list of functions to add to the existing list.
         *
         * @return TwigFunction[]
         */
        public function getFunctions();
        /**
         * Returns a list of operators to add to the existing list.
         *
         * @return array<array> First array of unary operators, second array of binary operators
         */
        public function getOperators();
        /**
         * Returns a list of global variables to add to the existing list.
         *
         * @return array An array of global variables
         *
         * @deprecated since 1.23 (to be removed in 2.0), implement \Twig_Extension_GlobalsInterface instead
         */
        public function getGlobals();
        /**
         * Returns the name of the extension.
         *
         * @return string The extension name
         *
         * @deprecated since 1.26 (to be removed in 2.0), not used anymore internally
         */
        public function getName();
    }
    abstract class AbstractExtension implements \WPML\Core\Twig\Extension\ExtensionInterface
    {
        /**
         * @deprecated since 1.23 (to be removed in 2.0), implement \Twig_Extension_InitRuntimeInterface instead
         */
        public function initRuntime(\WPML\Core\Twig\Environment $environment)
        {
        }
        public function getTokenParsers()
        {
        }
        public function getNodeVisitors()
        {
        }
        public function getFilters()
        {
        }
        public function getTests()
        {
        }
        public function getFunctions()
        {
        }
        public function getOperators()
        {
        }
        /**
         * @deprecated since 1.23 (to be removed in 2.0), implement \Twig_Extension_GlobalsInterface instead
         */
        public function getGlobals()
        {
        }
        /**
         * @deprecated since 1.26 (to be removed in 2.0), not used anymore internally
         */
        public function getName()
        {
        }
    }
    /**
     * Internal class.
     *
     * This class is used by \Twig\Environment as a staging area and must not be used directly.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    class StagingExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        protected $functions = [];
        protected $filters = [];
        protected $visitors = [];
        protected $tokenParsers = [];
        protected $globals = [];
        protected $tests = [];
        public function addFunction($name, $function)
        {
        }
        public function getFunctions()
        {
        }
        public function addFilter($name, $filter)
        {
        }
        public function getFilters()
        {
        }
        public function addNodeVisitor(\WPML\Core\Twig\NodeVisitor\NodeVisitorInterface $visitor)
        {
        }
        public function getNodeVisitors()
        {
        }
        public function addTokenParser(\WPML\Core\Twig\TokenParser\TokenParserInterface $parser)
        {
        }
        public function getTokenParsers()
        {
        }
        public function addGlobal($name, $value)
        {
        }
        public function getGlobals()
        {
        }
        public function addTest($name, $test)
        {
        }
        public function getTests()
        {
        }
        public function getName()
        {
        }
    }
    /**
     * @author Grégoire Pineau <lyrixx@lyrixx.info>
     */
    interface RuntimeExtensionInterface
    {
    }
    /**
     * @final
     */
    class SandboxExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        protected $sandboxedGlobally;
        protected $sandboxed;
        protected $policy;
        public function __construct(\WPML\Core\Twig\Sandbox\SecurityPolicyInterface $policy, $sandboxed = \false)
        {
        }
        public function getTokenParsers()
        {
        }
        public function getNodeVisitors()
        {
        }
        public function enableSandbox()
        {
        }
        public function disableSandbox()
        {
        }
        public function isSandboxed()
        {
        }
        public function isSandboxedGlobally()
        {
        }
        public function setSecurityPolicy(\WPML\Core\Twig\Sandbox\SecurityPolicyInterface $policy)
        {
        }
        public function getSecurityPolicy()
        {
        }
        public function checkSecurity($tags, $filters, $functions)
        {
        }
        public function checkMethodAllowed($obj, $method)
        {
        }
        public function checkPropertyAllowed($obj, $method)
        {
        }
        public function ensureToStringAllowed($obj)
        {
        }
        public function getName()
        {
        }
    }
    /**
     * @final
     */
    class DebugExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        public function getFunctions()
        {
        }
        public function getName()
        {
        }
    }
    class ProfilerExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        public function __construct(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
        public function enter(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
        public function leave(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
        public function getNodeVisitors()
        {
        }
        public function getName()
        {
        }
    }
    /**
     * @final
     */
    class CoreExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        protected $dateFormats = ['F j, Y H:i', '%d days'];
        protected $numberFormat = [0, '.', ','];
        protected $timezone = null;
        protected $escapers = [];
        /**
         * Defines a new escaper to be used via the escape filter.
         *
         * @param string   $strategy The strategy name that should be used as a strategy in the escape call
         * @param callable $callable A valid PHP callable
         */
        public function setEscaper($strategy, $callable)
        {
        }
        /**
         * Gets all defined escapers.
         *
         * @return array An array of escapers
         */
        public function getEscapers()
        {
        }
        /**
         * Sets the default format to be used by the date filter.
         *
         * @param string $format             The default date format string
         * @param string $dateIntervalFormat The default date interval format string
         */
        public function setDateFormat($format = null, $dateIntervalFormat = null)
        {
        }
        /**
         * Gets the default format to be used by the date filter.
         *
         * @return array The default date format string and the default date interval format string
         */
        public function getDateFormat()
        {
        }
        /**
         * Sets the default timezone to be used by the date filter.
         *
         * @param \DateTimeZone|string $timezone The default timezone string or a \DateTimeZone object
         */
        public function setTimezone($timezone)
        {
        }
        /**
         * Gets the default timezone to be used by the date filter.
         *
         * @return \DateTimeZone The default timezone currently in use
         */
        public function getTimezone()
        {
        }
        /**
         * Sets the default format to be used by the number_format filter.
         *
         * @param int    $decimal      the number of decimal places to use
         * @param string $decimalPoint the character(s) to use for the decimal point
         * @param string $thousandSep  the character(s) to use for the thousands separator
         */
        public function setNumberFormat($decimal, $decimalPoint, $thousandSep)
        {
        }
        /**
         * Get the default format used by the number_format filter.
         *
         * @return array The arguments for number_format()
         */
        public function getNumberFormat()
        {
        }
        public function getTokenParsers()
        {
        }
        public function getFilters()
        {
        }
        public function getFunctions()
        {
        }
        public function getTests()
        {
        }
        public function getOperators()
        {
        }
        public function getName()
        {
        }
    }
    /**
     * Enables usage of the deprecated Twig\Extension\AbstractExtension::initRuntime() method.
     *
     * Explicitly implement this interface if you really need to implement the
     * deprecated initRuntime() method in your extensions.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface InitRuntimeInterface
    {
    }
    /**
     * @final
     */
    class EscaperExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        protected $defaultStrategy;
        /**
         * @param string|false|callable $defaultStrategy An escaping strategy
         *
         * @see setDefaultStrategy()
         */
        public function __construct($defaultStrategy = 'html')
        {
        }
        public function getTokenParsers()
        {
        }
        public function getNodeVisitors()
        {
        }
        public function getFilters()
        {
        }
        /**
         * Sets the default strategy to use when not defined by the user.
         *
         * The strategy can be a valid PHP callback that takes the template
         * name as an argument and returns the strategy to use.
         *
         * @param string|false|callable $defaultStrategy An escaping strategy
         */
        public function setDefaultStrategy($defaultStrategy)
        {
        }
        /**
         * Gets the default strategy to use when not defined by the user.
         *
         * @param string $name The template name
         *
         * @return string|false The default strategy to use for the template
         */
        public function getDefaultStrategy($name)
        {
        }
        public function getName()
        {
        }
    }
    /**
     * @final
     */
    class OptimizerExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        protected $optimizers;
        public function __construct($optimizers = -1)
        {
        }
        public function getNodeVisitors()
        {
        }
        public function getName()
        {
        }
    }
    /**
     * @final
     */
    class StringLoaderExtension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
        public function getFunctions()
        {
        }
        public function getName()
        {
        }
    }
}
namespace WPML\Core {
    /*
     * This file is part of Twig.
     *
     * (c) Fabien Potencier
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */
    /**
     * Interface implemented by compiler classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface Twig_CompilerInterface
    {
        /**
         * Compiles a node.
         *
         * @return $this
         */
        public function compile(\WPML\Core\Twig_NodeInterface $node);
        /**
         * Gets the current PHP code after compilation.
         *
         * @return string The PHP code
         */
        public function getSource();
    }
}
namespace WPML\Core\Twig {
    /**
     * Compiles a node to PHP code.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Compiler implements \WPML\Core\Twig_CompilerInterface
    {
        protected $lastLine;
        protected $source;
        protected $indentation;
        protected $env;
        protected $debugInfo = [];
        protected $sourceOffset;
        protected $sourceLine;
        protected $filename;
        public function __construct(\WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * @deprecated since 1.25 (to be removed in 2.0)
         */
        public function getFilename()
        {
        }
        /**
         * Returns the environment instance related to this compiler.
         *
         * @return Environment
         */
        public function getEnvironment()
        {
        }
        /**
         * Gets the current PHP code after compilation.
         *
         * @return string The PHP code
         */
        public function getSource()
        {
        }
        /**
         * Compiles a node.
         *
         * @param int $indentation The current indentation
         *
         * @return $this
         */
        public function compile(\WPML\Core\Twig_NodeInterface $node, $indentation = 0)
        {
        }
        public function subcompile(\WPML\Core\Twig_NodeInterface $node, $raw = \true)
        {
        }
        /**
         * Adds a raw string to the compiled code.
         *
         * @param string $string The string
         *
         * @return $this
         */
        public function raw($string)
        {
        }
        /**
         * Writes a string to the compiled code by adding indentation.
         *
         * @return $this
         */
        public function write()
        {
        }
        /**
         * Appends an indentation to the current PHP code after compilation.
         *
         * @return $this
         *
         * @deprecated since 1.27 (to be removed in 2.0).
         */
        public function addIndentation()
        {
        }
        /**
         * Adds a quoted string to the compiled code.
         *
         * @param string $value The string
         *
         * @return $this
         */
        public function string($value)
        {
        }
        /**
         * Returns a PHP representation of a given value.
         *
         * @param mixed $value The value to convert
         *
         * @return $this
         */
        public function repr($value)
        {
        }
        /**
         * Adds debugging information.
         *
         * @return $this
         */
        public function addDebugInfo(\WPML\Core\Twig_NodeInterface $node)
        {
        }
        public function getDebugInfo()
        {
        }
        /**
         * Indents the generated code.
         *
         * @param int $step The number of indentation to add
         *
         * @return $this
         */
        public function indent($step = 1)
        {
        }
        /**
         * Outdents the generated code.
         *
         * @param int $step The number of indentation to remove
         *
         * @return $this
         *
         * @throws \LogicException When trying to outdent too much so the indentation would become negative
         */
        public function outdent($step = 1)
        {
        }
        public function getVarName()
        {
        }
    }
}
namespace WPML\Core\Twig\Cache {
    /**
     * Interface implemented by cache classes.
     *
     * It is highly recommended to always store templates on the filesystem to
     * benefit from the PHP opcode cache. This interface is mostly useful if you
     * need to implement a custom strategy for storing templates on the filesystem.
     *
     * @author Andrew Tch <andrew@noop.lv>
     */
    interface CacheInterface
    {
        /**
         * Generates a cache key for the given template class name.
         *
         * @param string $name      The template name
         * @param string $className The template class name
         *
         * @return string
         */
        public function generateKey($name, $className);
        /**
         * Writes the compiled template to cache.
         *
         * @param string $key     The cache key
         * @param string $content The template representation as a PHP class
         */
        public function write($key, $content);
        /**
         * Loads a template from the cache.
         *
         * @param string $key The cache key
         */
        public function load($key);
        /**
         * Returns the modification timestamp of a key.
         *
         * @param string $key The cache key
         *
         * @return int
         */
        public function getTimestamp($key);
    }
    /**
     * Implements a cache on the filesystem.
     *
     * @author Andrew Tch <andrew@noop.lv>
     */
    class FilesystemCache implements \WPML\Core\Twig\Cache\CacheInterface
    {
        const FORCE_BYTECODE_INVALIDATION = 1;
        /**
         * @param string $directory The root cache directory
         * @param int    $options   A set of options
         */
        public function __construct($directory, $options = 0)
        {
        }
        public function generateKey($name, $className)
        {
        }
        public function load($key)
        {
        }
        public function write($key, $content)
        {
        }
        public function getTimestamp($key)
        {
        }
    }
    /**
     * Implements a no-cache strategy.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class NullCache implements \WPML\Core\Twig\Cache\CacheInterface
    {
        public function generateKey($name, $className)
        {
        }
        public function write($key, $content)
        {
        }
        public function load($key)
        {
        }
        public function getTimestamp($key)
        {
        }
    }
}
namespace WPML\Core\Twig {
    /**
     * Represents a template function.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TwigFunction
    {
        protected $name;
        protected $callable;
        protected $options;
        protected $arguments = [];
        public function __construct($name, $callable, array $options = [])
        {
        }
        public function getName()
        {
        }
        public function getCallable()
        {
        }
        public function getNodeClass()
        {
        }
        public function setArguments($arguments)
        {
        }
        public function getArguments()
        {
        }
        public function needsEnvironment()
        {
        }
        public function needsContext()
        {
        }
        public function getSafe(\WPML\Core\Twig\Node\Node $functionArgs)
        {
        }
        public function isVariadic()
        {
        }
        public function isDeprecated()
        {
        }
        public function getDeprecatedVersion()
        {
        }
        public function getAlternative()
        {
        }
    }
}
namespace WPML\Core\Twig\Util {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TemplateDirIterator extends \IteratorIterator
    {
        public function current()
        {
        }
        public function key()
        {
        }
    }
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class DeprecationCollector
    {
        public function __construct(\WPML\Core\Twig\Environment $twig)
        {
        }
        /**
         * Returns deprecations for templates contained in a directory.
         *
         * @param string $dir A directory where templates are stored
         * @param string $ext Limit the loaded templates by extension
         *
         * @return array An array of deprecations
         */
        public function collectDir($dir, $ext = '.twig')
        {
        }
        /**
         * Returns deprecations for passed templates.
         *
         * @param \Traversable $iterator An iterator of templates (where keys are template names and values the contents of the template)
         *
         * @return array An array of deprecations
         */
        public function collect(\Traversable $iterator)
        {
        }
        /**
         * @internal
         */
        public function errorHandler($type, $msg)
        {
        }
    }
}
namespace WPML\Core\Twig {
    /**
     * Parses expressions.
     *
     * This parser implements a "Precedence climbing" algorithm.
     *
     * @see https://www.engr.mun.ca/~theo/Misc/exp_parsing.htm
     * @see https://en.wikipedia.org/wiki/Operator-precedence_parser
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    class ExpressionParser
    {
        const OPERATOR_LEFT = 1;
        const OPERATOR_RIGHT = 2;
        protected $parser;
        protected $unaryOperators;
        protected $binaryOperators;
        public function __construct(\WPML\Core\Twig\Parser $parser, $env = null)
        {
        }
        public function parseExpression($precedence = 0, $allowArrow = \false)
        {
        }
        protected function getPrimary()
        {
        }
        protected function parseConditionalExpression($expr)
        {
        }
        protected function isUnary(\WPML\Core\Twig\Token $token)
        {
        }
        protected function isBinary(\WPML\Core\Twig\Token $token)
        {
        }
        public function parsePrimaryExpression()
        {
        }
        public function parseStringExpression()
        {
        }
        public function parseArrayExpression()
        {
        }
        public function parseHashExpression()
        {
        }
        public function parsePostfixExpression($node)
        {
        }
        public function getFunctionNode($name, $line)
        {
        }
        public function parseSubscriptExpression($node)
        {
        }
        public function parseFilterExpression($node)
        {
        }
        public function parseFilterExpressionRaw($node, $tag = null)
        {
        }
        /**
         * Parses arguments.
         *
         * @param bool $namedArguments Whether to allow named arguments or not
         * @param bool $definition     Whether we are parsing arguments for a function definition
         *
         * @return Node
         *
         * @throws SyntaxError
         */
        public function parseArguments($namedArguments = \false, $definition = \false, $allowArrow = \false)
        {
        }
        public function parseAssignmentExpression()
        {
        }
        public function parseMultitargetExpression()
        {
        }
        protected function getFunctionNodeClass($name, $line)
        {
        }
        protected function getFilterNodeClass($name, $line)
        {
        }
        // checks that the node only contains "constant" elements
        protected function checkConstantExpression(\WPML\Core\Twig_NodeInterface $node)
        {
        }
    }
    /**
     * Holds information about a non-compiled Twig template.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Source
    {
        /**
         * @param string $code The template source code
         * @param string $name The template logical name
         * @param string $path The filesystem path of the template if any
         */
        public function __construct($code, $name, $path = '')
        {
        }
        public function getCode()
        {
        }
        public function getName()
        {
        }
        public function getPath()
        {
        }
    }
    /**
     * Default autoescaping strategy based on file names.
     *
     * This strategy sets the HTML as the default autoescaping strategy,
     * but changes it based on the template name.
     *
     * Note that there is no runtime performance impact as the
     * default autoescaping strategy is set at compilation time.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class FileExtensionEscapingStrategy
    {
        /**
         * Guesses the best autoescaping strategy based on the file name.
         *
         * @param string $name The template name
         *
         * @return string|false The escaping strategy name to use or false to disable
         */
        public static function guess($name)
        {
        }
    }
}
namespace WPML\Core {
    /**
     * Interface implemented by parser classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface Twig_ParserInterface
    {
        /**
         * Converts a token stream to a node tree.
         *
         * @return ModuleNode
         *
         * @throws SyntaxError When the token stream is syntactically or semantically wrong
         */
        public function parse(\WPML\Core\Twig\TokenStream $stream);
    }
}
namespace WPML\Core\Twig {
    /**
     * Default parser implementation.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Parser implements \WPML\Core\Twig_ParserInterface
    {
        protected $stack = [];
        protected $stream;
        protected $parent;
        protected $handlers;
        protected $visitors;
        protected $expressionParser;
        protected $blocks;
        protected $blockStack;
        protected $macros;
        protected $env;
        protected $reservedMacroNames;
        protected $importedSymbols;
        protected $traits;
        protected $embeddedTemplates = [];
        public function __construct(\WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function getEnvironment()
        {
        }
        public function getVarName()
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0). Use $parser->getStream()->getSourceContext()->getPath() instead.
         */
        public function getFilename()
        {
        }
        public function parse(\WPML\Core\Twig\TokenStream $stream, $test = null, $dropNeedle = \false)
        {
        }
        public function subparse($test, $dropNeedle = \false)
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function addHandler($name, $class)
        {
        }
        /**
         * @deprecated since 1.27 (to be removed in 2.0)
         */
        public function addNodeVisitor(\WPML\Core\Twig\NodeVisitor\NodeVisitorInterface $visitor)
        {
        }
        public function getBlockStack()
        {
        }
        public function peekBlockStack()
        {
        }
        public function popBlockStack()
        {
        }
        public function pushBlockStack($name)
        {
        }
        public function hasBlock($name)
        {
        }
        public function getBlock($name)
        {
        }
        public function setBlock($name, \WPML\Core\Twig\Node\BlockNode $value)
        {
        }
        public function hasMacro($name)
        {
        }
        public function setMacro($name, \WPML\Core\Twig\Node\MacroNode $node)
        {
        }
        public function isReservedMacroName($name)
        {
        }
        public function addTrait($trait)
        {
        }
        public function hasTraits()
        {
        }
        public function embedTemplate(\WPML\Core\Twig\Node\ModuleNode $template)
        {
        }
        public function addImportedSymbol($type, $alias, $name = null, \WPML\Core\Twig\Node\Expression\AbstractExpression $node = null)
        {
        }
        public function getImportedSymbol($type, $alias)
        {
        }
        public function isMainScope()
        {
        }
        public function pushLocalScope()
        {
        }
        public function popLocalScope()
        {
        }
        /**
         * @return ExpressionParser
         */
        public function getExpressionParser()
        {
        }
        public function getParent()
        {
        }
        public function setParent($parent)
        {
        }
        /**
         * @return TokenStream
         */
        public function getStream()
        {
        }
        /**
         * @return Token
         */
        public function getCurrentToken()
        {
        }
        protected function filterBodyNodes(\WPML\Core\Twig_NodeInterface $node)
        {
        }
    }
    /**
     * Represents a template test.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TwigTest
    {
        protected $name;
        protected $callable;
        protected $options;
        public function __construct($name, $callable, array $options = [])
        {
        }
        public function getName()
        {
        }
        public function getCallable()
        {
        }
        public function getNodeClass()
        {
        }
        public function isVariadic()
        {
        }
        public function isDeprecated()
        {
        }
        public function getDeprecatedVersion()
        {
        }
        public function getAlternative()
        {
        }
        public function setArguments($arguments)
        {
        }
        public function getArguments()
        {
        }
    }
}
namespace WPML\Core\Twig\Profiler\Node {
    /**
     * Represents a profile enter node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EnterProfileNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($extensionName, $type, $name, $varName)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    /**
     * Represents a profile leave node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class LeaveProfileNode extends \WPML\Core\Twig\Node\Node
    {
        public function __construct($varName)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
}
namespace WPML\Core\Twig\Profiler {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class Profile implements \IteratorAggregate, \Serializable
    {
        const ROOT = 'ROOT';
        const BLOCK = 'block';
        const TEMPLATE = 'template';
        const MACRO = 'macro';
        public function __construct($template = 'main', $type = self::ROOT, $name = 'main')
        {
        }
        public function getTemplate()
        {
        }
        public function getType()
        {
        }
        public function getName()
        {
        }
        public function isRoot()
        {
        }
        public function isTemplate()
        {
        }
        public function isBlock()
        {
        }
        public function isMacro()
        {
        }
        public function getProfiles()
        {
        }
        public function addProfile(self $profile)
        {
        }
        /**
         * Returns the duration in microseconds.
         *
         * @return float
         */
        public function getDuration()
        {
        }
        /**
         * Returns the memory usage in bytes.
         *
         * @return int
         */
        public function getMemoryUsage()
        {
        }
        /**
         * Returns the peak memory usage in bytes.
         *
         * @return int
         */
        public function getPeakMemoryUsage()
        {
        }
        /**
         * Starts the profiling.
         */
        public function enter()
        {
        }
        /**
         * Stops the profiling.
         */
        public function leave()
        {
        }
        public function reset()
        {
        }
        public function getIterator()
        {
        }
        public function serialize()
        {
        }
        public function unserialize($data)
        {
        }
        /**
         * @internal
         */
        public function __serialize()
        {
        }
        /**
         * @internal
         */
        public function __unserialize(array $data)
        {
        }
    }
}
namespace WPML\Core\Twig\Profiler\Dumper {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class BaseDumper
    {
        public function dump(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
        protected abstract function formatTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix);
        protected abstract function formatNonTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix);
        protected abstract function formatTime(\WPML\Core\Twig\Profiler\Profile $profile, $percent);
    }
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class BlackfireDumper
    {
        public function dump(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
    }
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class TextDumper extends \WPML\Core\Twig\Profiler\Dumper\BaseDumper
    {
        protected function formatTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix)
        {
        }
        protected function formatNonTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix)
        {
        }
        protected function formatTime(\WPML\Core\Twig\Profiler\Profile $profile, $percent)
        {
        }
    }
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class HtmlDumper extends \WPML\Core\Twig\Profiler\Dumper\BaseDumper
    {
        public function dump(\WPML\Core\Twig\Profiler\Profile $profile)
        {
        }
        protected function formatTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix)
        {
        }
        protected function formatNonTemplate(\WPML\Core\Twig\Profiler\Profile $profile, $prefix)
        {
        }
        protected function formatTime(\WPML\Core\Twig\Profiler\Profile $profile, $percent)
        {
        }
    }
}
namespace WPML\Core\Twig\NodeVisitor {
    /**
     * Interface for node visitor classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface NodeVisitorInterface
    {
        /**
         * Called before child nodes are visited.
         *
         * @return \Twig_NodeInterface The modified node
         */
        public function enterNode(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env);
        /**
         * Called after child nodes are visited.
         *
         * @return \Twig_NodeInterface|false|null The modified node or null if the node must be removed
         */
        public function leaveNode(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env);
        /**
         * Returns the priority for this visitor.
         *
         * Priority should be between -10 and 10 (0 is the default).
         *
         * @return int The priority level
         */
        public function getPriority();
    }
    /**
     * Used to make node visitors compatible with Twig 1.x and 2.x.
     *
     * To be removed in Twig 3.1.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class AbstractNodeVisitor implements \WPML\Core\Twig\NodeVisitor\NodeVisitorInterface
    {
        public final function enterNode(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        public final function leaveNode(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * Called before child nodes are visited.
         *
         * @return Node The modified node
         */
        protected abstract function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env);
        /**
         * Called after child nodes are visited.
         *
         * @return Node|false|null The modified node or null if the node must be removed
         */
        protected abstract function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env);
    }
}
namespace WPML\Core\Twig\Profiler\NodeVisitor {
    /**
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class ProfilerNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
        public function __construct($extensionName)
        {
        }
        protected function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        public function getPriority()
        {
        }
    }
}
namespace WPML\Core\Twig\Error {
    /**
     * \Exception thrown when a syntax error occurs during lexing or parsing of a template.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SyntaxError extends \WPML\Core\Twig\Error\Error
    {
        /**
         * Tweaks the error message to include suggestions.
         *
         * @param string $name  The original name of the item that does not exist
         * @param array  $items An array of possible items
         */
        public function addSuggestions($name, array $items)
        {
        }
        /**
         * @internal
         *
         * To be merged with the addSuggestions() method in 2.0.
         */
        public static function computeAlternatives($name, $items)
        {
        }
    }
    /**
     * Exception thrown when an error occurs at runtime.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class RuntimeError extends \WPML\Core\Twig\Error\Error
    {
    }
    /**
     * Exception thrown when an error occurs during template loading.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class LoaderError extends \WPML\Core\Twig\Error\Error
    {
    }
}
namespace WPML\Core\Twig {
    /**
     * Represents a template filter.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class TwigFilter
    {
        protected $name;
        protected $callable;
        protected $options;
        protected $arguments = [];
        public function __construct($name, $callable, array $options = [])
        {
        }
        public function getName()
        {
        }
        public function getCallable()
        {
        }
        public function getNodeClass()
        {
        }
        public function setArguments($arguments)
        {
        }
        public function getArguments()
        {
        }
        public function needsEnvironment()
        {
        }
        public function needsContext()
        {
        }
        public function getSafe(\WPML\Core\Twig\Node\Node $filterArgs)
        {
        }
        public function getPreservesSafety()
        {
        }
        public function getPreEscape()
        {
        }
        public function isVariadic()
        {
        }
        public function isDeprecated()
        {
        }
        public function getDeprecatedVersion()
        {
        }
        public function getAlternative()
        {
        }
    }
    /**
     * Represents a Token.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class Token
    {
        protected $value;
        protected $type;
        protected $lineno;
        const EOF_TYPE = -1;
        const TEXT_TYPE = 0;
        const BLOCK_START_TYPE = 1;
        const VAR_START_TYPE = 2;
        const BLOCK_END_TYPE = 3;
        const VAR_END_TYPE = 4;
        const NAME_TYPE = 5;
        const NUMBER_TYPE = 6;
        const STRING_TYPE = 7;
        const OPERATOR_TYPE = 8;
        const PUNCTUATION_TYPE = 9;
        const INTERPOLATION_START_TYPE = 10;
        const INTERPOLATION_END_TYPE = 11;
        const ARROW_TYPE = 12;
        /**
         * @param int    $type   The type of the token
         * @param string $value  The token value
         * @param int    $lineno The line position in the source
         */
        public function __construct($type, $value, $lineno)
        {
        }
        public function __toString()
        {
        }
        /**
         * Tests the current token for a type and/or a value.
         *
         * Parameters may be:
         *  * just type
         *  * type and value (or array of possible values)
         *  * just value (or array of possible values) (NAME_TYPE is used as type)
         *
         * @param array|string|int  $type   The type to test
         * @param array|string|null $values The token value
         *
         * @return bool
         */
        public function test($type, $values = null)
        {
        }
        /**
         * @return int
         */
        public function getLine()
        {
        }
        /**
         * @return int
         */
        public function getType()
        {
        }
        /**
         * @return string
         */
        public function getValue()
        {
        }
        /**
         * Returns the constant representation (internal) of a given type.
         *
         * @param int  $type  The type as an integer
         * @param bool $short Whether to return a short representation or not
         *
         * @return string The string representation
         */
        public static function typeToString($type, $short = \false)
        {
        }
        /**
         * Returns the English representation of a given type.
         *
         * @param int $type The type as an integer
         *
         * @return string The string representation
         */
        public static function typeToEnglish($type)
        {
        }
    }
}
namespace WPML\Core\Twig\NodeVisitor {
    /**
     * Tries to optimize the AST.
     *
     * This visitor is always the last registered one.
     *
     * You can configure which optimizations you want to activate via the
     * optimizer mode.
     *
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class OptimizerNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
        const OPTIMIZE_ALL = -1;
        const OPTIMIZE_NONE = 0;
        const OPTIMIZE_FOR = 2;
        const OPTIMIZE_RAW_FILTER = 4;
        const OPTIMIZE_VAR_ACCESS = 8;
        protected $loops = [];
        protected $loopsTargets = [];
        protected $optimizers;
        protected $prependedNodes = [];
        protected $inABody = \false;
        /**
         * @param int $optimizers The optimizer mode
         */
        public function __construct($optimizers = -1)
        {
        }
        protected function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function optimizeVariables(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * Optimizes print nodes.
         *
         * It replaces:
         *
         *   * "echo $this->render(Parent)Block()" with "$this->display(Parent)Block()"
         *
         * @return \Twig_NodeInterface
         */
        protected function optimizePrintNode(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * Removes "raw" filters.
         *
         * @return \Twig_NodeInterface
         */
        protected function optimizeRawFilter(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * Optimizes "for" tag by removing the "loop" variable creation whenever possible.
         */
        protected function enterOptimizeFor(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * Optimizes "for" tag by removing the "loop" variable creation whenever possible.
         */
        protected function leaveOptimizeFor(\WPML\Core\Twig_NodeInterface $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function addLoopToCurrent()
        {
        }
        protected function addLoopToAll()
        {
        }
        public function getPriority()
        {
        }
    }
    /**
     * @final
     */
    class SafeAnalysisNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
        protected $data = [];
        protected $safeVars = [];
        public function setSafeVars($safeVars)
        {
        }
        public function getSafe(\WPML\Core\Twig_NodeInterface $node)
        {
        }
        protected function setSafe(\WPML\Core\Twig_NodeInterface $node, array $safe)
        {
        }
        protected function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function intersectSafe(array $a = null, array $b = null)
        {
        }
        public function getPriority()
        {
        }
    }
    /**
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class SandboxNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
        protected $inAModule = \false;
        protected $tags;
        protected $filters;
        protected $functions;
        protected function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        public function getPriority()
        {
        }
    }
    /**
     * @final
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class EscaperNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
        protected $statusStack = [];
        protected $blocks = [];
        protected $safeAnalysis;
        protected $traverser;
        protected $defaultStrategy = \false;
        protected $safeVars = [];
        public function __construct()
        {
        }
        protected function doEnterNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function doLeaveNode(\WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function escapePrintNode(\WPML\Core\Twig\Node\PrintNode $node, \WPML\Core\Twig\Environment $env, $type)
        {
        }
        protected function preEscapeFilterNode(\WPML\Core\Twig\Node\Expression\FilterExpression $filter, \WPML\Core\Twig\Environment $env)
        {
        }
        protected function isSafeFor($type, \WPML\Core\Twig_NodeInterface $expression, $env)
        {
        }
        protected function needEscaping(\WPML\Core\Twig\Environment $env)
        {
        }
        protected function getEscaperFilter($type, \WPML\Core\Twig_NodeInterface $node)
        {
        }
        public function getPriority()
        {
        }
    }
}
namespace WPML\Core {
    /**
     * Interface implemented by lexer classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface Twig_LexerInterface
    {
        /**
         * Tokenizes a source code.
         *
         * @param string|Source $code The source code
         * @param string        $name A unique identifier for the source code
         *
         * @return TokenStream
         *
         * @throws SyntaxError When the code is syntactically wrong
         */
        public function tokenize($code, $name = null);
    }
}
namespace WPML\Core\Twig {
    /**
     * Lexes a template string.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Lexer implements \WPML\Core\Twig_LexerInterface
    {
        protected $tokens;
        protected $code;
        protected $cursor;
        protected $lineno;
        protected $end;
        protected $state;
        protected $states;
        protected $brackets;
        protected $env;
        // to be renamed to $name in 2.0 (where it is private)
        protected $filename;
        protected $options;
        protected $regexes;
        protected $position;
        protected $positions;
        protected $currentVarBlockLine;
        const STATE_DATA = 0;
        const STATE_BLOCK = 1;
        const STATE_VAR = 2;
        const STATE_STRING = 3;
        const STATE_INTERPOLATION = 4;
        const REGEX_NAME = '/[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/A';
        const REGEX_NUMBER = '/[0-9]+(?:\\.[0-9]+)?([Ee][\\+\\-][0-9]+)?/A';
        const REGEX_STRING = '/"([^#"\\\\]*(?:\\\\.[^#"\\\\]*)*)"|\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\'/As';
        const REGEX_DQ_STRING_DELIM = '/"/A';
        const REGEX_DQ_STRING_PART = '/[^#"\\\\]*(?:(?:\\\\.|#(?!\\{))[^#"\\\\]*)*/As';
        const PUNCTUATION = '()[]{}?:.,|';
        public function __construct(\WPML\Core\Twig\Environment $env, array $options = [])
        {
        }
        public function tokenize($code, $name = null)
        {
        }
        protected function lexData()
        {
        }
        protected function lexBlock()
        {
        }
        protected function lexVar()
        {
        }
        protected function lexExpression()
        {
        }
        protected function lexRawData($tag)
        {
        }
        protected function lexComment()
        {
        }
        protected function lexString()
        {
        }
        protected function lexInterpolation()
        {
        }
        protected function pushToken($type, $value = '')
        {
        }
        protected function moveCursor($text)
        {
        }
        protected function getOperatorRegex()
        {
        }
        protected function pushState($state)
        {
        }
        protected function popState()
        {
        }
    }
}
namespace WPML\Core\Twig\TokenParser {
    /**
     * Interface implemented by token parsers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    interface TokenParserInterface
    {
        /**
         * Sets the parser associated with this token parser.
         */
        public function setParser(\WPML\Core\Twig\Parser $parser);
        /**
         * Parses a token and returns a node.
         *
         * @return \Twig_NodeInterface
         *
         * @throws SyntaxError
         */
        public function parse(\WPML\Core\Twig\Token $token);
        /**
         * Gets the tag name associated with this token parser.
         *
         * @return string The tag name
         */
        public function getTag();
    }
    /**
     * Base class for all token parsers.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    abstract class AbstractTokenParser implements \WPML\Core\Twig\TokenParser\TokenParserInterface
    {
        /**
         * @var Parser
         */
        protected $parser;
        public function setParser(\WPML\Core\Twig\Parser $parser)
        {
        }
    }
    /**
     * Defines a macro.
     *
     *   {% macro input(name, value, type, size) %}
     *      <input type="{{ type|default('text') }}" name="{{ name }}" value="{{ value|e }}" size="{{ size|default(20) }}" />
     *   {% endmacro %}
     *
     * @final
     */
    class MacroTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Evaluates an expression, discarding the returned value.
     *
     * @final
     */
    class DoTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Tests a condition.
     *
     *   {% if users %}
     *    <ul>
     *      {% for user in users %}
     *        <li>{{ user.username|e }}</li>
     *      {% endfor %}
     *    </ul>
     *   {% endif %}
     *
     * @final
     */
    class IfTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideIfFork(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideIfEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Imports macros.
     *
     *   {% from 'forms.html' import forms %}
     *
     * @final
     */
    class FromTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Flushes the output to the client.
     *
     * @see flush()
     *
     * @final
     */
    class FlushTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Loops over each item of a sequence.
     *
     *   <ul>
     *    {% for user in users %}
     *      <li>{{ user.username|e }}</li>
     *    {% endfor %}
     *   </ul>
     *
     * @final
     */
    class ForTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideForFork(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideForEnd(\WPML\Core\Twig\Token $token)
        {
        }
        // the loop variable cannot be used in the condition
        protected function checkLoopUsageCondition(\WPML\Core\Twig\TokenStream $stream, \WPML\Core\Twig_NodeInterface $node)
        {
        }
        // check usage of non-defined loop-items
        // it does not catch all problems (for instance when a for is included into another or when the variable is used in an include)
        protected function checkLoopUsageBody(\WPML\Core\Twig\TokenStream $stream, \WPML\Core\Twig_NodeInterface $node)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Applies filters on a section of a template.
     *
     *   {% apply upper %}
     *      This text becomes uppercase
     *   {% endapplys %}
     */
    final class ApplyTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideApplyEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Deprecates a section of a template.
     *
     *    {% deprecated 'The "base.twig" template is deprecated, use "layout.twig" instead.' %}
     *    {% extends 'layout.html.twig' %}
     *
     * @author Yonel Ceruto <yonelceruto@gmail.com>
     *
     * @final
     */
    class DeprecatedTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Defines a variable.
     *
     *  {% set foo = 'foo' %}
     *  {% set foo = [1, 2] %}
     *  {% set foo = {'foo': 'bar'} %}
     *  {% set foo = 'foo' ~ 'bar' %}
     *  {% set foo, bar = 'foo', 'bar' %}
     *  {% set foo %}Some content{% endset %}
     *
     * @final
     */
    class SetTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Imports blocks defined in another template into the current template.
     *
     *    {% extends "base.html" %}
     *
     *    {% use "blocks.html" %}
     *
     *    {% block title %}{% endblock %}
     *    {% block content %}{% endblock %}
     *
     * @see https://twig.symfony.com/doc/templates.html#horizontal-reuse for details.
     *
     * @final
     */
    class UseTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Creates a nested scope.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @final
     */
    class WithTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideWithEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Imports macros.
     *
     *   {% import 'forms.html' as forms %}
     *
     * @final
     */
    class ImportTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Includes a template.
     *
     *   {% include 'header.html' %}
     *     Body
     *   {% include 'footer.html' %}
     */
    class IncludeTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        protected function parseArguments()
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Embeds a template.
     *
     * @final
     */
    class EmbedTokenParser extends \WPML\Core\Twig\TokenParser\IncludeTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Filters a section of a template by applying filters.
     *
     *   {% filter upper %}
     *      This text becomes uppercase
     *   {% endfilter %}
     *
     * @final
     */
    class FilterTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Extends a template by another one.
     *
     *  {% extends "base.html" %}
     *
     * @final
     */
    class ExtendsTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Marks a section of a template as untrusted code that must be evaluated in the sandbox mode.
     *
     *    {% sandbox %}
     *        {% include 'user.html' %}
     *    {% endsandbox %}
     *
     * @see https://twig.symfony.com/doc/api.html#sandbox-extension for details
     *
     * @final
     */
    class SandboxTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Marks a section of a template to be escaped or not.
     *
     *   {% autoescape true %}
     *     Everything will be automatically escaped in this block
     *   {% endautoescape %}
     *
     *   {% autoescape false %}
     *     Everything will be outputed as is in this block
     *   {% endautoescape %}
     *
     *   {% autoescape true js %}
     *     Everything will be automatically escaped in this block
     *     using the js escaping strategy
     *   {% endautoescape %}
     *
     * @final
     */
    class AutoEscapeTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Remove whitespaces between HTML tags.
     *
     *   {% spaceless %}
     *      <div>
     *          <strong>foo</strong>
     *      </div>
     *   {% endspaceless %}
     *   {# output will be <div><strong>foo</strong></div> #}
     *
     * @final
     */
    class SpacelessTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideSpacelessEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
    /**
     * Marks a section of a template as being reusable.
     *
     *  {% block head %}
     *    <link rel="stylesheet" href="style.css" />
     *    <title>{% block title %}{% endblock %} - My Webpage</title>
     *  {% endblock %}
     *
     * @final
     */
    class BlockTokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
        public function parse(\WPML\Core\Twig\Token $token)
        {
        }
        public function decideBlockEnd(\WPML\Core\Twig\Token $token)
        {
        }
        public function getTag()
        {
        }
    }
}
namespace WPML\Core\Twig\Test {
    abstract class NodeTestCase extends \WPML\Core\PHPUnit\Framework\TestCase
    {
        public abstract function getTests();
        /**
         * @dataProvider getTests
         */
        public function testCompile($node, $source, $environment = null, $isPattern = \false)
        {
        }
        public function assertNodeCompilation($source, \WPML\Core\Twig\Node\Node $node, \WPML\Core\Twig\Environment $environment = null, $isPattern = \false)
        {
        }
        protected function getCompiler(\WPML\Core\Twig\Environment $environment = null)
        {
        }
        protected function getEnvironment()
        {
        }
        protected function getVariableGetter($name, $line = \false)
        {
        }
        protected function getAttributeGetter()
        {
        }
    }
    /**
     * Integration test helper.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     * @author Karma Dordrak <drak@zikula.org>
     */
    abstract class IntegrationTestCase extends \WPML\Core\PHPUnit\Framework\TestCase
    {
        /**
         * @return string
         */
        protected abstract function getFixturesDir();
        /**
         * @return RuntimeLoaderInterface[]
         */
        protected function getRuntimeLoaders()
        {
        }
        /**
         * @return ExtensionInterface[]
         */
        protected function getExtensions()
        {
        }
        /**
         * @return TwigFilter[]
         */
        protected function getTwigFilters()
        {
        }
        /**
         * @return TwigFunction[]
         */
        protected function getTwigFunctions()
        {
        }
        /**
         * @return TwigTest[]
         */
        protected function getTwigTests()
        {
        }
        /**
         * @dataProvider getTests
         */
        public function testIntegration($file, $message, $condition, $templates, $exception, $outputs)
        {
        }
        /**
         * @dataProvider getLegacyTests
         * @group legacy
         */
        public function testLegacyIntegration($file, $message, $condition, $templates, $exception, $outputs)
        {
        }
        public function getTests($name, $legacyTests = \false)
        {
        }
        public function getLegacyTests()
        {
        }
        protected function doIntegrationTest($file, $message, $condition, $templates, $exception, $outputs)
        {
        }
        protected static function parseTemplates($test)
        {
        }
    }
}
namespace WPML\Core {
    /**
     * Interface implemented by all compiled templates.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 3.0)
     */
    interface Twig_TemplateInterface
    {
        const ANY_CALL = 'any';
        const ARRAY_CALL = 'array';
        const METHOD_CALL = 'method';
        /**
         * Renders the template with the given context and returns it as string.
         *
         * @param array $context An array of parameters to pass to the template
         *
         * @return string The rendered template
         */
        public function render(array $context);
        /**
         * Displays the template with the given context.
         *
         * @param array $context An array of parameters to pass to the template
         * @param array $blocks  An array of blocks to pass to the template
         */
        public function display(array $context, array $blocks = []);
        /**
         * Returns the bound environment for this template.
         *
         * @return Environment
         */
        public function getEnvironment();
    }
}
namespace WPML\Core\Twig {
    /**
     * Default base class for compiled templates.
     *
     * This class is an implementation detail of how template compilation currently
     * works, which might change. It should never be used directly. Use $twig->load()
     * instead, which returns an instance of \Twig\TemplateWrapper.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @internal
     */
    abstract class Template implements \WPML\Core\Twig_TemplateInterface
    {
        /**
         * @internal
         */
        protected static $cache = [];
        protected $parent;
        protected $parents = [];
        protected $env;
        protected $blocks = [];
        protected $traits = [];
        protected $sandbox;
        public function __construct(\WPML\Core\Twig\Environment $env)
        {
        }
        /**
         * @internal this method will be removed in 2.0 and is only used internally to provide an upgrade path from 1.x to 2.0
         */
        public function __toString()
        {
        }
        /**
         * Returns the template name.
         *
         * @return string The template name
         */
        public abstract function getTemplateName();
        /**
         * Returns debug information about the template.
         *
         * @return array Debug information
         */
        public function getDebugInfo()
        {
        }
        /**
         * Returns the template source code.
         *
         * @return string The template source code
         *
         * @deprecated since 1.27 (to be removed in 2.0). Use getSourceContext() instead
         */
        public function getSource()
        {
        }
        /**
         * Returns information about the original template source code.
         *
         * @return Source
         */
        public function getSourceContext()
        {
        }
        /**
         * @deprecated since 1.20 (to be removed in 2.0)
         */
        public function getEnvironment()
        {
        }
        /**
         * Returns the parent template.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param array $context
         *
         * @return \Twig_TemplateInterface|TemplateWrapper|false The parent template or false if there is no parent
         *
         * @internal
         */
        public function getParent(array $context)
        {
        }
        protected function doGetParent(array $context)
        {
        }
        public function isTraitable()
        {
        }
        /**
         * Displays a parent block.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param string $name    The block name to display from the parent
         * @param array  $context The context
         * @param array  $blocks  The current set of blocks
         */
        public function displayParentBlock($name, array $context, array $blocks = [])
        {
        }
        /**
         * Displays a block.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param string $name      The block name to display
         * @param array  $context   The context
         * @param array  $blocks    The current set of blocks
         * @param bool   $useBlocks Whether to use the current set of blocks
         */
        public function displayBlock($name, array $context, array $blocks = [], $useBlocks = \true)
        {
        }
        /**
         * Renders a parent block.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param string $name    The block name to render from the parent
         * @param array  $context The context
         * @param array  $blocks  The current set of blocks
         *
         * @return string The rendered block
         */
        public function renderParentBlock($name, array $context, array $blocks = [])
        {
        }
        /**
         * Renders a block.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @param string $name      The block name to render
         * @param array  $context   The context
         * @param array  $blocks    The current set of blocks
         * @param bool   $useBlocks Whether to use the current set of blocks
         *
         * @return string The rendered block
         */
        public function renderBlock($name, array $context, array $blocks = [], $useBlocks = \true)
        {
        }
        /**
         * Returns whether a block exists or not in the current context of the template.
         *
         * This method checks blocks defined in the current template
         * or defined in "used" traits or defined in parent templates.
         *
         * @param string $name    The block name
         * @param array  $context The context
         * @param array  $blocks  The current set of blocks
         *
         * @return bool true if the block exists, false otherwise
         */
        public function hasBlock($name, array $context = null, array $blocks = [])
        {
        }
        /**
         * Returns all block names in the current context of the template.
         *
         * This method checks blocks defined in the current template
         * or defined in "used" traits or defined in parent templates.
         *
         * @param array $context The context
         * @param array $blocks  The current set of blocks
         *
         * @return array An array of block names
         */
        public function getBlockNames(array $context = null, array $blocks = [])
        {
        }
        /**
         * @return Template|TemplateWrapper
         */
        protected function loadTemplate($template, $templateName = null, $line = null, $index = null)
        {
        }
        /**
         * @internal
         *
         * @return Template
         */
        protected function unwrap()
        {
        }
        /**
         * Returns all blocks.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * @return array An array of blocks
         */
        public function getBlocks()
        {
        }
        public function display(array $context, array $blocks = [])
        {
        }
        public function render(array $context)
        {
        }
        protected function displayWithErrorHandling(array $context, array $blocks = [])
        {
        }
        /**
         * Auto-generated method to display the template with the given context.
         *
         * @param array $context An array of parameters to pass to the template
         * @param array $blocks  An array of blocks to pass to the template
         */
        protected abstract function doDisplay(array $context, array $blocks = []);
        /**
         * Returns a variable from the context.
         *
         * This method is for internal use only and should never be called
         * directly.
         *
         * This method should not be overridden in a sub-class as this is an
         * implementation detail that has been introduced to optimize variable
         * access for versions of PHP before 5.4. This is not a way to override
         * the way to get a variable value.
         *
         * @param array  $context           The context
         * @param string $item              The variable to return from the context
         * @param bool   $ignoreStrictCheck Whether to ignore the strict variable check or not
         *
         * @return mixed The content of the context variable
         *
         * @throws RuntimeError if the variable does not exist and Twig is running in strict mode
         *
         * @internal
         */
        protected final function getContext($context, $item, $ignoreStrictCheck = \false)
        {
        }
        /**
         * Returns the attribute value for a given array/object.
         *
         * @param mixed  $object            The object or array from where to get the item
         * @param mixed  $item              The item to get from the array or object
         * @param array  $arguments         An array of arguments to pass if the item is an object method
         * @param string $type              The type of attribute (@see \Twig\Template constants)
         * @param bool   $isDefinedTest     Whether this is only a defined check
         * @param bool   $ignoreStrictCheck Whether to ignore the strict attribute check or not
         *
         * @return mixed The attribute value, or a Boolean when $isDefinedTest is true, or null when the attribute is not set and $ignoreStrictCheck is true
         *
         * @throws RuntimeError if the attribute does not exist and Twig is running in strict mode and $isDefinedTest is false
         *
         * @internal
         */
        protected function getAttribute($object, $item, array $arguments = [], $type = self::ANY_CALL, $isDefinedTest = \false, $ignoreStrictCheck = \false)
        {
        }
    }
}
namespace WPML\Core {
    class Twig_SourceContextLoaderInterface extends \WPML\Core\Twig\Loader\SourceContextLoaderInterface
    {
    }
    class Twig_Sandbox_SecurityNotAllowedPropertyError extends \WPML\Core\Twig\Sandbox\SecurityNotAllowedPropertyError
    {
    }
    class Twig_Sandbox_SecurityNotAllowedMethodError extends \WPML\Core\Twig\Sandbox\SecurityNotAllowedMethodError
    {
    }
    class Twig_Sandbox_SecurityNotAllowedTagError extends \WPML\Core\Twig\Sandbox\SecurityNotAllowedTagError
    {
    }
    class Twig_Sandbox_SecurityNotAllowedFunctionError extends \WPML\Core\Twig\Sandbox\SecurityNotAllowedFunctionError
    {
    }
    class Twig_Sandbox_SecurityNotAllowedFilterError extends \WPML\Core\Twig\Sandbox\SecurityNotAllowedFilterError
    {
    }
    class Twig_Sandbox_SecurityPolicy extends \WPML\Core\Twig\Sandbox\SecurityPolicy
    {
    }
    class Twig_Sandbox_SecurityError extends \WPML\Core\Twig\Sandbox\SecurityError
    {
    }
    class Twig_Sandbox_SecurityPolicyInterface extends \WPML\Core\Twig\Sandbox\SecurityPolicyInterface
    {
    }
    class Twig_Node extends \WPML\Core\Twig\Node\Node
    {
    }
    class Twig_Loader_Array extends \WPML\Core\Twig\Loader\ArrayLoader
    {
    }
    /**
     * Loads a template from a string.
     *
     * This loader should NEVER be used. It only exists for Twig internal purposes.
     *
     * When using this loader with a cache mechanism, you should know that a new cache
     * key is generated each time a template content "changes" (the cache key being the
     * source code of the template). If you don't want to see your cache grows out of
     * control, you need to take care of clearing the old cache file by yourself.
     *
     * @deprecated since 1.18.1 (to be removed in 2.0)
     *
     * @internal
     *
     * @author Fabien Potencier <fabien@symfony.com>
     */
    class Twig_Loader_String implements \WPML\Core\Twig\Loader\LoaderInterface, \WPML\Core\Twig\Loader\ExistsLoaderInterface, \WPML\Core\Twig\Loader\SourceContextLoaderInterface
    {
        public function getSource($name)
        {
        }
        public function getSourceContext($name)
        {
        }
        public function exists($name)
        {
        }
        public function getCacheKey($name)
        {
        }
        public function isFresh($name, $time)
        {
        }
    }
    class Twig_Loader_Filesystem extends \WPML\Core\Twig\Loader\FilesystemLoader
    {
    }
    class Twig_Loader_Chain extends \WPML\Core\Twig\Loader\ChainLoader
    {
    }
    class Twig_Node_Flush extends \WPML\Core\Twig\Node\FlushNode
    {
    }
    class Twig_Node_Macro extends \WPML\Core\Twig\Node\MacroNode
    {
    }
    class Twig_Node_ForLoop extends \WPML\Core\Twig\Node\ForLoopNode
    {
    }
    class Twig_Node_Print extends \WPML\Core\Twig\Node\PrintNode
    {
    }
    class Twig_Node_BlockReference extends \WPML\Core\Twig\Node\BlockReferenceNode
    {
    }
    class Twig_Node_For extends \WPML\Core\Twig\Node\ForNode
    {
    }
    class Twig_Node_Body extends \WPML\Core\Twig\Node\BodyNode
    {
    }
    class Twig_Node_Text extends \WPML\Core\Twig\Node\TextNode
    {
    }
    class Twig_Node_SandboxedPrint extends \WPML\Core\Twig\Node\SandboxedPrintNode
    {
    }
    class Twig_Node_Sandbox extends \WPML\Core\Twig\Node\SandboxNode
    {
    }
    class Twig_Node_Do extends \WPML\Core\Twig\Node\DoNode
    {
    }
    class Twig_Node_Set extends \WPML\Core\Twig\Node\SetNode
    {
    }
    class Twig_Node_Expression extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
    }
    class Twig_Node_Embed extends \WPML\Core\Twig\Node\EmbedNode
    {
    }
    class Twig_Node_SetTemp extends \WPML\Core\Twig\Node\SetTempNode
    {
    }
    class Twig_Node_Spaceless extends \WPML\Core\Twig\Node\SpacelessNode
    {
    }
    class Twig_Node_Expression_Name extends \WPML\Core\Twig\Node\Expression\NameExpression
    {
    }
    class Twig_Node_Expression_Array extends \WPML\Core\Twig\Node\Expression\ArrayExpression
    {
    }
    class Twig_Node_Expression_Function extends \WPML\Core\Twig\Node\Expression\FunctionExpression
    {
    }
    class Twig_Node_Expression_Conditional extends \WPML\Core\Twig\Node\Expression\ConditionalExpression
    {
    }
    class Twig_Node_Expression_Filter extends \WPML\Core\Twig\Node\Expression\FilterExpression
    {
    }
    class Twig_Node_Expression_BlockReference extends \WPML\Core\Twig\Node\Expression\BlockReferenceExpression
    {
    }
    class Twig_Node_Expression_Binary extends \WPML\Core\Twig\Node\Expression\Binary\AbstractBinary
    {
    }
    class Twig_Node_Expression_TempName extends \WPML\Core\Twig\Node\Expression\TempNameExpression
    {
    }
    class Twig_Node_Expression_Unary extends \WPML\Core\Twig\Node\Expression\Unary\AbstractUnary
    {
    }
    class Twig_Node_Expression_GetAttr extends \WPML\Core\Twig\Node\Expression\GetAttrExpression
    {
    }
    class Twig_Node_Expression_Parent extends \WPML\Core\Twig\Node\Expression\ParentExpression
    {
    }
    class Twig_Node_Expression_Filter_Default extends \WPML\Core\Twig\Node\Expression\Filter\DefaultFilter
    {
    }
    class Twig_Node_Expression_Binary_BitwiseAnd extends \WPML\Core\Twig\Node\Expression\Binary\BitwiseAndBinary
    {
    }
    class Twig_Node_Expression_Binary_EndsWith extends \WPML\Core\Twig\Node\Expression\Binary\EndsWithBinary
    {
    }
    class Twig_Node_Expression_Binary_NotEqual extends \WPML\Core\Twig\Node\Expression\Binary\NotEqualBinary
    {
    }
    class Twig_Node_Expression_Binary_Sub extends \WPML\Core\Twig\Node\Expression\Binary\SubBinary
    {
    }
    class Twig_Node_Expression_Binary_Mul extends \WPML\Core\Twig\Node\Expression\Binary\MulBinary
    {
    }
    class Twig_Node_Expression_Binary_LessEqual extends \WPML\Core\Twig\Node\Expression\Binary\LessEqualBinary
    {
    }
    class Twig_Node_Expression_Binary_Matches extends \WPML\Core\Twig\Node\Expression\Binary\MatchesBinary
    {
    }
    class Twig_Node_Expression_Binary_Less extends \WPML\Core\Twig\Node\Expression\Binary\LessBinary
    {
    }
    class Twig_Node_Expression_Binary_Mod extends \WPML\Core\Twig\Node\Expression\Binary\ModBinary
    {
    }
    class Twig_Node_Expression_Binary_BitwiseOr extends \WPML\Core\Twig\Node\Expression\Binary\BitwiseOrBinary
    {
    }
    class Twig_Node_Expression_Binary_In extends \WPML\Core\Twig\Node\Expression\Binary\InBinary
    {
    }
    class Twig_Node_Expression_Binary_Add extends \WPML\Core\Twig\Node\Expression\Binary\AddBinary
    {
    }
    class Twig_Node_Expression_Binary_Or extends \WPML\Core\Twig\Node\Expression\Binary\OrBinary
    {
    }
    class Twig_Node_Expression_Binary_GreaterEqual extends \WPML\Core\Twig\Node\Expression\Binary\GreaterEqualBinary
    {
    }
    class Twig_Node_Expression_Binary_Greater extends \WPML\Core\Twig\Node\Expression\Binary\GreaterBinary
    {
    }
    class Twig_Node_Expression_Binary_Range extends \WPML\Core\Twig\Node\Expression\Binary\RangeBinary
    {
    }
    class Twig_Node_Expression_Binary_Power extends \WPML\Core\Twig\Node\Expression\Binary\PowerBinary
    {
    }
    class Twig_Node_Expression_Binary_FloorDiv extends \WPML\Core\Twig\Node\Expression\Binary\FloorDivBinary
    {
    }
    class Twig_Node_Expression_Binary_NotIn extends \WPML\Core\Twig\Node\Expression\Binary\NotInBinary
    {
    }
    class Twig_Node_Expression_Binary_StartsWith extends \WPML\Core\Twig\Node\Expression\Binary\StartsWithBinary
    {
    }
    class Twig_Node_Expression_Binary_Concat extends \WPML\Core\Twig\Node\Expression\Binary\ConcatBinary
    {
    }
    class Twig_Node_Expression_Binary_And extends \WPML\Core\Twig\Node\Expression\Binary\AndBinary
    {
    }
    class Twig_Node_Expression_Binary_Equal extends \WPML\Core\Twig\Node\Expression\Binary\EqualBinary
    {
    }
    class Twig_Node_Expression_Binary_Div extends \WPML\Core\Twig\Node\Expression\Binary\DivBinary
    {
    }
    class Twig_Node_Expression_Binary_BitwiseXor extends \WPML\Core\Twig\Node\Expression\Binary\BitwiseXorBinary
    {
    }
    class Twig_Node_Expression_Constant extends \WPML\Core\Twig\Node\Expression\ConstantExpression
    {
    }
    class Twig_Node_Expression_AssignName extends \WPML\Core\Twig\Node\Expression\AssignNameExpression
    {
    }
    class Twig_Node_Expression_Unary_Neg extends \WPML\Core\Twig\Node\Expression\Unary\NegUnary
    {
    }
    class Twig_Node_Expression_Unary_Not extends \WPML\Core\Twig\Node\Expression\Unary\NotUnary
    {
    }
    class Twig_Node_Expression_Unary_Pos extends \WPML\Core\Twig\Node\Expression\Unary\PosUnary
    {
    }
    class Twig_Node_Expression_MethodCall extends \WPML\Core\Twig\Node\Expression\MethodCallExpression
    {
    }
    class Twig_Node_Expression_Test extends \WPML\Core\Twig\Node\Expression\TestExpression
    {
    }
    class Twig_Node_Expression_NullCoalesce extends \WPML\Core\Twig\Node\Expression\NullCoalesceExpression
    {
    }
    /**
     * Represents an extension call node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.23 and will be removed in 2.0.
     */
    class Twig_Node_Expression_ExtensionReference extends \WPML\Core\Twig\Node\Expression\AbstractExpression
    {
        public function __construct($name, $lineno, $tag = null)
        {
        }
        public function compile(\WPML\Core\Twig\Compiler $compiler)
        {
        }
    }
    class Twig_Node_Expression_Test_Even extends \WPML\Core\Twig\Node\Expression\Test\EvenTest
    {
    }
    class Twig_Node_Expression_Test_Null extends \WPML\Core\Twig\Node\Expression\Test\NullTest
    {
    }
    class Twig_Node_Expression_Test_Divisibleby extends \WPML\Core\Twig\Node\Expression\Test\DivisiblebyTest
    {
    }
    class Twig_Node_Expression_Test_Constant extends \WPML\Core\Twig\Node\Expression\Test\ConstantTest
    {
    }
    class Twig_Node_Expression_Test_Odd extends \WPML\Core\Twig\Node\Expression\Test\OddTest
    {
    }
    class Twig_Node_Expression_Test_Sameas extends \WPML\Core\Twig\Node\Expression\Test\SameasTest
    {
    }
    class Twig_Node_Expression_Test_Defined extends \WPML\Core\Twig\Node\Expression\Test\DefinedTest
    {
    }
    class Twig_Node_Expression_Call extends \WPML\Core\Twig\Node\Expression\CallExpression
    {
    }
    class Twig_Node_With extends \WPML\Core\Twig\Node\WithNode
    {
    }
    class Twig_Node_Deprecated extends \WPML\Core\Twig\Node\DeprecatedNode
    {
    }
    class Twig_Node_If extends \WPML\Core\Twig\Node\IfNode
    {
    }
    class Twig_Node_AutoEscape extends \WPML\Core\Twig\Node\AutoEscapeNode
    {
    }
    class Twig_Node_Import extends \WPML\Core\Twig\Node\ImportNode
    {
    }
    class Twig_Node_Module extends \WPML\Core\Twig\Node\ModuleNode
    {
    }
    class Twig_Node_Block extends \WPML\Core\Twig\Node\BlockNode
    {
    }
    class Twig_Node_CheckSecurity extends \WPML\Core\Twig\Node\CheckSecurityNode
    {
    }
    class Twig_Node_Include extends \WPML\Core\Twig\Node\IncludeNode
    {
    }
    class Twig_TokenStream extends \WPML\Core\Twig\TokenStream
    {
    }
    class Twig_TemplateWrapper extends \WPML\Core\Twig\TemplateWrapper
    {
    }
    /**
     * Represents a template function.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_FunctionInterface
    {
        /**
         * Compiles a function.
         *
         * @return string The PHP code for the function
         */
        public function compile();
        public function needsEnvironment();
        public function needsContext();
        public function getSafe(\WPML\Core\Twig\Node\Node $filterArgs);
        public function setArguments($arguments);
        public function getArguments();
    }
    /*
     * This file is part of Twig.
     *
     * (c) Fabien Potencier
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */
    /**
     * Represents a callable template function.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_FunctionCallableInterface
    {
        public function getCallable();
    }
    /**
     * Represents a template function.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    abstract class Twig_Function implements \WPML\Core\Twig_FunctionInterface, \WPML\Core\Twig_FunctionCallableInterface
    {
        protected $options;
        protected $arguments = [];
        public function __construct(array $options = [])
        {
        }
        public function setArguments($arguments)
        {
        }
        public function getArguments()
        {
        }
        public function needsEnvironment()
        {
        }
        public function needsContext()
        {
        }
        public function getSafe(\WPML\Core\Twig\Node\Node $functionArgs)
        {
        }
        public function getCallable()
        {
        }
    }
    class Twig_Environment extends \WPML\Core\Twig\Environment
    {
    }
    class Twig_SimpleTest extends \WPML\Core\Twig\TwigTest
    {
    }
    /**
     * Represents a template filter.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_FilterInterface
    {
        /**
         * Compiles a filter.
         *
         * @return string The PHP code for the filter
         */
        public function compile();
        public function needsEnvironment();
        public function needsContext();
        public function getSafe(\WPML\Core\Twig\Node\Node $filterArgs);
        public function getPreservesSafety();
        public function getPreEscape();
        public function setArguments($arguments);
        public function getArguments();
    }
    /*
     * This file is part of Twig.
     *
     * (c) Fabien Potencier
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */
    /**
     * Represents a callable template filter.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_FilterCallableInterface
    {
        public function getCallable();
    }
    /**
     * Represents a template filter.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    abstract class Twig_Filter implements \WPML\Core\Twig_FilterInterface, \WPML\Core\Twig_FilterCallableInterface
    {
        protected $options;
        protected $arguments = [];
        public function __construct(array $options = [])
        {
        }
        public function setArguments($arguments)
        {
        }
        public function getArguments()
        {
        }
        public function needsEnvironment()
        {
        }
        public function needsContext()
        {
        }
        public function getSafe(\WPML\Core\Twig\Node\Node $filterArgs)
        {
        }
        public function getPreservesSafety()
        {
        }
        public function getPreEscape()
        {
        }
        public function getCallable()
        {
        }
    }
    class Twig_NodeTraverser extends \WPML\Core\Twig\NodeTraverser
    {
    }
    class Twig_Markup extends \WPML\Core\Twig\Markup
    {
    }
    class Twig_Extension_GlobalsInterface extends \WPML\Core\Twig\Extension\GlobalsInterface
    {
    }
    class Twig_Extension_Escaper extends \WPML\Core\Twig\Extension\EscaperExtension
    {
    }
    class Twig_Extension_Sandbox extends \WPML\Core\Twig\Extension\SandboxExtension
    {
    }
    class Twig_Extension_Profiler extends \WPML\Core\Twig\Extension\ProfilerExtension
    {
    }
    class Twig_Extension_Staging extends \WPML\Core\Twig\Extension\StagingExtension
    {
    }
    class Twig_Extension_Debug extends \WPML\Core\Twig\Extension\DebugExtension
    {
    }
    class Twig_Extension_StringLoader extends \WPML\Core\Twig\Extension\StringLoaderExtension
    {
    }
    class Twig_Extension_InitRuntimeInterface extends \WPML\Core\Twig\Extension\InitRuntimeInterface
    {
    }
    class Twig_Extension_Optimizer extends \WPML\Core\Twig\Extension\OptimizerExtension
    {
    }
    class Twig_Extension_Core extends \WPML\Core\Twig\Extension\CoreExtension
    {
    }
    class Twig_Compiler extends \WPML\Core\Twig\Compiler
    {
    }
    class Twig_Cache_Null extends \WPML\Core\Twig\Cache\NullCache
    {
    }
    class Twig_Cache_Filesystem extends \WPML\Core\Twig\Cache\FilesystemCache
    {
    }
    class Twig_RuntimeLoaderInterface extends \WPML\Core\Twig\RuntimeLoader\RuntimeLoaderInterface
    {
    }
    class Twig_BaseNodeVisitor extends \WPML\Core\Twig\NodeVisitor\AbstractNodeVisitor
    {
    }
    class Twig_CacheInterface extends \WPML\Core\Twig\Cache\CacheInterface
    {
    }
    class Twig_Util_TemplateDirIterator extends \WPML\Core\Twig\Util\TemplateDirIterator
    {
    }
    class Twig_Util_DeprecationCollector extends \WPML\Core\Twig\Util\DeprecationCollector
    {
    }
    class Twig_SimpleFunction extends \WPML\Core\Twig\TwigFunction
    {
    }
    class Twig_ExpressionParser extends \WPML\Core\Twig\ExpressionParser
    {
    }
    /**
     * Represents a template filter as a node.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Filter_Node extends \WPML\Core\Twig_Filter
    {
        protected $class;
        public function __construct($class, array $options = [])
        {
        }
        public function getClass()
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a method template filter.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Filter_Method extends \WPML\Core\Twig_Filter
    {
        protected $extension;
        protected $method;
        public function __construct(\WPML\Core\Twig\Extension\ExtensionInterface $extension, $method, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a function template filter.
     *
     * Use \Twig\TwigFilter instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Filter_Function extends \WPML\Core\Twig_Filter
    {
        protected $function;
        public function __construct($function, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    class Twig_Source extends \WPML\Core\Twig\Source
    {
    }
    class Twig_FileExtensionEscapingStrategy extends \WPML\Core\Twig\FileExtensionEscapingStrategy
    {
    }
    class Twig_TokenParserInterface extends \WPML\Core\Twig\TokenParser\TokenParserInterface
    {
    }
    class Twig_Parser extends \WPML\Core\Twig\Parser
    {
    }
    /**
     * Autoloads Twig classes.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.21 and will be removed in 2.0. Use Composer instead. 2.0.
     */
    class Twig_Autoloader
    {
        /**
         * Registers Twig_Autoloader as an SPL autoloader.
         *
         * @param bool $prepend whether to prepend the autoloader or not
         */
        public static function register($prepend = \false)
        {
        }
        /**
         * Handles autoloading of classes.
         *
         * @param string $class a class name
         */
        public static function autoload($class)
        {
        }
    }
    class Twig_ExtensionInterface extends \WPML\Core\Twig\Extension\ExtensionInterface
    {
    }
    class Twig_Profiler_Node_EnterProfile extends \WPML\Core\Twig\Profiler\Node\EnterProfileNode
    {
    }
    class Twig_Profiler_Node_LeaveProfile extends \WPML\Core\Twig\Profiler\Node\LeaveProfileNode
    {
    }
    class Twig_Profiler_Profile extends \WPML\Core\Twig\Profiler\Profile
    {
    }
    class Twig_Profiler_Dumper_Html extends \WPML\Core\Twig\Profiler\Dumper\HtmlDumper
    {
    }
    class Twig_Profiler_Dumper_Text extends \WPML\Core\Twig\Profiler\Dumper\TextDumper
    {
    }
    class Twig_Profiler_Dumper_Base extends \WPML\Core\Twig\Profiler\Dumper\BaseDumper
    {
    }
    class Twig_Profiler_Dumper_Blackfire extends \WPML\Core\Twig\Profiler\Dumper\BlackfireDumper
    {
    }
    class Twig_Profiler_NodeVisitor_Profiler extends \WPML\Core\Twig\Profiler\NodeVisitor\ProfilerNodeVisitor
    {
    }
    class Twig_NodeCaptureInterface extends \WPML\Core\Twig\Node\NodeCaptureInterface
    {
    }
    class Twig_Error_Syntax extends \WPML\Core\Twig\Error\SyntaxError
    {
    }
    class Twig_Error_Loader extends \WPML\Core\Twig\Error\LoaderError
    {
    }
    class Twig_Error_Runtime extends \WPML\Core\Twig\Error\RuntimeError
    {
    }
    class Twig_SimpleFilter extends \WPML\Core\Twig\TwigFilter
    {
    }
    /*
     * This file is part of Twig.
     *
     * (c) Fabien Potencier
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */
    /**
     * Represents a callable template test.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_TestCallableInterface
    {
        public function getCallable();
    }
    interface Twig_LoaderInterface extends \WPML\Core\Twig\Loader\LoaderInterface
    {
    }
    /**
     * Represents a template function as a node.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Function_Node extends \WPML\Core\Twig_Function
    {
        protected $class;
        public function __construct($class, array $options = [])
        {
        }
        public function getClass()
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a method template function.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Function_Method extends \WPML\Core\Twig_Function
    {
        protected $extension;
        protected $method;
        public function __construct(\WPML\Core\Twig\Extension\ExtensionInterface $extension, $method, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a function template function.
     *
     * Use \Twig\TwigFunction instead.
     *
     * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Function_Function extends \WPML\Core\Twig_Function
    {
        protected $function;
        public function __construct($function, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    class Twig_NodeVisitorInterface extends \WPML\Core\Twig\NodeVisitor\NodeVisitorInterface
    {
    }
    /**
     * Interface implemented by token parser brokers.
     *
     * Token parser brokers allows to implement custom logic in the process of resolving a token parser for a given tag name.
     *
     * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_TokenParserBrokerInterface
    {
        /**
         * Gets a TokenParser suitable for a tag.
         *
         * @param string $tag A tag name
         *
         * @return TokenParserInterface|null A Twig_TokenParserInterface or null if no suitable TokenParser was found
         */
        public function getTokenParser($tag);
        /**
         * Calls Twig\TokenParser\TokenParserInterface::setParser on all parsers the implementation knows of.
         */
        public function setParser(\WPML\Core\Twig_ParserInterface $parser);
        /**
         * Gets the Twig_ParserInterface.
         *
         * @return Twig_ParserInterface|null A Twig_ParserInterface instance or null
         */
        public function getParser();
    }
    /**
     * Default implementation of a token parser broker.
     *
     * @author Arnaud Le Blanc <arnaud.lb@gmail.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_TokenParserBroker implements \WPML\Core\Twig_TokenParserBrokerInterface
    {
        protected $parser;
        protected $parsers = [];
        protected $brokers = [];
        /**
         * @param array|\Traversable $parsers                 A \Traversable of Twig_TokenParserInterface instances
         * @param array|\Traversable $brokers                 A \Traversable of Twig_TokenParserBrokerInterface instances
         * @param bool               $triggerDeprecationError
         */
        public function __construct($parsers = [], $brokers = [], $triggerDeprecationError = \true)
        {
        }
        public function addTokenParser(\WPML\Core\Twig\TokenParser\TokenParserInterface $parser)
        {
        }
        public function removeTokenParser(\WPML\Core\Twig\TokenParser\TokenParserInterface $parser)
        {
        }
        public function addTokenParserBroker(self $broker)
        {
        }
        public function removeTokenParserBroker(self $broker)
        {
        }
        /**
         * Gets a suitable TokenParser for a tag.
         *
         * First looks in parsers, then in brokers.
         *
         * @param string $tag A tag name
         *
         * @return TokenParserInterface|null A Twig_TokenParserInterface or null if no suitable TokenParser was found
         */
        public function getTokenParser($tag)
        {
        }
        public function getParsers()
        {
        }
        public function getParser()
        {
        }
        public function setParser(\WPML\Core\Twig_ParserInterface $parser)
        {
        }
    }
    class Twig_ContainerRuntimeLoader extends \WPML\Core\Twig\RuntimeLoader\ContainerRuntimeLoader
    {
    }
    class Twig_Token extends \WPML\Core\Twig\Token
    {
    }
    class Twig_ExistsLoaderInterface extends \WPML\Core\Twig\Loader\ExistsLoaderInterface
    {
    }
    class Twig_Extension extends \WPML\Core\Twig\Extension\AbstractExtension
    {
    }
    class Twig_NodeVisitor_Escaper extends \WPML\Core\Twig\NodeVisitor\EscaperNodeVisitor
    {
    }
    class Twig_NodeVisitor_SafeAnalysis extends \WPML\Core\Twig\NodeVisitor\SafeAnalysisNodeVisitor
    {
    }
    class Twig_NodeVisitor_Sandbox extends \WPML\Core\Twig\NodeVisitor\SandboxNodeVisitor
    {
    }
    class Twig_NodeVisitor_Optimizer extends \WPML\Core\Twig\NodeVisitor\OptimizerNodeVisitor
    {
    }
    /*
     * This file is part of Twig.
     *
     * (c) Fabien Potencier
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */
    /**
     * Represents a template test.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    interface Twig_TestInterface
    {
        /**
         * Compiles a test.
         *
         * @return string The PHP code for the test
         */
        public function compile();
    }
    /**
     * Represents a template test.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    abstract class Twig_Test implements \WPML\Core\Twig_TestInterface, \WPML\Core\Twig_TestCallableInterface
    {
        protected $options;
        protected $arguments = [];
        public function __construct(array $options = [])
        {
        }
        public function getCallable()
        {
        }
    }
    class Twig_Error extends \WPML\Core\Twig\Error\Error
    {
    }
    class Twig_TokenParser extends \WPML\Core\Twig\TokenParser\AbstractTokenParser
    {
    }
    class Twig_FactoryRuntimeLoader extends \WPML\Core\Twig\RuntimeLoader\FactoryRuntimeLoader
    {
    }
    class Twig_Lexer extends \WPML\Core\Twig\Lexer
    {
    }
    class Twig_TokenParser_Flush extends \WPML\Core\Twig\TokenParser\FlushTokenParser
    {
    }
    class Twig_TokenParser_Macro extends \WPML\Core\Twig\TokenParser\MacroTokenParser
    {
    }
    class Twig_TokenParser_Filter extends \WPML\Core\Twig\TokenParser\FilterTokenParser
    {
    }
    class Twig_TokenParser_Use extends \WPML\Core\Twig\TokenParser\UseTokenParser
    {
    }
    class Twig_TokenParser_For extends \WPML\Core\Twig\TokenParser\ForTokenParser
    {
    }
    class Twig_TokenParser_Sandbox extends \WPML\Core\Twig\TokenParser\SandboxTokenParser
    {
    }
    class Twig_TokenParser_Do extends \WPML\Core\Twig\TokenParser\DoTokenParser
    {
    }
    class Twig_TokenParser_Set extends \WPML\Core\Twig\TokenParser\SetTokenParser
    {
    }
    class Twig_TokenParser_Embed extends \WPML\Core\Twig\TokenParser\EmbedTokenParser
    {
    }
    class Twig_TokenParser_From extends \WPML\Core\Twig\TokenParser\FromTokenParser
    {
    }
    class Twig_TokenParser_Extends extends \WPML\Core\Twig\TokenParser\ExtendsTokenParser
    {
    }
    class Twig_TokenParser_Spaceless extends \WPML\Core\Twig\TokenParser\SpacelessTokenParser
    {
    }
    class Twig_TokenParser_With extends \WPML\Core\Twig\TokenParser\WithTokenParser
    {
    }
    class Twig_TokenParser_Deprecated extends \WPML\Core\Twig\TokenParser\DeprecatedTokenParser
    {
    }
    class Twig_TokenParser_If extends \WPML\Core\Twig\TokenParser\IfTokenParser
    {
    }
    class Twig_TokenParser_AutoEscape extends \WPML\Core\Twig\TokenParser\AutoEscapeTokenParser
    {
    }
    class Twig_TokenParser_Import extends \WPML\Core\Twig\TokenParser\ImportTokenParser
    {
    }
    class Twig_TokenParser_Block extends \WPML\Core\Twig\TokenParser\BlockTokenParser
    {
    }
    class Twig_TokenParser_Include extends \WPML\Core\Twig\TokenParser\IncludeTokenParser
    {
    }
    /**
     * Represents a template test as a Node.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Test_Node extends \WPML\Core\Twig_Test
    {
        protected $class;
        public function __construct($class, array $options = [])
        {
        }
        public function getClass()
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a method template test.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Test_Method extends \WPML\Core\Twig_Test
    {
        protected $extension;
        protected $method;
        public function __construct(\WPML\Core\Twig\Extension\ExtensionInterface $extension, $method, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    /**
     * Represents a function template test.
     *
     * @author Fabien Potencier <fabien@symfony.com>
     *
     * @deprecated since 1.12 (to be removed in 2.0)
     */
    class Twig_Test_Function extends \WPML\Core\Twig_Test
    {
        protected $function;
        public function __construct($function, array $options = [])
        {
        }
        public function compile()
        {
        }
    }
    class Twig_Test_NodeTestCase extends \WPML\Core\Twig\Test\NodeTestCase
    {
    }
    class Twig_Test_IntegrationTestCase extends \WPML\Core\Twig\Test\IntegrationTestCase
    {
    }
    class Twig_NodeOutputInterface extends \WPML\Core\Twig\Node\NodeOutputInterface
    {
    }
    class Twig_Template extends \WPML\Core\Twig\Template
    {
    }
    interface ISitePress
    {
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    interface IWPML_Template_Service
    {
        public function show($model, $template);
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Twig_Template implements \IWPML_Template_Service
    {
        /**
         * WPML_Twig_Template constructor.
         *
         * @param Twig_Environment $twig
         */
        public function __construct(\WPML\Core\Twig_Environment $twig)
        {
        }
        public function show($model, $template)
        {
        }
    }
    /**
     * Class WPML_Twig_Template_Loader
     */
    class WPML_Twig_Template_Loader
    {
        /**
         * WPML_Twig_Template_Loader constructor.
         *
         * @param array $paths
         */
        public function __construct(array $paths)
        {
        }
        /**
         * @return WPML_Twig_Template
         */
        public function get_template()
        {
        }
    }
    abstract class WPML_Templates_Factory
    {
        const NOTICE_GROUP = 'template_factory';
        const OTGS_TWIG_CACHE_DISABLED_KEY = '_otgs_twig_cache_disabled';
        /** @var array */
        protected $custom_filters;
        /** @var array */
        protected $custom_functions;
        /** @var string|array */
        protected $template_paths;
        /** @var string|bool */
        protected $cache_directory;
        protected $template_string;
        /** @var Twig_Environment */
        protected $twig;
        /**
         * WPML_Templates_Factory constructor.
         *
         * @param array       $custom_functions
         * @param array       $custom_filters
         * @param WPML_WP_API $wp_api
         */
        public function __construct(array $custom_functions = array(), array $custom_filters = array(), $wp_api = \null)
        {
        }
        protected abstract function init_template_base_dir();
        /**
         * @param null $template
         * @param null $model
         *
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function show($template = \null, $model = \null)
        {
        }
        /**
         * @param string $template
         * @param array<string,mixed> $model
         *
         * @return string
         * @throws \WPML\Core\Twig\Error\LoaderError
         * @throws \WPML\Core\Twig\Error\RuntimeError
         * @throws \WPML\Core\Twig\Error\SyntaxError
         */
        public function get_view($template = \null, $model = \null)
        {
        }
        protected function maybe_init_twig()
        {
        }
        public abstract function get_template();
        public abstract function get_model();
        /**
         * @return Twig_Environment
         */
        protected function get_twig()
        {
        }
        /**
         * @param RuntimeException $e
         */
        protected function add_exception_notice(\RuntimeException $e)
        {
        }
        /**
         * @return WPML_WP_API
         */
        protected function get_wp_api()
        {
        }
        protected function disable_twig_cache()
        {
        }
        protected function is_caching_enabled()
        {
        }
        /**
         * @return bool
         */
        protected function is_string_template()
        {
        }
        /**
         * @return \WPML\Core\Twig_LoaderInterface
         */
        protected function get_twig_loader()
        {
        }
    }
    /**
     * Class WPML_AJAX_Base_Factory
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_AJAX_Base_Factory implements \IWPML_AJAX_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /**
         * This loader must be deferred at least to 'plugins_loaded' to make sure
         * all the WP functions needed to validate the request are already loaded
         *
         * @return string
         */
        public function get_load_action()
        {
        }
        public function is_valid_action($ajax_action)
        {
        }
        /**
         * @param WPML_AJAX_Action_Validation $ajax_action_validation
         */
        public function set_ajax_action_validation(\WPML_AJAX_Action_Validation $ajax_action_validation)
        {
        }
    }
    /**
     * Class WPML_AJAX_Action_Validation
     *
     * @author OnTheGoSystems
     */
    class WPML_AJAX_Action_Validation
    {
        /**
         * @param string $action_name
         *
         * @return bool
         */
        public function is_valid($action_name)
        {
        }
    }
}
namespace WPML\Action {
    /**
     * Class Type
     *
     * @package WPML\Action
     *
     * Determines the type of action that a class implements. Can be
     * one or more of:
     * backend, frontend, ajax, rest, cli or dic
     *
     * dic means that the class can be loaded via Dependency Injection Container
     */
    class Type
    {
        /**
         * Info constructor.
         *
         * @param string $class_name The class name of the action or action loader
         */
        public function __construct($class_name)
        {
        }
        /**
         * @param string $type The type of action 'backend', 'frontend', 'ajax', 'rest', 'cli' or 'dic'
         *
         * @return bool
         */
        public function is($type)
        {
        }
    }
}
namespace {
    /**
     * WPML_Action_Filter_Loader class file
     *
     * @package WPML\Core
     */
    /**
     * Class WPML_Action_Filter_Loader
     */
    class WPML_Action_Filter_Loader
    {
        /**
         * Load action filter
         *
         * @param string[] $loaders Action loaders.
         */
        public function load($loaders)
        {
        }
        /**
         * Deferred action loader
         */
        public function deferred_loader()
        {
        }
    }
    /**
     * Class WPML_Current_Screen_Loader_Factory
     *
     * @author OnTheGoSystems
     */
    abstract class WPML_Current_Screen_Loader_Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /** @return string */
        public function get_load_action()
        {
        }
        /** @return string */
        protected abstract function get_screen_regex();
        /** @return null|IWPML_Action */
        protected abstract function create_hooks();
        /** @return null|IWPML_Action */
        public function create()
        {
        }
    }
    /**
     * WPML_File class file.
     *
     * @package wpml-core
     */
    /**
     * Class WPML_File
     */
    class WPML_File
    {
        /**
         * WPML_File constructor.
         *
         * @param WPML_WP_API|null          $wp_api     WPML WP API instance.
         * @param WP_Filesystem_Direct|null $filesystem WP_Filesystem_Direct instance.
         */
        public function __construct(\WPML_WP_API $wp_api = \null, \WP_Filesystem_Direct $filesystem = \null)
        {
        }
        /**
         * Fix directory separator if backslash is used.
         *
         * @param string $path Path to fix.
         *
         * @return string
         */
        public function fix_dir_separator($path)
        {
        }
        /**
         * Get uri from file path.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_uri_from_path($path)
        {
        }
        /**
         * Get path relative to ABSPATH.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_relative_path($path)
        {
        }
        /**
         * Get full file path.
         *
         * @param string $path File path.
         *
         * @return string
         */
        public function get_full_path($path)
        {
        }
        /**
         * Check if file exists.
         *
         * @param string $path File path.
         *
         * @return bool
         */
        public function file_exists($path)
        {
        }
        /**
         * Get file modification time.
         *
         * @param string $path File path.
         *
         * @return int
         */
        public function get_file_modified_timestamp($path)
        {
        }
    }
    class WPML_WP_Cache
    {
        /** @var string Key name under which array of all group keys is stored */
        const KEYS = 'WPML_WP_Cache__group_keys';
        /**
         * WPML_WP_Cache constructor.
         *
         * @param string $group Optional. Where the cache contents are grouped. Default empty.
         */
        public function __construct($group = '')
        {
        }
        /**
         * Retrieves the cache contents from the cache by key and group.
         *
         * @param int|string $key    The key under which the cache contents are stored.
         * @param bool       $found  Optional. Whether the key was found in the cache (passed by reference).
         *                           Disambiguates a return of false, a storable value. Default null.
         *
         * @return bool|mixed False on failure to retrieve contents or the cache
         *                    contents on success
         */
        public function get($key, &$found = \null)
        {
        }
        /**
         * Saves the data to the cache.
         *
         * @param int|string $key    The cache key to use for retrieval later.
         * @param mixed      $data   The contents to store in the cache.
         * @param int        $expire Optional. When to expire the cache contents, in seconds.
         *                           Default 0 (no expiration).
         *
         * @return bool False on failure, true on success
         */
        public function set($key, $data, $expire = 0)
        {
        }
        /**
         * Removes the cache contents matching key and group.
         */
        public function flush_group_cache()
        {
        }
        public function execute_and_cache($key, $callback)
        {
        }
        /**
         * @param string $key
         *
         * @return array {
         *    @type mixed   $result @see Return value of \wp_cache_get.
         *    @type bool    $found @see `$found` argument of \wp_cache_get.
         * }
         */
        public function get_with_found($key)
        {
        }
    }
    class WPML_Twig_WP_Plugin_Extension extends \WPML\Core\Twig_Extension
    {
        /**
         * Returns the name of the extension.
         * @return string The extension name
         */
        public function getName()
        {
        }
        public function getFilters()
        {
        }
        public function wp_do_action_filter($tag)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Privacy_Content_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    abstract class WPML_Privacy_Content implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function privacy_policy()
        {
        }
        /**
         * @return string
         */
        protected abstract function get_plugin_name();
        /**
         * @return string|array a single or an array of strings (plain text or HTML). Array items will be wrapped by a paragraph tag.
         */
        protected abstract function get_privacy_policy();
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Core_Privacy_Content extends \WPML_Privacy_Content
    {
        /**
         * @return string
         */
        protected function get_plugin_name()
        {
        }
        /**
         * @return string|array
         */
        protected function get_privacy_policy()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice_Action
    {
        /**
         * WPML_Admin_Notice_Action constructor.
         *
         * @param string      $text
         * @param string      $url
         * @param bool        $dismiss
         * @param bool        $hide
         * @param bool|string $display_as_button
         * @param bool        $dismiss_different_text
         */
        public function __construct($text, $url = '#', $dismiss = \false, $hide = \false, $display_as_button = \false, $dismiss_different_text = \true)
        {
        }
        public function get_text()
        {
        }
        public function get_url()
        {
        }
        public function can_dismiss()
        {
        }
        public function can_dismiss_different_text()
        {
        }
        public function can_hide()
        {
        }
        public function must_display_as_button()
        {
        }
        public function set_group_to_dismiss($group_name)
        {
        }
        public function get_group_to_dismiss()
        {
        }
        public function set_js_callback($js_callback)
        {
        }
        public function get_js_callback()
        {
        }
        /**
         * @return mixed
         */
        public function get_link_target()
        {
        }
        /**
         * @param mixed $link_target
         */
        public function set_link_target($link_target)
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notices
    {
        const NOTICES_OPTION_KEY = 'wpml_notices';
        const DISMISSED_OPTION_KEY = '_wpml_dismissed_notices';
        const USER_DISMISSED_KEY = '_wpml_user_dismissed_notices';
        const NONCE_NAME = 'wpml-notices';
        const DEFAULT_GROUP = 'default';
        /**
         * WPML_Notices constructor.
         *
         * @param WPML_Notice_Render $notice_render
         */
        public function __construct(\WPML_Notice_Render $notice_render)
        {
        }
        /**
         * @return int
         */
        public function count()
        {
        }
        /**
         * @return array
         */
        public function get_all_notices()
        {
        }
        /**
         * @param string $id
         * @param string $group
         *
         * @return null|WPML_Notice
         */
        public function get_notice($id, $group = 'default')
        {
        }
        /**
         * @param string $id
         * @param string $text
         * @param string $group
         *
         * @return WPML_Notice
         */
        public function create_notice($id, $text, $group = 'default')
        {
        }
        public function add_notice(\WPML_Notice $notice, $force_update = \false)
        {
        }
        /**
         * @param string $id
         * @param string $text
         * @param string $group
         *
         * @return WPML_Notice
         */
        public function get_new_notice($id, $text, $group = 'default')
        {
        }
        /**
         * @param string $text
         * @param string $url
         * @param bool   $dismiss
         * @param bool   $hide
         * @param bool   $display_as_button
         *
         * @return WPML_Notice_Action
         */
        public function get_new_notice_action($text, $url = '#', $dismiss = \false, $hide = \false, $display_as_button = \false)
        {
        }
        public function save_to_option()
        {
        }
        public function remove_notices()
        {
        }
        public function admin_enqueue_scripts()
        {
        }
        public function admin_notices()
        {
        }
        public function wp_ajax_hide_notice()
        {
        }
        public function wp_ajax_dismiss_notice()
        {
        }
        public function wp_ajax_dismiss_group()
        {
        }
        /**
         * @param string     $notice_group
         * @param string|int $notice_id
         */
        public function remove_notice($notice_group, $notice_id)
        {
        }
        /**
         * @param string $notice_group
         */
        public function remove_notice_group($notice_group)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param bool        $persist
         */
        public function dismiss_notice(\WPML_Notice $notice, $persist = \true)
        {
        }
        /**
         * @param WPML_Notice $notice
         * @param bool        $persist
         */
        public function undismiss_notice(\WPML_Notice $notice, $persist = \true)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return bool
         */
        public function is_notice_dismissed(\WPML_Notice $notice)
        {
        }
        public function init_hooks()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice_Render
    {
        public function render(\WPML_Notice $notice)
        {
        }
        /**
         * @param WPML_Notice $notice
         *
         * @return string
         */
        public function get_html(\WPML_Notice $notice)
        {
        }
        public function must_display_notice(\WPML_Notice $notice)
        {
        }
    }
}
namespace WPML\Notices {
    class DismissNotices implements \IWPML_Backend_Action
    {
        const OPTION = 'wpml_dismiss_notice';
        const CSS_CLASS = 'wpml_dismiss_notice';
        public function add_hooks()
        {
        }
        public function toggleDismiss()
        {
        }
        /**
         * @param int $id
         *
         * @return bool
         */
        public function isDismissed($id)
        {
        }
        /**
         * @param int $id
         *
         * @return string
         */
        public function renderCheckbox($id)
        {
        }
    }
}
namespace {
    class WPML_Notice_Show_On_Dashboard_And_WPML_Pages
    {
        public static function is_on_page()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WPML_Notice
    {
        /**
         * WPML_Admin_Notification constructor.
         *
         * @param int|string $id
         * @param string     $text
         * @param string     $group
         */
        public function __construct($id, $text, $group = 'default')
        {
        }
        public function add_action(\WPML_Notice_Action $action)
        {
        }
        public function add_exclude_from_page($page)
        {
        }
        public function add_restrict_to_page($page)
        {
        }
        /** @param int $user_id */
        public function add_user_restriction($user_id)
        {
        }
        /** @param int $user_id */
        public function remove_user_restriction($user_id)
        {
        }
        /** @return array */
        public function get_restricted_user_ids()
        {
        }
        /** @return bool */
        public function is_user_restricted()
        {
        }
        /** @return bool */
        public function is_for_current_user()
        {
        }
        /**
         * @return bool
         */
        public function is_user_cap_allowed()
        {
        }
        public function can_be_dismissed()
        {
        }
        public function can_be_dismissed_for_different_text()
        {
        }
        public function can_be_hidden()
        {
        }
        /**
         * @return bool
         */
        public function can_be_collapsed()
        {
        }
        /**
         * As the notice is supposed to be serialized and stored into the DB,
         * the callback should be only a function or a static method.
         *
         * Before to use a callback, please check the existing options with:
         * - add_exclude_from_page
         * - add_restrict_to_page
         * - add_user_restriction
         * - add_capability_check
         *
         * @param callable $callback
         */
        public function add_display_callback($callback)
        {
        }
        public function add_capability_check(array $cap)
        {
        }
        public function get_display_callbacks()
        {
        }
        /**
         * @return array<\WPML_Notice_Action>
         */
        public function get_actions()
        {
        }
        public function get_css_classes()
        {
        }
        /**
         * @param string|array $css_classes
         */
        public function set_css_classes($css_classes)
        {
        }
        public function get_exclude_from_pages()
        {
        }
        /**
         * @return string
         */
        public function get_group()
        {
        }
        /**
         * @return int|string
         */
        public function get_id()
        {
        }
        public function set_restrict_to_page_prefixes(array $page_prefixes)
        {
        }
        /**
         * @return array
         */
        public function get_restrict_to_page_prefixes()
        {
        }
        public function get_restrict_to_pages()
        {
        }
        public function set_restrict_to_screen_ids(array $screens)
        {
        }
        /**
         * @return array
         */
        public function get_restrict_to_screen_ids()
        {
        }
        public function get_nonce_action()
        {
        }
        /**
         * @return string
         */
        public function get_text()
        {
        }
        public function get_css_class_types()
        {
        }
        /**
         * @return string
         */
        public function get_collapsed_text()
        {
        }
        /**
         * Use this to set the look of the notice.
         * WordPress recognize these values:
         * - notice-error
         * - notice-warning
         * - notice-success
         * - notice-info
         * You can use the above values with or without the "notice-" prefix:
         * the prefix will be added automatically in the HTML, if missing.
         *
         * @see https://codex.wordpress.org/Plugin_API/Action_Reference/admin_notices for more details
         *
         * @param string|array $types Accepts either a space separated values string, or an array of values.
         * @return WPML_Notice
         */
        public function set_css_class_types($types)
        {
        }
        /**
         * @param bool $dismissible
         */
        public function set_dismissible($dismissible)
        {
        }
        public function set_exclude_from_pages(array $pages)
        {
        }
        public function set_hide_if_notice_exists($notice_id, $notice_group = \null)
        {
        }
        public function get_hide_if_notice_exists()
        {
        }
        /**
         * @param bool $hideable
         */
        public function set_hideable($hideable)
        {
        }
        /**
         * @param bool $collapsable
         */
        public function set_collapsable($collapsable)
        {
        }
        /**
         * @param string $action
         */
        public function set_nonce_action($action)
        {
        }
        /**
         * @param string $collapsed_text
         */
        public function set_collapsed_text($collapsed_text)
        {
        }
        public function set_restrict_to_pages(array $pages)
        {
        }
        public function reset_dismiss()
        {
        }
        public function must_reset_dismiss()
        {
        }
        public function is_different(\WPML_Notice $other_notice)
        {
        }
        /**
         * Set notice to only display once.
         *
         * @param bool $flash
         *
         * @return WPML_Notice
         * @since 4.1.0
         */
        public function set_flash($flash = \true)
        {
        }
        /**
         * @return bool
         * @since 4.1.0
         */
        public function is_flash()
        {
        }
        /**
         * @return bool
         */
        public function should_be_text_only()
        {
        }
        /**
         * @param bool $text_only
         */
        public function set_text_only($text_only)
        {
        }
        /**
         * @param int|string $id
         * @param string     $text
         * @param string     $group
         *
         * @return WPML_Notice
         */
        public static function make($id, $text, $group = 'default')
        {
        }
    }
    /**
     * Class WPML_Block_Editor_Helper
     */
    class WPML_Block_Editor_Helper
    {
        /**
         * Check if Block Editor is active.
         * Must only be used after plugins_loaded action is fired.
         *
         * @return bool
         */
        public static function is_active()
        {
        }
        /**
         * Check if it is admin page to edit any type of post with Block Editor.
         * Must be used not earlier than plugins_loaded action fired.
         *
         * @return bool
         */
        public static function is_edit_post()
        {
        }
        /**
         * Check if Classic Editor plugin is active.
         *
         * @return bool
         */
        public static function is_classic_editor_plugin_active()
        {
        }
        public static function is_block_editor($current_screen)
        {
        }
    }
}
namespace WPML\Container {
    class Config
    {
        public static function getSharedInstances()
        {
        }
        public static function getSharedClasses()
        {
        }
        public static function getAliases()
        {
        }
        public static function getDelegated()
        {
        }
    }
    class Container
    {
        /**
         * @return Container
         */
        public static function get_instance()
        {
        }
        /**
         * class names or instances that should be shared.
         * Shared means that only one instance is ever created when calling the make function.
         *
         * @param array $names_or_instances
         *
         * @throws \WPML\Auryn\ConfigException
         */
        public static function share(array $names_or_instances)
        {
        }
        /**
         * This allows to define aliases classes to be used in place of type hints.
         * e.g. [
         *          // generic => specific
         *          'wpdb' => 'QM_DB',
         *      ]
         *
         * @param array $aliases
         *
         * @throws \WPML\Auryn\ConfigException
         */
        public static function alias(array $aliases)
        {
        }
        /**
         * This allows to delegate the object instantiation to a factory.
         * It can be any kind of callable (class or function).
         *
         * @param array $delegated [ $class_name => $instantiator ]
         *
         * @throws \WPML\Auryn\ConfigException
         */
        public static function delegate(array $delegated)
        {
        }
        /**
         * Make returns a new instance otherwise returns a shared instance if the
         * class_name or an instance is set as shared using the share function
         *
         * @param string $class_name
         * @param array  $args
         *
         * @return mixed
         * @throws \WPML\Auryn\InjectionException
         */
        public static function make($class_name, array $args = array())
        {
        }
        /**
         * Invoke the specified callable or class::method string, provisioning dependencies along the way
         *
         * @param mixed $callableOrMethodStr A valid PHP callable or a provisionable ClassName::methodName string
         * @param array $args Optional array specifying params with which to invoke the provisioned callable
         * @throws \WPML\Auryn\InjectionException
         * @return mixed Returns the invocation result returned from calling the generated executable
         */
        public static function execute($callableOrMethodStr, array $args = [])
        {
        }
    }
}
namespace {
    interface IWPML_Current_Language
    {
        public function get_current_language();
        public function get_default_language();
        public function get_admin_language();
    }
    class WPML_Cookie
    {
        /**
         * @param string $name
         * @param string $value
         * @param int $expires
         * @param string $path
         * @param string $domain
         * @param bool $HTTPOnly
         * @param string|null $sameSite
         */
        public function set_cookie($name, $value, $expires, $path, $domain, $HTTPOnly = \false, $sameSite = \null)
        {
        }
        /**
         * @param string $name
         *
         * @return string
         */
        public function get_cookie($name)
        {
        }
        /**
         * simple wrapper for \headers_sent
         *
         * @return bool
         */
        public function headers_sent()
        {
        }
    }
    interface IWPML_WP_Element_Type
    {
        /**
         * @param string $element_name
         *
         * @return mixed
         */
        public function get_wp_element_type_object($element_name);
    }
    class WPML_WP_Post_Type implements \IWPML_WP_Element_Type
    {
        /**
         * @param string $post_type
         *
         * @return null|WP_Post_Type
         */
        public function get_wp_element_type_object($post_type)
        {
        }
    }
    /**
     * Wrapper class for basic PHP functions
     */
    class WPML_PHP_Functions
    {
        /**
         * Wrapper around PHP constant defined
         *
         * @param string $constant_name
         *
         * @return bool
         */
        public function defined($constant_name)
        {
        }
        /**
         * Wrapper around PHP constant lookup
         *
         * @param string $constant_name
         *
         * @return string|int
         */
        public function constant($constant_name)
        {
        }
        /**
         * @param string $function_name The function name, as a string.
         *
         * @return bool true if <i>function_name</i> exists and is a function, false otherwise.
         * This function will return false for constructs, such as <b>include_once</b> and <b>echo</b>.
         * @return bool
         */
        public function function_exists($function_name)
        {
        }
        /**
         * @param string $class_name The class name. The name is matched in a case-insensitive manner.
         * @param bool   $autoload   [optional] Whether or not to call &link.autoload; by default.
         *
         * @return bool true if <i>class_name</i> is a defined class, false otherwise.
         * @return bool
         */
        public function class_exists($class_name, $autoload = \true)
        {
        }
        /**
         * @param string $name The extension name
         *
         * @return bool true if the extension identified by <i>name</i> is loaded, false otherwise.
         */
        public function extension_loaded($name)
        {
        }
        /**
         * @param string $string
         *
         * @return string
         */
        public function mb_strtolower($string)
        {
        }
        /**
         * Wrapper for \phpversion()
         *
         * * @param string $extension (optional)
         *
         * @return string
         */
        public function phpversion($extension = \null)
        {
        }
        /**
         * Compares two "PHP-standardized" version number strings
         *
         * @see \WPML_WP_API::version_compare
         *
         * @param string $version1
         * @param string $version2
         * @param null   $operator
         *
         * @return mixed
         */
        public function version_compare($version1, $version2, $operator = \null)
        {
        }
        /**
         * @param array $array
         * @param int   $sort_flags
         *
         * @return array
         */
        public function array_unique($array, $sort_flags = \SORT_REGULAR)
        {
        }
        /**
         * @param string $message
         * @param int    $message_type
         * @param string $destination
         * @param string $extra_headers
         *
         * @return bool
         */
        public function error_log($message, $message_type = \null, $destination = \null, $extra_headers = \null)
        {
        }
        public function exit_php()
        {
        }
    }
    class WPML_WP_API extends \WPML_PHP_Functions
    {
        /**
         * @param string $file
         * @param string $filename
         *
         * @return false | string
         */
        public function get_file_mime_type($file, $filename)
        {
        }
        /**
         * Wrapper for \get_option
         *
         * @param string     $option
         * @param bool|false $default
         *
         * @return mixed
         */
        public function get_option($option, $default = \false)
        {
        }
        public function is_url($value)
        {
        }
        public function get_transient($transient)
        {
        }
        public function set_transient($transient, $value, $expiration = 0)
        {
        }
        /**
         * @param string      $option
         * @param mixed       $value
         * @param string|bool $autoload
         *
         * @return bool False if value was not updated and true if value was updated.
         */
        public function update_option($option, $value, $autoload = \null)
        {
        }
        /**
         * @param string|int|WP_Post $ID Optional. Post ID or post object. Default empty.
         *
         * @return false|string
         */
        public function get_post_status($ID = '')
        {
        }
        /**
         * Wrapper for \get_term_link
         *
         * @param  object|int|string $term
         * @param string            $taxonomy
         *
         * @return string|WP_Error
         */
        public function get_term_link($term, $taxonomy = '')
        {
        }
        /**
         *  Wrapper for \get_term_by
         *
         * @param string     $field
         * @param string|int $value
         * @param string     $taxonomy
         * @param string     $output
         * @param string     $filter
         *
         * @return bool|WP_Term
         */
        public function get_term_by($field, $value, $taxonomy = '', $output = \OBJECT, $filter = 'raw')
        {
        }
        /**
         * Wrapper for \add_submenu_page
         *
         * @param string       $parent_slug
         * @param string       $page_title
         * @param string       $menu_title
         * @param string       $capability
         * @param string       $menu_slug
         * @param array|string $function
         *
         * @return false|string
         */
        public function add_submenu_page($parent_slug, $page_title, $menu_title, $capability, $menu_slug, $function = '')
        {
        }
        /**
         * @param string       $page_title
         * @param string       $menu_title
         * @param string       $capability
         * @param string       $menu_slug
         * @param array|string $function
         * @param string       $icon_url
         * @param null         $position
         *
         * @return string
         */
        public function add_menu_page($page_title, $menu_title, $capability, $menu_slug, $function = '', $icon_url = '', $position = \null)
        {
        }
        /**
         * Wrapper for \get_post_type_archive_link
         *
         * @param string $post_type
         *
         * @return string
         */
        public function get_post_type_archive_link($post_type)
        {
        }
        /**
         * Wrapper for \get_edit_post_link
         *
         * @param int    $id
         * @param string $context
         *
         * @return null|string|void
         */
        public function get_edit_post_link($id = 0, $context = 'display')
        {
        }
        /**
         * Wrapper for get_the_title
         *
         * @param int|WP_Post $post
         *
         * @return string
         */
        public function get_the_title($post)
        {
        }
        /**
         * Wrapper for \get_day_link
         *
         * @param int $year
         * @param int $month
         * @param int $day
         *
         * @return string
         */
        public function get_day_link($year, $month, $day)
        {
        }
        /**
         * Wrapper for \get_month_link
         *
         * @param int $year
         * @param int $month
         *
         * @return string
         */
        public function get_month_link($year, $month)
        {
        }
        /**
         * Wrapper for \get_year_link
         *
         * @param int $year
         *
         * @return string
         */
        public function get_year_link($year)
        {
        }
        /**
         * Wrapper for \get_author_posts_url
         *
         * @param int    $author_id
         * @param string $author_nicename
         *
         * @return string
         */
        public function get_author_posts_url($author_id, $author_nicename = '')
        {
        }
        /**
         * Wrapper for \current_user_can
         *
         * @param string $capability
         *
         * @return bool
         */
        public function current_user_can($capability)
        {
        }
        /**
         * @param int    $user_id
         * @param string $key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_user_meta($user_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \get_post_type
         *
         * @param null|int|WP_Post $post
         *
         * @return false|string
         */
        public function get_post_type($post = \null)
        {
        }
        public function is_archive()
        {
        }
        public function is_front_page()
        {
        }
        public function is_home()
        {
        }
        /**
         * @param int|string|array $page Optional. Page ID, title, slug, or array of such. Default empty.
         *
         * @return bool
         */
        public function is_page($page = '')
        {
        }
        public function is_paged()
        {
        }
        /**
         * @param string $post
         *
         * @return int|string|array $post Optional. Post ID, title, slug, or array of such. Default empty.
         */
        public function is_single($post = '')
        {
        }
        /**
         * @param string|array $post_types
         *
         * @return bool
         */
        public function is_singular($post_types = '')
        {
        }
        /**
         * @param int|WP_User $user
         * @param string      $capability
         *
         * @return bool
         */
        public function user_can($user, $capability)
        {
        }
        /**
         * Wrapper for add_filter
         *
         * @param string   $tag
         * @param callable $function_to_add
         * @param int      $priority
         * @param int      $accepted_args
         *
         * @return bool|mixed|true|void
         */
        public function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * Wrapper for remove_filter
         *
         * @param string   $tag
         * @param callable $function_to_remove
         * @param int      $priority
         *
         * @return bool
         */
        public function remove_filter($tag, $function_to_remove, $priority = 10)
        {
        }
        /**
         * Wrapper for current_filter
         */
        public function current_filter()
        {
        }
        /**
         * @param null|string $tab
         * @param null|string $hash
         *
         * @return string
         */
        public function get_tm_url($tab = \null, $hash = \null)
        {
        }
        /**
         * Wrapper for \is_admin()
         *
         * @return bool
         */
        public function is_admin()
        {
        }
        public function is_jobs_tab()
        {
        }
        /**
         * @param string|null $tab
         * @param string|null $page_type
         *
         * @return bool
         */
        public function is_tm_page($tab = \null, $page_type = 'management')
        {
        }
        public function is_translation_queue_page()
        {
        }
        public function is_string_translation_page()
        {
        }
        public function is_support_page()
        {
        }
        public function is_troubleshooting_page()
        {
        }
        /**
         * @param string $page
         *
         * @return bool
         */
        public function is_core_page($page = '')
        {
        }
        public function is_back_end()
        {
        }
        public function is_front_end()
        {
        }
        public function is_ajax()
        {
        }
        public function is_cron_job()
        {
        }
        public function is_heartbeat()
        {
        }
        public function is_post_edit_page()
        {
        }
        public function is_new_post_page()
        {
        }
        public function is_term_edit_page()
        {
        }
        public function is_customize_page()
        {
        }
        public function is_comments_post_page()
        {
        }
        public function is_plugins_page()
        {
        }
        public function is_themes_page()
        {
        }
        /**
         * Wrapper for \is_feed that returns false if called before the loop
         *
         * @param string $feeds
         *
         * @return bool
         */
        public function is_feed($feeds = '')
        {
        }
        /**
         * Wrapper for \wp_update_term_count
         *
         * @param int[]      $terms given by their term_taxonomy_ids
         * @param string     $taxonomy
         * @param bool|false $do_deferred
         *
         * @return bool
         */
        public function wp_update_term_count($terms, $taxonomy, $do_deferred = \false)
        {
        }
        /**
         * Wrapper for \get_taxonomy
         *
         * @param string $taxonomy
         *
         * @return bool|object
         */
        public function get_taxonomy($taxonomy)
        {
        }
        /**
         * Wrapper for \wp_set_object_terms
         *
         * @param int              $object_id The object to relate to.
         * @param array|int|string $terms     A single term slug, single term id, or array of either term slugs or ids.
         *                                    Will replace all existing related terms in this taxonomy.
         * @param string           $taxonomy  The context in which to relate the term to the object.
         * @param bool             $append    Optional. If false will delete difference of terms. Default false.
         *
         * @return array|WP_Error Affected Term IDs.
         */
        public function wp_set_object_terms($object_id, $terms, $taxonomy, $append = \false)
        {
        }
        /**
         * Wrapper for \get_post_types
         *
         * @param array  $args
         * @param string $output
         * @param string $operator
         *
         * @return array
         */
        public function get_post_types($args = array(), $output = 'names', $operator = 'and')
        {
        }
        public function wp_send_json($response)
        {
        }
        public function wp_send_json_success($data = \null)
        {
        }
        public function wp_send_json_error($data = \null)
        {
        }
        /**
         * Wrapper for \get_current_user_id
         *
         * @return int
         */
        public function get_current_user_id()
        {
        }
        /**
         * Wrapper for \get_post
         *
         * @param null|int|WP_Post $post
         * @param string           $output
         * @param string           $filter
         *
         * @return array|null|WP_Post
         */
        public function get_post($post = \null, $output = \OBJECT, $filter = 'raw')
        {
        }
        /**
         * Wrapper for \get_post_meta
         *
         * @param int    $post_id Post ID.
         * @param string $key Optional. The meta key to retrieve. By default, returns
         *                        data for all keys. Default empty.
         * @param bool   $single Optional. Whether to return a single value. Default false.
         *
         * @return mixed Will be an array if $single is false. Will be value of meta data
         *               field if $single is true.
         */
        public function get_post_meta($post_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \update_post_meta
         *
         * @param int    $post_id Post ID.
         * @param string $key
         * @param mixed  $value
         * @param mixed  $prev_value
         *
         * @return int|bool
         */
        public function update_post_meta($post_id, $key, $value, $prev_value = '')
        {
        }
        /**
         * Wrapper for add_post_meta
         *
         * @param int    $post_id    Post ID.
         * @param string $meta_key   Metadata name.
         * @param mixed  $meta_value Metadata value. Must be serializable if non-scalar.
         * @param bool   $unique     Optional. Whether the same key should not be added.
         *                           Default false.
         * @return int|false Meta ID on success, false on failure.
         */
        public function add_post_meta($post_id, $meta_key, $meta_value, $unique = \false)
        {
        }
        /**
         * Wrapper for delete_post_meta
         *
         * @param int    $post_id    Post ID.
         * @param string $meta_key   Metadata name.
         * @param mixed  $meta_value Optional. Metadata value. Must be serializable if
         *                           non-scalar. Default empty.
         * @return bool True on success, false on failure.
         */
        public function delete_post_meta($post_id, $meta_key, $meta_value = '')
        {
        }
        /**
         * Wrapper for \get_term_meta
         *
         * @param int    $term_id
         * @param string $key
         * @param bool   $single
         *
         * @return mixed
         */
        public function get_term_meta($term_id, $key = '', $single = \false)
        {
        }
        /**
         * Wrapper for \get_permalink
         *
         * @param int        $id
         * @param bool|false $leavename
         *
         * @return bool|string
         */
        public function get_permalink($id = 0, $leavename = \false)
        {
        }
        /**
         * Wrapper for \wp_mail
         *
         * @param string       $to
         * @param string       $subject
         * @param string       $message
         * @param string|array $headers
         * @param array|array  $attachments
         *
         * @return bool
         */
        public function wp_mail($to, $subject, $message, $headers = '', $attachments = array())
        {
        }
        /**
         * Wrapper for \get_post_custom
         *
         * @param int $post_id
         *
         * @return array
         */
        public function get_post_custom($post_id = 0)
        {
        }
        public function is_dashboard_tab()
        {
        }
        public function wp_safe_redirect($redir_target, $status = 302)
        {
        }
        /**
         * Wrapper for \load_textdomain
         *
         * @param string $domain
         * @param string $mofile
         *
         * @return bool
         */
        public function load_textdomain($domain, $mofile)
        {
        }
        /**
         * Wrapper for \get_home_url
         *
         * @param null|int    $blog_id
         * @param string      $path
         * @param null|string $scheme
         *
         * @return string
         */
        public function get_home_url($blog_id = \null, $path = '', $scheme = \null)
        {
        }
        /**
         * Wrapper for \get_site_url
         *
         * @param null|int    $blog_id
         * @param string      $path
         * @param null|string $scheme
         *
         * @return string
         */
        public function get_site_url($blog_id = \null, $path = '', $scheme = \null)
        {
        }
        /**
         * Wrapper for \is_multisite
         *
         * @return bool
         */
        public function is_multisite()
        {
        }
        /**
         * Wrapper for \is_main_site
         *
         * @param null|int $site_id
         *
         * @return bool
         */
        public function is_main_site($site_id = \null)
        {
        }
        /**
         * Wrapper for \ms_is_switched
         *
         * @return bool
         */
        public function ms_is_switched()
        {
        }
        /**
         * Wrapper for \get_current_blog_id
         *
         * @return int
         */
        public function get_current_blog_id()
        {
        }
        /**
         * Wrapper for wp_get_post_terms
         *
         * @param int    $post_id
         * @param string $taxonomy
         * @param array  $args
         *
         * @return array|WP_Error
         */
        public function wp_get_post_terms($post_id = 0, $taxonomy = 'post_tag', $args = array())
        {
        }
        /**
         * Wrapper for get_taxonomies
         *
         * @param array  $args
         * @param string $output
         * @param string $operator
         *
         * @return array
         */
        public function get_taxonomies($args = array(), $output = 'names', $operator = 'and')
        {
        }
        /**
         * Wrapper for \wp_get_theme
         *
         * @param string $stylesheet
         * @param string $theme_root
         *
         * @return WP_Theme
         */
        public function wp_get_theme($stylesheet = \null, $theme_root = \null)
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Name')
         *
         * @return string
         */
        public function get_theme_name()
        {
        }
        /**
         * Wrapper for \wp_get_theme->parent_theme
         *
         * @return string
         */
        public function get_theme_parent_name()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('URI')
         *
         * @return string
         */
        public function get_theme_URI()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Author')
         *
         * @return string
         */
        public function get_theme_author()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('AuthorURI')
         *
         * @return string
         */
        public function get_theme_authorURI()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Template')
         *
         * @return string
         */
        public function get_theme_template()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('Version')
         *
         * @return string
         */
        public function get_theme_version()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('TextDomain')
         *
         * @return string
         */
        public function get_theme_textdomain()
        {
        }
        /**
         * Wrapper for \wp_get_theme->get('DomainPath')
         *
         * @return string
         */
        public function get_theme_domainpath()
        {
        }
        /**
         * Wrapper for \get_plugins()
         *
         * @return array
         */
        public function get_plugins()
        {
        }
        /**
         * Wrapper for \get_post_custom_keys
         *
         * @param int $post_id
         *
         * @return array|void
         */
        public function get_post_custom_keys($post_id)
        {
        }
        /**
         * Wrapper for \get_bloginfo
         *
         * @param string $show (optional)
         * @param string $filter (optional)
         *
         * @return string
         */
        public function get_bloginfo($show = '', $filter = 'raw')
        {
        }
        /**
         * Compare version in their "naked" form
         *
         * @see \WPML_WP_API::get_naked_version
         * @see \WPML_WP_API::version_compare
         * @see \version_compare
         *
         * @param string $version1
         * @param string $version2
         * @param null   $operator
         *
         * @return mixed
         */
        public function version_compare_naked($version1, $version2, $operator = \null)
        {
        }
        /**
         * Returns only the first 3 numeric elements of a version (assuming to use MAJOR.MINOR.PATCH
         *
         * @param string $version
         *
         * @return string
         */
        public function get_naked_version($version)
        {
        }
        public function has_filter($tag, $function_to_check = \false)
        {
        }
        public function add_action($tag, $function_to_add, $priority = 10, $accepted_args = 1)
        {
        }
        public function get_current_screen()
        {
        }
        /**
         * Wrapper for \get_query_var
         *
         * @param string $var
         * @param mixed  $default
         *
         * @return mixed
         */
        public function get_query_var($var, $default = '')
        {
        }
        /**
         * Wrapper for \get_queried_object
         */
        public function get_queried_object()
        {
        }
        public function get_raw_post_data()
        {
        }
        public function wp_verify_nonce($nonce, $action = -1)
        {
        }
        /**
         * @param string $action
         *
         * @return int The number of times action hook $tag is fired.
         */
        public function did_action($action)
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        public function get_wp_post_types_global()
        {
        }
        /**
         * @return wp_xmlrpc_server
         */
        public function get_wp_xmlrpc_server()
        {
        }
        /**
         * Wrapper for $wp_taxonomies global variable
         */
        public function get_wp_taxonomies()
        {
        }
        /**
         * Wrapper for get_category_link function
         *
         * @param int $category_id
         *
         * @return string
         */
        public function get_category_link($category_id)
        {
        }
        /**
         * Wrapper for is_wp_error function
         *
         * @param mixed $thing
         *
         * @return bool
         */
        public function is_wp_error($thing)
        {
        }
        /**
         * @param int  $limit
         * @param bool $provide_object
         * @param bool $ignore_args
         *
         * @return array
         */
        public function get_backtrace($limit = 0, $provide_object = \false, $ignore_args = \true)
        {
        }
        /**
         * @return WP_Filesystem_Direct
         */
        public function get_wp_filesystem_direct()
        {
        }
        /**
         * @return WPML_Notices
         */
        public function get_admin_notices()
        {
        }
        /**
         * @param Twig_LoaderInterface $loader
         * @param array                $environment_args
         *
         * @return Twig_Environment
         */
        public function get_twig_environment($loader, $environment_args)
        {
        }
        /**
         * @param array $template_paths
         *
         * @return Twig_Loader_Filesystem|\WPML\Core\Twig_LoaderInterface
         */
        public function get_twig_loader_filesystem($template_paths)
        {
        }
        /**
         * @return \WPML\Core\Twig_Loader_String|\WPML\Core\Twig_LoaderInterface
         */
        public function get_twig_loader_string()
        {
        }
        public function is_a_REST_request()
        {
        }
    }
    class WPML_WP_Roles
    {
        const ROLES_ADMINISTRATOR = 'administrator';
        const ROLES_EDITOR = 'editor';
        const ROLES_CONTRIBUTOR = 'contributor';
        const ROLES_SUBSCRIBER = 'subscriber';
        const EDITOR_LEVEL = 'level_7';
        const CONTRIBUTOR_LEVEL = 'level_1';
        const SUBSCRIBER_LEVEL = 'level_0';
        /**
         * Returns an array of roles which meet the capability level set in \WPML_WP_Roles::EDITOR_LEVEL.
         *
         * @return array
         */
        public static function get_editor_roles()
        {
        }
        /**
         * Returns an array of roles which meet the capability level set in \WPML_WP_Roles::CONTRIBUTOR_LEVEL.
         *
         * @return array
         */
        public static function get_contributor_roles()
        {
        }
        /**
         * Returns an array of roles wich meet the capability level set in \WPML_WP_Roles::SUBSCRIBER_LEVEL.
         *
         * @return array
         */
        public static function get_subscriber_roles()
        {
        }
        /**
         * @return array
         */
        public static function get_roles_up_to_user_level(\WP_User $user)
        {
        }
        /**
         * @param  WP_User $user
         *
         * @return int
         */
        public static function get_user_max_level(\WP_User $user)
        {
        }
        public static function get_highest_level(array $capabilities)
        {
        }
    }
    /**
     * Created by PhpStorm.
     * User: bruce
     * Date: 30/10/17
     * Time: 9:09 PM
     */
    class WPML_WP_Taxonomy implements \IWPML_WP_Element_Type
    {
        public static function get_linked_post_types($taxonomy)
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return false|WP_Taxonomy
         */
        public function get_wp_element_type_object($taxonomy)
        {
        }
    }
    class WCML_Troubleshooting
    {
        const ITEMS_PER_AJAX = 5;
        /**
         * WCML_Troubleshooting constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         * @param wpdb             $wpdb
         */
        public function __construct($woocommerce_wpml, $sitepress, $wpdb)
        {
        }
        public function init()
        {
        }
        public function wcml_count_products_with_variations()
        {
        }
        public function trbl_update_count()
        {
        }
        public function wcml_sync_variations_update_option()
        {
        }
        public function wcml_count_products()
        {
        }
        public function wcml_count_products_for_gallery_sync()
        {
        }
        public function wcml_count_product_categories()
        {
        }
        public function trbl_sync_variations()
        {
        }
        public function trbl_gallery_images()
        {
        }
        public function register_reviews_in_st()
        {
        }
        public function get_products_needs_gallery_sync($limit = \false)
        {
        }
        public function trbl_sync_categories()
        {
        }
        public function get_product_categories_needs_sync($limit = \false)
        {
        }
        public function trbl_duplicate_terms()
        {
        }
        public function trbl_fix_product_type_terms()
        {
        }
        public function wcml_count_products_and_variations()
        {
        }
        public function trbl_sync_stock()
        {
        }
        public function get_original_products_and_variations()
        {
        }
        public function fix_translated_variations_relationships()
        {
        }
        public function wcml_count_product_fix_relationships()
        {
        }
        public function wcml_count_unregistered_reviews()
        {
        }
        public function sync_deleted_meta()
        {
        }
    }
    class WCML_Switch_Lang_Request implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const COOKIE_NAME = 'wp-wpml_current_language';
        /** @var string $default_language */
        protected $default_language;
        /** @var WPML_WP_API */
        protected $wp_api;
        /**
         * @param WPML_Cookie $cookie
         * @param WPML_WP_API $wp_api
         * @param SitePress   $sitepress
         */
        public function __construct(\WPML_Cookie $cookie, \WPML_WP_API $wp_api, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function detect_user_switch_language()
        {
        }
        /**
         * @return string language code stored in the user's wp-wpml_current_language cookie
         */
        public function get_cookie_lang()
        {
        }
        public function get_cookie_name()
        {
        }
        /**
         * @return bool|string
         */
        public function get_cookie_domain()
        {
        }
        /**
         * Returns SERVER_NAME, or HTTP_HOST if the first is not available
         *
         * @return string
         */
        public function get_server_host_name()
        {
        }
        public function get_requested_lang()
        {
        }
        public function is_comments_post_page()
        {
        }
        /**
         * @global $wpml_url_converter
         *
         * @return string|false language code that can be determined from the currently requested URI.
         */
        public function get_request_uri_lang()
        {
        }
    }
    class WCML_Ajax_Setup
    {
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        public function add_hidden_language_field()
        {
        }
        public function add_language_parameter_to_ajax_url($woocommerce_params)
        {
        }
        /**
         * Adds a language parameter to the url when different domains for each language are used.
         *
         * @param string $endpoint
         *
         * @return string
         */
        public function add_language_to_endpoint($endpoint)
        {
        }
    }
    class WCML_TP_Support
    {
        const CUSTOM_FIELD_NAME = 'wc_variation_field:';
        /**
         * WCML_Attributes constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param wpdb $wpdb
         * @param WPML_Element_Translation_Package $tp
         * @param array $tm_settings
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \wpdb $wpdb, \WPML_Element_Translation_Package $tp, array $tm_settings)
        {
        }
        public function add_hooks()
        {
        }
        public function append_custom_attributes_to_translation_package($package, $post)
        {
        }
        public function save_custom_attribute_translations($post_id, $data, $job)
        {
        }
        public function append_variation_custom_fields_to_translation_package($package, $post)
        {
        }
        public function save_variation_custom_fields_translations($post_id, $data, $job)
        {
        }
        public function append_images_to_translation_package($package, $post)
        {
        }
        public function save_images_translations($post_id, $data, $job)
        {
        }
    }
    class WCML_Dependencies
    {
        const MIN_WPML = '4.3.5';
        const MIN_WPML_ST = '3.0.5';
        const MIN_WOOCOMMERCE = '3.9.0';
        /** @var array $xml_config_errors */
        public $xml_config_errors = [];
        public function __construct()
        {
        }
        public function check()
        {
        }
        /**
         * Adds admin notice.
         */
        public function _old_wpml_warning()
        {
        }
        public function _wpml_not_installed_warning()
        {
        }
        public function _old_wc_warning()
        {
        }
        public function _old_wpml_st_warning()
        {
        }
        /**
         * Adds default taxonomies notice.
         */
        public function check_for_translatable_default_taxonomies()
        {
        }
        public function plugin_notice_message()
        {
        }
        public function check_wpml_config()
        {
        }
        public function required_plugin_install_link($repository = 'wpml')
        {
        }
    }
    class WCML_Capabilities
    {
        public static function set_up_capabilities()
        {
        }
        public static function reload_capabilities()
        {
        }
        public static function canManageWcml()
        {
        }
        /**
         * @return bool
         */
        public static function canAccessAllWcmlTabs()
        {
        }
    }
    class WCML_Coupons
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param WC_Coupon $coupon Coupon object.
         */
        public function wcml_coupon_loaded(\WC_Coupon $coupon)
        {
        }
        public function icl_adjust_terms_filtering()
        {
        }
        /**
         * @param bool $valid
         * @param WC_Product $product
         * @param WC_Coupon $object
         * @param array $values
         *
         * @return bool
         */
        public function is_valid_for_product($valid, $product, $object, $values)
        {
        }
    }
    class WCML_Cart_Removed_Items_Widget extends \WP_Widget
    {
        function __construct()
        {
        }
        function widget($args, $instance)
        {
        }
    }
    class WCML_Emails
    {
        const PRIORITY_AFTER_STATUS_CHANGE_EMAIL = 11;
        const PRIORITY_BEFORE_EMAIL_SET_LANGUAGE = 9;
        public function __construct(\WCML_WC_Strings $wcmlStrings, \SitePress $sitepress, \WooCommerce $woocommerce, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function email_refresh_in_ajax()
        {
        }
        public function refresh_email_lang_complete($order_id)
        {
        }
        /**
         * Translate WooCommerce emails.
         *
         * @param array|object $order
         */
        public function email_header($order)
        {
        }
        public function refresh_email_lang($order_id)
        {
        }
        /**
         * @param array|int $order_id
         *
         * @return null|string
         */
        public function get_order_language($order_id)
        {
        }
        /**
         * After email translation switch language to default.
         */
        public function email_footer()
        {
        }
        public function comments_language()
        {
        }
        public function email_heading_completed($order_id, $no_checking = \false)
        {
        }
        public function email_heading_processing($order_id)
        {
        }
        public function customer_processing_order_heading($heading)
        {
        }
        public function customer_processing_order_subject($subject)
        {
        }
        public function email_heading_on_hold($order_id)
        {
        }
        public function customer_on_hold_order_heading($heading)
        {
        }
        public function customer_on_hold_order_subject($subject)
        {
        }
        public function email_heading_note($args)
        {
        }
        /**
         * @param string   $value
         * @param WC_Email $object
         * @param string   $old_value
         * @param string   $key
         *
         * @return mixed
         */
        public function filter_emails_strings($value, $object, $old_value, $key)
        {
        }
        /**
         * @param string      $key
         * @param WC_Email    $object
         * @param bool        $isAdminEmail
         * @param string|null $originalValue
         * @param string      $originalDomain
         *
         * @return string
         */
        public function get_email_translated_string($key, $object, $isAdminEmail, $originalValue = \null, $originalDomain = 'woocommerce')
        {
        }
        /**
         * @param WC_Email $emailObject
         *
         * @return array
         */
        public function get_email_context_and_name($emailObject)
        {
        }
        public function new_order_admin_email($order_id)
        {
        }
        /**
         * @param int $processedOrderId
         *
         * @return Closure ( bool, \WC_Order ) -> bool
         */
        public static function getPreventDuplicatedNewOrderEmail($processedOrderId)
        {
        }
        public function new_order_email_heading($heading)
        {
        }
        public function new_order_email_subject($subject)
        {
        }
        public function backend_new_order_admin_email($order_id)
        {
        }
        public function change_email_language($lang)
        {
        }
        /**
         * @depreacted since WCML 4.12, use `getStringTranslation` instead.
         *
         * @param string $context
         * @param string $name
         * @param false  $order_id
         * @param null   $language_code
         *
         * @return string|false
         */
        public function wcml_get_translated_email_string($context, $name, $order_id = \false, $language_code = \null)
        {
        }
        /**
         * First we try to get the string translation from admin string.
         * If falsy, we try to translate the string with the default gettext.
         *
         * @param string      $domain
         * @param string      $name
         * @param string|null $lang
         * @param string|null $originalValue
         * @param string      $originalDomain
         *
         * @return string
         */
        public function getStringTranslation($domain, $name, $lang = \null, $originalValue = \null, $originalDomain = 'woocommerce')
        {
        }
        public function icl_current_string_language($current_language, $name)
        {
        }
        // set correct locale code for emails
        public function set_locale_for_emails($locale, $domain)
        {
        }
        public function translate_woocommerce_countries($countries)
        {
        }
        public function send_queued_transactional_email($allow, $filter, $args)
        {
        }
        /**
         * @param WC_Product $product
         */
        public function low_stock_admin_notification($product)
        {
        }
        /**
         * @param WC_Product $product
         */
        public function no_stock_admin_notification($product)
        {
        }
        /**
         * @param WC_Data         $order    Object object.
         * @param WP_REST_Request $request  Request object.
         *
         * @return WC_Data
         */
        public function set_rest_language($order, $request)
        {
        }
    }
    class WCML_Requests
    {
        public function __construct()
        {
        }
        public function run()
        {
        }
        public function update_settings_from_warning()
        {
        }
        public function override_cached_widget_id($widget_id)
        {
        }
    }
    class WCML_Url_Translation
    {
        public $default_product_base;
        public $default_product_category_base;
        public $default_product_category_gettext_base;
        public $default_product_tag_base;
        public $default_product_tag_gettext_base;
        public $wc_permalinks;
        /**
         * WCML_Url_Translation constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         * @param wpdb             $wpdb
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress, \wpdb $wpdb)
        {
        }
        public function set_up()
        {
        }
        public function clean_up_product_and_taxonomy_bases()
        {
        }
        public function fix_post_object_rewrite_slug()
        {
        }
        public function url_strings_context()
        {
        }
        public function url_string_name($type, $value = '')
        {
        }
        public function translate_product_base()
        {
        }
        public function get_woocommerce_product_base()
        {
        }
        public function register_product_and_taxonomy_bases($value = \false, $old_value = \false)
        {
        }
        /**
         * @param mixed $permalinks
         *
         * @return mixed
         */
        public function use_untranslated_default_url_bases($permalinks)
        {
        }
        public function add_default_slug_translations($slug, $name)
        {
        }
        public function force_bases_in_strings_languages($value)
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function translate_bases_in_rewrite_rules($value)
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function translate_wc_default_taxonomies_bases_in_rewrite_rules($value)
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function translate_attributes_bases_in_rewrite_rules($value)
        {
        }
        /**
         * @param array $value
         *
         * @return array
         */
        public function translate_shop_page_base_in_rewrite_rules($value)
        {
        }
        /**
         * @param array  $value
         * @param string $pattern
         * @param string $replacement_pattern
         * @param string $replacement
         *
         * @return array
         */
        public function replace_bases_in_rewrite_rules($value, $pattern, $replacement_pattern, $replacement)
        {
        }
        public function translate_taxonomy_base($termlink, $term, $taxonomy)
        {
        }
        public function get_translated_tax_slug($taxonomy, $language = \false)
        {
        }
        public function get_base_translation($base, $language)
        {
        }
        /**
         * @param string $base
         *
         * @return string
         */
        public function get_source_slug_language($base)
        {
        }
        public function wcml_update_base_translation()
        {
        }
        // return correct redirect URL for WC standard taxonomies when pretty permalink uses with lang as parameter in WPML
        public function check_wc_tax_url_on_redirect($redirect_url, $requested_url)
        {
        }
        public function translate_query_var_for_product($public_query_vars)
        {
        }
        public function maybe_remove_query_vars_filter()
        {
        }
        public function get_translated_product_base_by_lang($language = \false, $product_slug = \false)
        {
        }
        public function encode_shop_slug($location)
        {
        }
        public function translate_product_post_type_link($permalink, $post)
        {
        }
    }
    class WCML_Endpoints
    {
        var $endpoints_strings = array();
        /**
         * @var string
         * @see WPML_Endpoints_Support::STRING_CONTEXT
         */
        const STRING_CONTEXT = 'WP Endpoints';
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \SitePress $sitepress, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function migrate_ones_string_translations()
        {
        }
        public function reserved_requests($requests)
        {
        }
        public function add_wc_endpoints_translations($language)
        {
        }
        public function get_endpoint_translation($endpoint, $language = \null)
        {
        }
        public function endpoint_permalink_filter($data, $endpoint_key)
        {
        }
        public function filter_get_endpoint_url($url, $endpoint, $value, $permalink)
        {
        }
        public function filter_endpoint_url_value($value, $page_lang)
        {
        }
        public function add_endpoint_to_current_ls_language_url($url, $post_lang, $data, $current_endpoint)
        {
        }
    }
    class WCML_Upgrade
    {
        public function __construct()
        {
        }
        public function setup_upgrade_notices()
        {
        }
        public function show_upgrade_notices()
        {
        }
        public function hide_upgrade_notice($k)
        {
        }
        public function run()
        {
        }
        public function upgrade_2_9_9_1()
        {
        }
        public function upgrade_3_1()
        {
        }
        public function upgrade_3_2()
        {
        }
        public function upgrade_3_3()
        {
        }
        public function upgrade_3_5()
        {
        }
        public function upgrade_3_5_4()
        {
        }
        public function upgrade_3_6()
        {
        }
        public function upgrade_3_7()
        {
        }
        public function upgrade_3_7_3()
        {
        }
        public function upgrade_3_7_11()
        {
        }
        public function upgrade_3_8()
        {
        }
        public function upgrade_3_9()
        {
        }
        public function upgrade_3_9_1()
        {
        }
        public function upgrade_4_0()
        {
        }
        public function upgrade_4_1_0()
        {
        }
        public function upgrade_4_2_0()
        {
        }
    }
    /**
     * Class WCML_Admin_Menus
     */
    class WCML_Admin_Menus
    {
        const SLUG = 'wpml-wcml';
        /**
         * Set up menus
         *
         * @param woocommerce_wpml $woocommerce_wpml WCML instance.
         * @param SitePress        $sitepress        WPML Core instance.
         * @param wpdb             $wpdb             wpdb instance.
         */
        public static function set_up_menus($woocommerce_wpml, $sitepress, $wpdb)
        {
        }
        public static function remove_wpml_admin_language_switcher()
        {
        }
        /**
         * @param array $menu
         *
         * @return array
         */
        public static function wpml_menu_page($menu)
        {
        }
        public static function register_menus()
        {
        }
        public static function render_menus()
        {
        }
        public static function documentation_links()
        {
        }
        public static function hide_multilingual_content_setup_box()
        {
        }
        public static function restrict_admin_with_redirect()
        {
        }
        /**
         * @param array $actions
         *
         * @return array
         */
        public static function add_settings_links_to_plugin_actions($actions)
        {
        }
        public static function inf_editing_product_in_non_default_lang()
        {
        }
        /**
         * @param bool $prevent_access
         *
         * @return bool
         */
        public static function check_user_admin_access($prevent_access)
        {
        }
        public static function add_menu_warning()
        {
        }
        /**
         * @return string
         */
        public static function getWcmlLabel()
        {
        }
    }
    class WCML_Products
    {
        /**
         * @param woocommerce_wpml        $woocommerce_wpml
         * @param SitePress|NullSitePress $sitepress
         * @param WPML_Post_Translation   $post_translations
         * @param wpdb                    $wpdb
         * @param WPML_WP_Cache           $wpml_cache
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress, \WPML_Post_Translation $post_translations = \null, \wpdb $wpdb, \WPML_WP_Cache $wpml_cache = \null)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int|string $product_id
         *
         * @return bool
         */
        public function is_original_product($product_id)
        {
        }
        /**
         * @param int|string $product_id
         *
         * @return null|string
         */
        public function get_original_product_language($product_id)
        {
        }
        /**
         * @param int|string $product_id
         *
         * @return int|string
         */
        public function get_original_product_id($product_id)
        {
        }
        public function is_variable_product($product_id)
        {
        }
        public function is_downloadable_product($product)
        {
        }
        public function is_grouped_product($product_id)
        {
        }
        public function get_translation_flags($active_languages, $slang = \false, $job_language = \false)
        {
        }
        public function get_translation_statuses($original_product_id, $product_translations, $active_languages, $slang = \false, $trid = \false, $job_language = \false)
        {
        }
        /**
         * @param bool  $is_translator
         * @param int   $user_id
         * @param array $args
         *
         * @return bool
         */
        public function wcml_override_is_translator($is_translator, $user_id, $args)
        {
        }
        /**
         * @param bool    $user_can_translate
         * @param WP_User $user
         *
         * @return bool
         */
        public function wcml_user_can_translate($user_can_translate, $user)
        {
        }
        // product quickedit.
        public function filter_product_actions($actions, $post)
        {
        }
        /**
         * Takes off translated products from the Up-sells/Cross-sells tab.
         */
        public function filter_woocommerce_upsell_crosssell_posts_by_language($posts)
        {
        }
        /**
         * @param array $found_products
         *
         * @return array
         */
        public function filter_wc_searched_products_on_front($found_products)
        {
        }
        /**
         * @param array $found_products
         *
         * @return array
         */
        public function filter_wc_searched_products_on_admin($found_products)
        {
        }
        /**
         * Sync to translations after sorting original products.
         */
        public function update_all_products_translations_ordering()
        {
        }
        /**
         * Update menu_order fro translations after ordering original products
         *
         * @param int $product_id
         */
        public function update_order_for_product_translations($product_id)
        {
        }
        public function filter_excerpt_field_content_copy($elements)
        {
        }
        public function filter_related_products_args($args)
        {
        }
        /**
         * @param array $query
         *
         * @return array
         */
        public function filter_related_products_query($query)
        {
        }
        /*
         * get meta ids for multiple values post meta key
         */
        public function get_mid_ids_by_key($post_id, $meta_key)
        {
        }
        // count "in progress" and "waiting on translation" as untranslated too
        public function get_untranslated_products_count($language)
        {
        }
        public function is_hide_resign_button()
        {
        }
        public function switch_product_variations_language()
        {
        }
        public function check_product_sku($sku_found, $product_id, $sku)
        {
        }
        public function add_lang_to_shortcode_products_query($query_args)
        {
        }
        /**
         * Get file download path in correct domain
         *
         * @param string $file_path file path URL
         * @return string
         */
        public function filter_file_download_path($file_path)
        {
        }
        /**
         *
         * @return bool
         */
        public function is_product_display_as_translated_post_type()
        {
        }
        /**
         * @param bool   $value
         * @param string $customer_email
         * @param int    $user_id
         * @param int    $product_id
         *
         * @return bool
         */
        public function is_customer_bought_product($value, $customer_email, $user_id, $product_id)
        {
        }
        public function filter_product_data($data, $product_id, $meta_key)
        {
        }
        /**
         * @param int $product_id
         *
         * @return null|string
         */
        public function get_product_price_from_db($product_id)
        {
        }
        /**
         * return not cached value for product
         *
         * @param bool $product_type
         * @param int  $product_id
         *
         * @return bool|string
         */
        public function override_product_type_query($product_type, $product_id)
        {
        }
        /**
         * @param bool $reduce_stock
         *
         * @return bool
         */
        public function remove_post_meta_data_filter_on_checkout_stock_update($reduce_stock)
        {
        }
        public function maybe_add_language_parameter($url)
        {
        }
        /**
         * @param int    $product_id
         * @param string $status
         */
        public function update_stock_status($product_id, $status)
        {
        }
    }
    class WCML_WC_Shipping
    {
        const STRINGS_CONTEXT = 'admin_texts_woocommerce_shipping';
        /**
         * WCML_WC_Shipping constructor.
         *
         * @param SitePress       $sitepress
         * @param WCML_WC_Strings $wcmlStrings
         */
        public function __construct(\WPML\Core\ISitePress $sitepress, \WCML_WC_Strings $wcmlStrings)
        {
        }
        public function add_hooks()
        {
        }
        public function shipping_methods_filters()
        {
        }
        public function save_shipping_zone_method_from_ajax()
        {
        }
        public function register_zone_shipping_strings($instance_settings, $object)
        {
        }
        public function register_shipping_title($shipping_method_id, $title)
        {
        }
        public function translate_shipping_strings($value, $option = \false)
        {
        }
        public function translate_shipping_methods_in_package($available_methods)
        {
        }
        /**
         * @param string      $title
         * @param string      $shipping_id
         * @param string|bool $language
         *
         * @return string
         */
        public function translate_shipping_method_title($title, $shipping_id, $language = \false)
        {
        }
        public function sync_class_costs_for_new_shipping_classes($original_tax, $result)
        {
        }
        public function update_woocommerce_shipping_settings_for_class_costs($settings)
        {
        }
        public function update_woocommerce_shipping_settings_for_class_costs_from_ajax()
        {
        }
        /**
         * @param array $data
         * @param array $inst_settings
         *
         * @return array|mixed
         */
        public function sync_flat_rate_class_cost($data, $inst_settings)
        {
        }
        /**
         * @param string             $rate
         * @param string             $class_name
         * @param WC_Shipping_Method $shipping_method
         *
         * @return string
         */
        public function get_original_shipping_class_rate($rate, $class_name, $shipping_method)
        {
        }
    }
    class WCML_Languages_Upgrader
    {
        public function __construct()
        {
        }
        /**
         * Automatically download translations for WC ( when user install WCML ( from 3.3.3) / add new language in WPML )
         *
         * @param  string $lang_code Language code
         */
        public function download_woocommerce_translations($lang_code, $wc_version)
        {
        }
        /*
         * Automatically download translations for WC for active languages
         *
         */
        public function download_woocommerce_translations_for_active_languages($wc_version = \false)
        {
        }
        public function get_language_pack_uri($locale, $version = \false)
        {
        }
        /*
         * Update the WC language version in database
         *
         *
         * @param  bool   $reply   Whether to bail without returning the package (default: false)
         * @param  string $package Package URL
         *
         * @return bool
         */
        public function version_update($reply, $package)
        {
        }
        public function save_translation_version($locale, $key = \false, $wc_version = \false)
        {
        }
        /*
         * Check if has available translation update
         *
         * @param string $locale Locale code
         *
         * @return bool
         */
        public function has_available_update($locale, $wc_version = \false)
        {
        }
        /**
         * Check if language pack exists
         *
         * @return bool
         */
        public function check_if_language_pack_exists($locale, $wc_version)
        {
        }
        /*
         * Display Translations upgrade notice message
         */
        public function translation_upgrade_notice()
        {
        }
        /*
         * Hide Translations upgrade notice message ( update option in DB )
         */
        public function hide_wcml_translations_message()
        {
        }
        public function load_js()
        {
        }
    }
    class WCML_Attributes
    {
        const PRIORITY_AFTER_WC_INIT = 100;
        const CACHE_GROUP_VARIATION = 'wpml-all-meta-product-variation';
        /**
         * WCML_Attributes constructor.
         *
         * @param woocommerce_wpml      $woocommerce_wpml
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         * @param WPML_Term_Translation $term_translations
         * @param wpdb                  $wpdb
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress, \WPML_Post_Translation $post_translations, \WPML_Term_Translation $term_translations, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        public function not_translatable_html()
        {
        }
        public function get_attribute_terms($attribute)
        {
        }
        /**
         * @param int   $id
         * @param array $data
         * @param bool  $old_slug
         */
        public function set_attribute_readonly_config($id, $data, $old_slug = \false)
        {
        }
        public function set_attribute_config_in_settings($attribute_name, $is_translatable)
        {
        }
        public function set_attribute_config_in_wcml_settings($attribute_name, $is_translatable)
        {
        }
        public function set_attribute_config_in_wpml_settings($attribute_name, $is_translatable)
        {
        }
        public function delete_translated_attribute_terms($attribute)
        {
        }
        public function set_variations_to_use_original_attributes($attribute)
        {
        }
        public function set_original_attributes_for_products($attribute)
        {
        }
        public function is_translatable_attribute($attr_name)
        {
        }
        public function get_translatable_attributes()
        {
        }
        public function set_translatable_attributes($attributes)
        {
        }
        public function sync_product_attr($original_product_id, $tr_product_id, $language = \false, $data = \false)
        {
        }
        public function get_product_attributes($product_id)
        {
        }
        public function get_attr_label_translations($product_id, $lang = \false)
        {
        }
        public function sync_default_product_attr($orig_post_id, $transl_post_id, $lang)
        {
        }
        /*
         * get attribute translation
         */
        public function get_custom_attribute_translation($product_id, $attribute_key, $attribute, $lang_code)
        {
        }
        /*
         * Get custom attribute translation
         * Returned translated attribute or original if missed
         */
        public function get_custom_attr_translation($product_id, $tr_product_id, $taxonomy, $attribute)
        {
        }
        /**
         * @param int|bool $translatable
         * @param array $job_translate
         *
         * @return bool|int
         */
        public function set_custom_product_attributes_as_translatable_for_tm_job($translatable, $job_translate)
        {
        }
        public function icl_custom_tax_sync_options()
        {
        }
        public function is_attributes_fully_translated()
        {
        }
        public function get_translated_variation_attribute_post_meta($meta_value, $meta_key, $original_variation_id, $variation_id, $lang)
        {
        }
        public function filter_dropdown_variation_attribute_options_args($args)
        {
        }
        /*
         * special case when original attribute language is German or Danish,
         * needs handle special chars accordingly
         */
        public function filter_attribute_name($attribute_name, $product_id, $return_sanitized = \false)
        {
        }
        public function filter_adding_to_cart_product_attributes_names($attributes)
        {
        }
        public function is_a_taxonomy($attribute)
        {
        }
        /**
         *
         * @param array $args
         *
         * @return array
         */
        public function filter_available_variation_attribute_values_in_current_language($args)
        {
        }
        /**
         * @param null   $value
         * @param int    $object_id
         * @param string $meta_key
         * @param bool   $single
         *
         * @return array|null
         */
        public function filter_product_variation_post_meta_attribute_values_in_current_language($value, $object_id, $meta_key, $single)
        {
        }
        /**
         * @param int    $mid
         * @param int    $objectId
         * @param string $key
         */
        public function invalidateVariationMetaCache($mid, $objectId, $key)
        {
        }
        /**
         * @param array $default_attributes
         *
         * @return array
         */
        public function filter_product_variation_default_attributes($default_attributes)
        {
        }
        /**
         * @param int    $meta_id
         * @param int    $object_id
         * @param string $meta_key
         */
        public function set_translation_status_as_needs_update($meta_id, $object_id, $meta_key)
        {
        }
        public function maybe_filter_get_variation()
        {
        }
    }
    class WCML_Terms
    {
        const PRODUCT_SHIPPING_CLASS = 'product_shipping_class';
        /**
         * WCML_Terms constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         * @param wpdb             $wpdb
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function admin_menu_setup()
        {
        }
        public function show_term_translation_screen_notices()
        {
        }
        public function sync_term_order_globally()
        {
        }
        public function sync_term_order($meta_id, $object_id, $meta_key, $meta_value)
        {
        }
        public function translated_terms_status_update($term_id, $tt_id, $taxonomy)
        {
        }
        public function is_original_category($tt_id, $taxonomy)
        {
        }
        public function wcml_update_term_translated_warnings()
        {
        }
        public function update_terms_translated_status($taxonomy)
        {
        }
        public function is_fully_translated($taxonomy)
        {
        }
        public function get_untranslated_terms_number($taxonomy, $force_update = \false)
        {
        }
        public function set_flag_for_variation_on_attribute_update($term_id, $tt_id, $taxonomy)
        {
        }
        public function sync_taxonomy_translations($html, $taxonomy, $taxonomy_obj)
        {
        }
        public function wcml_sync_product_variations($taxonomy)
        {
        }
        public function wcml_sync_taxonomies_in_content_preview()
        {
        }
        public function wcml_sync_taxonomies_in_content()
        {
        }
        public function render_assignment_status($object_type, $taxonomy, $preview = \true)
        {
        }
        /**
         * Filter shipping terms
         *
         * @param WP_Term[]|false|WP_Error $terms    Terms to filter.
         * @param int                      $post_id  Post ID.
         * @param string                   $taxonomy Taxonomy.
         *
         * @return WP_Term[]|false|WP_Error
         */
        public function shipping_terms($terms, $post_id, $taxonomy)
        {
        }
        public function filter_shipping_classes_terms($terms, $taxonomies, $args)
        {
        }
        public function wcml_delete_term($term, $tt_id, $taxonomy, $deleted_term)
        {
        }
        /**
         * @param array  $terms
         * @param int    $product_id
         * @param string $taxonomy
         * @param array  $args
         *
         * @return array
         */
        public function get_product_terms_filter($terms, $product_id, $taxonomy, $args)
        {
        }
        public function set_flag_to_sync($taxonomy, $el_id, $language_code)
        {
        }
        public function check_if_sync_terms_needed()
        {
        }
        public function check_if_sync_term_translation_needed($t_id, $taxonomy)
        {
        }
        public function get_table_taxonomies($taxonomies)
        {
        }
        public function get_wc_taxonomies()
        {
        }
        public function has_wc_taxonomies_to_translate()
        {
        }
        /*
         * Use custom query, because get_term_by function return false for terms with "0" slug      *
         */
        public function wcml_get_term_id_by_slug($taxonomy, $slug)
        {
        }
        public function wcml_get_term_by_id($term_id, $taxonomy)
        {
        }
        public function wcml_get_translated_term($term_id, $taxonomy, $language)
        {
        }
        public function is_translatable_wc_taxonomy($taxonomy)
        {
        }
        public function pre_option_default_product_cat()
        {
        }
        public function update_option_default_product_cat($oldvalue, $new_value)
        {
        }
        /**
         * @param string $key
         *
         * @return string
         */
        public function add_lang_parameter_to_cache_key($key)
        {
        }
    }
    class WCML_Synchronize_Product_Data
    {
        const CUSTOM_FIELD_KEY_SEPARATOR = ':::';
        /**
         * WCML_Synchronize_Product_Data constructor.
         *
         * @param woocommerce_wpml      $woocommerce_wpml
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         * @param wpdb                  $wpdb
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress, \WPML_Post_Translation $post_translations, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * This function takes care of synchronizing products
         *
         * @param int     $post_id
         * @param WP_Post $post
         * @param bool    $force_valid_context
         */
        public function synchronize_products($post_id, $post, $force_valid_context = \false)
        {
        }
        public function sync_product_data($original_product_id, $tr_product_id, $lang, $duplicate = \false)
        {
        }
        public function sync_product_taxonomies($original_product_id, $tr_product_id, $lang)
        {
        }
        public function delete_term_relationships_update_term_count($object_id, $tt_ids)
        {
        }
        public function wcml_update_term_count_by_ids($tt_ids, $language, $taxonomy = '', $tr_product_id = \false)
        {
        }
        public function sync_linked_products($product_id, $translated_product_id, $lang)
        {
        }
        public function sync_up_sells_products($product_id, $translated_product_id, $lang)
        {
        }
        public function sync_cross_sells_products($product_id, $translated_product_id, $lang)
        {
        }
        public function sync_grouped_products($product_id, $translated_product_id, $lang)
        {
        }
        /**
         * @param WC_Product       $product
         * @param WC_Product|false $translated_product
         */
        public function sync_product_stock($product, $translated_product = \false)
        {
        }
        /**
         * @param WC_Product $product
         */
        public function sync_product_stock_hook($product)
        {
        }
        /**
         * @param int $order_id
         */
        public function sync_product_total_sales($order_id)
        {
        }
        public function sync_stock_status_for_translations($product_id, $status)
        {
        }
        // sync product parent & post_status
        public function sync_date_and_parent($duplicated_post_id, $post_id, $lang)
        {
        }
        public function set_schedule_for_translations($deprecated, $post)
        {
        }
        public function icl_pro_translation_completed($tr_product_id)
        {
        }
        public function icl_make_duplicate($master_post_id, $lang, $postarr, $id)
        {
        }
        public function woocommerce_product_quick_edit_save($product)
        {
        }
        // duplicate product post meta
        public function duplicate_product_post_meta($original_product_id, $translated_product_id, $data = \false)
        {
        }
        public function sync_custom_field_value($custom_field, $translation_data, $trnsl_product_id, $post_fields, $original_product_id = \false, $is_variation = \false)
        {
        }
        public function get_translated_custom_field_values($custom_fields_values, $translation_data, $custom_field, $custom_field_value, $custom_field_index)
        {
        }
        public function icl_connect_translations_action()
        {
        }
        public function check_if_product_fields_sync_needed($original_id, $trnsl_post_id, $fields_group)
        {
        }
        public function sync_product_translations_visibility($product_id)
        {
        }
        /**
         * @param int $originalId
         * @param int $translationId
         */
        public static function syncDeletedCustomFields($originalId, $translationId)
        {
        }
    }
    class WCML_Downloadable_Products
    {
        /**
         * WCML_Downloadable_Products constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param bool         $loop
         * @param bool         $variation_data
         * @param bool|WP_Post $variation
         */
        public function product_options_downloads_custom_option($loop = \false, $variation_data = \false, $variation = \false)
        {
        }
        public function load_custom_files_js_css()
        {
        }
        public function sync_files_to_translations($original_id, $trnsl_id, $data)
        {
        }
        public function save_files_option($post_id)
        {
        }
        public function get_files_data($product_id)
        {
        }
    }
    class WCML_Editor_UI_Product_Job extends \WPML_Editor_UI_Job
    {
        /**
         * WCML_Editor_UI_Product_Job constructor.
         *
         * @param array            $job_details
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         * @param wpdb             $wpdb
         */
        public function __construct($job_details, $woocommerce_wpml, $sitepress, $wpdb)
        {
        }
        public function is_translation_complete()
        {
        }
        public function is_duplicate()
        {
        }
        public function add_elements()
        {
        }
        public function add_taxonomies_ui_section()
        {
        }
        public function add_single_custom_field_content($cf_fields_group, $custom_field, $custom_field_index, $custom_field_val)
        {
        }
        public function add_single_custom_field_content_value($element_data, $custom_field, $custom_field_index, $custom_field_val, $trnsl_custom_field_value)
        {
        }
        public function add_custom_fields_ui_section($custom_fields_section, $custom_fields, $variation_id)
        {
        }
        /**
         * @return array
         */
        public function get_data()
        {
        }
        public function add_taxonomies_to_element_data($element_data)
        {
        }
        public function add_custom_field_to_element_data($element_data, $element_id, $translation_id, $is_variation = \false)
        {
        }
        public function save_translations($translations)
        {
        }
        public function get_custom_product_atributes()
        {
        }
        /**
         * Get product content labels.
         *
         * @param string    $field
         * @param int|false $variation_id
         *
         * @return string|false
         */
        public function get_product_custom_field_label($field, $variation_id = \false)
        {
        }
        public function get_files_for_variations()
        {
        }
        /**
         * Get product content.
         *
         * @param int $product_id
         *
         * @return array
         */
        public function get_product_custom_fields_to_translate($product_id)
        {
        }
        public function check_custom_field_is_single_value($product_id, $meta_key)
        {
        }
        public function requires_translation_complete_for_each_field()
        {
        }
        public function display_hide_completed_switcher()
        {
        }
        public function is_hide_empty_fields()
        {
        }
        public function show_media_button()
        {
        }
    }
    class WCML_Synchronize_Variations_Data
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml, $sitepress, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $bulk_action
         * @param array  $data
         * @param int    $product_id
         */
        public function sync_product_variations_on_bulk_edit($bulk_action, $data, $product_id)
        {
        }
        public function sync_product_variations_action($product_id)
        {
        }
        public function sync_product_variations_custom_data($product_id)
        {
        }
        /**
         * @param int    $product_id
         * @param int    $tr_product_id
         * @param string $lang
         * @param array  $args
         */
        public function sync_product_variations($product_id, $tr_product_id, $lang, $args = [])
        {
        }
        /**
         * @param string $lang
         * @param int    $original_variation_id
         *
         * @return int|null
         */
        public function get_variation_id_by_lang($lang, $original_variation_id)
        {
        }
        public function sync_variations_taxonomies($original_variation_id, $tr_variation_id, $lang)
        {
        }
        public function duplicate_variation_data($original_variation_id, $variation_id, $data, $lang, $trbl)
        {
        }
        // use direct query to update '_stock' to not trigger additional filters.
        public function update_stock_quantity($variation_id, $meta_value)
        {
        }
        public function delete_removed_variation_attributes($orig_product_id, $variation_id)
        {
        }
        public function get_product_variations($product_id)
        {
        }
        public function remove_translations_for_variations()
        {
        }
        /**
         * Update taxonomy in variations.
         *
         * @deprecated This AJAX call was removed in WPML 3.2 on 2015.
         * @see https://git.onthegosystems.com/wpml/sitepress-multilingual-cms/-/commit/f4b9a84211ee789b7f9a0c028a807188f8334e5c
         */
        public function update_taxonomy_in_variations()
        {
        }
        /**
         * Remove single variation.
         *
         * @deprecated This AJAX call was removed in WooCommerce 2.3.0 on 2014.
         * @see https://github.com/woocommerce/woocommerce/commit/2c1c9896c5e5cdc8223c2ef253c188520b3e074c
         *
         * We can add the original nonce validation.
         */
        public function remove_variation_ajax()
        {
        }
        /**
         * Synchronize prices variation ids for product
         *
         * @param int    $product_id
         * @param int    $tr_product_id
         * @param string $language
         */
        public function sync_prices_variation_ids($product_id, $tr_product_id, $language)
        {
        }
    }
    class WCML_Page_Builders
    {
        /**
         * WCML_Page_Builders constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct($sitepress)
        {
        }
        public function get_page_builders_string_packages($product_id)
        {
        }
        public function get_page_builders_strings($product_id, $target_language)
        {
        }
        public function get_page_builders_strings_section($data, $product_id, $target_language)
        {
        }
        public function page_builders_data($element_data, $product_id, $target_language)
        {
        }
        public function save_page_builders_strings($translations, $product_id, $target_language)
        {
        }
    }
    class WCML_Editor_Save_Filters
    {
        public function __construct($trid, $language)
        {
        }
        public function __destruct()
        {
        }
        // translation-management $trid filter
        public function wpml_tm_save_post_trid_value($trid, $post_id)
        {
        }
        // translation-management $lang filter
        public function wpml_tm_save_post_lang_value($lang, $post_id)
        {
        }
        // sitepress $trid filter
        public function wpml_save_post_trid_value($trid, $post_status)
        {
        }
        // sitepress $lang filter
        public function wpml_save_post_lang_value($lang)
        {
        }
    }
    class WCML_Translation_Editor
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml, $sitepress, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function fetch_translation_job_for_editor($job, $job_details)
        {
        }
        public function get_translation_job_data_for_editor($job_data)
        {
        }
        public function preselect_product_type_in_admin_screen()
        {
        }
        /**
         * Avoids the post translation links on the product post type.
         *
         * @param string $output
         *
         * @return string
         */
        public function hide_post_translation_links($output)
        {
        }
        public function create_product_translation_package($product_id, $trid, $language, $status)
        {
        }
        public function add_languages_column($columns)
        {
        }
        /**
         * @param int $loop Position in the loop.
         */
        public function lock_variable_fields($loop)
        {
        }
        /**
         * Forces the translation editor to be used for products when enabled in WCML.
         *
         * @param int $use_tm_editor
         *
         * @return int
         */
        public function force_woocommerce_native_editor($use_tm_editor)
        {
        }
        /**
         * @param int $use_tm_editor
         *
         * @return int
         */
        public function force_woocommerce_native_editor_for_wcml_products_screen($use_tm_editor)
        {
        }
        /**
         * Removes the translation editor links when the WooCommerce native products editor is used in WCML
         */
        public function force_remove_wpml_translation_editor_links()
        {
        }
        public function auto_generate_slug()
        {
        }
        /**
         * Don't show Page builders Translation editor warning for products
         *
         * @param bool $display
         * @param int  $post_id
         *
         * @return bool
         */
        public function show_page_builders_translation_editor_warning($display, $post_id)
        {
        }
    }
    class WCML_WC_Admin_Duplicate_Product
    {
        /**
         * WCML_WC_Admin_Duplicate_Product constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         * @param wpdb             $wpdb
         */
        public function __construct($woocommerce_wpml, $sitepress, $wpdb)
        {
        }
        /**
         * @param int|\WC_Product $new_id
         * @param \WC_Product     $post
         */
        public function woocommerce_duplicate_product($new_id, $post)
        {
        }
        public function wc_duplicate_product($post_to_duplicate)
        {
        }
    }
    class WCML_Editor_UI_WYSIWYG_Field extends \WPML_Editor_UI_WYSIWYG_Field
    {
        public function __construct($id, $title, $data, $include_copy_button, $requires_complete = \false)
        {
        }
    }
    class WCML_Orders
    {
        const DASHBOARD_COOKIE_NAME = '_wcml_dashboard_order_language';
        const COOKIE_TTL = 86400;
        const KEY_LANGUAGE = 'wpml_language';
        public function __construct($woocommerce_wpml, $sitepress)
        {
        }
        public function init()
        {
        }
        /**
         * This method will try to convert the comments in the current language
         * if the user is identified (i.e. he has an ID).
         *
         * Note: I was not able to find the place where the strings are
         * registered and maybe this code is not used anymore. This should
         * be investigated in the future.
         *
         * @param \WP_Comment[] $comments
         *
         * @return \WP_Comment[]
         */
        public function get_filtered_comments($comments)
        {
        }
        /**
         * @param WC_Order_Item[] $items
         * @param WC_Order        $order
         *
         * @return WC_Order_Item[]
         */
        public function woocommerce_order_get_items($items, $order)
        {
        }
        /**
         * @param array       $items
         * @param string|bool $language_to_filter
         */
        public function adjust_order_item_in_language($items, $language_to_filter = \false)
        {
        }
        public function backend_before_order_itemmeta($item_id, $item, $product)
        {
        }
        public function backend_after_order_itemmeta($item_id, $item, $product)
        {
        }
        public function get_order_language_by_item_id($item_id)
        {
        }
        // force update to display attribute in correct language on edit order page.
        public function force_update_itemmeta($item_id, $key, $value, $languge)
        {
        }
        /**
         * Adds language to order post type.
         *
         * @param int $order_id
         */
        public function set_order_language($order_id)
        {
        }
        /**
         * @param WC_Abstract_Order $order
         */
        public function setOrderLanguageBeforeSave($order)
        {
        }
        public function append_query_parameters($parameters)
        {
        }
        public function switch_to_current()
        {
        }
        public function order_language_dropdown($order_id)
        {
        }
        public function order_delete_items()
        {
        }
        /**
         * @param int $orderId
         *
         * @return void
         */
        public function set_order_language_backend($orderId)
        {
        }
        /**
         * @param array                  $files
         * @param \WC_Order_Item_Product $item
         * @param \WC_Order|false        $object
         *
         * @return array
         */
        public function filter_downloadable_product_items($files, $item, $object)
        {
        }
        public function filter_customer_get_downloadable_products($downloads)
        {
        }
        /**
         * Curried function to get the order language.
         *
         * @param int|null $orderId
         *
         * @return callable|string|false
         */
        public static function getLanguage($orderId = \null)
        {
        }
        /**
         * @param int    $orderId
         * @param string $language
         *
         * @return void
         */
        public static function setLanguage($orderId, $language)
        {
        }
    }
    class WCML_Locale
    {
        /**
         * WCML_Locale constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct($woocommerce_wpml, $sitepress)
        {
        }
        public static function load_locale()
        {
        }
        /**
         * @deprcated since 5.3.6.
         *
         * @param string|false $lang_code
         *
         * @return bool|void
         */
        public function switch_locale($lang_code = \false)
        {
        }
        /**
         * Change locale to saving language - needs for sanitize_title exception wcml-390
         *
         * @param string $locale
         *
         * @return false|string
         */
        public function update_product_action_locale_check($locale)
        {
        }
    }
    class WCML_Multi_Currency_Shipping
    {
        const CACHE_PERSISTENT_GROUP = 'converted_shipping_cost';
        public function __construct(\WCML_Multi_Currency $multi_currency, \WPML\Core\ISitePress $sitepress, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $rates
         *
         * @return array
         */
        public function convert_shipping_costs_in_package_rates($rates)
        {
        }
        public function convert_shipping_method_cost_settings($settings)
        {
        }
        /**
         * @param array $args
         *
         * When using [cost] in the shipping class costs, we need to use the not-converted cart total
         * It will be converted as part of the total cost
         *
         * @return array
         */
        public function woocommerce_evaluate_shipping_cost_args($args)
        {
        }
        public function convert_shipping_taxes($packages)
        {
        }
        public function shipping_price_filter($price)
        {
        }
        public function shipping_free_min_amount($price, $settings)
        {
        }
        /**
         * @param string $methodId
         * @param int    $instanceId
         *
         * @return string
         */
        public static function getShippingOptionName($methodId, $instanceId)
        {
        }
    }
    class WCML_Multi_Currency_Install
    {
        /**
         * WCML_Multi_Currency_Install constructor.
         *
         * @param \WCML_Multi_Currency $multi_currency   And instance of \WCML_Multi_Currency.
         * @param \woocommerce_wpml    $woocommerce_wpml And instance of \woocommerce_wpml.
         */
        public function __construct(\WCML_Multi_Currency $multi_currency, \woocommerce_wpml $woocommerce_wpml)
        {
        }
        /**
         * It sets the default currency for each language.
         *
         * @param bool|string $old_value The value of the option before the update.
         * @param bool|string $new_value The new value of the option.
         */
        public function set_default_currencies_languages($old_value = \false, $new_value = \false)
        {
        }
    }
    class WCML_Multi_Currency_Reports
    {
        /** @var string $reports_currency */
        protected $reports_currency;
        /**
         * WCML_Multi_Currency_Reports constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress $sitepress
         * @param wpdb $wpdb
         * @param WPML_WP_Cache $wpml_cache
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress, \wpdb $wpdb, $wpml_cache = \null)
        {
        }
        public function add_hooks()
        {
        }
        public function admin_screen_loaded($screen)
        {
        }
        public function reports_init()
        {
        }
        public function admin_reports_query_filter($query)
        {
        }
        public function _set_reports_currency_symbol($currency)
        {
        }
        public function set_reports_currency()
        {
        }
        public function reports_currency_selector()
        {
        }
        /*
         * Filter WC dashboard status query
         *
         * @param string $query Query to filter
         *
         * @return string
         */
        public function filter_dashboard_status_widget_sales_query($query)
        {
        }
    }
    /**
     * Class WCML_Currency_Switcher
     *
     * Main class
     */
    class WCML_Currency_Switcher
    {
        /**
         * @param woocommerce_wpml        $woocommerce_wpml
         * @param SitePress|NullSitePress $sitepress
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function on_init()
        {
        }
        public static function get_settings($switcher_id)
        {
        }
        public function currency_switcher_shortcode($atts)
        {
        }
        public function wcml_currency_switcher($args = [])
        {
        }
        public function get_model_data($args, $currencies)
        {
        }
        public function get_css_classes($classes = [])
        {
        }
        public function add_user_agent_touch_device_classes($classes)
        {
        }
        public function show_currency_switcher()
        {
        }
        /**
         * @deprecated 3.9
         */
        public function currency_switcher($args = [])
        {
        }
        /**
         * @return array
         */
        public function get_registered_sidebars()
        {
        }
        public function get_available_sidebars()
        {
        }
        public function update_option_sidebars_widgets($sidebars, $old_sidebars)
        {
        }
        public function get_switcher_default_settings()
        {
        }
        // backward compatibility to convert switcher style for users who uses old parameters wcml-1874
        public function check_and_convert_switcher_style($args)
        {
        }
    }
    /**
     * Class WCML_Currency_Switcher_Ajax
     */
    class WCML_Currency_Switcher_Ajax
    {
        /**
         * WCML_Currency_Switcher_Ajax constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($woocommerce_wpml)
        {
        }
        public function wcml_currencies_order()
        {
        }
        public function wcml_currencies_switcher_save_settings()
        {
        }
        public function wcml_delete_currency_switcher()
        {
        }
        public function wcml_currencies_switcher_preview()
        {
        }
        public function get_sidebars_widgets()
        {
        }
        public function update_sidebars_widgets($sidebars_widgets)
        {
        }
    }
    class WCML_Currency_Switcher_Templates
    {
        const CONFIG_FILE = 'config.json';
        const OPTION_NAME = 'wcml_currency_switcher_template_objects';
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML_WP_API $wp_api, \WPML_File $wpml_file = \null)
        {
        }
        public function init_hooks()
        {
        }
        public function after_setup_theme_action()
        {
        }
        public function activated_plugin_action()
        {
        }
        /**
         * @param string $template_slug
         *
         * @return WCML_Currency_Switcher_Template
         */
        public function get_template($template_slug)
        {
        }
        /**
         * @param bool $load_default
         *
         * @return array of active WCML_Currency_Switcher_Template
         */
        public function get_active_templates($load_default = \false)
        {
        }
        /**
         * @return array of template data
         */
        public function get_templates()
        {
        }
        public function enqueue_template_resources($templates = \false)
        {
        }
        /**
         * @param string                          $slug
         * @param WCML_Currency_Switcher_Template $template
         */
        public function enqueue_template_assets($slug, $template)
        {
        }
        /**
         * @param string $slug
         * @param string $template
         */
        public function maybe_late_enqueue_template($slug, $template)
        {
        }
        public function admin_enqueue_template_resources()
        {
        }
        public function get_color_picket_css($switcher_id, $switcher_data)
        {
        }
        public function get_inline_style($switcher_id, $switcher_template, $css)
        {
        }
        public function set_templates($templates)
        {
        }
        public function check_is_active($template)
        {
        }
        public function get_first_active()
        {
        }
    }
    /**
     * Class WCML_Currency_Switcher_Properties
     *
     * Main class
     */
    class WCML_Currency_Switcher_Properties
    {
        public function is_currency_switcher_active($switcher_id, $wcml_settings)
        {
        }
    }
    class WCML_Currency_Switcher_Widget extends \WP_Widget
    {
        const SLUG = 'currency_sel_widget';
        public function __construct()
        {
        }
        public function widget($args, $instance)
        {
        }
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * @param array $instance
         *
         * @return string|void
         */
        public function form($instance)
        {
        }
    }
    /**
     * Class WCML_Multi_Currency_Table_Rate_Shipping
     *
     * This is only required for versions of WooCommerce Table Rating older than 3.0
     */
    class WCML_Multi_Currency_Table_Rate_Shipping
    {
        public function add_hooks()
        {
        }
        public function table_rate_shipping_rates($rates)
        {
        }
        public function table_rate_instance_settings($settings)
        {
        }
    }
    /**
     * Class WCML_Multi_Currency
     *
     * Our case:
     * Multi-currency can be enabled by an option in wp_options - wcml_multi_currency_enabled
     * User currency will be set in the woocommerce session as 'client_currency'
     */
    class WCML_Multi_Currency
    {
        const CURRENCY_STORAGE_KEY = 'client_currency';
        const CURRENCY_LANGUAGE_STORAGE_KEY = 'client_currency_language';
        /** @var  array */
        public $currencies = [];
        /** @var  array */
        public $currency_codes = [];
        /** @var  array */
        public $currencies_without_cents = ['JPY', 'TWD', 'KRW', 'BIF', 'BYR', 'CLP', 'GNF', 'ISK', 'KMF', 'PYG', 'RWF', 'VUV', 'XAF', 'XOF', 'XPF'];
        /**
         * @var WCML_Multi_Currency_Prices
         */
        public $prices;
        /**
         * @var WCML_Multi_Currency_Coupons
         */
        public $coupons;
        /**
         * @var WCML_Multi_Currency_Shipping
         */
        public $shipping;
        /**
         * @var WCML_Multi_Currency_Reports
         */
        public $reports;
        /**
         * @var WCML_Multi_Currency_Orders
         */
        public $orders;
        /**
         * @var WCML_Admin_Currency_Selector
         */
        public $admin_currency_selector;
        /**
         * @var WCML_Custom_Prices
         */
        public $custom_prices;
        /**
         * @var WCML_Currency_Switcher
         */
        public $currency_switcher;
        /**
         * @var WCML_Currency_Switcher_Ajax
         */
        public $currency_switcher_ajax;
        /**
         * @var WCML_Multi_Currency_Install
         */
        public $install;
        /**
         * @var WCML_W3TC_Multi_Currency
         */
        public $W3TC = \null;
        /**
         * @var woocommerce_wpml
         */
        public $woocommerce_wpml;
        /**
         * @var WooCommerce
         */
        public $woocommerce;
        /**
         * @var WCML_Exchange_Rates
         */
        public $exchange_rate_services;
        /**
         * @var WCML_Currencies_Payment_Gateways
         */
        public $currencies_payment_gateways;
        /**
         * @var bool
         */
        public $load_filters;
        /**
         * @var string
         */
        public $switching_currency_html;
        /**
         * WCML_Multi_Currency constructor.
         */
        public function __construct()
        {
        }
        public function are_filters_need_loading()
        {
        }
        public function init()
        {
        }
        public function enable()
        {
        }
        public function disable()
        {
        }
        public function init_currencies()
        {
        }
        /**
         *
         * @return string
         * @since 3.9.2
         */
        public function get_default_currency()
        {
        }
        public function get_currencies($include_default = \false)
        {
        }
        public function get_currency_codes()
        {
        }
        /**
         * @param string $code
         *
         * @return bool
         */
        public function is_currency_active($code)
        {
        }
        /**
         * @return mixed|string
         */
        public function get_currency_code()
        {
        }
        public function get_currency_details_by_code($code)
        {
        }
        public function delete_currency_by_code($code, $settings = \false, $update = \true)
        {
        }
        public function get_exchange_rates()
        {
        }
        /**
         * @return string
         */
        public function get_client_currency()
        {
        }
        public function maybe_show_switching_currency_prompt_dialog()
        {
        }
        public function maybe_reset_cart_fragments()
        {
        }
        public function set_client_currency($currency)
        {
        }
        public function switch_currency()
        {
        }
        public function get_currencies_without_cents()
        {
        }
        /**
         * Set reports currency for REST request.
         *
         * @param WP_REST_Response|WP_HTTP_Response|WP_Error|mixed $response Result to send to the client. Usually a WP_REST_Response or WP_Error.
         * @param array                                            $handler  Route handler used for the request.
         * @param WP_REST_Request                                  $request  Request used to generate the response.
         *
         * @return WP_REST_Response|WP_HTTP_Response|WP_Error|mixed
         */
        public function set_request_currency($response, $handler, $request)
        {
        }
        /**
         * Get REST currency
         *
         * @return string
         */
        public function get_rest_currency()
        {
        }
    }
    class WCML_Price_Filter
    {
        /**
         * WCML_Price_Filter constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        public function override_currency_symbol()
        {
        }
        /**
         * @param array $meta_query
         *
         * @return array
         */
        public function unconvert_price_filter_limits($meta_query)
        {
        }
    }
    class WCML_Multi_Currency_Prices
    {
        const WC_DEFAULT_STEP = 10;
        public function __construct(\WCML_Multi_Currency $multi_currency, array $currency_options)
        {
        }
        public function add_hooks()
        {
        }
        public function enableSavingPost()
        {
        }
        public function disableSavingPost()
        {
        }
        public function currency_filter($currency)
        {
        }
        public function price_currency_filter($currency)
        {
        }
        /**
         * @param float $min_amount
         *
         * @return float
         */
        public function filter_widget_min_amount($min_amount)
        {
        }
        /**
         * @param float $max_price
         *
         * @return float
         */
        public function filter_widget_max_amount($max_price)
        {
        }
        public function raw_price_filter($price, $currency = \false)
        {
        }
        public function get_product_price_in_currency($product_id, $currency = \false)
        {
        }
        /**
         * @param mixed|null $null
         * @param int        $object_id
         * @param string     $meta_key
         * @param bool       $single
         *
         * @return mixed
         */
        public function product_price_filter($null, $object_id, $meta_key, $single)
        {
        }
        public function variation_prices_filter($null, $object_id, $meta_key, $single)
        {
        }
        /**
         * @param mixed       $amount
         * @param bool|string $currency
         *
         * @return mixed
         */
        public function convert_price_amount($amount, $currency = \false)
        {
        }
        /**
         * @param mixed  $amount
         * @param string $from_currency
         * @param string $to_currency
         *
         * @return mixed
         */
        public function convert_price_amount_by_currencies($amount, $from_currency, $to_currency)
        {
        }
        /**
         * Convert back to default currency.
         *
         * @param float        $amount
         * @param string|false $currency
         *
         * @return float
         */
        public function unconvert_price_amount($amount, $currency = \false)
        {
        }
        public function apply_rounding_rules($price, $currency = \false)
        {
        }
        /**
         * Converts the price from the default currency to the given currency and applies the format
         *
         * @param float|int    $amount
         * @param false|string $currency
         */
        public function formatted_price($amount, $currency = \false)
        {
        }
        /**
         * @param float  $price
         * @param string $currency
         *
         * @return string
         */
        public function format_price_in_currency($price, $currency)
        {
        }
        public function filter_price_woocommerce_paypal_args($args)
        {
        }
        public function add_currency_to_variation_prices_hash($data)
        {
        }
        public function filter_woocommerce_cart_contents_total($cart_contents_total)
        {
        }
        public function recalculate_totals()
        {
        }
        public function filter_woocommerce_cart_subtotal($cart_subtotal, $compound, $cart_object)
        {
        }
        public function price_filter_post_clauses($args, $wp_query)
        {
        }
        /**
         * @param array  $response
         * @param string $to_currency
         * @param string $from_currency
         * @param array  $params
         *
         * @return array
         */
        public function filter_pre_selected_widget_prices_in_new_currency($response, $to_currency, $from_currency, $params)
        {
        }
        /**
         * @depecated since WCML 5.3.0.
         *
         * @return string|null
         */
        public function get_admin_order_currency_code()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function filter_currency_thousand_sep_option($value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function filter_currency_decimal_sep_option($value)
        {
        }
        /**
         * @param int $value
         *
         * @return int
         */
        public function filter_currency_num_decimals_option($value)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function filter_currency_position_option($value)
        {
        }
        public function filter_currency_num_decimals_in_cart($cart)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function filter_wc_price_args_on_order_admin_screen($args)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function filter_wc_price_args($args)
        {
        }
        /**
         * @param float       $price
         * @param null|string $currency
         *
         * @return float
         */
        public function convert_raw_woocommerce_price($price, $currency = \null)
        {
        }
        /**
         * @param float      $value
         * @param WC_Product $product
         *
         * @return float
         */
        public function get_original_product_price($value, $product)
        {
        }
    }
    class WCML_Multi_Currency_Configuration
    {
        public static function set_up(\WCML_Multi_Currency $multi_currency, \woocommerce_wpml $woocommerce_wpml)
        {
        }
        public static function add_hooks()
        {
        }
        public static function save_configuration()
        {
        }
        public static function add_currency($currency_code)
        {
        }
        public static function save_currency()
        {
        }
        public static function delete_currency()
        {
        }
        public static function update_currency_lang()
        {
        }
        public static function update_default_currency_ajax()
        {
        }
        public static function update_default_currency()
        {
        }
        public static function currency_options_update_default_currency($settings, $current_currency, $new_currency)
        {
        }
        public static function legacy_update_custom_rates()
        {
        }
        public static function legacy_remove_custom_rates()
        {
        }
        public static function set_prices_config()
        {
        }
        public static function set_currency_mode()
        {
        }
        public static function set_max_mind_key()
        {
        }
        public static function get_auto_exchange_rate()
        {
        }
    }
    class WCML_Multi_Currency_Coupons
    {
        public function __construct()
        {
        }
        public function filter_coupon_data($coupon)
        {
        }
    }
    class WCML_Custom_Prices
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function custom_prices_init()
        {
        }
        public function add_individual_variation_nonce($loop, $variation_data, $variation)
        {
        }
        /**
         * @param int  $product_id
         * @param bool $currency
         *
         * @return array|false
         */
        public function get_product_custom_prices($product_id, $currency = \false)
        {
        }
        public function woocommerce_product_options_custom_pricing()
        {
        }
        public function woocommerce_product_after_variable_attributes_custom_pricing($loop, $variation_data, $variation)
        {
        }
        public function check_product_with_custom_prices($is_purchasable, \WC_Product $product)
        {
        }
        public function filter_product_variations_with_custom_prices($is_visible, $variation_id)
        {
        }
        // display products with custom prices only if enabled "Show only products with custom prices in secondary currencies" option on settings page.
        public function filter_products_with_custom_prices($filtered_posts)
        {
        }
        public function save_custom_prices($post_id)
        {
        }
        public function update_custom_prices($post_id, $custom_prices, $code)
        {
        }
        /**
         * @param array $custom_prices
         *
         * @return bool
         */
        protected function is_sale_price_valid(array $custom_prices)
        {
        }
        /**
         * @param int $product_id
         */
        public function sync_product_variations_custom_prices_on_ajax($product_id)
        {
        }
        /**
         * @param int $product_id
         */
        public function sync_product_variations_custom_prices($product_id)
        {
        }
        /**
         * @param bool       $on_sale
         * @param WC_Product $product_object
         *
         * @return bool
         */
        public function filter_product_is_on_sale($on_sale, $product_object)
        {
        }
        /**
         * WC when starts the sale copies price from _sale_price into _price field
         * we should do the same for _sale_price_{currency} and _price_{currency}
         *
         * @param array $product_ids
         */
        public function maybe_set_sale_prices($product_ids)
        {
        }
        /**
         * @param array $product_ids
         */
        public function maybe_remove_sale_prices($product_ids)
        {
        }
    }
    class WCML_W3TC_Multi_Currency
    {
        public function __construct()
        {
        }
        public function init()
        {
        }
        public function flush_page_cache()
        {
        }
    }
    class WCML_Multi_Currency_Resources
    {
        public static function set_up(\WCML_Multi_Currency $multi_currency, \woocommerce_wpml $woocommerce_wpml)
        {
        }
    }
    class WCML_Multi_Currency_Orders
    {
        const WCML_CONVERTED_META_KEY_PREFIX = '_wcml_converted_';
        public function __construct(\WCML_Multi_Currency $multi_currency, \woocommerce_wpml $woocommerce_wpml, \WP $wp)
        {
        }
        public function orders_init()
        {
        }
        public function show_orders_currencies_selector()
        {
        }
        public function filter_orders_by_currency_join($join)
        {
        }
        public function filter_orders_by_currency_where($where)
        {
        }
        /**
         * Filter orders by currency in a WooCommerce system.
         *
         * This method is responsible for modifying the query arguments used for filtering orders
         * based on the selected currency from the WooCommerce admin selector. If a currency is
         * selected in the admin, it adds the 'currency' filter to the query arguments.
         *
         * @param array $query_args The original query arguments for filtering orders.
         *
         * @return array The modified query arguments, including the 'currency' filter if applicable.
         */
        public function hpos_filter_orders_by_currency($query_args)
        {
        }
        public function set_order_currency_on_update($post_id)
        {
        }
        public function show_order_currency_selector($order_id)
        {
        }
        public function set_totals_for_order_items($items, $order)
        {
        }
        public function add_woocommerce_hidden_order_itemmeta($itemmeta)
        {
        }
        /**
         * @param WC_Order_Item_Product $item
         * @param array $coupons
         * @param int|bool $order_id
         * @param string|bool $order_currency
         */
        public function set_converted_totals_for_item($item, $coupons, $order_id = \false, $order_currency = \false)
        {
        }
        public function get_order_currency_cookie()
        {
        }
        public function set_order_currency_on_ajax_update()
        {
        }
        /*
         * Filter status query
         *
         * @param string $query
         *
         * @return string
         *
         */
        public function filter_order_status_query($query)
        {
        }
        // handle currency in order emails before handled in woocommerce.
        public function fix_currency_before_order_email($order)
        {
        }
        public function fix_currency_after_order_email($order)
        {
        }
        public function _override_woocommerce_order_currency_temporarily($currency)
        {
        }
        /**
         * @param string             $currency
         * @param \WC_Abstract_Order $order
         *
         * @return string
         */
        public function get_currency_for_new_order($currency, $order)
        {
        }
    }
    class WCML_Cart_Switch_Lang_Functions implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function remove_force_switch_from_add_to_cart_url($url)
        {
        }
        public function language_has_switched($lang_from, $lang_to)
        {
        }
        public function wcml_language_force_switch()
        {
        }
        public function wcml_language_switch_dialog()
        {
        }
        /**
         * Get current page url with query parameters.
         *
         * @return string
         */
        public function get_current_url()
        {
        }
    }
    class WCML_Cart_Sync_Warnings
    {
        public function __construct($woocommerce_wpml, $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function check_if_show_notices_needed()
        {
        }
        public function register_styles()
        {
        }
        public function show_cart_notice()
        {
        }
        public function get_list_of_active_extensions()
        {
        }
    }
    class WCML_Install
    {
        const CHUNK_SIZE = 1000;
        /**
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public static function initialize($woocommerce_wpml, $sitepress)
        {
        }
        /**
         * Handle situation when product_type terms translated before activating WCML.
         */
        public static function check_product_type_terms()
        {
        }
        public static function translated_product_type_terms()
        {
        }
        public static function admin_translated_product_type_notice()
        {
        }
        public static function admin_translated_product_type_terms_notice()
        {
        }
        public static function hide_variation_type_on_tm_dashboard($types)
        {
        }
        public static function insert_default_categories()
        {
        }
        /**
         * @param string $default_language
         */
        public static function set_language_to_existing_orders($default_language)
        {
        }
    }
    abstract class WCML_Templates_Factory extends \WPML_Templates_Factory
    {
        /**
         * @param string $template
         * @param array  $model
         *
         * @return string
         * @throws Twig_Error_Syntax
         * @throws Twig_Error_Runtime
         * @throws Twig_Error_Loader
         */
        public function get_view($template = \null, $model = \null)
        {
        }
        /**
         * Maybe init twig for WCML
         */
        protected function maybe_init_twig()
        {
        }
        /**
         * @return Twig_Loader_Filesystem|Twig_Loader_String
         */
        protected function get_twig_loader()
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WCML_Troubleshooting_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Troubleshooting_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($woocommerce_wpml)
        {
        }
        public function get_model()
        {
        }
        public function get_all_products_taxonomies()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    abstract class WCML_Setup_Step extends \WCML_Templates_Factory
    {
        /** @var string */
        protected $next_step_url;
        /** @var string|null */
        protected $previous_step_url;
        public function __construct($next_step_url, $previous_step_url = \null)
        {
        }
        protected function init_template_base_dir()
        {
        }
    }
    class WCML_Setup_Store_Pages_UI extends \WCML_Setup_Step
    {
        const SLUG = 'store-pages';
        /**
         * WCML_Setup_Store_Pages_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         * @param string           $next_step_url
         * @param string           $previous_step_url
         */
        public function __construct($woocommerce_wpml, $sitepress, $next_step_url, $previous_step_url)
        {
        }
        public function get_model()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Setup_Introduction_UI extends \WCML_Setup_Step
    {
        const SLUG = 'introduction';
        public function get_model()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Setup_Attributes_UI extends \WCML_Setup_Step
    {
        const SLUG = 'attributes';
        /**
         * @param woocommerce_wpml $woocommerce_wpml
         * @param string           $next_step_url
         * @param string           $previous_step_url
         */
        public function __construct($woocommerce_wpml, $next_step_url, $previous_step_url)
        {
        }
        public function get_model()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Setup_Multi_Currency_UI extends \WCML_Setup_Step
    {
        const SLUG = 'multi-currency';
        public function get_model()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Setup_Display_As_Translated_UI extends \WCML_Setup_Step
    {
        const SLUG = 'translation-options-2';
        public function get_model()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Setup_Notice_UI extends \WCML_Templates_Factory
    {
        /**
         * @return array
         */
        public function get_model()
        {
        }
        protected function init_template_base_dir()
        {
        }
        /**
         * @return string
         */
        public function get_template()
        {
        }
    }
    class WCML_Setup_Translation_Options_UI extends \WCML_Setup_Step
    {
        const SLUG = 'translation-options-1';
        public function get_model()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Setup_Footer_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Setup_Footer_UI constructor.
         *
         * @param bool $has_handler
         */
        public function __construct($has_handler)
        {
        }
        /**
         * @return array
         */
        public function get_model()
        {
        }
        protected function init_template_base_dir()
        {
        }
        /**
         * @return string
         */
        public function get_template()
        {
        }
    }
    class WCML_Setup_Header_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Setup_Header_UI constructor.
         *
         * @param array  $steps
         * @param string $step
         */
        public function __construct($steps, $step)
        {
        }
        /**
         * @return array
         */
        public function get_model()
        {
        }
        public function language_attributes()
        {
        }
        /**
         * @param string $tag
         */
        public function wp_print_scripts($tag)
        {
        }
        /**
         * @param string $hook
         */
        public function wp_do_action($hook)
        {
        }
        protected function init_template_base_dir()
        {
        }
        /**
         * @return string
         */
        public function get_template()
        {
        }
    }
    class WCML_Settings_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Settings_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress)
        {
        }
        public function wp_do_action($hook)
        {
        }
        public function get_model()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Pointer_UI extends \WCML_Templates_Factory
    {
        function __construct($content, $doc_link, $insert_after_selector_id = \false, $insert_method = \false)
        {
        }
        public function get_model()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WCML_Not_Translatable_Attributes extends \WCML_Templates_Factory
    {
        /**
         * WCML_Not_Translatable_Attributes constructor.
         *
         * @param int              $attr_id
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($attr_id, $woocommerce_wpml)
        {
        }
        public function get_model()
        {
        }
        public function is_translatable()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WCML_Store_URLs_Edit_Base_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Store_URLs_Edit_Base_UI constructor.
         *
         * @param string           $base
         * @param string           $language
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct($base, $language, $woocommerce_wpml, $sitepress)
        {
        }
        public function get_model()
        {
        }
        public function get_data_for_base()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WCML_Store_URLs_Translation_Statuses_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Store_URLs_Translation_Statuses_UI constructor.
         *
         * @param string           $base
         * @param array            $active_languages
         * @param bool             $value
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct($base, $active_languages, $value, $woocommerce_wpml, $sitepress)
        {
        }
        public function init_twig_functions()
        {
        }
        public function get_model()
        {
        }
        public function get_languages_info()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
        public function render_base_edit_dialog($base, $language)
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WCML_Store_URLs_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Store_URLs_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct($woocommerce_wpml, $sitepress)
        {
        }
        public function get_model()
        {
        }
        public function get_endpoint_info()
        {
        }
        public function get_base_translations_statuses($base, $active_languages, $value = \true)
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Languages_Upgrade_Notice extends \WCML_Templates_Factory
    {
        public function __construct($notices)
        {
        }
        public function get_model()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Currency_Switcher_Template extends \WCML_Templates_Factory
    {
        const FILENAME = 'template.twig';
        /**
         * WCML_Currency_Switcher_Template constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param array            $template_data
         */
        public function __construct($woocommerce_wpml, $template_data)
        {
        }
        /**
         * @param array $model
         */
        public function set_model($model)
        {
        }
        /**
         * @return array
         */
        public function get_model()
        {
        }
        public function render()
        {
        }
        public function get_formatted_price($currency, $format)
        {
        }
        /**
         * @param bool $with_version
         *
         * @return array
         */
        public function get_styles($with_version = \false)
        {
        }
        /**
         * @return bool
         */
        public function has_styles()
        {
        }
        /**
         * @param bool $with_version
         *
         * @return array
         */
        public function get_scripts($with_version = \false)
        {
        }
        /**
         * @param int $index
         *
         * @return string
         */
        public function get_resource_handler($index)
        {
        }
        public function get_inline_style_handler()
        {
        }
        protected function init_template_base_dir()
        {
        }
        /**
         * @return string Template filename
         */
        public function get_template()
        {
        }
        /**
         * @return array
         */
        public function get_template_data()
        {
        }
        /**
         * return bool
         */
        public function is_core()
        {
        }
        public function is_path_valid()
        {
        }
    }
    class WCML_Currency_Switcher_Options_Dialog extends \WCML_Templates_Factory
    {
        /**
         * WCML_Currency_Switcher_Options_Dialog constructor.
         *
         * @param array            $args
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($args, $woocommerce_wpml)
        {
        }
        public function get_model()
        {
        }
        public static function currency_switcher_pre_selected_colors()
        {
        }
        public function render()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Status_Config_Warnings_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Status_Config_Warnings_UI constructor.
         *
         * @param SitePress        $sitepress
         * @param woocommerce_wpml $woocommerce_wpml
         * @param array            $sitepress_settings
         */
        public function __construct($sitepress, $woocommerce_wpml, $sitepress_settings)
        {
        }
        public function init_twig_functions()
        {
        }
        public function get_model()
        {
        }
        public function get_flag_url($language)
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Status_Multi_Currencies_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Status_Multi_Currencies_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($woocommerce_wpml)
        {
        }
        public function get_model()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Status_Media_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Status_Media_UI constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\WPML\Core\ISitePress $sitepress)
        {
        }
        public function get_model()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Status_Store_Pages_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Status_Store_Pages_UI constructor.
         *
         * @param SitePress        $sitepress
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($sitepress, $woocommerce_wpml)
        {
        }
        public function init_twig_functions()
        {
        }
        public function get_model()
        {
        }
        public function get_flag_url($language)
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WCML_Status_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Status_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         * @param array            $sitepress_settings
         */
        public function __construct($woocommerce_wpml, $sitepress, $sitepress_settings)
        {
        }
        public function get_model()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Status_Products_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Status_Products_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct($woocommerce_wpml, $sitepress)
        {
        }
        public function get_model()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Status_Taxonomies_UI extends \WCML_Templates_Factory
    {
        public function __construct($sitepress, $woocommerce_wpml)
        {
        }
        public function get_model()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Status_Status_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Status_Status_UI constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct($sitepress)
        {
        }
        public function get_model()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Attribute_Translation_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Attribute_Translation_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct($woocommerce_wpml, $sitepress)
        {
        }
        public function get_model()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Removed_Cart_Items_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Removed_Cart_Items_UI constructor.
         *
         * @param array            $args
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         * @param WooCommerce      $woocommerce
         */
        public function __construct($args, $woocommerce_wpml, $sitepress, $woocommerce)
        {
        }
        public function get_model()
        {
        }
        public function get_removed_products()
        {
        }
        public function render()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Currencies_Dropdown_UI
    {
        public function __construct(\WPML_Twig_Template_Loader $template_loader)
        {
        }
        public function get($active_currencies, $selected_currency)
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WCML_Custom_Files_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Custom_Files_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param int              $product_id
         * @param bool             $is_variation
         */
        public function __construct($woocommerce_wpml, $product_id, $is_variation = \false)
        {
        }
        public function get_model()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Multi_Currency_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Multi_Currency_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct($woocommerce_wpml, $sitepress)
        {
        }
        public function get_model()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
        public function get_flag_url($code)
        {
        }
        public function get_currency_symbol($code)
        {
        }
        public function load_curency_switcher_option_boxes()
        {
        }
        public function get_currency_switchers_preview()
        {
        }
        public function wp_do_action($hook)
        {
        }
        public function get_weekday($day_index)
        {
        }
        public function widget_currency_switchers()
        {
        }
    }
    class WCML_Custom_Currency_Options extends \WCML_Templates_Factory
    {
        /**
         * WCML_Custom_Currency_Options constructor.
         *
         * @param array            $args
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($args, $woocommerce_wpml)
        {
        }
        public function get_model()
        {
        }
        public function enqueue_resources()
        {
        }
        public function render()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
        public function get_currency_symbol($code)
        {
        }
        public function get_price_preview($currency)
        {
        }
        public function filter_currency_pos($value)
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WCML_Custom_Prices_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Custom_Prices_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param int              $product_id
         */
        public function __construct($woocommerce_wpml, $product_id)
        {
        }
        public function get_model()
        {
        }
        public function get_currencies_info()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Exchange_Rates_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Exchange_Rates_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($woocommerce_wpml)
        {
        }
        public function get_model()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Custom_Taxonomy_Translation_UI extends \WCML_Templates_Factory
    {
        // 'product_type' is used for tags?
        /**
         * WCML_Custom_Taxonomy_Translation_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct($woocommerce_wpml, $sitepress)
        {
        }
        public function get_model()
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    abstract class WCML_Menu_Wrap_Base extends \WCML_Templates_Factory
    {
        /**
         * @var \woocommerce_wpml $woocommerce_wpml
         */
        protected $woocommerce_wpml;
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        /**
         * @return array
         */
        public function get_model()
        {
        }
        /**
         * @return array
         */
        protected abstract function get_child_model();
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_St_Taxonomy_UI extends \WCML_Templates_Factory
    {
        public function __construct($taxonomy_obj)
        {
        }
        public function get_model()
        {
        }
        public function render()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Sync_Taxonomy extends \WCML_Templates_Factory
    {
        /**
         * WCML_Sync_Taxonomy constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param string           $taxonomy
         * @param WP_Taxonomy      $taxonomy_obj
         */
        public function __construct($woocommerce_wpml, $taxonomy, $taxonomy_obj)
        {
        }
        public function get_model()
        {
        }
        protected function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Menus_Wrap extends \WCML_Menu_Wrap_Base
    {
        /**
         * WCML_Menus_Wrap constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($woocommerce_wpml)
        {
        }
        /**
         * @return array
         */
        protected function get_child_model()
        {
        }
        protected function get_current_menu_content($current_tab)
        {
        }
    }
    /**
     * Created by OnTheGo Systems
     */
    class WCML_Products_UI extends \WCML_Templates_Factory
    {
        /**
         * WCML_Products_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public function __construct($woocommerce_wpml, $sitepress)
        {
        }
        public function get_model()
        {
        }
        public function get_products_data()
        {
        }
        public function get_product_info_from_self_edit_mode()
        {
        }
        public function get_product_info_for_translators()
        {
        }
        /*
         * get list of products
         * $page - number of page;
         * $limit - limit product on one page;
         * if($page = 0 && $limit=0) return all products;
         * return array;
         */
        public function get_product_list($page = 1, $limit = 20, $slang = \false)
        {
        }
        public function display_hierarchical($products, $pagenum, $per_page)
        {
        }
        /*
         * get products count
         */
        public function get_products_count($slang)
        {
        }
        /*
         * get products from search
         * $title - product name
         * $category - product category
         */
        public function get_products_from_filter()
        {
        }
        public function get_pagination_url()
        {
        }
        public function get_filter_url()
        {
        }
        public function get_cat_url()
        {
        }
        public function get_current_job_language()
        {
        }
        public function get_wc_statuses()
        {
        }
        public function get_current_page_number()
        {
        }
        public function get_page_limit()
        {
        }
        public function get_source_language()
        {
        }
        public function get_last_page_num($products_count)
        {
        }
        /*
         * get pages count
         * $limit - limit product on one page;
         */
        public function get_product_last_page($count, $limit)
        {
        }
        public function get_current_translator_id()
        {
        }
        public function get_categories_list($product_id, $filter_cat_url)
        {
        }
        public function get_products_categories($slang = \false)
        {
        }
        public function init_template_base_dir()
        {
        }
        public function get_template()
        {
        }
    }
    class WCML_Resources
    {
        public static function add_hooks()
        {
        }
        /**
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         */
        public static function set_up_resources($woocommerce_wpml, $sitepress)
        {
        }
        public static function load_management_css()
        {
        }
        public static function load_taxonomy_translation_scripts()
        {
        }
        public static function admin_scripts()
        {
        }
        public static function front_scripts()
        {
        }
        public static function load_tooltip_resources()
        {
        }
        public static function load_lock_fields_js()
        {
        }
        public static function hidden_label()
        {
        }
    }
    /**
     * Class WCML_Screen_Options
     */
    class WCML_Products_Screen_Options
    {
        /**
         * Setup hooks.
         */
        public function init()
        {
        }
        /**
         * Hide management column by default for products.
         *
         * @param bool   $is_visible
         * @param string $post_type
         *
         * @return bool
         */
        public function sitepress_screen_option_filter($is_visible, $post_type)
        {
        }
        /**
         * Set default option for translations management column.
         *
         * @param string[]  $hidden
         * @param WP_Screen $screen
         *
         * @return string[]
         */
        public function filter_screen_options($hidden, $screen)
        {
        }
    }
    /**
     * This class is responsible for handling legacy WC reports. Legacy WC reports are being phased out in favor of newer WC analytics.
     * Legacy WC reports are not HPOS-compatible: https://github.com/woocommerce/woocommerce/issues/40671
     *
     * @deprecated This class is deprecated and should no longer be used because it's incompatible with HPOS.
     * @link https://onthegosystems.myjetbrains.com/youtrack/issue/wcml-4489
     */
    class WCML_Reports
    {
        public $tab;
        public $report;
        public function __construct()
        {
        }
        public function init()
        {
        }
        public function filter_reports_query($query)
        {
        }
        public function combine_report_by_languages($results)
        {
        }
        public function filter_reports_stock_query($query_from)
        {
        }
        public function use_categories_in_all_languages($product_ids, $category_id)
        {
        }
    }
    class WCML_Store_Pages
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        public function switch_pages_language($pages)
        {
        }
        public function install_pages_action($pages)
        {
        }
        public function add_filter_to_get_shop_translated_page_id()
        {
        }
        /**
         * Filters WooCommerce query for translated shop page.
         *
         * @param WP_Query $q
         */
        public function shop_page_query($q)
        {
        }
        /**
         * Translate shop url
         */
        public function translate_ls_shop_url($languages, $debug_mode = \false)
        {
        }
        public function create_missing_store_pages_with_redirect()
        {
        }
        /**
         * create missing pages
         */
        public function create_missing_store_pages()
        {
        }
        /**
         * get missing pages
         * return array;
         */
        public function get_missing_store_pages()
        {
        }
        /**
         * Filters WooCommerce checkout link.
         */
        public function get_checkout_page_url()
        {
        }
        public function get_wc_pages()
        {
        }
        public function after_set_default_language($code, $previous_code)
        {
        }
        public function template_loader($template)
        {
        }
        public function show_translate_shop_pages_notice()
        {
        }
        public function filter_shop_archive_link($link, $post_type)
        {
        }
    }
    class WCML_WC_Strings
    {
        /** @see \WPML_ST_Taxonomy_Strings::LEGACY_STRING_DOMAIN */
        const DOMAIN_WORDPRESS = 'WordPress';
        /** @see \WPML_ST_Taxonomy_Strings::LEGACY_NAME_PREFIX_SINGULAR */
        const TAXONOMY_SINGULAR_NAME_PREFIX = 'taxonomy singular name: ';
        public $settings = [];
        /**
         * WCML_WC_Strings constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         * @param wpdb             $wpdb
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function add_on_init_hooks()
        {
        }
        public function translated_attribute_label($label, $name, $product_obj = \false)
        {
        }
        /**
         * @param string $title
         * @param array  $values
         *
         * @return string
         */
        public function translated_cart_item_name($title, array $values)
        {
        }
        public function translated_checkout_product_title($title, $product)
        {
        }
        // Catch the default slugs for translation.
        public function translate_default_slug($translation, $text, $context, $domain)
        {
        }
        public function show_custom_url_base_language_requirement()
        {
        }
        public function show_custom_url_base_translation_links()
        {
        }
        public function category_base_in_strings_language($text, $original_value, $context)
        {
        }
        public function product_permalink_slug()
        {
        }
        public function get_domain_language($domain)
        {
        }
        public function get_string_language($value, $context, $name = \false)
        {
        }
        public function set_string_language($value, $context, $name, $language)
        {
        }
        /*
         * Filter breadcrumbs
         *
         */
        public function filter_woocommerce_breadcrumbs($breadcrumbs)
        {
        }
        /*
         * Add notice message to users
         */
        public function notice_after_woocommerce_product_options_attributes()
        {
        }
        public function translate_attribute_taxonomies_labels($attribute_taxonomies)
        {
        }
        public function get_translation_from_woocommerce_mo_file($string, $language, $return_original = \true)
        {
        }
        /**
         * @param array  $args
         * @param string $attribute_label
         *
         * @return array
         */
        public function translate_attribute_labels($args, $attribute_label)
        {
        }
        /**
         * @param string $context
         * @param string $name
         * @param string $language
         *
         * @return string|false
         */
        public function get_translated_string_by_name_and_context($context, $name, $language = \null, $value = \false)
        {
        }
        /**
         * Return what msgid lookup would be for a specific content in a MO file.
         *
         * @param string $string The 'msgid' string to look up translation.
         * @param string $string_context The string context.
         * @return string
         */
        public function get_msgid_for_mo($string, $string_context)
        {
        }
    }
    class WCML_WC_Gateways
    {
        const WCML_BACS_ACCOUNTS_CURRENCIES_OPTION = 'wcml_bacs_accounts_currencies';
        const STRINGS_CONTEXT = 'admin_texts_woocommerce_gateways';
        /**
         * @param woocommerce_wpml        $woocommerce_wpml
         * @param SitePress|NullSitePress $sitepress
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function on_init_hooks()
        {
        }
        public function load_bacs_gateway_currency_selector_hooks()
        {
        }
        public function loaded_woocommerce_payment_gateways($load_gateways)
        {
        }
        /**
         * @param string $gateway_id
         * @param array  $settings
         */
        public function register_gateway_settings_strings($gateway_id, $settings)
        {
        }
        /**
         * @param WC_Payment_Gateway $gateway
         */
        public function payment_gateways_filters($gateway)
        {
        }
        /**
         * @param WC_Payment_Gateway $gateway
         */
        public function translate_gateway_strings($gateway)
        {
        }
        public function translate_gateway_title($title, $gateway_id)
        {
        }
        public function translate_gateway_description($description, $gateway_id)
        {
        }
        public function translate_gateway_instructions($instructions, $gateway_id)
        {
        }
        public function get_translated_gateway_string($string, $gateway_id, $name)
        {
        }
        public function show_language_links_for_gateways()
        {
        }
        public function set_bacs_gateway_currency()
        {
        }
        public function get_gateway_text_keys_to_translate()
        {
        }
        public function append_currency_selector_to_bacs_account_settings()
        {
        }
        /**
         * @param WCML_Currencies_Dropdown_UI $currencies_dropdown_ui
         *
         * @return array
         */
        public function get_dropdown($currencies_dropdown_ui)
        {
        }
    }
    class WCML_Cart
    {
        /**
         * WCML_Cart constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         * @param SitePress        $sitepress
         * @param WooCommerce      $woocommerce
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML\Core\ISitePress $sitepress, \WooCommerce $woocommerce)
        {
        }
        public function add_hooks()
        {
        }
        public function is_clean_cart_enabled()
        {
        }
        public function enqueue_dialog_ui()
        {
        }
        public function wcml_removed_cart_items_widget($args = [])
        {
        }
        public function switching_currency_empty_cart_if_needed($currency, $force_switch)
        {
        }
        public function empty_cart_if_needed($switching_type)
        {
        }
        public function wcml_cart_clear_removed_items()
        {
        }
        public function cart_switching_currency($exc, $current_currency, $new_currency, $return = \false)
        {
        }
        public function cart_alert($dialog_title, $confirmation_message, $switch_to, $stay_in, $switch_to_value, $stay_in_value = \false, $language_switch = \false)
        {
        }
        public function wcml_refresh_fragments()
        {
        }
        /**
         * Update cart and cart session when switch language.
         *
         * @param WC_Cart      $cart
         * @param string|false $currency
         */
        public function woocommerce_calculate_totals($cart, $currency = \false)
        {
        }
        /**
         * @param array $cart_item
         *
         * @return string
         */
        public function get_data_cart_hash($cart_item)
        {
        }
        /**
         * @param array      $item_data
         * @param WC_Product $product Product object
         *
         * @return array
         */
        public function validate_cart_item_data(array $item_data, $product)
        {
        }
        public function wcml_check_on_duplicate_products_in_cart($cart_contents)
        {
        }
        public function get_cart_attribute_translation($attr_key, $attribute, $variation_id, $current_language, $product_id, $tr_product_id)
        {
        }
        /**
         * @param string $attr_key
         *
         * @return string
         */
        protected function remove_attribute_prefix($attr_key)
        {
        }
        public function wcml_generate_cart_key($cart_contents, $key)
        {
        }
        // get cart_item_data from existing cart array ( from session )
        public function get_cart_item_data_from_cart($cart_contents)
        {
        }
        // refresh cart total to return correct price from WC object
        public function wcml_refresh_cart_total()
        {
        }
        public function localize_flat_rates_shipping_classes()
        {
        }
        public function translate_shipping_class($rates)
        {
        }
        public function filter_paypal_args($args)
        {
        }
        public function add_to_cart_sold_individually_exception($found_in_cart, $product_id, $variation_id, $cart_item_data)
        {
        }
        public function sold_individually_product($cart_item, $cart_item_data, $post_id)
        {
        }
        /**
         * @param string $permalink
         * @param array  $cart_item
         *
         * @return string
         */
        public function cart_item_permalink($permalink, $cart_item)
        {
        }
        /**
         * @param string $currency
         *
         * @return float
         */
        public function convert_cart_total_to_currency($currency)
        {
        }
        /**
         * @param string $currency
         *
         * @return string
         */
        public function format_converted_cart_total_in_currency($currency)
        {
        }
        public function convert_cart_shipping_to_currency($currency)
        {
        }
        /**
         * @param WC_Product $product
         *
         * @return WC_Product
         */
        public function adjust_cart_item_product_name($product)
        {
        }
        /**
         * @param string $cart_hash_key
         *
         * @return string
         */
        public function add_language_to_cart_hash_key($cart_hash_key)
        {
        }
        /**
         * @param int[] $productIds
         *
         * @return int[]
         */
        public function convert_crosssell_ids($productIds)
        {
        }
    }
    class WCML_Widgets
    {
        /**
         * WCML_Widgets constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($woocommerce_wpml)
        {
        }
        public function register_widgets()
        {
        }
    }
    class WCML_Comments
    {
        const WCML_AVERAGE_RATING_KEY = '_wcml_average_rating';
        const WCML_RATING_COUNT_KEY = '_wcml_rating_count';
        const WCML_REVIEW_COUNT_KEY = '_wcml_review_count';
        const WC_AVERAGE_RATING_KEY = '_wc_average_rating';
        const WC_RATING_COUNT_KEY = '_wc_rating_count';
        const WC_REVIEW_COUNT_KEY = '_wc_review_count';
        /**
         * WCML_Comments constructor.
         *
         * @param woocommerce_wpml      $woocommerce_wpml
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         * @param wpdb                  $wpdb
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \SitePress $sitepress, \WPML_Post_Translation $post_translations, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Add comment rating
         *
         * @param int $comment_id
         */
        public function add_comment_rating($comment_id)
        {
        }
        /**
         * Calculate rating field for comments based on reviews in all languages.
         *
         * @param int $product_id
         */
        public function recalculate_comment_rating($product_id)
        {
        }
        /**
         * Filter WC reviews meta.
         *
         * @param null|array|string $value     get_metadata() should return a single value or array of values.
         * @param int               $object_id Post ID.
         * @param string            $meta_key  Meta key.
         * @param bool              $single
         *
         * @return array|null|string Filtered metadata value, array of values, or null.
         */
        public function filter_average_rating($value, $object_id, $meta_key, $single)
        {
        }
        /**
         * Filters comment queries to display in all languages if needed
         *
         * @param string[]         $clauses
         * @param WP_Comment_Query $obj
         *
         * @return string[]
         */
        public function comments_clauses($clauses, $obj)
        {
        }
        /**
         * Display link to show rating in all/current language
         */
        public function comments_link()
        {
        }
        /**
         * Checks if comments needs filtering by language.
         *
         * @param bool             $filtered
         * @param int              $post_id
         * @param WP_Comment_Query $comment_query
         * @return bool
         */
        public function is_comment_query_filtered($filtered, $post_id, $comment_query = \null)
        {
        }
        /**
         * Add flag to comment description
         *
         * @param WP_Comment $comment
         */
        public function add_comment_flag($comment)
        {
        }
        /**
         * @param WP_Comment $comment
         */
        public function open_lang_div($comment)
        {
        }
        /**
         * @param WP_Comment $comment
         */
        public function close_lang_div($comment)
        {
        }
        /**
         * Checks if reviews in all languages should be displayed.
         *
         * @param int              $product_id
         * @param WP_Comment_Query $comment_query
         *
         * @return bool
         */
        public function is_reviews_in_all_languages($product_id, $comment_query = \null)
        {
        }
        /**
         * Return reviews count in language
         *
         * @param string|false $language
         *
         * @return int
         */
        public function get_reviews_count($language = \false)
        {
        }
        /**
         * @param int             $comment_id
         * @param WP_Comment|null $comment
         */
        public function recalculate_average_rating_on_comment_hook($comment_id, $comment)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function top_rated_products_widget_args($args)
        {
        }
        /**
         * @param string $label
         * @param int $count
         * @param int $rating
         *
         * @return string
         */
        public function woocommerce_rating_filter_count($label, $count, $rating)
        {
        }
        /**
         * @param int    $meta_id
         * @param int    $comment_id
         * @param string $meta_key
         * @param string $meta_value
         */
        public function maybe_duplicate_comment_rating($meta_id, $comment_id, $meta_key, $meta_value)
        {
        }
        public function no_index_all_reviews_page()
        {
        }
        /**
         * @param WP_Comment[] $comments
         *
         * @return WP_Comment[]
         */
        public function translate_product_ids($comments)
        {
        }
    }
    class WCML_Compatibility
    {
        /**
         * Initialize compatibility classes that need to run before multi-currency.
         */
        public function init_before_multicurrency()
        {
        }
        /**
         * Initialize class
         */
        public function init()
        {
        }
    }
}
namespace OTGS\Installer\Templates\Repository {
    class EndUsers
    {
        public static function render($withProduct, $model)
        {
        }
    }
    class Expired
    {
        public static function render($model)
        {
        }
    }
    class Registered
    {
        public static function render($model)
        {
        }
    }
    class Register
    {
        public static function render($model)
        {
        }
    }
    class RegisteredButtons
    {
        public static function render($model)
        {
        }
    }
    class LegacyFree
    {
        public static function render($model)
        {
        }
    }
    class Refunded
    {
        public static function render($model)
        {
        }
    }
}
namespace OTGS\Installer\Subscription {
    class SubscriptionManager
    {
        /**
         * @param string $repositoryId
         * @param InstallerApiClient $apiClient
         * @param OTGS_Products_Config_Db_Storage $productsConfigStorage
         */
        public function __construct($repositoryId, \OTGS\Installer\Api\InstallerApiClient $apiClient, \OTGS_Products_Config_Db_Storage $productsConfigStorage)
        {
        }
        /**
         * @param string $siteKey
         * @param int $source
         *
         * @throws \OTGS_Installer_Fetch_Subscription_Exception
         * @throws InvalidProductBucketUrl
         */
        public function fetch($siteKey, $source)
        {
        }
        /**
         * @param string $repository_id
         * @param int $fetchVersion
         *
         * @return bool
         */
        public function shouldRefetchProductUrl($repository_id, $fetchVersion)
        {
        }
    }
    class SubscriptionManagerFactory
    {
        /**
         * @param $installerSettings
         */
        public function __construct($installerSettings)
        {
        }
        public function create($repositoryId, $repositoryApiUrl)
        {
        }
    }
}
namespace OTGS\Installer\Recommendations {
    class Storage
    {
        const ADMIN_NOTICES_OPTION = 'otgs_installer_recommendations_admin_notices_v2';
        /**
         * @param string $key
         * @param array $data
         */
        public static function save($key, $data)
        {
        }
        public static function delete($pluginSlug, $repositoryId)
        {
        }
        /**
         * @return array
         */
        public static function getAll()
        {
        }
    }
    class RecommendationsForInstallerPlugins
    {
        /**
         * @param array $pluginsRecommendations
         * @param array $pluginsData
         */
        public function __construct($pluginsRecommendations, $pluginsData)
        {
        }
        /**
         * @return array
         */
        public function getRecommendations()
        {
        }
        /**
         * @return array
         */
        public function getPluginsData()
        {
        }
    }
    class RecommendationsManager
    {
        /**
         * RecommendationsManager constructor.
         *
         * @param \OTGS_Installer_Repositories $repositories
         * @param array $settings
         * @param Storage $settings
         */
        public function __construct(\OTGS_Installer_Repositories $repositories, $settings, \OTGS\Installer\Recommendations\Storage $noticesStorage)
        {
        }
        public function addHooks()
        {
        }
        public function activatedPluginRecommendation($plugin)
        {
        }
        public function deactivatedPluginRecommendation($plugin)
        {
        }
        public function recommendationSuccess()
        {
        }
        /**
         * @return array
         */
        public function getRepositoryPluginsRecommendations()
        {
        }
        public function getRecommendationStoredNotices($existingNotices)
        {
        }
    }
    class GluePluginData
    {
        /**
         * @param string $pluginSlug
         * @param array $gluePluginData
         */
        public function __construct($pluginSlug, $gluePluginData)
        {
        }
        /**
         * @return string
         */
        public function getPluginSlug()
        {
        }
        /**
         * @return array
         */
        public function getGluePluginData()
        {
        }
    }
}
namespace OTGS\Installer\Api\Exception {
    class InvalidSubscription extends \Exception
    {
        public function __construct($details)
        {
        }
    }
    class InvalidProductsResponseException extends \Exception
    {
        public function __construct()
        {
        }
    }
    class InvalidResponseException extends \Exception
    {
        public function __construct()
        {
        }
    }
    class InvalidProductBucketUrl extends \Exception
    {
        public function __construct($details)
        {
        }
    }
    class ClientException extends \Exception
    {
        public function __construct($details)
        {
        }
    }
    class InvalidSubscriptionResponseException extends \Exception
    {
        public function __construct()
        {
        }
    }
}
namespace OTGS\Installer\Api {
    class InstallerApiClient
    {
        /**
         * @param OTGS_Installer_Logger_Storage $loggerStorage
         * @param Client $client
         * @param SubscriptionEndpoint $subscription
         * @param ProductBucketUrlEndpoint $productBucketUrl
         */
        public function __construct(\OTGS_Installer_Logger_Storage $loggerStorage, \OTGS\Installer\Api\Client\Client $client, \OTGS\Installer\Api\Endpoint\Subscription $subscription, \OTGS\Installer\Api\Endpoint\ProductBucketUrl $productBucketUrl)
        {
        }
        /**
         * @param string $siteKey
         * @param string $source
         *
         * @throws \OTGS_Installer_Fetch_Subscription_Exception
         */
        public function fetchSubscription($siteKey, $source)
        {
        }
        /**
         * @param string $siteKey
         *
         */
        public function fetchProductUrl($siteKey)
        {
        }
    }
    class SiteUrl
    {
        /**
         * @param array $repositoriesSettings
         */
        public function __construct($repositoriesSettings)
        {
        }
        /**
         * @copied \WP_Installer::get_installer_site_url
         * @copied \OTGS_Installer_Fetch_Subscription::get_installer_site_url
         *
         * @param string $repository_id
         *
         * @return mixed
         */
        public function get($repository_id = false)
        {
        }
    }
}
namespace OTGS\Installer\Api\Client {
    class Client
    {
        const TIMEOUT = 45;
        /**
         * @param \WP_Http $http
         * @param string $url
         */
        public function __construct(\WP_Http $http, $url)
        {
        }
        /**
         * @param array $body
         *
         * @return mixed
         * @throws ClientException
         */
        public function post($body)
        {
        }
    }
}
namespace OTGS\Installer\Api\Endpoint {
    class ProductBucketUrl
    {
        /**
         * @param string $repositoryId
         * @param SiteUrl $siteUrl
         */
        public function __construct($repositoryId, \OTGS\Installer\Api\SiteUrl $siteUrl)
        {
        }
        /**
         * @param string $siteKey
         *
         * @return array
         */
        public function prepareRequest($siteKey)
        {
        }
        /**
         * @param array $response
         * @throws InvalidProductsResponseException
         */
        public function parseResponse($response)
        {
        }
    }
    class Subscription
    {
        /**
         * @param string $repositoryId
         * @param SiteUrl $siteUrl
         * @param OTGS_Installer_Plugin_Finder $plugin_finder
         */
        public function __construct($repositoryId, \OTGS\Installer\Api\SiteUrl $siteUrl, \OTGS_Installer_Plugin_Finder $plugin_finder)
        {
        }
        /**
         * @param string $siteKey
         * @param int $source
         *
         * @return array
         */
        public function prepareRequest($siteKey, $source)
        {
        }
        /**
         * @throws \Exception
         * @return \stdClass
         * @param array $response
         */
        public function parseResponse($response)
        {
        }
    }
}
namespace OTGS\Installer\Api {
    class InstallerApiClientFactory
    {
        /**
         * @param array $installerSettings
         * @param string $repositoryId
         * @param string $repositoryApiUrl
         *
         * @return InstallerApiClient
         */
        public static function create(\OTGS_Installer_Logger_Storage $loggerStorage, $installerSettings, $repositoryId, $repositoryApiUrl)
        {
        }
    }
}
namespace {
    class OTGS_Installer_PHP_Functions
    {
        /**
         * @param string $constant_name
         *
         * @return bool
         */
        public function defined($constant_name)
        {
        }
        /**
         * @param string $constant_name
         *
         * @return string|int|null
         */
        public function constant($constant_name)
        {
        }
        /**
         * @return int
         */
        public function time()
        {
        }
        public function phpversion()
        {
        }
    }
    class OTGS_Installer_Plugins_Update_Cache_Cleaner
    {
        public function add_hooks()
        {
        }
        public function clean_plugins_update_cache()
        {
        }
    }
    class Installer_Dependencies
    {
        function __construct()
        {
        }
        public function is_win_paths_exception($repository_id)
        {
        }
        public function is_uploading_allowed()
        {
        }
        public function cant_download($repository_id)
        {
        }
        public function win_paths_exception_message()
        {
        }
        public function prevent_plugins_update_on_plugins_page()
        {
        }
        public function wp_plugin_update_row_win_exception()
        {
        }
        public function prevent_plugins_update_on_updates_screen()
        {
        }
        public function php_libraries_missing()
        {
        }
        public function missing_php_functions_notice()
        {
        }
    }
    class WP_Installer
    {
        const TOOLSET_TYPES = 'Toolset Types';
        const LEGACY_FREE_TYPES_SUBSCRIPTION_ID = 5495;
        const GRACE_TIME = \MONTH_IN_SECONDS;
        protected static $_instance = \null;
        public $settings = array();
        protected $api_debug = '';
        protected $_plugins_renew_warnings = array();
        /**
         * @phpstan-ignore-next-line
         * @var Installer_Embedded_Plugins|null
         */
        public $installer_embedded_plugins;
        const SITE_KEY_VALIDATION_SOURCE_OTHER = 0;
        const SITE_KEY_VALIDATION_SOURCE_DOWNLOAD_SPECIFIC = 1;
        const SITE_KEY_VALIDATION_SOURCE_DOWNLOAD_REPORT = 2;
        const SITE_KEY_VALIDATION_SOURCE_REGISTRATION = 3;
        const SITE_KEY_VALIDATION_SOURCE_REVALIDATION = 4;
        const SITE_KEY_VALIDATION_SOURCE_UPDATES_CHECK = 5;
        const SITE_KEY_VALIDATION_SOURCE_REVALIDATION_DAILY = 6;
        public $dependencies;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function get_repositories()
        {
        }
        /**
         * @return OTGS_Products_Manager|null
         */
        public function get_products_manager()
        {
        }
        public function set_config($key, $value)
        {
        }
        public function init()
        {
        }
        public function get_last_subscriptions_refresh()
        {
        }
        public function log($message)
        {
        }
        public function register_admin_message($text, $type = 'updated')
        {
        }
        public function show_admin_messages()
        {
        }
        public function load_locale()
        {
        }
        public function load_embedded_plugins()
        {
        }
        public function menu_setup()
        {
        }
        public static function menu_url()
        {
        }
        public function setup_plugins_action_links()
        {
        }
        public function types_upgrade_link($links)
        {
        }
        public function plugins_action_links_registered($links)
        {
        }
        public function plugins_action_links_not_registered($links)
        {
        }
        /**
         * Repository has valid subscription AND plugin is available for this subscription.
         * @param $repository_id
         * @param $slug
         *
         * @return bool
         */
        public function plugin_is_registered($repository_id, $slug)
        {
        }
        public function version()
        {
        }
        public function plugin_path()
        {
        }
        public function plugin_url()
        {
        }
        public function vendor_url()
        {
        }
        public function get_embedded_at()
        {
        }
        public function is_repositories_page()
        {
        }
        public function res_url()
        {
        }
        public function save_settings()
        {
        }
        public function get_settings($refresh = \false, $shouldLoadHardcodedSiteKeys = \true)
        {
        }
        public static function get_repository_hardcoded_site_key($repository_id)
        {
        }
        public function get_installer_site_url($repository_id = \false)
        {
        }
        /**
         * @param string $repository_id
         *
         * @return string|null
         */
        public function get_registered_site_url($repository_id)
        {
        }
        public function get_site_key_nags_config()
        {
        }
        /**
         * @return array
         */
        public function getRepositories()
        {
        }
        public function add_install_plugins_tab($tabs)
        {
        }
        public function load_repositories_list()
        {
        }
        /**
         * @return string|null
         */
        public function get_xml_config_file()
        {
        }
        public function filter_repositories_list()
        {
        }
        public function refresh_subscriptions_data()
        {
        }
        public function shouldDisplayConnectionIssueMessage($repositoryId)
        {
        }
        public function get_recommendations($repository_id)
        {
        }
        public function refresh_repositories_data($bypass_bucket = \false)
        {
        }
        public function show_products($args = array())
        {
        }
        /**
         * @param string $repositoryId
         * @param array $downloads List of plugins data that are available for subscription type and used on commercial tab.
         *
         * @return array
         */
        public function get_plugins_sections($repositoryId, $downloads)
        {
        }
        public function get_product_price($repository_id, $package_id, $product_id, $incl_discount = \false)
        {
        }
        public function get_product_data($repository_id, $data_type)
        {
        }
        /**
         * @param array $products
         * @param array $product
         *
         * @return string
         */
        public function getProductPriceWithDiscountString($products, $product)
        {
        }
        /**
         * @param array           $repository
         * @param array           $packages
         * @param int|string|null $subscription_type
         * @param bool            $expired
         * @param array|null      $upgrade_options
         * @param string          $repository_id
         *
         * @return array
         */
        public function getRenderProductPackagesData($repository, $packages, $subscription_type, $expired, $upgrade_options, $repository_id)
        {
        }
        public function get_end_user_renewal_url($repository_id)
        {
        }
        public function get_extra_url_parameters()
        {
        }
        public function append_parameters_to_buy_url($url, $repository_id, $args = array())
        {
        }
        public function save_site_key($args = array())
        {
        }
        /**
         * Alias for WP_Installer::get_repository_site_key
         * @see WP_Installer::get_repository_site_key()
         *
         * @param string $repository_id
         *
         * @return string|false (site key) or false
         */
        public function get_site_key($repository_id)
        {
        }
        public function remove_site_key($repository_id, $refresh_repositories_data = \true)
        {
        }
        public function validate_repository_subscription()
        {
        }
        public function api_debug_log($text)
        {
        }
        public function get_repository_site_key($repository_id)
        {
        }
        /**
         * @param $repository_id
         *
         * @return OTGS_Installer_Subscription
         */
        public function get_subscription($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param int $expiredForPeriod
         *
         * @return bool
         */
        public function repository_has_valid_subscription($repository_id, $expiredForPeriod = 0)
        {
        }
        /**
         * @param string $repository_id
         * @param int $expiredForPeriod
         *
         * @return bool
         */
        public function repository_is_in_grace_period($repository_id, $expiredForPeriod = 0)
        {
        }
        /**
         * @param string $repository_id
         *
         * @return bool
         */
        public function repository_has_refunded_subscription($repository_id)
        {
        }
        /**
         * @return bool
         */
        public function should_display_unregister_link_on_refund_notice()
        {
        }
        public function set_hide_unregister_link_on_refund_notice_date($hide_till_date)
        {
        }
        public function repository_has_subscription($repository_id)
        {
        }
        public function repository_has_development_site_key($repository_id)
        {
        }
        public function repository_has_legacy_free_subscription($repository_id)
        {
        }
        public function repository_has_expired_subscription($repository_id, $expiredForPeriod = 0)
        {
        }
        public function repository_has_in_grace_subscription($repository_id, $expiredForPeriod = 0)
        {
        }
        public function get_generic_product_name($repository_id)
        {
        }
        public function show_subscription_renew_warning($repository_id, $subscription_id)
        {
        }
        public function setup_plugins_renew_warnings()
        {
        }
        public function queue_plugins_renew_warnings()
        {
        }
        public function plugins_renew_warning($plugin_file, $plugin_data, $status)
        {
        }
        public function get_subscription_type_for_repository($repository_id)
        {
        }
        public function have_superior_subscription($subscription_type, $product)
        {
        }
        public function is_product_available_for_download($product_name, $repository_id)
        {
        }
        public function get_upgrade_options($repository_id)
        {
        }
        public function append_site_key_to_download_url($url, $key, $repository_id)
        {
        }
        public function plugin_is_installed($name, $slug, $version = \null)
        {
        }
        public function plugin_is_embedded_version($name, $slug)
        {
        }
        //Alias for plugin_is_installed
        public function get_plugin_installed_version($name, $slug)
        {
        }
        public function get_plugin_repository_version($repository_id, $slug)
        {
        }
        public function is_uploading_allowed()
        {
        }
        public function download_plugin_ajax_handler()
        {
        }
        public function download_plugin($slug, $url)
        {
        }
        public function activate_plugin()
        {
        }
        public function custom_plugins_api_call($result, $action, $args)
        {
        }
        public function setup_plugins_page_notices()
        {
        }
        public function localize_strings()
        {
        }
        public function get_matching_cp($repository, $args = array())
        {
        }
        public function set_filtered_prices($args = array())
        {
        }
        public function set_hierarchy_and_order()
        {
        }
        public function compare_package_order($a, $b)
        {
        }
        public function get_support_tag_by_name($name, $repository)
        {
        }
        public function plugin_upgrade_custom_errors()
        {
        }
        public function get_api_debug()
        {
        }
    }
    class OTGS_Installer_Instances_Factory
    {
        public function create()
        {
        }
    }
    class OTGS_Installer_Instance
    {
        /**
         * @var string
         */
        public $bootfile;
        /**
         * @var string
         */
        public $version;
        /**
         * @var string|bool
         */
        public $high_priority;
        /**
         * @var bool
         */
        public $delegated;
        /**
         * @param string $bootfile
         *
         * @return $this
         */
        public function set_bootfile($bootfile)
        {
        }
        /**
         * @param string|bool $high_priority
         *
         * @return $this
         */
        public function set_high_priority($high_priority)
        {
        }
        /**
         * @param string $version
         *
         * @return $this
         */
        public function set_version($version)
        {
        }
        /**
         * @param bool $delegated
         *
         * @return $this
         */
        public function set_delegated($delegated)
        {
        }
    }
    class OTGS_Installer_Instances
    {
        public function __construct($instances)
        {
        }
        public function get()
        {
        }
    }
    /**
     * Installer_Theme_Class
     */
    class Installer_Theme_Class
    {
        /** The Themes Option */
        protected $installer_themes_option;
        /** Update settings */
        protected $installer_themes_available_updates;
        /** The Themes */
        protected $installer_themes = array();
        /** Repository with themes */
        protected $installer_repo_with_themes;
        /** Active tab */
        protected $installer_theme_active_tab;
        /** Theme user registration */
        protected $theme_user_registration;
        /** Client active subscription */
        protected $installer_theme_subscription_type;
        public function __construct()
        {
        }
        /** Init */
        public function init()
        {
        }
        /** Enqueue scripts */
        public function installer_theme_enqueue_scripts()
        {
        }
        /** Case where user is subscribed to a subscription that does not have themes */
        protected function installer_theme_subscription_does_not_have_theme($js_array)
        {
        }
        /** Override WordPress Themes API */
        public function installer_theme_api_override($api_boolean, $action, $args)
        {
        }
        /** Override WordPress Themes API response with our own themes API*/
        public function installer_theme_api_override_response($res, $action, $args)
        {
        }
        /** Theme upgrade check */
        public function installer_theme_upgrade_check($the_value)
        {
        }
        /** When WordPress queries its own Themes API, we sync with our own */
        public function installer_theme_sync_native_wp_api($response, $responsetext, $class, $args, $url)
        {
        }
        /** Sets active tab on init */
        public function installer_theme_sets_active_tab_on_init()
        {
        }
        /** WP Theme API compatibility- added num ratings */
        /** Installer 1.7.6+ Added updated 'rating' field */
        public function installer_theme_add_num_ratings($themes)
        {
        }
        /** When WordPress.org makes a call to its repository, let's run our own upgrade checks too */
        public function installer_theme_sync_call_wp_theme_api($locales)
        {
        }
        /** When the user is on Themes install page OTG themes repository, let's the currently selected tab */
        public function installer_theme_add_query_arg_tab($url, $path, $blog_id = \null)
        {
        }
        /** Save frontend theme tab selected */
        public function installer_theme_frontend_selected_tab()
        {
        }
        /** Installer loaded aux hooks */
        public function installer_theme_loaded_hooks()
        {
        }
        /** Get themes by subscription type */
        protected function installer_theme_get_themes_by_subscription($subscription_type, $repo)
        {
        }
        /** Filter API theme response according to user subscription */
        public function installer_theme_filter_themes_by_subscription($themes, $active_tab)
        {
        }
        /** Hook to wp_loaded, fires when all Installer theme class is ready */
        public function installer_themes_support_set_up_func()
        {
        }
    }
    class OTGS_Installer_WP_Components_Storage
    {
        const COMPONENTS_CACHE_OPTION_KEY = 'otgs_active_components';
        public function refresh_cache()
        {
        }
        public function is_outdated()
        {
        }
        public function get()
        {
        }
        /**
         * @return array
         */
        public function get_plugins()
        {
        }
    }
    class OTGS_Installer_Site_Key_Ajax
    {
        public function __construct(\OTGS_Installer_Logger $logger, \OTGS_Installer_Repositories $repositories, \OTGS_Installer_Subscription_Factory $subscription_factory, \OTGS\Installer\Subscription\SubscriptionManagerFactory $subscriptionManagerFactory)
        {
        }
        public function add_hooks()
        {
        }
        public function save()
        {
        }
        public function remove()
        {
        }
        public function update()
        {
        }
        public function find()
        {
        }
    }
    class OTGS_Installer_Package_Product
    {
        public function __construct(array $params = array())
        {
        }
        public function get_id()
        {
        }
        public function get_name()
        {
        }
        public function get_description()
        {
        }
        public function get_price()
        {
        }
        public function get_subscription_type()
        {
        }
        public function get_subscription_type_text()
        {
        }
        public function get_subscription_info()
        {
        }
        public function get_subscription_type_equivalent()
        {
        }
        public function get_url()
        {
        }
        public function get_renewals()
        {
        }
        public function get_upgrades()
        {
        }
        public function get_plugins()
        {
        }
        /**
         * @param string $slug
         *
         * @return bool
         */
        public function is_plugin_registered($slug)
        {
        }
        public function get_downloads()
        {
        }
    }
}
namespace OTGS\Installer {
    class Settings
    {
        public static function load()
        {
        }
        public static function save($settings)
        {
        }
        public static function is_gz_on()
        {
        }
    }
}
namespace OTGS\Installer\Loader {
    class Config
    {
        public static function merge(array $delegate, array $wpInstallerInstances)
        {
        }
    }
}
namespace {
    class Translation_Service_Info
    {
        public function add_hooks()
        {
        }
        public function save_info($data, $repository_id)
        {
        }
    }
}
namespace OTGS\Installer\Collect\Support {
    trait Macroable
    {
        /**
         * The registered string macros.
         *
         * @var callable[]
         */
        protected static $macros = [];
        /**
         * Register a custom macro.
         *
         * @param string $name
         * @param callable $macro
         *
         * @return void
         */
        public static function macro($name, callable $macro)
        {
        }
        /**
         * Checks if macro is registered.
         *
         * @param string $name
         *
         * @return bool
         */
        public static function hasMacro($name)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param string $method
         * @param mixed[] $parameters
         *
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public static function __callStatic($method, $parameters)
        {
        }
        /**
         * Dynamically handle calls to the class.
         *
         * @param string $method
         * @param mixed[] $parameters
         *
         * @return mixed
         *
         * @throws \BadMethodCallException
         */
        public function __call($method, $parameters)
        {
        }
    }
}
namespace OTGS\Installer\FP {
    /**
     * @method static callable|mixed value(mixed ...$data) - Curried :: a|(*→a) → a
     */
    class Fns
    {
        use \OTGS\Installer\Collect\Support\Macroable;
        const __ = '__CURRIED_PLACEHOLDER__';
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|bool not( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|bool isNotNull( mixed ...$v ) - Curried :: mixed->bool
     * @method static callable|mixed ifElse( ...$predicate, ...$first, ...$second, ...$data ) - Curried :: ( a->bool )->callable->callable->callable
     * @method static callable when( ...$predicate, ...$fn ) - Curried :: ( a->bool )->callable->callable
     * @method static callable unless( ...$predicate, ...$fn ) - Curried :: ( a->bool )->callable->callable
     * @method static callable cond( ...$conditions, ...$fn ) - Curried :: [( a->bool ), callable]->callable
     * @method static callable both( ...$a, ...$b, ...$data ) - Curried :: ( a → bool ) → ( a → bool ) → a → bool
     * @method static callable|bool allPass( ...$predicates, ...$data ) - Curried :: [( *… → bool )] → ( *… → bool )
     * @method static callable|bool anyPass( ...$predicates, ...$data ) - Curried :: [( *… → bool )] → ( *… → bool )
     * @method static callable complement( ...$fn ) - Curried :: ( *… → * ) → ( *… → bool )
     * @method static callable|mixed defaultTo( ...$a, ...$b ) - Curried :: a → b → a | b
     * @method static callable|bool either( ...$a, ...$b ) - Curried :: ( *… → bool ) → ( *… → bool ) → ( *… → bool )
     * @method static callable|mixed until ( ...$predicate, ...$transform, ...$data ) - Curried :: ( a → bool ) → ( a → a ) → a → a
     * @method static callable|bool propSatisfies( ...$predicate, ...$prop, ...$data ) - Curried :: ( a → bool ) → String → [String => a] → bool
     * @method static callable|bool isArray ( ...$a ) - Curried :: a → bool
     * @method static callable|bool isMappable ( ...$a ) - Curried :: a → bool
     * @method static callable|bool isEmpty( ...$a ) - Curried:: a → bool
     * @method static callable|mixed firstSatisfying( ...$predicate, ...$functions, ...$data ) - Curried:: callable->callable[]->mixed->mixed
     * @method static callable|bool isTruthy( ...$data ) - Curried:: mixed->bool
     */
    class Logic
    {
        use \OTGS\Installer\Collect\Support\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    class _Invoker
    {
        /**
         * _Invoker constructor.
         *
         * @param string $fnName
         */
        public function __construct($fnName)
        {
        }
        /**
         * @param mixed ...$args
         *
         * @return _Invoker
         */
        public function with(...$args)
        {
        }
        /**
         * @param mixed $instance
         *
         * @return mixed
         */
        public function __invoke($instance)
        {
        }
    }
    /**
     * @method static callable|mixed prop( ...$key, ...$obj ) - Curried :: string->Collection|array|object->mixed|null
     * @method static callable|mixed propOr( ...$default, ...$key, ...$obj ) - Curried :: mixed->string->Collection|array|object->mixed|null
     * @method static callable|mixed path( ...$path, ...$obj ) - Curried :: array->Collection|array|object->mixed|null
     * @method static callable|mixed pathOr( ...$default, ...$path, ...$obj ) - Curried :: mixed → array → Collection|array|object → mixed
     * @method static callable|bool has( ...$prop, ...$item ) - Curried :: string → a → bool
     * @method static callable|bool hasPath( ...$path, ...$item ) - Curried :: array<string> → a → bool
     */
    class Obj
    {
        use \OTGS\Installer\Collect\Support\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
}
namespace OTGS\Installer\FP\Traits {
    trait Functor
    {
        /** @var mixed */
        protected $value;
        /**
         * @param mixed $value
         */
        public function __construct($value)
        {
        }
        /**
         * @return mixed
         */
        public function get()
        {
        }
        /**
         * @param callable $callback
         *
         * @return \WPML\FP\Either
         */
        public abstract function map(callable $callback);
    }
    trait Pointed
    {
        /**
         * of :: a -> M a
         *
         * Curried function that returns an instance of the derived class
         *
         * @param mixed $value (optional)
         *
         * @return mixed|callable
         */
        public static function of($value = null)
        {
        }
    }
    trait ConstApplicative
    {
        /**
         * @param mixed $otherContainer
         *
         * @return mixed
         */
        public function ap($otherContainer)
        {
        }
    }
    trait Applicative
    {
        /**
         * @param mixed $otherContainer
         *
         * @return mixed
         */
        public function ap($otherContainer)
        {
        }
    }
}
namespace OTGS\Installer\FP {
    /**
     * Class Either
     * @package WPML\FP
     *
     * @method static callable|Right of( ...$value ) - Curried :: a → Right a
     *
     * @method static callable|Left left( ...$value ) - Curried :: a → Left a
     *
     * @method static callable|Right right( ...$value ) - Curried :: a → Right a
     *
     * @method static callable|Left|Right fromNullable( ...$value ) - Curried :: a → Either a
     *
     * @method static callable|Left|Right fromBool( ...$value ) - Curried :: a → Either a
     *
     * @method static Either tryCatch( ...$fn ) - Curried :: a → Either a
     *
     * @method static mixed getOrElse( ...$other )
     */
    abstract class Either
    {
        use \OTGS\Installer\FP\Traits\Functor;
        use \OTGS\Installer\Collect\Support\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
        /**
         * @return Either
         */
        public function join()
        {
        }
        /**
         * @param callable $fn
         *
         * @return mixed
         */
        public abstract function chain(callable $fn);
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public abstract function bichain(callable $leftFn, callable $rightFn);
        /**
         * @param callable $fn
         *
         * @return mixed
         */
        public abstract function orElse(callable $fn);
        public abstract function bimap(callable $leftFn, callable $rightFn);
        public abstract function coalesce(callable $leftFn, callable $rightFn);
        public abstract function alt(\OTGS\Installer\FP\Either $alt);
        public abstract function filter(callable $fn);
    }
    class Left extends \OTGS\Installer\FP\Either
    {
        use \OTGS\Installer\FP\Traits\ConstApplicative;
        use \OTGS\Installer\FP\Traits\Pointed;
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function map(callable $fn)
        {
        }
        public function bimap(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Right
         */
        public function coalesce(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @return void
         * @throws \Exception
         */
        public function get()
        {
        }
        /**
         * @param mixed $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Right
         */
        public function orElse(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public function bichain(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param mixed $value
         *
         * @return void
         * @throws \Exception
         */
        public function getOrElseThrow($value)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function tryCatch(callable $fn)
        {
        }
        public function alt(\OTGS\Installer\FP\Either $alt)
        {
        }
    }
    class Right extends \OTGS\Installer\FP\Either
    {
        use \OTGS\Installer\FP\Traits\Applicative;
        use \OTGS\Installer\FP\Traits\Pointed;
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function map(callable $fn)
        {
        }
        public function bimap(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Right
         */
        public function coalesce(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param Either $other
         *
         * @return mixed
         */
        public function getOrElse($other)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function orElse(callable $fn)
        {
        }
        /**
         * @param mixed $value
         *
         * @return mixed
         */
        public function getOrElseThrow($value)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function chain(callable $fn)
        {
        }
        /**
         * @param callable $leftFn
         * @param callable $rightFn
         *
         * @return Either|Left|Right
         */
        public function bichain(callable $leftFn, callable $rightFn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Either
         */
        public function tryCatch(callable $fn)
        {
        }
        public function alt(\OTGS\Installer\FP\Either $alt)
        {
        }
    }
    /**
     * @method static callable|bool equals( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool lt( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool lte( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool gt( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool gte( ...$a, ...$b ) - Curried :: a->b->bool
     * @method static callable|bool propEq( ...$prop, ...$value, ...$obj ) - Curried :: String → a → array → bool
     */
    class Relation
    {
        use \OTGS\Installer\Collect\Support\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * @method static callable|string len( ...$str ) - Curried :: string → int
     */
    class Str
    {
        use \OTGS\Installer\Collect\Support\Macroable;
        /**
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * Class Undefined
     * @package OTGS\Installer\FP
     *
     * Class represents Undefined value. It let us handle correctly expected, but falsy values like null, 0 or false.
     */
    class Undefined
    {
    }
}
namespace OTGS\Installer {
    class Collection
    {
        /**
         * The items contained in the collection.
         *
         * @var mixed[]
         */
        protected $items = [];
        /**
         * @param array $array
         *
         * @return Collection
         */
        public static function of(array $array)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Collection
         */
        public function filter(callable $fn)
        {
        }
        /**
         * @param callable $fn
         *
         * @return Collection
         */
        public function map(callable $fn)
        {
        }
        /**
         * Converts array from key => vales to an array of pairs [ key, value ]
         * @return Collection
         */
        public function entities()
        {
        }
        /**
         * @param string $column
         *
         * @return Collection
         */
        public function pluck($column)
        {
        }
        /**
         * @param callable $fn
         * @param mixed    $initial
         *
         * @return mixed
         */
        public function reduce(callable $fn, $initial = 0)
        {
        }
        /**
         * @return Collection
         */
        public function values()
        {
        }
        /**
         * @param array $other
         *
         * @return Collection
         */
        public function mergeRecursive(array $other)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|Collection|NullCollection|array
         */
        public function get($key = null)
        {
        }
        public function getOrNull($key = null)
        {
        }
        public function contains($value)
        {
        }
        public function head()
        {
        }
        /**
         * Determine if an item exists at an offset.
         *
         * @param  mixed  $key
         * @return bool
         */
        public function offsetExists($key)
        {
        }
        /**
         * Determine if an item exists in the collection by key.
         *
         * @param  mixed  $key
         * @return bool
         */
        public function has($key)
        {
        }
    }
    class NullCollection
    {
        public function map(callable $fn)
        {
        }
        public function filter(callable $fn)
        {
        }
        public function head()
        {
        }
        public function pluck()
        {
        }
        public function get()
        {
        }
        public function getOrNull()
        {
        }
    }
}
namespace {
    class OTGS_Installer_WP_Share_Local_Components_Setting_Hooks
    {
        const TEMPLATE_CHECKBOX = 'share-local-data-setting';
        const TEMPLATE_RADIO = 'share-local-data-setting-radio';
        public function __construct(\OTGS_Template_Service $template_service, \OTGS_Installer_WP_Share_Local_Components_Setting $setting)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $args
         *
         * @throws \InvalidArgumentException
         */
        public function render_local_components_setting(array $args)
        {
        }
        /**
         * @param $ignore
         * @param string $repo (wpml|toolset)
         *
         * @return bool
         */
        public function has_local_components_setting_filter($ignore, $repo)
        {
        }
        public function get_installer_repository_subscription_status($ignore, $repo)
        {
        }
    }
    class OTGS_Installer_Plugins_Page_Notice
    {
        const TEMPLATE = 'plugins-page';
        const DISPLAY_SUBSCRIPTION_NOTICE_KEY = 'display_subscription_notice';
        const DISPLAY_SETTING_NOTICE_KEY = 'display_setting_notice';
        public function __construct(\OTGS_Template_Service $template_service, \OTGS_Installer_Plugin_Finder $plugin_finder)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return array
         */
        public function get_plugins()
        {
        }
        public function add_plugin($plugin_id, $plugin_data)
        {
        }
        /**
         * @param string $plugin_file
         */
        public function show_purchase_notice_under_plugin($plugin_file, $plugin_data)
        {
        }
    }
    class OTGS_Installer_Logger_Storage
    {
        const MAX_SIZE = 50;
        const OPTION_KEY = 'otgs-installer-log';
        const COMPONENT_SUBSCRIPTION = 'subscription-fetching';
        const COMPONENT_PRODUCTS_URL = 'products-url-fetching';
        const COMPONENT_DOWNLOAD = 'download';
        const COMPONENT_REPOSITORIES = 'repositories-fetching';
        const COMPONENT_PRODUCTS_PARSING = 'products-parsing';
        const API_CONNECTION_TEST = 'api-connection-test';
        const PRODUCTS_FILE_CONNECTION_TEST = 'products-connection-test';
        public function __construct(\OTGS_Installer_Log_Factory $log_factory, $max_size = self::MAX_SIZE)
        {
        }
        /**
         * @return array|OTGS_Installer_Log[]
         */
        public function get()
        {
        }
        public function add(\OTGS_Installer_Log $log)
        {
        }
    }
    class OTGS_Installer_Log_Factory
    {
        /**
         * @return OTGS_Installer_Log
         */
        public function create()
        {
        }
    }
    class OTGS_Installer_Logger
    {
        public function __construct(\WP_Installer $installer, \OTGS_Installer_Logger_Storage $storage)
        {
        }
        public function get_api_log()
        {
        }
        public function add_api_log($log)
        {
        }
        public function save_log(\OTGS_Installer_Log $log)
        {
        }
        public function add_log($log)
        {
        }
    }
    class OTGS_Installer_Log
    {
        /**
         * @return string
         */
        public function get_time()
        {
        }
        /**
         * @param string $time
         *
         * @return $this
         */
        public function set_time($time)
        {
        }
        /**
         * @return string
         */
        public function get_request_url()
        {
        }
        /**
         * @param string $request_url
         *
         * @return $this
         */
        public function set_request_url($request_url)
        {
        }
        /**
         * @return array
         */
        public function get_request_args()
        {
        }
        /**
         * @param array $request_args
         *
         * @return $this
         */
        public function set_request_args($request_args)
        {
        }
        /**
         * @return string
         */
        public function get_response()
        {
        }
        /**
         * @param string $response
         *
         * @return $this
         */
        public function set_response($response)
        {
        }
        /**
         * @return string
         */
        public function get_component()
        {
        }
        /**
         * @param string $component
         *
         * @return $this
         */
        public function set_component($component)
        {
        }
    }
    /**
     * Class WP_Installer_Channels
     * @since 1.8
     */
    class WP_Installer_Channels
    {
        const CHANNEL_PRODUCTION = 'production';
        const CHANNEL_BETA = 'beta';
        const CHANNEL_DEVELOPMENT = 'development';
        protected static $_instance = \null;
        function __construct()
        {
        }
        /**
         * @return null|WP_Installer_Channels
         */
        public static function instance()
        {
        }
        /**
         * Get the channel literal id based on the numeric id
         *
         * @param mixed $id
         *
         * @return string
         */
        public static function channel_name_by_id($id)
        {
        }
        /**
         * Initialization
         */
        public function init()
        {
        }
        /**
         * Ajax handler for channel switching
         */
        public function set_channel()
        {
        }
        /**
         * @param string $repository_id
         *
         * @return int
         */
        public function get_channel($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param array $downloads
         */
        public function load_channel_selector($repository_id, $downloads)
        {
        }
        /**
         * The beta and development channels can be used only when already using the most up to date versions
         * @param array $downloads
         *
         * @return bool
         */
        public function can_use_unstable_channels($downloads)
        {
        }
        /**
         * Get available updates channels. Only include channels with actual downloads available.
         *
         * @param string $repository_id
         *
         * @return array
         */
        public function get_available_channels($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param array $downloads
         *
         * @return array
         */
        public function filter_downloads_by_channel($repository_id, $downloads)
        {
        }
        /**
         * Get the source channel for the installed version when on the Beta or Development channel
         * @param string $version
         * @param string $repository_id
         * @param string $download_id
         * @param string $download_kind
         *
         * @return string
         */
        public function get_download_source_channel($version, $repository_id, $download_id, $download_kind)
        {
        }
    }
    class OTGS_Installer_WP_Components_Sender
    {
        public function __construct(\WP_Installer $installer, \OTGS_Installer_WP_Share_Local_Components_Setting $settings)
        {
        }
        public function send(array $components, $force = \false)
        {
        }
    }
    class OTGS_Installer_Source
    {
        public function __construct(\WP_Installer $installer, \WP_Filesystem_Base $file_system)
        {
        }
        /**
         * @return array|null
         */
        public function get()
        {
        }
    }
    class OTGS_Installer_Support_Template
    {
        const TEMPLATE_FILE = 'installer-support';
        const SUPPORT_LINK = 'support-link';
        public function __construct(\OTGS_Template_Service $template_service, \OTGS_Installer_Logger_Storage $logger_storage, \OTGS_Installer_Requirements $requirements, \OTGS_Installer_Instances $instances)
        {
        }
        public function show()
        {
        }
        public function render_support_link($args = array())
        {
        }
    }
    class OTGS_Installer_Requirements
    {
        public function get()
        {
        }
    }
    class OTGS_Installer_Connection_Test_Ajax
    {
        const ACTION = 'otgs_installer_test_connection';
        public function __construct(\OTGS_Installer_Connection_Test $connection_test)
        {
        }
        public function add_hooks()
        {
        }
        public function test_connection()
        {
        }
    }
    class OTGS_Installer_Connection_Test_Exception extends \Exception
    {
    }
    class OTGS_Installer_Connection_Test
    {
        public function __construct(\OTGS_Installer_Repositories $repositories, \OTGS_Installer_Upgrade_Response $upgrade_response, \OTGS_Installer_Logger_Storage $logger_storage, \OTGS_Installer_Log_Factory $log_factory)
        {
        }
        /**
         * @param string $repo_id
         *
         * @return null|string
         */
        public function get_api_status($repo_id)
        {
        }
        /**
         * @param string $plugin_id
         *
         * @return bool|string
         */
        public function get_download_status($plugin_id)
        {
        }
    }
    class OTGS_Installer_Support_Hooks
    {
        public function __construct(\OTGS_Installer_Support_Template_Factory $template_factory)
        {
        }
        public function add_hooks()
        {
        }
        public function add_support_page()
        {
        }
        public function render_support_page()
        {
        }
        public function enqueue_scripts($hook)
        {
        }
        public function render_link($args = array())
        {
        }
    }
    class OTGS_Installer_Support_Template_Factory
    {
        public function __construct($installer_path)
        {
        }
        /**
         * @return OTGS_Installer_Support_Template
         */
        public function create()
        {
        }
    }
    class OTGS_Installer_Repository
    {
        public function __construct(array $params = array())
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_product_name()
        {
        }
        /**
         * @param bool $ssl
         *
         * @return string
         */
        public function get_api_url($ssl = \true)
        {
        }
        /**
         * @return OTGS_Installer_Subscription
         */
        public function get_subscription()
        {
        }
        /**
         * @return array
         */
        public function get_packages()
        {
        }
        /**
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_by_subscription_type()
        {
        }
        /**
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_by_subscription_type_equivalent()
        {
        }
        /**
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_by_subscription_type_on_upgrades()
        {
        }
        public function set_subscription(\OTGS_Installer_Subscription $subscription = \null)
        {
        }
    }
    class OTGS_Installer_Repositories
    {
        public function __construct(\WP_Installer $installer, \OTGS_Installer_Repository_Factory $repository_factory, \OTGS_Installer_Subscription_Factory $subscription_factory)
        {
        }
        public function get_all()
        {
        }
        /**
         * @param $id
         *
         * @return null|OTGS_Installer_Repository
         */
        public function get($id)
        {
        }
        public function refresh($bypass_bucket = \false)
        {
        }
        public function save_subscription(\OTGS_Installer_Repository $repository)
        {
        }
    }
    class OTGS_Installer_Repositories_Factory
    {
        public function create(\WP_Installer $installer)
        {
        }
    }
    class OTGS_Installer_Repository_Factory
    {
        public function create_repository($params)
        {
        }
        public function create_package($params)
        {
        }
        public function create_product($params)
        {
        }
    }
    class OTGS_Installer_Package_Product_Finder
    {
        /**
         * @param OTGS_Installer_Repository $repository
         * @param OTGS_Installer_Subscription $subscription
         *
         * @return null|OTGS_Installer_Package_Product
         */
        public function get_product_in_repository_by_subscription(\OTGS_Installer_Repository $repository, \OTGS_Installer_Subscription $subscription = \null)
        {
        }
    }
    class OTGS_Installer_Icons
    {
        public function __construct(\WP_Installer $installer)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param stdClass $response
         * @param string $name
         *
         * @return stdClass
         */
        public function add_icons_on_response($response, $name)
        {
        }
    }
    class OTGS_Installer_Subscription
    {
        const SUBSCRIPTION_STATUS_INACTIVE = 0;
        const SUBSCRIPTION_STATUS_ACTIVE = 1;
        const SUBSCRIPTION_STATUS_EXPIRED = 2;
        const SUBSCRIPTION_STATUS_INACTIVE_UPGRADED = 3;
        const SUBSCRIPTION_STATUS_ACTIVE_NO_EXPIRATION = 4;
        const SITE_KEY_TYPE_PRODUCTION = 0;
        const SITE_KEY_TYPE_DEVELOPMENT = 1;
        const SUBSCRIPTION_STATUS_TEXT_EXPIRED = 'expired';
        const SUBSCRIPTION_STATUS_TEXT_VALID = 'valid';
        const SUBSCRIPTION_STATUS_TEXT_REFUNDED = 'refunded';
        const SUBSCRIPTION_STATUS_TEXT_MISSING = 'missing';
        /**
         * WPML_Installer_Subscription constructor.
         *
         * @param array|null $subscription
         */
        public function __construct($subscription = array())
        {
        }
        public function get_subscription_status_text()
        {
        }
        public function get_site_key()
        {
        }
        public function get_site_url()
        {
        }
        public function get_type()
        {
        }
        public function get_site_key_type()
        {
        }
        public function get_registered_by()
        {
        }
        public function get_data()
        {
        }
        /**
         * @param int $expiredForPeriod
         * @return bool
         */
        public function is_valid($expiredForPeriod = 0)
        {
        }
        /**
         * @param int $expiredForPeriod
         * @return bool
         */
        public function is_in_grace($expiredForPeriod = 0)
        {
        }
        public function is_refunded()
        {
        }
    }
    class OTGS_Installer_Source_Factory
    {
        public function create()
        {
        }
    }
    class OTGS_Products_Manager_Factory
    {
        /**
         * @param OTGS_Products_Config_Xml $repositories_config
         * @param OTGS_Installer_Logger_Storage $logger_storage
         *
         * @return OTGS_Products_Manager
         */
        public static function create(\OTGS_Products_Config_Xml $repositories_config, \OTGS_Installer_Logger_Storage $logger_storage)
        {
        }
    }
    class OTGS_Products_Config_Xml
    {
        /**
         * @param string $xml_file
         */
        public function __construct($xml_file)
        {
        }
        /**
         * @param $repository_id
         *
         * @return string|null
         */
        public function get_repository_products_url($repository_id)
        {
        }
        public function get_repository_products_default_data()
        {
        }
        /**
         * @return array
         */
        public function get_products_api_urls()
        {
        }
    }
    class OTGS_Installer_Products_Parser
    {
        public function __construct(\WP_Installer_Channels $installerChannels, \OTGS_Products_Config_Xml $productsConfigXml, \OTGS_Installer_Logger_Storage $logger)
        {
        }
        /**
         * @param string         $products_url
         * @param string         $repository_id
         * @param array|WP_Error $response
         *
         * @return array
         * @throws OTGS_Installer_Products_Parsing_Exception
         */
        public function get_products_from_response($products_url, $repository_id, $response)
        {
        }
        public function get_default_products($repository_id)
        {
        }
        /**
         * @return array
         */
        public function get_product_notices()
        {
        }
    }
    class OTGS_Products_Bucket_Repository
    {
        /**
         * @param string $api_url
         * @param string $site_key
         * @param string $site_url
         *
         * @return string|null
         */
        public function get_products_bucket_url($api_url, $site_key, $site_url)
        {
        }
    }
}
namespace OTGS\Installer\Products {
    class ExternalProductsUrls
    {
        public function __construct(\OTGS_Products_Config_Db_Storage $products_config_storage, \OTGS_Products_Bucket_Repository $products_bucket_repository)
        {
        }
        /**
         * @param string $repository_id
         * @param string $site_key
         * @param string $site_url
         *
         * @return string|null
         */
        public function fetchProductUrl($repository_id, $api_url, $site_key, $site_url)
        {
        }
    }
}
namespace {
    class OTGS_Products_Manager
    {
        /**
         * @param OTGS_Products_Config_Xml $products_config_xml
         * @param WP_Installer_Channels $installer_channels
         * @param OTGS_Installer_Logger_Storage $logger_storage
         */
        public function __construct(\OTGS_Products_Config_Xml $products_config_xml, \WP_Installer_Channels $installer_channels, \OTGS_Installer_Logger_Storage $logger_storage, \OTGS\Installer\Products\ExternalProductsUrls $externalProductUrls)
        {
        }
        /**
         * @param string       $repository_id
         * @param string|false $site_key
         * @param string       $site_url
         * @param bool         $bypass_buckets
         *
         * @return string|null
         */
        public function get_products_url($repository_id, $site_key, $site_url, $bypass_buckets)
        {
        }
    }
    class OTGS_Products_Config_Db_Storage
    {
        const PRODUCTS_CONFIG_KEY = 'otgs_installer_products_urls';
        const PRODUCT_VERSIONS_CONFIG_KEY = 'otgs_installer_products_urls_version';
        /**
         * @param string $repository_id
         *
         * @return string|null
         */
        public function get_repository_products_url($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @param string $repository_products_url
         *
         * @return bool
         */
        public function store_repository_products_url($repository_id, $repository_products_url)
        {
        }
        /**
         * @param string $repository_id
         *
         * @return bool
         */
        public function clear_repository_products_url($repository_id)
        {
        }
        /**
         * @param string $repository_id
         * @return bool
         */
        public function clear_repository_product_version($repository_id)
        {
        }
        /**
         * @param $repository_id
         *
         * @return int|null
         */
        public function get_repository_product_version($repository_id)
        {
        }
        /**
         * @param $repository_id
         * @param $repository_product_version
         *
         * @return mixed
         */
        public function update_repository_product_version($repository_id, $repository_product_version)
        {
        }
    }
}
namespace OTGS\Installer\CommercialTab {
    class SectionsManager
    {
        const SECTION_GENERAL = 'general';
        const SECTION_LEGACY = 'legacy';
        /**
         * @param array $settings
         */
        public function __construct($settings)
        {
        }
        /**
         * @param string $repositoryId
         * @param array $downloads
         *
         * @return array
         */
        public function getPluginsSections($repositoryId, $downloads)
        {
        }
    }
    class DownloadFilter
    {
        public static function shouldDisplayRecord($productSlug)
        {
        }
    }
    class DownloadsList
    {
        public static function getDownloadRow($download_id, $download, $site_key, $repository_id)
        {
        }
    }
}
namespace {
    class OTGS_Installer_WP_Components_Setting_Ajax
    {
        const AJAX_ACTION = 'otgs_save_setting_share_local_components';
        const SAVE_SETTING_PRIORITY = 1;
        public function __construct(\OTGS_Installer_WP_Share_Local_Components_Setting $setting, \WP_Installer $installer)
        {
        }
        public function add_hooks()
        {
        }
        public function save()
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices {
    class MessageTexts
    {
        /**
         * MessageTexts constructor.
         *
         * @param array $messages
         */
        public function __construct(array $messages)
        {
        }
        /**
         * @param string $repo
         * @param string $messageId
         *
         * @return string|null
         */
        public function get($repo, $messageId, $parameters = [])
        {
        }
    }
    class Store
    {
        const ADMIN_NOTICES_OPTION = 'otgs_installer_admin_notices';
        /**
         * @param string $key
         * @param $data
         */
        public function save($key, $data)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function get($key, $default)
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices\Notices {
    class Hooks
    {
        public static function addHooks($class, \WP_Installer $installer)
        {
        }
    }
    class Texts
    {
        protected static $repo;
        protected static $product;
        protected static $productURL;
        protected static $apiHost;
        protected static $communicationDetailsLink;
        protected static $supportLink;
        protected static $publishLink;
        protected static $learnMoreDevKeysLink;
        public static function notRegistered()
        {
        }
        public static function expired()
        {
        }
        public static function inGrace()
        {
        }
        public static function developmentBanner()
        {
        }
        public static function refunded()
        {
        }
        public static function connectionIssues()
        {
        }
        public static function pluginActivatedRecommendation($parameters)
        {
        }
        /**
         * @param string $type The type is used as a suffix of the `otgs-installer-notice-` CSS class.
         * @param string $html An unescaped HTML string but with escaped data (e.g. attributes, URLs, or strings in the HTML produced from any input).
         *
         * @return string
         */
        protected static function insideDiv($type, $html)
        {
        }
        /**
         * @return string
         */
        protected static function getNotRegisteredButtons()
        {
        }
        /**
         * @return string
         */
        protected static function getExpiredButtons()
        {
        }
        /**
         * @return string
         */
        protected static function getInGraceButtons()
        {
        }
        /**
         * @param string $notice_type The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getDismissHTML($notice_type)
        {
        }
        /**
         * @param string $url The method takes care of escaping the string.
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getPrimaryButtonHTML($url, $text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         * @param array $parameters
         *
         * @return string
         */
        protected static function getRecommendationInstallButtonHTML($text, $parameters)
        {
        }
        /**
         * @param string $url The method takes care of escaping the string.
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getRefreshButtonHTML($url, $text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getStatusHTML($text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *
         * @return string
         */
        protected static function getRecommendationDismissHTML($text, $parameters)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *                      If the string contains a placeholder, it will be replaced with the value of `static::$product`.
         *
         * @return string
         */
        protected static function getHeadingHTML($text)
        {
        }
        /**
         * @param string $text
         *
         * @return string
         */
        protected static function getConnectionIssueHeadingHTML($text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *                      If the string contains a placeholder, it will be replaced with the value of `static::$product`.
         *
         * @return string
         */
        protected static function getBodyHTML($text)
        {
        }
        /**
         * @param string $text The method takes care of escaping the string.
         *                      If the string contains a placeholder, it will be replaced with the value of `static::$product`.
         *
         * @return string
         */
        protected static function getConnectionIssueBodyHTML($text)
        {
        }
    }
    class ToolsetTexts extends \OTGS\Installer\AdminNotices\Notices\Texts
    {
        protected static $repo = 'toolset';
        protected static $product = 'Toolset';
        protected static $productURL = 'Toolset.com';
        protected static $apiHost = 'toolset.com';
        protected static $communicationDetailsLink = '/admin.php?page=otgs-installer-support';
        protected static $supportLink = 'https://toolset.com/forums/forum/professional-support/';
        protected static $publishLink = 'https://toolset.com/account/sites/?publish=';
        protected static $learnMoreDevKeysLink = 'https://toolset.com/faq/how-to-install-and-register-toolset/?utm_source=plugin&utm_medium=gui&utm_campaign=types#registering-toolset-in-a-development-environment';
    }
    class WPMLTexts extends \OTGS\Installer\AdminNotices\Notices\Texts
    {
        protected static $repo = 'wpml';
        protected static $product = 'WPML';
        protected static $productURL = 'WPML.org';
        protected static $apiHost = 'wpml.org';
        protected static $communicationDetailsLink = '/admin.php?page=otgs-installer-support';
        protected static $supportLink = 'https://wpml.org/forums/';
        protected static $publishLink = 'https://wpml.org/account/sites/?publish=';
        protected static $learnMoreDevKeysLink = 'https://wpml.org/faq/install-wpml/?utm_source=plugin&utm_medium=gui&utm_campaign=wpmlcore/#register-development-sites';
    }
    class Dismissions
    {
        /**
         * @param array $dismissed already dismissed notices.
         * @param array $data dismissed notice parameters.
         *
         * @return array
         */
        public static function dismissAccountNotice($dismissed, $data)
        {
        }
        /**
         * @param array $dismissed already dismissed notices.
         * @param array $data dismissed notice parameters.
         *
         * @return array
         */
        public static function dismissRecommendationNotice($dismissed, $data)
        {
        }
    }
    class Notice
    {
        /**
         * @param \WP_Installer $installer
         * @param array $config
         *
         * @return \Closure
         */
        public static function addNoticesForType($installer, $config)
        {
        }
        /**
         * @param string $noticeId
         * @param array $notices
         * @param string $repoId
         *
         * @return array
         */
        public static function addNotice($noticeId, array $notices, $repoId)
        {
        }
    }
    class ApiConnection
    {
        const CONNECTION_ISSUES = 'connection-issues';
        /**
         * @param \WP_Installer $installer
         * @param array $initialNotices
         *
         * @return array
         */
        public static function getCurrentNotices(\WP_Installer $installer, array $initialNotices)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowConnectionIssues(\WP_Installer $installer, array $nag)
        {
        }
        public static function config(array $initialConfig)
        {
        }
        public static function pages(array $initialPages)
        {
        }
        public static function screens(array $screens)
        {
        }
        public static function texts(array $initialTexts)
        {
        }
        public static function dismissions(array $initialDismissions)
        {
        }
    }
    class Recommendation
    {
        const PLUGIN_ACTIVATED = 'plugin-activated';
        public static function addHooks()
        {
        }
        /**
         * @param array $initialNotices
         *
         * @return array
         */
        public static function getCurrentNotices(array $initialNotices)
        {
        }
        /**
         * @param array $initialConfig
         *
         * @return array
         */
        public static function config(array $initialConfig)
        {
        }
        /**
         * @param array $screens
         *
         * @return array
         */
        public static function screens(array $screens)
        {
        }
        /**
         * @param array $initialTexts
         *
         * @return array
         */
        public static function texts(array $initialTexts)
        {
        }
        /**
         * @param array $initialDismissions
         *
         * @return array
         */
        public static function dismissions(array $initialDismissions)
        {
        }
    }
    class Account
    {
        const NOT_REGISTERED = 'not-registered';
        const EXPIRED = 'expired';
        const IN_GRACE = 'in-grace';
        const REFUNDED = 'refunded';
        const GET_FIRST_INSTALL_TIME = 'get_first_install_time';
        const DEVELOPMENT_MODE = 'development_mode';
        /**
         * @param \WP_Installer $installer
         * @param array $initialNotices
         *
         * @return array
         */
        public static function getCurrentNotices(\WP_Installer $installer, array $initialNotices)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowNotRegistered(\WP_Installer $installer, array $nag)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowExpired(\WP_Installer $installer, array $nag)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowInGrace(\WP_Installer $installer, array $nag)
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowDevelopmentBanner(\WP_Installer $installer, array $nag)
        {
        }
        public static function addWpmlDevelopmentAdminBar()
        {
        }
        /**
         * @param \WP_Installer $installer
         * @param array $nag
         *
         * @return bool
         */
        public static function shouldShowRefunded(\WP_Installer $installer, array $nag)
        {
        }
        public static function config(array $initialConfig)
        {
        }
        public static function pages(array $initialPages)
        {
        }
        public static function screens(array $screens)
        {
        }
        public static function texts(array $initialTexts)
        {
        }
        public static function dismissions(array $initialDismissions)
        {
        }
    }
}
namespace OTGS\Installer\AdminNotices {
    class Loader
    {
        /**
         * @param bool $isAjax
         */
        public static function addHooks($isAjax)
        {
        }
        public static function initDisplay()
        {
        }
        public static function isDismissed($repository_id, $notice_id)
        {
        }
        /**
         * @param int $start
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public static function timeOut($start, $repo, $id)
        {
        }
    }
    class Display
    {
        public function __construct(array $currentNotices, array $config, \OTGS\Installer\AdminNotices\MessageTexts $messageTexts, callable $isDismissed)
        {
        }
        public function addHooks()
        {
        }
        public function addNotices()
        {
        }
        public function addScripts()
        {
        }
    }
    class Dismissed
    {
        const STORE_KEY = 'dismissed';
        /**
         * @param array $dismissedNotices
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public static function isDismissed(array $dismissedNotices, $repo, $id)
        {
        }
        /**
         * @param string $plugin_slug
         * @param bool $network
         * @return void
         */
        public static function dismissNoticeOnPluginActivation($plugin_slug, $network)
        {
        }
        /**
         * @param array $dismissedNotices
         * @param callable $timeOut - int -> string -> string -> bool
         *
         * @return mixed
         */
        public static function clearExpired(array $dismissedNotices, callable $timeOut)
        {
        }
        public static function dismissNotice()
        {
        }
        public static function dismissRecommendationNoticeByPluginSlug($dismissed, $data)
        {
        }
    }
    class ToolsetConfig
    {
        public static function pages()
        {
        }
    }
    class TMConfig
    {
        public static function pages()
        {
        }
    }
    class WPMLConfig
    {
        public static function pages()
        {
        }
    }
    class Config
    {
        /**
         * @var array
         */
        protected $config;
        public function __construct(array $config)
        {
        }
        /**
         * @param array $messages
         * @param string $item
         * @param string $type
         *
         * @return bool
         */
        protected function hasItem(array $messages, $item, $type)
        {
        }
    }
    class PageConfig extends \OTGS\Installer\AdminNotices\Config
    {
        /**
         * @param array $messages
         *
         * @return bool
         */
        public function isAnyMessageOnPage(array $messages)
        {
        }
        /**
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public function shouldShowMessage($repo, $id)
        {
        }
    }
    class ScreenConfig extends \OTGS\Installer\AdminNotices\Config
    {
        /**
         * @param array $messages
         *
         * @return bool
         */
        public function isAnyMessageOnPage(array $messages)
        {
        }
        /**
         * @param string $repo
         * @param string $id
         *
         * @return bool
         */
        public function shouldShowMessage($repo, $id)
        {
        }
    }
}
namespace {
    class OTGS_Installer_Upgrade_Response
    {
        public function __construct(array $plugins, \OTGS_Installer_Repositories $repositories, \OTGS_Installer_Source_Factory $source_factory, \OTGS_Installer_Package_Product_Finder $product_finder)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param stdClass|null $update_plugins
         * @return mixed
         */
        public function modify_upgrade_response($update_plugins)
        {
        }
    }
}
namespace OTGS\Installer\Upgrade {
    class InstallerPlugins
    {
        public function __construct(\WP_Installer $installer, \OTGS_Installer_Plugin_Finder $installerPluginsFinder)
        {
        }
        /**
         * @return array
         */
        public function getFilteredInstallerPlugins()
        {
        }
        /**
         * @param $repositoryId
         * @param $pluginId
         *
         * @return array|null
         */
        public function getPluginData($repositoryId, $pluginId)
        {
        }
    }
    class AutoUpgrade
    {
        public function __construct(\WP_Installer $installer, \OTGS_Installer_Plugin_Finder $installerPluginsFinder, \OTGS\Installer\Upgrade\InstallerPlugins $installerPlugins)
        {
        }
        public function addHooks()
        {
        }
        /**
         * @param array $value
         * @param array $oldValue
         *
         * @return array
         */
        public function modifyAutoUpdatePluginsOption($value, $oldValue)
        {
        }
        public function modifyAutoUpdateSettingHtml($html, $pluginFile)
        {
        }
    }
    class IncludeAutoUpgrade
    {
        public function __construct(array $settings, $repositoryId)
        {
        }
        public function includeDuringInstall($pluginId)
        {
        }
    }
}
namespace {
    class OTGS_Installer_Package
    {
        public function __construct(array $params = array())
        {
        }
        public function get_key()
        {
        }
        public function get_products()
        {
        }
        public function get_product_by_subscription_type($type)
        {
        }
        public function get_product_by_subscription_type_equivalent($type)
        {
        }
        public function get_product_by($function, $type)
        {
        }
        public function get_product_by_subscription_type_on_upgrades($type)
        {
        }
        public function get_id()
        {
        }
        public function get_name()
        {
        }
        public function get_description()
        {
        }
        public function get_image_url()
        {
        }
        public function get_order()
        {
        }
        public function get_parent()
        {
        }
    }
    class OTGS_Installer_WP_Components_Setting_Resources
    {
        const HANDLES_OTGS_INSTALLER_UI = 'otgs-installer-ui';
        public function __construct(\WP_Installer $installer)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue_resources()
        {
        }
    }
    class OTGS_Installer_Plugin
    {
        public function __construct(array $params = array())
        {
        }
        /**
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * @return string
         */
        public function get_slug()
        {
        }
        /**
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * @return string
         */
        public function get_changelog()
        {
        }
        /**
         * @return string
         */
        public function get_version()
        {
        }
        /**
         * @return string
         */
        public function get_date()
        {
        }
        /**
         * @return string
         */
        public function get_url()
        {
        }
        /**
         * @return string
         */
        public function get_repo()
        {
        }
        /**
         * @return bool
         */
        public function is_free_on_wporg()
        {
        }
        /**
         * @return bool
         */
        public function has_fallback_on_wporg()
        {
        }
        /**
         * @return string
         */
        public function get_basename()
        {
        }
        /**
         * @return string
         */
        public function get_external_repo()
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_installed_version()
        {
        }
        /**
         * @return string
         */
        public function get_channel()
        {
        }
        /**
         * @return string
         */
        public function get_tested()
        {
        }
        /**
         * @return string
         */
        public function is_lite()
        {
        }
    }
    class Installer_Upgrader_Skins extends \WP_Upgrader_Skin
    {
        /** @var WP_Error|null */
        public $installer_error;
        function __construct($args = array())
        {
        }
        function header()
        {
        }
        function footer()
        {
        }
        function error($error)
        {
        }
        function add_strings()
        {
        }
        function feedback($string, ...$args)
        {
        }
        function before()
        {
        }
        function after()
        {
        }
        public function request_filesystem_credentials($error = \false, $context = '', $allow_relaxed_file_ownership = \false)
        {
        }
    }
}
namespace OTGS\Installer\Rest {
    class Push
    {
        const REFRESH_INTERVAL = 7200;
        //2 hours
        const REST_NAMESPACE = 'otgs/installer/v1';
        public static function register_routes()
        {
        }
        public static function fetch_subscription()
        {
        }
    }
}
namespace {
    class OTGS_Installer_Factory
    {
        public function __construct(\WP_Installer $installer)
        {
        }
        /**
         * @return OTGS_Installer_Filename_Hooks
         */
        public function create_filename_hooks()
        {
        }
        public function load_filename_hooks()
        {
        }
        /**
         * @return OTGS_Installer_Icons
         */
        public function create_icons()
        {
        }
        public function load_icons()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Setting_Ajax
         */
        public function create_local_components_ajax_setting()
        {
        }
        public function load_local_components_ajax_settings()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Setting_Resources
         */
        public function create_resources()
        {
        }
        public function load_resources()
        {
        }
        /**
         * @return OTGS_Installer_WP_Share_Local_Components_Setting_Hooks
         */
        public function create_settings_hooks()
        {
        }
        public function load_settings_hooks()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Hooks
         */
        public function create_wp_components_hooks()
        {
        }
        public function load_wp_components_hooks()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Storage
         */
        public function create_wp_components_storage()
        {
        }
        /**
         * @return OTGS_Installer_WP_Components_Sender
         */
        public function create_wp_components_sender()
        {
        }
        /**
         * @return OTGS_Installer_PHP_Functions
         */
        public function create_installer_php_functions()
        {
        }
        /**
         * @return OTGS_Installer_Debug_Info
         */
        public function create_debug_info_hook()
        {
        }
        public function load_debug_info_hooks()
        {
        }
        /**
         * @return OTGS_Installer_Plugin_Factory
         */
        public function get_plugin_factory()
        {
        }
        /**
         * @return OTGS_Installer_Plugin_Finder
         */
        public function get_plugin_finder()
        {
        }
        /**
         * @return OTGS_Installer_Upgrade_Response
         */
        public function create_upgrade_response()
        {
        }
        public function load_upgrade_response()
        {
        }
        /**
         * @return OTGS_Installer_Site_Key_Ajax
         */
        public function create_site_key_ajax_handler()
        {
        }
        public function load_site_key_ajax_handler()
        {
        }
        public function load_installer_support_hooks()
        {
        }
        public function load_translation_service_info_hooks()
        {
        }
        /**
         * @return $this
         */
        public function load_plugins_update_cache_cleaner()
        {
        }
        public function load_buy_url_hooks()
        {
        }
        public function load_admin_notice_hooks()
        {
        }
        public function load_auto_upgrade_hooks()
        {
        }
    }
    class OTGS_Installer_WP_Components_Hooks
    {
        const EVENT_SEND_COMPONENTS_MONTHLY = 'otgs_send_components_data';
        const EVENT_SEND_COMPONENTS_AFTER_REGISTRATION = 'otgs_send_components_data_on_product_registration';
        const REPORT_SCHEDULING_PERIOD = '+1 month';
        const MONTHLY_CRON = 'monthly';
        public function __construct(\OTGS_Installer_WP_Components_Storage $storage, \OTGS_Installer_WP_Components_Sender $sender, \OTGS_Installer_WP_Share_Local_Components_Setting $setting, \OTGS_Installer_PHP_Functions $php_functions)
        {
        }
        public function add_hooks()
        {
        }
        public function schedule_components_report()
        {
        }
        public function process_report_instantly()
        {
        }
        public function force_send_components_data()
        {
        }
        public function send_components_data()
        {
        }
        /**
         * @return array {
         *     The array of cron schedules keyed by the schedule name.
         *
         *     @type int $interval The schedule interval in seconds.
         *     @type string $display The schedule display name.
         * }
         */
        public function custom_monthly_cron_schedule($schedules)
        {
        }
    }
    class OTGS_Installer_Filename_Hooks
    {
        public function __construct(\OTGS_Installer_PHP_Functions $built_in_functions)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $filename
         * @param string $ext
         * @param string $dir
         *
         * @return string
         */
        public function fix_filename_for_win($filename, $ext, $dir)
        {
        }
    }
    class OTGS_Installer_Plugin_Factory
    {
        /**
         * @param array $params
         *
         * @return OTGS_Installer_Plugin
         */
        public function create(array $params = array())
        {
        }
    }
    class OTGS_Installer_Plugin_Finder
    {
        public function __construct(\OTGS_Installer_Plugin_Factory $plugin_factory, array $repositories)
        {
        }
        /**
         * @return OTGS_Installer_Plugin[]
         */
        public function get_all()
        {
        }
        /**
         * @return array<string, string>
         */
        public function getLocalPluginVersions()
        {
        }
        public function get_otgs_installed_plugins_by_repository()
        {
        }
        /**
         * @param string|int $slug
         * @param string     $repo
         *
         * @return null|OTGS_Installer_Plugin
         */
        public function get_plugin($slug, $repo = '')
        {
        }
        /**
         * @param string $name
         *
         * @return null|OTGS_Installer_Plugin
         */
        public function get_plugin_by_name($name)
        {
        }
    }
    class WP_Installer_API
    {
        public static function get_product_installer_link($repository_id, $package_id = \false)
        {
        }
        public static function get_product_price($repository_id, $package_id, $product_id, $incl_discount = \false)
        {
        }
        /**
         * Retrieve the preferred translation service.
         *
         * @since 1.6.5
         *
         * @param string $repository_id The repository id (e.g. wpml)
         * @return string|false The translation service id or false if none is set
         */
        public static function get_preferred_ts($repository_id = 'wpml')
        {
        }
        /**
         * Set the preferred translation service.
         *
         * @since 1.6.5
         *
         * @param string $value The translation service id
         * @param string $repository_id The repository id (e.g. wpml)
         */
        public static function set_preferred_ts($value, $repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the referring translation service (if any)
         *
         * @since 1.6.5
         *
         * @param string $repository_id The repository id (e.g. wpml)
         * @return string The translation service id or false
         */
        public static function get_ts_referal($repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the translation services client id for a specific repository (if any)
         *
         * @since 1.7.9
         *
         * @param string $repository_id The repository id (e.g. wpml)
         * @return string|false The client id or false
         */
        public static function get_ts_client_id($repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the site key corresponding to a repository.
         * This is a wrapper of WP_Installer::get_site_key()
         * @see WP_Installer::get_site_key()
         *
         * @since 1.7.9
         *
         * @param string $repository_id The repository id (e.g. wpml)
         * @return string The site key (or false)
         */
        public static function get_site_key($repository_id = 'wpml')
        {
        }
        /**
         * Retrieve the ID of the last user who registered a repository.
         *
         * @since 1.7.16
         *
         * @param string $repository_id The repository id (e.g. wpml)
         * @return int The user id (or zero)
         */
        public static function get_registering_user_id($repository_id = 'wpml')
        {
        }
    }
    class OTGS_Installer_Debug_Info
    {
        public function __construct(\WP_Installer $installer, \OTGS_Products_Config_Db_Storage $products_config_storage)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function add_installer_config_in_debug_information($data)
        {
        }
    }
    class OTGS_Installer_WP_Share_Local_Components_Setting
    {
        const OPTION_KEY = 'otgs_share_local_components';
        public function save(array $repos)
        {
        }
        /**
         * @param string $repo
         *
         * @return bool
         */
        public function is_repo_allowed($repo)
        {
        }
        public function has_setting($repo)
        {
        }
        public static function get_setting($repo)
        {
        }
    }
    interface OTGS_Template_Service
    {
        public function show($model, $template);
    }
    class OTGS_Template_Service_Php_Model
    {
        /**
         * @param array $data
         */
        public function __construct($data = [])
        {
        }
        /**
         * If a property does not exist, the method will create it as an "empty" instance of `Model`
         * so that children properties can be called without throwing errors.
         *
         * @param string $name
         *
         * @return mixed|null
         * @see OTGS_Template_Service_Php_Model::__toString
         */
        public function __get($name)
        {
        }
        /**
         * It ensures that $value is always either an array or a primitive type.
         *
         * @param string $name
         * @param mixed  $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasValue($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isNull($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isEmpty($name)
        {
        }
        /**
         * @return mixed[]|OTGS_Template_Service_Php_Model[]
         */
        public function getAttributes()
        {
        }
        /**
         * This logic allows using the model in a template even when referring to properties which do no exist.
         *
         * Example:
         * `<h1><?php echo esc_html( $model->non_existing_property->title ); ?></h1>` Will output an empty string instead of throwing an error
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
    interface OTGS_Template_Service_Loader
    {
        /**
         * @return OTGS_Template_Service
         */
        public function get_service();
    }
    class OTGS_Template_Service_Factory
    {
        /**
         * @param string $template_dir
         * @return OTGS_Php_Template_Service
         */
        public static function create($template_dir)
        {
        }
    }
    class OTGS_Php_Template_Service implements \OTGS_Template_Service
    {
        const FILE_EXTENSION = '.php';
        /**
         * @param string $template_dir
         */
        public function __construct($template_dir)
        {
        }
        /**
         * @param array $model_params
         * @param string $template
         */
        public function show($model_params, $template)
        {
        }
    }
    class OTGS_Php_Template_Service_Loader implements \OTGS_Template_Service_Loader
    {
        /**
         * @param string $template_dir
         */
        public function __construct($template_dir)
        {
        }
        /**
         * @return OTGS_Php_Template_Service
         */
        public function get_service()
        {
        }
    }
    class OTGS_Installer_Subscription_Factory
    {
        public function create($params = array())
        {
        }
    }
    class OTGS_Installer_Fetch_Subscription_Exception extends \Exception
    {
    }
    class OTGS_Installer_Site_Key_Exception extends \Exception
    {
    }
    class OTGS_Installer_Products_Parsing_Exception extends \Exception
    {
        const RESPONSE_PARSING_ERROR_MESSAGE = 'Error in response parsing from %s.';
        public static function createForResponse($products_url)
        {
        }
    }
    class OTGS_Installer_Loader
    {
        public function __construct(\OTGS_Installer_Factory $installer_factory)
        {
        }
        public function init()
        {
        }
        public function load_actions_after_installer_init()
        {
        }
    }
    class OTGS_Installer_Buy_URL_Hooks
    {
        public function __construct($embedded_at)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function append_installer_source($url)
        {
        }
    }
}
namespace OTGS\Installer {
    class Subscription_Warning_Message
    {
        public function __construct(\WP_Installer $wpInstaller)
        {
        }
        public function get($repositoryId, $subscriptionId)
        {
        }
    }
}
namespace {
    class OTGS_Installer_Autoloader
    {
        public function initialize()
        {
        }
        public function autoload($class_name)
        {
        }
    }
}
namespace Composer\Installers {
    abstract class BaseInstaller
    {
        protected $locations = array();
        protected $composer;
        protected $package;
        protected $io;
        /**
         * Initializes base installer.
         *
         * @param PackageInterface $package
         * @param Composer         $composer
         * @param IOInterface      $io
         */
        public function __construct(\Composer\Package\PackageInterface $package = null, \Composer\Composer $composer = null, \Composer\IO\IOInterface $io = null)
        {
        }
        /**
         * Return the install path based on package type.
         *
         * @param  PackageInterface $package
         * @param  string           $frameworkType
         * @return string
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
        /**
         * For an installer to override to modify the vars per installer.
         *
         * @param  array<string, string> $vars This will normally receive array{name: string, vendor: string, type: string}
         * @return array<string, string>
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * Gets the installer's locations
         *
         * @return array<string, string> map of package types => install path
         */
        public function getLocations()
        {
        }
        /**
         * Replace vars in a path
         *
         * @param  string                $path
         * @param  array<string, string> $vars
         * @return string
         */
        protected function templatePath($path, array $vars = array())
        {
        }
        /**
         * Search through a passed paths array for a custom install path.
         *
         * @param  array  $paths
         * @param  string $name
         * @param  string $type
         * @param  string $vendor = NULL
         * @return string|false
         */
        protected function mapCustomInstallPaths(array $paths, $name, $type, $vendor = NULL)
        {
        }
    }
    /**
     * Plugin/theme installer for majima
     * @author David Neustadt
     */
    class MajimaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Transforms the names
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class AsgardInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'Modules/{$name}/', 'theme' => 'Themes/{$name}/');
        /**
         * Format package name.
         *
         * For package type asgard-module, cut off a trailing '-plugin' if present.
         *
         * For package type asgard-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class WHMCSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('addons' => 'modules/addons/{$vendor}_{$name}/', 'fraud' => 'modules/fraud/{$vendor}_{$name}/', 'gateways' => 'modules/gateways/{$vendor}_{$name}/', 'notifications' => 'modules/notifications/{$vendor}_{$name}/', 'registrars' => 'modules/registrars/{$vendor}_{$name}/', 'reports' => 'modules/reports/{$vendor}_{$name}/', 'security' => 'modules/security/{$vendor}_{$name}/', 'servers' => 'modules/servers/{$vendor}_{$name}/', 'social' => 'modules/social/{$vendor}_{$name}/', 'support' => 'modules/support/{$vendor}_{$name}/', 'templates' => 'templates/{$vendor}_{$name}/', 'includes' => 'includes/{$vendor}_{$name}/');
    }
    class SyliusInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('theme' => 'themes/{$name}/');
    }
    class EliasisInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('component' => 'components/{$name}/', 'module' => 'modules/{$name}/', 'plugin' => 'plugins/{$name}/', 'template' => 'templates/{$name}/');
    }
    class OxidInstaller extends \Composer\Installers\BaseInstaller
    {
        const VENDOR_PATTERN = '/^modules\\/(?P<vendor>.+)\\/.+/';
        protected $locations = array('module' => 'modules/{$name}/', 'theme' => 'application/views/{$name}/', 'out' => 'out/{$name}/');
        /**
         * getInstallPath
         *
         * @param PackageInterface $package
         * @param string $frameworkType
         * @return string
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
        /**
         * prepareVendorDirectory
         *
         * Makes sure there is a vendormetadata.php file inside
         * the vendor folder if there is a vendor folder.
         *
         * @param string $installPath
         * @return void
         */
        protected function prepareVendorDirectory($installPath)
        {
        }
    }
    class ZendInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'library/{$name}/', 'extra' => 'extras/library/{$name}/', 'module' => 'module/{$name}/');
    }
    /**
     * Class DolibarrInstaller
     *
     * @package Composer\Installers
     * @author  Raphaël Doursenaud <rdoursenaud@gpcsolutions.fr>
     */
    class DolibarrInstaller extends \Composer\Installers\BaseInstaller
    {
        //TODO: Add support for scripts and themes
        protected $locations = array('module' => 'htdocs/custom/{$name}/');
    }
    class MauticInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'theme' => 'themes/{$name}/', 'core' => 'app/');
        /**
         * Format package name of mautic-plugins to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    /**
     * Extension installer for TYPO3 CMS
     *
     * @deprecated since 1.0.25, use https://packagist.org/packages/typo3/cms-composer-installers instead
     *
     * @author Sascha Egerer <sascha.egerer@dkd.de>
     */
    class TYPO3CmsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'typo3conf/ext/{$name}/');
    }
    class KnownInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'IdnoPlugins/{$name}/', 'theme' => 'Themes/{$name}/', 'console' => 'ConsolePlugins/{$name}/');
    }
    class SMFInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'Sources/{$name}/', 'theme' => 'Themes/{$name}/');
    }
    class OctoberInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'plugin' => 'plugins/{$vendor}/{$name}/', 'theme' => 'themes/{$vendor}-{$name}/');
        /**
         * Format package name.
         *
         * For package type october-plugin, cut off a trailing '-plugin' if present.
         *
         * For package type october-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class CroogoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'Plugin/{$name}/', 'theme' => 'View/Themed/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class AglInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'More/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class MagentoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('theme' => 'app/design/frontend/{$name}/', 'skin' => 'skin/frontend/default/{$name}/', 'library' => 'lib/{$name}/');
    }
    class LaravelInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'libraries/{$name}/');
    }
    /**
     * An installer to handle TAO extensions.
     */
    class TaoInstaller extends \Composer\Installers\BaseInstaller
    {
        const EXTRA_TAO_EXTENSION_NAME = 'tao-extension-name';
        protected $locations = array('extension' => '{$name}');
        public function inflectPackageVars($vars)
        {
        }
    }
    class HuradInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'theme' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class WolfCMSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'wolf/plugins/{$name}/');
    }
    /**
     * Plugin installer for symfony 1.x
     *
     * @author Jérôme Tamarelle <jerome@tamarelle.net>
     */
    class Symfony1Installer extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PimcoreInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class MakoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'app/packages/{$name}/');
    }
    class SyDESInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'app/modules/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format module name.
         *
         * Strip `sydes-` prefix and a trailing '-theme' or '-module' from package name if present.
         *
         * {@inerhitDoc}
         */
        public function inflectPackageVars($vars)
        {
        }
        public function inflectModuleVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class VgmcpInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('bundle' => 'src/{$vendor}/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * For package type vgmcp-bundle, cut off a trailing '-bundle' if present.
         *
         * For package type vgmcp-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class ExpressionEngineInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array();
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
    }
    class OntoWikiInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'extensions/{$name}/', 'theme' => 'extensions/themes/{$name}/', 'translation' => 'extensions/translations/{$name}/');
        /**
         * Format package name to lower case and remove ".ontowiki" suffix
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ReIndexInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('theme' => 'themes/{$name}/', 'plugin' => 'plugins/{$name}/');
    }
    class MicroweberInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'userfiles/modules/{$install_item_dir}/', 'module-skin' => 'userfiles/modules/{$install_item_dir}/templates/', 'template' => 'userfiles/templates/{$install_item_dir}/', 'element' => 'userfiles/elements/{$install_item_dir}/', 'vendor' => 'vendor/{$install_item_dir}/', 'components' => 'components/{$install_item_dir}/');
        /**
         * Format package name.
         *
         * For package type microweber-module, cut off a trailing '-module' if present
         *
         * For package type microweber-template, cut off a trailing '-template' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectTemplateVars($vars)
        {
        }
        protected function inflectTemplatesVars($vars)
        {
        }
        protected function inflectCoreVars($vars)
        {
        }
        protected function inflectModuleVars($vars)
        {
        }
        protected function inflectModulesVars($vars)
        {
        }
        protected function inflectSkinVars($vars)
        {
        }
        protected function inflectElementVars($vars)
        {
        }
    }
    class ItopInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'extensions/{$name}/');
    }
    class PlentymarketsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => '{$name}/');
        /**
         * Remove hyphen, "plugin" and format to camelcase
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PuppetInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    /**
     * Composer installer for 3rd party Tusk utilities
     * @author Drew Ewing <drew@phenocode.com>
     */
    class TuskInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('task' => '.tusk/tasks/{$name}/', 'command' => '.tusk/commands/{$name}/', 'asset' => 'assets/tusk/{$name}/');
    }
    /**
     * An installer to handle TYPO3 Flow specifics when installing packages.
     */
    class TYPO3FlowInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'Packages/Application/{$name}/', 'framework' => 'Packages/Framework/{$name}/', 'plugin' => 'Packages/Plugins/{$name}/', 'site' => 'Packages/Sites/{$name}/', 'boilerplate' => 'Packages/Boilerplates/{$name}/', 'build' => 'Build/{$name}/');
        /**
         * Modify the package name to be a TYPO3 Flow style key.
         *
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ProcessWireInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'site/modules/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class UserFrostingInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('sprinkle' => 'app/sprinkles/{$name}/');
    }
    class RedaxoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('addon' => 'redaxo/include/addons/{$name}/', 'bestyle-plugin' => 'redaxo/include/addons/be_style/plugins/{$name}/');
    }
    class MiaoxingInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
    }
    /**
     * Installer for Craft Plugins
     */
    class CraftInstaller extends \Composer\Installers\BaseInstaller
    {
        const NAME_PREFIX = 'craft';
        const NAME_SUFFIX = 'plugin';
        protected $locations = array('plugin' => 'craft/plugins/{$name}/');
        /**
         * Strip `craft-` prefix and/or `-plugin` suffix from package names
         *
         * @param  array $vars
         *
         * @return array
         */
        public final function inflectPackageVars($vars)
        {
        }
    }
    class AttogramInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    class MODULEWorkInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    /**
     * An installer to handle MODX Evolution specifics when installing packages.
     */
    class MODXEvoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('snippet' => 'assets/snippets/{$name}/', 'plugin' => 'assets/plugins/{$name}/', 'module' => 'assets/modules/{$name}/', 'template' => 'assets/templates/{$name}/', 'lib' => 'assets/lib/{$name}/');
    }
    class FuelInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'fuel/app/modules/{$name}/', 'package' => 'fuel/packages/{$name}/', 'theme' => 'fuel/app/themes/{$name}/');
    }
    class KodiCMSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'cms/plugins/{$name}/', 'media' => 'cms/media/vendor/{$name}/');
    }
    class YawikInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'module/{$name}/');
        /**
         * Format package name to CamelCase
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class CodeIgniterInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'application/libraries/{$name}/', 'third-party' => 'application/third_party/{$name}/', 'module' => 'application/modules/{$name}/');
    }
    class PhiftyInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('bundle' => 'bundles/{$name}/', 'library' => 'libraries/{$name}/', 'framework' => 'frameworks/{$name}/');
    }
    class Installer extends \Composer\Installer\LibraryInstaller
    {
        /**
         * Installer constructor.
         *
         * Disables installers specified in main composer extra installer-disable
         * list
         *
         * @param IOInterface          $io
         * @param Composer             $composer
         * @param string               $type
         * @param Filesystem|null      $filesystem
         * @param BinaryInstaller|null $binaryInstaller
         */
        public function __construct(\Composer\IO\IOInterface $io, \Composer\Composer $composer, $type = 'library', \Composer\Util\Filesystem $filesystem = null, \Composer\Installer\BinaryInstaller $binaryInstaller = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package)
        {
        }
        public function uninstall(\Composer\Repository\InstalledRepositoryInterface $repo, \Composer\Package\PackageInterface $package)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function supports($packageType)
        {
        }
        /**
         * Finds a supported framework type if it exists and returns it
         *
         * @param  string       $type
         * @return string|false
         */
        protected function findFrameworkType($type)
        {
        }
        /**
         * Get the second part of the regular expression to check for support of a
         * package type
         *
         * @param  string $frameworkType
         * @return string
         */
        protected function getLocationPattern($frameworkType)
        {
        }
        /**
         * Look for installers set to be disabled in composer's extra config and
         * remove them from the list of supported installers.
         *
         * Globals:
         *  - true, "all", and "*" - disable all installers.
         *  - false - enable all installers (useful with
         *     wikimedia/composer-merge-plugin or similar)
         *
         * @return void
         */
        protected function removeDisabledInstallers()
        {
        }
    }
    class BonefishInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'Packages/{$vendor}/{$name}/');
    }
    class SiteDirectInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$vendor}/{$name}/', 'plugin' => 'plugins/{$vendor}/{$name}/');
        public function inflectPackageVars($vars)
        {
        }
        protected function parseVars($vars)
        {
        }
    }
    class AnnotateCmsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'addons/modules/{$name}/', 'component' => 'addons/components/{$name}/', 'service' => 'addons/services/{$name}/');
    }
    class ClanCatsFrameworkInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('ship' => 'CCF/orbit/{$name}/', 'theme' => 'CCF/app/themes/{$name}/');
    }
    class DokuWikiInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'lib/plugins/{$name}/', 'template' => 'lib/tpl/{$name}/');
        /**
         * Format package name.
         *
         * For package type dokuwiki-plugin, cut off a trailing '-plugin', 
         * or leading dokuwiki_ if present.
         * 
         * For package type dokuwiki-template, cut off a trailing '-template' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectTemplateVars($vars)
        {
        }
    }
    class PPIInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    class CakePHPInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'Plugin/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * Change the default plugin location when cakephp >= 3.0
         */
        public function getLocations()
        {
        }
        /**
         * Check if CakePHP version matches against a version
         *
         * @param string $matcher
         * @param string $version
         * @return bool
         * @phpstan-param Constraint::STR_OP_* $matcher
         */
        protected function matchesCakeVersion($matcher, $version)
        {
        }
    }
    class MediaWikiInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('core' => 'core/', 'extension' => 'extensions/{$name}/', 'skin' => 'skins/{$name}/');
        /**
         * Format package name.
         *
         * For package type mediawiki-extension, cut off a trailing '-extension' if present and transform
         * to CamelCase keeping existing uppercase chars.
         *
         * For package type mediawiki-skin, cut off a trailing '-skin' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectExtensionVars($vars)
        {
        }
        protected function inflectSkinVars($vars)
        {
        }
    }
    class DecibelInstaller extends \Composer\Installers\BaseInstaller
    {
        /** @var array */
        protected $locations = array('app' => 'app/{$name}/');
    }
    class KohanaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    class JoomlaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('component' => 'components/{$name}/', 'module' => 'modules/{$name}/', 'template' => 'templates/{$name}/', 'plugin' => 'plugins/{$name}/', 'library' => 'libraries/{$name}/');
        // TODO: Add inflector for mod_ and com_ names
    }
    class PxcmsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'app/Modules/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * For package type pxcms-module, cut off a trailing '-plugin' if present.
         *
         * return string
         */
        protected function inflectModuleVars($vars)
        {
        }
        /**
         * For package type pxcms-module, cut off a trailing '-plugin' if present.
         *
         * return string
         */
        protected function inflectThemeVars($vars)
        {
        }
    }
    class OsclassInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'oc-content/plugins/{$name}/', 'theme' => 'oc-content/themes/{$name}/', 'language' => 'oc-content/languages/{$name}/');
    }
    class PortoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('container' => 'app/Containers/{$name}/');
    }
    class StarbugInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'theme' => 'themes/{$name}/', 'custom-module' => 'app/modules/{$name}/', 'custom-theme' => 'app/themes/{$name}/');
    }
    class AimeosInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'ext/{$name}/');
    }
    class TastyIgniterInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'extensions/{$vendor}/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * Cut off leading 'ti-ext-' or 'ti-theme-' if present.
         * Strip vendor name of characters that is not alphanumeric or an underscore
         *
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PrestashopInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'theme' => 'themes/{$name}/');
    }
    class KirbyInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'site/plugins/{$name}/', 'field' => 'site/fields/{$name}/', 'tag' => 'site/tags/{$name}/');
    }
    class Plugin implements \Composer\Plugin\PluginInterface
    {
        public function activate(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
        public function deactivate(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
        public function uninstall(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
    }
    class CiviCrmInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('ext' => 'ext/{$name}/');
    }
    class DframeInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$vendor}/{$name}/');
    }
    class RoundcubeInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Lowercase name and changes the name to a underscores
         *
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class GravInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'user/plugins/{$name}/', 'theme' => 'user/themes/{$name}/');
        /**
         * Format package name
         *
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class WinterInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'plugin' => 'plugins/{$vendor}/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * For package type winter-plugin, cut off a trailing '-plugin' if present.
         *
         * For package type winter-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectModuleVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class EzPlatformInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('meta-assets' => 'web/assets/ezplatform/', 'assets' => 'web/assets/ezplatform/{$name}/');
    }
    class MantisBTInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    /**
     *
     * Installer for kanboard plugins
     *
     * kanboard.net
     *
     * Class KanboardInstaller
     * @package Composer\Installers
     */
    class KanboardInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
    }
    /**
     * Class PiwikInstaller
     *
     * @package Composer\Installers
     */
    class PiwikInstaller extends \Composer\Installers\BaseInstaller
    {
        /**
         * @var array
         */
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ZikulaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$vendor}-{$name}/', 'theme' => 'themes/{$vendor}-{$name}/');
    }
    class FuelphpInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('component' => 'components/{$name}/');
    }
    class ChefInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('cookbook' => 'Chef/{$vendor}/{$name}/', 'role' => 'Chef/roles/{$name}/');
    }
    class PantheonInstaller extends \Composer\Installers\BaseInstaller
    {
        /** @var array<string, string> */
        protected $locations = array('script' => 'web/private/scripts/quicksilver/{$name}', 'module' => 'web/private/scripts/quicksilver/{$name}');
    }
    /**
     * Installer for Bitrix Framework. Supported types of extensions:
     * - `bitrix-d7-module` — copy the module to directory `bitrix/modules/<vendor>.<name>`.
     * - `bitrix-d7-component` — copy the component to directory `bitrix/components/<vendor>/<name>`.
     * - `bitrix-d7-template` — copy the template to directory `bitrix/templates/<vendor>_<name>`.
     * 
     * You can set custom path to directory with Bitrix kernel in `composer.json`:
     * 
     * ```json
     * {
     *      "extra": {
     *          "bitrix-dir": "s1/bitrix"
     *      }
     * }
     * ```
     *
     * @author Nik Samokhvalov <nik@samokhvalov.info>
     * @author Denis Kulichkin <onexhovia@gmail.com>
     */
    class BitrixInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array(
            'module' => '{$bitrix_dir}/modules/{$name}/',
            // deprecated, remove on the major release (Backward compatibility will be broken)
            'component' => '{$bitrix_dir}/components/{$name}/',
            // deprecated, remove on the major release (Backward compatibility will be broken)
            'theme' => '{$bitrix_dir}/templates/{$name}/',
            // deprecated, remove on the major release (Backward compatibility will be broken)
            'd7-module' => '{$bitrix_dir}/modules/{$vendor}.{$name}/',
            'd7-component' => '{$bitrix_dir}/components/{$vendor}/{$name}/',
            'd7-template' => '{$bitrix_dir}/templates/{$vendor}_{$name}/',
        );
        /**
         * {@inheritdoc}
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function templatePath($path, array $vars = array())
        {
        }
        /**
         * Duplicates search packages.
         *
         * @param string $path
         * @param array $vars
         */
        protected function checkDuplicates($path, array $vars = array())
        {
        }
    }
    class LavaLiteInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'packages/{$vendor}/{$name}/', 'theme' => 'public/themes/{$name}/');
    }
    class Concrete5Installer extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('core' => 'concrete/', 'block' => 'application/blocks/{$name}/', 'package' => 'packages/{$name}/', 'theme' => 'application/themes/{$name}/', 'update' => 'updates/{$name}/');
    }
    class MoodleInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('mod' => 'mod/{$name}/', 'admin_report' => 'admin/report/{$name}/', 'atto' => 'lib/editor/atto/plugins/{$name}/', 'tool' => 'admin/tool/{$name}/', 'assignment' => 'mod/assignment/type/{$name}/', 'assignsubmission' => 'mod/assign/submission/{$name}/', 'assignfeedback' => 'mod/assign/feedback/{$name}/', 'auth' => 'auth/{$name}/', 'availability' => 'availability/condition/{$name}/', 'block' => 'blocks/{$name}/', 'booktool' => 'mod/book/tool/{$name}/', 'cachestore' => 'cache/stores/{$name}/', 'cachelock' => 'cache/locks/{$name}/', 'calendartype' => 'calendar/type/{$name}/', 'fileconverter' => 'files/converter/{$name}/', 'format' => 'course/format/{$name}/', 'coursereport' => 'course/report/{$name}/', 'customcertelement' => 'mod/customcert/element/{$name}/', 'datafield' => 'mod/data/field/{$name}/', 'datapreset' => 'mod/data/preset/{$name}/', 'editor' => 'lib/editor/{$name}/', 'enrol' => 'enrol/{$name}/', 'filter' => 'filter/{$name}/', 'gradeexport' => 'grade/export/{$name}/', 'gradeimport' => 'grade/import/{$name}/', 'gradereport' => 'grade/report/{$name}/', 'gradingform' => 'grade/grading/form/{$name}/', 'local' => 'local/{$name}/', 'logstore' => 'admin/tool/log/store/{$name}/', 'ltisource' => 'mod/lti/source/{$name}/', 'ltiservice' => 'mod/lti/service/{$name}/', 'message' => 'message/output/{$name}/', 'mnetservice' => 'mnet/service/{$name}/', 'plagiarism' => 'plagiarism/{$name}/', 'portfolio' => 'portfolio/{$name}/', 'qbehaviour' => 'question/behaviour/{$name}/', 'qformat' => 'question/format/{$name}/', 'qtype' => 'question/type/{$name}/', 'quizaccess' => 'mod/quiz/accessrule/{$name}/', 'quiz' => 'mod/quiz/report/{$name}/', 'report' => 'report/{$name}/', 'repository' => 'repository/{$name}/', 'scormreport' => 'mod/scorm/report/{$name}/', 'search' => 'search/engine/{$name}/', 'theme' => 'theme/{$name}/', 'tinymce' => 'lib/editor/tinymce/plugins/{$name}/', 'profilefield' => 'user/profile/field/{$name}/', 'webservice' => 'webservice/{$name}/', 'workshopallocation' => 'mod/workshop/allocation/{$name}/', 'workshopeval' => 'mod/workshop/eval/{$name}/', 'workshopform' => 'mod/workshop/form/{$name}/');
    }
    class ImageCMSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('template' => 'templates/{$name}/', 'module' => 'application/modules/{$name}/', 'library' => 'application/libraries/{$name}/');
    }
    /**
     * An installer to handle MODX specifics when installing packages.
     */
    class ModxInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extra' => 'core/packages/{$name}/');
    }
    class VanillaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'theme' => 'themes/{$name}/');
    }
    class TheliaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'local/modules/{$name}/', 'frontoffice-template' => 'templates/frontOffice/{$name}/', 'backoffice-template' => 'templates/backOffice/{$name}/', 'email-template' => 'templates/email/{$name}/');
    }
    class DrupalInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('core' => 'core/', 'module' => 'modules/{$name}/', 'theme' => 'themes/{$name}/', 'library' => 'libraries/{$name}/', 'profile' => 'profiles/{$name}/', 'database-driver' => 'drivers/lib/Drupal/Driver/Database/{$name}/', 'drush' => 'drush/{$name}/', 'custom-theme' => 'themes/custom/{$name}/', 'custom-module' => 'modules/custom/{$name}/', 'custom-profile' => 'profiles/custom/{$name}/', 'drupal-multisite' => 'sites/{$name}/', 'console' => 'console/{$name}/', 'console-language' => 'console/language/{$name}/', 'config' => 'config/sync/');
    }
    class WordPressInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'wp-content/plugins/{$name}/', 'theme' => 'wp-content/themes/{$name}/', 'muplugin' => 'wp-content/mu-plugins/{$name}/', 'dropin' => 'wp-content/{$name}/');
    }
    class CockpitInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'cockpit/modules/addons/{$name}/');
        /**
         * Format module name.
         *
         * Strip `module-` prefix from package name.
         *
         * {@inheritDoc}
         */
        public function inflectPackageVars($vars)
        {
        }
        public function inflectModuleVars($vars)
        {
        }
    }
    class SilverStripeInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => '{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Return the install path based on package type.
         *
         * Relies on built-in BaseInstaller behaviour with one exception: silverstripe/framework
         * must be installed to 'sapphire' and not 'framework' if the version is <3.0.0
         *
         * @param  PackageInterface $package
         * @param  string           $frameworkType
         * @return string
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
    }
    /**
     * Plugin/theme installer for shopware
     * @author Benjamin Boit
     */
    class ShopwareInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('backend-plugin' => 'engine/Shopware/Plugins/Local/Backend/{$name}/', 'core-plugin' => 'engine/Shopware/Plugins/Local/Core/{$name}/', 'frontend-plugin' => 'engine/Shopware/Plugins/Local/Frontend/{$name}/', 'theme' => 'templates/{$name}/', 'plugin' => 'custom/plugins/{$name}/', 'frontend-theme' => 'themes/Frontend/{$name}/');
        /**
         * Transforms the names
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PhpBBInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'ext/{$vendor}/{$name}/', 'language' => 'language/{$name}/', 'style' => 'styles/{$name}/');
    }
    class LanManagementSystemInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'template' => 'templates/{$name}/', 'document-template' => 'documents/templates/{$name}/', 'userpanel-module' => 'userpanel/modules/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ElggInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'mod/{$name}/');
    }
    class Redaxo5Installer extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('addon' => 'redaxo/src/addons/{$name}/', 'bestyle-plugin' => 'redaxo/src/addons/be_style/plugins/{$name}/');
    }
    class RadPHPInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('bundle' => 'src/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class LithiumInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'libraries/{$name}/', 'source' => 'libraries/_source/{$name}/');
    }
    class MayaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
        /**
         * Format package name.
         *
         * For package type maya-module, cut off a trailing '-module' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectModuleVars($vars)
        {
        }
    }
}
namespace {
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInitd9fd793efa38e09e52d7e938934f5421
    {
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInitd9fd793efa38e09e52d7e938934f5421
    {
        public static $files = array('b45b351e6b6f7487d819961fef2fda77' => __DIR__ . '/..' . '/jakeasmith/http_build_url/src/http_build_url.php', '8795757013aa65eeef54eb9cf7c285d4' => __DIR__ . '/../..' . '/inc/functions-pure.php');
        public static $prefixLengthsPsr4 = array('C' => array('Composer\\Installers\\' => 20));
        public static $prefixDirsPsr4 = array('Composer\\Installers\\' => array(0 => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers'));
        public static $classMap = array('Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php', 'WCML\\API\\VendorAddon\\Hooks' => __DIR__ . '/../..' . '/classes/API/VendorAddon/Hooks.php', 'WCML\\AdminDashboard\\Hooks' => __DIR__ . '/../..' . '/classes/AdminDashboard/Hooks.php', 'WCML\\AdminNotices\\CachePlugins' => __DIR__ . '/../..' . '/classes/AdminNotices/CachePlugins.php', 'WCML\\AdminNotices\\ExportImport' => __DIR__ . '/../..' . '/classes/AdminNotices/ExportImport.php', 'WCML\\AdminNotices\\MultiCurrencyMissing' => __DIR__ . '/../..' . '/classes/AdminNotices/MultiCurrencyMissing.php', 'WCML\\AdminNotices\\RestrictedScreens' => __DIR__ . '/../..' . '/classes/AdminNotices/RestrictedScreens.php', 'WCML\\AdminNotices\\Review' => __DIR__ . '/../..' . '/classes/AdminNotices/Review.php', 'WCML\\AdminNotices\\WizardNotice' => __DIR__ . '/../..' . '/classes/AdminNotices/WizardNotice.php', 'WCML\\AdminTexts\\Hooks' => __DIR__ . '/../..' . '/classes/AdminTexts/Hooks.php', 'WCML\\Attributes\\LookupFilters' => __DIR__ . '/../..' . '/classes/Attributes/LookupFilters.php', 'WCML\\Attributes\\LookupFiltersFactory' => __DIR__ . '/../..' . '/classes/Attributes/LookupFiltersFactory.php', 'WCML\\Attributes\\LookupTable' => __DIR__ . '/../..' . '/classes/Attributes/LookupTable.php', 'WCML\\Attributes\\LookupTableFactory' => __DIR__ . '/../..' . '/classes/Attributes/LookupTableFactory.php', 'WCML\\Block\\Convert\\ConverterProvider' => __DIR__ . '/../..' . '/classes/Block/Convert/ConverterProvider.php', 'WCML\\Block\\Convert\\Converter\\ProductsByAttributes' => __DIR__ . '/../..' . '/classes/Block/Convert/Converter/ProductsByAttributes.php', 'WCML\\Block\\Convert\\Hooks' => __DIR__ . '/../..' . '/classes/Block/Convert/Hooks.php', 'WCML\\CLI\\Hooks' => __DIR__ . '/../..' . '/classes/CLI/Hooks.php', 'WCML\\COT\\Helper' => __DIR__ . '/../..' . '/classes/COT/Helper.php', 'WCML\\COT\\Hooks' => __DIR__ . '/../..' . '/classes/COT/Hooks.php', 'WCML\\Compatibility\\AdventureTours\\Factory' => __DIR__ . '/../..' . '/compatibility/AdventureTours/Factory.php', 'WCML\\Compatibility\\Aurum\\Factory' => __DIR__ . '/../..' . '/compatibility/Aurum/Factory.php', 'WCML\\Compatibility\\Aurum\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/Aurum/MulticurrencyHooks.php', 'WCML\\Compatibility\\ComponentFactory' => __DIR__ . '/../..' . '/compatibility/ComponentFactory.php', 'WCML\\Compatibility\\Flatsome\\Factory' => __DIR__ . '/../..' . '/compatibility/Flatsome/Factory.php', 'WCML\\Compatibility\\GravityForms\\Factory' => __DIR__ . '/../..' . '/compatibility/GravityForms/Factory.php', 'WCML\\Compatibility\\GravityForms\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/GravityForms/MulticurrencyHooks.php', 'WCML\\Compatibility\\KlarnaPayments\\Factory' => __DIR__ . '/../..' . '/compatibility/KlarnaPayments/Factory.php', 'WCML\\Compatibility\\KlarnaPayments\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/KlarnaPayments/MulticurrencyHooks.php', 'WCML\\Compatibility\\MaxStorePro\\Factory' => __DIR__ . '/../..' . '/compatibility/MaxStorePro/Factory.php', 'WCML\\Compatibility\\PerProductShipping\\Factory' => __DIR__ . '/../..' . '/compatibility/PerProductShipping/Factory.php', 'WCML\\Compatibility\\Relevanssi\\Factory' => __DIR__ . '/../..' . '/compatibility/Relevanssi/Factory.php', 'WCML\\Compatibility\\Sensei\\Factory' => __DIR__ . '/../..' . '/compatibility/Sensei/Factory.php', 'WCML\\Compatibility\\TableRateShipping\\Factory' => __DIR__ . '/../..' . '/compatibility/TableRateShipping/Factory.php', 'WCML\\Compatibility\\TableRateShipping\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/TableRateShipping/MulticurrencyHooks.php', 'WCML\\Compatibility\\TheEventsCalendar\\Factory' => __DIR__ . '/../..' . '/compatibility/TheEventsCalendar/Factory.php', 'WCML\\Compatibility\\TheEventsCalendar\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/TheEventsCalendar/MulticurrencyHooks.php', 'WCML\\Compatibility\\TmExtraProductOptions\\Factory' => __DIR__ . '/../..' . '/compatibility/TmExtraProductOptions/Factory.php', 'WCML\\Compatibility\\WcAjaxLayeredNav\\Factory' => __DIR__ . '/../..' . '/compatibility/WcAjaxLayeredNav/Factory.php', 'WCML\\Compatibility\\WcBookings\\Emails' => __DIR__ . '/../..' . '/compatibility/WcBookings/Emails.php', 'WCML\\Compatibility\\WcBookings\\Factory' => __DIR__ . '/../..' . '/compatibility/WcBookings/Factory.php', 'WCML\\Compatibility\\WcBookings\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WcBookings/MulticurrencyHooks.php', 'WCML\\Compatibility\\WcBookings\\Prices' => __DIR__ . '/../..' . '/compatibility/WcBookings/Prices.php', 'WCML\\Compatibility\\WcBookings\\SharedHooks' => __DIR__ . '/../..' . '/compatibility/WcBookings/SharedHooks.php', 'WCML\\Compatibility\\WcBookings\\Templates\\MyBookings' => __DIR__ . '/../..' . '/compatibility/WcBookings/Templates/MyBookings.php', 'WCML\\Compatibility\\WcBulkStockManagement\\Factory' => __DIR__ . '/../..' . '/compatibility/WcBulkStockManagement/Factory.php', 'WCML\\Compatibility\\WcCheckoutAddons\\Factory' => __DIR__ . '/../..' . '/compatibility/WcCheckoutAddons/Factory.php', 'WCML\\Compatibility\\WcCheckoutAddons\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WcCheckoutAddons/MulticurrencyHooks.php', 'WCML\\Compatibility\\WcCheckoutAddons\\OptionIterator' => __DIR__ . '/../..' . '/compatibility/WcCheckoutAddons/OptionIterator.php', 'WCML\\Compatibility\\WcCheckoutFieldEditor\\Factory' => __DIR__ . '/../..' . '/compatibility/WcCheckoutFieldEditor/Factory.php', 'WCML\\Compatibility\\WcCompositeProducts\\Factory' => __DIR__ . '/../..' . '/compatibility/WcCompositeProducts/Factory.php', 'WCML\\Compatibility\\WcCompositeProducts\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WcCompositeProducts/MulticurrencyHooks.php', 'WCML\\Compatibility\\WcDynamicPricing\\Factory' => __DIR__ . '/../..' . '/compatibility/WcDynamicPricing/Factory.php', 'WCML\\Compatibility\\WcDynamicPricing\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WcDynamicPricing/MulticurrencyHooks.php', 'WCML\\Compatibility\\WcExporter\\Factory' => __DIR__ . '/../..' . '/compatibility/WcExporter/Factory.php', 'WCML\\Compatibility\\WcMemberships\\Factory' => __DIR__ . '/../..' . '/compatibility/WcMemberships/Factory.php', 'WCML\\Compatibility\\WcMixAndMatch\\Factory' => __DIR__ . '/../..' . '/compatibility/WcMixAndMatch/Factory.php', 'WCML\\Compatibility\\WcMixAndMatch\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WcMixAndMatch/MulticurrencyHooks.php', 'WCML\\Compatibility\\WcNameYourPrice\\Factory' => __DIR__ . '/../..' . '/compatibility/WcNameYourPrice/Factory.php', 'WCML\\Compatibility\\WcNameYourPrice\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WcNameYourPrice/MulticurrencyHooks.php', 'WCML\\Compatibility\\WcOrderStatusManager\\Factory' => __DIR__ . '/../..' . '/compatibility/WcOrderStatusManager/Factory.php', 'WCML\\Compatibility\\WcPip\\Factory' => __DIR__ . '/../..' . '/compatibility/WcPip/Factory.php', 'WCML\\Compatibility\\WcPip\\Helper' => __DIR__ . '/../..' . '/compatibility/WcPip/Helper.php', 'WCML\\Compatibility\\WcPip\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WcPip/MulticurrencyHooks.php', 'WCML\\Compatibility\\WcProductAddons\\Factory' => __DIR__ . '/../..' . '/compatibility/WcProductAddons/Factory.php', 'WCML\\Compatibility\\WcProductAddons\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WcProductAddons/MulticurrencyHooks.php', 'WCML\\Compatibility\\WcProductAddons\\SharedHooks' => __DIR__ . '/../..' . '/compatibility/WcProductAddons/SharedHooks.php', 'WCML\\Compatibility\\WcProductBundles\\Factory' => __DIR__ . '/../..' . '/compatibility/WcProductBundles/Factory.php', 'WCML\\Compatibility\\WcProductBundles\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WcProductBundles/MulticurrencyHooks.php', 'WCML\\Compatibility\\WcProductTypeColumn\\Factory' => __DIR__ . '/../..' . '/compatibility/WcProductTypeColumn/Factory.php', 'WCML\\Compatibility\\WcShowSingleVariations\\Factory' => __DIR__ . '/../..' . '/compatibility/WcShowSingleVariations/Factory.php', 'WCML\\Compatibility\\WcSubscriptions\\Factory' => __DIR__ . '/../..' . '/compatibility/WcSubscriptions/Factory.php', 'WCML\\Compatibility\\WcSubscriptions\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WcSubscriptions/MulticurrencyHooks.php', 'WCML\\Compatibility\\WcSubscriptions\\SharedHooks' => __DIR__ . '/../..' . '/compatibility/WcSubscriptions/SharedHooks.php', 'WCML\\Compatibility\\WcSwatches\\Factory' => __DIR__ . '/../..' . '/compatibility/WcSwatches/Factory.php', 'WCML\\Compatibility\\WcTabManager\\Factory' => __DIR__ . '/../..' . '/compatibility/WcTabManager/Factory.php', 'WCML\\Compatibility\\WooVariationsTable\\Factory' => __DIR__ . '/../..' . '/compatibility/WooVariationsTable/Factory.php', 'WCML\\Compatibility\\WoobeBulkEditor\\Factory' => __DIR__ . '/../..' . '/compatibility/WoobeBulkEditor/Factory.php', 'WCML\\Compatibility\\WoofWcProductFilter\\Factory' => __DIR__ . '/../..' . '/compatibility/WoofWcProductFilter/Factory.php', 'WCML\\Compatibility\\WoofWcProductFilter\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WoofWcProductFilter/MulticurrencyHooks.php', 'WCML\\Compatibility\\WpBakery\\Factory' => __DIR__ . '/../..' . '/compatibility/WpBakery/Factory.php', 'WCML\\Compatibility\\WpFastestCache\\Factory' => __DIR__ . '/../..' . '/compatibility/WpFastestCache/Factory.php', 'WCML\\Compatibility\\WpFastestCache\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WpFastestCache/MulticurrencyHooks.php', 'WCML\\Compatibility\\WpSeo\\Factory' => __DIR__ . '/../..' . '/compatibility/WpSeo/Factory.php', 'WCML\\Compatibility\\WpSuperCache\\Factory' => __DIR__ . '/../..' . '/compatibility/WpSuperCache/Factory.php', 'WCML\\Compatibility\\WpSuperCache\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/WpSuperCache/MulticurrencyHooks.php', 'WCML\\Compatibility\\YikesCustomProductTabs\\Factory' => __DIR__ . '/../..' . '/compatibility/YikesCustomProductTabs/Factory.php', 'WCML\\Compatibility\\YithWcQuickView\\Factory' => __DIR__ . '/../..' . '/compatibility/YithWcQuickView/Factory.php', 'WCML\\Compatibility\\YithWcQuickView\\MulticurrencyHooks' => __DIR__ . '/../..' . '/compatibility/YithWcQuickView/MulticurrencyHooks.php', 'WCML\\Container\\Config' => __DIR__ . '/../..' . '/classes/Container/Config.php', 'WCML\\Coupons\\Helper' => __DIR__ . '/../..' . '/classes/Coupons/Helper.php', 'WCML\\DisplayAsTranslated\\FrontendHooksFactory' => __DIR__ . '/../..' . '/classes/DisplayAsTranslated/FrontendHooksFactory.php', 'WCML\\DisplayAsTranslated\\ProductCatHooks' => __DIR__ . '/../..' . '/classes/DisplayAsTranslated/ProductCatHooks.php', 'WCML\\Email\\Settings\\Hooks' => __DIR__ . '/../..' . '/classes/Email/Settings/Hooks.php', 'WCML\\Exporter\\AllLanguagesHooks' => __DIR__ . '/../..' . '/classes/Exporter/AllLanguagesHooks.php', 'WCML\\Exporter\\AttributeHeadersHooks' => __DIR__ . '/../..' . '/classes/Exporter/AttributeHeadersHooks.php', 'WCML\\HomeScreen\\Factory' => __DIR__ . '/../..' . '/classes/HomeScreen/Factory.php', 'WCML\\HomeScreen\\Hooks' => __DIR__ . '/../..' . '/classes/HomeScreen/Hooks.php', 'WCML\\Importer\\Products' => __DIR__ . '/../..' . '/classes/Importer/Products.php', 'WCML\\MO\\Hooks' => __DIR__ . '/../..' . '/classes/MO/Hooks.php', 'WCML\\Media\\Wrapper\\Factory' => __DIR__ . '/../..' . '/classes/media/Wrapper/Factory.php', 'WCML\\Media\\Wrapper\\IMedia' => __DIR__ . '/../..' . '/classes/media/Wrapper/IMedia.php', 'WCML\\Media\\Wrapper\\NonTranslatable' => __DIR__ . '/../..' . '/classes/media/Wrapper/NonTranslatable.php', 'WCML\\Media\\Wrapper\\Translatable' => __DIR__ . '/../..' . '/classes/media/Wrapper/Translatable.php', 'WCML\\MultiCurrency\\ExchangeRateServices\\ApiLayerService' => __DIR__ . '/../..' . '/classes/multi-currency/exchange-rate-services/ApiLayerService.php', 'WCML\\MultiCurrency\\ExchangeRateServices\\CurrencyLayer' => __DIR__ . '/../..' . '/classes/multi-currency/exchange-rate-services/CurrencyLayer.php', 'WCML\\MultiCurrency\\ExchangeRateServices\\ExchangeRatesApi' => __DIR__ . '/../..' . '/classes/multi-currency/exchange-rate-services/ExchangeRatesApi.php', 'WCML\\MultiCurrency\\ExchangeRateServices\\Fixerio' => __DIR__ . '/../..' . '/classes/multi-currency/exchange-rate-services/Fixerio.php', 'WCML\\MultiCurrency\\ExchangeRateServices\\OpenExchangeRates' => __DIR__ . '/../..' . '/classes/multi-currency/exchange-rate-services/OpenExchangeRates.php', 'WCML\\MultiCurrency\\ExchangeRateServices\\Service' => __DIR__ . '/../..' . '/classes/multi-currency/exchange-rate-services/Service.php', 'WCML\\MultiCurrency\\Geolocation' => __DIR__ . '/../..' . '/classes/multi-currency/geolocation/Geolocation.php', 'WCML\\MultiCurrency\\GeolocationBackendHooks' => __DIR__ . '/../..' . '/classes/multi-currency/geolocation/GeolocationBackendHooks.php', 'WCML\\MultiCurrency\\GeolocationFrontendHooks' => __DIR__ . '/../..' . '/classes/multi-currency/geolocation/GeolocationFrontendHooks.php', 'WCML\\MultiCurrency\\Resolver\\ComposedResolver' => __DIR__ . '/../..' . '/classes/Multicurrency/Resolver/ComposedResolver.php', 'WCML\\MultiCurrency\\Resolver\\Factory' => __DIR__ . '/../..' . '/classes/Multicurrency/Resolver/Factory.php', 'WCML\\MultiCurrency\\Resolver\\HelperByLanguage' => __DIR__ . '/../..' . '/classes/Multicurrency/Resolver/HelperByLanguage.php', 'WCML\\MultiCurrency\\Resolver\\HelperByLocation' => __DIR__ . '/../..' . '/classes/Multicurrency/Resolver/HelperByLocation.php', 'WCML\\MultiCurrency\\Resolver\\Resolver' => __DIR__ . '/../..' . '/classes/Multicurrency/Resolver/Resolver.php', 'WCML\\MultiCurrency\\Resolver\\ResolverForContext' => __DIR__ . '/../..' . '/classes/Multicurrency/Resolver/ResolverForContext.php', 'WCML\\MultiCurrency\\Resolver\\ResolverForDefault' => __DIR__ . '/../..' . '/classes/Multicurrency/Resolver/ResolverForDefault.php', 'WCML\\MultiCurrency\\Resolver\\ResolverForModeLanguage' => __DIR__ . '/../..' . '/classes/Multicurrency/Resolver/ResolverForModeLanguage.php', 'WCML\\MultiCurrency\\Resolver\\ResolverForModeLocation' => __DIR__ . '/../..' . '/classes/Multicurrency/Resolver/ResolverForModeLocation.php', 'WCML\\MultiCurrency\\Settings' => __DIR__ . '/../..' . '/classes/Multicurrency/Settings.php', 'WCML\\Multicurrency\\Analytics\\Export' => __DIR__ . '/../..' . '/classes/Multicurrency/Analytics/Export.php', 'WCML\\Multicurrency\\Analytics\\ExportHPOS' => __DIR__ . '/../..' . '/classes/Multicurrency/Analytics/ExportHPOS.php', 'WCML\\Multicurrency\\Analytics\\ExportLegacy' => __DIR__ . '/../..' . '/classes/Multicurrency/Analytics/ExportLegacy.php', 'WCML\\Multicurrency\\Analytics\\Factory' => __DIR__ . '/../..' . '/classes/Multicurrency/Analytics/Factory.php', 'WCML\\Multicurrency\\Analytics\\Hooks' => __DIR__ . '/../..' . '/classes/Multicurrency/Analytics/Hooks.php', 'WCML\\Multicurrency\\Shipping\\AdminHooks' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/AdminHooks.php', 'WCML\\Multicurrency\\Shipping\\DefaultConversion' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/DefaultConversion.php', 'WCML\\Multicurrency\\Shipping\\FlatRateShipping' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/FlatRateShipping.php', 'WCML\\Multicurrency\\Shipping\\FreeShipping' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/FreeShipping.php', 'WCML\\Multicurrency\\Shipping\\FrontEndHooks' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/FrontEndHooks.php', 'WCML\\Multicurrency\\Shipping\\LocalPickup' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/LocalPickup.php', 'WCML\\Multicurrency\\Shipping\\ShippingClasses' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/ShippingClasses.php', 'WCML\\Multicurrency\\Shipping\\ShippingClassesMode' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/ShippingClassesMode.php', 'WCML\\Multicurrency\\Shipping\\ShippingHooksFactory' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/ShippingHooksFactory.php', 'WCML\\Multicurrency\\Shipping\\ShippingMode' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/ShippingMode.php', 'WCML\\Multicurrency\\Shipping\\ShippingModeBase' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/ShippingModeBase.php', 'WCML\\Multicurrency\\Shipping\\ShippingModeProvider' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/ShippingModeProvider.php', 'WCML\\Multicurrency\\Shipping\\UnsupportedShipping' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/UnsupportedShipping.php', 'WCML\\Multicurrency\\Shipping\\VariableCost' => __DIR__ . '/../..' . '/classes/Multicurrency/Shipping/VariableCost.php', 'WCML\\Multicurrency\\Transient\\Hooks' => __DIR__ . '/../..' . '/classes/Multicurrency/Transient/Hooks.php', 'WCML\\Multicurrency\\UI\\Factory' => __DIR__ . '/../..' . '/classes/Multicurrency/UI/Factory.php', 'WCML\\Multicurrency\\UI\\Hooks' => __DIR__ . '/../..' . '/classes/Multicurrency/UI/Hooks.php', 'WCML\\Options\\WPML' => __DIR__ . '/../..' . '/classes/Options/WPML.php', 'WCML\\Orders\\Helper' => __DIR__ . '/../..' . '/classes/Orders/Helper.php', 'WCML\\Orders\\Legacy\\Helper' => __DIR__ . '/../..' . '/classes/Orders/Legacy/Helper.php', 'WCML\\PaymentGateways\\BlockHooks' => __DIR__ . '/../..' . '/classes/PaymentGateways/BlockHooks.php', 'WCML\\PaymentGateways\\BlockHooksFactory' => __DIR__ . '/../..' . '/classes/PaymentGateways/BlockHooksFactory.php', 'WCML\\PaymentGateways\\Hooks' => __DIR__ . '/../..' . '/classes/PaymentGateways/Hooks.php', 'WCML\\Products\\Hooks' => __DIR__ . '/../..' . '/classes/product/Hooks.php', 'WCML\\Reports\\Categories\\Query' => __DIR__ . '/../..' . '/classes/Reports/Categories/Query.php', 'WCML\\Reports\\Hooks' => __DIR__ . '/../..' . '/classes/Reports/Hooks.php', 'WCML\\Reports\\Orders\\Hooks' => __DIR__ . '/../..' . '/classes/Reports/Orders/Hooks.php', 'WCML\\Reports\\Products\\Query' => __DIR__ . '/../..' . '/classes/Reports/Products/Query.php', 'WCML\\Rest\\Exceptions\\Generic' => __DIR__ . '/../..' . '/classes/Rest/Exceptions/Generic.php', 'WCML\\Rest\\Exceptions\\InvalidCurrency' => __DIR__ . '/../..' . '/classes/Rest/Exceptions/InvalidCurrency.php', 'WCML\\Rest\\Exceptions\\InvalidLanguage' => __DIR__ . '/../..' . '/classes/Rest/Exceptions/InvalidLanguage.php', 'WCML\\Rest\\Exceptions\\InvalidProduct' => __DIR__ . '/../..' . '/classes/Rest/Exceptions/InvalidProduct.php', 'WCML\\Rest\\Exceptions\\InvalidTerm' => __DIR__ . '/../..' . '/classes/Rest/Exceptions/InvalidTerm.php', 'WCML\\Rest\\Exceptions\\MissingLanguage' => __DIR__ . '/../..' . '/classes/Rest/Exceptions/MissingLanguage.php', 'WCML\\Rest\\Frontend\\Language' => __DIR__ . '/../..' . '/classes/Rest/Frontend/Language.php', 'WCML\\Rest\\Functions' => __DIR__ . '/../..' . '/classes/Rest/Functions.php', 'WCML\\Rest\\Generic' => __DIR__ . '/../..' . '/classes/Rest/Generic.php', 'WCML\\Rest\\Hooks' => __DIR__ . '/../..' . '/classes/Rest/Hooks.php', 'WCML\\Rest\\Language\\Set' => __DIR__ . '/../..' . '/classes/Rest/Language/Set.php', 'WCML\\Rest\\ProductSaveActions' => __DIR__ . '/../..' . '/classes/Rest/ProductSaveActions.php', 'WCML\\Rest\\Store\\Hooks' => __DIR__ . '/../..' . '/classes/Rest/Store/Hooks.php', 'WCML\\Rest\\Store\\HooksFactory' => __DIR__ . '/../..' . '/classes/Rest/Store/HooksFactory.php', 'WCML\\Rest\\Store\\PriceRangeHooks' => __DIR__ . '/../..' . '/classes/Rest/Store/PriceRangeHooks.php', 'WCML\\Rest\\Wrapper\\Composite' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/Composite.php', 'WCML\\Rest\\Wrapper\\Factory' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/Factory.php', 'WCML\\Rest\\Wrapper\\Handler' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/Handler.php', 'WCML\\Rest\\Wrapper\\Orders\\Languages' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/Orders/Languages.php', 'WCML\\Rest\\Wrapper\\Orders\\Prices' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/Orders/Prices.php', 'WCML\\Rest\\Wrapper\\ProductAttributes' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/ProductAttributes.php', 'WCML\\Rest\\Wrapper\\ProductTerms' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/ProductTerms.php', 'WCML\\Rest\\Wrapper\\Products\\Products' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/Products/Products.php', 'WCML\\Rest\\Wrapper\\Reports\\ProductsCount' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/Reports/ProductsCount.php', 'WCML\\Rest\\Wrapper\\Reports\\ProductsSales' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/Reports/ProductsSales.php', 'WCML\\Rest\\Wrapper\\Reports\\TopSeller' => __DIR__ . '/../..' . '/classes/Rest/Wrapper/Reports/TopSeller.php', 'WCML\\Reviews\\Backend\\Hooks' => __DIR__ . '/../..' . '/classes/Reviews/Backend/Hooks.php', 'WCML\\Reviews\\Translations\\Factory' => __DIR__ . '/../..' . '/classes/Reviews/Translations/Factory.php', 'WCML\\Reviews\\Translations\\FrontEndHooks' => __DIR__ . '/../..' . '/classes/Reviews/Translations/FrontEndHooks.php', 'WCML\\Reviews\\Translations\\Mapper' => __DIR__ . '/../..' . '/classes/Reviews/Translations/Mapper.php', 'WCML\\RewriteRules\\Hooks' => __DIR__ . '/../..' . '/classes/RewriteRules/Hooks.php', 'WCML\\Setup\\BeforeHooks' => __DIR__ . '/../..' . '/classes/wcml-setup/BeforeHooks.php', 'WCML\\StandAlone\\ActionFilterLoader' => __DIR__ . '/../..' . '/classes/StandAlone/ActionFilterLoader.php', 'WCML\\StandAlone\\Container\\Config' => __DIR__ . '/../..' . '/classes/StandAlone/Container/Config.php', 'WCML\\StandAlone\\DependencyAssets' => __DIR__ . '/../..' . '/classes/StandAlone/DependencyAssets.php', 'WCML\\StandAlone\\IStandAloneAction' => __DIR__ . '/../..' . '/classes/StandAlone/IStandAloneAction.php', 'WCML\\StandAlone\\NullSitePress' => __DIR__ . '/../..' . '/classes/StandAlone/NullSitePress.php', 'WCML\\StandAlone\\UI\\AdminMenu' => __DIR__ . '/../..' . '/classes/StandAlone/UI/AdminMenu.php', 'WCML\\Tax\\Strings\\Hooks' => __DIR__ . '/../..' . '/classes/Tax/Strings/Hooks.php', 'WCML\\Terms\\Count\\Hooks' => __DIR__ . '/../..' . '/classes/Terms/Count/Hooks.php', 'WCML\\Terms\\SuspendWpmlFilters' => __DIR__ . '/../..' . '/classes/Terms/SuspendWpmlFilters.php', 'WCML\\Terms\\SuspendWpmlFiltersFactory' => __DIR__ . '/../..' . '/classes/Terms/SuspendWpmlFiltersFactory.php', 'WCML\\User\\Hooks' => __DIR__ . '/../..' . '/classes/User/Hooks.php', 'WCML\\User\\Store\\Cookie' => __DIR__ . '/../..' . '/classes/User/Store/Cookie.php', 'WCML\\User\\Store\\Noop' => __DIR__ . '/../..' . '/classes/User/Store/Noop.php', 'WCML\\User\\Store\\Store' => __DIR__ . '/../..' . '/classes/User/Store/Store.php', 'WCML\\User\\Store\\Strategy' => __DIR__ . '/../..' . '/classes/User/Store/Strategy.php', 'WCML\\User\\Store\\WcSession' => __DIR__ . '/../..' . '/classes/User/Store/WcSession.php', 'WCML\\Utilities\\ActionScheduler' => __DIR__ . '/../..' . '/classes/Utilities/ActionScheduler.php', 'WCML\\Utilities\\AdminPages' => __DIR__ . '/../..' . '/classes/Utilities/AdminPages.php', 'WCML\\Utilities\\DB' => __DIR__ . '/../..' . '/classes/Utilities/DB.php', 'WCML\\Utilities\\Post' => __DIR__ . '/../..' . '/classes/Utilities/Post.php', 'WCML\\Utilities\\Resources' => __DIR__ . '/../..' . '/classes/Utilities/Resources.php', 'WCML\\Utilities\\Suspend\\Filters' => __DIR__ . '/../..' . '/classes/Utilities/Suspend/Filters.php', 'WCML\\Utilities\\Suspend\\PostsQueryFiltersFactory' => __DIR__ . '/../..' . '/classes/Utilities/Suspend/PostsQueryFiltersFactory.php', 'WCML\\Utilities\\Suspend\\Suspend' => __DIR__ . '/../..' . '/classes/Utilities/Suspend/Suspend.php', 'WCML\\Utilities\\WcAdminPages' => __DIR__ . '/../..' . '/classes/Utilities/WcAdminPages.php', 'WCML\\Utilities\\WpAdminPages' => __DIR__ . '/../..' . '/classes/Utilities/WpAdminPages.php', 'WCML_ATE_Activate_Synchronization' => __DIR__ . '/../..' . '/classes/ate/class-wcml-ate-activate-synchronization.php', 'WCML_Accommodation_Bookings' => __DIR__ . '/../..' . '/compatibility/WcBookings/class-wcml-accommodation-bookings.php', 'WCML_Admin_Cookie' => __DIR__ . '/../..' . '/classes/class-wcml-admin-cookie.php', 'WCML_Admin_Currency_Selector' => __DIR__ . '/../..' . '/classes/currencies/class-wcml-admin-currency-selector.php', 'WCML_Admin_Menus' => __DIR__ . '/../..' . '/inc/admin-menus/class-wcml-admin-menus.php', 'WCML_Adventure_tours' => __DIR__ . '/../..' . '/compatibility/AdventureTours/class-wcml-adventure-tours.php', 'WCML_Ajax_Layered_Nav_Widget' => __DIR__ . '/../..' . '/compatibility/WcAjaxLayeredNav/class-wcml-ajax-layered-nav-widget.php', 'WCML_Ajax_Setup' => __DIR__ . '/../..' . '/inc/class-wcml-ajax-setup.php', 'WCML_Append_Gallery_To_Post_Media_Ids' => __DIR__ . '/../..' . '/classes/media/class-wml-append-gallery-to-post-media-ids.php', 'WCML_Append_Gallery_To_Post_Media_Ids_Factory' => __DIR__ . '/../..' . '/classes/media/class-wml-append-gallery-to-post-media-ids-factory.php', 'WCML_Attribute_Translation_UI' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-attribute-translation-ui.php', 'WCML_Attributes' => __DIR__ . '/../..' . '/inc/class-wcml-attributes.php', 'WCML_Bookings' => __DIR__ . '/../..' . '/compatibility/WcBookings/class-wcml-bookings.php', 'WCML_Bulk_Stock_Management' => __DIR__ . '/../..' . '/compatibility/WcBulkStockManagement/class-wcml-bulk-stock-management.php', 'WCML_Capabilities' => __DIR__ . '/../..' . '/inc/class-wcml-capabilities.php', 'WCML_Cart' => __DIR__ . '/../..' . '/inc/class-wcml-cart.php', 'WCML_Cart_Removed_Items_Widget' => __DIR__ . '/../..' . '/inc/class-wcml-cart-removed-items-widget.php', 'WCML_Cart_Switch_Lang_Functions' => __DIR__ . '/../..' . '/inc/class-wcml-cart-switch-lang-functions.php', 'WCML_Cart_Sync_Warnings' => __DIR__ . '/../..' . '/inc/class-wcml-cart-sync-warnings.php', 'WCML_Checkout_Addons' => __DIR__ . '/../..' . '/compatibility/WcCheckoutAddons/class-wcml-checkout-addons.php', 'WCML_Checkout_Field_Editor' => __DIR__ . '/../..' . '/compatibility/WcCheckoutFieldEditor/class-wcml-checkout-field-editor.php', 'WCML_Comments' => __DIR__ . '/../..' . '/inc/class-wcml-comments.php', 'WCML_Compatibility' => __DIR__ . '/../..' . '/inc/class-wcml-compatibility.php', 'WCML_Compatibility_Helper' => __DIR__ . '/../..' . '/compatibility/class-wcml-compatibility-helper.php', 'WCML_Composite_Products' => __DIR__ . '/../..' . '/compatibility/WcCompositeProducts/class-wcml-composite-products.php', 'WCML_Coupons' => __DIR__ . '/../..' . '/inc/class-wcml-coupons.php', 'WCML_Currencies' => __DIR__ . '/../..' . '/classes/currencies/class-wcml-currencies.php', 'WCML_Currencies_Dropdown_UI' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-currencies-dropdown-ui.php', 'WCML_Currencies_Payment_Gateways' => __DIR__ . '/../..' . '/classes/multi-currency/payment-gateways/class-wcml-currencies-payment-gateways.php', 'WCML_Currency_Switcher' => __DIR__ . '/../..' . '/inc/currencies/currency-switcher/class-wcml-currency-switcher.php', 'WCML_Currency_Switcher_Ajax' => __DIR__ . '/../..' . '/inc/currencies/currency-switcher/class-wcml-currency-switcher-ajax.php', 'WCML_Currency_Switcher_Options_Dialog' => __DIR__ . '/../..' . '/inc/template-classes/currency-switcher/class-wcml-currency-switcher-options-dialog.php', 'WCML_Currency_Switcher_Properties' => __DIR__ . '/../..' . '/inc/currencies/currency-switcher/class-wcml-currency-switcher-properties.php', 'WCML_Currency_Switcher_Template' => __DIR__ . '/../..' . '/inc/template-classes/currency-switcher/class-wcml-currency-switcher-template.php', 'WCML_Currency_Switcher_Templates' => __DIR__ . '/../..' . '/inc/currencies/currency-switcher/class-wcml-currency-switcher-templates.php', 'WCML_Currency_Switcher_Widget' => __DIR__ . '/../..' . '/inc/currencies/currency-switcher/class-wcml-currency-switcher-widget.php', 'WCML_Custom_Currency_Options' => __DIR__ . '/../..' . '/inc/template-classes/multi-currency/class-wcml-custom-currency-options.php', 'WCML_Custom_Files_UI' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-custom-files-ui.php', 'WCML_Custom_Prices' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-custom-prices.php', 'WCML_Custom_Prices_UI' => __DIR__ . '/../..' . '/inc/template-classes/multi-currency/class-wcml-custom-prices-ui.php', 'WCML_Custom_Taxonomy_Translation_UI' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-custom-taxonomy-translation-ui.php', 'WCML_Dependencies' => __DIR__ . '/../..' . '/inc/class-wcml-dependencies.php', 'WCML_Downloadable_Products' => __DIR__ . '/../..' . '/inc/translation-editor/class-wcml-downloadable-products.php', 'WCML_Dynamic_Pricing' => __DIR__ . '/../..' . '/compatibility/WcDynamicPricing/class-wcml-dynamic-pricing.php', 'WCML_Editor_Save_Filters' => __DIR__ . '/../..' . '/inc/translation-editor/class-wcml-editor-save-filters.php', 'WCML_Editor_UI_Product_Job' => __DIR__ . '/../..' . '/inc/translation-editor/class-wcml-editor-ui-product-job.php', 'WCML_Editor_UI_WYSIWYG_Field' => __DIR__ . '/../..' . '/inc/translation-editor/class-wcml-editor-ui-wysiwyg-field.php', 'WCML_Emails' => __DIR__ . '/../..' . '/inc/class-wcml-emails.php', 'WCML_Endpoints' => __DIR__ . '/../..' . '/inc/class-wcml-endpoints.php', 'WCML_Exchange_Rates' => __DIR__ . '/../..' . '/classes/multi-currency/class-wcml-exchange-rates.php', 'WCML_Exchange_Rates_UI' => __DIR__ . '/../..' . '/inc/template-classes/multi-currency/class-wcml-exchange-rates-ui.php', 'WCML_Extra_Product_Options' => __DIR__ . '/../..' . '/compatibility/TmExtraProductOptions/class-wcml-extra-product-options.php', 'WCML_Flatsome' => __DIR__ . '/../..' . '/compatibility/Flatsome/class-wcml-flatsome.php', 'WCML_Install' => __DIR__ . '/../..' . '/inc/class-wcml-install.php', 'WCML_JCK_WSSV' => __DIR__ . '/../..' . '/compatibility/WcShowSingleVariations/class-wcml-jck-wssv.php', 'WCML_Languages_Upgrade_Notice' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-languages-upgrade-notice.php', 'WCML_Languages_Upgrader' => __DIR__ . '/../..' . '/inc/class-wcml-languages-upgrader.php', 'WCML_Locale' => __DIR__ . '/../..' . '/inc/class-wcml-locale.php', 'WCML_MaxStore' => __DIR__ . '/../..' . '/compatibility/MaxStorePro/class-wcml-maxstore.php', 'WCML_Menu_Wrap_Base' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-menus-wrap-base.php', 'WCML_Menus_Wrap' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-menus-wrap.php', 'WCML_Mix_And_Match_Products' => __DIR__ . '/../..' . '/compatibility/WcMixAndMatch/class-wcml-mix-and-match-products.php', 'WCML_Multi_Currency' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-multi-currency.php', 'WCML_Multi_Currency_Configuration' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-multi-currency-configuration.php', 'WCML_Multi_Currency_Coupons' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-multi-currency-coupons.php', 'WCML_Multi_Currency_Install' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-multi-currency-install.php', 'WCML_Multi_Currency_Orders' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-multi-currency-orders.php', 'WCML_Multi_Currency_Prices' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-multi-currency-prices.php', 'WCML_Multi_Currency_Reports' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-multi-currency-reports.php', 'WCML_Multi_Currency_Resources' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-multi-currency-resources.php', 'WCML_Multi_Currency_Shipping' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-multi-currency-shipping.php', 'WCML_Multi_Currency_Table_Rate_Shipping' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-multi-currency-table-rate-shipping.php', 'WCML_Multi_Currency_UI' => __DIR__ . '/../..' . '/inc/template-classes/multi-currency/class-wcml-multi-currency-ui.php', 'WCML_Not_Supported_Payment_Gateway' => __DIR__ . '/../..' . '/classes/multi-currency/payment-gateways/class-wcml-not-supported-payment-gateway.php', 'WCML_Not_Translatable_Attributes' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-not-translatable-attributes.php', 'WCML_Order_Status_Manager' => __DIR__ . '/../..' . '/compatibility/WcOrderStatusManager/class-wcml-order-status-manager.php', 'WCML_Orders' => __DIR__ . '/../..' . '/inc/class-wcml-orders.php', 'WCML_Page_Builders' => __DIR__ . '/../..' . '/inc/translation-editor/class-wcml-page-builders.php', 'WCML_Payment_Gateway' => __DIR__ . '/../..' . '/classes/multi-currency/payment-gateways/class-wcml-payment-gateway.php', 'WCML_Payment_Gateway_Bacs' => __DIR__ . '/../..' . '/classes/multi-currency/payment-gateways/class-wcml-payment-gateway-bacs.php', 'WCML_Payment_Gateway_PayPal' => __DIR__ . '/../..' . '/classes/multi-currency/payment-gateways/class-wcml-payment-gateway-paypal.php', 'WCML_Payment_Gateway_PayPal_V2' => __DIR__ . '/../..' . '/classes/multi-currency/payment-gateways/class-wcml-payment-gateway-paypal-v2.php', 'WCML_Payment_Gateway_Stripe' => __DIR__ . '/../..' . '/classes/multi-currency/payment-gateways/class-wcml-payment-gateway-stripe.php', 'WCML_Payment_Method_Filter' => __DIR__ . '/../..' . '/classes/order-property-filter/class-wcml-payment-method-filter.php', 'WCML_Per_Product_Shipping' => __DIR__ . '/../..' . '/compatibility/PerProductShipping/class-wcml-per-product-shipping.php', 'WCML_Pip' => __DIR__ . '/../..' . '/compatibility/WcPip/class-wcml-pip.php', 'WCML_Pointer_UI' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-pointer-ui.php', 'WCML_Pointers' => __DIR__ . '/../..' . '/classes/pointers/class-wcml-pointers.php', 'WCML_Price_Filter' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-price-filter.php', 'WCML_Privacy_Content' => __DIR__ . '/../..' . '/classes/privacy/class-wcml-privacy-content.php', 'WCML_Privacy_Content_Factory' => __DIR__ . '/../..' . '/classes/privacy/class-wcml-privacy-content-factory.php', 'WCML_Product_Addons' => __DIR__ . '/../..' . '/compatibility/WcProductAddons/class-wcml-product-addons.php', 'WCML_Product_Bundles' => __DIR__ . '/../..' . '/compatibility/WcProductBundles/class-wcml-product-bundles.php', 'WCML_Product_Data_Store_CPT' => __DIR__ . '/../..' . '/classes/product/class-wcml-product-data-store-cpt.php', 'WCML_Product_Gallery_Filter' => __DIR__ . '/../..' . '/classes/media/class-wcml-product-gallery-filter.php', 'WCML_Product_Gallery_Filter_Factory' => __DIR__ . '/../..' . '/classes/media/class-wcml-product-gallery-filter-factory.php', 'WCML_Product_Image_Filter' => __DIR__ . '/../..' . '/classes/media/class-wcml-product-image-filter.php', 'WCML_Product_Image_Filter_Factory' => __DIR__ . '/../..' . '/classes/media/class-wcml-product-image-filter-factory.php', 'WCML_Products' => __DIR__ . '/../..' . '/inc/class-wcml-products.php', 'WCML_Products_Screen_Options' => __DIR__ . '/../..' . '/inc/class-wcml-products-screen-options.php', 'WCML_Products_UI' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-products-ui.php', 'WCML_Relevanssi' => __DIR__ . '/../..' . '/compatibility/Relevanssi/class-wcml-relevanssi.php', 'WCML_Removed_Cart_Items_UI' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-removed-cart-items-ui.php', 'WCML_Reports' => __DIR__ . '/../..' . '/inc/class-wcml-reports.php', 'WCML_Requests' => __DIR__ . '/../..' . '/inc/class-wcml-requests.php', 'WCML_Resources' => __DIR__ . '/../..' . '/inc/class-wcml-resources.php', 'WCML_Sensei' => __DIR__ . '/../..' . '/compatibility/Sensei/class-wcml-sensei.php', 'WCML_Settings_UI' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-settings-ui.php', 'WCML_Setup' => __DIR__ . '/../..' . '/classes/wcml-setup/class-wcml-setup.php', 'WCML_Setup_Attributes_UI' => __DIR__ . '/../..' . '/inc/template-classes/setup/class-wcml-setup-attributes-ui.php', 'WCML_Setup_Display_As_Translated_UI' => __DIR__ . '/../..' . '/inc/template-classes/setup/class-wcml-setup-display-as-translated-ui.php', 'WCML_Setup_Footer_UI' => __DIR__ . '/../..' . '/inc/template-classes/setup/class-wcml-setup-footer.php', 'WCML_Setup_Handlers' => __DIR__ . '/../..' . '/classes/wcml-setup/class-wcml-setup-handlers.php', 'WCML_Setup_Header_UI' => __DIR__ . '/../..' . '/inc/template-classes/setup/class-wcml-setup-header.php', 'WCML_Setup_Introduction_UI' => __DIR__ . '/../..' . '/inc/template-classes/setup/class-wcml-setup-introduction-ui.php', 'WCML_Setup_Multi_Currency_UI' => __DIR__ . '/../..' . '/inc/template-classes/setup/class-wcml-setup-multi-currency-ui.php', 'WCML_Setup_Notice_UI' => __DIR__ . '/../..' . '/inc/template-classes/setup/class-wcml-setup-notice.php', 'WCML_Setup_Step' => __DIR__ . '/../..' . '/inc/template-classes/setup/class-wcml-setup-step.php', 'WCML_Setup_Store_Pages_UI' => __DIR__ . '/../..' . '/inc/template-classes/setup/class-wcml-setup-store-pages-ui.php', 'WCML_Setup_Translation_Options_UI' => __DIR__ . '/../..' . '/inc/template-classes/setup/class-wcml-setup-translation-options-ui.php', 'WCML_Setup_UI' => __DIR__ . '/../..' . '/classes/wcml-setup/class-wcml-setup-ui.php', 'WCML_St_Taxonomy_UI' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-st-taxonomy-ui.php', 'WCML_Status_Config_Warnings_UI' => __DIR__ . '/../..' . '/inc/template-classes/status/class-wcml-status-config-warnings-ui.php', 'WCML_Status_Media_UI' => __DIR__ . '/../..' . '/inc/template-classes/status/class-wcml-status-media-ui.php', 'WCML_Status_Multi_Currencies_UI' => __DIR__ . '/../..' . '/inc/template-classes/status/class-wcml-status-multi-currencies-ui.php', 'WCML_Status_Products_UI' => __DIR__ . '/../..' . '/inc/template-classes/status/class-wcml-status-products-ui.php', 'WCML_Status_Status_UI' => __DIR__ . '/../..' . '/inc/template-classes/status/class-wcml-status-status-ui.php', 'WCML_Status_Store_Pages_UI' => __DIR__ . '/../..' . '/inc/template-classes/status/class-wcml-status-store-pages-ui.php', 'WCML_Status_Taxonomies_UI' => __DIR__ . '/../..' . '/inc/template-classes/status/class-wcml-status-taxonomies-ui.php', 'WCML_Status_UI' => __DIR__ . '/../..' . '/inc/template-classes/status/class-wcml-status-ui.php', 'WCML_Store_Pages' => __DIR__ . '/../..' . '/inc/class-wcml-store-pages.php', 'WCML_Store_URLs_Edit_Base_UI' => __DIR__ . '/../..' . '/inc/template-classes/store-urls/class-wcml-store-urls-edit-base-ui.php', 'WCML_Store_URLs_Translation_Statuses_UI' => __DIR__ . '/../..' . '/inc/template-classes/store-urls/class-wcml-store-urls-translation-statuses-ui.php', 'WCML_Store_URLs_UI' => __DIR__ . '/../..' . '/inc/template-classes/store-urls/class-wcml-store-urls-ui.php', 'WCML_Switch_Lang_Request' => __DIR__ . '/../..' . '/inc/wcml-switch-lang-request.php', 'WCML_Sync_Taxonomy' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-sync-taxonomy.php', 'WCML_Synchronize_Product_Data' => __DIR__ . '/../..' . '/inc/translation-editor/class-wcml-synchronize-product-data.php', 'WCML_Synchronize_Variations_Data' => __DIR__ . '/../..' . '/inc/translation-editor/class-wcml-synchronize-variations-data.php', 'WCML_TP_Support' => __DIR__ . '/../..' . '/inc/class-wcml-tp-support.php', 'WCML_Tab_Manager' => __DIR__ . '/../..' . '/compatibility/WcTabManager/class-wcml-tab-manager.php', 'WCML_Table_Rate_Shipping' => __DIR__ . '/../..' . '/compatibility/TableRateShipping/class-wcml-table-rate-shipping.php', 'WCML_Taxonomy_Translation_Link_Filters' => __DIR__ . '/../..' . '/classes/taxonomy-translation/class-wcml-taxonomy-translation-link-filters.php', 'WCML_Templates_Factory' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-templates-factory.php', 'WCML_Terms' => __DIR__ . '/../..' . '/inc/class-wcml-terms.php', 'WCML_The_Events_Calendar' => __DIR__ . '/../..' . '/compatibility/TheEventsCalendar/class-wcml-the-events-calendar.php', 'WCML_Tracking_Link' => __DIR__ . '/../..' . '/classes/class-wcml-tracking-link.php', 'WCML_Translation_Editor' => __DIR__ . '/../..' . '/inc/translation-editor/class-wcml-translation-editor.php', 'WCML_Troubleshooting' => __DIR__ . '/../..' . '/inc/class-wcml-troubleshooting.php', 'WCML_Troubleshooting_UI' => __DIR__ . '/../..' . '/inc/template-classes/class-wcml-troubleshooting-ui.php', 'WCML_Update_Product_Gallery_Translation' => __DIR__ . '/../..' . '/classes/media/class-wcml-update-product-gallery-translation.php', 'WCML_Update_Product_Gallery_Translation_Factory' => __DIR__ . '/../..' . '/classes/media/class-wcml-update-product-gallery-translation-factory.php', 'WCML_Upgrade' => __DIR__ . '/../..' . '/inc/class-wcml-upgrade.php', 'WCML_Url_Filters_Redirect_Location' => __DIR__ . '/../..' . '/classes/url-filters/class-wcml-url-filters-redirect-location.php', 'WCML_Url_Translation' => __DIR__ . '/../..' . '/inc/class-wcml-url-translation.php', 'WCML_Variation_Swatches_And_Photos' => __DIR__ . '/../..' . '/compatibility/WcSwatches/class-wcml-variation-swatches-and-photos.php', 'WCML_W3TC_Multi_Currency' => __DIR__ . '/../..' . '/inc/currencies/class-wcml-w3tc-multi-currency.php', 'WCML_WC_Admin_Duplicate_Product' => __DIR__ . '/../..' . '/inc/translation-editor/class-wcml-wc-admin-duplicate-product.php', 'WCML_WC_Gateways' => __DIR__ . '/../..' . '/inc/class-wcml-wc-gateways.php', 'WCML_WC_Memberships' => __DIR__ . '/../..' . '/compatibility/WcMemberships/class-wcml-wc-memberships.php', 'WCML_WC_Product_Bundles_Items' => __DIR__ . '/../..' . '/compatibility/WcProductBundles/class-wcml-wc-product-bundles-items.php', 'WCML_WC_Product_Type_Column' => __DIR__ . '/../..' . '/compatibility/WcProductTypeColumn/class-wcml-wc-product-type-column.php', 'WCML_WC_Shipping' => __DIR__ . '/../..' . '/inc/class-wcml-wc-shipping.php', 'WCML_WC_Shortcode_Product_Category' => __DIR__ . '/../..' . '/classes/shortcodes/class-wcml-wc-shortcode-product-category.php', 'WCML_WC_Strings' => __DIR__ . '/../..' . '/inc/class-wcml-wc-strings.php', 'WCML_WC_Subscriptions' => __DIR__ . '/../..' . '/compatibility/WcSubscriptions/class-wcml-wc-subscriptions.php', 'WCML_WPSEO' => __DIR__ . '/../..' . '/compatibility/WpSeo/class-wcml-wpseo.php', 'WCML_Widgets' => __DIR__ . '/../..' . '/inc/class-wcml-widgets.php', 'WCML_Woo_Var_Table' => __DIR__ . '/../..' . '/compatibility/WooVariationsTable/class-wcml-woo-var-table.php', 'WCML_Woobe' => __DIR__ . '/../..' . '/compatibility/WoobeBulkEditor/class-wcml-woobe.php', 'WCML_Wpb_Vc' => __DIR__ . '/../..' . '/compatibility/WpBakery/class-wcml-wpb-vc.php', 'WCML_YIKES_Custom_Product_Tabs' => __DIR__ . '/../..' . '/compatibility/YikesCustomProductTabs/class-wcml-yikes-custom-product-tabs.php', 'WCML_gravityforms' => __DIR__ . '/../..' . '/compatibility/GravityForms/class-wcml-gravityforms.php', 'WCML_wcExporter' => __DIR__ . '/../..' . '/compatibility/WcExporter/class-wcml-wcexporter.php', 'WCML_xDomain_Data' => __DIR__ . '/../..' . '/classes/urls/class-wcml-xdomain-data.php', 'WPML\\Templates\\PHP\\Model' => __DIR__ . '/../..' . '/classes/templates/php/model.php', 'WPML_Cache_Directory' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-cache/src/cache/class-wpml-cache-directory.php', 'WPML_Core_Version_Check' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-dependencies/src/dependencies/class-wpml-core-version-check.php', 'WPML_Dependencies' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-dependencies/src/dependencies/class-wpml-dependencies.php', 'WPML_PHP_Version_Check' => __DIR__ . '/..' . '/wpml-shared/wpml-lib-dependencies/src/dependencies/class-wpml-php-version-check.php', 'woocommerce_wpml' => __DIR__ . '/../..' . '/classes/class-woocommerce-wpml.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace {
    /**
     * Class WPML_PHP_Version_Check
     */
    class WPML_PHP_Version_Check
    {
        /**
         * WPML_PHP_Version_Check constructor.
         *
         * @param string $required_version Required php version.
         * @param string $plugin_name      Plugin name.
         * @param string $plugin_file      Plugin file.
         * @param string $text_domain      Text domain.
         */
        public function __construct($required_version, $plugin_name, $plugin_file, $text_domain)
        {
        }
        /**
         * Check php version.
         *
         * @return bool
         */
        public function is_ok()
        {
        }
        /**
         * Show notice with php requirement.
         */
        public function php_requirement_message()
        {
        }
    }
    class WPML_Core_Version_Check
    {
        public static function is_ok($package_file_path)
        {
        }
    }
    /*
    Module Name: WPML Dependency Check Module
    Description: This is not a plugin! This module must be included in other plugins (WPML and add-ons) to handle compatibility checks
    Author: OnTheGoSystems
    Author URI: http://www.onthegosystems.com/
    Version: 2.1
    */
    /** @noinspection PhpUndefinedClassInspection */
    class WPML_Dependencies
    {
        protected static $instance;
        public $data_key = 'wpml_dependencies:';
        public $needs_validation_key = 'wpml_dependencies:needs_validation';
        protected function remove_old_admin_notices()
        {
        }
        public function run_validation_on_plugins_page()
        {
        }
        public function activated_plugin_action()
        {
        }
        public function deactivated_plugin_action()
        {
        }
        public function upgrader_process_complete_action($upgrader_object, $options)
        {
        }
        public function admin_notices_action()
        {
        }
        public function extra_plugin_headers_action(array $extra_headers = array())
        {
        }
        /**
         * @return WPML_Dependencies
         */
        public static function get_instance()
        {
        }
        public function get_plugins()
        {
        }
        public function init_plugins_action()
        {
        }
        public function get_plugins_validation()
        {
        }
        public function is_plugin_version_valid()
        {
        }
        public function get_expected_versions()
        {
        }
        public function has_invalid_plugins()
        {
        }
    }
    class WPML_Cache_Directory
    {
        const DIR_PERMISSIONS = 0775;
        const MAIN_DIRECTORY_NAME = 'wpml';
        const NOTICE_GROUP = 'wpml-cache-directory';
        const NOTICE_INVALID_CACHE = 'invalid-cache';
        /**
         * WPML_Cache_Directory constructor.
         *
         * @param WPML_WP_API $wp_api
         */
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        /**
         * @param string $relative_path
         *
         * @return string|bool absolute path or false if we can't have a writable and readable directory
         */
        public function get($relative_path = '')
        {
        }
        /**
         * @param string $relative_path
         */
        public function remove($relative_path = '')
        {
        }
    }
}
namespace WCML\Compatibility\WcPip {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param string $currencySymbol
         *
         * @return string
         */
        public function filter_pip_currency_symbol($currencySymbol)
        {
        }
        /**
         * @param string $currency
         *
         * @return string
         */
        public function filter_pip_currency_position($currency)
        {
        }
    }
}
namespace {
    class WCML_Pip implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function wcml_send_email_order_id($order_id)
        {
        }
        public function print_invoice_language($type, $order_id)
        {
        }
    }
}
namespace WCML\Compatibility\WcPip {
    class Helper
    {
        /**
         * @return false|int|string
         */
        public static function getPipOrderId()
        {
        }
    }
}
namespace WCML\StandAlone {
    interface IStandAloneAction
    {
    }
}
namespace WCML\Compatibility {
    abstract class ComponentFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        /**
         * @return callable|\IWPML_Action|\IWPML_Action[]|void|null
         */
        public abstract function create();
        /**
         * @return wpdb
         */
        protected static function getWpdb()
        {
        }
        /**
         * @return WooCommerce
         */
        protected static function getWooCommerce()
        {
        }
        /**
         * @return WPML_Element_Translation_Package|null
         */
        protected static function getElementTranslationPackage()
        {
        }
        /**
         * @return \WPML_Post_Translation|null
         */
        protected static function getPostTranslations()
        {
        }
    }
}
namespace WCML\Compatibility\WcPip {
    /**
     * @see https://woocommerce.com/products/print-invoices-packing-lists/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /**
     * Class WCML_Order_Status_Manager
     * compatibility class for WC Order Status Manager plugin.
     */
    class WCML_Order_Status_Manager implements \IWPML_Action
    {
        /**
         * WCML_Order_Status_Manager constructor.
         *
         * @param WP_Query $wp_query WordPress query object.
         */
        public function __construct(\WP_Query $wp_query)
        {
        }
        /**
         * Adds WordPress hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Adds post__not_in to the query arguments.
         *
         * @param WP_Query|null $q the parsed query.
         */
        public function pre_get_posts($q = \null)
        {
        }
    }
}
namespace WCML\Compatibility\WcOrderStatusManager {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /**
     * Class WCML_Tab_Manager
     */
    class WCML_Tab_Manager implements \IWPML_Action
    {
        /**
         * WCML_Tab_Manager constructor.
         *
         * @param SitePress                        $sitepress
         * @param WooCommerce                      $woocommerce
         * @param woocommerce_wpml                 $woocommerce_wpml
         * @param wpdb                             $wpdb
         * @param WPML_Element_Translation_Package $tp
         */
        public function __construct(\SitePress $sitepress, \WooCommerce $woocommerce, \woocommerce_wpml $woocommerce_wpml, \wpdb $wpdb, \WPML_Element_Translation_Package $tp)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param object $wpml_config_array
         *
         * @return object
         */
        public function make__product_tabs_not_translatable_by_default($wpml_config_array)
        {
        }
        /**
         * @param int    $original_product_id
         * @param int    $trnsl_product_id
         * @param array  $data
         * @param string $lang
         */
        public function sync_tabs($original_product_id, $trnsl_product_id, $data, $lang)
        {
        }
        /**
         * @param int    $original_product_id
         * @param int    $trnsl_product_id
         * @param string $lang
         */
        public function duplicate_tabs($original_product_id, $trnsl_product_id, $lang)
        {
        }
        /**
         * @param string $lang
         */
        public function refresh_text_domain($lang)
        {
        }
        /**
         * @param array  $orig_prod_tab
         * @param array  $trnsl_product_tabs
         * @param string $lang
         *
         * @return array
         */
        public function set_global_tab($orig_prod_tab, $trnsl_product_tabs, $lang)
        {
        }
        /**
         * @param array  $orig_prod_tab
         * @param array  $trnsl_product_tabs
         * @param string $lang
         * @param int    $trnsl_product_id
         * @param int    $tab_id
         * @param string $title
         * @param string $content
         *
         * @return mixed
         */
        public function set_product_tab($orig_prod_tab, $trnsl_product_tabs, $lang, $trnsl_product_id, $tab_id, $title, $content)
        {
        }
        /**
         * @param array $exceptions
         *
         * @return array
         */
        public function duplicate_custom_fields_exceptions($exceptions)
        {
        }
        /**
         * @param object $obj
         * @param int    $product_id
         * @param array  $data
         */
        public function custom_box_html($obj, $product_id, $data)
        {
        }
        /**
         * @param array  $data
         * @param int    $product_id
         * @param object $translation
         * @param string $lang
         *
         * @return mixed
         */
        public function custom_box_html_data($data, $product_id, $translation, $lang)
        {
        }
        /**
         * @param int     $new_id
         * @param WP_Post $original_post
         */
        public function duplicate_product_tabs($new_id, $original_post)
        {
        }
        /**
         * @param int     $post_id
         * @param WP_Post $post
         */
        public function force_set_language_information_on_product_tabs($post_id, $post)
        {
        }
        /**
         * @param array   $package
         * @param WP_Post $post
         *
         * @return array
         */
        public function append_custom_tabs_to_translation_package($package, $post)
        {
        }
        /**
         * @param int    $post_id
         * @param array  $data
         * @param object $job
         */
        public function save_custom_tabs_translation($post_id, $data, $job)
        {
        }
        /**
         * @param int $product_id
         *
         * @return array
         */
        public function get_product_tabs($product_id)
        {
        }
        public function sync_product_tabs($post_id, $post)
        {
        }
        /**
         * @param int|string $tab_id
         *
         * @return int|string
         */
        public function wc_tab_manager_tab_id($tab_id)
        {
        }
        public function filter_default_layout($default_tabs)
        {
        }
        public function show_pointer_info()
        {
        }
        public function replace_tm_editor_custom_fields_with_own_sections($fields)
        {
        }
        public function duplicate_categories_exception($fields)
        {
        }
        public function translate_categories($post_id_from, $post_id_to, $meta_key)
        {
        }
    }
}
namespace WCML\Compatibility\WcTabManager {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\WoofWcProductFilter {
    class MulticurrencyHooks implements \IWPML_Action
    {
        /**
         * Registers hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Stores default and current currency in attributes.
         */
        public function setupCurrencies()
        {
        }
        /**
         * Filters meta query from WOOf plugin and maybe replaces the prices with the one
         * in default currency.
         *
         * @param array $metaQuery
         *
         * @return mixed
         */
        public function priceInDefaultCurrency($metaQuery)
        {
        }
        /**
         * Stores exchange rates in attribute.
         *
         * @param array $rates
         *
         * @return array
         */
        public function storeExchangeRates($rates)
        {
        }
    }
    /**
     * @see https://wordpress.org/plugins/woocommerce-products-filter/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\WcNameYourPrice {
    /**
     * WooCommerce Name Your Price compatibility.
     *
     * @version 5.2.1
     */
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param float|int    $price
         * @param string|false $currency
         *
         * @return float|int
         */
        public function product_price_filter($price, $currency = false)
        {
        }
        /**
         * Store the initial currency when item is added.
         *
         * @param array $cart_item_data The Cart Item data.
         *
         * @return array
         * @since 4.12.2
         */
        public function add_initial_currency($cart_item_data)
        {
        }
        /**
         * Filter Name Your Price Cart prices.
         *
         * @param array $session_data The Session data.
         * @param array $values       The values.
         *
         * @return array
         *
         * @since    4.12.2
         *
         * @internal filter.
         */
        public function filter_woocommerce_get_cart_item_from_session($session_data, $values)
        {
        }
        /**
         * Add currency to cart edit link.
         *
         * @param array $args
         * @return array
         */
        public function edit_in_cart_args($args)
        {
        }
        /**
         * Maybe convert any prices being edited from the cart
         *
         * @param string           $initial_price
         * @param mixed|WC_Product $product
         * @param string           $suffix
         * @return string
         */
        public function get_initial_price($initial_price, $product, $suffix)
        {
        }
    }
    /**
     * @see https://woocommerce.com/products/name-your-price/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /**
     * Compatibility class for plugin WooCommerce Bulk Stock Management
     * http://www.woothemes.com/products/bulk-stock-management/
     *
     * @author konrad
     */
    class WCML_Bulk_Stock_Management implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function wc_bulk_stock_after_process_qty_action($id)
        {
        }
    }
}
namespace WCML\Compatibility\WcBulkStockManagement {
    /**
     * @see http://www.woothemes.com/products/bulk-stock-management/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\WpBakery {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /*
     * WPBakery Page Builder ( formerly Visual Composer ) Compatibility class
     */
    class WCML_Wpb_Vc implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function is_localize_woocommerce_on_ajax($localize, $action)
        {
        }
    }
}
namespace WCML\Compatibility\MaxStorePro {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_MaxStore implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function wcml_force_reset_cart_fragments()
        {
        }
    }
    class WCML_gravityforms implements \IWPML_Action
    {
        public function __construct(\SitePress $sitepress, \woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $original_product_id
         * @param int $trnsl_product_id
         */
        public function sync_gf_data($original_product_id, $trnsl_product_id)
        {
        }
    }
}
namespace WCML\Compatibility\GravityForms {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param string $formatted
         * @param string $unformatted
         *
         * @return string
         */
        public function wcml_convert_price($formatted, $unformatted)
        {
        }
        /**
         * @param string[] $actions
         *
         * @return string[]
         */
        public function add_ajax_action($actions)
        {
        }
    }
    /**
     * @see https://www.gravityforms.com/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /**
     * Compatibility class for Variation Swatches and Photos plugin
     */
    class WCML_Variation_Swatches_And_Photos implements \IWPML_Action
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Synchronize Variation Swatches and Photos
         *
         * @param int    $original_product_id Original product ID.
         * @param int    $translated_product_id Translated product ID.
         * @param string $language
         */
        public function sync_variation_swatches_and_photos($original_product_id, $translated_product_id, $language)
        {
        }
    }
}
namespace WCML\Compatibility\WcSwatches {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_Adventure_tours implements \IWPML_Action
    {
        /**
         * WCML_Adventure_tours constructor.
         *
         * @param woocommerce_wpml                 $woocommerce_wpml
         * @param SitePress                        $sitepress
         * @param WPML_Element_Translation_Package $tp
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \SitePress $sitepress, \WPML_Element_Translation_Package $tp)
        {
        }
        public function add_hooks()
        {
        }
        public function sync_tour_data_across_translations($meta_id, $post_id, $meta_key, $tour_tabs_meta)
        {
        }
        public function custom_box_html($obj, $product_id, $data)
        {
        }
        public function custom_box_html_data($data, $product_id, $translation, $lang)
        {
        }
        public function tour_data_update($original_product_id, $product_id, $data)
        {
        }
        public function append_tour_data_translation_package($package, $post)
        {
        }
        public function save_tour_data_translation($post_id, $data, $job)
        {
        }
        public function load_assets()
        {
        }
        public function add_custom_prices_block($product_id)
        {
        }
        public function save_custom_costs($post_id)
        {
        }
        public function product_price_filter($value, $object_id, $meta_key, $single)
        {
        }
        public function add_tour_tax_id($variation_term_taxonomy_ids)
        {
        }
        public function is_variable_tour($is_variable, $product_id)
        {
        }
        public function is_attributes_page($is_attributes_page)
        {
        }
        public function replace_tm_editor_custom_fields_with_own_sections($fields)
        {
        }
    }
}
namespace WCML\Compatibility\AdventureTours {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\KlarnaPayments {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function ajax_action_needs_multi_currency($actions)
        {
        }
    }
    /**
     * @see https://wordpress.org/plugins/klarna-checkout-for-woocommerce/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_Per_Product_Shipping implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function original_product_id($product_id)
        {
        }
    }
}
namespace WCML\Compatibility\PerProductShipping {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /**
     * Class WCML_YIKES_Custom_Product_Tabs
     */
    class WCML_YIKES_Custom_Product_Tabs implements \IWPML_Action
    {
        const CUSTOM_TABS_FIELD = 'yikes_woo_products_tabs';
        /**
         * WCML_Tab_Manager constructor.
         *
         * @param woocommerce_wpml                 $woocommerce_wpml
         * @param SitePress                        $sitepress
         * @param WPML_Element_Translation_Package $tp
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \SitePress $sitepress, \WPML_Element_Translation_Package $tp)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param object $obj
         * @param int    $product_id
         * @param array  $data
         */
        public function custom_box_html($obj, $product_id, $data)
        {
        }
        /**
         * @param array  $data
         * @param int    $product_id
         * @param object $translation
         * @param string $lang
         *
         * @return array
         */
        public function custom_box_html_data($data, $product_id, $translation, $lang)
        {
        }
        /**
         * @param int    $original_product_id
         * @param int    $trnsl_product_id
         * @param array  $data
         * @param string $lang
         */
        public function sync_tabs($original_product_id, $trnsl_product_id, $data, $lang)
        {
        }
        /**
         * @param array $fields
         *
         * @return array
         */
        public function custom_fields_exceptions($fields)
        {
        }
        /**
         * @param array  $package
         * @param object $post
         *
         * @return array
         */
        public function append_custom_tabs_to_translation_package($package, $post)
        {
        }
        /**
         * @param int    $post_id
         * @param array  $data
         * @param object $job
         */
        public function save_custom_tabs_translation($post_id, $data, $job)
        {
        }
        public function show_pointer_info()
        {
        }
        public function maybe_remove_admin_language_switcher()
        {
        }
    }
}
namespace WCML\Compatibility\YikesCustomProductTabs {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\Aurum {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $actions
         *
         * @return array
         */
        public function add_ajax_action($actions)
        {
        }
    }
    /**
     * @see https://laborator.co/themes/aurum/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\WcShowSingleVariations {
    /**
     * @see https://iconicwp.com/products/woocommerce-show-single-variations/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_JCK_WSSV implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function get_language_specific_transient()
        {
        }
        public function set_language_specific_transient($value, $expiration)
        {
        }
    }
    class WCML_The_Events_Calendar implements \IWPML_Action
    {
        /**
         * WCML_The_Events_Calendar constructor.
         *
         * @param SitePress        $sitepress
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($sitepress, $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        public function unset_post_post_id()
        {
        }
        public function restore_post_post_id()
        {
        }
        public function synchronize_event_for_ticket($post_id, $post, $update)
        {
        }
        public function maybe_mark_event_as_needs_update($content, $post_id)
        {
        }
        public function append_RSVP_tickets_to_translation_job($package, $post)
        {
        }
        public function save_RSVP_tickets_translations($post_id, $data, $job)
        {
        }
        public function append_woo_tickets_to_translation_job($package, $post)
        {
        }
        public function save_woo_tickets_translations($post_id, $data, $job)
        {
        }
        public function synchronize_venue_for_event($post_id, $post, $update)
        {
        }
        public function pre_select_translated_venue()
        {
        }
        public function save_venue_for_translation($post_id, $data, $job)
        {
        }
        public function sync_rsvp_fields_on_attendee_created($order_id, $post_id, $attendee_order_status)
        {
        }
        public function get_translated_organizer_ids($organizer_ids, $event_id)
        {
        }
    }
}
namespace WCML\Compatibility\TheEventsCalendar {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param float $cost
         *
         * @return float
         */
        public function convert_events_cost($cost)
        {
        }
    }
    /**
     * @see https://wordpress.org/plugins/the-events-calendar/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\WcCheckoutFieldEditor {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_Checkout_Field_Editor implements \IWPML_Action
    {
        protected $package, $billing, $shipping, $additional;
        public function __construct($package = \false)
        {
        }
        public function add_hooks()
        {
        }
        public function register_fields($fields)
        {
        }
        public function translate_fields($fields)
        {
        }
        public function get_billing()
        {
        }
        public function get_shipping()
        {
        }
        public function get_additional()
        {
        }
    }
}
namespace WCML\Compatibility\WpFastestCache {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param bool $cache_enabled
         *
         * @return bool
         */
        public function is_cache_enabled_for_switching_currency($cache_enabled)
        {
        }
    }
    /**
     * @see https://wordpress.org/plugins/wp-fastest-cache/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /**
     * Compatibility class for  wc_checkout_addons plugin.
     *
     * @author konrad
     */
    class WCML_Checkout_Addons implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array|mixed $option_value
         *
         * @return array|mixed
         */
        public function option_wc_checkout_add_ons($option_value)
        {
        }
        public function handle_option_part($index, $conf)
        {
        }
    }
}
namespace WCML\Compatibility\WcCheckoutAddons {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array|mixed $optionValue
         *
         * @return array|mixed
         */
        public function optionWcCheckoutAddOnsFilter($optionValue)
        {
        }
    }
    /**
     * @see http://www.woocommerce.com/products/woocommerce-checkout-add-ons/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
    class OptionIterator
    {
        /**
         * @param callable    $handler
         * @param array|mixed $optionValue
         *
         * @return array|mixed
         */
        public static function apply(callable $handler, $optionValue)
        {
        }
    }
}
namespace {
    class WCML_WC_Memberships implements \IWPML_Action
    {
        const SAVED_POST_PARENT = 'wcml_memberships_post_parent';
        /**
         * @param WPML_WP_API $wp_api
         */
        public function __construct(\WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array          $query_vars
         * @param array          $wc_vars
         * @param WCML_Endpoints $object
         *
         * @return array
         */
        public function register_endpoints_query_vars($query_vars, $wc_vars, $object)
        {
        }
        /**
         * @param WCML_Endpoints $object
         *
         * @return string
         */
        public function get_translated_endpoint($object)
        {
        }
        /**
         * @param WP $q
         *
         * @return WP
         */
        public function adjust_query_vars($q)
        {
        }
        /**
         * @param string $endpoint
         * @param string $key
         *
         * @return string
         */
        public function endpoint_permalink_filter($endpoint, $key)
        {
        }
        /**
         * @param array $actions
         * @return array
         */
        public function filter_actions_links($actions)
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return WP_Query
         */
        public function save_post_parent($q)
        {
        }
        /**
         * @param WP_Query $q
         *
         * @return WP_Query
         */
        public function restore_post_parent($q)
        {
        }
        /**
         * @param array $object_ids
         *
         * @return array
         */
        public function add_translated_object_ids($object_ids)
        {
        }
        public function load_assets()
        {
        }
    }
}
namespace WCML\Compatibility\WcMemberships {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_wcExporter implements \IWPML_Action
    {
        /**
         * WCML_wcExporter constructor.
         *
         * @param SitePress $sitepress
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct(\SitePress $sitepress, \woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        public function woo_ce_fields($fields)
        {
        }
        public function woo_ce_order_fields($fields)
        {
        }
        public function woo_ce_product_item($data, $product_id)
        {
        }
        public function woo_ce_category_item($data)
        {
        }
        public function woo_ce_tags($tags)
        {
        }
    }
}
namespace WCML\Compatibility\WcExporter {
    /**
     * @see https://br.wordpress.org/plugins/woocommerce-exporter/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\WcBookings {
    class Emails implements \IWPML_Action
    {
        const DOMAIN = 'woocommerce-bookings';
        const PRIORITY_BEFORE_EMAIL_TRIGGER = 9;
        /**
         * @param \SitePress        $sitepress
         * @param \woocommerce_wpml $woocommerce_wpml
         * @param \WooCommerce      $woocommerce
         */
        public function __construct(\SitePress $sitepress, \woocommerce_wpml $woocommerce_wpml, \WooCommerce $woocommerce)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        /**
         * @param array $options
         *
         * @return array
         */
        public function optionsToTranslate($options)
        {
        }
        /**
         * @param array $keys
         *
         * @return array
         */
        public function keysToTranslate($keys)
        {
        }
        /**
         * @param string    $value
         * @param \WC_Email $object
         * @param string    $oldValue
         * @param string    $key
         *
         * @return string
         */
        public function translateHeadingAndSubject($value, $object, $oldValue, $key)
        {
        }
        /**
         * @param array $classes
         *
         * @return callable( int $bookingId ):void
         */
        public function handle($classes)
        {
        }
        /**
         * @param int    $bookingId
         * @param string $class
         */
        public function sendWithoutDuplicates($bookingId, $class)
        {
        }
    }
}
namespace {
    class WCML_Accommodation_Bookings implements \IWPML_Action
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        public function wcml_price_field_after_booking_base_cost($post_id)
        {
        }
        function wcml_price_field_after_booking_pricing_override_block_cost($pricing, $post_id)
        {
        }
        function after_bookings_pricing($post_id)
        {
        }
        function echo_wcml_price_field($post_id, $field, $pricing = \false, $check = \true, $resource_id = \false)
        {
        }
        function save_custom_costs($post_id, $post)
        {
        }
        function product_price_filter($value, $object_id, $meta_key, $single)
        {
        }
        public function load_assets()
        {
        }
    }
}
namespace WCML\Compatibility\WcBookings {
    /**
     * @todo: Most of the code in this class was just moved from
     * the original \WCML_Bookings class with the minimal
     * adjustments. There's a lot of weak/obsolete formatting
     * and code duplication that we should fix in the future.
     */
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $postId
         *
         * @return void
         */
        public function wcml_price_field_after_booking_base_cost($postId)
        {
        }
        /**
         * @param int $postId
         *
         * @return void
         */
        public function wcml_price_field_after_booking_block_cost($postId)
        {
        }
        /**
         * @param int $postId
         *
         * @return void
         */
        public function wcml_price_field_after_display_cost($postId)
        {
        }
        /**
         * @param array $pricing
         * @param int   $postId
         *
         * @return void
         */
        public function wcml_price_field_after_booking_pricing_base_cost($pricing, $postId)
        {
        }
        /**
         * @param array $pricing
         * @param int   $postId
         *
         * @return void
         */
        public function wcml_price_field_after_booking_pricing_cost($pricing, $postId)
        {
        }
        /**
         * @param int $personTypeId
         *
         * @return void
         */
        public function wcml_price_field_after_person_cost($personTypeId)
        {
        }
        /**
         * @param int $personTypeId
         *
         * @return void
         */
        public function wcml_price_field_after_person_block_cost($personTypeId)
        {
        }
        /**
         * @param int $resourceId
         * @param int $postId
         *
         * @return void
         */
        public function wcml_price_field_after_resource_cost($resourceId, $postId)
        {
        }
        /**
         * @param int $resourceId
         * @param int $postId
         *
         * @return void
         */
        public function wcml_price_field_after_resource_block_cost($resourceId, $postId)
        {
        }
        /**
         * @param int         $postId
         * @param string      $field
         * @param array|false $pricing
         * @param bool        $check
         * @param int|false   $resourceId
         *
         * @return void
         */
        public function echo_wcml_price_field($postId, $field, $pricing = false, $check = true, $resourceId = false)
        {
        }
        /**
         * @param int $postId
         *
         * @return void
         */
        public function after_bookings_pricing($postId)
        {
        }
        /**
         * @param int $postId
         *
         * @return false|void
         */
        public function save_custom_costs($postId)
        {
        }
        /**
         * @param float|int $cost
         * @param array     $fields
         * @param string    $key
         *
         * @return float|int
         */
        public function wc_bookings_process_cost_rules_cost($cost, $fields, $key)
        {
        }
        /**
         * @param float|int $base_cost
         * @param array     $fields
         * @param string    $key
         *
         * @return float|int
         */
        public function wc_bookings_process_cost_rules_base_cost($base_cost, $fields, $key)
        {
        }
        /**
         * @param float|int $override_cost
         * @param array     $fields
         * @param string    $key
         *
         * @return float|int
         */
        public function wc_bookings_process_cost_rules_override_block_cost($override_cost, $fields, $key)
        {
        }
        /**
         * @param float|int $cost
         * @param array     $fields
         * @param string    $name
         * @param string    $key
         *
         * @return float|int|mixed|string
         */
        public function filter_pricing_cost($cost, $fields, $name, $key)
        {
        }
        /**
         * @param string $name
         * @param array  $fields
         *
         * @return bool
         */
        public function needs_filter_pricing_cost($name, $fields)
        {
        }
        public function booking_currency_dropdown()
        {
        }
        public function set_booking_currency_ajax()
        {
        }
        public function set_booking_currency($currency_code = false)
        {
        }
        public function get_cookie_booking_currency()
        {
        }
        public function set_order_currency_on_create_booking_page($order_id)
        {
        }
        public function filter_booking_currency_symbol($currency)
        {
        }
        public function create_booking_page_client_currency($currency)
        {
        }
        public function filter_wc_booking_cost($check, $object_id, $meta_key, $single)
        {
        }
        /**
         * @return bool
         */
        public static function isWcBookingsBefore_1_10_9()
        {
        }
    }
}
namespace {
    /**
     * Class WCML_Bookings.
     */
    class WCML_Bookings implements \IWPML_Action
    {
        const POST_TYPE = 'wc_booking';
        const PRIORITY_SAVE_POST_ACTION = 110;
        /**
         * WCML_Bookings constructor.
         *
         * @param SitePress                        $sitepress
         * @param woocommerce_wpml                 $woocommerce_wpml
         * @param wpdb                             $wpdb
         * @param WPML_Element_Translation_Package $tp
         * @param WPML_Post_Translation            $wpml_post_translations
         */
        public function __construct(\SitePress $sitepress, \woocommerce_wpml $woocommerce_wpml, \wpdb $wpdb, \WPML_Element_Translation_Package $tp, \WPML_Post_Translation $wpml_post_translations)
        {
        }
        /**
         * Adds hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * When sending a booking notification to the customer get the language from the order.
         *
         * @param int $maybeBookingId
         *
         * @return int
         */
        public function order_id_for_language($maybeBookingId)
        {
        }
        public function save_booking_action_handler($booking_id)
        {
        }
        /**
         * Sync existing product bookings for translations.
         *
         * @param int    $original_product_id
         * @param int    $product_id
         * @param string $language
         */
        public function sync_bookings($original_product_id, $product_id, $language)
        {
        }
        public function sync_booking_data($original_product_id, $current_product_id)
        {
        }
        public function sync_resources($original_product_id, $translated_product_id, $lang_code, $duplicate = \true)
        {
        }
        public function duplicate_resource($tr_product_id, $resource, $lang_code)
        {
        }
        public function add_product_resource($product_id, $resource_id, $resource_data)
        {
        }
        public function remove_resource_from_product($product_id, $resource_id)
        {
        }
        public function update_product_resource($product_id, $resource_id, $resource_data)
        {
        }
        public function sync_persons($original_product_id, $tr_product_id, $lang_code, $duplicate = \true)
        {
        }
        public function duplicate_person($tr_product_id, $person_id, $lang_code)
        {
        }
        public function sync_resource_costs_with_translations($object_id, $meta_key, $check = \false)
        {
        }
        public function sync_resource_costs($original_product_id, $object_id, $meta_key, $language_code)
        {
        }
        public function localize_lock_fields_js()
        {
        }
        public function filter_bundled_product_in_cart_contents($cart_item, $key, $current_language)
        {
        }
        public function set_order_language_on_create_booking_page($order_id)
        {
        }
        public function filter_get_booking_products_args($args)
        {
        }
        public function custom_box_html($obj, $product_id, $data)
        {
        }
        public function custom_box_html_data($data, $product_id, $translation, $lang)
        {
        }
        public function get_original_resources($product_id)
        {
        }
        public function get_original_persons($product_id)
        {
        }
        public function show_custom_blocks_for_resources_and_persons($check, $product_id, $product_content)
        {
        }
        public function replace_tm_editor_custom_fields_with_own_sections($fields)
        {
        }
        public function remove_single_custom_fields_to_translate($fields)
        {
        }
        public function product_content_resource_label($meta_key)
        {
        }
        public function wcml_products_tab_sync_resources_and_persons($original_product_id, $tr_product_id, $data, $language)
        {
        }
        public function duplicate_booking_for_translations($booking_id, $lang = \false)
        {
        }
        public function get_translated_booking_product_id($booking_id, $language)
        {
        }
        public function get_translated_booking_resource_id($booking_id, $language)
        {
        }
        public function get_translated_booking_persons_ids($booking_id, $language)
        {
        }
        public function update_status_for_translations($booking_id)
        {
        }
        public function get_translated_bookings($booking_id, $actual_translations_only = \true)
        {
        }
        public function booking_filters_query($query)
        {
        }
        public function bookings_in_date_range_query($booking_ids)
        {
        }
        public function delete_bookings($booking_id)
        {
        }
        public function trash_bookings($booking_id)
        {
        }
        public function append_persons_to_translation_package($package, $post)
        {
        }
        public function append_resources_to_translation_package($package, $post)
        {
        }
        public function wcml_js_lock_fields_ids($ids)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function filter_get_booking_resources_args($args)
        {
        }
        public function extra_conditions_to_filter_bookings($extra_conditions)
        {
        }
        public function hide_bookings_type_on_tm_dashboard($types)
        {
        }
        public function show_pointer_info()
        {
        }
        public function add_to_cart_sold_individually($sold_indiv, $cart_item_data, $product_id, $quantity)
        {
        }
        /**
         * Unset "bookings" from translatable documents to hide WPML languages section from booking edit page.
         *
         * @param array $icl_post_types
         *
         * @return array
         */
        public function filter_translatable_documents($icl_post_types)
        {
        }
        /**
         * Hide WPML languages links section from bookings list page.
         *
         * @param string $type
         *
         * @return string|null
         */
        public function filter_is_translated_post_type($type)
        {
        }
        /**
         * @param int     $post_id
         * @param WP_Post $post
         * @param bool    $update
         */
        public function sync_booking_status($post_id, $post, $update)
        {
        }
        /**
         * @param string $current_language
         *
         * @return string
         */
        public function booking_email_language($current_language)
        {
        }
        public function maybe_set_booking_language($booking_id)
        {
        }
        /**
         * @param string $counts
         * @param string $type
         *
         * @return object
         */
        public function count_bookings_by_current_language($counts, $type)
        {
        }
        /**
         * @param array $views
         *
         * @return array
         */
        public function unset_mine_from_bookings_views($views)
        {
        }
        public function remove_language_switcher()
        {
        }
        public function save_booking_data_to_translation($post_id, $data, $job)
        {
        }
        /**
         * @param int       $new_post_id
         * @param array     $fields
         * @param \stdClass $job
         */
        public function synchronize_bookings_on_translation_completed($new_post_id, $fields, $job)
        {
        }
        /**
         * @param stdClass|false $event
         *
         * @return stdClass|false
         */
        public function prevent_events_on_duplicates($event)
        {
        }
    }
}
namespace WCML\Compatibility\WcBookings\Templates {
    class MyBookings implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array[] $tables
         *
         * @return array[]
         */
        public function filterByCurrentLanguage($tables)
        {
        }
    }
}
namespace WCML\Compatibility\WcBookings {
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
    class SharedHooks implements \IWPML_Action
    {
        /**
         * @param \wpdb $wpdb
         */
        public function __construct(\wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string|false $externalProductType
         *
         * @return void
         */
        public static function load_assets($externalProductType = false)
        {
        }
        /**
         * @param array $actions
         *
         * @return array
         */
        public static function wcml_multi_currency_is_ajax($actions)
        {
        }
        public function clear_transient_fields()
        {
        }
        /**
         * @param WC_Product|int|string $product
         *
         * @return bool
         */
        public static function isBooking($product)
        {
        }
    }
    class Prices implements \IWPML_Action
    {
        const CUSTOM_COSTS_STATUS_KEY = '_wcml_custom_costs_status';
        public function add_hooks()
        {
        }
        /**
         * @param bool $check
         * @param int  $productId
         *
         * @return bool
         */
        public function checkCustomCosts($check, $productId)
        {
        }
    }
}
namespace {
    class WCML_WPSEO implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function wpseo_custom_field_label($field, $product_id)
        {
        }
        public function set_updated_post_id($post_id)
        {
        }
        public function wpseo_premium_post_redirect_slug_change($slug_changed_flag)
        {
        }
        public function noindex_all_comments_page($robotsArray)
        {
        }
    }
}
namespace WCML\Compatibility\WpSeo {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\WcMixAndMatch {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * Add MNM price fields to list to be converted.
         *
         * @since 5.0.0
         *
         * @param array $custom_fields
         * @return array
         */
        public function get_price_custom_fields($custom_fields)
        {
        }
        /**
         * Swap the base price for the custom price in that currency.
         *
         * @since 5.0.0
         *
         * @param array  $prices
         * @param string $code
         * @return array
         */
        public function update_container_custom_prices_values($prices, $code)
        {
        }
        /**
         * Save base price per currency.
         *
         * @since 5.0.0
         *
         * @param int    $post_id
         * @param string $product_price
         * @param array  $custom_prices
         * @param string $code
         */
        public function update_container_base_price($post_id, $product_price, $custom_prices, $code)
        {
        }
    }
}
namespace {
    /**
     * Mix and Match Products compatibility class.
     *
     * @version 5.0.0
     */
    class WCML_Mix_And_Match_Products implements \IWPML_Action
    {
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Attach callbacks.
         *
         * @since 5.0.0
         */
        public function add_hooks()
        {
        }
        /**
         * Translate container data with translated values when the product is duplicated.
         *
         * Handles translating source products to the MNM custom table.
         * Handles translating source categories as meta.
         *
         * @param int $container_id
         * @param int $translated_container_id
         */
        public function sync_allowed_contents($container_id, $translated_container_id)
        {
        }
        /**
         * Update the cart contents to the new language
         *
         * @since 5.0.0
         *
         * @param array  $new_cart_contents
         * @param array  $cart_contents
         * @param string $key
         * @param string $new_key
         *
         * @return array
         */
        public function sync_cart($new_cart_contents, $cart_contents, $key, $new_key)
        {
        }
        /**
         * Translate the _mnm_data meta of child products.
         *
         * For Mix and Match 1.x data.
         *
         * @param string $meta_id
         * @param int    $post_id
         * @param string $meta_key
         * @param mixed  $meta_value
         */
        public function sync_mnm_data($meta_id, $post_id, $meta_key, $meta_value)
        {
        }
    }
}
namespace WCML\Compatibility\WcMixAndMatch {
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\TableRateShipping {
    class MulticurrencyHooks implements \IWPML_Action
    {
        /**
         * @var \woocommerce_wpml
         */
        public $woocommerce_wpml;
        /**
         * @var \WCML_Multi_Currency
         */
        public $multicurrency;
        /**
         * @param \woocommerce_wpml    $woocommerce_wpml
         * @param \WCML_Multi_Currency $multicurrency
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WCML_Multi_Currency $multicurrency)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * It's not possible to filter rate_min and rate_max so we use the original price to compare against these values
         *
         * @param array $args
         *
         * @return array
         */
        public function filterQueryRatesArgs($args)
        {
        }
        /**
         * @param float       $rowBasePrice
         * @param \WC_Product $product
         * @param int         $quantity
         *
         * @return float
         */
        public function filterProductBasePrice($rowBasePrice, $product, $quantity)
        {
        }
    }
    /**
     * @see https://woocommerce.com/products/table-rate-shipping/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /**
     * Class WCML_Table_Rate_Shipping
     */
    class WCML_Table_Rate_Shipping implements \IWPML_Action
    {
        /**
         * @var SitePress
         */
        public $sitepress;
        /**
         * @var woocommerce_wpml
         */
        public $woocommerce_wpml;
        const PRIORITY_BEFORE_DELETE = 5;
        /**
         * WCML_Table_Rate_Shipping constructor.
         *
         * @param SitePress        $sitepress
         * @param woocommerce_wpml $woocommerce_wpml
         * @param wpdb             $wpdb
         */
        public function __construct(\SitePress $sitepress, \woocommerce_wpml $woocommerce_wpml, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Register shipping labels for string translation.
         */
        public function init()
        {
        }
        /**
         * @param WP_Term[] $terms
         * @param int       $post_id
         * @param string    $taxonomy
         *
         * @return WP_Term[]
         */
        public function shipping_class_id_in_default_language($terms, $post_id, $taxonomy)
        {
        }
        public function show_pointer_info()
        {
        }
        /**
         * Register the new rate's shipping abort reasons.
         *
         * @param array[] $rates
         * @return array[]
         */
        public function register_abort_messages($rates)
        {
        }
        /**
         * Unregister the deleted rate's shipping abort reasons when deleted via AJAX.
         */
        public function unregister_abort_messages_ajax()
        {
        }
        /**
         * Unregister the deleted rate's shipping abort reasons when the shipping class it's for is deleted.
         *
         * @param int $term_id
         */
        public function unregister_abort_messages_shipping_class($term_id)
        {
        }
        /**
         * Translate the rate's shipping abort reasons
         *
         * @param stdClass[] $rates
         * @return stdClass[]
         */
        public function translate_abort_messages($rates)
        {
        }
        /**
         * Unregister the deleted rate's shipping abort reasons for list of ids
         *
         * @param int $rate_id
         */
        public function unregister_abort_messages($rate_id)
        {
        }
        /**
         * @param bool               $available
         * @param array              $package
         * @param WC_Shipping_Method $object
         *
         * @return bool
         */
        public function shipping_table_rate_is_available($available, $package, $object)
        {
        }
        /**
         * @param array $priorities
         *
         * @return array
         */
        public function filter_table_rate_priorities($priorities)
        {
        }
    }
}
namespace WCML\Compatibility\Relevanssi {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_Relevanssi implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function index_product($product_id, $tr_product_id, $translations, $target_language)
        {
        }
    }
}
namespace WCML\Compatibility\WpSuperCache {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
    }
    /**
     * @see https://wordpress.org/plugins/wp-super-cache/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /**
    Class for WooCommerce Advanced Ajax Layered Navigation
    */
    class WCML_Ajax_Layered_Nav_Widget implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function wc_ajax_layered_nav_sizeselector_term_id($term_id)
        {
        }
        public function wc_ajax_layered_nav_query_editor($posts, $attribute, $value)
        {
        }
    }
}
namespace WCML\Compatibility\WcAjaxLayeredNav {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /*
     *  Woo Variations table Compatibility class
     */
    class WCML_Woo_Var_Table implements \IWPML_Action
    {
        /**
         * @param string $current_language
         */
        public function __construct($current_language)
        {
        }
        public function add_hooks()
        {
        }
        public function filter_add_to_cart_product_id($product_id)
        {
        }
    }
}
namespace WCML\Compatibility\WooVariationsTable {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_Flatsome implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function add_action_to_multi_currency_ajax($actions)
        {
        }
    }
}
namespace WCML\Compatibility\Flatsome {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_Compatibility_Helper
    {
        public static function get_product_type($product_id)
        {
        }
    }
}
namespace WCML\Compatibility\YithWcQuickView {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $actions
         *
         * @return array
         */
        public function ajax_action_needs_multi_currency($actions)
        {
        }
    }
    /**
     * @see https://wordpress.org/plugins/yith-woocommerce-quick-view/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_WC_Product_Bundles_Items
    {
        /**
         * @param int $product_id
         *
         * @return array
         */
        public function get_items($product_id)
        {
        }
        /**
         * @param WC_Bundled_Item $bundled_item
         *
         * @return array
         */
        public function get_item_data($bundled_item)
        {
        }
        public function copy_item_data($item_id_1, $item_id_2)
        {
        }
        /**
         * @param int $item_id
         *
         * @return WC_Bundled_Item_Data
         */
        public function get_item_data_object($item_id)
        {
        }
        /**
         * @param WC_Bundled_Item_Data $bundled_item_data
         * @param string               $key
         * @param mixed                $value
         */
        public function update_item_meta($bundled_item_data, $key, $value)
        {
        }
        /**
         * @param WC_Bundled_Item_Data $bundled_item_data
         */
        public function save_item_meta($bundled_item_data)
        {
        }
    }
}
namespace WCML\Compatibility\WcProductBundles {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $customFields
         *
         * @return array
         */
        public function getPriceCustomFields($customFields)
        {
        }
        /**
         * @param array  $prices
         * @param string $code
         *
         * @return array
         */
        public function updateBundlesCustomPricesValues($prices, $code)
        {
        }
        /**
         * @param int|string $postId
         * @param string     $productPrice
         * @param array      $customPrices
         * @param string     $code
         *
         * @return void
         */
        public function updateBundlesBasePrice($postId, $productPrice, $customPrices, $code)
        {
        }
    }
}
namespace {
    class WCML_Product_Bundles implements \IWPML_Action
    {
        const META_SELL_IDS = '_wc_pb_bundle_sell_ids';
        const META_SELLS_TITLE = '_wc_pb_bundle_sells_title';
        const META_SELLS_DISCOUNT = '_wc_pb_bundle_sells_discount';
        /**
         * @var WPML_Element_Translation_Package
         */
        public $tp;
        /**
         * WCML_Product_Bundles constructor.
         */
        public function __construct(\SitePress $sitepress, \woocommerce_wpml $woocommerce_wpml, $product_bundles_items, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function sync_product_bundle_meta($bundle_id, $translated_bundle_id)
        {
        }
        public function sync_product_bundle_meta_with_translations($bundle_id)
        {
        }
        /**
         * @param array  $allowed_variations
         * @param string $lang
         *
         * @return array
         */
        public function translate_allowed_variations($allowed_variations, $lang)
        {
        }
        /**
         * @param array  $original_default_variation_attributes
         * @param string $target_lang
         * @param int    $product_id
         * @param int    $translated_product_id
         *
         * @return array
         */
        public function translate_default_variation_attributes($original_default_variation_attributes, $target_lang, $product_id, $translated_product_id)
        {
        }
        /**
         * @param int|string $item_id
         * @param string     $language
         *
         * @return string
         */
        public function get_item_id_for_language($item_id, $language)
        {
        }
        /**
         * @param int    $original_item_id
         * @param int    $translated_item_id
         * @param string $language
         */
        public function set_translated_item_id_relationship($original_item_id, $translated_item_id, $language)
        {
        }
        /**
         * @deprecated This method is used by CTE only.
         *
         * Add Bundles Box to WCML Translation GUI.
         *
         * @param object     $obj
         * @param string|int $bundle_id
         * @param mixed      $data
         *
         * @return false|void
         */
        public function custom_box_html($obj, $bundle_id, $data)
        {
        }
        /**
         * @deprecated This method is used by CTE only.
         *
         * @param array      $data
         * @param string|int $bundle_id
         * @param object     $translation
         * @param string     $lang
         *
         * @return mixed
         */
        public function custom_box_html_data($data, $bundle_id, $translation, $lang)
        {
        }
        public function append_bundle_data_translation_package($package, $post)
        {
        }
        /**
         * @param string|int $translated_bundle_id
         * @param array      $fields
         * @param object     $job
         */
        public function save_product_bundles_to_translation($translated_bundle_id, $fields, $job)
        {
        }
        /**
         * @deprecated This method is used by CTE only.
         *
         * Update Bundled products title and description after saving the translation.
         *
         * @param string|int $bundle_id
         * @param string|int $translated_bundle_id
         * @param array      $data
         * @param string     $lang
         *
         * @return array|void
         */
        public function bundle_update($bundle_id, $translated_bundle_id, $data, $lang)
        {
        }
        /**
         * Sync product bundle data with translated values when the product is duplicated.
         *
         * @param int $bundle_id
         * @param int $translated_bundle_id
         */
        public function sync_bundled_ids($bundle_id, $translated_bundle_id)
        {
        }
        public function resync_bundle($cart_item, $session_values, $cart_item_key)
        {
        }
        public function resync_bundle_clean($cart)
        {
        }
        /**
         * @deprecated This method is used by CTE only.
         *
         * @param string|int $translated_bundle_id
         * @param array      $data
         * @param object     $job
         */
        public function save_bundle_data_translation($translated_bundle_id, $data, $job)
        {
        }
        public function is_bundle_product($product_id)
        {
        }
        // #wcml-2241.
        public function upgrade_bundles_items_relationships()
        {
        }
        public function woocommerce_json_search_filter_found_products($found_products)
        {
        }
        public function delete_bundled_item_relationship($bundle_item)
        {
        }
        /**
         * @param array $values
         * @param int   $postId
         *
         * @return array
         */
        public static function adjust_bundle_sells_product_signature($values, $postId)
        {
        }
    }
}
namespace WCML\Compatibility\WcProductBundles {
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_WC_Subscriptions implements \IWPML_Action
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        public function wcml_variation_term_taxonomy_ids($get_variation_term_taxonomy_ids)
        {
        }
        public function woocommerce_subscription_lengths($subscription_ranges, $subscription_period)
        {
        }
        /**
         * @param array           $query_vars
         * @param array           $wc_vars
         * @param \WCML_Endpoints $wcmlEndpoints
         *
         * @return array
         */
        public function register_endpoint($query_vars, $wc_vars, $wcmlEndpoints)
        {
        }
        public function endpoint_permalink_filter($endpoint, $key)
        {
        }
        public function show_pointer_info()
        {
        }
        /**
         * @param array $allowed_types
         *
         * @return array
         */
        public function set_allowed_variations_types_in_xliff($allowed_types)
        {
        }
        /**
         * Translate strings of renewal notifications
         *
         * @param integer $order_id Order ID
         */
        public function translate_renewal_notification($order_id)
        {
        }
        /**
         * Translate custom heading and subject for renewal notification
         *
         * @param string                             $return_value original string
         * @param WCS_Email_Customer_Renewal_Invoice $obj Object of email class
         * @param string                             $value Original value from setting
         * @param string                             $key Name of the key
         * @return string Translated value or original value incase of not translated
         */
        public function translate_heading_subject($return_value, $obj, $value, $key)
        {
        }
        /**
         * Add customer renewal invoice option to translate
         *
         * @param array $emails_options list of option to translate
         * @return array $emails_options
         */
        public function translate_email_options($emails_options)
        {
        }
        /**
         * Change section name prefix to add language links
         *
         * @param string $section_prefix section prefix
         * @param string $emails_option current option name
         * @return string $section_prefix
         */
        public function email_option_section_prefix($section_prefix, $emails_option)
        {
        }
        /**
         * @param mixed $subscription
         *
         * @return mixed
         */
        public function filter_subscription_items($subscription)
        {
        }
    }
}
namespace WCML\Compatibility\WcSubscriptions {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        /**
         * Set a flag when we are prorating the price (upgrades/downgrades).
         * We do this to skip currency conversion in the sign_up_fee because
         * when switching subscription it has already been converted.
         */
        public function set_prorating_price()
        {
        }
        /**
         * Filter Subscription Sign-up fee cost
         *
         * @param string     $subscriptionSignUpFee
         * @param WC_Product $product
         *
         * @return string
         */
        public function subscriptions_product_sign_up_fee_filter($subscriptionSignUpFee, $product)
        {
        }
        /**
         * Force client currency for resubscribe subscription
         */
        public function maybe_force_client_currency_for_subscription()
        {
        }
        /**
         * @param array      $fields
         * @param int|string $productId
         *
         * @return array
         */
        public function set_prices_fields($fields, $productId)
        {
        }
        /**
         * @param array      $labels
         * @param int|string $productId
         *
         * @return array
         */
        public function set_labels_for_prices_fields($labels, $productId)
        {
        }
        /**
         * @param array            $prices
         * @param string           $code
         * @param int|string|false $variationId
         *
         * @return array
         */
        public function update_custom_prices_values($prices, $code, $variationId = false)
        {
        }
        /**
         * @param int|string $productId
         *
         * @return void
         */
        public function new_subscription_prices_block($productId)
        {
        }
        /**
         * @param string                                       $price
         * @param WC_Product|WC_Product_Subscription_Variation $product
         *
         * @return string
         */
        public function woocommerce_subscription_price_from($price, $product)
        {
        }
    }
    /**
     * @see https://www.woocommerce.com/products/woocommerce-subscriptions/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
    class SharedHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function init()
        {
        }
        /**
         * @param WC_Cart $cart
         */
        public function maybe_backup_recurring_carts($cart)
        {
        }
        /**
         * @param WC_Cart $cart
         */
        public function maybe_restore_recurring_carts($cart)
        {
        }
    }
}
namespace WCML\Compatibility\TmExtraProductOptions {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_Extra_Product_Options implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function inf_translate_strings()
        {
        }
        public function inf_translate_product_page_strings()
        {
        }
        public function inf_message($text)
        {
        }
    }
    class WCML_WC_Product_Type_Column implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        public function show_type_column($show)
        {
        }
    }
}
namespace WCML\Compatibility\WcProductTypeColumn {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\Compatibility\WcDynamicPricing {
    class MulticurrencyHooks implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $modules
         *
         * @return array
         */
        public function filter_price($modules)
        {
        }
        /**
         * @param float  $amount
         * @param object $rule
         *
         * @return float
         */
        public function woocommerce_dynamic_pricing_get_rule_amount($amount, $rule)
        {
        }
        /**
         * @param array $rules
         *
         * @return array
         */
        public function dynamic_pricing_product_rules($rules)
        {
        }
    }
}
namespace {
    /**
     * Class WCML_Dynamic_Pricing
     */
    class WCML_Dynamic_Pricing implements \IWPML_Action
    {
        /**
         * WCML_Dynamic_Pricing constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $modules
         *
         * @return array
         */
        public function translate_collector_args($modules)
        {
        }
        /**
         * @param boolean $result
         * @param int     $product_id
         * @param array   $categories
         *
         * @return boolean
         */
        public function is_object_in_translated_terms($result, $product_id, $categories)
        {
        }
        /**
         * @param bool                                                            $process_discounts
         * @param WC_Product                                                      $_product
         * @param int                                                             $module_id
         * @param WC_Dynamic_Pricing_Simple_Base|WC_Dynamic_Pricing_Advanced_Base $dynamic_pricing
         * @param array|int                                                       $cat_ids
         *
         * @return bool|WP_Error
         */
        public function woocommerce_dynamic_pricing_is_applied_to($process_discounts, \WC_Product $_product, $module_id, $dynamic_pricing, $cat_ids)
        {
        }
        /**
         * @param array $rules
         *
         * @return array
         */
        public function translate_variations_in_rules($rules)
        {
        }
        public function hide_language_switcher_for_settings_page()
        {
        }
    }
}
namespace WCML\Compatibility\WcDynamicPricing {
    /**
     * @see https://woocommerce.com/products/dynamic-pricing/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_Woobe implements \IWPML_Action
    {
        /**
         * WCML_Woobe constructor.
         *
         * @param SitePress             $sitepress
         * @param WPML_Post_Translation $post_translations
         */
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $post_translations)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * Replaces product price for translation of given product.
         *
         * @param int|null        $product_id Product ID.
         * @param WC_Product|null $product    Product object.
         * @param string|null     $field_key  Key of processed custom field.
         * @param mixed|null      $value      Value of processed custom field.
         * @param string|null     $field_type Type of processed custom field.
         */
        public function replace_price_in_translations($product_id = \null, $product = \null, $field_key = \null, $value = \null, $field_type = \null)
        {
        }
    }
}
namespace WCML\Compatibility\WoobeBulkEditor {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    /**
     * Class WCML_Product_Addons
     */
    class WCML_Product_Addons implements \IWPML_Action
    {
        const ADDONS_OPTION_KEY = \WCML\Compatibility\WcProductAddons\SharedHooks::ADDONS_OPTION_KEY;
        /**
         * @var SitePress
         */
        public $sitepress;
        /**
         * WCML_Product_Addons constructor.
         *
         * @param SitePress        $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int      $meta_id
         * @param int      $id
         * @param string   $meta_key
         * @param string[] $addons
         */
        public function register_addons_strings($meta_id, $id, $meta_key, $addons)
        {
        }
        /**
         * @param null   $null
         * @param int    $object_id
         * @param string $meta_key
         * @param bool   $single
         *
         * @return array|null
         */
        public function translate_addons_strings($null, $object_id, $meta_key, $single)
        {
        }
        /**
         * @param array $product_terms
         *
         * @return array
         */
        public function addons_product_terms($product_terms)
        {
        }
        public function inf_translate_strings()
        {
        }
        /**
         * @param array    $package
         * @param \WP_Post $post
         *
         * @return array
         */
        public function append_addons_to_translation_package($package, $post)
        {
        }
        /**
         * @param int    $post_id
         * @param array  $fields
         * @param object $job
         */
        public function save_addons_to_translation($post_id, $fields, $job)
        {
        }
        /**
         * @deprecated This method is used by CTE only.
         *
         * @param object $obj
         * @param int    $product_id
         * @param array  $data
         */
        public function custom_box_html($obj, $product_id, $data)
        {
        }
        /**
         * @deprecated This method is used by CTE only.
         *
         * @param array  $data
         * @param int    $product_id
         * @param object $translation
         *
         * @return array
         */
        public function custom_box_html_data($data, $product_id, $translation)
        {
        }
        /**
         * @deprecated This method is used by CTE only.
         *
         * @param int   $original_product_id
         * @param int   $product_id
         * @param array $data
         */
        public function addons_update($original_product_id, $product_id, $data)
        {
        }
        public function show_pointer_info()
        {
        }
        public function replace_tm_editor_custom_fields_with_own_sections($fields)
        {
        }
        public function set_global_ids_in_query_args($args)
        {
        }
    }
}
namespace WCML\Compatibility\WcProductAddons {
    class MulticurrencyHooks implements \IWPML_Action
    {
        const TEMPLATE_FOLDER = '/templates/compatibility/';
        const DIALOG_TEMPLATE = 'product-addons-prices-dialog.twig';
        const SETTINGS_TEMPLATE = 'product-addons-prices-settings.twig';
        const PRICE_OPTION_KEY = '_product_addon_prices';
        /**
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        public function maybeUpdateCustomPricesValues($productId, $arg)
        {
        }
        /**
         * @param array $addons
         * @param int   $postId
         *
         * @return array
         */
        public function product_addons_price_filter($addons, $postId)
        {
        }
        /**
         * Special case for WC Bookings plugin - need add addon cost after re-calculating booking costs.
         *
         * @see https://onthegosystems.myjetbrains.com/youtrack/issue/wcml-1877
         *
         * @param array $cartItem
         *
         * @return array
         */
        public function filter_booking_addon_product_in_cart_contents($cartItem)
        {
        }
        public function load_dialog_resources()
        {
        }
        /**
         * @param \WP_Post|null $product
         * @param array         $productAddons
         * @param int           $loop
         * @param array         $option
         */
        public function dialog_button_after_option_row($product, $productAddons, $loop, $option)
        {
        }
        /**
         * @param \WP_Post|null $product
         * @param array         $productAddons
         * @param int           $loop
         */
        public function dialog_button_before_options($product, $productAddons, $loop)
        {
        }
        /**
         * @param int $metaId
         * @param int $id
         */
        public function onGlobalAddonsUpdated($metaId, $id)
        {
        }
        /**
         * @param string|int $productId
         */
        public function update_custom_prices_values($productId)
        {
        }
        public function custom_prices_settings_block()
        {
        }
    }
    /**
     * @see https://woocommerce.com/products/product-add-ons/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
    class SharedHooks implements \IWPML_Action
    {
        const TEMPLATE_FOLDER = '/templates/compatibility/';
        const ADDONS_OPTION_KEY = '_product_addons';
        public function add_hooks()
        {
        }
        public function loadAssets()
        {
        }
        /**
         * @return bool
         */
        public static function isGlobalAddonEditPage()
        {
        }
        /**
         * @param int    $metaId
         * @param int    $id
         * @param string $metaKey
         * @param array  $addons
         */
        public function triggerGlobalAddonUpdated($metaId, $id, $metaKey, $addons)
        {
        }
        /**
         * @param int $postId
         *
         * @return bool
         */
        public static function isGlobalAddon($postId)
        {
        }
        /**
         * @param string $productId
         *
         * @return array
         */
        public static function getProductAddons($productId)
        {
        }
    }
}
namespace {
    class WCML_Sensei implements \IWPML_Action
    {
        /**
         * WCML_Sensei constructor.
         *
         * @param SitePress           $sitepress
         * @param wpdb                $wpdb
         * @param WPML_Custom_Columns $custom_columns
         */
        public function __construct(\SitePress $sitepress, \wpdb $wpdb, \WPML_Custom_Columns $custom_columns)
        {
        }
        public function add_hooks()
        {
        }
        public function save_post_actions($post_id, $post)
        {
        }
        public function sync_custom_fields($original_post_id, $post_id, $post_type)
        {
        }
        public function log_activity_after($args, $data, $comment_id = \false)
        {
        }
        public function filter_bought_product_id($product_id, $order)
        {
        }
        public function delete_user_activity($comment_id)
        {
        }
        public function pre_get_comments($obj)
        {
        }
    }
}
namespace WCML\Compatibility\Sensei {
    class Factory extends \WCML\Compatibility\ComponentFactory
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace {
    class WCML_Composite_Products extends \WCML_Compatibility_Helper implements \IWPML_Action
    {
        const META_KEY_DATA = '_bto_data';
        const META_KEY_SCENARIO = '_bto_scenario_data';
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function woocommerce_composite_component_default_option($selected_value, $component_id, $object)
        {
        }
        public function wpml_composites_compat($new_cart_data, $cart_contents, $key, $new_key)
        {
        }
        public function wpml_composites_transients_cache_per_language($args, $query_args, $component_data)
        {
        }
        public function sync_composite_data_across_translations($original_product_id, $current_product_id)
        {
        }
        /**
         * @deprecated This method is used by CTE only.
         *
         * @param object     $obj
         * @param string|int $product_id
         * @param mixed      $data
         */
        public function custom_box_html($obj, $product_id, $data)
        {
        }
        /**
         * @deprecated This method is used by CTE only.
         *
         * @param array      $data
         * @param string|int $product_id
         * @param object     $translation
         * @param string     $lang
         *
         * @return array
         */
        public function custom_box_html_data($data, $product_id, $translation, $lang)
        {
        }
        /**
         * @deprecated This method is used by CTE only.
         *
         * @param string|int $original_product_id
         * @param string|int $product_id
         * @param array      $data
         * @param string     $language
         */
        public function update_component_strings($original_product_id, $product_id, $data, $language)
        {
        }
        /**
         * @param array              $package
         * @param \stdClass|\WP_Post $post
         *
         * @return array
         */
        public function append_composite_data_translation_package($package, $post)
        {
        }
        /**
         * @param string|int $post_id
         * @param array      $data
         * @param object     $job
         */
        public function save_composite_data_translation($post_id, $data, $job)
        {
        }
        public function wcml_js_lock_fields_input_names($names)
        {
        }
        public function wcml_js_lock_fields_ids($names)
        {
        }
        public function localize_lock_fields_js()
        {
        }
        public function load_assets()
        {
        }
        public function woocommerce_json_search_found_products($found_products)
        {
        }
        public function get_composite_scenarios_meta($product_id)
        {
        }
        public function get_composite_data($product_id)
        {
        }
        public function replace_tm_editor_custom_fields_with_own_sections($fields)
        {
        }
    }
}
namespace WCML\Compatibility\WcCompositeProducts {
    class MulticurrencyHooks implements \IWPML_Action
    {
        const PRICE_FILTERS_PRIORITY_AFTER_COMPOSITE = 99;
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int|string       $productId
         * @param string|float|int $productPrice
         * @param array            $customPrices
         * @param string           $code
         *
         * @return void
         */
        public function update_composite_custom_prices($productId, $productPrice, $customPrices, $code)
        {
        }
        /**
         * @param mixed  $value
         * @param int    $objectId
         * @param string $metaKey
         *
         * @return mixed
         */
        public function filter_composite_product_cost($value, $objectId, $metaKey)
        {
        }
        public function add_price_rounding_filters()
        {
        }
        /**
         * @param int|float|string $price
         *
         * @return int|float|string
         */
        public function apply_rounding_rules($price)
        {
        }
    }
    /**
     * @see https://woocommerce.com/products/composite-products/
     */
    class Factory extends \WCML\Compatibility\ComponentFactory implements \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @inheritDoc
         */
        public function create()
        {
        }
    }
}
namespace WCML\AdminNotices {
    /**
     * Manage showing a reminder notice when multi-currency mode is not configured completely.
     */
    class MultiCurrencyMissing implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const NOTICE_ID = 'wcml-multi-currency-missing';
        public function __construct(\woocommerce_wpml $wcml, \WPML_Notices $notices)
        {
        }
        /**
         * Add hooks to manage visibility of notice.
         */
        public function add_hooks()
        {
        }
        /**
         * Add a notice reminding admin about missing secondary currency.
         */
        public function addNotice()
        {
        }
        /**
         * Remove the notice if the problem has been fixed
         */
        public function removeNotice()
        {
        }
    }
    class RestrictedScreens
    {
        /**
         * @return string[]
         */
        public static function get()
        {
        }
    }
    class Review implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action, \WCML\StandAlone\IStandAloneAction
    {
        const OPTION_NAME = 'wcml-rate-notice';
        /**
         * @param WPML_Notices $wpmlNotices
         */
        public function __construct(\WPML_Notices $wpmlNotices)
        {
        }
        public function add_hooks()
        {
        }
        public function addNotice()
        {
        }
        /**
         * @param \WC_Order $order
         */
        public function onNewOrder($order)
        {
        }
    }
    class ExportImport implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        // Cascade of priorities before 10.
        // 7: WPML.
        // 8: WCML.
        // 9: WPML Export and Import.
        const PRIORITY = 8;
        const GROUP = 'wpml-import-notices';
        const WPML_IMPORT_URL = 'https://wpml.org/documentation/related-projects/wpml-export-and-import/?utm_source=plugin&utm_medium=gui&utm_campaign=wpml-export-import&utm_term=admin-notice';
        const WCML_URL = 'https://wpml.org/documentation/related-projects/woocommerce-multilingual/?utm_source=plugin&utm_medium=gui&utm_campaign=wcml&utm_term=admin-notice';
        const NOTICE_CLASSES = ['wpml-import-notice', 'wpml-import-notice-from-wcml'];
        public function __construct(\WPML_Notices $wpmlNotices)
        {
        }
        public function add_hooks()
        {
        }
        public function manageNotice()
        {
        }
        /**
         * @return bool
         */
        public static function isOnMigrationPages()
        {
        }
    }
    class CachePlugins implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const NOTICE_ID = 'wcml-cache-plugins';
        public function __construct(\WPML_Notices $notices)
        {
        }
        public function add_hooks()
        {
        }
        public function addNotice()
        {
        }
    }
    class WizardNotice extends \WCML_Menu_Wrap_Base
    {
        /**
         * @return array
         */
        protected function get_child_model()
        {
        }
    }
}
namespace WPML\Templates\PHP {
    class Model
    {
        /**
         * Model constructor.
         *
         * @param array $data
         */
        public function __construct($data = [])
        {
        }
        /**
         * If a property does not exist, the method will create it as an "empty" instance of `Model`
         * so that children properties can be called without throwing errors.
         *
         * @param string $name
         *
         * @return mixed|null
         * @see \WPML\Templates\PHP\Model::__toString
         */
        public function __get($name)
        {
        }
        /**
         * It ensures that $value is always either an array or a primitive type.
         *
         * @param string $name
         * @param mixed  $value
         */
        public function __set($name, $value)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function hasValue($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isNull($name)
        {
        }
        /**
         * @param string $name
         *
         * @return bool
         */
        public function isEmpty($name)
        {
        }
        /**
         * @return mixed[]|\WPML\Templates\PHP\Model[]
         */
        public function getAttributes()
        {
        }
        /**
         * This logic allows using the model in a template even when referring to properties which do no exist.
         *
         * Example:
         * `<h1><?php echo esc_html( $model->non_existing_property->title ); ?></h1>` Will output an empty string instead of throwing an error
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
}
namespace {
    /**
     * Class woocommerce_wpml
     */
    /* phpcs:ignore PEAR.NamingConventions.ValidClassName.StartWithCapital, PEAR.NamingConventions.ValidClassName.Invalid */
    class woocommerce_wpml
    {
        /** @var mixed|void Settings */
        public $settings;
        /** @var  WCML_Troubleshooting */
        public $troubleshooting;
        /** @var  WCML_Endpoints */
        public $endpoints;
        /** @var WCML_Products */
        public $products;
        /** @var  WCML_Synchronize_Product_Data */
        public $sync_product_data;
        /** @var  WCML_Synchronize_Variations_Data */
        public $sync_variations_data;
        /** @var WCML_Store_Pages */
        public $store;
        /** @var WCML_Emails */
        public $emails;
        /** @var WCML_Terms */
        public $terms;
        /** @var WCML_Attributes */
        public $attributes;
        /** @var WCML_Orders */
        public $orders;
        /** @var WCML_Currencies */
        public $currencies;
        /** @var WCML_Multi_Currency */
        public $multi_currency;
        /** @var WCML_Languages_Upgrader */
        public $languages_upgrader;
        /** @var WCML_Url_Translation */
        public $url_translation;
        /** @var WCML_Coupons */
        public $coupons;
        /** @var WCML_Locale */
        public $locale;
        /** @var WCML\Media\Wrapper\IMedia */
        public $media;
        /** @var WCML_Downloadable_Products */
        public $downloadable;
        /** @var WCML_WC_Strings */
        public $strings;
        /** @var WCML_WC_Shipping */
        public $shipping;
        /** @var  WCML_WC_Gateways */
        public $gateways;
        /** @var  WCML_Currency_Switcher_Templates */
        public $cs_templates;
        /** @var  WCML_Comments */
        public $comments;
        /** @var  WCML_Translation_Editor */
        public $translation_editor;
        /**
         * @depreacted Use `make( WCML_Dependencies::class )` instead.
         *
         * @var WCML_Dependencies
         */
        public $dependencies;
        /**
         * @depreacted Use `make( WCML_Dependencies::class )->check()` instead.
         *
         * @var bool|int
         */
        public $dependencies_are_ok;
        /** @var WCML_Cart */
        public $cart;
        /** @var WCML_Cart_Sync_Warnings */
        public $cart_sync_warnings;
        /** @var  WCML_Requests */
        public $requests;
        // NOTE: reverted back to public after wcml-1218.
        /** @var  WCML_Compatibility */
        public $compatibility;
        /** @var WCML_Currency_Switcher_Properties|null $cs_properties */
        public $cs_properties;
        /** @var WCML_WC_Admin_Duplicate_Product|null $duplicate_product */
        public $duplicate_product;
        /** @var WCML_Page_Builders|null $page_builders */
        public $page_builders;
        public function __construct()
        {
        }
        public function add_hooks()
        {
        }
        public function load()
        {
        }
        public function init()
        {
        }
        /**
         * Get settings
         *
         * @return mixed|void
         */
        public function get_settings()
        {
        }
        /**
         * Get setting
         *
         * @param string      $key
         * @param null|string $default
         *
         * @return null|string|array
         */
        public function get_setting($key, $default = \null)
        {
        }
        /**
         * Update settings
         *
         * @param null|mixed $settings
         */
        public function update_settings($settings = \null)
        {
        }
        /**
         * @param string     $key
         * @param mixed      $value
         * @param bool|false $autoload It only applies to these settings stored as separate options.
         */
        public function update_setting($key, $value, $autoload = \false)
        {
        }
        public function update_setting_ajx()
        {
        }
        /**
         * Get latest stable version from WC readme.txt
         *
         * @return string
         */
        public function get_stable_wc_version()
        {
        }
        /**
         * Get supported WP version from readme.txt
         *
         * @return string
         */
        public function get_supported_wp_version()
        {
        }
        /**
         * @return array
         */
        public function get_wc_query_vars()
        {
        }
        /**
         * @return WCML_Multi_Currency
         */
        public function get_multi_currency()
        {
        }
        /**
         * @return string
         */
        public function version()
        {
        }
        /**
         * @return string
         */
        public function plugin_url()
        {
        }
        /**
         * @return string
         */
        public function js_min_suffix()
        {
        }
        /**
         * @return bool
         */
        public function is_wpml_prior_4_2()
        {
        }
    }
}
namespace WCML\Coupons {
    class Helper
    {
        /**
         * Constant for CRUD pages for coupons (e.g. edit.php?post_type=shop_coupon)
         *
         * @var string
         */
        const POST_TYPE_COUPON = 'shop_coupon';
        /**
         * Constant for list of coupons page (e.g. edit.php?post_type=shop_coupon)
         *
         * @var string
         */
        const PAGE_COUPON_LIST = 'edit.php';
        /**
         * Constant for new coupon page (e.g. post-new.php?post_type=shop_coupon)
         *
         * @var string
         */
        const PAGE_COUPON_NEW = 'post-new.php';
        /**
         * Constant for edit coupon page (e.g. post.php?post=170&action=edit)
         *
         * @var string
         */
        const PAGE_COUPON_EDIT = 'post.php';
        /**
         * Constant for edit action
         *
         * @var string
         */
        const ACTION_EDIT = 'edit';
        /**
         * Checks if the current screen is an admin screen for Legacy WooCommerce New Coupon (non-HPOS).
         *
         * @return bool
         */
        public static function isCouponCreateAdminScreen()
        {
        }
        /**
         * Checks if the current screen is an admin screen for Legacy list of WooCommerce coupons (non-HPOS).
         *
         * @return bool
         */
        public static function isCouponListAdminScreen()
        {
        }
        /**
         * Checks if the current screen is an admin screen for WooCommerce Legacy Edit Coupon (non-HPOS).
         *
         * @return bool
         */
        public static function isCouponEditAdminScreen()
        {
        }
    }
}
namespace WCML\API\VendorAddon {
    class Hooks implements \IWPML_Backend_Action
    {
        const TRANSLATE_CAPABILITY = 'translate';
        const COLUMN_USER_OPTION = 'manageedit-productcolumnshidden';
        public function add_hooks()
        {
        }
        /**
         * @param callable $isVendor
         *
         * @return \Closure
         */
        public static function forceLanguagesColumnInProductsList(callable $isVendor)
        {
        }
    }
}
namespace WCML\RewriteRules {
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /**
         * @param SitePress|NullSitePress $sitepress
         */
        public function __construct(\WPML\Core\ISitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        public function preventFlushInNonDefaultLang($value)
        {
        }
    }
}
namespace WCML\Container {
    class Config
    {
        public static function getSharedInstances()
        {
        }
        public static function getSharedClasses()
        {
        }
        /**
         * Replaces global $sitepress with null object.
         *
         * @return array
         */
        public static function getAliases()
        {
        }
        /**
         * @return array
         */
        public static function getDelegated()
        {
        }
    }
}
namespace WCML\PaymentGateways {
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action, \WCML\StandAlone\IStandAloneAction
    {
        const OPTION_KEY = 'wcml_payment_gateways';
        /* took this priority from wcgcl but we could not recall the reason of this number.*/
        const PRIORITY = 1000;
        public function add_hooks()
        {
        }
        public function updateSettingsOnSave()
        {
        }
        public function loadAssets()
        {
        }
        public function output()
        {
        }
        /**
         * @param array $payment_gateways
         *
         * @return array
         */
        public function filterByCountry($payment_gateways)
        {
        }
        public function maybeAddNotice()
        {
        }
    }
    class BlockHooks implements \IWPML_Action
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param PaymentMethodRegistry $registry
         */
        public function translateSettings($registry)
        {
        }
    }
    class BlockHooksFactory implements \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader
    {
        /**
         * @return \IWPML_Action
         */
        public function create()
        {
        }
        public function get_load_action()
        {
        }
    }
}
namespace WCML\HomeScreen {
    class Hooks implements \IWPML_Action, \WCML\StandAlone\IStandAloneAction
    {
        public function add_hooks()
        {
        }
        public function enqueueAssets()
        {
        }
    }
    class Factory implements \IWPML_Backend_Action_Loader, \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @return \IWPML_Action|null
         */
        public function create()
        {
        }
    }
}
namespace WCML\Utilities {
    class WcAdminPages
    {
        const SECTION_BACS = 'bacs';
        /**
         * @param string|array $sections A single section (string) or one of multiple sections (array).
         *
         * @return bool
         */
        public static function isSection($sections)
        {
        }
        /**
         * @return bool
         */
        public static function isHomeScreen()
        {
        }
        /**
         * @return bool
         */
        public static function isPaymentSettings()
        {
        }
    }
    class DB
    {
        /**
         * Changes array of items into string of items, separated by comma and sql-escaped
         *
         * @see https://coderwall.com/p/zepnaw
         * @see wpml_prepare_in
         *
         * @global wpdb $wpdb
         *
         * @param mixed|array $items  item(s) to be joined into string
         * @param string      $format %s or %d
         *
         * @return string Items separated by comma and sql-escaped
         */
        public static function prepareIn($items, $format = '%s')
        {
        }
    }
    class Post
    {
        /**
         * This allows to create new posts immediately in the
         * correct language and the correct translation group (if any).
         *
         * @param array        $args
         * @param string|null  $lang
         * @param int|null     $trid
         *
         * @return int|\WP_Error
         */
        public static function insert(array $args, $lang = null, $trid = null)
        {
        }
    }
}
namespace WCML\Utilities\Suspend {
    interface Suspend
    {
        /**
         * Manually resume the suspended logic.
         *
         * @return void
         */
        public function resume();
        /**
         * Run some function and automatically resume the suspended logic.
         *
         * @param callable $function
         *
         * @return mixed
         */
        public function runAndResume(callable $function);
    }
    class Filters implements \WCML\Utilities\Suspend\Suspend
    {
        public function __construct(array $filtersToSuspend)
        {
        }
        /**
         * @return void
         */
        public function resume()
        {
        }
        /**
         * @param callable $function
         *
         * @return mixed
         */
        public function runAndResume(callable $function)
        {
        }
    }
    class PostsQueryFiltersFactory
    {
        /**
         * @return Filters
         */
        public static function create()
        {
        }
    }
}
namespace WCML\Utilities {
    class WpAdminPages
    {
        /**
         * @return bool
         */
        public static function isDashboard()
        {
        }
    }
    class Resources
    {
        // enqueueApp :: string $app -> ( string $localizeData )
        public static function enqueueApp($app)
        {
        }
    }
    class AdminPages
    {
        const TAB_MULTICURRENCY = 'multi-currency';
        const TAB_PRODUCTS = 'products';
        /**
         * @return string
         */
        public static function getDefaultTab()
        {
        }
        /**
         * @param null|string $fallback
         *
         * @return string|null
         */
        public static function getCurrentTab($fallback = null)
        {
        }
        /**
         * @return string
         */
        public static function getTabToDisplay()
        {
        }
        /**
         * @param string|array $tabs A single tab (string) or one of multiple tabs (array).
         *
         * @return bool
         */
        public static function isTab($tabs)
        {
        }
        /**
         * @param string $page
         *
         * @return bool
         */
        public static function isPage($page)
        {
        }
        /**
         * @return bool
         */
        public static function isWcmlSettings()
        {
        }
        /**
         * @return bool
         */
        public static function isMultiCurrency()
        {
        }
        /**
         * @return bool
         */
        public static function isTranslationQueue()
        {
        }
        /**
         * @return bool
         */
        public static function isTranslationsDashboard()
        {
        }
    }
    class ActionScheduler
    {
        /**
         * @return bool
         */
        public static function isWcRunningFromAsyncActionScheduler() : bool
        {
        }
    }
}
namespace WCML\Reviews\Backend {
    class Hooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const AFTER_SITEPRESS_JS_LOAD = 3;
        /**
         * @param SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function disableLanguageQuickLinks()
        {
        }
    }
}
namespace WCML\Reviews\Translations {
    class Mapper
    {
        public function __construct(\wpdb $wpdb)
        {
        }
        public function registerMissingReviewStrings()
        {
        }
        /**
         * @return int
         */
        public function countMissingReviewStrings()
        {
        }
    }
    class Factory implements \IWPML_Deferred_Action_Loader, \IWPML_Frontend_Action_Loader, \IWPML_AJAX_Action_Loader
    {
        public function create()
        {
        }
        /**
         * These hooks are deferred to allow 3rd party
         * themes/plugins to disable the feature
         * with 'wcml_enable_product_review_translation'.
         *
         * @return string
         */
        public function get_load_action()
        {
        }
    }
    class FrontEndHooks implements \IWPML_Action
    {
        const CONTEXT = 'wcml-reviews';
        const COMMENT_TYPE = 'review';
        public function add_hooks()
        {
        }
        /**
         * @param int         $commentId
         * @param \WP_Comment $comment
         */
        public function insertCommentAction($commentId, $comment)
        {
        }
        /**
         * @param \WP_Comment|\stdClass $comment
         */
        public function translateReview($comment)
        {
        }
        /**
         * @param \WP_Comment|\stdClass $review
         */
        public static function registerReviewString($review)
        {
        }
    }
}
namespace {
    class WCML_Tracking_Link
    {
        // WPML general links.
        const WPML_HOME = 'https://wpml.org/';
        const WPML_ST_FAQ = 'https://wpml.org/faq/how-to-add-string-translation-to-your-site/';
        const WPML_PURCHASE = 'https://wpml.org/purchase/';
        const WPML_SUPPORT = 'https://wpml.org/forums/forum/english-support/';
        const WPML_ACCOUNT = 'https://wpml.org/shop/account/';
        const WPML_AUTO_TRANSLATION_DOC = 'https://wpml.org/documentation/automatic-translation/';
        // WCML general links.
        const WCML_MAIN_DOC = 'https://wpml.org/documentation/related-projects/woocommerce-multilingual/';
        const WCML_MULTI_CURRENCY_DOC = 'https://wpml.org/documentation/related-projects/woocommerce-multilingual/multi-currency-support-woocommerce/';
        const WCML_CLEAR_CART_DOC = 'https://wpml.org/documentation/related-projects/woocommerce-multilingual/clearing-cart-contents-when-language-or-currency-change/';
        const WCML_DISPLAY_AS_TRANSLATED_DOC = 'https://wpml.org/documentation/related-projects/woocommerce-multilingual/displaying-untranslated-products-in-secondary-languages/';
        // WCML compatibility links.
        const WCML_BOOKINGS_DOC = 'https://wpml.org/documentation/woocommerce-extensions-compatibility/translating-woocommerce-bookings-woocommerce-multilingual/';
        const WCML_PRODUCT_ADDONS_DOC = 'https://wpml.org/documentation/woocommerce-extensions-compatibility/translating-woocommerce-product-add-ons-woocommerce-multilingual/';
        const WCML_TAB_MANAGER_DOC = 'https://wpml.org/documentation/woocommerce-extensions-compatibility/translating-woocommerce-tab-manager-woocommerce-multilingual/';
        const WCML_TABLE_RATE_SHIPPING_DOC = 'https://wpml.org/documentation/woocommerce-extensions-compatibility/translating-woocommerce-table-rate-shipping-woocommerce-multilingual/';
        const WCML_SUBSCRIPTIONS_DOC = 'https://wpml.org/documentation/woocommerce-extensions-compatibility/translating-woocommerce-subscriptions-woocommerce-multilingual/';
        const WCML_CUSTOM_PRODUCT_TABS = 'https://wpml.org/plugin/custom-product-tabs-for-woocommerce/';
        const UTM_TERM_WIZARD = 'wcml-setup-wizard';
        /**
         * @param string       $link
         * @param string|false $id     e.g. '#some-section'.
         * @param array        $params
         *
         * @return string
         */
        public static function generate($link, $id = \false, $params = [])
        {
        }
        /**
         * @param bool $isStandalone
         *
         * @return string
         */
        public static function getWpmlHome($isStandalone = \false)
        {
        }
        /**
         * @param bool $isStandalone
         *
         * @return string
         */
        public static function getWpmlStFaq($isStandalone = \false)
        {
        }
        /**
         * @param bool $isStandalone
         *
         * @return string
         */
        public static function getWpmlPurchase($isStandalone = \false)
        {
        }
        /**
         * @return string
         */
        public static function getWpmlSupport()
        {
        }
        /**
         * @return string
         */
        public static function getWpmlAccount()
        {
        }
        /**
         * @return string
         */
        public static function getWpmlAutoTranslationDoc()
        {
        }
        /**
         * @param false|string $id e.g. '#some-section'.
         * @param array        $params
         *
         * @return string
         */
        public static function getWcmlMainDoc($id = \false, $params = [])
        {
        }
        /**
         * @param false|string $id e.g. '#some-section'.
         * @param array        $params
         *
         * @return string
         */
        public static function getWcmlMultiCurrencyDoc($id = \false, $params = [])
        {
        }
        /**
         * @return string
         */
        public static function getWcmlClearCartDoc()
        {
        }
        /**
         * @param array $params
         *
         * @return string
         */
        public static function getWcmlDisplayAsTranslatedDoc($params = [])
        {
        }
        /**
         * @return string
         */
        public static function getWcmlBookingsDoc()
        {
        }
        /**
         * @return string
         */
        public static function getWcmlProductAddonsDoc()
        {
        }
        /**
         * @return string
         */
        public static function getWcmlTabManagerDoc()
        {
        }
        /**
         * @return string
         */
        public static function getWcmlTableRateShippingDoc()
        {
        }
        /**
         * @return string
         */
        public static function getWcmlSubscriptionsDoc()
        {
        }
        /**
         * @return string
         */
        public static function getWcmlCustomProductTabs()
        {
        }
    }
}
namespace WCML\Email\Settings {
    class Hooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const KEY_PREFIX = 'wcml_lang';
        /**
         * @param SitePress|NullSitePress $sitepress
         * @param WCML_WC_Strings         $wcmlStrings
         */
        public function __construct(\WPML\Core\ISitePress $sitepress, \WCML_WC_Strings $wcmlStrings)
        {
        }
        public function add_hooks()
        {
        }
        public function showLanguageLinksForWcEmails()
        {
        }
        public function setEmailsStringLanguage()
        {
        }
    }
}
namespace WCML\StandAlone {
    class ActionFilterLoader
    {
        public function __construct(\WPML_Action_Filter_Loader $loader = null)
        {
        }
        /**
         * Load action filter limiting the loaders processed depending on whether WPML is installed
         *
         * @param string[] $loaders Action loaders.
         */
        public function load($loaders)
        {
        }
    }
    class DependencyAssets
    {
        /**
         * @param string $dependencyBaseUrl
         */
        public function __construct($dependencyBaseUrl)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueue()
        {
        }
    }
}
namespace WCML\StandAlone\Container {
    class Config
    {
        /**
         * @return array
         */
        public static function getSharedInstances()
        {
        }
        /**
         * @return array
         */
        public static function getAliases()
        {
        }
        /**
         * @return array
         */
        public static function getSharedClasses()
        {
        }
        /**
         * @return array
         */
        public static function getDelegated()
        {
        }
    }
}
namespace WCML\StandAlone {
    class NullSitePress implements \WPML\Core\ISitePress
    {
        /**
         * @param bool   $refresh
         * @param bool   $major_first
         * @param string $order_by
         * @return array
         */
        public function get_active_languages($refresh = false, $major_first = false, $order_by = 'english_name')
        {
        }
        /** @return bool|mixed|null|string */
        public function get_admin_language()
        {
        }
        /** @return string */
        public function get_current_language()
        {
        }
        /**
         * @param null|string $code
         * @param bool|string $cookie_lang
         */
        public function switch_lang($code = null, $cookie_lang = false)
        {
        }
        /** @return string|false */
        public function get_default_language()
        {
        }
        /**
         * @param int         $trid
         * @param string|null $el_type Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category, post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment').
         * @param bool|null   $skip_empty
         * @param bool|null   $all_statuses
         * @param bool|null   $skip_cache
         * @param bool|null   $skip_recursions
         * @param bool|null   $skipPrivilegeChecking
         *
         * @return array<string,\stdClass>
         */
        public function get_element_translations($trid, $el_type = 'post_post', $skip_empty = false, $all_statuses = false, $skip_cache = false, $skip_recursions = false, $skipPrivilegeChecking = false)
        {
        }
        /**
         * @param string $code
         * @return string
         */
        public function get_flag_url($code)
        {
        }
        /**
         * Find language of document based on given permalink
         *
         * @param string $url Local url in permalink form.
         * @return string language code
         */
        public function get_language_from_url($url)
        {
        }
        /**
         * Filter to add language field to WordPress search form
         *
         * @param string $form HTML code of search for before filtering.
         *
         * @return string HTML code of search form
         */
        public function get_search_form_filter($form)
        {
        }
        /**
         * @param string     $key
         * @param mixed|bool $default
         * @return bool|mixed
         * @since 3.1
         */
        public function get_setting($key, $default = false)
        {
        }
        /** @return array */
        public function get_settings()
        {
        }
        /** @return \WPML_WP_API */
        public function get_wp_api()
        {
        }
        /**
         * @param string|bool|null $lang
         * @return bool
         */
        public function is_rtl($lang = false)
        {
        }
        /**
         * @param int    $element_id   Use term_taxonomy_id for taxonomies, post_id for posts.
         * @param string $element_type Use comment, post, page, {custom post time name}, nav_menu, nav_menu_item, category,
         *                             post_tag, etc. (prefixed with 'post_', 'tax_', or nothing for 'comment').
         *
         * @return null|string
         */
        public function get_language_for_element($element_id, $element_type)
        {
        }
    }
}
namespace WCML\StandAlone\UI {
    class AdminMenu extends \WCML_Menu_Wrap_Base
    {
        /**
         * WCML_Menus_Wrap constructor.
         *
         * @param SitePress|NullSitePress $sitepress
         * @param woocommerce_wpml        $woocommerce_wpml
         */
        public function __construct(\WPML\Core\ISitePress $sitepress, $woocommerce_wpml)
        {
        }
        /**
         * @return array
         */
        protected function get_child_model()
        {
        }
        protected function get_current_menu_content($current_tab)
        {
        }
    }
}
namespace {
    /**
     * Class WCML_WC_Shortcode_Product_Category
     *
     * @since 4.2.2
     */
    class WCML_WC_Shortcode_Product_Category
    {
        /**
         * WCML_WC_Shortcode_Product_Category constructor.
         *
         * @param SitePress $sitepress
         */
        public function __construct(\WPML\Core\ISitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $args
         * @param array $atts
         *
         * @return array
         */
        public function translate_category($args, $atts = \null)
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function translate_categories_using_simple_tax_query($args)
        {
        }
    }
}
namespace WCML\Importer {
    class Products implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param \WC_Product $product 
         */
        public function synchronizeProducts($product)
        {
        }
    }
}
namespace {
    /**
     * @author OnTheGo Systems
     */
    class WCML_Privacy_Content_Factory implements \IWPML_Backend_Action_Loader
    {
        /**
         * @return IWPML_Action|null
         */
        public function create()
        {
        }
    }
    /**
     * @author OnTheGo Systems
     */
    class WCML_Privacy_Content extends \WPML_Privacy_Content
    {
        /**
         * @return string
         */
        protected function get_plugin_name()
        {
        }
        /**
         * @return string|array
         */
        protected function get_privacy_policy()
        {
        }
    }
    class WCML_Taxonomy_Translation_Link_Filters
    {
        public function __construct(\WCML_Attributes $wcml_attributes)
        {
        }
        public function add_filters()
        {
        }
        /**
         * @param string $text
         * @param array  $notice
         *
         * @return string
         */
        public function override_translation_notice_text($text, $notice)
        {
        }
        /**
         * @param string $taxonomy
         *
         * @return string
         */
        public function get_screen_url($taxonomy = '')
        {
        }
        public function slug_translation_ui_class($ui_class, $taxonomy)
        {
        }
    }
}
namespace WCML\Multicurrency\Analytics {
    abstract class Export implements \IWPML_Backend_Action, \IWPML_REST_Action, \IWPML_DIC_Action
    {
        const COL_LANGUAGE = 'language';
        const COL_CURRENCY = 'currency';
        /** @var \wpdb $wpdb */
        protected $wpdb;
        public function __construct(\wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string[] $clauses
         *
         * @return string[]
         */
        public abstract function addJoinClauses($clauses);
        /**
         * @param string[] $clauses
         *
         * @return string[]
         */
        public abstract function addSelectClauses($clauses);
        /**
         * This filter is required for case when the exported file
         * is generated with the action-scheduler (report sent by email).
         *
         * @param string $column
         *
         * @return callable(array,array):array
         */
        public function copyProp($column)
        {
        }
    }
    class Hooks implements \IWPML_Action, \WCML\StandAlone\IStandAloneAction
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function enqueueAssets()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function addCurrencyArg($args)
        {
        }
        /**
         * @param array $clauses
         *
         * @return array
         */
        public function addWhere($clauses)
        {
        }
        /**
         * @param int    $page
         * @param string $id
         * @param string $type
         * @param array  $args
         */
        public function saveRequestedCurrencyForReport($page, $id, $type, $args)
        {
        }
    }
    class ExportHPOS extends \WCML\Multicurrency\Analytics\Export
    {
        /**
         * @param string[] $clauses
         *
         * @return string[]
         */
        public function addJoinClauses($clauses)
        {
        }
        /**
         * @param string[] $clauses
         *
         * @return string[]
         */
        public function addSelectClauses($clauses)
        {
        }
    }
    class ExportLegacy extends \WCML\Multicurrency\Analytics\Export
    {
        /**
         * @param string[] $clauses
         *
         * @return string[]
         */
        public function addJoinClauses($clauses)
        {
        }
        /**
         * @param string[] $clauses
         *
         * @return string[]
         */
        public function addSelectClauses($clauses)
        {
        }
    }
    class Factory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader, \IWPML_Deferred_Action_Loader, \WCML\StandAlone\IStandAloneAction
    {
        /**
         * @return string
         */
        public function get_load_action()
        {
        }
        /**
         * @return \IWPML_Action[]
         */
        public function create()
        {
        }
    }
}
namespace WCML\MultiCurrency\Resolver {
    interface Resolver
    {
        /**
         * @return string|null
         */
        public function getClientCurrency();
    }
    class ResolverForDefault implements \WCML\MultiCurrency\Resolver\Resolver
    {
        /**
         * We consider that we should always be able to resolve a currency
         * for any customer.
         *
         * If no currency could be found in the previous steps, we'll
         * fall back to the default WC currency.
         *
         * @inheritDoc
         */
        public function getClientCurrency()
        {
        }
    }
    class ComposedResolver implements \WCML\MultiCurrency\Resolver\Resolver
    {
        /**
         * @param Resolver[] $resolvers
         */
        public function __construct(array $resolvers)
        {
        }
        /**
         * @return string
         */
        public function getClientCurrency()
        {
        }
    }
    class HelperByLocation
    {
        /**
         * @return string|null
         */
        public static function getCurrencyByUserCountry()
        {
        }
    }
    class ResolverForModeLocation implements \WCML\MultiCurrency\Resolver\Resolver
    {
        /**
         * @inheritDoc
         */
        public function getClientCurrency()
        {
        }
    }
    class ResolverForContext implements \WCML\MultiCurrency\Resolver\Resolver
    {
        public function __construct(callable $getOriginalProductLanguage)
        {
        }
        /**
         * @inheritDoc
         */
        public function getClientCurrency()
        {
        }
    }
    class HelperByLanguage
    {
        /**
         * @param string $currentLang
         *
         * @return string|null
         */
        public static function getCurrencyByUserCountry($currentLang)
        {
        }
        /**
         * @return string|null
         */
        public static function getCurrentLanguage()
        {
        }
    }
    class ResolverForModeLanguage implements \WCML\MultiCurrency\Resolver\Resolver
    {
        /**
         * @inheritDoc
         */
        public function getClientCurrency()
        {
        }
    }
    class Factory
    {
        /**
         * @return Resolver
         */
        public static function create()
        {
        }
    }
}
namespace WCML\Multicurrency\Shipping {
    interface ShippingMode
    {
        /**
         * Returns shipping method id (shipping option key).
         *
         * @return string|null
         */
        public function getMethodId();
        /**
         * Returns field title.
         *
         * This value is visible on shipping method configuration screen, on the left.
         *
         * @param string $currencyCode
         *
         * @return string|null
         */
        public function getFieldTitle($currencyCode);
        /**
         * Returns field description.
         *
         * This value is visible on shipping method configuration screen, when mouse over
         * the question mark icon, next to field title.
         *
         * @param string $currencyCode
         *
         * @return string|null
         */
        public function getFieldDescription($currencyCode);
        /**
         * Return the key which will be used in shipping method configuration form.
         *
         * @param string $currencyCode
         *
         * @return string|null
         */
        public function getSettingsFormKey($currencyCode);
        /**
         * If shipping mode has minimal order amount, recalculate and return its value.
         *
         * @param integer|float|string $amount   The value as saved for original language.
         * @param array                $shipping The shipping metadata.
         * @param string               $currency Currency code.
         *
         * @return integer|float|string
         */
        public function getMinimalOrderAmountValue($amount, $shipping, $currency);
        /**
         * If shipping mode has custom cost, recalculate and return its value.
         *
         * @param object $rate Shipping rate metadata.
         * @param string $currency Currency code.
         *
         * @return integer|float|string
         */
        public function getShippingCostValue($rate, $currency);
        /**
         * Checks if the instance of the shipping method has enabled manual pricing.
         *
         * @param array|object|false $instance Currently processed instance of the shipping method.
         *
         * @return bool
         */
        public function isManualPricingEnabled($instance);
    }
    interface ShippingClassesMode extends \WCML\Multicurrency\Shipping\ShippingMode
    {
        /**
         * @param array|object               $rate
         * @param string                     $currency
         * @param string                     $shippingClassKey
         *
         * @return int|mixed|string Shipping class cost for given currency.
         */
        public function getShippingClassCostValue($rate, $currency, $shippingClassKey);
        /**
         * @param array|object               $rate
         * @param string                     $currency
         *
         * @return int|mixed|string "No shipping class" cost for given currency.
         */
        public function getNoShippingClassCostValue($rate, $currency);
    }
    trait ShippingModeBase
    {
        /**
         * @param array|object $rate_settings
         *
         * @return bool
         */
        public static function isEnabled($rate_settings)
        {
        }
    }
    trait DefaultConversion
    {
        /**
         * Try to get cost/amount from options array for default currency.
         *
         * @param float|int $cost         Cost to filter.
         * @param array     $rateSettings Options array.
         * @param string    $costName     Cost key with currency code appended.
         * @param string    $currencyCode Currency code.
         *
         * @return float|int
         */
        public function getValueFromDefaultCurrency($cost, $rateSettings, $costName, $currencyCode)
        {
        }
    }
    trait VariableCost
    {
        use \WCML\Multicurrency\Shipping\DefaultConversion;
        /**
         * @see \WCML\Multicurrency\Shipping\ShippingMode::getFieldTitle
         *
         * @param string $currencyCode
         *
         * return string
         */
        public function getFieldTitle($currencyCode)
        {
        }
        /**
         * @see \WCML\Multicurrency\Shipping\ShippingMode::getFieldDescription
         *
         * @param string $currencyCode
         *
         * @return string
         */
        public function getFieldDescription($currencyCode)
        {
        }
        /**
         * Returns cost key for given currency.
         *
         * @param string $currencyCode Currency code.
         *
         * @return string
         */
        private function getCostKey($currencyCode)
        {
        }
        private function getShippingClassCostKey($shippingClassKey, $currency)
        {
        }
        private function getNoShippingClassCostKey($currency)
        {
        }
        /**
         * @see \WCML\Multicurrency\Shipping\ShippingMode::getSettingsFormKey
         *
         * @param string $currencyCode
         *
         * @return string
         */
        public function getSettingsFormKey($currencyCode)
        {
        }
        /**
         * @see \WCML\Multicurrency\Shipping\ShippingMode::getMinimalOrderAmountValue
         *
         * @param integer|float|string $amount   The value as saved for original language.
         * @param array                $shipping The shipping metadata.
         * @param string               $currency Currency code.
         *
         * @return mixed
         */
        public function getMinimalOrderAmountValue($amount, $shipping, $currency)
        {
        }
        /**
         * @param array|object $rate
         * @param string $currency
         *
         * @return int|mixed|string
         * @see \WCML\Multicurrency\Shipping\ShippingMode::getShippingCostValue
         *
         */
        public function getShippingCostValue($rate, $currency)
        {
        }
        /**
         * @see \WCML\Multicurrency\Shipping\ShippingClassesMode::getShippingClassCostValue
         *
         * @param array|object $rate
         * @param string       $currency
         * @param string       $shippingClassKey
         *
         * @return int Shipping class cost for given currency.
         */
        public function getShippingClassCostValue($rate, $currency, $shippingClassKey)
        {
        }
        /**
         * @see \WCML\Multicurrency\Shipping\ShippingClassesMode::getNoShippingClassCostValue
         *
         * @param array|object $rate
         * @param string       $currency
         *
         * @return int "No shipping class" cost for given currency.
         */
        public function getNoShippingClassCostValue($rate, $currency)
        {
        }
        private function getCostValueForName($rate, $currency, $costName, $rateField)
        {
        }
        /**
         * @see \WCML\Multicurrency\Shipping\ShippingMode::isManualPricingEnabled
         *
         * @param \WC_Shipping_Rate $instance
         *
         * @return mixed
         */
        public function isManualPricingEnabled($instance)
        {
        }
        /**
         * Returns shipping data from wp_options table.
         *
         * @param string $methodId
         * @param int    $instanceId
         *
         * @return bool|mixed|void|null
         */
        private function getWpOption($methodId, $instanceId)
        {
        }
        /**
         * Extracts numeric shipping class ID from shipping class key.
         *
         * @param string $key
         *
         * @return false|string Class ID or false if not found.
         */
        private function getShippingClassTermId($key)
        {
        }
        /**
         * @param string $shippingClassKey
         *
         * @return string
         */
        private function replaceShippingClassId($shippingClassKey)
        {
        }
        /**
         * Wrapper for getShippingClassTermId to avail testing private method.
         *
         * @param string $key
         *
         * @return bool|false|string
         */
        public function _testGetShippingClassTermId($key)
        {
        }
    }
    class FlatRateShipping implements \WCML\Multicurrency\Shipping\ShippingClassesMode
    {
        use \WCML\Multicurrency\Shipping\ShippingModeBase;
        use \WCML\Multicurrency\Shipping\VariableCost;
        public function getMethodId()
        {
        }
    }
    class FreeShipping implements \WCML\Multicurrency\Shipping\ShippingMode
    {
        use \WCML\Multicurrency\Shipping\ShippingModeBase;
        use \WCML\Multicurrency\Shipping\DefaultConversion;
        public function getFieldTitle($currencyCode)
        {
        }
        public function getFieldDescription($currencyCode)
        {
        }
        public function getMethodId()
        {
        }
        public function getSettingsFormKey($currencyCode)
        {
        }
        public function getMinimalOrderAmountValue($amount, $shipping, $currency)
        {
        }
        /**
         * @see \WCML\Multicurrency\Shipping\ShippingMode::getShippingCostValue
         *
         * @param object $rate
         * @param string $currency
         *
         * @return int|mixed|string
         */
        public function getShippingCostValue($rate, $currency)
        {
        }
        public function isManualPricingEnabled($instance)
        {
        }
    }
    class ShippingHooksFactory implements \IWPML_Deferred_Action_Loader, \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader, \WCML\StandAlone\IStandAloneAction
    {
        public function get_load_action()
        {
        }
        public function create()
        {
        }
    }
    class AdminHooks implements \IWPML_Action, \WCML\StandAlone\IStandAloneAction
    {
        const WCML_SHIPPING_COSTS = 'wcml_shipping_costs';
        /**
         * AdminHooks constructor.
         *
         * @param \WCML_Multi_Currency $wcmlMultiCurrency
         */
        public function __construct(\WCML_Multi_Currency $wcmlMultiCurrency)
        {
        }
        /**
         * Registers hooks.
         */
        public function add_hooks()
        {
        }
        public function addCurrencyShippingFields(\WCML\Multicurrency\Shipping\ShippingMode $shippingMode)
        {
        }
        /**
         * Adds input field for each registered currency to provide shipping costs.
         *
         * @param array $field
         *
         * @return array
         */
        public function addCurrenciesFields(array $field, \WCML\Multicurrency\Shipping\ShippingMode $shippingMode)
        {
        }
        /**
         * Adds one field for given currency.
         *
         * @param array  $field
         * @param string $currencyCode
         *
         * @return mixed
         */
        protected function getCurrencyField($field, $currencyCode, \WCML\Multicurrency\Shipping\ShippingMode $shippingMode)
        {
        }
        /**
         * Enqueues script responsible for JS actions on shipping fields.
         */
        public function loadJs()
        {
        }
    }
    class UnsupportedShipping implements \WCML\Multicurrency\Shipping\ShippingMode
    {
        public function getMethodId()
        {
        }
        public function getFieldTitle($currencyCode)
        {
        }
        public function getFieldDescription($currencyCode)
        {
        }
        public function getSettingsFormKey($currencyCode)
        {
        }
        public function getMinimalOrderAmountValue($amount, $shipping, $currency)
        {
        }
        public function isManualPricingEnabled($instance = false)
        {
        }
        public function getMinimalOrderAmountKey($currencyCode)
        {
        }
        public function getShippingCostValue($rate, $currency)
        {
        }
    }
    class ShippingModeProvider
    {
        public static function getAll()
        {
        }
        /**
         * @param string $shippingMode
         * @return ShippingMode
         */
        public static function get($shippingMode)
        {
        }
    }
    class ShippingClasses
    {
        /**
         * Adds shipping classes for currencies fields to shipping method wp-admin GUI.
         *
         * @param array               $field
         * @param \WCML_Multi_Currency $wcmlMultiCurrency
         *
         * @return array
         */
        public static function addFields(array $field, \WCML_Multi_Currency $wcmlMultiCurrency)
        {
        }
        /**
         * Returns source language of the shipping class which was created originally.
         *
         * @param \WP_Term $shippingClass
         *
         * @return string|null
         */
        protected static function getSourceLanguageCode($shippingClass)
        {
        }
        /**
         * Adds field to the GUI which explains user should switch to the other language to provide the data.
         *
         * @param array    $field
         * @param \WP_Term $shippingClass
         * @param string   $classSourceLanguageCode
         *
         * @return array
         */
        protected static function askToSwitchLanguage($field, $shippingClass, $classSourceLanguageCode)
        {
        }
        protected static function addShippingClassField($field, $shippingClass, $currencyCode)
        {
        }
        protected static function addNoShippingClassField($field, $currencyCode)
        {
        }
    }
    class LocalPickup implements \WCML\Multicurrency\Shipping\ShippingMode
    {
        use \WCML\Multicurrency\Shipping\ShippingModeBase;
        use \WCML\Multicurrency\Shipping\VariableCost;
        public function getMethodId()
        {
        }
    }
    class FrontEndHooks implements \IWPML_Action, \WCML\StandAlone\IStandAloneAction
    {
        public function __construct($multiCurrency)
        {
        }
        public function add_hooks()
        {
        }
        public function getShippingCost(\WCML\Multicurrency\Shipping\ShippingMode $shippingMode)
        {
        }
    }
}
namespace WCML\MultiCurrency {
    class Settings
    {
        const MODE_BY_LANGUAGE = 'by_language';
        const MODE_BY_LOCATION = 'by_location';
        /**
         * @return string|null
         */
        public static function getMode()
        {
        }
        /**
         * @return bool
         */
        public static function isModeByLanguage()
        {
        }
        /**
         * @return bool
         */
        public static function isModeByLocation()
        {
        }
        /**
         * @param string $mode
         *
         * @return void
         */
        public static function setMode($mode)
        {
        }
        /**
         * @return bool
         */
        public static function isDisplayOnlyCustomPrices()
        {
        }
        /**
         * @param string $code
         *
         * @return bool
         */
        public static function isActiveCurrency($code)
        {
        }
        /**
         * @return array
         */
        public static function getActiveCurrencyCodes()
        {
        }
        /**
         * @return array
         */
        public static function getCurrenciesOptions()
        {
        }
        /**
         * @param string|array $keyOrPath
         * @param mixed|null   $default
         *
         * @return mixed
         */
        public static function getCurrenciesOption($keyOrPath, $default = null)
        {
        }
        /**
         * @param string $currency
         * @param string $clientCountry
         *
         * @return bool
         */
        public static function isValidCurrencyByCountry($currency, $clientCountry)
        {
        }
        /**
         * @param string $country
         *
         * @return string|null
         */
        public static function getFirstAvailableCurrencyByCountry($country)
        {
        }
        /**
         * @return array
         */
        public static function getDefaultCurrencies()
        {
        }
        /**
         * @return array
         */
        public static function getOrderedCurrencyCodes()
        {
        }
        /**
         * @param string $lang
         *
         * @return bool
         */
        public static function isDefaultCurrencyByLocationForLang($lang)
        {
        }
        /**
         * @param string $lang
         *
         * @return string A real currency (e.g. "USD") or "location" or a falsy string for "keep" (default).
         */
        public static function getDefaultCurrencyForLang($lang)
        {
        }
        /**
         * @param string $currency
         * @param string $lang
         *
         * @return bool
         */
        public static function isValidCurrencyForLang($currency, $lang)
        {
        }
        /**
         * @param string $lang
         *
         * @return string|null
         */
        public static function getFirstAvailableCurrencyForLang($lang)
        {
        }
        /**
         * @return bool
         */
        public static function isAutomaticRateEnabled()
        {
        }
    }
}
namespace WCML\Multicurrency\Transient {
    class Hooks
    {
        /**
         * @param string $key
         */
        public static function addHooks($key)
        {
        }
    }
}
namespace WCML\Multicurrency\UI {
    class Hooks implements \IWPML_Action, \WCML\StandAlone\IStandAloneAction
    {
        const HANDLE = 'wcml-multicurrency-options';
        /**
         * @param WCML_Multi_Currency              $multiCurrency
         * @param WCML_Currencies_Payment_Gateways $currenciesPaymentGateways
         * @param SitePress|NullSitePress          $sitepress
         * @param array                            $wcmlSettings
         */
        public function __construct(\WCML_Multi_Currency $multiCurrency, \WCML_Currencies_Payment_Gateways $currenciesPaymentGateways, \WPML\Core\ISitePress $sitepress, array $wcmlSettings)
        {
        }
        public function add_hooks()
        {
        }
        public function loadAssets()
        {
        }
        /**
         * @param string $lastRateUpdate
         *
         * @return string|null
         */
        public static function formatLastRateUpdate($lastRateUpdate)
        {
        }
    }
    class Factory implements \IWPML_Backend_Action_Loader, \IWPML_Deferred_Action_Loader, \WCML\StandAlone\IStandAloneAction
    {
        public function get_load_action()
        {
        }
        /**
         * @return \IWPML_Action|null
         */
        public function create()
        {
        }
    }
}
namespace WCML\Options {
    class WPML
    {
        /** @return bool */
        public static function shouldTranslateEverything()
        {
        }
        /**
         * @param string $postType
         * @param bool   $state
         */
        public static function setAutomatic($postType, $state)
        {
        }
        /**
         * @param string $postType
         *
         * @return bool
         */
        public static function isAutomatic($postType)
        {
        }
        /**
         * @return bool
         */
        public static function useAte()
        {
        }
    }
}
namespace WCML\Reports\Categories {
    class Query implements \IWPML_REST_Action, \IWPML_Backend_Action
    {
        var $actionWasRemoved = false;
        /**
         * Registers hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * @param object $results Categories query (note: in March 2021, WC Admin code is showing a PHPDoc returning an array which is not what we get)
         *
         * @return object
         */
        public function translateCategoryTitles($results)
        {
        }
        public function removeWpmlTermClausesFilter()
        {
        }
        public function addWpmlTermClausesFilter()
        {
        }
    }
}
namespace WCML\Reports {
    class Hooks implements \IWPML_Backend_Action
    {
        /**
         * Registers hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * Remove the 'all' language from the admin language switcher.
         * @param mixed $items
         * @return mixed
         */
        function removeAllFromAnalytics($items)
        {
        }
    }
}
namespace WCML\Reports\Orders {
    class Hooks implements \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
        public function enqueueAssets()
        {
        }
    }
}
namespace WCML\Reports\Products {
    class Query implements \IWPML_REST_Action
    {
        /**
         * Registers hooks.
         */
        public function add_hooks()
        {
        }
        /**
         * @param object $results Products query.
         *
         * @return object
         */
        public function joinProductTranslations($results)
        {
        }
        /**
         * @param object $results Categories query (note: in March 2021, WC Admin code is showing a PHPDoc returning an array which is not what we get)
         *
         * @return object
         */
        public function translateProductTitles($results)
        {
        }
    }
}
namespace WCML\AdminDashboard {
    class Hooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        /**
         * @param SitePress|NullSitePress $sitepress
         * @param wpdb                    $wpdb
         */
        public function __construct(\WPML\Core\ISitePress $sitepress, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function clearStockTransients()
        {
        }
        /**
         * @param string $query
         *
         * @return string
         */
        public function addLanguageQuery($query)
        {
        }
    }
}
namespace WCML\DisplayAsTranslated {
    class FrontendHooksFactory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class ProductCatHooks implements \IWPML_Frontend_Action
    {
        const KEY_FIX_TERM_COUNT_ZERO = 'wcml_fix_term_count_zero';
        public function __construct(\WPML_Translation_Element_Factory $elementFactory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $args
         *
         * @return array
         */
        public function addFixCountArg($args)
        {
        }
        /**
         * @param array      $terms
         * @param array|null $taxonomy
         * @param array      $termQueryVars
         *
         * @return array
         */
        public function fixTermsWithZeroCount($terms, $taxonomy, $termQueryVars)
        {
        }
    }
}
namespace WCML\MultiCurrency\ExchangeRateServices {
    /**
     * Class Service
     */
    abstract class Service
    {
        /**
         * @return string
         */
        public abstract function getId();
        /**
         * @return string
         */
        public abstract function getName();
        /**
         * @return string
         */
        public abstract function getUrl();
        /**
         * @return string
         */
        public abstract function getApiUrl();
        /**
         * @return bool
         */
        public abstract function isKeyRequired();
        /**
         * @return void
         */
        public function resetConnectionCache()
        {
        }
        /**
         * @param string $from Base currency.
         * @param array  $tos  Target currencies.
         *
         * @return mixed
         * @throws \Exception Thrown where there are connection problems.
         */
        public function getRates($from, $tos)
        {
        }
        /**
         * @param string $from The base currency code.
         * @param array  $tos  The target currency codes.
         *
         * @return array|\WP_Error
         */
        protected function makeRequest($from, $tos)
        {
        }
        /**
         * @return array
         */
        protected function getRequestHeaders()
        {
        }
        /**
         * @param object $decodedData
         *
         * @return bool
         */
        protected function isInvalidResponse($decodedData)
        {
        }
        /**
         * @param object $validData
         * @param string $from
         * @param array  $tos
         *
         * @return array
         */
        protected function extractRates($validData, $from, $tos)
        {
        }
        /**
         * Each service has its own response signature,
         * and I also noticed that it does not always
         * respect their own doc.
         *
         * So the idea is to just catch all possible information
         * and return it as raw output.
         *
         * Example: "error_code: 104 - error_message: ..."
         *
         * @param array|\stdClass $response
         *
         * @return string
         */
        public static function get_formatted_error($response)
        {
        }
        /**
         * @return array
         */
        public function getSettings()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|null
         */
        public function getSetting($key)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        public function saveSetting($key, $value)
        {
        }
        /**
         * @param string $error_message
         */
        public function saveLastError($error_message)
        {
        }
        public function clearLastError()
        {
        }
        /**
         * @return mixed
         */
        public function getLastError()
        {
        }
        /**
         * @return string|null
         */
        protected function getApiKey()
        {
        }
    }
    abstract class ApiLayerService extends \WCML\MultiCurrency\ExchangeRateServices\Service
    {
        /**
         * @return string
         */
        protected abstract function getApiLayerUrl();
        /**
         * @return string
         */
        protected abstract function getApiLegacyUrl();
        /**
         * @return string
         */
        public function getApiUrl()
        {
        }
        /**
         * @return void
         */
        public function resetConnectionCache()
        {
        }
        /**
         * @param string $from The base currency code.
         * @param array  $tos  The target currency codes.
         *
         * @return array|\WP_Error
         */
        protected function makeRequest($from, $tos)
        {
        }
        /**
         * @return array
         */
        protected function getRequestHeaders()
        {
        }
        /**
         * @return bool
         */
        public function isKeyRequired()
        {
        }
    }
    /**
     * Class CurrencyLayer
     */
    class CurrencyLayer extends \WCML\MultiCurrency\ExchangeRateServices\ApiLayerService
    {
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @return string
         */
        protected function getApiLayerUrl()
        {
        }
        /**
         * @return string
         */
        protected function getApiLegacyUrl()
        {
        }
        /**
         * @param object $decodedData
         *
         * @return bool
         */
        protected function isInvalidResponse($decodedData)
        {
        }
        /**
         * @param object $validData
         * @param string $from
         * @param array  $tos
         *
         * @return array
         */
        protected function extractRates($validData, $from, $tos)
        {
        }
    }
    /**
     * Class OpenExchangeRates
     */
    class OpenExchangeRates extends \WCML\MultiCurrency\ExchangeRateServices\Service
    {
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @return string
         */
        public function getApiUrl()
        {
        }
        /**
         * @return bool
         */
        public function isKeyRequired()
        {
        }
    }
    /**
     * Class Fixerio
     */
    class Fixerio extends \WCML\MultiCurrency\ExchangeRateServices\ApiLayerService
    {
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @return string
         */
        protected function getApiLayerUrl()
        {
        }
        /**
         * @return string
         */
        protected function getApiLegacyUrl()
        {
        }
    }
    /**
     * Class ExchangeRatesApi
     */
    class ExchangeRatesApi extends \WCML\MultiCurrency\ExchangeRateServices\ApiLayerService
    {
        /**
         * @return string
         */
        public function getId()
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @return string
         */
        protected function getApiLayerUrl()
        {
        }
        /**
         * @return string
         */
        protected function getApiLegacyUrl()
        {
        }
    }
}
namespace {
    /**
     * Class WCML_Payment_Gateway
     */
    abstract class WCML_Payment_Gateway
    {
        const OPTION_KEY = 'wcml_payment_gateway_';
        /**
         * @var string
         */
        protected $current_currency;
        /**
         * @var string
         */
        protected $default_currency;
        /**
         * @var array
         */
        protected $active_currencies;
        /**
         * @var WC_Payment_Gateway
         */
        protected $gateway;
        /**
         * @var woocommerce_wpml
         */
        protected $woocommerce_wpml;
        /**
         * @param WC_Payment_Gateway $gateway
         * @param woocommerce_wpml   $woocommerce_wpml
         */
        public function __construct(\WC_Payment_Gateway $gateway, \woocommerce_wpml $woocommerce_wpml)
        {
        }
        /**
         * @param string $current_currency
         * @param array  $active_currencies
         *
         * @return string
         *
         * @deprecated since 4.9.0, use React component instead.
         */
        public function get_settings_output($current_currency, $active_currencies)
        {
        }
        /**
         * @deprecated since 4.9.0, use React component instead.
         */
        public function show()
        {
        }
        public abstract function get_output_model();
        protected function is_current_currency_default()
        {
        }
        /**
         * @return WC_Payment_Gateway
         */
        public function get_gateway()
        {
        }
        /**
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * @param string $currency
         *
         * @return array|null
         */
        public function get_setting($currency)
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        public function save_setting($key, $value)
        {
        }
        public function get_active_currencies()
        {
        }
    }
    /**
     * Class WCML_Payment_Gateway_Stripe
     */
    class WCML_Payment_Gateway_Stripe extends \WCML_Payment_Gateway
    {
        const ID = 'stripe';
        public function get_output_model()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return array
         */
        public function get_currencies_details()
        {
        }
        /**
         * Filter Stripe settings before WC initialized them
         *
         * @param array $settings
         *
         * @return array
         */
        public static function filter_stripe_settings($settings)
        {
        }
    }
    /**
     * Class WCML_Payment_Gateway_PayPal
     */
    class WCML_Payment_Gateway_PayPal extends \WCML_Payment_Gateway
    {
        const ID = 'paypal';
        const SUPPORTED_CURRENCIES = ['AUD', 'BRL', 'CAD', 'MXN', 'NZD', 'HKD', 'SGD', 'USD', 'EUR', 'JPY', 'TRY', 'NOK', 'CZK', 'DKK', 'HUF', 'ILS', 'MYR', 'PHP', 'PLN', 'SEK', 'CHF', 'TWD', 'THB', 'GBP', 'RMB', 'RUB', 'INR'];
        public function get_output_model()
        {
        }
        /**
         * @param string $currency
         *
         * @return bool
         */
        public function is_valid_for_use($currency)
        {
        }
        /**
         * @return array
         */
        public function get_currencies_details()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array    $args
         * @param WC_Order $order
         *
         * @return array
         */
        public function filter_paypal_args($args, $order)
        {
        }
        /**
         * Filter PayPal supported currencies before WC initialized it
         *
         * @param array $supported_currencies
         *
         * @return array
         */
        public static function filter_supported_currencies($supported_currencies)
        {
        }
    }
    /**
     * Class WCML_Not_Supported_Payment_Gateway
     */
    class WCML_Not_Supported_Payment_Gateway extends \WCML_Payment_Gateway
    {
        public function get_output_model()
        {
        }
    }
    /**
     * Class WCML_Currencies_Payment_Gateways
     */
    class WCML_Currencies_Payment_Gateways
    {
        const OPTION_KEY = 'wcml_custom_payment_gateways_for_currencies';
        /**
         * @param woocommerce_wpml $woocommerce_wpml
         * @param WPML_WP_API      $wp_api
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WPML_WP_API $wp_api)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $currency
         *
         * @return bool
         */
        public function is_enabled($currency)
        {
        }
        /**
         * @param string $currency
         * @param bool   $value
         */
        public function set_enabled($currency, $value)
        {
        }
        public function init_gateways()
        {
        }
        /**
         * @return array
         */
        public function get_gateways()
        {
        }
        /**
         * @return array
         */
        public function get_supported_gateways()
        {
        }
        /**
         * @param string $description
         * @param string $id
         *
         * @return string
         */
        public function filter_gateway_description($description, $id)
        {
        }
    }
    /**
     * Class WCML_Payment_Gateway_Bacs
     */
    class WCML_Payment_Gateway_Bacs extends \WCML_Payment_Gateway
    {
        public function get_output_model()
        {
        }
        public function add_hooks()
        {
        }
        public function filter_bacs_accounts($accounts)
        {
        }
    }
    /**
     * @see https://wordpress.org/plugins/woocommerce-paypal-payments/
     */
    class WCML_Payment_Gateway_PayPal_V2 extends \WCML_Payment_Gateway_PayPal
    {
        const ID = 'ppcp-gateway';
        const FIELDS = ['merchant_email', 'merchant_id', 'client_id', 'client_secret', 'currency'];
        const BEARER_TOKEN_TRANSIENT = 'ppcp-paypal-bearerppcp-bearer';
        public function get_output_model()
        {
        }
        /**
         * @return array
         */
        public function get_currencies_details()
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public static function filter_ppcp_args($settings)
        {
        }
    }
    /**
     * Class WCML_Exchange_Rates
     */
    class WCML_Exchange_Rates
    {
        const CRONJOB_EVENT = 'wcml_exchange_rates_update';
        const DIGITS_AFTER_DECIMAL_POINT = 6;
        const KEY_RATES_UPDATED_FLAG = 'wcml_exchange_rates_manually_updated';
        /**
         * @param woocommerce_wpml $woocommerce_wpml
         * @param WP_Locale|mixed  $wp_locale
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, $wp_locale)
        {
        }
        /**
         * Please use `make( WCML_Exchange_Rates::class )` to get the instance of this class.
         *
         * @return WCML_Exchange_Rates
         */
        public static function create()
        {
        }
        public function add_actions()
        {
        }
        public function init()
        {
        }
        public function initialize_settings()
        {
        }
        /**
         * @return array
         */
        public function get_services()
        {
        }
        /**
         * @param string                     $service_id
         * @param Service $service
         */
        public function add_service($service_id, $service)
        {
        }
        /**
         * @return array
         */
        public function get_settings()
        {
        }
        /**
         * @param string $key
         *
         * @return mixed|null
         */
        public function get_setting($key)
        {
        }
        public function save_settings()
        {
        }
        /**
         * @param string $key
         * @param mixed  $value
         */
        public function save_setting($key, $value)
        {
        }
        public function update_exchange_rates_ajax()
        {
        }
        /**
         * @return array
         * @throws Exception
         */
        public function update_exchange_rates()
        {
        }
        /**
         * @param array $currencies
         *
         * @return array
         * @throws Exception
         */
        public function fetch_exchange_rates_from_active_service($currencies)
        {
        }
        public function apply_lifting_charge(&$rates)
        {
        }
        /**
         * @param string $currency
         *
         * @return mixed
         */
        public function get_currency_rate($currency)
        {
        }
        /**
         * @param array $post_data
         */
        public function update_exchange_rate_options($post_data)
        {
        }
        public function update_rates_on_service_or_key_changed()
        {
        }
        public function enable_update_cronjob()
        {
        }
        public function delete_update_cronjob()
        {
        }
        /**
         * @param array $schedules
         *
         * @return array
         */
        public function cron_schedules($schedules)
        {
        }
        /**
         * Check if a service is defined and has a key if needed.
         *
         * @return bool
         */
        public function is_current_service_actionable()
        {
        }
    }
}
namespace WCML\MultiCurrency {
    class GeolocationFrontendHooks implements \IWPML_Frontend_Action, \WCML\StandAlone\IStandAloneAction
    {
        const KEY_CLIENT_COUNTRY = 'wcml_client_country';
        public function add_hooks()
        {
        }
        public static function storeUserCountry()
        {
        }
    }
    class GeolocationBackendHooks implements \IWPML_Backend_Action, \WCML\StandAlone\IStandAloneAction
    {
        public function add_hooks()
        {
        }
    }
    class Geolocation
    {
        const DEFAULT_COUNTRY_CURRENCY_CONFIG = '/res/geolocation/country-currency.json';
        const MODE_BY_LANGUAGE = \WCML\MultiCurrency\Settings::MODE_BY_LANGUAGE;
        const MODE_BY_LOCATION = \WCML\MultiCurrency\Settings::MODE_BY_LOCATION;
        /**
         * @return bool
         */
        public static function isUsed()
        {
        }
        /**
         * @param string $country
         *
         * @return string|null
         */
        public static function getOfficialCurrencyCodeByCountry($country)
        {
        }
        /**
         * @return string
         */
        public static function getUserCountry()
        {
        }
    }
}
namespace WCML\Orders {
    class Helper
    {
        const CACHE_GROUP = 'wcml_order_currency';
        const KEY_LEGACY_CURRENCY = '_order_currency';
        /**
         * @param int  $orderId
         * @param bool $useDB
         *
         * @return string|null
         */
        public static function getCurrency($orderId, $useDB = false)
        {
        }
        /**
         * @param int    $orderId
         * @param string $currency
         *
         * @return void
         */
        public static function setCurrency($orderId, $currency)
        {
        }
        /**
         * Checks if the current screen is an admin screen for WooCommerce New Order (Legacy or HPOS).
         *
         * @return bool
         */
        public static function isOrderCreateAdminScreen() : bool
        {
        }
        /**
         * Checks if the current screen is an admin screen for list of WooCommerce orders (Legacy or HPOS).
         *
         * @return bool
         */
        public static function isOrderListAdminScreen() : bool
        {
        }
        /**
         * Checks if the current screen is an admin screen for WooCommerce Edit Order (Legacy or HPOS).
         *
         * @return bool
         */
        public static function isOrderEditAdminScreen() : bool
        {
        }
    }
}
namespace WCML\Orders\Legacy {
    class Helper
    {
        /**
         * Legacy constant for CRUD pages for orders (e.g. edit.php?post_type=shop_order)
         *
         * @var string
         */
        const POST_TYPE_ORDER = 'shop_order';
        /**
         * Legacy constant for list of orders page (e.g. edit.php?post_type=shop_order)
         *
         * @var string
         */
        const PAGE_ORDER_LIST = 'edit.php';
        /**
         * Legacy constant for new order page (e.g. post-new.php?post_type=shop_order)
         *
         * @var string
         */
        const PAGE_ORDER_NEW = 'post-new.php';
        /**
         * Legacy constant for edit order page (e.g. post.php?post=162&action=edit)
         *
         * @var string
         */
        const PAGE_ORDER_EDIT = 'post.php';
        /**
         * Legacy constant for edit action
         *
         * @var string
         */
        const ACTION_EDIT = 'edit';
        /**
         * Checks if the current screen is an admin screen for Legacy WooCommerce New Order (non-HPOS).
         *
         * @return bool
         */
        public static function isOrderCreateAdminScreen()
        {
        }
        /**
         * Checks if the current screen is an admin screen for Legacy list of WooCommerce orders (non-HPOS).
         *
         * @return bool
         */
        public static function isOrderListAdminScreen()
        {
        }
        /**
         * Checks if the current screen is an admin screen for WooCommerce Legacy Edit Order (non-HPOS).
         *
         * @return bool
         */
        public static function isOrderEditAdminScreen()
        {
        }
    }
}
namespace {
    /**
     * Class WCML_Admin_Currency_Selector
     */
    class WCML_Admin_Currency_Selector
    {
        const NONCE_KEY = 'wcml-admin-currency-selector';
        /**
         * WCML_Admin_Currency_Selector constructor.
         *
         * @param woocommerce_wpml  $woocommerce_wpml
         * @param WCML_Admin_Cookie $currency_cookie
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml, \WCML_Admin_Cookie $currency_cookie)
        {
        }
        public function add_hooks()
        {
        }
        public function load_js()
        {
        }
        /**
         * Add currency drop-down on dashboard page ( WooCommerce status block )
         */
        public function show_dashboard_currency_selector()
        {
        }
        public function set_dashboard_currency_ajax()
        {
        }
        /**
         * Set dashboard currency cookie
         *
         * @param string $currency_code
         */
        public function set_dashboard_currency($currency_code = '')
        {
        }
        /**
         * Get dashboard currency cookie
         *
         * @return string
         */
        public function get_cookie_dashboard_currency()
        {
        }
        /**
         * Filter currency symbol on dashboard page
         *
         * @param string $currency Currency code
         *
         * @return string
         */
        public function filter_dashboard_currency_symbol($currency)
        {
        }
    }
    /**
     * Class WCML_Currencies
     */
    class WCML_Currencies
    {
        /**
         * WCML_Currencies constructor.
         *
         * @param \woocommerce_wpml $woocommerce_wpml And instance of \woocommerce_wpml.
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        /**
         * It hooks to `update_option_woocommerce_currency` if the conditions are right.
         */
        public function add_hooks()
        {
        }
        /**
         * It sets the default currency for each language.
         *
         * @param string $old_value The value of the option before the update.
         * @param string $new_value The new value of the option.
         */
        public function setup_multi_currency_on_currency_update($old_value, $new_value)
        {
        }
    }
}
namespace WCML\Tax\Strings {
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        const STRINGS_CONTEXT = 'admin_texts_woocommerce_tax';
        public function add_hooks()
        {
        }
        /**
         * @param string $label
         * @param int $taxId
         *
         * @return string
         */
        public function translateLabelString($label, $taxId)
        {
        }
        /**
         * @param int $taxId
         * @param array $taxRate
         */
        public function registerLabelString($taxId, $taxRate)
        {
        }
    }
}
namespace {
    class WCML_Admin_Cookie
    {
        /**
         * WCML_Admin_Cookie constructor.
         *
         * @param string $name
         */
        public function __construct($name)
        {
        }
        /**
         * @param mixed $value
         * @param int   $expiration
         */
        public function set_value($value, $expiration = \null)
        {
        }
        /**
         * @return mixed
         */
        public function get_value()
        {
        }
    }
    class WCML_ATE_Activate_Synchronization implements \IWPML_Action, \IWPML_Backend_Action_Loader
    {
        public function add_hooks()
        {
        }
        /**
         * @return WCML_ATE_Activate_Synchronization
         */
        public function create()
        {
        }
    }
}
namespace WCML\AdminTexts {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace WCML\COT {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_Backend_Action, \WCML\StandAlone\IStandAloneAction
    {
        const FEATURE = 'custom_order_tables';
        public function add_hooks()
        {
        }
    }
    class Helper
    {
        /**
         * HPOS constant for CRUD pages for orders (admin.php?page=wc-orders)
         *
         * @var string
         *
         * @see \Automattic\WooCommerce\Utilities\OrderUtil::get_order_admin_screen()
         */
        const WC_ORDERS = 'wc-orders';
        /**
         * Determines if the HPOS table is already created or not.
         *
         * @return bool
         */
        public static function getTableExists()
        {
        }
        /**
         * The name of the custom order table.
         *
         * @return string|null
         */
        public static function getTableName()
        {
        }
        /**
         * The name of the custom order meta table.
         *
         * @return string|null
         */
        public static function getMetaTableName()
        {
        }
        /**
         * Determine if the custom order table is in usage.
         *
         * @return bool
         */
        public static function isUsageEnabled()
        {
        }
        /**
         * Checks if passed id is a WC_Order object by calling Automattic\WooCommerce\Utilities\OrderUtil::is_order()
         *
         * @param int $id
         * @return bool
         */
        public static function isOrder(int $id) : bool
        {
        }
        /**
         * Checks if the current screen is an admin screen for WooCommerce New Order with the HPOS.
         *
         * @return bool
         */
        public static function isOrderCreateAdminScreen()
        {
        }
        /**
         * Checks if the current screen is an admin screen for list of WooCommerce orders with the HPOS.
         *
         * @return bool
         */
        public static function isOrderListAdminScreen()
        {
        }
        /**
         * Checks if the current screen is an admin screen for WooCommerce Edit Order with the HPOS.
         *
         * @return bool
         */
        public static function isOrderEditAdminScreen()
        {
        }
    }
}
namespace {
    class WCML_Url_Filters_Redirect_Location
    {
        /**
         * @param WPML_URL_Converter $wpml_url_converter
         */
        public function __construct(\WPML_URL_Converter $wpml_url_converter)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param string $link
         *
         * @return string
         */
        public function filter($link)
        {
        }
    }
}
namespace WCML\Attributes {
    class LookupFilters implements \IWPML_Action
    {
        public function __construct(\SitePress $sitepress, \wpdb $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $query
         *
         * @return array
         */
        public function adjustAttributeWidgetCount($query)
        {
        }
    }
    class LookupTable implements \IWPML_Action
    {
        /**
         * @param \SitePress $sitepress
         */
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int $productId
         */
        public function triggerUpdateForTranslations($productId)
        {
        }
        /**
         * @return \WCML\Utilities\Suspend\Suspend
         */
        public function adjustTermsFilters()
        {
        }
        /**
         * @param \WC_Product_Attribute[] $attributes
         * @param \WC_Product             $product
         *
         * @return \WC_Product_Attribute[]
         */
        public function translateAttributeOptions($attributes, $product)
        {
        }
        /**
         * @param array                 $attributes
         * @param \WC_Product_Variation $product
         *
         * @return array
         */
        public function translateVariationTerms($attributes, $product)
        {
        }
        public function regenerateTable()
        {
        }
    }
    class LookupTableFactory implements \IWPML_Backend_Action_Loader, \IWPML_Frontend_Action_Loader
    {
        const MIN_WC_VERSION = '6.3';
        /**
         * @return \IWPML_Action|null
         */
        public function create()
        {
        }
        /**
         * @return bool
         */
        public static function hasFeature()
        {
        }
    }
    class LookupFiltersFactory implements \IWPML_Frontend_Action_Loader
    {
        /**
         * @return \IWPML_Action|null
         */
        public function create()
        {
        }
        /**
         * @return bool
         */
        public static function isEnabled()
        {
        }
    }
}
namespace WCML\MO {
    class Hooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action
    {
        const WC_DOMAIN = 'woocommerce';
        public function add_hooks()
        {
        }
        public function forceRemoveUnloadedDomain()
        {
        }
        /**
         * @param bool   $override
         * @param string $domain
         * @param bool   $reloadable
         *
         * @return bool
         */
        public function forceUnloadWCTextdomainWithReloadableArg($override, $domain, $reloadable)
        {
        }
        /**
         * @param bool|null   $loaded
         * @param string      $domain
         * @param string      $mofile
         * @param string|null $locale
         *
         * @return bool|null
         */
        public function preLoadTextDomainFilter($loaded, $domain, $mofile, $locale)
        {
        }
    }
}
namespace {
    class WCML_Payment_Method_Filter
    {
        public function add_hooks()
        {
        }
        public function payment_method_string($title, $object)
        {
        }
    }
}
namespace WCML\Rest {
    class Functions
    {
        const STORE_NAMESPACE = 'wc/store/v1';
        /**
         * Check if we are requesting a WooCommerce Analytics page.
         *
         * @return bool
         */
        public static function isAnalyticsPage()
        {
        }
        /**
         * Check if is request to the WooCommerce REST API.
         *
         * @return bool
         */
        public static function isRestApiRequest()
        {
        }
        /**
         * Check if is request to the WooCommerce Analytics REST API.
         *
         * @return bool
         */
        public static function isAnalyticsRestRequest()
        {
        }
        /**
         * Check if is request to the WooCommerce Store API.
         *
         * @return bool
         */
        public static function isStoreAPIRequest()
        {
        }
        /**
         * Returns the version number of the API used for the current request
         *
         * @return int
         */
        public static function getApiRequestVersion()
        {
        }
        /**
         * @param \WP_REST_Request $request
         *
         * @return string|null
         */
        public static function getStoreStrippedEndpoint($request)
        {
        }
    }
    class Hooks
    {
        public static function addHooks()
        {
        }
    }
}
namespace WCML\Rest\Language {
    class Set
    {
        public static function fromUrlQueryVar()
        {
        }
        /**
         * @param \WP_REST_Response|\WP_HTTP_Response|\WP_Error|mixed $response
         * @param array                                               $handler
         * @param \WP_REST_Request                                    $request
         *
         * @return \WP_REST_Response|\WP_HTTP_Response|\WP_Error|mixed
         */
        public static function beforeCallbacks($response, $handler, \WP_REST_Request $request)
        {
        }
    }
}
namespace WCML\Rest {
    /**
     * We need to reuse the `after_save_post` protected method
     * of the \WPML_Post_Translation and the only way is by inheritance.
     * The abstract methods are not used in the parent, but
     * we need implement it to respect the contract.
     * We are also including the WCML logic to `synchronize_products`.
     */
    class ProductSaveActions extends \WPML_Post_Translation
    {
        public function __construct(array $settings, \wpdb $wpdb, \SitePress $sitepress, \WCML_Synchronize_Product_Data $productDataSync)
        {
        }
        /**
         * @param object|\WC_Abstract_Legacy_Product $product
         * @param int|null                           $trid
         * @param string                             $langCode
         * @param int|null                           $translationOf
         */
        public function run($product, $trid, $langCode, $translationOf)
        {
        }
        public function save_post_actions($postId, $post)
        {
        }
        /**
         * @inheritDoc
         */
        public function get_save_post_trid($postId, $post_status)
        {
        }
        /**
         * @inheritDoc
         */
        protected function get_save_post_source_lang($trid, $language_code, $default_language)
        {
        }
    }
}
namespace WCML\Rest\Wrapper {
    class Handler
    {
        /**
         * @param array            $args
         * @param \WP_REST_Request $request Request object.
         *
         * @return array
         */
        public function query($args, $request)
        {
        }
        /**
         * @param \WP_REST_Response $response The response object.
         * @param object            $object Object data.
         * @param \WP_REST_Request  $request Request object.
         *
         * @return \WP_REST_Response
         */
        public function prepare($response, $object, $request)
        {
        }
        /**
         * @param object           $object Inserted object.
         * @param \WP_REST_Request $request Request object.
         * @param boolean          $creating True when creating object, false when updating.
         */
        public function insert($object, $request, $creating)
        {
        }
    }
    class ProductAttributes extends \WCML\Rest\Wrapper\Handler
    {
        public function __construct(\WCML_WC_Strings $strings)
        {
        }
        /**
         * Translates attribute name in woocommerce_rest_prepare_product_attribute filter
         *
         * @param \WP_REST_Response $response
         * @param object|\WP_Term   $object
         * @param \WP_REST_Request  $request
         *
         * @return \WP_REST_Response
         */
        public function prepare($response, $object, $request)
        {
        }
    }
    class ProductTerms extends \WCML\Rest\Wrapper\Handler
    {
        public function __construct(\SitePress $sitepress, \WPML_Term_Translation $wpmlTermTranslations, \WCML_Terms $wcmlTerms)
        {
        }
        /**
         * @param array            $args
         * @param \WP_REST_Request $request Request object.
         *
         * @return array
         */
        public function query($args, $request)
        {
        }
        /**
         * Appends the language and translation information to the get_product response
         *
         * @param \WP_REST_Response $response
         * @param object|\WP_Term   $object
         * @param \WP_REST_Request  $request
         *
         * @return \WP_REST_Response
         */
        public function prepare($response, $object, $request)
        {
        }
        /**
         * Sets the product information according to the provided language
         *
         * @param \WP_Term         $term
         * @param \WP_REST_Request $request
         * @param bool             $creating if true, it is an insert event; otherwise an update.
         *
         * @throws MissingLanguage When no $language is set yet $translationOf is set.
         * @throws InvalidTerm When updating the term and no $trid obtained.
         */
        public function insert($term, $request, $creating)
        {
        }
    }
    class Composite extends \WCML\Rest\Wrapper\Handler
    {
        public function __construct(array $restHandlers)
        {
        }
        /**
         * @param array           $args
         * @param \WP_REST_Request $request Request object.
         *
         * @return array
         */
        public function query($args, $request)
        {
        }
        /**
         * Appends the language and translation information to the get_product response
         *
         * @param \WP_REST_Response $response
         * @param object $object
         * @param \WP_REST_Request $request
         *
         * @return \WP_REST_Response
         */
        public function prepare($response, $object, $request)
        {
        }
        /**
         * Sets the product information according to the provided language
         *
         * @param object $object
         * @param \WP_REST_Request $request
         * @param bool $creating
         */
        public function insert($object, $request, $creating)
        {
        }
    }
}
namespace WCML\Rest\Wrapper\Reports {
    class ProductsCount extends \WCML\Rest\Wrapper\Handler
    {
        public function __construct(\SitePress $sitepress, \wpdb $wpdb)
        {
        }
        /**
         * Check the language information for products count response.
         *
         * @param \WP_REST_Response $response
         * @param object            $object
         * @param \WP_REST_Request  $request
         *
         * @throws InvalidLanguage
         *
         * @return \WP_REST_Response
         */
        public function prepare($response, $object, $request)
        {
        }
    }
    class ProductsSales extends \WCML\Rest\Wrapper\Handler
    {
        /**
         * Return currency information for products selles response.
         *
         * @param \WP_REST_Response $response
         * @param object            $object
         * @param \WP_REST_Request  $request
         *
         * @throws InvalidLanguage
         *
         * @return \WP_REST_Response
         */
        public function prepare($response, $object, $request)
        {
        }
    }
    class TopSeller extends \WCML\Rest\Wrapper\Handler
    {
        public function __construct(\SitePress $sitepress)
        {
        }
        /**
         * Check the language information for top sellers response.
         *
         * @param \WP_REST_Response $response
         * @param object            $object
         * @param \WP_REST_Request  $request
         *
         * @throws InvalidLanguage
         *
         * @return \WP_REST_Response|false
         */
        public function prepare($response, $object, $request)
        {
        }
    }
}
namespace WCML\Rest\Wrapper\Orders {
    class Languages extends \WCML\Rest\Wrapper\Handler
    {
        /**
         * @param array            $args
         * @param \WP_REST_Request $request Request object.
         *
         * @return array
         */
        public function query($args, $request)
        {
        }
        /**
         * Appends the language and translation information to the get_product response
         *
         * @param \WP_REST_Response        $response
         * @param \WP_Post|\WC_Order|mixed $object
         * @param \WP_REST_Request         $request
         *
         * @return \WP_REST_Response
         */
        public function prepare($response, $object, $request)
        {
        }
        /**
         * Sets the product information according to the provided language
         *
         * @param object           $object
         * @param \WP_REST_Request $request
         * @param bool             $creating
         *
         * @throws InvalidLanguage
         */
        public function insert($object, $request, $creating)
        {
        }
    }
    class Prices extends \WCML\Rest\Wrapper\Handler
    {
        /**
         * Sets the product information according to the provided language
         *
         * @param object           $object
         * @param \WP_REST_Request $request
         * @param bool             $creating
         *
         * @throws InvalidCurrency
         *
         */
        public function insert($object, $request, $creating)
        {
        }
    }
}
namespace WCML\Rest\Wrapper\Products {
    class Products extends \WCML\Rest\Wrapper\Handler
    {
        public function __construct(\SitePress $sitepress, \WPML_Post_Translation $wpmlPostTranslations, \WCML\Rest\ProductSaveActions $productSaveActions, \WCML_WC_Strings $strings)
        {
        }
        /**
         * @param array $args
         * @param \WP_REST_Request $request Request object.
         *
         * @return array
         */
        public function query($args, $request)
        {
        }
        /**
         * Appends the language and translation information to the get_product response
         *
         * @param \WP_REST_Response $response
         * @param object $object
         * @param \WP_REST_Request $request
         *
         * @return \WP_REST_Response
         */
        public function prepare($response, $object, $request)
        {
        }
        /**
         * Sets the product information according to the provided language
         *
         * @param object|\WC_Abstract_Legacy_Product $object
         * @param \WP_REST_Request                   $request
         * @param bool                               $creating
         *
         * @throws InvalidLanguage
         * @throws InvalidProduct
         * @throws Generic
         *
         */
        public function insert($object, $request, $creating)
        {
        }
    }
}
namespace WCML\Rest\Wrapper {
    class Factory
    {
        /**
         * @param string $objectType
         *
         * @return Handler
         */
        public static function create($objectType)
        {
        }
    }
}
namespace WCML\Rest {
    class Generic
    {
        /**
         * Prevent WPML redirection when using the default language as a parameter in the url
         */
        public static function preventDefaultLangUrlRedirect()
        {
        }
        /**
         * @param \WP_Query $wp_query
         */
        public static function autoAdjustIncludedIds(\WP_Query $wp_query)
        {
        }
        /**
         * We need an unfiltered 'home_url' so that the REST signature matches.
         *
         * Note that WPML already does this, but fails to recognize a REST
         * request when we get a 'relative' home_url.
         */
        public static function removeHomeUrlFilterOnRestAuthentication()
        {
        }
    }
}
namespace WCML\Rest\Frontend {
    class Language
    {
        public function __construct(\WPML_Cookie $cookie, \WPML_URL_Converter $urlConverter)
        {
        }
        /** @return string */
        public function get()
        {
        }
    }
}
namespace WCML\Rest\Store {
    class HooksFactory implements \IWPML_REST_Action_Loader
    {
        /**
         * @return \IWPML_Action[]
         */
        public function create()
        {
        }
    }
    class PriceRangeHooks implements \IWPML_Action
    {
        /**
         * @param \woocommerce_wpml $woocommerce_wpml
         */
        public function __construct($woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param \WP_REST_Response $response
         * @param array             $handler
         * @param \WP_REST_Request  $request
         *
         * @return \WP_REST_Response
         */
        public function convertPriceRange($response, $handler, $request)
        {
        }
    }
    class Hooks implements \IWPML_Action
    {
        const BEFORE_REST_API_LOADED = 0;
        public function add_hooks()
        {
        }
        public function initializeSession()
        {
        }
    }
}
namespace WCML\Rest\Exceptions {
    class InvalidCurrency extends \WC_REST_Exception
    {
        /**
         * @param string $currency_code
         */
        public function __construct($currency_code)
        {
        }
    }
    class InvalidTerm extends \WC_REST_Exception
    {
        /**
         * @param int $term_id
         */
        public function __construct($term_id)
        {
        }
    }
    class Generic extends \WC_REST_Exception
    {
        /**
         * @param string $text
         */
        public function __construct($text)
        {
        }
    }
    class MissingLanguage extends \WC_REST_Exception
    {
        public function __construct()
        {
        }
    }
    class InvalidLanguage extends \WC_REST_Exception
    {
        /**
         * @param string $language_code
         */
        public function __construct($language_code)
        {
        }
    }
    class InvalidProduct extends \WC_REST_Exception
    {
        /**
         * @param int $product_id
         */
        public function __construct($product_id)
        {
        }
    }
}
namespace WCML\Block\Convert {
    class ConverterProvider
    {
        /**
         * @param string $blockName
         *
         * @return \WPML\PB\Gutenberg\ConvertIdsInBlock\Base
         */
        public static function get($blockName)
        {
        }
    }
    class Hooks implements \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /**
         * @param SitePress|NullSitePress $sitepress
         * @param Language                $frontendRestLang
         */
        public function __construct(\WPML\Core\ISitePress $sitepress, \WCML\Rest\Frontend\Language $frontendRestLang)
        {
        }
        public function add_hooks()
        {
        }
        public function filterIdsInBlock(array $block)
        {
        }
        /**
         * WC is caching query results in transients which name
         * is based on the query vars hash.
         *
         * @param \WP_Query $query
         */
        public function addCurrentLangToQueryVars($query)
        {
        }
        /**
         * @param \WP_HTTP_Response|\WP_Error $response
         * @param array                       $handler
         * @param \WP_REST_Request            $request
         *
         * @return \WP_HTTP_Response|\WP_Error
         */
        public function useLanguageFrontendRestLang($response, $handler, $request)
        {
        }
        /**
         * @param string $blockContent
         *
         * @return string
         */
        public function filterProductSearchForm($blockContent)
        {
        }
    }
}
namespace WCML\Block\Convert\Converter {
    class ProductsByAttributes extends \WPML\PB\Gutenberg\ConvertIdsInBlock\Base
    {
        public function convert(array $block)
        {
        }
    }
}
namespace {
    class WCML_Product_Gallery_Filter implements \IWPML_Action
    {
        public function __construct(\WPML_Translation_Element_Factory $translation_element_factory, $wpml_cache = \null)
        {
        }
        public function add_hooks()
        {
        }
        public function localize_image_ids($value, $object_id, $meta_key)
        {
        }
    }
    class WCML_Product_Image_Filter implements \IWPML_Action
    {
        public function __construct(\WPML_Translation_Element_Factory $translation_element_factory, $wpml_cache = \null)
        {
        }
        public function add_hooks()
        {
        }
        public function localize_image_id($value, $object_id, $meta_key)
        {
        }
    }
    class WCML_Update_Product_Gallery_Translation implements \IWPML_Action
    {
        public function __construct(\WPML_Translation_Element_Factory $translation_element_factory, \WPML_Media_Usage_Factory $media_usage_factory)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param int    $original_attachment_id
         * @param string $file
         * @param string $language
         */
        public function update_meta($original_attachment_id, $file, $language)
        {
        }
    }
}
namespace WCML\Media\Wrapper {
    interface IMedia
    {
        public function add_hooks();
        /**
         * This method will return only translatable image IDs
         *
         * @param int $product_id
         *
         * @return array
         */
        public function product_images_ids($product_id);
        /**
         * @param int    $orig_post_id
         * @param int    $trnsl_post_id
         * @param string $lang
         */
        public function sync_thumbnail_id($orig_post_id, $trnsl_post_id, $lang);
        /**
         * @param int    $variation_id
         * @param int    $translated_variation_id
         * @param string $lang
         */
        public function sync_variation_thumbnail_id($variation_id, $translated_variation_id, $lang);
        /**
         * @param int $product_id
         */
        public function sync_product_gallery($product_id);
        /**
         * @param int    $attachment_id
         * @param int    $parent_id
         * @param string $target_lang
         *
         * @return int
         */
        public function create_base_media_translation($attachment_id, $parent_id, $target_lang);
        /**
         * @param int $att_id
         * @param int $dup_att_id
         */
        public function sync_product_gallery_duplicate_attachment($att_id, $dup_att_id);
    }
    class Translatable implements \WCML\Media\Wrapper\IMedia
    {
        const META_KEY_THUMBNAIL_ID = '_thumbnail_id';
        public $settings = [];
        public function __construct($woocommerce_wpml, $sitepress, $wpdb)
        {
        }
        public function add_hooks()
        {
        }
        public function product_images_ids($product_id)
        {
        }
        public function sync_thumbnail_id($original_product_id, $translated_product_id, $language)
        {
        }
        public function sync_variation_thumbnail_id($variation_id, $translated_variation_id, $language)
        {
        }
        public function sync_product_gallery($product_id)
        {
        }
        public function create_base_media_translation($attachment_id, $parent_id, $target_lang)
        {
        }
        public function sync_product_gallery_duplicate_attachment($att_id, $dup_att_id)
        {
        }
    }
    class Factory
    {
        /**
         * @return IMedia
         */
        public static function create(\woocommerce_wpml $woocommerce_wpml)
        {
        }
    }
    class NonTranslatable implements \WCML\Media\Wrapper\IMedia
    {
        public function add_hooks()
        {
        }
        /**
         * @param int $product_id
         *
         * @return array
         */
        public function product_images_ids($product_id)
        {
        }
        /**
         * @param int    $orig_post_id
         * @param int    $trnsl_post_id
         * @param string $lang
         */
        public function sync_thumbnail_id($orig_post_id, $trnsl_post_id, $lang)
        {
        }
        /**
         * @param int    $variation_id
         * @param int    $translated_variation_id
         * @param string $lang
         */
        public function sync_variation_thumbnail_id($variation_id, $translated_variation_id, $lang)
        {
        }
        /**
         * @param int $product_id
         */
        public function sync_product_gallery($product_id)
        {
        }
        /**
         * @param int    $attachment_id
         * @param int    $parent_id
         * @param string $target_lang
         *
         * @return int
         */
        public function create_base_media_translation($attachment_id, $parent_id, $target_lang)
        {
        }
        /**
         * @param int $att_id
         * @param int $dup_att_id
         */
        public function sync_product_gallery_duplicate_attachment($att_id, $dup_att_id)
        {
        }
    }
}
namespace {
    class WCML_Product_Gallery_Filter_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WCML_Product_Image_Filter_Factory implements \IWPML_Frontend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WCML_Append_Gallery_To_Post_Media_Ids implements \IWPML_Action
    {
        public function add_hooks()
        {
        }
        /**
         * @param array $media_ids
         *
         * @return mixed
         */
        public function add_product_gallery_images($media_ids, $post_id)
        {
        }
    }
    class WCML_Update_Product_Gallery_Translation_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
    class WCML_Append_Gallery_To_Post_Media_Ids_Factory implements \IWPML_Backend_Action_Loader
    {
        public function create()
        {
        }
    }
}
namespace WCML\Products {
    class Hooks implements \IWPML_Frontend_Action, \IWPML_Backend_Action
    {
        public function add_hooks()
        {
        }
    }
}
namespace {
    /**
     * Class WCML_Product_Data_Store_CPT
     */
    class WCML_Product_Data_Store_CPT extends \WC_Product_Data_Store_CPT
    {
        /**
         * @param int $product_id
         */
        public function update_lookup_table_data($product_id)
        {
        }
    }
    /**
     * Handles data being passed between different domains using WPML xDomain logic
     * https://wpml.org/?page_id=693147
     */
    class WCML_xDomain_Data implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        /**
         * WCML_xDomain_Data constructor.
         *
         * @param WPML_Cookie $cookie_handler
         */
        public function __construct(\WPML_Cookie $cookie_handler)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $data
         *
         * @return array
         */
        public function pass_data_to_domain($data)
        {
        }
        public function check_request()
        {
        }
    }
}
namespace WCML\Exporter {
    class AllLanguagesHooks implements \IWPML_Backend_Action, \IWPML_DIC_Action
    {
        const KEY_EXPORT_ALL_LANGUAGES = 'wpml_export_all_languages';
        public function __construct(\SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @return void
         */
        public function addLanguageField()
        {
        }
        /**
         * @return void
         */
        public function suspendWpmlLanguageFilters()
        {
        }
    }
    class AttributeHeadersHooks implements \IWPML_Backend_Action
    {
        const EXPORT_ACTION = 'woocommerce_do_ajax_product_export';
        public function add_hooks()
        {
        }
    }
}
namespace WCML\Terms\Count {
    class Hooks implements \IWPML_Backend_Action, \IWPML_REST_Action
    {
        /**
         * @return void
         */
        public function add_hooks()
        {
        }
        /**
         * At the top of `_wc_term_recount` we suspend all WPML term filters,
         * and we resume it at the bottom once `wc_term_counts` transient
         * is deleted.
         *
         * @see _wc_term_recount()
         *
         * @param bool $shouldRecountTerms
         *
         * @return bool
         */
        public static function disableTermFilters($shouldRecountTerms)
        {
        }
        /**
         * @param \stdClass $originalTax
         * @param int       $translatedTerm
         *
         * @return void
         */
        public static function recountOnSaveTermTranslation($originalTax, $translatedTerm)
        {
        }
        /**
         * @return void
         */
        public static function recountAllTermsInShutdown()
        {
        }
        /**
         * @return void
         */
        public static function recountAllTerms()
        {
        }
    }
}
namespace WCML\Terms {
    class SuspendWpmlFilters implements \WCML\Utilities\Suspend\Suspend
    {
        public function __construct(\WCML\Utilities\Suspend\Filters $suspendFilters)
        {
        }
        /**
         * @return void
         */
        public function resume()
        {
        }
        /**
         * @param callable $function
         *
         * @return mixed
         */
        public function runAndResume(callable $function)
        {
        }
    }
    class SuspendWpmlFiltersFactory
    {
        /**
         * @return \WCML\Utilities\Suspend\Suspend
         */
        public static function create()
        {
        }
    }
}
namespace WCML\User {
    class Hooks implements \IWPML_Frontend_Action
    {
        public function add_hooks()
        {
        }
        /**
         * Set user's language to current language
         *
         * @param int $userId
         */
        public function setCustomerProfileLanguage($userId)
        {
        }
    }
}
namespace WCML\User\Store {
    class Noop
    {
        /**
         * @param string $key
         *
         * @return null
         */
        public function get($key)
        {
        }
        public function set($key, $value)
        {
        }
    }
    interface Strategy
    {
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function get($key);
        /**
         * @param string   $key
         * @param mixed    $value
         */
        public function set($key, $value);
    }
    class Store implements \WCML\User\Store\Strategy
    {
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function get($key)
        {
        }
        /**
         * @param string   $key
         * @param mixed    $value
         */
        public function set($key, $value)
        {
        }
    }
    class Cookie implements \WCML\User\Store\Strategy
    {
        /**
         * @var \WPML_Cookie
         */
        public $cookieHandler;
        /**
         * Cookie constructor.
         *
         * @param \WPML_Cookie $cookieHandler
         */
        public function __construct(\WPML_Cookie $cookieHandler)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function get($key)
        {
        }
        /**
         * @param string   $key
         * @param mixed    $value
         */
        public function set($key, $value)
        {
        }
    }
    class WcSession implements \WCML\User\Store\Strategy
    {
        /**
         * WcSession constructor.
         *
         * @param \WC_Session $session
         */
        public function __construct(\WC_Session $session)
        {
        }
        /**
         * @param string $key
         *
         * @return mixed
         */
        public function get($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         */
        public function set($key, $value)
        {
        }
    }
}
namespace {
    class WCML_Pointers
    {
        public function add_hooks()
        {
        }
        public function setup()
        {
        }
        public function add_products_translation_link()
        {
        }
        public function add_shipping_classes_translation_link()
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function add_multi_currency_link(array $settings)
        {
        }
        /**
         * @param array $settings
         *
         * @return array
         */
        public function add_endpoints_translation_link(array $settings)
        {
        }
    }
    class WCML_Setup_Handlers
    {
        const KEY_TRANSLATION_OPTION = 'translation-option';
        const KEY_DISPLAY_AS_TRANSLATED = 'display-as-translated';
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function save_attributes(array $data)
        {
        }
        public function save_multi_currency(array $data)
        {
        }
        public function install_store_pages(array $data)
        {
        }
        /**
         * @param array $data
         */
        public function save_translation_options($data)
        {
        }
        /**
         * This handler might shortcut the previous one,
         * so we are re-saving the translation preference
         * for the product and product_cat.
         *
         * @param array $data
         */
        public function save_display_as_translated($data)
        {
        }
    }
    /**
     * Class WCML_Setup
     */
    class WCML_Setup
    {
        /**
         * WCML_Setup constructor.
         *
         * @param WCML_Setup_UI       $ui
         * @param WCML_Setup_Handlers $handlers
         * @param woocommerce_wpml    $woocommerce_wpml
         * @param SitePress           $sitepress
         */
        public function __construct(\WCML_Setup_UI $ui, \WCML_Setup_Handlers $handlers, \woocommerce_wpml $woocommerce_wpml, \SitePress $sitepress)
        {
        }
        public function add_hooks()
        {
        }
        public function setup_redirect()
        {
        }
        public function wizard()
        {
        }
        public function complete_setup()
        {
        }
        /**
         * @return bool
         */
        public static function is_product_automatically_translated()
        {
        }
        /**
         * @param string $url
         *
         * @return string
         */
        public function redirect_filters($url)
        {
        }
        public function handle_steps()
        {
        }
    }
}
namespace WCML\Setup {
    class BeforeHooks implements \IWPML_Backend_Action, \IWPML_Frontend_Action, \IWPML_DIC_Action
    {
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        /**
         * @param array $translatablePostTypes
         *
         * @return array
         */
        public static function blockProductTranslation($translatablePostTypes)
        {
        }
    }
}
namespace {
    class WCML_Setup_UI
    {
        /**
         * WCML_Setup_UI constructor.
         *
         * @param woocommerce_wpml $woocommerce_wpml
         */
        public function __construct(\woocommerce_wpml $woocommerce_wpml)
        {
        }
        public function add_hooks()
        {
        }
        public function add_wizard_notice_hook()
        {
        }
        public function admin_menus()
        {
        }
        /**
         * @param array  $steps
         * @param string $step
         *
         * @throws \WPML\Core\Twig_Error_Loader Exception.
         * @throws \WPML\Core\Twig_Error_Runtime Exception.
         * @throws \WPML\Core\Twig_Error_Syntax Exception.
         */
        public function setup_header($steps, $step)
        {
        }
        /**
         * @param array  $steps
         * @param string $current_step
         */
        public function setup_steps(array $steps, $current_step)
        {
        }
        /**
         * @param mixed $view
         */
        public function setup_content($view)
        {
        }
        /**
         * @param bool $has_handler
         *
         * @throws \WPML\Core\Twig_Error_Loader Exception.
         * @throws \WPML\Core\Twig_Error_Runtime Exception.
         * @throws \WPML\Core\Twig_Error_Syntax Exception.
         */
        public function setup_footer($has_handler = \false)
        {
        }
        /**
         * @throws \WPML\Core\Twig_Error_Loader Exception.
         * @throws \WPML\Core\Twig_Error_Runtime Exception.
         * @throws \WPML\Core\Twig_Error_Syntax Exception.
         */
        public function wizard_notice()
        {
        }
    }
}
namespace WCML\CLI {
    class Hooks implements \IWPML_CLI_Action
    {
        public function add_hooks()
        {
        }
        public function preventWcWizardRedirection()
        {
        }
    }
}
namespace WPML\FP\System {
    /**
     * Returns a filter function to filter a collection by the given key
     * Use like:
     * $theCollection->map( getFilterFor( 'my-key' )->using( santatizeString() )->defaultTo( '' ) )
     * This will filter the collection item with a key of 'my-key' using the 'FILTER_SANITIZE_STRING'.
     * If the key doesn't exist it defaults to an empty string.
     *
     * defaultTo can be a value or a callable that returns a value
     *
     * @param string $key
     *
     * @return _Filter
     */
    function getFilterFor($key)
    {
    }
    /**
     * Returns a function of the defined type that can then be used to map
     * over a variable.
     *
     * @param int $filter - Filter type same as for php filter_var function
     *
     * @return \Closure
     */
    function filterVar($filter)
    {
    }
    /**
     * returns a function that will sanitize a string.
     * @return \Closure
     */
    function sanitizeString($flags = ENT_QUOTES)
    {
    }
    /**
     * Returns a validator function to filter a collection by the given key
     * Use like:
     * map( getValidatorFor( 'my-key' )->using( Logic::isNotNull() )->error( 'It was false' ) ), $myCollection)
     * This will run the validator on the collection item with a key of 'my-key' and return Either::Right
     * containing the given collection or Either::Left containing the error depending if the supplied
     * using function returns true or false
     *
     * error can be a value or a callable that returns a value
     *
     * @param string $key
     *
     * @return _Validator
     */
    function getValidatorFor($key)
    {
    }
}
namespace WPML\FP\Strings {
    /**
     * ltrimWith :: string -> ( string -> string )
     * @param string $trim
     *
     * @return callable
     */
    function ltrimWith($trim)
    {
    }
    /**
     * rtrimWith :: string -> ( string -> string )
     * @param string $trim
     *
     * @return callable
     */
    function rtrimWith($trim)
    {
    }
    /**
     * explodeToCollection :: string -> ( string -> Collection )
     * @param string $delimiter
     *
     * @return callable
     */
    function explodeToCollection($delimiter)
    {
    }
    /**
     * replace :: string -> string -> ( string -> string )
     * @param string $search
     * @param string $replace
     *
     * @return callable
     */
    function replace($search, $replace)
    {
    }
    /**
     * remove :: string -> ( string -> string )
     * @param string $remove
     *
     * @return callable
     */
    function remove($remove)
    {
    }
}
namespace WPML\FP {
    /**
     * Wraps the given function and returns a function that can take arguments as an array and invokes
     * the wrapped function with individual arguments
     *
     * @param callable $fn
     *
     * @return \Closure
     */
    function spreadArgs(callable $fn)
    {
    }
    /**
     * Wraps the given function and returns a function that can take individual arguments and invokes
     * the wrapped function with individual arguments gathered into an array
     *
     * @param callable $fn
     *
     * @return \Closure
     */
    function gatherArgs(callable $fn)
    {
    }
    /**
     * Returns new function which applies each given function to the result of another from right to left
     * compose(f, g, h)(x) is the same as f(g(h(x)))
     *
     * @param callable $f
     * @param callable $g
     *
     * @return callable
     */
    function compose(callable $f, callable $g)
    {
    }
    /**
     * Returns new function which applies each given function to the result of another from left to right
     * pipe(f, g, h)(x) is the same as h(g(f(x)))
     *
     * @param callable $f
     * @param callable $g
     *
     * @return callable
     */
    function pipe(callable $f, callable $g)
    {
    }
    /**
     * Returns new function which will behave like $function with
     * predefined left arguments passed to partial
     *
     * @param callable $function
     * @param mixed    $arg1
     *
     * @return callable
     */
    function partial(callable $function, $arg1)
    {
    }
    /**
     * Returns new partial function which will behave like $function with
     * predefined right arguments passed to partialRight
     *
     * @param callable $function
     * @param mixed    $arg1
     *
     * @return callable
     */
    function partialRight(callable $function, $arg1)
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    function tap(callable $fn)
    {
    }
    /**
     * @param callable $f
     * @param callable $g
     *
     * @return \Closure
     */
    function either(callable $f, callable $g)
    {
    }
    /**
     * @param int      $count
     * @param callable $fn
     *
     * @return \Closure
     */
    function curryN($count, callable $fn)
    {
    }
    /**
     * @param callable $fn
     * @param bool     $required
     *
     * @return \Closure
     * @throws \ReflectionException
     */
    function curry(callable $fn, $required = true)
    {
    }
    /**
     * @param string $fnName
     *
     * @return \Closure
     */
    function apply($fnName)
    {
    }
    /**
     * Returns an Invoker that runs the member function. Use `with` to set the arguments
     * of the member function and then invoke with `()`
     *
     * eg. give Test class:
     * class Test {
     *
     *    private $times;
     *
     *    public function __construct( $times ) {
     *       $this->times = $times;
     *    }
     *
     *    public function multiply( $x ) {
     *       return $x * $this->times;
     *    }
     * }
     *
     * $invoker = invoke( 'multiply' )->with( 10 );
     * $result = $invoker( new Test( 2 ) );  // 20
     *
     *
     * @param string $fnName
     *
     * @return _Invoker
     */
    function invoke($fnName)
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    function chain(callable $fn)
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    function flatMap(callable $fn)
    {
    }
    /**
     * @param callable $fn
     *
     * @return Either
     */
    function tryCatch(callable $fn)
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    function flip(callable $fn)
    {
    }
}
namespace WPML\Core {
    function twig_var_dump(\WPML\Core\Twig\Environment $env, $context, array $vars = [])
    {
    }
}
namespace WPML\Core {
    /**
     * Cycles over a value.
     *
     * @param \ArrayAccess|array $values
     * @param int                $position The cycle position
     *
     * @return string The next value in the cycle
     */
    function twig_cycle($values, $position)
    {
    }
    /**
     * Returns a random value depending on the supplied parameter type:
     * - a random item from a \Traversable or array
     * - a random character from a string
     * - a random integer between 0 and the integer parameter.
     *
     * @param \Traversable|array|int|float|string $values The values to pick a random item from
     * @param int|null                            $max    Maximum value used when $values is an int
     *
     * @throws RuntimeError when $values is an empty array (does not apply to an empty string which is returned as is)
     *
     * @return mixed A random value from the given sequence
     */
    function twig_random(\WPML\Core\Twig\Environment $env, $values = null, $max = null)
    {
    }
    /**
     * Converts a date to the given format.
     *
     *   {{ post.published_at|date("m/d/Y") }}
     *
     * @param \DateTime|\DateTimeInterface|\DateInterval|string $date     A date
     * @param string|null                                       $format   The target format, null to use the default
     * @param \DateTimeZone|string|false|null                   $timezone The target timezone, null to use the default, false to leave unchanged
     *
     * @return string The formatted date
     */
    function twig_date_format_filter(\WPML\Core\Twig\Environment $env, $date, $format = null, $timezone = null)
    {
    }
    /**
     * Returns a new date object modified.
     *
     *   {{ post.published_at|date_modify("-1day")|date("m/d/Y") }}
     *
     * @param \DateTime|string $date     A date
     * @param string           $modifier A modifier string
     *
     * @return \DateTime
     */
    function twig_date_modify_filter(\WPML\Core\Twig\Environment $env, $date, $modifier)
    {
    }
    /**
     * Converts an input to a \DateTime instance.
     *
     *    {% if date(user.created_at) < date('+2days') %}
     *      {# do something #}
     *    {% endif %}
     *
     * @param \DateTime|\DateTimeInterface|string|null $date     A date
     * @param \DateTimeZone|string|false|null          $timezone The target timezone, null to use the default, false to leave unchanged
     *
     * @return \DateTime
     */
    function twig_date_converter(\WPML\Core\Twig\Environment $env, $date = null, $timezone = null)
    {
    }
    /**
     * Replaces strings within a string.
     *
     * @param string             $str  String to replace in
     * @param array|\Traversable $from Replace values
     * @param string|null        $to   Replace to, deprecated (@see https://secure.php.net/manual/en/function.strtr.php)
     *
     * @return string
     */
    function twig_replace_filter($str, $from, $to = null)
    {
    }
    /**
     * Rounds a number.
     *
     * @param int|float $value     The value to round
     * @param int|float $precision The rounding precision
     * @param string    $method    The method to use for rounding
     *
     * @return int|float The rounded number
     */
    function twig_round($value, $precision = 0, $method = 'common')
    {
    }
    /**
     * Number format filter.
     *
     * All of the formatting options can be left null, in that case the defaults will
     * be used.  Supplying any of the parameters will override the defaults set in the
     * environment object.
     *
     * @param mixed  $number       A float/int/string of the number to format
     * @param int    $decimal      the number of decimal points to display
     * @param string $decimalPoint the character(s) to use for the decimal point
     * @param string $thousandSep  the character(s) to use for the thousands separator
     *
     * @return string The formatted number
     */
    function twig_number_format_filter(\WPML\Core\Twig\Environment $env, $number, $decimal = null, $decimalPoint = null, $thousandSep = null)
    {
    }
    /**
     * URL encodes (RFC 3986) a string as a path segment or an array as a query string.
     *
     * @param string|array $url A URL or an array of query parameters
     *
     * @return string The URL encoded value
     */
    function twig_urlencode_filter($url)
    {
    }
    /**
     * JSON encodes a variable.
     *
     * @param mixed $value   the value to encode
     * @param int   $options Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT
     *
     * @return mixed The JSON encoded value
     */
    function twig_jsonencode_filter($value, $options = 0)
    {
    }
    function _twig_markup2string(&$value)
    {
    }
    /**
     * Merges an array with another one.
     *
     *  {% set items = { 'apple': 'fruit', 'orange': 'fruit' } %}
     *
     *  {% set items = items|merge({ 'peugeot': 'car' }) %}
     *
     *  {# items now contains { 'apple': 'fruit', 'orange': 'fruit', 'peugeot': 'car' } #}
     *
     * @param array|\Traversable $arr1 An array
     * @param array|\Traversable $arr2 An array
     *
     * @return array The merged array
     */
    function twig_array_merge($arr1, $arr2)
    {
    }
    /**
     * Slices a variable.
     *
     * @param mixed $item         A variable
     * @param int   $start        Start of the slice
     * @param int   $length       Size of the slice
     * @param bool  $preserveKeys Whether to preserve key or not (when the input is an array)
     *
     * @return mixed The sliced variable
     */
    function twig_slice(\WPML\Core\Twig\Environment $env, $item, $start, $length = null, $preserveKeys = \false)
    {
    }
    /**
     * Returns the first element of the item.
     *
     * @param mixed $item A variable
     *
     * @return mixed The first element of the item
     */
    function twig_first(\WPML\Core\Twig\Environment $env, $item)
    {
    }
    /**
     * Returns the last element of the item.
     *
     * @param mixed $item A variable
     *
     * @return mixed The last element of the item
     */
    function twig_last(\WPML\Core\Twig\Environment $env, $item)
    {
    }
    /**
     * Joins the values to a string.
     *
     * The separators between elements are empty strings per default, you can define them with the optional parameters.
     *
     *  {{ [1, 2, 3]|join(', ', ' and ') }}
     *  {# returns 1, 2 and 3 #}
     *
     *  {{ [1, 2, 3]|join('|') }}
     *  {# returns 1|2|3 #}
     *
     *  {{ [1, 2, 3]|join }}
     *  {# returns 123 #}
     *
     * @param array       $value An array
     * @param string      $glue  The separator
     * @param string|null $and   The separator for the last pair
     *
     * @return string The concatenated string
     */
    function twig_join_filter($value, $glue = '', $and = null)
    {
    }
    /**
     * Splits the string into an array.
     *
     *  {{ "one,two,three"|split(',') }}
     *  {# returns [one, two, three] #}
     *
     *  {{ "one,two,three,four,five"|split(',', 3) }}
     *  {# returns [one, two, "three,four,five"] #}
     *
     *  {{ "123"|split('') }}
     *  {# returns [1, 2, 3] #}
     *
     *  {{ "aabbcc"|split('', 2) }}
     *  {# returns [aa, bb, cc] #}
     *
     * @param string $value     A string
     * @param string $delimiter The delimiter
     * @param int    $limit     The limit
     *
     * @return array The split string as an array
     */
    function twig_split_filter(\WPML\Core\Twig\Environment $env, $value, $delimiter, $limit = null)
    {
    }
    // The '_default' filter is used internally to avoid using the ternary operator
    // which costs a lot for big contexts (before PHP 5.4). So, on average,
    // a function call is cheaper.
    /**
     * @internal
     */
    function _twig_default_filter($value, $default = '')
    {
    }
    /**
     * Returns the keys for the given array.
     *
     * It is useful when you want to iterate over the keys of an array:
     *
     *  {% for key in array|keys %}
     *      {# ... #}
     *  {% endfor %}
     *
     * @param array $array An array
     *
     * @return array The keys
     */
    function twig_get_array_keys_filter($array)
    {
    }
    /**
     * Reverses a variable.
     *
     * @param array|\Traversable|string $item         An array, a \Traversable instance, or a string
     * @param bool                      $preserveKeys Whether to preserve key or not
     *
     * @return mixed The reversed input
     */
    function twig_reverse_filter(\WPML\Core\Twig\Environment $env, $item, $preserveKeys = \false)
    {
    }
    /**
     * Sorts an array.
     *
     * @param array|\Traversable $array
     *
     * @return array
     */
    function twig_sort_filter($array)
    {
    }
    /**
     * @internal
     */
    function twig_in_filter($value, $compare)
    {
    }
    /**
     * Returns a trimmed string.
     *
     * @return string
     *
     * @throws RuntimeError When an invalid trimming side is used (not a string or not 'left', 'right', or 'both')
     */
    function twig_trim_filter($string, $characterMask = null, $side = 'both')
    {
    }
    /**
     * Removes whitespaces between HTML tags.
     *
     * @return string
     */
    function twig_spaceless($content)
    {
    }
    /**
     * Escapes a string.
     *
     * @param mixed  $string     The value to be escaped
     * @param string $strategy   The escaping strategy
     * @param string $charset    The charset
     * @param bool   $autoescape Whether the function is called by the auto-escaping feature (true) or by the developer (false)
     *
     * @return string
     */
    function twig_escape_filter(\WPML\Core\Twig\Environment $env, $string, $strategy = 'html', $charset = null, $autoescape = \false)
    {
    }
    /**
     * @internal
     */
    function twig_escape_filter_is_safe(\WPML\Core\Twig\Node\Node $filterArgs)
    {
    }
    function _twig_escape_js_callback($matches)
    {
    }
    function _twig_escape_css_callback($matches)
    {
    }
    /**
     * This function is adapted from code coming from Zend Framework.
     *
     * @copyright Copyright (c) 2005-2012 Zend Technologies USA Inc. (https://www.zend.com)
     * @license   https://framework.zend.com/license/new-bsd New BSD License
     */
    function _twig_escape_html_attr_callback($matches)
    {
    }
    /**
     * @internal
     */
    function twig_ensure_traversable($seq)
    {
    }
    /**
     * @internal
     */
    function twig_to_array($seq, $preserveKeys = \true)
    {
    }
    /**
     * Checks if a variable is empty.
     *
     *    {# evaluates to true if the foo variable is null, false, or the empty string #}
     *    {% if foo is empty %}
     *        {# ... #}
     *    {% endif %}
     *
     * @param mixed $value A variable
     *
     * @return bool true if the value is empty, false otherwise
     */
    function twig_test_empty($value)
    {
    }
    /**
     * Checks if a variable is traversable.
     *
     *    {# evaluates to true if the foo variable is an array or a traversable object #}
     *    {% if foo is iterable %}
     *        {# ... #}
     *    {% endif %}
     *
     * @param mixed $value A variable
     *
     * @return bool true if the value is traversable
     */
    function twig_test_iterable($value)
    {
    }
    /**
     * Renders a template.
     *
     * @param array        $context
     * @param string|array $template      The template to render or an array of templates to try consecutively
     * @param array        $variables     The variables to pass to the template
     * @param bool         $withContext
     * @param bool         $ignoreMissing Whether to ignore missing templates or not
     * @param bool         $sandboxed     Whether to sandbox the template or not
     *
     * @return string The rendered template
     */
    function twig_include(\WPML\Core\Twig\Environment $env, $context, $template, $variables = [], $withContext = \true, $ignoreMissing = \false, $sandboxed = \false)
    {
    }
    /**
     * Returns a template content without rendering it.
     *
     * @param string $name          The template name
     * @param bool   $ignoreMissing Whether to ignore missing templates or not
     *
     * @return string The template source
     */
    function twig_source(\WPML\Core\Twig\Environment $env, $name, $ignoreMissing = \false)
    {
    }
    /**
     * Provides the ability to get constants from instances as well as class/global constants.
     *
     * @param string      $constant The name of the constant
     * @param object|null $object   The object to get the constant from
     *
     * @return string
     */
    function twig_constant($constant, $object = null)
    {
    }
    /**
     * Checks if a constant exists.
     *
     * @param string      $constant The name of the constant
     * @param object|null $object   The object to get the constant from
     *
     * @return bool
     */
    function twig_constant_is_defined($constant, $object = null)
    {
    }
    /**
     * Batches item.
     *
     * @param array $items An array of items
     * @param int   $size  The size of the batch
     * @param mixed $fill  A value used to fill missing items
     *
     * @return array
     */
    function twig_array_batch($items, $size, $fill = null, $preserveKeys = \true)
    {
    }
    function twig_array_filter($array, $arrow)
    {
    }
    function twig_array_map($array, $arrow)
    {
    }
    function twig_array_reduce($array, $arrow, $initial = null)
    {
    }
}
namespace WPML\Core {
    /**
     * Marks a variable as being safe.
     *
     * @param string $string A PHP variable
     *
     * @return string
     */
    function twig_raw_filter($string)
    {
    }
}
namespace WPML\Core {
    /**
     * Loads a template from a string.
     *
     *     {{ include(template_from_string("Hello {{ name }}")) }}
     *
     * @param string $template A template as a string or object implementing __toString()
     * @param string $name     An optional name of the template to be used in error messages
     *
     * @return TemplateWrapper
     */
    function twig_template_from_string(\WPML\Core\Twig\Environment $env, $template, $name = null)
    {
    }
}
namespace OTGS\Installer\FP {
    /**
     * Returns new function which will behave like $function with
     * predefined left arguments passed to partial
     *
     * @param callable $function
     * @param mixed ...$args
     *
     * @return callable
     */
    function partial(callable $function, $args)
    {
    }
    /**
     * Returns new function which applies each given function to the result of another from left to right
     * pipe(f, g, h)(x) is the same as h(g(f(x)))
     *
     * @param callable $f
     * @param callable $g
     *
     * @return callable
     */
    function pipe(callable $f, callable $g)
    {
    }
    /**
     * Returns new function which applies each given function to the result of another from right to left
     * compose(f, g, h)(x) is the same as f(g(h(x)))
     *
     * @param callable $f
     * @param callable $g
     *
     * @return callable
     */
    function compose(callable $f, callable $g)
    {
    }
    /**
     * @param callable $fn
     *
     * @return \Closure
     */
    function flip(callable $fn)
    {
    }
    /**
     * Wraps the given function and returns a function that can take individual arguments and invokes
     * the wrapped function with individual arguments gathered into an array
     *
     * @param callable $fn
     *
     * @return \Closure
     */
    function gatherArgs(callable $fn)
    {
    }
    /**
     * Returns an Invoker that runs the member function. Use `with` to set the arguments
     * of the member function and then invoke with `()`
     *
     * eg. give Test class:
     * class Test {
     *
     *    private $times;
     *
     *    public function __construct( $times ) {
     *       $this->times = $times;
     *    }
     *
     *    public function multiply( $x ) {
     *       return $x * $this->times;
     *    }
     * }
     *
     * $invoker = invoke( 'multiply' )->with( 10 );
     * $result = $invoker( new Test( 2 ) );  // 20
     *
     *
     * @param string $fnName
     *
     * @return _Invoker
     */
    function invoke($fnName)
    {
    }
    /**
     * @param int      $count
     * @param callable $fn
     *
     * @return \Closure
     */
    function curryN($count, callable $fn)
    {
    }
    /**
     * @param callable $fn
     *
     * @return Either
     */
    function tryCatch(callable $fn)
    {
    }
}
namespace {
    \define('OTGS_ICONS_VERSION', '1.0');
    function otgs_icons()
    {
    }
    function otgs_icons_register()
    {
    }
    function otgs_icons_register_assets($assets_data, $assets_version)
    {
    }
    /**
     * Load the shared OTGS UI library, on demand.
     *
     * =================
     * Usage
     * =================
     * $vendor_path = [ path to the root of your relative vendor directory housing this repository, no training slash ]
     * $vendor_url = [ URL of the root of your relative vendor directory housing this repository, no trailing slash ]
     * require_once( $vendor_path . '/otgs/ui/loader.php' );
     * otgs_ui_initialize( $vendor_path . '/otgs/ui', $vendor_url . '/otgs/ui' );
     *
     * =================
     * Restrictions
     * =================
     * - Assets are registered at init:1: doing it earlier will cause problems with core assets registered at init:0
     * - Their handles are stored in constants that you can use as dependencies, on assets registered after init:-100.
     *
     * @package otgs/ui
     */
    /**
     * OTGS UI version - increase after every major update.
     */
    $otg_ui_version = 111;
    /**
     * @param string $vendor_path Path to the root of your relative vendor directory housing this repository (no trailing slash).
     * @param string $vendor_url  URL of the root of your relative vendor directory housing this repository, no trailing slash.
     */
    function otgs_ui_initialize($vendor_path, $vendor_url)
    {
    }
    /**
     * Function hooked to the `plugins_loaded` action as early as possible.
     */
    function otgs_ui_plugins_loaded()
    {
    }
    /**
     * @param string $fileIdentifier
     * @param string $file
     * @return void
     */
    function composerRequirea4c103d11e2145c959f5c8e45a9f7dc2($fileIdentifier, $file)
    {
    }
    /**
     * @param mixed|null $value
     *
     * @return \WPML\Collect\Support\Collection<mixed>
     */
    function wpml_collect($value = \null)
    {
    }
    /**
     * Return the default value of the given value.
     *
     * @param mixed $value
     *
     * @return mixed
     */
    function value($value)
    {
    }
    /**
     * Get an item from an array or object using "dot" notation.
     *
     * @param  mixed   $target
     * @param  string|string[]  $key
     * @param  mixed   $default
     * @return mixed
     */
    function data_get($target, $key, $default = \null)
    {
    }
    /**
     * Return the given object. Useful for chaining.
     *
     * @param  mixed  $object
     * @return mixed
     */
    function with($object)
    {
    }
    /**
     * We could not reuse the original function name `wpml_get_admin_notices`
     * because we have a double definition when WPML is being activated,
     * which causes a fatal error.
     *
     * @see sitepress-multilingual-cms/inc/wpml-private-actions.php
     *
     * @return WPML_Notices
     */
    function wcml_wpml_get_admin_notices()
    {
    }
    /**
     * @see sitepress-multilingual-cms/inc/functions.php
     *
     * @return bool
     */
    function wpml_is_ajax()
    {
    }
    /**
     * This bootstrap file is loaded only when WCML is running in the Standalone mode.
     * It's executed on `plugins_loaded` priority 10000.
     *
     * @see load_wcml_without_wpml
     */
    /**
     * This constant `WCML_WPML_DEPENDENCY_URL` is used in several places inside
     * the dependency files (it replaces hard-coded URL base).
     */
    \define('WCML_WPML_DEPENDENCY_URL', \WCML_PLUGIN_URL . '/addons/wpml-dependencies/lib');
    /**
     * It returns true if multi currency is enabled.
     *
     * @return bool
     *
     * @since 3.8.3
     */
    function wcml_is_multi_currency_on()
    {
    }
    /**
     * It returns a filtered array of price custom fields.
     *
     * @param int|\WP_Post $object_id The post, product ID or object extending "WP_Post".
     *
     * @return array
     */
    function wcml_price_custom_fields($object_id)
    {
    }
    /**
     * It returns WooCommerce currency value from 'woocommerce_currency' option.
     *
     * @return mixed
     *
     * @since 4.6.6
     */
    function wcml_get_woocommerce_currency_option()
    {
    }
    /**
     * It returns a single instance of the class.
     *
     * @return \WCML_Product_Data_Store_CPT
     *
     * @since 4.6.8
     */
    function wcml_product_data_store_cpt()
    {
    }
    /**
     * @since 4.9.0
     *
     * @param float|int   $price
     * @param bool|string $currency_code
     *
     * @return float|int
     */
    function wcml_convert_price($price, $currency_code = \false)
    {
    }
    /**
     * @since 4.10.0
     *
     * @param string $location
     * @param int    $status
     *
     * @return bool
     */
    function wcml_safe_redirect($location, $status = 302)
    {
    }
    /**
     * @since 4.11.0
     *
     * @param string $key
     *
     * @return mixed
     */
    function wcml_user_store_get($key)
    {
    }
    /**
     * @since 4.11.0
     *
     * @param string $key
     * @param mixed $value
     */
    function wcml_user_store_set($key, $value)
    {
    }
    /**
     * @param string   $handle Unique name
     * @param string   $src    Relative path to the file
     * @param string[] $deps   Array of registered script handles this script depends on
     * @param array    $args
     *
     * @return bool
     */
    function wcml_register_script($handle, $src, $deps = [], $args = [])
    {
    }
    \define('WCML_MULTI_CURRENCIES_DISABLED', 0);
    \define('WCML_MULTI_CURRENCIES_PER_LANGUAGE', 1);
    // obsolete - migrate to 2.
    \define('WCML_MULTI_CURRENCIES_INDEPENDENT', 2);
    \define('WCML_TRANSLATION_METHOD_MANUAL', 0);
    \define('WCML_TRANSLATION_METHOD_EDITOR', 1);
    \define('WCML_CART_CLEAR', 0);
    \define('WCML_CART_SYNC', 1);
    \define('WCML_JS_MIN', \defined('SCRIPT_DEBUG') && \SCRIPT_DEBUG ? '' : '.min');
    function wcml_check_wpml_functions()
    {
    }
    \define('HTTP_URL_REPLACE', 1);
    \define('HTTP_URL_JOIN_PATH', 2);
    \define('HTTP_URL_JOIN_QUERY', 4);
    \define('HTTP_URL_STRIP_USER', 8);
    \define('HTTP_URL_STRIP_PASS', 16);
    \define('HTTP_URL_STRIP_AUTH', 32);
    \define('HTTP_URL_STRIP_PORT', 64);
    \define('HTTP_URL_STRIP_PATH', 128);
    \define('HTTP_URL_STRIP_QUERY', 256);
    \define('HTTP_URL_STRIP_FRAGMENT', 512);
    \define('HTTP_URL_STRIP_ALL', 1024);
    /**
     * Build a URL.
     *
     * The parts of the second URL will be merged into the first according to
     * the flags argument.
     *
     * @param mixed $url     (part(s) of) an URL in form of a string or
     *                       associative array like parse_url() returns
     * @param mixed $parts   same as the first argument
     * @param int   $flags   a bitmask of binary or'ed HTTP_URL constants;
     *                       HTTP_URL_REPLACE is the default
     * @param array $new_url if set, it will be filled with the parts of the
     *                       composed url like parse_url() would return
     * @return string
     */
    function http_build_url($url, $parts = array(), $flags = \HTTP_URL_REPLACE, &$new_url = array())
    {
    }
    /**
     * Returns true if the current request is a REST one.
     *
     * @return bool
     */
    function otgs_is_rest_request()
    {
    }
    /**
     * If Installer 1.7.0+ is present, unregister Installer from old WPML.
     * Force Installer 1.7.0+ being used over older Installer versions.
     */
    $installer_171_plus_on = \false;
    /**
     * When all plugins load pick the newest version.
     */
    function wpml_installer_instance_delegator()
    {
    }
    /**
     * $args:
     *  plugins_install_tab = true|false (default: true)
     *  repositories_include = array() (default: all)
     *  repositories_exclude = array() (default: none)
     *  template = name (default: default)
     *
     * @param int   $wp_installer_instance The WP_Installer instance.
     * @param array $args                  The repository configuration.
     *
     * phpcs:disable WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid
     */
    function WP_Installer_Setup($wp_installer_instance, $args = array())
    {
    }
    // Ext function
    function WP_Installer_Show_Products($args = array())
    {
    }
    function WP_Installer_get_local_components_setting_ui($args)
    {
    }
    /**
     * @deprecated
     */
    function WP_Installer()
    {
    }
    function OTGS_Installer()
    {
    }
    function WP_Installer_Channels()
    {
    }
    function otgs_installer_get_logger_storage()
    {
    }
    function get_OTGS_Installer_Factory()
    {
    }
    \define('WP_INSTALLER_VERSION', $delegate['version']);
    /**
     * Load the shared OTGS UI library, on demand.
     *
     * =================
     * Usage
     * =================
     * $vendor_path = [ path to the root of your relative vendor directory housing this repository, no training slash ]
     * $vendor_url = [ URL of the root of your relative vendor directory housing this repository, no trailing slash ]
     * require_once( $vendor_path . '/otgs/ui/loader.php' );
     * otgs_ui_initialize( $vendor_path . '/otgs/ui', $vendor_url . '/otgs/ui' );
     *
     * =================
     * Restrictions
     * =================
     * - Assets are registered at init:1: doing it earlier will cause problems with core assets registered at init:0
     * - Their handles are stored in constants that you can use as dependencies, on assets registered after init:-100.
     *
     * @package otgs/ui
     */
    /**
     * OTGS UI version - increase after every major update.
     */
    $otg_ui_version = 111;
    function includeIfExists($file)
    {
    }
    /**
     * @param string $fileIdentifier
     * @param string $file
     * @return void
     */
    function composerRequired9fd793efa38e09e52d7e938934f5421($fileIdentifier, $file)
    {
    }
    \define('WCML_VERSION', '5.3.6');
    \define('WCML_PLUGIN_PATH', \dirname(__FILE__));
    \define('WCML_PLUGIN_FOLDER', \basename(\WCML_PLUGIN_PATH));
    \define('WCML_LOCALE_PATH', \WCML_PLUGIN_PATH . '/locale');
    \define('WPML_LOAD_API_SUPPORT', \true);
    \define('WCML_PLUGIN_URL', \untrailingslashit(\plugin_dir_url(__FILE__)));
    /**
     * Load WooCommerce Multilingual after WPML is loaded
     */
    function wcml_loader()
    {
    }
    /**
     * Load WooCommerce Multilingual when WPML is NOT active.
     */
    function load_wcml_without_wpml()
    {
    }
}