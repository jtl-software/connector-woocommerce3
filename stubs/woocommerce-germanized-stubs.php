<?php

namespace {
    final class WooCommerce_Germanized
    {
        /**
         * Current WooCommerce Germanized Version
         *
         * @var string
         */
        public $version = '3.13.5';
        /**
         * @var WC_GZD_Units|null
         */
        public $units = \null;
        /**
         * @var WC_GZD_Price_Labels|null
         */
        public $price_labels = \null;
        /**
         * @var WC_GZD_Delivery_Times|null
         */
        public $delivery_times = \null;
        /**
         * @var WC_GZD_Deposit_Types|null
         */
        public $deposit_types = \null;
        /**
         * @var WC_GZD_Nutrients|null
         */
        public $nutrients = \null;
        /**
         * @var WC_GZD_Allergenic|null
         */
        public $allergenic = \null;
        /**
         * @var WC_GZD_Emails|null
         */
        public $emails = \null;
        public $compatibilities = array();
        public $theme_compatibilities = array();
        /**
         * @var WC_GZD_Product_Factory|null
         */
        public $product_factory = \null;
        /**
         * Main WooCommerceGermanized Instance
         *
         * Ensures that only one instance of WooCommerceGermanized is loaded or can be loaded.
         *
         * @static
         * @return WooCommerce_Germanized - Main instance
         * @see WC_germanized()
         */
        public static function instance()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @since 1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 1.0
         */
        public function __wakeup()
        {
        }
        /**
         * Global getter
         *
         * @param string $key
         *
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * adds some initialization hooks and inits WooCommerce Germanized
         */
        public function __construct()
        {
        }
        public function declare_feature_compatibility()
        {
        }
        /**
         * Checks if is pro user
         *
         * @return boolean
         */
        public function is_pro()
        {
        }
        /**
         * Init WooCommerceGermanized when WordPress initializes.
         */
        public function init()
        {
        }
        public function show_corona_notice()
        {
        }
        public function add_note_statuses($statuses)
        {
        }
        /**
         * Add the option which indicates that a notices should be hidden from the admin user.
         *
         * @param $note_id
         */
        public function on_update_admin_note($note_id)
        {
        }
        /**
         * Auto-load WC_Germanized classes on demand to reduce memory consumption.
         *
         * @param mixed $class
         *
         * @return void
         */
        public function autoload($class)
        {
        }
        /**
         * Get the plugin url.
         *
         * @return string
         */
        public function plugin_url()
        {
        }
        /**
         * Get the plugin path.
         *
         * @return string
         */
        public function plugin_path()
        {
        }
        /**
         * Get WC Germanized template path
         *
         * @return string
         */
        public function template_path()
        {
        }
        /**
         * Get the language path
         *
         * @return string
         */
        public function language_path()
        {
        }
        public function woocommerce_loaded_includes()
        {
        }
        public function is_frontend()
        {
        }
        public function is_rest_api_request()
        {
        }
        public function setup_compatibility()
        {
        }
        public function setup_theme_compatibility()
        {
        }
        public function get_compatibility($name)
        {
        }
        public function get_theme_compatibility($name)
        {
        }
        /**
         * Include required frontend files.
         */
        public function frontend_includes()
        {
        }
        /**
         * Function used to Init WooCommerceGermanized Template Functions - This makes them pluggable by plugins and themes.
         */
        public function include_template_functions()
        {
        }
        /**
         * Filter WooCommerce Templates to look into /templates before looking within theme folder
         *
         * @param string $template
         * @param string $template_name
         * @param string $template_path
         *
         * @return string
         */
        public function filter_templates($template, $template_name, $template_path)
        {
        }
        /**
         * Get templates which are legally critical
         *
         * @return array
         */
        public function get_critical_templates()
        {
        }
        /**
         * Sets review-order.php fallback (if activated) by filtering template name.
         *
         * @param string $template_name
         *
         * @return string
         */
        public function set_checkout_fallback($template, $template_name, $template_path)
        {
        }
        /**
         * Load WooCommerce Germanized Product Classes instead of WooCommerce builtin Product Classes
         *
         * @param string $classname
         * @param string $product_type
         * @param string $post_type
         * @param integer $product_id
         *
         * @return string
         */
        public function filter_product_classes($classname, $product_type, $post_type, $product_id)
        {
        }
        /**
         * Load Localisation files.
         *
         * Note: the first-loaded translation file overrides any following ones if the same translation is present.
         *
         * Frontend/global Locales found in:
         *        - WP_LANG_DIR/woocommerce-germanized/woocommerce-germanized-LOCALE.mo
         *        - WP_LANG_DIR/plugins/woocommerce-germanized-LOCALE.mo
         */
        public function load_plugin_textdomain()
        {
        }
        public function support_german_language_variants($locale, $domain)
        {
        }
        /**
         * Show action links on the plugin screen
         *
         * @param mixed $links
         *
         * @return array
         */
        public function action_links($links)
        {
        }
        /**
         * Add Scripts to frontend
         */
        public function add_scripts()
        {
        }
        public function add_fallback_scripts()
        {
        }
        /**
         * Adds woocommerce checkout table background highlight color as inline css
         */
        public function add_inline_styles()
        {
        }
        public function get_variation_script_params()
        {
        }
        /**
         * Localize Script to enable AJAX
         */
        public function localize_scripts()
        {
        }
        /**
         * Add WooCommerce Germanized Settings Tab
         *
         * @param array $integrations
         *
         * @return array
         */
        public function add_settings($integrations)
        {
        }
        /**
         * PHP 5.3 backwards compatibility for getting date diff in days
         *
         * @param string $from date from
         * @param string $to date to
         *
         * @return array
         */
        public function get_date_diff($from, $to)
        {
        }
        public function get_custom_email_ids()
        {
        }
        /**
         * Add Custom Email templates
         *
         * @param array $mails
         *
         * @return array
         */
        public function add_emails($mails)
        {
        }
        /**
         * Filter Email template to include WooCommerce Germanized template files
         *
         * @param string $core_file
         * @param string $template
         * @param string $template_base
         *
         * @return string
         */
        public function email_templates($core_file, $template, $template_base)
        {
        }
        public function register_gateways($gateways)
        {
        }
    }
}
namespace DeepCopy\Exception {
    class PropertyException extends \ReflectionException
    {
    }
    class CloneException extends \UnexpectedValueException
    {
    }
}
namespace DeepCopy\TypeMatcher {
    class TypeMatcher
    {
        /**
         * @param string $type
         */
        public function __construct($type)
        {
        }
        /**
         * @param mixed $element
         *
         * @return boolean
         */
        public function matches($element)
        {
        }
    }
}
namespace DeepCopy {
    /**
     * @final
     */
    class DeepCopy
    {
        /**
         * @param bool $useCloneMethod   If set to true, when an object implements the __clone() function, it will be used
         *                               instead of the regular deep cloning.
         */
        public function __construct($useCloneMethod = false)
        {
        }
        /**
         * If enabled, will not throw an exception when coming across an uncloneable property.
         *
         * @param $skipUncloneable
         *
         * @return $this
         */
        public function skipUncloneable($skipUncloneable = true)
        {
        }
        /**
         * Deep copies the given object.
         *
         * @param mixed $object
         *
         * @return mixed
         */
        public function copy($object)
        {
        }
        public function addFilter(\DeepCopy\Filter\Filter $filter, \DeepCopy\Matcher\Matcher $matcher)
        {
        }
        public function prependFilter(\DeepCopy\Filter\Filter $filter, \DeepCopy\Matcher\Matcher $matcher)
        {
        }
        public function addTypeFilter(\DeepCopy\TypeFilter\TypeFilter $filter, \DeepCopy\TypeMatcher\TypeMatcher $matcher)
        {
        }
    }
}
namespace DeepCopy\Filter {
    /**
     * Filter to apply to a property while copying an object
     */
    interface Filter
    {
        /**
         * Applies the filter to the object.
         *
         * @param object   $object
         * @param string   $property
         * @param callable $objectCopier
         */
        public function apply($object, $property, $objectCopier);
    }
    /**
     * @final
     */
    class SetNullFilter implements \DeepCopy\Filter\Filter
    {
        /**
         * Sets the object property to null.
         *
         * {@inheritdoc}
         */
        public function apply($object, $property, $objectCopier)
        {
        }
    }
    /**
     * Defines a decorator filter that will not stop the chain of filters.
     */
    class ChainableFilter implements \DeepCopy\Filter\Filter
    {
        /**
         * @var Filter
         */
        protected $filter;
        public function __construct(\DeepCopy\Filter\Filter $filter)
        {
        }
        public function apply($object, $property, $objectCopier)
        {
        }
    }
    /**
     * @final
     */
    class ReplaceFilter implements \DeepCopy\Filter\Filter
    {
        /**
         * @var callable
         */
        protected $callback;
        /**
         * @param callable $callable Will be called to get the new value for each property to replace
         */
        public function __construct(callable $callable)
        {
        }
        /**
         * Replaces the object property by the result of the callback called with the object property.
         *
         * {@inheritdoc}
         */
        public function apply($object, $property, $objectCopier)
        {
        }
    }
}
namespace DeepCopy\Filter\Doctrine {
    /**
     * @final
     */
    class DoctrineCollectionFilter implements \DeepCopy\Filter\Filter
    {
        /**
         * Copies the object property doctrine collection.
         *
         * {@inheritdoc}
         */
        public function apply($object, $property, $objectCopier)
        {
        }
    }
    /**
     * @final
     */
    class DoctrineProxyFilter implements \DeepCopy\Filter\Filter
    {
        /**
         * Triggers the magic method __load() on a Doctrine Proxy class to load the
         * actual entity from the database.
         *
         * {@inheritdoc}
         */
        public function apply($object, $property, $objectCopier)
        {
        }
    }
    /**
     * @final
     */
    class DoctrineEmptyCollectionFilter implements \DeepCopy\Filter\Filter
    {
        /**
         * Sets the object property to an empty doctrine collection.
         *
         * @param object   $object
         * @param string   $property
         * @param callable $objectCopier
         */
        public function apply($object, $property, $objectCopier)
        {
        }
    }
}
namespace DeepCopy\Filter {
    class KeepFilter implements \DeepCopy\Filter\Filter
    {
        /**
         * Keeps the value of the object property.
         *
         * {@inheritdoc}
         */
        public function apply($object, $property, $objectCopier)
        {
        }
    }
}
namespace DeepCopy\Matcher {
    interface Matcher
    {
        /**
         * @param object $object
         * @param string $property
         *
         * @return boolean
         */
        public function matches($object, $property);
    }
    /**
     * @final
     */
    class PropertyNameMatcher implements \DeepCopy\Matcher\Matcher
    {
        /**
         * @param string $property Property name
         */
        public function __construct($property)
        {
        }
        /**
         * Matches a property by its name.
         *
         * {@inheritdoc}
         */
        public function matches($object, $property)
        {
        }
    }
    /**
     * @final
     */
    class PropertyMatcher implements \DeepCopy\Matcher\Matcher
    {
        /**
         * @param string $class    Class name
         * @param string $property Property name
         */
        public function __construct($class, $property)
        {
        }
        /**
         * Matches a specific property of a specific class.
         *
         * {@inheritdoc}
         */
        public function matches($object, $property)
        {
        }
    }
}
namespace DeepCopy\Matcher\Doctrine {
    /**
     * @final
     */
    class DoctrineProxyMatcher implements \DeepCopy\Matcher\Matcher
    {
        /**
         * Matches a Doctrine Proxy class.
         *
         * {@inheritdoc}
         */
        public function matches($object, $property)
        {
        }
    }
}
namespace DeepCopy\Matcher {
    /**
     * Matches a property by its type.
     *
     * It is recommended to use {@see DeepCopy\TypeFilter\TypeFilter} instead, as it applies on all occurrences
     * of given type in copied context (eg. array elements), not just on object properties.
     *
     * @final
     */
    class PropertyTypeMatcher implements \DeepCopy\Matcher\Matcher
    {
        /**
         * @param string $propertyType Property type
         */
        public function __construct($propertyType)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function matches($object, $property)
        {
        }
    }
}
namespace DeepCopy\TypeFilter {
    interface TypeFilter
    {
        /**
         * Applies the filter to the object.
         *
         * @param mixed $element
         */
        public function apply($element);
    }
}
namespace DeepCopy\TypeFilter\Date {
    /**
     * @final
     *
     * @deprecated Will be removed in 2.0. This filter will no longer be necessary in PHP 7.1+.
     */
    class DateIntervalFilter implements \DeepCopy\TypeFilter\TypeFilter
    {
        /**
         * {@inheritdoc}
         *
         * @param DateInterval $element
         *
         * @see http://news.php.net/php.bugs/205076
         */
        public function apply($element)
        {
        }
    }
}
namespace DeepCopy\TypeFilter\Spl {
    /**
     * In PHP 7.4 the storage of an ArrayObject isn't returned as
     * ReflectionProperty. So we deep copy its array copy.
     */
    final class ArrayObjectFilter implements \DeepCopy\TypeFilter\TypeFilter
    {
        public function __construct(\DeepCopy\DeepCopy $copier)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function apply($arrayObject)
        {
        }
    }
    /**
     * @final
     */
    class SplDoublyLinkedListFilter implements \DeepCopy\TypeFilter\TypeFilter
    {
        public function __construct(\DeepCopy\DeepCopy $copier)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function apply($element)
        {
        }
    }
    /**
     * @deprecated Use {@see SplDoublyLinkedListFilter} instead.
     */
    class SplDoublyLinkedList extends \DeepCopy\TypeFilter\Spl\SplDoublyLinkedListFilter
    {
    }
}
namespace DeepCopy\TypeFilter {
    /**
     * @final
     */
    class ReplaceFilter implements \DeepCopy\TypeFilter\TypeFilter
    {
        /**
         * @var callable
         */
        protected $callback;
        /**
         * @param callable $callable Will be called to get the new value for each element to replace
         */
        public function __construct(callable $callable)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function apply($element)
        {
        }
    }
    /**
     * @final
     */
    class ShallowCopyFilter implements \DeepCopy\TypeFilter\TypeFilter
    {
        /**
         * {@inheritdoc}
         */
        public function apply($element)
        {
        }
    }
}
namespace DeepCopy\Reflection {
    class ReflectionHelper
    {
        /**
         * Retrieves all properties (including private ones), from object and all its ancestors.
         *
         * Standard \ReflectionClass->getProperties() does not return private properties from ancestor classes.
         *
         * @author muratyaman@gmail.com
         * @see http://php.net/manual/en/reflectionclass.getproperties.php
         *
         * @param ReflectionClass $ref
         *
         * @return ReflectionProperty[]
         */
        public static function getProperties(\ReflectionClass $ref)
        {
        }
        /**
         * Retrieves property by name from object and all its ancestors.
         *
         * @param object|string $object
         * @param string $name
         *
         * @throws PropertyException
         * @throws ReflectionException
         *
         * @return ReflectionProperty
         */
        public static function getProperty($object, $name)
        {
        }
    }
}
namespace Automattic\Jetpack\Autoloader {
    /**
     * Class ManifestGenerator.
     */
    class ManifestGenerator
    {
        /**
         * Builds a manifest file for the given autoloader type.
         *
         * @param string $autoloaderType The type of autoloader to build a manifest for.
         * @param string $fileName The filename of the manifest.
         * @param array  $content The manifest content to generate using.
         *
         * @return string|null $manifestFile
         * @throws \InvalidArgumentException When an invalid autoloader type is given.
         */
        public static function buildManifest($autoloaderType, $fileName, $content)
        {
        }
    }
}
namespace {
    /* HEADER */
    // phpcs:ignore
    /**
     * This class handles management of the actual PHP autoloader.
     */
    class Autoloader
    {
        /**
         * Checks to see whether or not the autoloader should be initialized and then initializes it if so.
         *
         * @param Container|null $container The container we want to use for autoloader initialization. If none is given
         *                                  then a container will be created automatically.
         */
        public static function init($container = \null)
        {
        }
    }
    /* HEADER */
    // phpcs:ignore
    /**
     * This class ensures that we're only executing the latest autoloader.
     */
    class Latest_Autoloader_Guard
    {
        /**
         * The constructor.
         *
         * @param Plugins_Handler    $plugins_handler    The Plugins_Handler instance.
         * @param Autoloader_Handler $autoloader_handler The Autoloader_Handler instance.
         * @param Autoloader_Locator $autoloader_locator The Autoloader_Locator instance.
         */
        public function __construct($plugins_handler, $autoloader_handler, $autoloader_locator)
        {
        }
        /**
         * Indicates whether or not the autoloader should be initialized. Note that this function
         * has the side-effect of actually loading the latest autoloader in the event that this
         * is not it.
         *
         * @param string   $current_plugin             The current plugin we're checking.
         * @param string[] $plugins                    The active plugins to check for autoloaders in.
         * @param bool     $was_included_by_autoloader Indicates whether or not this autoloader was included by another.
         *
         * @return bool True if we should stop initialization, otherwise false.
         */
        public function should_stop_init($current_plugin, $plugins, $was_included_by_autoloader)
        {
        }
    }
    /* HEADER */
    // phpcs:ignore
    /**
     * This class handles management of the actual PHP autoloader.
     */
    class PHP_Autoloader
    {
        /**
         * Registers the autoloader with PHP so that it can begin autoloading classes.
         *
         * @param Version_Loader $version_loader The class loader to use in the autoloader.
         */
        public function register_autoloader($version_loader)
        {
        }
        /**
         * Unregisters the active autoloader so that it will no longer autoload classes.
         */
        public function unregister_autoloader()
        {
        }
        /**
         * Loads a class file if one could be found.
         *
         * Note: This function is static so that the autoloader can be easily unregistered. If
         * it was a class method we would have to unwrap the object to check the namespace.
         *
         * @param string $class_name The name of the class to autoload.
         *
         * @return bool Indicates whether or not a class file was loaded.
         */
        public static function load_class($class_name)
        {
        }
    }
    /* HEADER */
    // phpcs:ignore
    /**
     * This class handles locating and caching all of the active plugins.
     */
    class Plugins_Handler
    {
        /**
         * The transient key for plugin paths.
         */
        const TRANSIENT_KEY = 'jetpack_autoloader_plugin_paths';
        /**
         * The constructor.
         *
         * @param Plugin_Locator $plugin_locator The locator for finding active plugins.
         * @param Path_Processor $path_processor The processor for transforming cached paths.
         */
        public function __construct($plugin_locator, $path_processor)
        {
        }
        /**
         * Gets all of the active plugins we can find.
         *
         * @param bool $include_deactivating When true, plugins deactivating this request will be considered active.
         * @param bool $record_unknown When true, the current plugin will be marked as active and recorded when unknown.
         *
         * @return string[]
         */
        public function get_active_plugins($include_deactivating, $record_unknown)
        {
        }
        /**
         * Gets all of the cached plugins if there are any.
         *
         * @return string[]
         */
        public function get_cached_plugins()
        {
        }
        /**
         * Saves the plugin list to the cache.
         *
         * @param array $plugins The plugin list to save to the cache.
         */
        public function cache_plugins($plugins)
        {
        }
        /**
         * Checks to see whether or not the plugin list given has changed when compared to the
         * shared `$jetpack_autoloader_cached_plugin_paths` global. This allows us to deal
         * with cases where the active list may change due to filtering..
         *
         * @param string[] $plugins The plugins list to check against the global cache.
         *
         * @return bool True if the plugins have changed, otherwise false.
         */
        public function have_plugins_changed($plugins)
        {
        }
    }
    /* HEADER */
    // phpcs:ignore
    /**
     * This class loads other classes based on given parameters.
     */
    class Version_Loader
    {
        /**
         * The constructor.
         *
         * @param Version_Selector $version_selector The Version_Selector object.
         * @param array            $classmap The verioned classmap to load using.
         * @param array            $psr4_map The versioned PSR-4 map to load using.
         * @param array            $filemap The versioned filemap to load.
         */
        public function __construct($version_selector, $classmap, $psr4_map, $filemap)
        {
        }
        /**
         * Finds the file path for the given class.
         *
         * @param string $class_name The class to find.
         *
         * @return string|null $file_path The path to the file if found, null if no class was found.
         */
        public function find_class_file($class_name)
        {
        }
        /**
         * Load all of the files in the filemap.
         */
        public function load_filemap()
        {
        }
    }
    /* HEADER */
    // phpcs:ignore
    /**
     * This class handles dealing with paths for the autoloader.
     */
    class Path_Processor
    {
        /**
         * Given a path this will replace any of the path constants with a token to represent it.
         *
         * @param string $path The path we want to process.
         *
         * @return string The tokenized path.
         */
        public function tokenize_path_constants($path)
        {
        }
        /**
         * Given a path this will replace any of the path constant tokens with the expanded path.
         *
         * @param string $tokenized_path The path we want to process.
         *
         * @return string The expanded path.
         */
        public function untokenize_path_constants($tokenized_path)
        {
        }
        /**
         * Given a file and an array of places it might be, this will find the absolute path and return it.
         *
         * @param string $file The plugin or theme file to resolve.
         * @param array  $directories_to_check The directories we should check for the file if it isn't an absolute path.
         *
         * @return string|false Returns the absolute path to the directory, otherwise false.
         */
        public function find_directory_with_autoloader($file, $directories_to_check)
        {
        }
    }
    /**
     * This class locates autoloaders.
     */
    class Autoloader_Locator
    {
        /**
         * The constructor.
         *
         * @param Version_Selector $version_selector The version selector object.
         */
        public function __construct($version_selector)
        {
        }
        /**
         * Finds the path to the plugin with the latest autoloader.
         *
         * @param array  $plugin_paths An array of plugin paths.
         * @param string $latest_version The latest version reference.
         *
         * @return string|null
         */
        public function find_latest_autoloader($plugin_paths, &$latest_version)
        {
        }
        /**
         * Gets the path to the autoloader.
         *
         * @param string $plugin_path The path to the plugin.
         *
         * @return string
         */
        public function get_autoloader_path($plugin_path)
        {
        }
        /**
         * Gets the version for the autoloader.
         *
         * @param string $plugin_path The path to the plugin.
         *
         * @return string|null
         */
        public function get_autoloader_version($plugin_path)
        {
        }
    }
    /* HEADER */
    // phpcs:ignore
    /**
     * Allows the latest autoloader to register hooks that can be removed when the autoloader is reset.
     */
    class Hook_Manager
    {
        /**
         * The constructor.
         */
        public function __construct()
        {
        }
        /**
         * Adds an action to WordPress and registers it internally.
         *
         * @param string   $tag           The name of the action which is hooked.
         * @param callable $callable      The function to call.
         * @param int      $priority      Used to specify the priority of the action.
         * @param int      $accepted_args Used to specify the number of arguments the callable accepts.
         */
        public function add_action($tag, $callable, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * Adds a filter to WordPress and registers it internally.
         *
         * @param string   $tag           The name of the filter which is hooked.
         * @param callable $callable      The function to call.
         * @param int      $priority      Used to specify the priority of the filter.
         * @param int      $accepted_args Used to specify the number of arguments the callable accepts.
         */
        public function add_filter($tag, $callable, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * Removes all of the registered hooks.
         */
        public function reset()
        {
        }
    }
}
namespace Automattic\Jetpack\Autoloader {
    /**
     * Class AutoloadGenerator.
     */
    class AutoloadGenerator
    {
        /**
         * Instantiate an AutoloadGenerator object.
         *
         * @param IOInterface $io IO object.
         */
        public function __construct(\Composer\IO\IOInterface $io = null)
        {
        }
        /**
         * Dump the Jetpack autoloader files.
         *
         * @param Composer                     $composer The Composer object.
         * @param Config                       $config Config object.
         * @param InstalledRepositoryInterface $localRepo Installed Repository object.
         * @param PackageInterface             $mainPackage Main Package object.
         * @param InstallationManager          $installationManager Manager for installing packages.
         * @param string                       $targetDir Path to the current target directory.
         * @param bool                         $scanPsrPackages Whether or not PSR packages should be converted to a classmap.
         * @param string                       $suffix The autoloader suffix.
         */
        public function dump(\Composer\Composer $composer, \Composer\Config $config, \Composer\Repository\InstalledRepositoryInterface $localRepo, \Composer\Package\PackageInterface $mainPackage, \Composer\Installer\InstallationManager $installationManager, $targetDir, $scanPsrPackages = false, $suffix = null)
        {
        }
        /**
         * Compiles an ordered list of namespace => path mappings
         *
         * @param  array            $packageMap  Array of array(package, installDir-relative-to-composer.json).
         * @param  PackageInterface $mainPackage Main package instance.
         *
         * @return array The list of path mappings.
         */
        public function parseAutoloads(array $packageMap, \Composer\Package\PackageInterface $mainPackage)
        {
        }
        /**
         * Sorts packages by dependency weight
         *
         * Packages of equal weight retain the original order
         *
         * @param  array $packageMap The package map.
         *
         * @return array
         */
        protected function sortPackageMap(array $packageMap)
        {
        }
        /**
         * Returns the file identifier.
         *
         * @param PackageInterface $package The package instance.
         * @param string           $path The path.
         */
        protected function getFileIdentifier(\Composer\Package\PackageInterface $package, $path)
        {
        }
        /**
         * Returns the path code for the given path.
         *
         * @param Filesystem $filesystem The filesystem instance.
         * @param string     $basePath The base path.
         * @param string     $vendorPath The vendor path.
         * @param string     $path The path.
         *
         * @return string The path code.
         */
        protected function getPathCode(\Composer\Util\Filesystem $filesystem, $basePath, $vendorPath, $path)
        {
        }
        /**
         * This function differs from the composer parseAutoloadsType in that beside returning the path.
         * It also return the path and the version of a package.
         *
         * Supports PSR-4, PSR-0, and classmap parsing.
         *
         * @param array            $packageMap Map of all the packages.
         * @param string           $type Type of autoloader to use.
         * @param PackageInterface $mainPackage Instance of the Package Object.
         *
         * @return array
         */
        protected function parseAutoloadsType(array $packageMap, $type, \Composer\Package\PackageInterface $mainPackage)
        {
        }
    }
}
namespace {
    /* HEADER */
    // phpcs:ignore
    /**
     * This class manages the files and dependencies of the autoloader.
     */
    class Container
    {
        /**
         * Since each autoloader's class files exist within their own namespace we need a map to
         * convert between the local class and a shared key. Note that no version checking is
         * performed on these dependencies and the first autoloader to register will be the
         * one that is utilized.
         */
        const SHARED_DEPENDENCY_KEYS = array(\Hook_Manager::class => 'Hook_Manager');
        /**
         * A map of all the dependencies we've registered with the container and created.
         *
         * @var array
         */
        protected $dependencies;
        /**
         * The constructor.
         */
        public function __construct()
        {
        }
        /**
         * Gets a dependency out of the container.
         *
         * @param string $class The class to fetch.
         *
         * @return mixed
         * @throws \InvalidArgumentException When a class that isn't registered with the container is fetched.
         */
        public function get($class)
        {
        }
    }
    /* HEADER */
    // phpcs:ignore
    /**
     * This class handles the shutdown of the autoloader.
     */
    class Shutdown_Handler
    {
        /**
         * Constructor.
         *
         * @param Plugins_Handler $plugins_handler The Plugins_Handler instance to use.
         * @param string[]        $cached_plugins The plugins cached by the autoloaer.
         * @param bool            $was_included_by_autoloader Indicates whether or not the autoloader was included by another.
         */
        public function __construct($plugins_handler, $cached_plugins, $was_included_by_autoloader)
        {
        }
        /**
         * Handles the shutdown of the autoloader.
         */
        public function __invoke()
        {
        }
    }
    /* HEADER */
    // phpcs:ignore
    /**
     * This class reads autoloader manifest files.
     */
    class Manifest_Reader
    {
        /**
         * The constructor.
         *
         * @param Version_Selector $version_selector The Version_Selector object.
         */
        public function __construct($version_selector)
        {
        }
        /**
         * Reads all of the manifests in the given plugin paths.
         *
         * @param array  $plugin_paths  The paths to the plugins we're loading the manifest in.
         * @param string $manifest_path The path that we're loading the manifest from in each plugin.
         * @param array  $path_map The path map to add the contents of the manifests to.
         *
         * @return array $path_map The path map we've built using the manifests in each plugin.
         */
        public function read_manifests($plugin_paths, $manifest_path, &$path_map)
        {
        }
        /**
         * Registers a plugin's manifest file with the path map.
         *
         * @param string $manifest_path The absolute path to the manifest that we're loading.
         * @param array  $path_map The path map to add the contents of the manifest to.
         */
        protected function register_manifest($manifest_path, &$path_map)
        {
        }
        /**
         * Registers an entry from the manifest in the path map.
         *
         * @param string $key The identifier for the entry we're registering.
         * @param array  $data The data for the entry we're registering.
         * @param array  $path_map The path map to add the contents of the manifest to.
         */
        protected function register_record($key, $data, &$path_map)
        {
        }
    }
    /**
     * This class selects the package version for the autoloader.
     */
    class Autoloader_Handler
    {
        /**
         * The constructor.
         *
         * @param PHP_Autoloader   $php_autoloader The PHP_Autoloader instance.
         * @param Hook_Manager     $hook_manager The Hook_Manager instance.
         * @param Manifest_Reader  $manifest_reader The Manifest_Reader instance.
         * @param Version_Selector $version_selector The Version_Selector instance.
         */
        public function __construct($php_autoloader, $hook_manager, $manifest_reader, $version_selector)
        {
        }
        /**
         * Checks to see whether or not an autoloader is currently in the process of initializing.
         *
         * @return bool
         */
        public function is_initializing()
        {
        }
        /**
         * Activates an autoloader using the given plugins and activates it.
         *
         * @param string[] $plugins The plugins to initialize the autoloader for.
         */
        public function activate_autoloader($plugins)
        {
        }
        /**
         * Resets the active autoloader and all related global state.
         */
        public function reset_autoloader()
        {
        }
    }
    /* HEADER */
    // phpcs:ignore
    /**
     * Used to select package versions.
     */
    class Version_Selector
    {
        /**
         * Checks whether the selected package version should be updated. Composer development
         * package versions ('9999999-dev' or versions that start with 'dev-') are favored
         * when the JETPACK_AUTOLOAD_DEV constant is set to true.
         *
         * @param String $selected_version The currently selected package version.
         * @param String $compare_version The package version that is being evaluated to
         *                                determine if the version needs to be updated.
         *
         * @return bool Returns true if the selected package version should be updated,
         *                 else false.
         */
        public function is_version_update_required($selected_version, $compare_version)
        {
        }
        /**
         * Checks whether the given package version is a development version.
         *
         * @param String $version The package version.
         *
         * @return bool True if the version is a dev version, else false.
         */
        public function is_dev_version($version)
        {
        }
    }
}
namespace Automattic\Jetpack\Autoloader {
    /**
     * Class AutoloadFileWriter.
     */
    class AutoloadFileWriter
    {
        /**
         * The file comment to use.
         */
        const COMMENT = <<<AUTOLOADER_COMMENT
/**
 * This file was automatically generated by automattic/jetpack-autoloader.
 *
 * @package automattic/jetpack-autoloader
 */

AUTOLOADER_COMMENT;
        /**
         * Copies autoloader files and replaces any placeholders in them.
         *
         * @param IOInterface|null $io An IO for writing to.
         * @param string           $outDir The directory to place the autoloader files in.
         * @param string           $suffix The suffix to use in the autoloader's namespace.
         */
        public static function copyAutoloaderFiles($io, $outDir, $suffix)
        {
        }
    }
}
namespace {
    /* HEADER */
    // phpcs:ignore
    /**
     * This class scans the WordPress installation to find active plugins.
     */
    class Plugin_Locator
    {
        /**
         * The constructor.
         *
         * @param Path_Processor $path_processor The Path_Processor instance.
         */
        public function __construct($path_processor)
        {
        }
        /**
         * Finds the path to the current plugin.
         *
         * @return string $path The path to the current plugin.
         *
         * @throws \RuntimeException If the current plugin does not have an autoloader.
         */
        public function find_current_plugin()
        {
        }
        /**
         * Checks a given option for plugin paths.
         *
         * @param string $option_name  The option that we want to check for plugin information.
         * @param bool   $site_option  Indicates whether or not we want to check the site option.
         *
         * @return array $plugin_paths The list of absolute paths we've found.
         */
        public function find_using_option($option_name, $site_option = \false)
        {
        }
        /**
         * Checks for plugins in the `action` request parameter.
         *
         * @param string[] $allowed_actions The actions that we're allowed to return plugins for.
         *
         * @return array $plugin_paths The list of absolute paths we've found.
         */
        public function find_using_request_action($allowed_actions)
        {
        }
    }
}
namespace Automattic\Jetpack\Autoloader {
    /**
     * Class AutoloadProcessor.
     */
    class AutoloadProcessor
    {
        /**
         * The constructor.
         *
         * @param callable $classmapScanner A callable for scanning a directory for all of its classes.
         * @param callable $pathCodeTransformer A callable for transforming a path into one to be used in code.
         */
        public function __construct($classmapScanner, $pathCodeTransformer)
        {
        }
        /**
         * Processes the classmap autoloads into a relative path format including the version for each file.
         *
         * @param array $autoloads The autoloads we are processing.
         * @param bool  $scanPsrPackages Whether or not PSR packages should be converted to a classmap.
         *
         * @return array $processed
         */
        public function processClassmap($autoloads, $scanPsrPackages)
        {
        }
        /**
         * Processes the PSR-4 autoloads into a relative path format including the version for each file.
         *
         * @param array $autoloads The autoloads we are processing.
         * @param bool  $scanPsrPackages Whether or not PSR packages should be converted to a classmap.
         *
         * @return array $processed
         */
        public function processPsr4Packages($autoloads, $scanPsrPackages)
        {
        }
        /**
         * Processes the file autoloads into a relative format including the version for each file.
         *
         * @param array $autoloads The autoloads we are processing.
         *
         * @return array|null $processed
         */
        public function processFiles($autoloads)
        {
        }
    }
    /**
     * Class CustomAutoloaderPlugin.
     *
     * @package automattic/jetpack-autoloader
     */
    class CustomAutoloaderPlugin implements \Composer\Plugin\PluginInterface, \Composer\EventDispatcher\EventSubscriberInterface
    {
        /**
         * Do nothing.
         *
         * @param Composer    $composer Composer object.
         * @param IOInterface $io IO object.
         */
        public function activate(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
        /**
         * Do nothing.
         * phpcs:disable VariableAnalysis.CodeAnalysis.VariableAnalysis.UnusedVariable
         *
         * @param Composer    $composer Composer object.
         * @param IOInterface $io IO object.
         */
        public function deactivate(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
        /**
         * Do nothing.
         * phpcs:disable VariableAnalysis.CodeAnalysis.VariableAnalysis.UnusedVariable
         *
         * @param Composer    $composer Composer object.
         * @param IOInterface $io IO object.
         */
        public function uninstall(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
        /**
         * Tell composer to listen for events and do something with them.
         *
         * @return array List of subscribed events.
         */
        public static function getSubscribedEvents()
        {
        }
        /**
         * Generate the custom autolaoder.
         *
         * @param Event $event Script event object.
         */
        public function postAutoloadDump(\Composer\Script\Event $event)
        {
        }
    }
}
namespace PHP_IBAN {
    # OO wrapper for 'php-iban.php'
    class IBAN
    {
        public $iban;
        function __construct($iban = '')
        {
        }
        public function Verify($iban = '', $machine_format_only = false)
        {
        }
        public function VerifyMachineFormatOnly($iban = '')
        {
        }
        public function MistranscriptionSuggestions()
        {
        }
        public function MachineFormat()
        {
        }
        public function HumanFormat()
        {
        }
        public function ObfuscatedFormat()
        {
        }
        public function Country($iban = '')
        {
        }
        public function Checksum($iban = '')
        {
        }
        public function NationalChecksum($iban = '')
        {
        }
        public function BBAN()
        {
        }
        public function VerifyChecksum()
        {
        }
        public function FindChecksum()
        {
        }
        public function SetChecksum()
        {
        }
        public function ChecksumStringReplace()
        {
        }
        public function FindNationalChecksum()
        {
        }
        public function SetNationalChecksum()
        {
        }
        public function VerifyNationalChecksum()
        {
        }
        public function Parts()
        {
        }
        public function Bank()
        {
        }
        public function Branch()
        {
        }
        public function Account()
        {
        }
        public function Countries()
        {
        }
    }
    # IBANCountry
    class IBANCountry
    {
        public $code;
        # constructor with code
        function __construct($code = '')
        {
        }
        public function Code()
        {
        }
        public function Name()
        {
        }
        public function DomesticExample()
        {
        }
        public function BBANExample()
        {
        }
        public function BBANFormatSWIFT()
        {
        }
        public function BBANFormatRegex()
        {
        }
        public function BBANLength()
        {
        }
        public function IBANExample()
        {
        }
        public function IBANFormatSWIFT()
        {
        }
        public function IBANFormatRegex()
        {
        }
        public function IBANLength()
        {
        }
        public function BankIDStartOffset()
        {
        }
        public function BankIDStopOffset()
        {
        }
        public function BranchIDStartOffset()
        {
        }
        public function BranchIDStopOffset()
        {
        }
        public function NationalChecksumStartOffset()
        {
        }
        public function NationalChecksumStopOffset()
        {
        }
        public function RegistryEdition()
        {
        }
        public function SWIFTOfficial()
        {
        }
        public function IsSEPA()
        {
        }
        public function IANA()
        {
        }
        public function ISO3166()
        {
        }
        public function ParentRegistrar()
        {
        }
        public function CurrencyISO4217()
        {
        }
        public function CentralBankURL()
        {
        }
        public function CentralBankName()
        {
        }
        public function Membership()
        {
        }
        public function IsEuMember()
        {
        }
    }
}
namespace Composer\Installers {
    abstract class BaseInstaller
    {
        protected $locations = array();
        protected $composer;
        protected $package;
        protected $io;
        /**
         * Initializes base installer.
         *
         * @param PackageInterface $package
         * @param Composer         $composer
         * @param IOInterface      $io
         */
        public function __construct(\Composer\Package\PackageInterface $package = null, \Composer\Composer $composer = null, \Composer\IO\IOInterface $io = null)
        {
        }
        /**
         * Return the install path based on package type.
         *
         * @param  PackageInterface $package
         * @param  string           $frameworkType
         * @return string
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
        /**
         * For an installer to override to modify the vars per installer.
         *
         * @param  array<string, string> $vars This will normally receive array{name: string, vendor: string, type: string}
         * @return array<string, string>
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * Gets the installer's locations
         *
         * @return array<string, string> map of package types => install path
         */
        public function getLocations()
        {
        }
        /**
         * Replace vars in a path
         *
         * @param  string                $path
         * @param  array<string, string> $vars
         * @return string
         */
        protected function templatePath($path, array $vars = array())
        {
        }
        /**
         * Search through a passed paths array for a custom install path.
         *
         * @param  array  $paths
         * @param  string $name
         * @param  string $type
         * @param  string $vendor = NULL
         * @return string|false
         */
        protected function mapCustomInstallPaths(array $paths, $name, $type, $vendor = NULL)
        {
        }
    }
    /**
     * Plugin/theme installer for majima
     * @author David Neustadt
     */
    class MajimaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Transforms the names
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class AsgardInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'Modules/{$name}/', 'theme' => 'Themes/{$name}/');
        /**
         * Format package name.
         *
         * For package type asgard-module, cut off a trailing '-plugin' if present.
         *
         * For package type asgard-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class WHMCSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('addons' => 'modules/addons/{$vendor}_{$name}/', 'fraud' => 'modules/fraud/{$vendor}_{$name}/', 'gateways' => 'modules/gateways/{$vendor}_{$name}/', 'notifications' => 'modules/notifications/{$vendor}_{$name}/', 'registrars' => 'modules/registrars/{$vendor}_{$name}/', 'reports' => 'modules/reports/{$vendor}_{$name}/', 'security' => 'modules/security/{$vendor}_{$name}/', 'servers' => 'modules/servers/{$vendor}_{$name}/', 'social' => 'modules/social/{$vendor}_{$name}/', 'support' => 'modules/support/{$vendor}_{$name}/', 'templates' => 'templates/{$vendor}_{$name}/', 'includes' => 'includes/{$vendor}_{$name}/');
    }
    class SyliusInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('theme' => 'themes/{$name}/');
    }
    class EliasisInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('component' => 'components/{$name}/', 'module' => 'modules/{$name}/', 'plugin' => 'plugins/{$name}/', 'template' => 'templates/{$name}/');
    }
    class OxidInstaller extends \Composer\Installers\BaseInstaller
    {
        const VENDOR_PATTERN = '/^modules\\/(?P<vendor>.+)\\/.+/';
        protected $locations = array('module' => 'modules/{$name}/', 'theme' => 'application/views/{$name}/', 'out' => 'out/{$name}/');
        /**
         * getInstallPath
         *
         * @param PackageInterface $package
         * @param string $frameworkType
         * @return string
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
        /**
         * prepareVendorDirectory
         *
         * Makes sure there is a vendormetadata.php file inside
         * the vendor folder if there is a vendor folder.
         *
         * @param string $installPath
         * @return void
         */
        protected function prepareVendorDirectory($installPath)
        {
        }
    }
    class ZendInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'library/{$name}/', 'extra' => 'extras/library/{$name}/', 'module' => 'module/{$name}/');
    }
    /**
     * Class DolibarrInstaller
     *
     * @package Composer\Installers
     * @author  Raphaël Doursenaud <rdoursenaud@gpcsolutions.fr>
     */
    class DolibarrInstaller extends \Composer\Installers\BaseInstaller
    {
        //TODO: Add support for scripts and themes
        protected $locations = array('module' => 'htdocs/custom/{$name}/');
    }
    class MauticInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'theme' => 'themes/{$name}/', 'core' => 'app/');
        /**
         * Format package name of mautic-plugins to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    /**
     * Extension installer for TYPO3 CMS
     *
     * @deprecated since 1.0.25, use https://packagist.org/packages/typo3/cms-composer-installers instead
     *
     * @author Sascha Egerer <sascha.egerer@dkd.de>
     */
    class TYPO3CmsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'typo3conf/ext/{$name}/');
    }
    class KnownInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'IdnoPlugins/{$name}/', 'theme' => 'Themes/{$name}/', 'console' => 'ConsolePlugins/{$name}/');
    }
    class SMFInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'Sources/{$name}/', 'theme' => 'Themes/{$name}/');
    }
    class OctoberInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'plugin' => 'plugins/{$vendor}/{$name}/', 'theme' => 'themes/{$vendor}-{$name}/');
        /**
         * Format package name.
         *
         * For package type october-plugin, cut off a trailing '-plugin' if present.
         *
         * For package type october-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class CroogoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'Plugin/{$name}/', 'theme' => 'View/Themed/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class AglInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'More/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class MagentoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('theme' => 'app/design/frontend/{$name}/', 'skin' => 'skin/frontend/default/{$name}/', 'library' => 'lib/{$name}/');
    }
    class LaravelInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'libraries/{$name}/');
    }
    /**
     * An installer to handle TAO extensions.
     */
    class TaoInstaller extends \Composer\Installers\BaseInstaller
    {
        const EXTRA_TAO_EXTENSION_NAME = 'tao-extension-name';
        protected $locations = array('extension' => '{$name}');
        public function inflectPackageVars($vars)
        {
        }
    }
    class HuradInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'theme' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class WolfCMSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'wolf/plugins/{$name}/');
    }
    /**
     * Plugin installer for symfony 1.x
     *
     * @author Jérôme Tamarelle <jerome@tamarelle.net>
     */
    class Symfony1Installer extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PimcoreInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class MakoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'app/packages/{$name}/');
    }
    class SyDESInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'app/modules/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format module name.
         *
         * Strip `sydes-` prefix and a trailing '-theme' or '-module' from package name if present.
         *
         * {@inerhitDoc}
         */
        public function inflectPackageVars($vars)
        {
        }
        public function inflectModuleVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class VgmcpInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('bundle' => 'src/{$vendor}/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * For package type vgmcp-bundle, cut off a trailing '-bundle' if present.
         *
         * For package type vgmcp-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class ExpressionEngineInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array();
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
    }
    class OntoWikiInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'extensions/{$name}/', 'theme' => 'extensions/themes/{$name}/', 'translation' => 'extensions/translations/{$name}/');
        /**
         * Format package name to lower case and remove ".ontowiki" suffix
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ReIndexInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('theme' => 'themes/{$name}/', 'plugin' => 'plugins/{$name}/');
    }
    class MicroweberInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'userfiles/modules/{$install_item_dir}/', 'module-skin' => 'userfiles/modules/{$install_item_dir}/templates/', 'template' => 'userfiles/templates/{$install_item_dir}/', 'element' => 'userfiles/elements/{$install_item_dir}/', 'vendor' => 'vendor/{$install_item_dir}/', 'components' => 'components/{$install_item_dir}/');
        /**
         * Format package name.
         *
         * For package type microweber-module, cut off a trailing '-module' if present
         *
         * For package type microweber-template, cut off a trailing '-template' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectTemplateVars($vars)
        {
        }
        protected function inflectTemplatesVars($vars)
        {
        }
        protected function inflectCoreVars($vars)
        {
        }
        protected function inflectModuleVars($vars)
        {
        }
        protected function inflectModulesVars($vars)
        {
        }
        protected function inflectSkinVars($vars)
        {
        }
        protected function inflectElementVars($vars)
        {
        }
    }
    class ItopInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'extensions/{$name}/');
    }
    class PlentymarketsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => '{$name}/');
        /**
         * Remove hyphen, "plugin" and format to camelcase
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PuppetInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    /**
     * Composer installer for 3rd party Tusk utilities
     * @author Drew Ewing <drew@phenocode.com>
     */
    class TuskInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('task' => '.tusk/tasks/{$name}/', 'command' => '.tusk/commands/{$name}/', 'asset' => 'assets/tusk/{$name}/');
    }
    /**
     * An installer to handle TYPO3 Flow specifics when installing packages.
     */
    class TYPO3FlowInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'Packages/Application/{$name}/', 'framework' => 'Packages/Framework/{$name}/', 'plugin' => 'Packages/Plugins/{$name}/', 'site' => 'Packages/Sites/{$name}/', 'boilerplate' => 'Packages/Boilerplates/{$name}/', 'build' => 'Build/{$name}/');
        /**
         * Modify the package name to be a TYPO3 Flow style key.
         *
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ProcessWireInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'site/modules/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class UserFrostingInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('sprinkle' => 'app/sprinkles/{$name}/');
    }
    class RedaxoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('addon' => 'redaxo/include/addons/{$name}/', 'bestyle-plugin' => 'redaxo/include/addons/be_style/plugins/{$name}/');
    }
    class MiaoxingInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
    }
    /**
     * Installer for Craft Plugins
     */
    class CraftInstaller extends \Composer\Installers\BaseInstaller
    {
        const NAME_PREFIX = 'craft';
        const NAME_SUFFIX = 'plugin';
        protected $locations = array('plugin' => 'craft/plugins/{$name}/');
        /**
         * Strip `craft-` prefix and/or `-plugin` suffix from package names
         *
         * @param  array $vars
         *
         * @return array
         */
        public final function inflectPackageVars($vars)
        {
        }
    }
    class AttogramInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    class MODULEWorkInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    /**
     * An installer to handle MODX Evolution specifics when installing packages.
     */
    class MODXEvoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('snippet' => 'assets/snippets/{$name}/', 'plugin' => 'assets/plugins/{$name}/', 'module' => 'assets/modules/{$name}/', 'template' => 'assets/templates/{$name}/', 'lib' => 'assets/lib/{$name}/');
    }
    class FuelInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'fuel/app/modules/{$name}/', 'package' => 'fuel/packages/{$name}/', 'theme' => 'fuel/app/themes/{$name}/');
    }
    class KodiCMSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'cms/plugins/{$name}/', 'media' => 'cms/media/vendor/{$name}/');
    }
    class YawikInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'module/{$name}/');
        /**
         * Format package name to CamelCase
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class CodeIgniterInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'application/libraries/{$name}/', 'third-party' => 'application/third_party/{$name}/', 'module' => 'application/modules/{$name}/');
    }
    class PhiftyInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('bundle' => 'bundles/{$name}/', 'library' => 'libraries/{$name}/', 'framework' => 'frameworks/{$name}/');
    }
    class Installer extends \Composer\Installer\LibraryInstaller
    {
        /**
         * Installer constructor.
         *
         * Disables installers specified in main composer extra installer-disable
         * list
         *
         * @param IOInterface          $io
         * @param Composer             $composer
         * @param string               $type
         * @param Filesystem|null      $filesystem
         * @param BinaryInstaller|null $binaryInstaller
         */
        public function __construct(\Composer\IO\IOInterface $io, \Composer\Composer $composer, $type = 'library', \Composer\Util\Filesystem $filesystem = null, \Composer\Installer\BinaryInstaller $binaryInstaller = null)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package)
        {
        }
        public function uninstall(\Composer\Repository\InstalledRepositoryInterface $repo, \Composer\Package\PackageInterface $package)
        {
        }
        /**
         * {@inheritDoc}
         */
        public function supports($packageType)
        {
        }
        /**
         * Finds a supported framework type if it exists and returns it
         *
         * @param  string       $type
         * @return string|false
         */
        protected function findFrameworkType($type)
        {
        }
        /**
         * Get the second part of the regular expression to check for support of a
         * package type
         *
         * @param  string $frameworkType
         * @return string
         */
        protected function getLocationPattern($frameworkType)
        {
        }
        /**
         * Look for installers set to be disabled in composer's extra config and
         * remove them from the list of supported installers.
         *
         * Globals:
         *  - true, "all", and "*" - disable all installers.
         *  - false - enable all installers (useful with
         *     wikimedia/composer-merge-plugin or similar)
         *
         * @return void
         */
        protected function removeDisabledInstallers()
        {
        }
    }
    class BonefishInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'Packages/{$vendor}/{$name}/');
    }
    class SiteDirectInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$vendor}/{$name}/', 'plugin' => 'plugins/{$vendor}/{$name}/');
        public function inflectPackageVars($vars)
        {
        }
        protected function parseVars($vars)
        {
        }
    }
    class AnnotateCmsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'addons/modules/{$name}/', 'component' => 'addons/components/{$name}/', 'service' => 'addons/services/{$name}/');
    }
    class ClanCatsFrameworkInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('ship' => 'CCF/orbit/{$name}/', 'theme' => 'CCF/app/themes/{$name}/');
    }
    class DokuWikiInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'lib/plugins/{$name}/', 'template' => 'lib/tpl/{$name}/');
        /**
         * Format package name.
         *
         * For package type dokuwiki-plugin, cut off a trailing '-plugin', 
         * or leading dokuwiki_ if present.
         * 
         * For package type dokuwiki-template, cut off a trailing '-template' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectTemplateVars($vars)
        {
        }
    }
    class PPIInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    class CakePHPInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'Plugin/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * Change the default plugin location when cakephp >= 3.0
         */
        public function getLocations()
        {
        }
        /**
         * Check if CakePHP version matches against a version
         *
         * @param string $matcher
         * @param string $version
         * @return bool
         * @phpstan-param Constraint::STR_OP_* $matcher
         */
        protected function matchesCakeVersion($matcher, $version)
        {
        }
    }
    class MediaWikiInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('core' => 'core/', 'extension' => 'extensions/{$name}/', 'skin' => 'skins/{$name}/');
        /**
         * Format package name.
         *
         * For package type mediawiki-extension, cut off a trailing '-extension' if present and transform
         * to CamelCase keeping existing uppercase chars.
         *
         * For package type mediawiki-skin, cut off a trailing '-skin' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectExtensionVars($vars)
        {
        }
        protected function inflectSkinVars($vars)
        {
        }
    }
    class DecibelInstaller extends \Composer\Installers\BaseInstaller
    {
        /** @var array */
        protected $locations = array('app' => 'app/{$name}/');
    }
    class KohanaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
    }
    class JoomlaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('component' => 'components/{$name}/', 'module' => 'modules/{$name}/', 'template' => 'templates/{$name}/', 'plugin' => 'plugins/{$name}/', 'library' => 'libraries/{$name}/');
        // TODO: Add inflector for mod_ and com_ names
    }
    class PxcmsInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'app/Modules/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * For package type pxcms-module, cut off a trailing '-plugin' if present.
         *
         * return string
         */
        protected function inflectModuleVars($vars)
        {
        }
        /**
         * For package type pxcms-module, cut off a trailing '-plugin' if present.
         *
         * return string
         */
        protected function inflectThemeVars($vars)
        {
        }
    }
    class OsclassInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'oc-content/plugins/{$name}/', 'theme' => 'oc-content/themes/{$name}/', 'language' => 'oc-content/languages/{$name}/');
    }
    class PortoInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('container' => 'app/Containers/{$name}/');
    }
    class StarbugInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'theme' => 'themes/{$name}/', 'custom-module' => 'app/modules/{$name}/', 'custom-theme' => 'app/themes/{$name}/');
    }
    class AimeosInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'ext/{$name}/');
    }
    class TastyIgniterInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'extensions/{$vendor}/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * Cut off leading 'ti-ext-' or 'ti-theme-' if present.
         * Strip vendor name of characters that is not alphanumeric or an underscore
         *
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PrestashopInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'theme' => 'themes/{$name}/');
    }
    class KirbyInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'site/plugins/{$name}/', 'field' => 'site/fields/{$name}/', 'tag' => 'site/tags/{$name}/');
    }
    class Plugin implements \Composer\Plugin\PluginInterface
    {
        public function activate(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
        public function deactivate(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
        public function uninstall(\Composer\Composer $composer, \Composer\IO\IOInterface $io)
        {
        }
    }
    class CiviCrmInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('ext' => 'ext/{$name}/');
    }
    class DframeInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$vendor}/{$name}/');
    }
    class RoundcubeInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Lowercase name and changes the name to a underscores
         *
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class GravInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'user/plugins/{$name}/', 'theme' => 'user/themes/{$name}/');
        /**
         * Format package name
         *
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class WinterInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/', 'plugin' => 'plugins/{$vendor}/{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Format package name.
         *
         * For package type winter-plugin, cut off a trailing '-plugin' if present.
         *
         * For package type winter-theme, cut off a trailing '-theme' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectModuleVars($vars)
        {
        }
        protected function inflectPluginVars($vars)
        {
        }
        protected function inflectThemeVars($vars)
        {
        }
    }
    class EzPlatformInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('meta-assets' => 'web/assets/ezplatform/', 'assets' => 'web/assets/ezplatform/{$name}/');
    }
    class MantisBTInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    /**
     *
     * Installer for kanboard plugins
     *
     * kanboard.net
     *
     * Class KanboardInstaller
     * @package Composer\Installers
     */
    class KanboardInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/');
    }
    /**
     * Class PiwikInstaller
     *
     * @package Composer\Installers
     */
    class PiwikInstaller extends \Composer\Installers\BaseInstaller
    {
        /**
         * @var array
         */
        protected $locations = array('plugin' => 'plugins/{$name}/');
        /**
         * Format package name to CamelCase
         * @param array $vars
         *
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ZikulaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$vendor}-{$name}/', 'theme' => 'themes/{$vendor}-{$name}/');
    }
    class FuelphpInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('component' => 'components/{$name}/');
    }
    class ChefInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('cookbook' => 'Chef/{$vendor}/{$name}/', 'role' => 'Chef/roles/{$name}/');
    }
    class PantheonInstaller extends \Composer\Installers\BaseInstaller
    {
        /** @var array<string, string> */
        protected $locations = array('script' => 'web/private/scripts/quicksilver/{$name}', 'module' => 'web/private/scripts/quicksilver/{$name}');
    }
    /**
     * Installer for Bitrix Framework. Supported types of extensions:
     * - `bitrix-d7-module` — copy the module to directory `bitrix/modules/<vendor>.<name>`.
     * - `bitrix-d7-component` — copy the component to directory `bitrix/components/<vendor>/<name>`.
     * - `bitrix-d7-template` — copy the template to directory `bitrix/templates/<vendor>_<name>`.
     * 
     * You can set custom path to directory with Bitrix kernel in `composer.json`:
     * 
     * ```json
     * {
     *      "extra": {
     *          "bitrix-dir": "s1/bitrix"
     *      }
     * }
     * ```
     *
     * @author Nik Samokhvalov <nik@samokhvalov.info>
     * @author Denis Kulichkin <onexhovia@gmail.com>
     */
    class BitrixInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array(
            'module' => '{$bitrix_dir}/modules/{$name}/',
            // deprecated, remove on the major release (Backward compatibility will be broken)
            'component' => '{$bitrix_dir}/components/{$name}/',
            // deprecated, remove on the major release (Backward compatibility will be broken)
            'theme' => '{$bitrix_dir}/templates/{$name}/',
            // deprecated, remove on the major release (Backward compatibility will be broken)
            'd7-module' => '{$bitrix_dir}/modules/{$vendor}.{$name}/',
            'd7-component' => '{$bitrix_dir}/components/{$vendor}/{$name}/',
            'd7-template' => '{$bitrix_dir}/templates/{$vendor}_{$name}/',
        );
        /**
         * {@inheritdoc}
         */
        public function inflectPackageVars($vars)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function templatePath($path, array $vars = array())
        {
        }
        /**
         * Duplicates search packages.
         *
         * @param string $path
         * @param array $vars
         */
        protected function checkDuplicates($path, array $vars = array())
        {
        }
    }
    class LavaLiteInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('package' => 'packages/{$vendor}/{$name}/', 'theme' => 'public/themes/{$name}/');
    }
    class Concrete5Installer extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('core' => 'concrete/', 'block' => 'application/blocks/{$name}/', 'package' => 'packages/{$name}/', 'theme' => 'application/themes/{$name}/', 'update' => 'updates/{$name}/');
    }
    class MoodleInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('mod' => 'mod/{$name}/', 'admin_report' => 'admin/report/{$name}/', 'atto' => 'lib/editor/atto/plugins/{$name}/', 'tool' => 'admin/tool/{$name}/', 'assignment' => 'mod/assignment/type/{$name}/', 'assignsubmission' => 'mod/assign/submission/{$name}/', 'assignfeedback' => 'mod/assign/feedback/{$name}/', 'auth' => 'auth/{$name}/', 'availability' => 'availability/condition/{$name}/', 'block' => 'blocks/{$name}/', 'booktool' => 'mod/book/tool/{$name}/', 'cachestore' => 'cache/stores/{$name}/', 'cachelock' => 'cache/locks/{$name}/', 'calendartype' => 'calendar/type/{$name}/', 'fileconverter' => 'files/converter/{$name}/', 'format' => 'course/format/{$name}/', 'coursereport' => 'course/report/{$name}/', 'customcertelement' => 'mod/customcert/element/{$name}/', 'datafield' => 'mod/data/field/{$name}/', 'datapreset' => 'mod/data/preset/{$name}/', 'editor' => 'lib/editor/{$name}/', 'enrol' => 'enrol/{$name}/', 'filter' => 'filter/{$name}/', 'gradeexport' => 'grade/export/{$name}/', 'gradeimport' => 'grade/import/{$name}/', 'gradereport' => 'grade/report/{$name}/', 'gradingform' => 'grade/grading/form/{$name}/', 'local' => 'local/{$name}/', 'logstore' => 'admin/tool/log/store/{$name}/', 'ltisource' => 'mod/lti/source/{$name}/', 'ltiservice' => 'mod/lti/service/{$name}/', 'message' => 'message/output/{$name}/', 'mnetservice' => 'mnet/service/{$name}/', 'plagiarism' => 'plagiarism/{$name}/', 'portfolio' => 'portfolio/{$name}/', 'qbehaviour' => 'question/behaviour/{$name}/', 'qformat' => 'question/format/{$name}/', 'qtype' => 'question/type/{$name}/', 'quizaccess' => 'mod/quiz/accessrule/{$name}/', 'quiz' => 'mod/quiz/report/{$name}/', 'report' => 'report/{$name}/', 'repository' => 'repository/{$name}/', 'scormreport' => 'mod/scorm/report/{$name}/', 'search' => 'search/engine/{$name}/', 'theme' => 'theme/{$name}/', 'tinymce' => 'lib/editor/tinymce/plugins/{$name}/', 'profilefield' => 'user/profile/field/{$name}/', 'webservice' => 'webservice/{$name}/', 'workshopallocation' => 'mod/workshop/allocation/{$name}/', 'workshopeval' => 'mod/workshop/eval/{$name}/', 'workshopform' => 'mod/workshop/form/{$name}/');
    }
    class ImageCMSInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('template' => 'templates/{$name}/', 'module' => 'application/modules/{$name}/', 'library' => 'application/libraries/{$name}/');
    }
    /**
     * An installer to handle MODX specifics when installing packages.
     */
    class ModxInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extra' => 'core/packages/{$name}/');
    }
    class VanillaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'theme' => 'themes/{$name}/');
    }
    class TheliaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'local/modules/{$name}/', 'frontoffice-template' => 'templates/frontOffice/{$name}/', 'backoffice-template' => 'templates/backOffice/{$name}/', 'email-template' => 'templates/email/{$name}/');
    }
    class DrupalInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('core' => 'core/', 'module' => 'modules/{$name}/', 'theme' => 'themes/{$name}/', 'library' => 'libraries/{$name}/', 'profile' => 'profiles/{$name}/', 'database-driver' => 'drivers/lib/Drupal/Driver/Database/{$name}/', 'drush' => 'drush/{$name}/', 'custom-theme' => 'themes/custom/{$name}/', 'custom-module' => 'modules/custom/{$name}/', 'custom-profile' => 'profiles/custom/{$name}/', 'drupal-multisite' => 'sites/{$name}/', 'console' => 'console/{$name}/', 'console-language' => 'console/language/{$name}/', 'config' => 'config/sync/');
    }
    class WordPressInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'wp-content/plugins/{$name}/', 'theme' => 'wp-content/themes/{$name}/', 'muplugin' => 'wp-content/mu-plugins/{$name}/', 'dropin' => 'wp-content/{$name}/');
    }
    class CockpitInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'cockpit/modules/addons/{$name}/');
        /**
         * Format module name.
         *
         * Strip `module-` prefix from package name.
         *
         * {@inheritDoc}
         */
        public function inflectPackageVars($vars)
        {
        }
        public function inflectModuleVars($vars)
        {
        }
    }
    class SilverStripeInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => '{$name}/', 'theme' => 'themes/{$name}/');
        /**
         * Return the install path based on package type.
         *
         * Relies on built-in BaseInstaller behaviour with one exception: silverstripe/framework
         * must be installed to 'sapphire' and not 'framework' if the version is <3.0.0
         *
         * @param  PackageInterface $package
         * @param  string           $frameworkType
         * @return string
         */
        public function getInstallPath(\Composer\Package\PackageInterface $package, $frameworkType = '')
        {
        }
    }
    /**
     * Plugin/theme installer for shopware
     * @author Benjamin Boit
     */
    class ShopwareInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('backend-plugin' => 'engine/Shopware/Plugins/Local/Backend/{$name}/', 'core-plugin' => 'engine/Shopware/Plugins/Local/Core/{$name}/', 'frontend-plugin' => 'engine/Shopware/Plugins/Local/Frontend/{$name}/', 'theme' => 'templates/{$name}/', 'plugin' => 'custom/plugins/{$name}/', 'frontend-theme' => 'themes/Frontend/{$name}/');
        /**
         * Transforms the names
         * @param  array $vars
         * @return array
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class PhpBBInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('extension' => 'ext/{$vendor}/{$name}/', 'language' => 'language/{$name}/', 'style' => 'styles/{$name}/');
    }
    class LanManagementSystemInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'plugins/{$name}/', 'template' => 'templates/{$name}/', 'document-template' => 'documents/templates/{$name}/', 'userpanel-module' => 'userpanel/modules/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class ElggInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('plugin' => 'mod/{$name}/');
    }
    class Redaxo5Installer extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('addon' => 'redaxo/src/addons/{$name}/', 'bestyle-plugin' => 'redaxo/src/addons/be_style/plugins/{$name}/');
    }
    class RadPHPInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('bundle' => 'src/{$name}/');
        /**
         * Format package name to CamelCase
         */
        public function inflectPackageVars($vars)
        {
        }
    }
    class LithiumInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('library' => 'libraries/{$name}/', 'source' => 'libraries/_source/{$name}/');
    }
    class MayaInstaller extends \Composer\Installers\BaseInstaller
    {
        protected $locations = array('module' => 'modules/{$name}/');
        /**
         * Format package name.
         *
         * For package type maya-module, cut off a trailing '-module' if present.
         *
         */
        public function inflectPackageVars($vars)
        {
        }
        protected function inflectModuleVars($vars)
        {
        }
    }
}
namespace {
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInita83bd0043569b733865ec55cbc4a4417
    {
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInita83bd0043569b733865ec55cbc4a4417
    {
        public static $files = array('6124b4c8570aa390c21fafd04a26c69f' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/deep_copy.php', '241d2bc730dc592f76425fee315639b6' => __DIR__ . '/..' . '/globalcitizen/php-iban/oophp-iban.php', 'ac2da84b5f360a33c0c760ac23936bfb' => __DIR__ . '/..' . '/globalcitizen/php-iban/php-iban.php');
        public static $prefixLengthsPsr4 = array('s' => array('setasign\\Fpdi\\' => 14), 'b' => array('baltpeter\\Internetmarke\\' => 24), 'W' => array('WsdlToPhp\\WsSecurity\\' => 21), 'V' => array('Vendidero\\Germanized\\Shipments\\' => 31, 'Vendidero\\Germanized\\DHL\\' => 25, 'Vendidero\\Germanized\\' => 21, 'Vendidero\\EUTaxHelper\\' => 22), 'P' => array('Psr\\Log\\' => 8), 'D' => array('Digitick\\Sepa\\' => 14, 'Defuse\\Crypto\\' => 14, 'DeepCopy\\' => 9, 'DVDoug\\BoxPacker\\Test\\' => 22, 'DVDoug\\BoxPacker\\' => 17), 'C' => array('Composer\\Installers\\' => 20), 'A' => array('Automattic\\Jetpack\\Autoloader\\' => 30));
        public static $prefixDirsPsr4 = array('setasign\\Fpdi\\' => array(0 => __DIR__ . '/..' . '/setasign/fpdi/src'), 'baltpeter\\Internetmarke\\' => array(0 => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke'), 'WsdlToPhp\\WsSecurity\\' => array(0 => __DIR__ . '/..' . '/wsdltophp/wssecurity/src'), 'Vendidero\\Germanized\\Shipments\\' => array(0 => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src'), 'Vendidero\\Germanized\\DHL\\' => array(0 => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src'), 'Vendidero\\Germanized\\' => array(0 => __DIR__ . '/../..' . '/src'), 'Vendidero\\EUTaxHelper\\' => array(0 => __DIR__ . '/../..' . '/packages/woocommerce-eu-tax-helper/src'), 'Psr\\Log\\' => array(0 => __DIR__ . '/..' . '/psr/log/Psr/Log'), 'Digitick\\Sepa\\' => array(0 => __DIR__ . '/..' . '/digitick/sepa-xml/src'), 'Defuse\\Crypto\\' => array(0 => __DIR__ . '/..' . '/defuse/php-encryption/src'), 'DeepCopy\\' => array(0 => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy'), 'DVDoug\\BoxPacker\\Test\\' => array(0 => __DIR__ . '/..' . '/dvdoug/boxpacker/tests/Test'), 'DVDoug\\BoxPacker\\' => array(0 => __DIR__ . '/..' . '/dvdoug/boxpacker/src'), 'Composer\\Installers\\' => array(0 => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers'), 'Automattic\\Jetpack\\Autoloader\\' => array(0 => __DIR__ . '/..' . '/automattic/jetpack-autoloader/src'));
        public static $classMap = array('Automattic\\Jetpack\\Autoloader\\AutoloadFileWriter' => __DIR__ . '/..' . '/automattic/jetpack-autoloader/src/AutoloadFileWriter.php', 'Automattic\\Jetpack\\Autoloader\\AutoloadGenerator' => __DIR__ . '/..' . '/automattic/jetpack-autoloader/src/AutoloadGenerator.php', 'Automattic\\Jetpack\\Autoloader\\AutoloadProcessor' => __DIR__ . '/..' . '/automattic/jetpack-autoloader/src/AutoloadProcessor.php', 'Automattic\\Jetpack\\Autoloader\\CustomAutoloaderPlugin' => __DIR__ . '/..' . '/automattic/jetpack-autoloader/src/CustomAutoloaderPlugin.php', 'Automattic\\Jetpack\\Autoloader\\ManifestGenerator' => __DIR__ . '/..' . '/automattic/jetpack-autoloader/src/ManifestGenerator.php', 'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php', 'Composer\\Installers\\AglInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/AglInstaller.php', 'Composer\\Installers\\AimeosInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/AimeosInstaller.php', 'Composer\\Installers\\AnnotateCmsInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/AnnotateCmsInstaller.php', 'Composer\\Installers\\AsgardInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/AsgardInstaller.php', 'Composer\\Installers\\AttogramInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/AttogramInstaller.php', 'Composer\\Installers\\BaseInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/BaseInstaller.php', 'Composer\\Installers\\BitrixInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/BitrixInstaller.php', 'Composer\\Installers\\BonefishInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/BonefishInstaller.php', 'Composer\\Installers\\CakePHPInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/CakePHPInstaller.php', 'Composer\\Installers\\ChefInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ChefInstaller.php', 'Composer\\Installers\\CiviCrmInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/CiviCrmInstaller.php', 'Composer\\Installers\\ClanCatsFrameworkInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ClanCatsFrameworkInstaller.php', 'Composer\\Installers\\CockpitInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/CockpitInstaller.php', 'Composer\\Installers\\CodeIgniterInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/CodeIgniterInstaller.php', 'Composer\\Installers\\Concrete5Installer' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/Concrete5Installer.php', 'Composer\\Installers\\CraftInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/CraftInstaller.php', 'Composer\\Installers\\CroogoInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/CroogoInstaller.php', 'Composer\\Installers\\DecibelInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/DecibelInstaller.php', 'Composer\\Installers\\DframeInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/DframeInstaller.php', 'Composer\\Installers\\DokuWikiInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/DokuWikiInstaller.php', 'Composer\\Installers\\DolibarrInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/DolibarrInstaller.php', 'Composer\\Installers\\DrupalInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/DrupalInstaller.php', 'Composer\\Installers\\ElggInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ElggInstaller.php', 'Composer\\Installers\\EliasisInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/EliasisInstaller.php', 'Composer\\Installers\\ExpressionEngineInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ExpressionEngineInstaller.php', 'Composer\\Installers\\EzPlatformInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/EzPlatformInstaller.php', 'Composer\\Installers\\FuelInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/FuelInstaller.php', 'Composer\\Installers\\FuelphpInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/FuelphpInstaller.php', 'Composer\\Installers\\GravInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/GravInstaller.php', 'Composer\\Installers\\HuradInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/HuradInstaller.php', 'Composer\\Installers\\ImageCMSInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ImageCMSInstaller.php', 'Composer\\Installers\\Installer' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/Installer.php', 'Composer\\Installers\\ItopInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ItopInstaller.php', 'Composer\\Installers\\JoomlaInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/JoomlaInstaller.php', 'Composer\\Installers\\KanboardInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/KanboardInstaller.php', 'Composer\\Installers\\KirbyInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/KirbyInstaller.php', 'Composer\\Installers\\KnownInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/KnownInstaller.php', 'Composer\\Installers\\KodiCMSInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/KodiCMSInstaller.php', 'Composer\\Installers\\KohanaInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/KohanaInstaller.php', 'Composer\\Installers\\LanManagementSystemInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/LanManagementSystemInstaller.php', 'Composer\\Installers\\LaravelInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/LaravelInstaller.php', 'Composer\\Installers\\LavaLiteInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/LavaLiteInstaller.php', 'Composer\\Installers\\LithiumInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/LithiumInstaller.php', 'Composer\\Installers\\MODULEWorkInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MODULEWorkInstaller.php', 'Composer\\Installers\\MODXEvoInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MODXEvoInstaller.php', 'Composer\\Installers\\MagentoInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MagentoInstaller.php', 'Composer\\Installers\\MajimaInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MajimaInstaller.php', 'Composer\\Installers\\MakoInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MakoInstaller.php', 'Composer\\Installers\\MantisBTInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MantisBTInstaller.php', 'Composer\\Installers\\MauticInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MauticInstaller.php', 'Composer\\Installers\\MayaInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MayaInstaller.php', 'Composer\\Installers\\MediaWikiInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MediaWikiInstaller.php', 'Composer\\Installers\\MiaoxingInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MiaoxingInstaller.php', 'Composer\\Installers\\MicroweberInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MicroweberInstaller.php', 'Composer\\Installers\\ModxInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ModxInstaller.php', 'Composer\\Installers\\MoodleInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/MoodleInstaller.php', 'Composer\\Installers\\OctoberInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/OctoberInstaller.php', 'Composer\\Installers\\OntoWikiInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/OntoWikiInstaller.php', 'Composer\\Installers\\OsclassInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/OsclassInstaller.php', 'Composer\\Installers\\OxidInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/OxidInstaller.php', 'Composer\\Installers\\PPIInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PPIInstaller.php', 'Composer\\Installers\\PantheonInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PantheonInstaller.php', 'Composer\\Installers\\PhiftyInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PhiftyInstaller.php', 'Composer\\Installers\\PhpBBInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PhpBBInstaller.php', 'Composer\\Installers\\PimcoreInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PimcoreInstaller.php', 'Composer\\Installers\\PiwikInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PiwikInstaller.php', 'Composer\\Installers\\PlentymarketsInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PlentymarketsInstaller.php', 'Composer\\Installers\\Plugin' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/Plugin.php', 'Composer\\Installers\\PortoInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PortoInstaller.php', 'Composer\\Installers\\PrestashopInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PrestashopInstaller.php', 'Composer\\Installers\\ProcessWireInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ProcessWireInstaller.php', 'Composer\\Installers\\PuppetInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PuppetInstaller.php', 'Composer\\Installers\\PxcmsInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/PxcmsInstaller.php', 'Composer\\Installers\\RadPHPInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/RadPHPInstaller.php', 'Composer\\Installers\\ReIndexInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ReIndexInstaller.php', 'Composer\\Installers\\Redaxo5Installer' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/Redaxo5Installer.php', 'Composer\\Installers\\RedaxoInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/RedaxoInstaller.php', 'Composer\\Installers\\RoundcubeInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/RoundcubeInstaller.php', 'Composer\\Installers\\SMFInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/SMFInstaller.php', 'Composer\\Installers\\ShopwareInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ShopwareInstaller.php', 'Composer\\Installers\\SilverStripeInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/SilverStripeInstaller.php', 'Composer\\Installers\\SiteDirectInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/SiteDirectInstaller.php', 'Composer\\Installers\\StarbugInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/StarbugInstaller.php', 'Composer\\Installers\\SyDESInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/SyDESInstaller.php', 'Composer\\Installers\\SyliusInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/SyliusInstaller.php', 'Composer\\Installers\\Symfony1Installer' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/Symfony1Installer.php', 'Composer\\Installers\\TYPO3CmsInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/TYPO3CmsInstaller.php', 'Composer\\Installers\\TYPO3FlowInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/TYPO3FlowInstaller.php', 'Composer\\Installers\\TaoInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/TaoInstaller.php', 'Composer\\Installers\\TastyIgniterInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/TastyIgniterInstaller.php', 'Composer\\Installers\\TheliaInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/TheliaInstaller.php', 'Composer\\Installers\\TuskInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/TuskInstaller.php', 'Composer\\Installers\\UserFrostingInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/UserFrostingInstaller.php', 'Composer\\Installers\\VanillaInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/VanillaInstaller.php', 'Composer\\Installers\\VgmcpInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/VgmcpInstaller.php', 'Composer\\Installers\\WHMCSInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/WHMCSInstaller.php', 'Composer\\Installers\\WinterInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/WinterInstaller.php', 'Composer\\Installers\\WolfCMSInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/WolfCMSInstaller.php', 'Composer\\Installers\\WordPressInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/WordPressInstaller.php', 'Composer\\Installers\\YawikInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/YawikInstaller.php', 'Composer\\Installers\\ZendInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ZendInstaller.php', 'Composer\\Installers\\ZikulaInstaller' => __DIR__ . '/..' . '/composer/installers/src/Composer/Installers/ZikulaInstaller.php', 'DVDoug\\BoxPacker\\Box' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/Box.php', 'DVDoug\\BoxPacker\\BoxList' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/BoxList.php', 'DVDoug\\BoxPacker\\BoxSorter' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/BoxSorter.php', 'DVDoug\\BoxPacker\\ConstrainedItem' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/ConstrainedItem.php', 'DVDoug\\BoxPacker\\ConstrainedPlacementItem' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/ConstrainedPlacementItem.php', 'DVDoug\\BoxPacker\\DefaultBoxSorter' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/DefaultBoxSorter.php', 'DVDoug\\BoxPacker\\DefaultItemSorter' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/DefaultItemSorter.php', 'DVDoug\\BoxPacker\\DefaultPackedBoxSorter' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/DefaultPackedBoxSorter.php', 'DVDoug\\BoxPacker\\InfalliblePacker' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/InfalliblePacker.php', 'DVDoug\\BoxPacker\\Item' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/Item.php', 'DVDoug\\BoxPacker\\ItemList' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/ItemList.php', 'DVDoug\\BoxPacker\\ItemSorter' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/ItemSorter.php', 'DVDoug\\BoxPacker\\ItemTooLargeException' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/ItemTooLargeException.php', 'DVDoug\\BoxPacker\\LayerPacker' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/LayerPacker.php', 'DVDoug\\BoxPacker\\LayerStabiliser' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/LayerStabiliser.php', 'DVDoug\\BoxPacker\\LimitedSupplyBox' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/LimitedSupplyBox.php', 'DVDoug\\BoxPacker\\NoBoxesAvailableException' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/NoBoxesAvailableException.php', 'DVDoug\\BoxPacker\\OrientatedItem' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/OrientatedItem.php', 'DVDoug\\BoxPacker\\OrientatedItemFactory' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/OrientatedItemFactory.php', 'DVDoug\\BoxPacker\\OrientatedItemSorter' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/OrientatedItemSorter.php', 'DVDoug\\BoxPacker\\PackedBox' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/PackedBox.php', 'DVDoug\\BoxPacker\\PackedBoxList' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/PackedBoxList.php', 'DVDoug\\BoxPacker\\PackedBoxSorter' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/PackedBoxSorter.php', 'DVDoug\\BoxPacker\\PackedItem' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/PackedItem.php', 'DVDoug\\BoxPacker\\PackedItemList' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/PackedItemList.php', 'DVDoug\\BoxPacker\\PackedLayer' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/PackedLayer.php', 'DVDoug\\BoxPacker\\Packer' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/Packer.php', 'DVDoug\\BoxPacker\\Test\\ConstrainedPlacementByCountTestItem' => __DIR__ . '/..' . '/dvdoug/boxpacker/tests/Test/ConstrainedPlacementByCountTestItem.php', 'DVDoug\\BoxPacker\\Test\\ConstrainedPlacementNoStackingTestItem' => __DIR__ . '/..' . '/dvdoug/boxpacker/tests/Test/ConstrainedPlacementNoStackingTestItem.php', 'DVDoug\\BoxPacker\\Test\\ConstrainedTestItem' => __DIR__ . '/..' . '/dvdoug/boxpacker/tests/Test/ConstrainedTestItem.php', 'DVDoug\\BoxPacker\\Test\\LimitedSupplyTestBox' => __DIR__ . '/..' . '/dvdoug/boxpacker/tests/Test/LimitedSupplyTestBox.php', 'DVDoug\\BoxPacker\\Test\\PackedBoxByReferenceSorter' => __DIR__ . '/..' . '/dvdoug/boxpacker/tests/Test/PackedBoxByReferenceSorter.php', 'DVDoug\\BoxPacker\\Test\\THPackTestItem' => __DIR__ . '/..' . '/dvdoug/boxpacker/tests/Test/THPackTestItem.php', 'DVDoug\\BoxPacker\\Test\\TestBox' => __DIR__ . '/..' . '/dvdoug/boxpacker/tests/Test/TestBox.php', 'DVDoug\\BoxPacker\\Test\\TestItem' => __DIR__ . '/..' . '/dvdoug/boxpacker/tests/Test/TestItem.php', 'DVDoug\\BoxPacker\\VolumePacker' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/VolumePacker.php', 'DVDoug\\BoxPacker\\WeightRedistributor' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/WeightRedistributor.php', 'DVDoug\\BoxPacker\\WorkingVolume' => __DIR__ . '/..' . '/dvdoug/boxpacker/src/WorkingVolume.php', 'DeepCopy\\DeepCopy' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/DeepCopy.php', 'DeepCopy\\Exception\\CloneException' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Exception/CloneException.php', 'DeepCopy\\Exception\\PropertyException' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Exception/PropertyException.php', 'DeepCopy\\Filter\\ChainableFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Filter/ChainableFilter.php', 'DeepCopy\\Filter\\Doctrine\\DoctrineCollectionFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Filter/Doctrine/DoctrineCollectionFilter.php', 'DeepCopy\\Filter\\Doctrine\\DoctrineEmptyCollectionFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Filter/Doctrine/DoctrineEmptyCollectionFilter.php', 'DeepCopy\\Filter\\Doctrine\\DoctrineProxyFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Filter/Doctrine/DoctrineProxyFilter.php', 'DeepCopy\\Filter\\Filter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Filter/Filter.php', 'DeepCopy\\Filter\\KeepFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Filter/KeepFilter.php', 'DeepCopy\\Filter\\ReplaceFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Filter/ReplaceFilter.php', 'DeepCopy\\Filter\\SetNullFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Filter/SetNullFilter.php', 'DeepCopy\\Matcher\\Doctrine\\DoctrineProxyMatcher' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Matcher/Doctrine/DoctrineProxyMatcher.php', 'DeepCopy\\Matcher\\Matcher' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Matcher/Matcher.php', 'DeepCopy\\Matcher\\PropertyMatcher' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Matcher/PropertyMatcher.php', 'DeepCopy\\Matcher\\PropertyNameMatcher' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Matcher/PropertyNameMatcher.php', 'DeepCopy\\Matcher\\PropertyTypeMatcher' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Matcher/PropertyTypeMatcher.php', 'DeepCopy\\Reflection\\ReflectionHelper' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/Reflection/ReflectionHelper.php', 'DeepCopy\\TypeFilter\\Date\\DateIntervalFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/TypeFilter/Date/DateIntervalFilter.php', 'DeepCopy\\TypeFilter\\ReplaceFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/TypeFilter/ReplaceFilter.php', 'DeepCopy\\TypeFilter\\ShallowCopyFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/TypeFilter/ShallowCopyFilter.php', 'DeepCopy\\TypeFilter\\Spl\\ArrayObjectFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/TypeFilter/Spl/ArrayObjectFilter.php', 'DeepCopy\\TypeFilter\\Spl\\SplDoublyLinkedList' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/TypeFilter/Spl/SplDoublyLinkedList.php', 'DeepCopy\\TypeFilter\\Spl\\SplDoublyLinkedListFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/TypeFilter/Spl/SplDoublyLinkedListFilter.php', 'DeepCopy\\TypeFilter\\TypeFilter' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/TypeFilter/TypeFilter.php', 'DeepCopy\\TypeMatcher\\TypeMatcher' => __DIR__ . '/..' . '/myclabs/deep-copy/src/DeepCopy/TypeMatcher/TypeMatcher.php', 'Defuse\\Crypto\\Core' => __DIR__ . '/..' . '/defuse/php-encryption/src/Core.php', 'Defuse\\Crypto\\Crypto' => __DIR__ . '/..' . '/defuse/php-encryption/src/Crypto.php', 'Defuse\\Crypto\\DerivedKeys' => __DIR__ . '/..' . '/defuse/php-encryption/src/DerivedKeys.php', 'Defuse\\Crypto\\Encoding' => __DIR__ . '/..' . '/defuse/php-encryption/src/Encoding.php', 'Defuse\\Crypto\\Exception\\BadFormatException' => __DIR__ . '/..' . '/defuse/php-encryption/src/Exception/BadFormatException.php', 'Defuse\\Crypto\\Exception\\CryptoException' => __DIR__ . '/..' . '/defuse/php-encryption/src/Exception/CryptoException.php', 'Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException' => __DIR__ . '/..' . '/defuse/php-encryption/src/Exception/EnvironmentIsBrokenException.php', 'Defuse\\Crypto\\Exception\\IOException' => __DIR__ . '/..' . '/defuse/php-encryption/src/Exception/IOException.php', 'Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException' => __DIR__ . '/..' . '/defuse/php-encryption/src/Exception/WrongKeyOrModifiedCiphertextException.php', 'Defuse\\Crypto\\File' => __DIR__ . '/..' . '/defuse/php-encryption/src/File.php', 'Defuse\\Crypto\\Key' => __DIR__ . '/..' . '/defuse/php-encryption/src/Key.php', 'Defuse\\Crypto\\KeyOrPassword' => __DIR__ . '/..' . '/defuse/php-encryption/src/KeyOrPassword.php', 'Defuse\\Crypto\\KeyProtectedByPassword' => __DIR__ . '/..' . '/defuse/php-encryption/src/KeyProtectedByPassword.php', 'Defuse\\Crypto\\RuntimeTests' => __DIR__ . '/..' . '/defuse/php-encryption/src/RuntimeTests.php', 'Digitick\\Sepa\\DomBuilder\\BaseDomBuilder' => __DIR__ . '/..' . '/digitick/sepa-xml/src/DomBuilder/BaseDomBuilder.php', 'Digitick\\Sepa\\DomBuilder\\CustomerCreditTransferDomBuilder' => __DIR__ . '/..' . '/digitick/sepa-xml/src/DomBuilder/CustomerCreditTransferDomBuilder.php', 'Digitick\\Sepa\\DomBuilder\\CustomerDirectDebitTransferDomBuilder' => __DIR__ . '/..' . '/digitick/sepa-xml/src/DomBuilder/CustomerDirectDebitTransferDomBuilder.php', 'Digitick\\Sepa\\DomBuilder\\DomBuilderFactory' => __DIR__ . '/..' . '/digitick/sepa-xml/src/DomBuilder/DomBuilderFactory.php', 'Digitick\\Sepa\\DomBuilder\\DomBuilderInterface' => __DIR__ . '/..' . '/digitick/sepa-xml/src/DomBuilder/DomBuilderInterface.php', 'Digitick\\Sepa\\Exception\\Exception' => __DIR__ . '/..' . '/digitick/sepa-xml/src/Exception/Exception.php', 'Digitick\\Sepa\\Exception\\InvalidArgumentException' => __DIR__ . '/..' . '/digitick/sepa-xml/src/Exception/InvalidArgumentException.php', 'Digitick\\Sepa\\Exception\\InvalidPaymentMethodException' => __DIR__ . '/..' . '/digitick/sepa-xml/src/Exception/InvalidPaymentMethodException.php', 'Digitick\\Sepa\\Exception\\InvalidTransferFileConfiguration' => __DIR__ . '/..' . '/digitick/sepa-xml/src/Exception/InvalidTransferFileConfiguration.php', 'Digitick\\Sepa\\Exception\\InvalidTransferTypeException' => __DIR__ . '/..' . '/digitick/sepa-xml/src/Exception/InvalidTransferTypeException.php', 'Digitick\\Sepa\\GroupHeader' => __DIR__ . '/..' . '/digitick/sepa-xml/src/GroupHeader.php', 'Digitick\\Sepa\\PaymentInformation' => __DIR__ . '/..' . '/digitick/sepa-xml/src/PaymentInformation.php', 'Digitick\\Sepa\\TransferFile\\BaseTransferFile' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferFile/BaseTransferFile.php', 'Digitick\\Sepa\\TransferFile\\CustomerCreditTransferFile' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferFile/CustomerCreditTransferFile.php', 'Digitick\\Sepa\\TransferFile\\CustomerDirectDebitTransferFile' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferFile/CustomerDirectDebitTransferFile.php', 'Digitick\\Sepa\\TransferFile\\Facade\\BaseCustomerTransferFileFacade' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferFile/Facade/BaseCustomerTransferFileFacade.php', 'Digitick\\Sepa\\TransferFile\\Facade\\CustomerCreditFacade' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferFile/Facade/CustomerCreditFacade.php', 'Digitick\\Sepa\\TransferFile\\Facade\\CustomerDirectDebitFacade' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferFile/Facade/CustomerDirectDebitFacade.php', 'Digitick\\Sepa\\TransferFile\\Facade\\CustomerTransferFileFacadeInterface' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferFile/Facade/CustomerTransferFileFacadeInterface.php', 'Digitick\\Sepa\\TransferFile\\Factory\\TransferFileFacadeFactory' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferFile/Factory/TransferFileFacadeFactory.php', 'Digitick\\Sepa\\TransferFile\\TransferFileInterface' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferFile/TransferFileInterface.php', 'Digitick\\Sepa\\TransferInformation\\BaseTransferInformation' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferInformation/BaseTransferInformation.php', 'Digitick\\Sepa\\TransferInformation\\CustomerCreditTransferInformation' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferInformation/CustomerCreditTransferInformation.php', 'Digitick\\Sepa\\TransferInformation\\CustomerDirectDebitTransferInformation' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferInformation/CustomerDirectDebitTransferInformation.php', 'Digitick\\Sepa\\TransferInformation\\TransferInformationInterface' => __DIR__ . '/..' . '/digitick/sepa-xml/src/TransferInformation/TransferInformationInterface.php', 'Digitick\\Sepa\\Util\\StringHelper' => __DIR__ . '/..' . '/digitick/sepa-xml/src/Util/StringHelper.php', 'FPDF' => __DIR__ . '/..' . '/setasign/fpdf/fpdf.php', 'Psr\\Log\\AbstractLogger' => __DIR__ . '/..' . '/psr/log/Psr/Log/AbstractLogger.php', 'Psr\\Log\\InvalidArgumentException' => __DIR__ . '/..' . '/psr/log/Psr/Log/InvalidArgumentException.php', 'Psr\\Log\\LogLevel' => __DIR__ . '/..' . '/psr/log/Psr/Log/LogLevel.php', 'Psr\\Log\\LoggerAwareInterface' => __DIR__ . '/..' . '/psr/log/Psr/Log/LoggerAwareInterface.php', 'Psr\\Log\\LoggerAwareTrait' => __DIR__ . '/..' . '/psr/log/Psr/Log/LoggerAwareTrait.php', 'Psr\\Log\\LoggerInterface' => __DIR__ . '/..' . '/psr/log/Psr/Log/LoggerInterface.php', 'Psr\\Log\\LoggerTrait' => __DIR__ . '/..' . '/psr/log/Psr/Log/LoggerTrait.php', 'Psr\\Log\\NullLogger' => __DIR__ . '/..' . '/psr/log/Psr/Log/NullLogger.php', 'Psr\\Log\\Test\\DummyTest' => __DIR__ . '/..' . '/psr/log/Psr/Log/Test/DummyTest.php', 'Psr\\Log\\Test\\LoggerInterfaceTest' => __DIR__ . '/..' . '/psr/log/Psr/Log/Test/LoggerInterfaceTest.php', 'Psr\\Log\\Test\\TestLogger' => __DIR__ . '/..' . '/psr/log/Psr/Log/Test/TestLogger.php', 'Vendidero\\EUTaxHelper\\Helper' => __DIR__ . '/../..' . '/packages/woocommerce-eu-tax-helper/src/Helper.php', 'Vendidero\\Germanized\\Autoloader' => __DIR__ . '/../..' . '/src/Autoloader.php', 'Vendidero\\Germanized\\DHL\\Admin\\Admin' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Admin/Admin.php', 'Vendidero\\Germanized\\DHL\\Admin\\Importer\\DHL' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Admin/Importer/DHL.php', 'Vendidero\\Germanized\\DHL\\Admin\\Importer\\Internetmarke' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Admin/Importer/Internetmarke.php', 'Vendidero\\Germanized\\DHL\\Admin\\Status' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Admin/Status.php', 'Vendidero\\Germanized\\DHL\\Ajax' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Ajax.php', 'Vendidero\\Germanized\\DHL\\Api\\AuthSoap' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/AuthSoap.php', 'Vendidero\\Germanized\\DHL\\Api\\ImPartnerInformation' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/ImPartnerInformation.php', 'Vendidero\\Germanized\\DHL\\Api\\ImProductList' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/ImProductList.php', 'Vendidero\\Germanized\\DHL\\Api\\ImProductsSoap' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/ImProductsSoap.php', 'Vendidero\\Germanized\\DHL\\Api\\ImRefundSoap' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/ImRefundSoap.php', 'Vendidero\\Germanized\\DHL\\Api\\ImWarenpostIntRest' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/ImWarenpostIntRest.php', 'Vendidero\\Germanized\\DHL\\Api\\Internetmarke' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/Internetmarke.php', 'Vendidero\\Germanized\\DHL\\Api\\LabelRest' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/LabelRest.php', 'Vendidero\\Germanized\\DHL\\Api\\LabelSoap' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/LabelSoap.php', 'Vendidero\\Germanized\\DHL\\Api\\LocationFinder' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/LocationFinder.php', 'Vendidero\\Germanized\\DHL\\Api\\Paket' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/Paket.php', 'Vendidero\\Germanized\\DHL\\Api\\ParcelRest' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/ParcelRest.php', 'Vendidero\\Germanized\\DHL\\Api\\Rest' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/Rest.php', 'Vendidero\\Germanized\\DHL\\Api\\ReturnRest' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/ReturnRest.php', 'Vendidero\\Germanized\\DHL\\Api\\Soap' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Api/Soap.php', 'Vendidero\\Germanized\\DHL\\Install' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Install.php', 'Vendidero\\Germanized\\DHL\\Label\\DHL' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Label/DHL.php', 'Vendidero\\Germanized\\DHL\\Label\\DHLInlayReturn' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Label/DHLInlayReturn.php', 'Vendidero\\Germanized\\DHL\\Label\\DHLReturn' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Label/DHLReturn.php', 'Vendidero\\Germanized\\DHL\\Label\\DeutschePost' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Label/DeutschePost.php', 'Vendidero\\Germanized\\DHL\\Label\\DeutschePostReturn' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Label/DeutschePostReturn.php', 'Vendidero\\Germanized\\DHL\\Label\\Label' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Label/Label.php', 'Vendidero\\Germanized\\DHL\\Label\\ReturnLabel' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Label/ReturnLabel.php', 'Vendidero\\Germanized\\DHL\\Legacy\\DataStores\\Label' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Legacy/DataStores/Label.php', 'Vendidero\\Germanized\\DHL\\Legacy\\DownloadHandler' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Legacy/DownloadHandler.php', 'Vendidero\\Germanized\\DHL\\Legacy\\Helper' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Legacy/Helper.php', 'Vendidero\\Germanized\\DHL\\Legacy\\LabelFactory' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Legacy/LabelFactory.php', 'Vendidero\\Germanized\\DHL\\Legacy\\LabelQuery' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Legacy/LabelQuery.php', 'Vendidero\\Germanized\\DHL\\Order' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Order.php', 'Vendidero\\Germanized\\DHL\\Package' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Package.php', 'Vendidero\\Germanized\\DHL\\ParcelLocator' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/ParcelLocator.php', 'Vendidero\\Germanized\\DHL\\ParcelServices' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/ParcelServices.php', 'Vendidero\\Germanized\\DHL\\Product' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/Product.php', 'Vendidero\\Germanized\\DHL\\ShippingProvider\\DHL' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/ShippingProvider/DHL.php', 'Vendidero\\Germanized\\DHL\\ShippingProvider\\DeutschePost' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/ShippingProvider/DeutschePost.php', 'Vendidero\\Germanized\\DHL\\ShippingProvider\\ShippingMethod' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-dhl/src/ShippingProvider/ShippingMethod.php', 'Vendidero\\Germanized\\Packages' => __DIR__ . '/../..' . '/src/Packages.php', 'Vendidero\\Germanized\\PluginsHelper' => __DIR__ . '/../..' . '/src/PluginsHelper.php', 'Vendidero\\Germanized\\Shipments\\AddressSplitter' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/AddressSplitter.php', 'Vendidero\\Germanized\\Shipments\\Admin\\Admin' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Admin/Admin.php', 'Vendidero\\Germanized\\Shipments\\Admin\\BulkActionHandler' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Admin/BulkActionHandler.php', 'Vendidero\\Germanized\\Shipments\\Admin\\BulkLabel' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Admin/BulkLabel.php', 'Vendidero\\Germanized\\Shipments\\Admin\\MetaBox' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Admin/MetaBox.php', 'Vendidero\\Germanized\\Shipments\\Admin\\ProviderSettings' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Admin/ProviderSettings.php', 'Vendidero\\Germanized\\Shipments\\Admin\\ReturnTable' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Admin/ReturnTable.php', 'Vendidero\\Germanized\\Shipments\\Admin\\Settings' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Admin/Settings.php', 'Vendidero\\Germanized\\Shipments\\Admin\\Table' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Admin/Table.php', 'Vendidero\\Germanized\\Shipments\\Ajax' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Ajax.php', 'Vendidero\\Germanized\\Shipments\\Api' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Api.php', 'Vendidero\\Germanized\\Shipments\\Automation' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Automation.php', 'Vendidero\\Germanized\\Shipments\\DataStores\\Label' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/DataStores/Label.php', 'Vendidero\\Germanized\\Shipments\\DataStores\\Packaging' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/DataStores/Packaging.php', 'Vendidero\\Germanized\\Shipments\\DataStores\\Shipment' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/DataStores/Shipment.php', 'Vendidero\\Germanized\\Shipments\\DataStores\\ShipmentItem' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/DataStores/ShipmentItem.php', 'Vendidero\\Germanized\\Shipments\\DataStores\\ShippingProvider' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/DataStores/ShippingProvider.php', 'Vendidero\\Germanized\\Shipments\\Emails' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Emails.php', 'Vendidero\\Germanized\\Shipments\\FormHandler' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/FormHandler.php', 'Vendidero\\Germanized\\Shipments\\Install' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Install.php', 'Vendidero\\Germanized\\Shipments\\Interfaces\\ShipmentLabel' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Interfaces/ShipmentLabel.php', 'Vendidero\\Germanized\\Shipments\\Interfaces\\ShipmentReturnLabel' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Interfaces/ShipmentReturnLabel.php', 'Vendidero\\Germanized\\Shipments\\Interfaces\\ShippingProvider' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Interfaces/ShippingProvider.php', 'Vendidero\\Germanized\\Shipments\\Interfaces\\ShippingProviderAuto' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Interfaces/ShippingProviderAuto.php', 'Vendidero\\Germanized\\Shipments\\Labels\\Automation' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Labels/Automation.php', 'Vendidero\\Germanized\\Shipments\\Labels\\DownloadHandler' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Labels/DownloadHandler.php', 'Vendidero\\Germanized\\Shipments\\Labels\\Factory' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Labels/Factory.php', 'Vendidero\\Germanized\\Shipments\\Labels\\Label' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Labels/Label.php', 'Vendidero\\Germanized\\Shipments\\Labels\\Query' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Labels/Query.php', 'Vendidero\\Germanized\\Shipments\\Labels\\ReturnLabel' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Labels/ReturnLabel.php', 'Vendidero\\Germanized\\Shipments\\Order' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Order.php', 'Vendidero\\Germanized\\Shipments\\PDFMerger' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/PDFMerger.php', 'Vendidero\\Germanized\\Shipments\\PDFSplitter' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/PDFSplitter.php', 'Vendidero\\Germanized\\Shipments\\Package' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Package.php', 'Vendidero\\Germanized\\Shipments\\Packaging' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Packaging.php', 'Vendidero\\Germanized\\Shipments\\PackagingFactory' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/PackagingFactory.php', 'Vendidero\\Germanized\\Shipments\\Packaging\\AsyncReportGenerator' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Packaging/AsyncReportGenerator.php', 'Vendidero\\Germanized\\Shipments\\Packaging\\Report' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Packaging/Report.php', 'Vendidero\\Germanized\\Shipments\\Packaging\\ReportHelper' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Packaging/ReportHelper.php', 'Vendidero\\Germanized\\Shipments\\Packaging\\ReportQueue' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Packaging/ReportQueue.php', 'Vendidero\\Germanized\\Shipments\\Packing\\Helper' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Packing/Helper.php', 'Vendidero\\Germanized\\Shipments\\Packing\\OrderItem' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Packing/OrderItem.php', 'Vendidero\\Germanized\\Shipments\\Packing\\PackagingBox' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Packing/PackagingBox.php', 'Vendidero\\Germanized\\Shipments\\Packing\\ShipmentItem' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Packing/ShipmentItem.php', 'Vendidero\\Germanized\\Shipments\\Product' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Product.php', 'Vendidero\\Germanized\\Shipments\\Rest\\ShipmentsController' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Rest/ShipmentsController.php', 'Vendidero\\Germanized\\Shipments\\ReturnReason' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ReturnReason.php', 'Vendidero\\Germanized\\Shipments\\ReturnShipment' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ReturnShipment.php', 'Vendidero\\Germanized\\Shipments\\Shipment' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Shipment.php', 'Vendidero\\Germanized\\Shipments\\ShipmentError' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ShipmentError.php', 'Vendidero\\Germanized\\Shipments\\ShipmentFactory' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ShipmentFactory.php', 'Vendidero\\Germanized\\Shipments\\ShipmentItem' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ShipmentItem.php', 'Vendidero\\Germanized\\Shipments\\ShipmentQuery' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ShipmentQuery.php', 'Vendidero\\Germanized\\Shipments\\ShipmentReturnItem' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ShipmentReturnItem.php', 'Vendidero\\Germanized\\Shipments\\ShippingProvider\\Auto' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ShippingProvider/Auto.php', 'Vendidero\\Germanized\\Shipments\\ShippingProvider\\Helper' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ShippingProvider/Helper.php', 'Vendidero\\Germanized\\Shipments\\ShippingProvider\\Method' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ShippingProvider/Method.php', 'Vendidero\\Germanized\\Shipments\\ShippingProvider\\MethodPlaceholder' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ShippingProvider/MethodPlaceholder.php', 'Vendidero\\Germanized\\Shipments\\ShippingProvider\\Simple' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/ShippingProvider/Simple.php', 'Vendidero\\Germanized\\Shipments\\SimpleShipment' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/SimpleShipment.php', 'Vendidero\\Germanized\\Shipments\\Validation' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/Validation.php', 'Vendidero\\Germanized\\Shipments\\WPMLHelper' => __DIR__ . '/../..' . '/packages/woocommerce-germanized-shipments/src/WPMLHelper.php', 'Vendidero\\Germanized\\Shopmark' => __DIR__ . '/../..' . '/src/Shopmark.php', 'Vendidero\\Germanized\\Shopmarks' => __DIR__ . '/../..' . '/src/Shopmarks.php', 'Vendidero\\Germanized\\Utilities\\NumberUtil' => __DIR__ . '/../..' . '/src/Utilities/NumberUtil.php', 'WsdlToPhp\\WsSecurity\\Created' => __DIR__ . '/..' . '/wsdltophp/wssecurity/src/Created.php', 'WsdlToPhp\\WsSecurity\\Element' => __DIR__ . '/..' . '/wsdltophp/wssecurity/src/Element.php', 'WsdlToPhp\\WsSecurity\\Expires' => __DIR__ . '/..' . '/wsdltophp/wssecurity/src/Expires.php', 'WsdlToPhp\\WsSecurity\\Nonce' => __DIR__ . '/..' . '/wsdltophp/wssecurity/src/Nonce.php', 'WsdlToPhp\\WsSecurity\\Password' => __DIR__ . '/..' . '/wsdltophp/wssecurity/src/Password.php', 'WsdlToPhp\\WsSecurity\\Security' => __DIR__ . '/..' . '/wsdltophp/wssecurity/src/Security.php', 'WsdlToPhp\\WsSecurity\\Timestamp' => __DIR__ . '/..' . '/wsdltophp/wssecurity/src/Timestamp.php', 'WsdlToPhp\\WsSecurity\\Username' => __DIR__ . '/..' . '/wsdltophp/wssecurity/src/Username.php', 'WsdlToPhp\\WsSecurity\\UsernameToken' => __DIR__ . '/..' . '/wsdltophp/wssecurity/src/UsernameToken.php', 'WsdlToPhp\\WsSecurity\\WsSecurity' => __DIR__ . '/..' . '/wsdltophp/wssecurity/src/WsSecurity.php', 'baltpeter\\Internetmarke\\Address' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/Address.php', 'baltpeter\\Internetmarke\\AddressBinding' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/AddressBinding.php', 'baltpeter\\Internetmarke\\ApiResult' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/ApiResult.php', 'baltpeter\\Internetmarke\\CompanyName' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/CompanyName.php', 'baltpeter\\Internetmarke\\LabelCount' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/LabelCount.php', 'baltpeter\\Internetmarke\\LabelSpacing' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/LabelSpacing.php', 'baltpeter\\Internetmarke\\Margin' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/Margin.php', 'baltpeter\\Internetmarke\\Name' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/Name.php', 'baltpeter\\Internetmarke\\NamedAddress' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/NamedAddress.php', 'baltpeter\\Internetmarke\\OrderItem' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/OrderItem.php', 'baltpeter\\Internetmarke\\PageFormat' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/PageFormat.php', 'baltpeter\\Internetmarke\\PageLayout' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/PageLayout.php', 'baltpeter\\Internetmarke\\PartnerInformation' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/PartnerInformation.php', 'baltpeter\\Internetmarke\\PersonName' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/PersonName.php', 'baltpeter\\Internetmarke\\PortokasseCharge' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/PortokasseCharge.php', 'baltpeter\\Internetmarke\\Position' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/Position.php', 'baltpeter\\Internetmarke\\PublicGalleryItem' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/PublicGalleryItem.php', 'baltpeter\\Internetmarke\\Service' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/Service.php', 'baltpeter\\Internetmarke\\Size' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/Size.php', 'baltpeter\\Internetmarke\\StampPngResult' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/StampPngResult.php', 'baltpeter\\Internetmarke\\User' => __DIR__ . '/..' . '/baltpeter/internetmarke-php/src/baltpeter/Internetmarke/User.php', 'setasign\\Fpdi\\FpdfTpl' => __DIR__ . '/..' . '/setasign/fpdi/src/FpdfTpl.php', 'setasign\\Fpdi\\FpdfTplTrait' => __DIR__ . '/..' . '/setasign/fpdi/src/FpdfTplTrait.php', 'setasign\\Fpdi\\FpdfTrait' => __DIR__ . '/..' . '/setasign/fpdi/src/FpdfTrait.php', 'setasign\\Fpdi\\Fpdi' => __DIR__ . '/..' . '/setasign/fpdi/src/Fpdi.php', 'setasign\\Fpdi\\FpdiException' => __DIR__ . '/..' . '/setasign/fpdi/src/FpdiException.php', 'setasign\\Fpdi\\FpdiTrait' => __DIR__ . '/..' . '/setasign/fpdi/src/FpdiTrait.php', 'setasign\\Fpdi\\GraphicsState' => __DIR__ . '/..' . '/setasign/fpdi/src/GraphicsState.php', 'setasign\\Fpdi\\Math\\Matrix' => __DIR__ . '/..' . '/setasign/fpdi/src/Math/Matrix.php', 'setasign\\Fpdi\\Math\\Vector' => __DIR__ . '/..' . '/setasign/fpdi/src/Math/Vector.php', 'setasign\\Fpdi\\PdfParser\\CrossReference\\AbstractReader' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/CrossReference/AbstractReader.php', 'setasign\\Fpdi\\PdfParser\\CrossReference\\CrossReference' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/CrossReference/CrossReference.php', 'setasign\\Fpdi\\PdfParser\\CrossReference\\CrossReferenceException' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/CrossReference/CrossReferenceException.php', 'setasign\\Fpdi\\PdfParser\\CrossReference\\FixedReader' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/CrossReference/FixedReader.php', 'setasign\\Fpdi\\PdfParser\\CrossReference\\LineReader' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/CrossReference/LineReader.php', 'setasign\\Fpdi\\PdfParser\\CrossReference\\ReaderInterface' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/CrossReference/ReaderInterface.php', 'setasign\\Fpdi\\PdfParser\\Filter\\Ascii85' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Filter/Ascii85.php', 'setasign\\Fpdi\\PdfParser\\Filter\\Ascii85Exception' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Filter/Ascii85Exception.php', 'setasign\\Fpdi\\PdfParser\\Filter\\AsciiHex' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Filter/AsciiHex.php', 'setasign\\Fpdi\\PdfParser\\Filter\\FilterException' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Filter/FilterException.php', 'setasign\\Fpdi\\PdfParser\\Filter\\FilterInterface' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Filter/FilterInterface.php', 'setasign\\Fpdi\\PdfParser\\Filter\\Flate' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Filter/Flate.php', 'setasign\\Fpdi\\PdfParser\\Filter\\FlateException' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Filter/FlateException.php', 'setasign\\Fpdi\\PdfParser\\Filter\\Lzw' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Filter/Lzw.php', 'setasign\\Fpdi\\PdfParser\\Filter\\LzwException' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Filter/LzwException.php', 'setasign\\Fpdi\\PdfParser\\PdfParser' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/PdfParser.php', 'setasign\\Fpdi\\PdfParser\\PdfParserException' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/PdfParserException.php', 'setasign\\Fpdi\\PdfParser\\StreamReader' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/StreamReader.php', 'setasign\\Fpdi\\PdfParser\\Tokenizer' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Tokenizer.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfArray' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfArray.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfBoolean' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfBoolean.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfDictionary' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfDictionary.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfHexString' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfHexString.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfIndirectObject' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfIndirectObject.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfIndirectObjectReference' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfIndirectObjectReference.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfName' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfName.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfNull' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfNull.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfNumeric' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfNumeric.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfStream' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfStream.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfString' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfString.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfToken' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfToken.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfType' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfType.php', 'setasign\\Fpdi\\PdfParser\\Type\\PdfTypeException' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfParser/Type/PdfTypeException.php', 'setasign\\Fpdi\\PdfReader\\DataStructure\\Rectangle' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfReader/DataStructure/Rectangle.php', 'setasign\\Fpdi\\PdfReader\\Page' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfReader/Page.php', 'setasign\\Fpdi\\PdfReader\\PageBoundaries' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfReader/PageBoundaries.php', 'setasign\\Fpdi\\PdfReader\\PdfReader' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfReader/PdfReader.php', 'setasign\\Fpdi\\PdfReader\\PdfReaderException' => __DIR__ . '/..' . '/setasign/fpdi/src/PdfReader/PdfReaderException.php', 'setasign\\Fpdi\\TcpdfFpdi' => __DIR__ . '/..' . '/setasign/fpdi/src/TcpdfFpdi.php', 'setasign\\Fpdi\\Tcpdf\\Fpdi' => __DIR__ . '/..' . '/setasign/fpdi/src/Tcpdf/Fpdi.php', 'setasign\\Fpdi\\Tfpdf\\FpdfTpl' => __DIR__ . '/..' . '/setasign/fpdi/src/Tfpdf/FpdfTpl.php', 'setasign\\Fpdi\\Tfpdf\\Fpdi' => __DIR__ . '/..' . '/setasign/fpdi/src/Tfpdf/Fpdi.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace {
    /*******************************************************************************
    * FPDF                                                                         *
    *                                                                              *
    * Version: 1.86                                                                *
    * Date:    2023-06-25                                                          *
    * Author:  Olivier PLATHEY                                                     *
    *******************************************************************************/
    class FPDF
    {
        const VERSION = '1.86';
        protected $page;
        // current page number
        protected $n;
        // current object number
        protected $offsets;
        // array of object offsets
        protected $buffer;
        // buffer holding in-memory PDF
        protected $pages;
        // array containing pages
        protected $state;
        // current document state
        protected $compress;
        // compression flag
        protected $iconv;
        // whether iconv is available
        protected $k;
        // scale factor (number of points in user unit)
        protected $DefOrientation;
        // default orientation
        protected $CurOrientation;
        // current orientation
        protected $StdPageSizes;
        // standard page sizes
        protected $DefPageSize;
        // default page size
        protected $CurPageSize;
        // current page size
        protected $CurRotation;
        // current page rotation
        protected $PageInfo;
        // page-related data
        protected $wPt, $hPt;
        // dimensions of current page in points
        protected $w, $h;
        // dimensions of current page in user unit
        protected $lMargin;
        // left margin
        protected $tMargin;
        // top margin
        protected $rMargin;
        // right margin
        protected $bMargin;
        // page break margin
        protected $cMargin;
        // cell margin
        protected $x, $y;
        // current position in user unit
        protected $lasth;
        // height of last printed cell
        protected $LineWidth;
        // line width in user unit
        protected $fontpath;
        // directory containing fonts
        protected $CoreFonts;
        // array of core font names
        protected $fonts;
        // array of used fonts
        protected $FontFiles;
        // array of font files
        protected $encodings;
        // array of encodings
        protected $cmaps;
        // array of ToUnicode CMaps
        protected $FontFamily;
        // current font family
        protected $FontStyle;
        // current font style
        protected $underline;
        // underlining flag
        protected $CurrentFont;
        // current font info
        protected $FontSizePt;
        // current font size in points
        protected $FontSize;
        // current font size in user unit
        protected $DrawColor;
        // commands for drawing color
        protected $FillColor;
        // commands for filling color
        protected $TextColor;
        // commands for text color
        protected $ColorFlag;
        // indicates whether fill and text colors are different
        protected $WithAlpha;
        // indicates whether alpha channel is used
        protected $ws;
        // word spacing
        protected $images;
        // array of used images
        protected $PageLinks;
        // array of links in pages
        protected $links;
        // array of internal links
        protected $AutoPageBreak;
        // automatic page breaking
        protected $PageBreakTrigger;
        // threshold used to trigger page breaks
        protected $InHeader;
        // flag set when processing header
        protected $InFooter;
        // flag set when processing footer
        protected $AliasNbPages;
        // alias for total number of pages
        protected $ZoomMode;
        // zoom display mode
        protected $LayoutMode;
        // layout display mode
        protected $metadata;
        // document properties
        protected $CreationDate;
        // document creation date
        protected $PDFVersion;
        // PDF version number
        /*******************************************************************************
        *                               Public methods                                 *
        *******************************************************************************/
        function __construct($orientation = 'P', $unit = 'mm', $size = 'A4')
        {
        }
        function SetMargins($left, $top, $right = \null)
        {
        }
        function SetLeftMargin($margin)
        {
        }
        function SetTopMargin($margin)
        {
        }
        function SetRightMargin($margin)
        {
        }
        function SetAutoPageBreak($auto, $margin = 0)
        {
        }
        function SetDisplayMode($zoom, $layout = 'default')
        {
        }
        function SetCompression($compress)
        {
        }
        function SetTitle($title, $isUTF8 = \false)
        {
        }
        function SetAuthor($author, $isUTF8 = \false)
        {
        }
        function SetSubject($subject, $isUTF8 = \false)
        {
        }
        function SetKeywords($keywords, $isUTF8 = \false)
        {
        }
        function SetCreator($creator, $isUTF8 = \false)
        {
        }
        function AliasNbPages($alias = '{nb}')
        {
        }
        function Error($msg)
        {
        }
        function Close()
        {
        }
        function AddPage($orientation = '', $size = '', $rotation = 0)
        {
        }
        function Header()
        {
        }
        function Footer()
        {
        }
        function PageNo()
        {
        }
        function SetDrawColor($r, $g = \null, $b = \null)
        {
        }
        function SetFillColor($r, $g = \null, $b = \null)
        {
        }
        function SetTextColor($r, $g = \null, $b = \null)
        {
        }
        function GetStringWidth($s)
        {
        }
        function SetLineWidth($width)
        {
        }
        function Line($x1, $y1, $x2, $y2)
        {
        }
        function Rect($x, $y, $w, $h, $style = '')
        {
        }
        function AddFont($family, $style = '', $file = '', $dir = '')
        {
        }
        function SetFont($family, $style = '', $size = 0)
        {
        }
        function SetFontSize($size)
        {
        }
        function AddLink()
        {
        }
        function SetLink($link, $y = 0, $page = -1)
        {
        }
        function Link($x, $y, $w, $h, $link)
        {
        }
        function Text($x, $y, $txt)
        {
        }
        function AcceptPageBreak()
        {
        }
        function Cell($w, $h = 0, $txt = '', $border = 0, $ln = 0, $align = '', $fill = \false, $link = '')
        {
        }
        function MultiCell($w, $h, $txt, $border = 0, $align = 'J', $fill = \false)
        {
        }
        function Write($h, $txt, $link = '')
        {
        }
        function Ln($h = \null)
        {
        }
        function Image($file, $x = \null, $y = \null, $w = 0, $h = 0, $type = '', $link = '')
        {
        }
        function GetPageWidth()
        {
        }
        function GetPageHeight()
        {
        }
        function GetX()
        {
        }
        function SetX($x)
        {
        }
        function GetY()
        {
        }
        function SetY($y, $resetX = \true)
        {
        }
        function SetXY($x, $y)
        {
        }
        function Output($dest = '', $name = '', $isUTF8 = \false)
        {
        }
        /*******************************************************************************
        *                              Protected methods                               *
        *******************************************************************************/
        protected function _checkoutput()
        {
        }
        protected function _getpagesize($size)
        {
        }
        protected function _beginpage($orientation, $size, $rotation)
        {
        }
        protected function _endpage()
        {
        }
        protected function _loadfont($path)
        {
        }
        protected function _isascii($s)
        {
        }
        protected function _httpencode($param, $value, $isUTF8)
        {
        }
        protected function _UTF8encode($s)
        {
        }
        protected function _UTF8toUTF16($s)
        {
        }
        protected function _escape($s)
        {
        }
        protected function _textstring($s)
        {
        }
        protected function _dounderline($x, $y, $txt)
        {
        }
        protected function _parsejpg($file)
        {
        }
        protected function _parsepng($file)
        {
        }
        protected function _parsepngstream($f, $file)
        {
        }
        protected function _readstream($f, $n)
        {
        }
        protected function _readint($f)
        {
        }
        protected function _parsegif($file)
        {
        }
        protected function _out($s)
        {
        }
        protected function _put($s)
        {
        }
        protected function _getoffset()
        {
        }
        protected function _newobj($n = \null)
        {
        }
        protected function _putstream($data)
        {
        }
        protected function _putstreamobject($data)
        {
        }
        protected function _putlinks($n)
        {
        }
        protected function _putpage($n)
        {
        }
        protected function _putpages()
        {
        }
        protected function _putfonts()
        {
        }
        protected function _tounicodecmap($uv)
        {
        }
        protected function _putimages()
        {
        }
        protected function _putimage(&$info)
        {
        }
        protected function _putxobjectdict()
        {
        }
        protected function _putresourcedict()
        {
        }
        protected function _putresources()
        {
        }
        protected function _putinfo()
        {
        }
        protected function _putcatalog()
        {
        }
        protected function _putheader()
        {
        }
        protected function _puttrailer()
        {
        }
        protected function _enddoc()
        {
        }
    }
}
namespace setasign\Fpdi {
    /**
     * Trait FpdfTplTrait
     *
     * This trait adds a templating feature to FPDF and tFPDF.
     */
    trait FpdfTplTrait
    {
        /**
         * Data of all created templates.
         *
         * @var array
         */
        protected $templates = [];
        /**
         * The template id for the currently created template.
         *
         * @var null|int
         */
        protected $currentTemplateId;
        /**
         * A counter for template ids.
         *
         * @var int
         */
        protected $templateId = 0;
        /**
         * Set the page format of the current page.
         *
         * @param array $size An array with two values defining the size.
         * @param string $orientation "L" for landscape, "P" for portrait.
         * @throws \BadMethodCallException
         */
        public function setPageFormat($size, $orientation)
        {
        }
        /**
         * Draws a template onto the page or another template.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param array|float|int $x The abscissa of upper-left corner. Alternatively you could use an assoc array
         *                           with the keys "x", "y", "width", "height", "adjustPageSize".
         * @param float|int $y The ordinate of upper-left corner.
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @param bool $adjustPageSize
         * @return array The size
         * @see FpdfTplTrait::getTemplateSize()
         */
        public function useTemplate($tpl, $x = 0, $y = 0, $width = null, $height = null, $adjustPageSize = false)
        {
        }
        /**
         * Get the size of a template.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @return array|bool An array with following keys: width, height, 0 (=width), 1 (=height), orientation (L or P)
         */
        public function getTemplateSize($tpl, $width = null, $height = null)
        {
        }
        /**
         * Begins a new template.
         *
         * @param float|int|null $width The width of the template. If null, the current page width is used.
         * @param float|int|null $height The height of the template. If null, the current page height is used.
         * @param bool $groupXObject Define the form XObject as a group XObject to support transparency (if used).
         * @return int A template identifier.
         */
        public function beginTemplate($width = null, $height = null, $groupXObject = false)
        {
        }
        /**
         * Ends a template.
         *
         * @return bool|int|null A template identifier.
         */
        public function endTemplate()
        {
        }
        /**
         * Get the next template id.
         *
         * @return int
         */
        protected function getNextTemplateId()
        {
        }
        /* overwritten FPDF methods: */
        /**
         * @inheritdoc
         */
        public function AddPage($orientation = '', $size = '', $rotation = 0)
        {
        }
        /**
         * @inheritdoc
         */
        public function Link($x, $y, $w, $h, $link)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetLink($link, $y = 0, $page = -1)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetDrawColor($r, $g = null, $b = null)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetFillColor($r, $g = null, $b = null)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetLineWidth($width)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetFont($family, $style = '', $size = 0)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetFontSize($size)
        {
        }
        protected function _putimages()
        {
        }
        /**
         * @inheritdoc
         */
        protected function _putxobjectdict()
        {
        }
        /**
         * @inheritdoc
         */
        public function _out($s)
        {
        }
    }
    /**
     * Class FpdfTpl
     *
     * This class adds a templating feature to FPDF.
     */
    class FpdfTpl extends \FPDF
    {
        use \setasign\Fpdi\FpdfTplTrait;
    }
}
namespace setasign\Fpdi\Tfpdf {
    /**
     * Class FpdfTpl
     *
     * We need to change some access levels and implement the setPageFormat() method to bring back compatibility to tFPDF.
     */
    class FpdfTpl extends \tFPDF
    {
        use \setasign\Fpdi\FpdfTplTrait;
    }
}
namespace setasign\Fpdi {
    /**
     * The FpdiTrait
     *
     * This trait offers the core functionalities of FPDI. By passing them to a trait we can reuse it with e.g. TCPDF in a
     * very easy way.
     */
    trait FpdiTrait
    {
        /**
         * The pdf reader instances.
         *
         * @var PdfReader[]
         */
        protected $readers = [];
        /**
         * Instances created internally.
         *
         * @var array
         */
        protected $createdReaders = [];
        /**
         * The current reader id.
         *
         * @var string|null
         */
        protected $currentReaderId;
        /**
         * Data of all imported pages.
         *
         * @var array
         */
        protected $importedPages = [];
        /**
         * A map from object numbers of imported objects to new assigned object numbers by FPDF.
         *
         * @var array
         */
        protected $objectMap = [];
        /**
         * An array with information about objects, which needs to be copied to the resulting document.
         *
         * @var array
         */
        protected $objectsToCopy = [];
        /**
         * Release resources and file handles.
         *
         * This method is called internally when the document is created successfully. By default it only cleans up
         * stream reader instances which were created internally.
         *
         * @param bool $allReaders
         */
        public function cleanUp($allReaders = false)
        {
        }
        /**
         * Set the minimal PDF version.
         *
         * @param string $pdfVersion
         */
        protected function setMinPdfVersion($pdfVersion)
        {
        }
        /** @noinspection PhpUndefinedClassInspection */
        /**
         * Get a new pdf parser instance.
         *
         * @param StreamReader $streamReader
         * @param array $parserParams Individual parameters passed to the parser instance.
         * @return PdfParser|FpdiPdfParser
         */
        protected function getPdfParserInstance(\setasign\Fpdi\PdfParser\StreamReader $streamReader, array $parserParams = [])
        {
        }
        /**
         * Get an unique reader id by the $file parameter.
         *
         * @param string|resource|PdfReader|StreamReader $file An open file descriptor, a path to a file, a PdfReader
         *                                                     instance or a StreamReader instance.
         * @param array $parserParams Individual parameters passed to the parser instance.
         * @return string
         */
        protected function getPdfReaderId($file, array $parserParams = [])
        {
        }
        /**
         * Get a pdf reader instance by its id.
         *
         * @param string $id
         * @return PdfReader
         */
        protected function getPdfReader($id)
        {
        }
        /**
         * Set the source PDF file.
         *
         * @param string|resource|StreamReader $file Path to the file or a stream resource or a StreamReader instance.
         * @return int The page count of the PDF document.
         * @throws PdfParserException
         */
        public function setSourceFile($file)
        {
        }
        /**
         * Set the source PDF file with parameters which are passed to the parser instance.
         *
         * This method allows us to pass e.g. authentication information to the parser instance.
         *
         * @param string|resource|StreamReader $file Path to the file or a stream resource or a StreamReader instance.
         * @param array $parserParams Individual parameters passed to the parser instance.
         * @return int The page count of the PDF document.
         * @throws CrossReferenceException
         * @throws PdfParserException
         * @throws PdfTypeException
         */
        public function setSourceFileWithParserParams($file, array $parserParams = [])
        {
        }
        /**
         * Imports a page.
         *
         * @param int $pageNumber The page number.
         * @param string $box The page boundary to import. Default set to PageBoundaries::CROP_BOX.
         * @param bool $groupXObject Define the form XObject as a group XObject to support transparency (if used).
         * @param bool $importExternalLinks Define whether external links are imported or not.
         * @return string A unique string identifying the imported page.
         * @throws CrossReferenceException
         * @throws FilterException
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws PdfReaderException
         * @see PageBoundaries
         */
        public function importPage($pageNumber, $box = \setasign\Fpdi\PdfReader\PageBoundaries::CROP_BOX, $groupXObject = true, $importExternalLinks = false)
        {
        }
        /**
         * Draws an imported page onto the page.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $pageId The page id
         * @param float|int|array $x The abscissa of upper-left corner. Alternatively you could use an assoc array
         *                           with the keys "x", "y", "width", "height", "adjustPageSize".
         * @param float|int $y The ordinate of upper-left corner.
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @param bool $adjustPageSize
         * @return array The size.
         * @see Fpdi::getTemplateSize()
         */
        public function useImportedPage($pageId, $x = 0, $y = 0, $width = null, $height = null, $adjustPageSize = false)
        {
        }
        /**
         * This method will add additional data to the last created link/annotation.
         *
         * It is separated because TCPDF uses its own logic to handle link annotations.
         * This method is overwritten in the TCPDF implementation.
         *
         * @param array $externalLink
         * @param float|int $xPt
         * @param float|int $scaleX
         * @param float|int $yPt
         * @param float|int $newHeightPt
         * @param float|int $scaleY
         * @param array $importedPage
         * @return void
         */
        protected function adjustLastLink($externalLink, $xPt, $scaleX, $yPt, $newHeightPt, $scaleY, $importedPage)
        {
        }
        /**
         * Get the size of an imported page.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @return array|bool An array with following keys: width, height, 0 (=width), 1 (=height), orientation (L or P)
         */
        public function getImportedPageSize($tpl, $width = null, $height = null)
        {
        }
        /**
         * Writes a PdfType object to the resulting buffer.
         *
         * @param PdfType $value
         * @throws PdfTypeException
         */
        protected function writePdfType(\setasign\Fpdi\PdfParser\Type\PdfType $value)
        {
        }
    }
    /**
     * This trait is used for the implementation of FPDI in FPDF and tFPDF.
     */
    trait FpdfTrait
    {
        protected function _enddoc()
        {
        }
        /**
         * Draws an imported page or a template onto the page or another template.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param float|int|array $x The abscissa of upper-left corner. Alternatively you could use an assoc array
         *                           with the keys "x", "y", "width", "height", "adjustPageSize".
         * @param float|int $y The ordinate of upper-left corner.
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @param bool $adjustPageSize
         * @return array The size
         * @see Fpdi::getTemplateSize()
         */
        public function useTemplate($tpl, $x = 0, $y = 0, $width = null, $height = null, $adjustPageSize = false)
        {
        }
        /**
         * Get the size of an imported page or template.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @return array|bool An array with following keys: width, height, 0 (=width), 1 (=height), orientation (L or P)
         */
        public function getTemplateSize($tpl, $width = null, $height = null)
        {
        }
        /**
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        protected function _putimages()
        {
        }
        /**
         * @inheritdoc
         */
        protected function _putxobjectdict()
        {
        }
        /**
         * @param int $n
         * @return void
         * @throws PdfParser\Type\PdfTypeException
         */
        protected function _putlinks($n)
        {
        }
        protected function _put($s, $newLine = true)
        {
        }
    }
}
namespace setasign\Fpdi\Tfpdf {
    /**
     * Class Fpdi
     *
     * This class let you import pages of existing PDF documents into a reusable structure for tFPDF.
     */
    class Fpdi extends \setasign\Fpdi\Tfpdf\FpdfTpl
    {
        use \setasign\Fpdi\FpdiTrait;
        use \setasign\Fpdi\FpdfTrait;
        /**
         * FPDI version
         *
         * @string
         */
        const VERSION = '2.4.1';
    }
}
namespace setasign\Fpdi\PdfReader {
    /**
     * An abstract class for page boundary constants and some helper methods
     */
    abstract class PageBoundaries
    {
        /**
         * MediaBox
         *
         * The media box defines the boundaries of the physical medium on which the page is to be printed.
         *
         * @see PDF 32000-1:2008 - 14.11.2 Page Boundaries
         * @var string
         */
        const MEDIA_BOX = 'MediaBox';
        /**
         * CropBox
         *
         * The crop box defines the region to which the contents of the page shall be clipped (cropped) when displayed or
         * printed.
         *
         * @see PDF 32000-1:2008 - 14.11.2 Page Boundaries
         * @var string
         */
        const CROP_BOX = 'CropBox';
        /**
         * BleedBox
         *
         * The bleed box defines the region to which the contents of the page shall be clipped when output in a
         * production environment.
         *
         * @see PDF 32000-1:2008 - 14.11.2 Page Boundaries
         * @var string
         */
        const BLEED_BOX = 'BleedBox';
        /**
         * TrimBox
         *
         * The trim box defines the intended dimensions of the finished page after trimming.
         *
         * @see PDF 32000-1:2008 - 14.11.2 Page Boundaries
         * @var string
         */
        const TRIM_BOX = 'TrimBox';
        /**
         * ArtBox
         *
         * The art box defines the extent of the page’s meaningful content (including potential white space) as intended
         * by the page’s creator.
         *
         * @see PDF 32000-1:2008 - 14.11.2 Page Boundaries
         * @var string
         */
        const ART_BOX = 'ArtBox';
        /**
         * All page boundaries
         *
         * @var array
         */
        public static $all = array(self::MEDIA_BOX, self::CROP_BOX, self::BLEED_BOX, self::TRIM_BOX, self::ART_BOX);
        /**
         * Checks if a name is a valid page boundary name.
         *
         * @param string $name The boundary name
         * @return boolean A boolean value whether the name is valid or not.
         */
        public static function isValidName($name)
        {
        }
    }
}
namespace setasign\Fpdi {
    /**
     * Base exception class for the FPDI package.
     */
    class FpdiException extends \Exception
    {
    }
}
namespace setasign\Fpdi\PdfReader {
    /**
     * Exception for the pdf reader class
     */
    class PdfReaderException extends \setasign\Fpdi\FpdiException
    {
        /**
         * @var int
         */
        const KIDS_EMPTY = 0x101;
        /**
         * @var int
         */
        const UNEXPECTED_DATA_TYPE = 0x102;
        /**
         * @var int
         */
        const MISSING_DATA = 0x103;
    }
}
namespace setasign\Fpdi\PdfReader\DataStructure {
    /**
     * Class representing a rectangle
     */
    class Rectangle
    {
        /**
         * @var int|float
         */
        protected $llx;
        /**
         * @var int|float
         */
        protected $lly;
        /**
         * @var int|float
         */
        protected $urx;
        /**
         * @var int|float
         */
        protected $ury;
        /**
         * Create a rectangle instance by a PdfArray.
         *
         * @param PdfArray|mixed $array
         * @param PdfParser $parser
         * @return Rectangle
         * @throws PdfTypeException
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public static function byPdfArray($array, \setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        public static function byVectors(\setasign\Fpdi\Math\Vector $ll, \setasign\Fpdi\Math\Vector $ur)
        {
        }
        /**
         * Rectangle constructor.
         *
         * @param float|int $ax
         * @param float|int $ay
         * @param float|int $bx
         * @param float|int $by
         */
        public function __construct($ax, $ay, $bx, $by)
        {
        }
        /**
         * Get the width of the rectangle.
         *
         * @return float|int
         */
        public function getWidth()
        {
        }
        /**
         * Get the height of the rectangle.
         *
         * @return float|int
         */
        public function getHeight()
        {
        }
        /**
         * Get the lower left abscissa.
         *
         * @return float|int
         */
        public function getLlx()
        {
        }
        /**
         * Get the lower left ordinate.
         *
         * @return float|int
         */
        public function getLly()
        {
        }
        /**
         * Get the upper right abscissa.
         *
         * @return float|int
         */
        public function getUrx()
        {
        }
        /**
         * Get the upper right ordinate.
         *
         * @return float|int
         */
        public function getUry()
        {
        }
        /**
         * Get the rectangle as an array.
         *
         * @return array
         */
        public function toArray()
        {
        }
        /**
         * Get the rectangle as a PdfArray.
         *
         * @return PdfArray
         */
        public function toPdfArray()
        {
        }
    }
}
namespace setasign\Fpdi\PdfReader {
    /**
     * A PDF reader class
     */
    class PdfReader
    {
        /**
         * @var PdfParser
         */
        protected $parser;
        /**
         * @var int
         */
        protected $pageCount;
        /**
         * Indirect objects of resolved pages.
         *
         * @var PdfIndirectObjectReference[]|PdfIndirectObject[]
         */
        protected $pages = [];
        /**
         * PdfReader constructor.
         *
         * @param PdfParser $parser
         */
        public function __construct(\setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * PdfReader destructor.
         */
        public function __destruct()
        {
        }
        /**
         * Get the pdf parser instance.
         *
         * @return PdfParser
         */
        public function getParser()
        {
        }
        /**
         * Get the PDF version.
         *
         * @return string
         * @throws PdfParserException
         */
        public function getPdfVersion()
        {
        }
        /**
         * Get the page count.
         *
         * @return int
         * @throws PdfTypeException
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public function getPageCount()
        {
        }
        /**
         * Get a page instance.
         *
         * @param int $pageNumber
         * @return Page
         * @throws PdfTypeException
         * @throws CrossReferenceException
         * @throws PdfParserException
         * @throws \InvalidArgumentException
         */
        public function getPage($pageNumber)
        {
        }
        /**
         * Walk the page tree and resolve all indirect objects of all pages.
         *
         * @param bool $readAll
         * @throws CrossReferenceException
         * @throws PdfParserException
         * @throws PdfTypeException
         */
        protected function readPages($readAll = false)
        {
        }
    }
    /**
     * Class representing a page of a PDF document
     */
    class Page
    {
        /**
         * @var PdfIndirectObject
         */
        protected $pageObject;
        /**
         * @var PdfDictionary
         */
        protected $pageDictionary;
        /**
         * @var PdfParser
         */
        protected $parser;
        /**
         * Inherited attributes
         *
         * @var null|array
         */
        protected $inheritedAttributes;
        /**
         * Page constructor.
         *
         * @param PdfIndirectObject $page
         * @param PdfParser $parser
         */
        public function __construct(\setasign\Fpdi\PdfParser\Type\PdfIndirectObject $page, \setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Get the indirect object of this page.
         *
         * @return PdfIndirectObject
         */
        public function getPageObject()
        {
        }
        /**
         * Get the dictionary of this page.
         *
         * @return PdfDictionary
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws CrossReferenceException
         */
        public function getPageDictionary()
        {
        }
        /**
         * Get a page attribute.
         *
         * @param string $name
         * @param bool $inherited
         * @return PdfType|null
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws CrossReferenceException
         */
        public function getAttribute($name, $inherited = true)
        {
        }
        /**
         * Get the rotation value.
         *
         * @return int
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws CrossReferenceException
         */
        public function getRotation()
        {
        }
        /**
         * Get a boundary of this page.
         *
         * @param string $box
         * @param bool $fallback
         * @return bool|Rectangle
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws CrossReferenceException
         * @see PageBoundaries
         */
        public function getBoundary($box = \setasign\Fpdi\PdfReader\PageBoundaries::CROP_BOX, $fallback = true)
        {
        }
        /**
         * Get the width and height of this page.
         *
         * @param string $box
         * @param bool $fallback
         * @return array|bool
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws CrossReferenceException
         */
        public function getWidthAndHeight($box = \setasign\Fpdi\PdfReader\PageBoundaries::CROP_BOX, $fallback = true)
        {
        }
        /**
         * Get the raw content stream.
         *
         * @return string
         * @throws PdfReaderException
         * @throws PdfTypeException
         * @throws FilterException
         * @throws PdfParserException
         */
        public function getContentStream()
        {
        }
        /**
         * Get information of all external links on this page.
         *
         * All coordinates are normalized in view to rotation and translation of the boundary-box, so that their
         * origin is lower-left.
         *
         * @return array
         * @throws CrossReferenceException
         * @throws PdfParserException
         * @throws PdfTypeException
         */
        public function getExternalLinks($box = \setasign\Fpdi\PdfReader\PageBoundaries::CROP_BOX)
        {
        }
    }
}
namespace setasign\Fpdi\Math {
    /**
     * A simple 2D-Vector class
     */
    class Vector
    {
        /**
         * @var float
         */
        protected $x;
        /**
         * @var float
         */
        protected $y;
        /**
         * @param int|float $x
         * @param int|float $y
         */
        public function __construct($x = 0.0, $y = 0.0)
        {
        }
        /**
         * @return float
         */
        public function getX()
        {
        }
        /**
         * @return float
         */
        public function getY()
        {
        }
        /**
         * @param Matrix $matrix
         * @return Vector
         */
        public function multiplyWithMatrix(\setasign\Fpdi\Math\Matrix $matrix)
        {
        }
    }
    /**
     * A simple 2D-Matrix class
     */
    class Matrix
    {
        /**
         * @var float
         */
        protected $a;
        /**
         * @var float
         */
        protected $b;
        /**
         * @var float
         */
        protected $c;
        /**
         * @var float
         */
        protected $d;
        /**
         * @var float
         */
        protected $e;
        /**
         * @var float
         */
        protected $f;
        /**
         * @param int|float $a
         * @param int|float $b
         * @param int|float $c
         * @param int|float $d
         * @param int|float $e
         * @param int|float $f
         */
        public function __construct($a = 1, $b = 0, $c = 0, $d = 1, $e = 0, $f = 0)
        {
        }
        /**
         * @return float[]
         */
        public function getValues()
        {
        }
        /**
         * @param Matrix $by
         * @return Matrix
         */
        public function multiply(self $by)
        {
        }
    }
}
namespace setasign\Fpdi\Tcpdf {
    /**
     * Class Fpdi
     *
     * This class let you import pages of existing PDF documents into a reusable structure for TCPDF.
     *
     * @method _encrypt_data(int $n, string $s) string
     */
    class Fpdi extends \TCPDF
    {
        use \setasign\Fpdi\FpdiTrait {
            writePdfType as fpdiWritePdfType;
            useImportedPage as fpdiUseImportedPage;
        }
        /**
         * FPDI version
         *
         * @string
         */
        const VERSION = '2.4.1';
        /**
         * A counter for template ids.
         *
         * @var int
         */
        protected $templateId = 0;
        /**
         * The currently used object number.
         *
         * @var int|null
         */
        protected $currentObjectNumber;
        protected function _enddoc()
        {
        }
        /**
         * Get the next template id.
         *
         * @return int
         */
        protected function getNextTemplateId()
        {
        }
        /**
         * Draws an imported page onto the page or another template.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param float|int|array $x The abscissa of upper-left corner. Alternatively you could use an assoc array
         *                           with the keys "x", "y", "width", "height", "adjustPageSize".
         * @param float|int $y The ordinate of upper-left corner.
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @param bool $adjustPageSize
         * @return array The size
         * @see FpdiTrait::getTemplateSize()
         */
        public function useTemplate($tpl, $x = 0, $y = 0, $width = null, $height = null, $adjustPageSize = false)
        {
        }
        /**
         * Draws an imported page onto the page.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $pageId The page id
         * @param float|int|array $x The abscissa of upper-left corner. Alternatively you could use an assoc array
         *                           with the keys "x", "y", "width", "height", "adjustPageSize".
         * @param float|int $y The ordinate of upper-left corner.
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @param bool $adjustPageSize
         * @return array The size.
         * @see Fpdi::getTemplateSize()
         */
        public function useImportedPage($pageId, $x = 0, $y = 0, $width = null, $height = null, $adjustPageSize = false)
        {
        }
        /**
         * Get the size of an imported page.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @return array|bool An array with following keys: width, height, 0 (=width), 1 (=height), orientation (L or P)
         */
        public function getTemplateSize($tpl, $width = null, $height = null)
        {
        }
        /**
         * @inheritdoc
         * @return string
         */
        protected function _getxobjectdict()
        {
        }
        /**
         * @inheritdoc
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        protected function _putxobjects()
        {
        }
        /**
         * Append content to the buffer of TCPDF.
         *
         * @param string $s
         * @param bool $newLine
         */
        protected function _put($s, $newLine = true)
        {
        }
        /**
         * Begin a new object and return the object number.
         *
         * @param int|string $objid Object ID (leave empty to get a new ID).
         * @return int object number
         */
        protected function _newobj($objid = '')
        {
        }
        /**
         * Writes a PdfType object to the resulting buffer.
         *
         * @param PdfType $value
         * @throws PdfTypeException
         */
        protected function writePdfType(\setasign\Fpdi\PdfParser\Type\PdfType $value)
        {
        }
        /**
         * This method will add additional data to the last created link/annotation.
         *
         * It will copy styling properties (supported by TCPDF) of the imported link.
         *
         * @param array $externalLink
         * @param float|int $xPt
         * @param float|int $scaleX
         * @param float|int $yPt
         * @param float|int $newHeightPt
         * @param float|int $scaleY
         * @param array $importedPage
         * @return void
         */
        protected function adjustLastLink($externalLink, $xPt, $scaleX, $yPt, $newHeightPt, $scaleY, $importedPage)
        {
        }
    }
}
namespace setasign\Fpdi {
    /**
     * Class TcpdfFpdi
     *
     * This class let you import pages of existing PDF documents into a reusable structure for TCPDF.
     *
     * @deprecated Class was moved to \setasign\Fpdi\Tcpdf\Fpdi
     */
    class TcpdfFpdi extends \setasign\Fpdi\Tcpdf\Fpdi
    {
        // this class is moved to \setasign\Fpdi\Tcpdf\Fpdi
    }
    /**
     * A simple graphic state class which holds the current transformation matrix.
     */
    class GraphicsState
    {
        /**
         * @var Matrix
         */
        protected $ctm;
        /**
         * @param Matrix|null $ctm
         */
        public function __construct(\setasign\Fpdi\Math\Matrix $ctm = null)
        {
        }
        /**
         * @param Matrix $matrix
         * @return $this
         */
        public function add(\setasign\Fpdi\Math\Matrix $matrix)
        {
        }
        /**
         * @param int|float $x
         * @param int|float $y
         * @param int|float $angle
         * @return $this
         */
        public function rotate($x, $y, $angle)
        {
        }
        /**
         * @param int|float $shiftX
         * @param int|float $shiftY
         * @return $this
         */
        public function translate($shiftX, $shiftY)
        {
        }
        /**
         * @param int|float $scaleX
         * @param int|float $scaleY
         * @return $this
         */
        public function scale($scaleX, $scaleY)
        {
        }
        /**
         * @param Vector $vector
         * @return Vector
         */
        public function toUserSpace(\setasign\Fpdi\Math\Vector $vector)
        {
        }
    }
}
namespace setasign\Fpdi\PdfParser {
    /**
     * A stream reader class
     */
    class StreamReader
    {
        /**
         * Creates a stream reader instance by a string value.
         *
         * @param string $content
         * @param int $maxMemory
         * @return StreamReader
         */
        public static function createByString($content, $maxMemory = 2097152)
        {
        }
        /**
         * Creates a stream reader instance by a filename.
         *
         * @param string $filename
         * @return StreamReader
         */
        public static function createByFile($filename)
        {
        }
        /**
         * Defines whether the stream should be closed when the stream reader instance is deconstructed or not.
         *
         * @var bool
         */
        protected $closeStream;
        /**
         * The stream resource.
         *
         * @var resource
         */
        protected $stream;
        /**
         * The byte-offset position in the stream.
         *
         * @var int
         */
        protected $position;
        /**
         * The byte-offset position in the buffer.
         *
         * @var int
         */
        protected $offset;
        /**
         * The buffer length.
         *
         * @var int
         */
        protected $bufferLength;
        /**
         * The total length of the stream.
         *
         * @var int
         */
        protected $totalLength;
        /**
         * The buffer.
         *
         * @var string
         */
        protected $buffer;
        /**
         * StreamReader constructor.
         *
         * @param resource $stream
         * @param bool $closeStream Defines whether to close the stream resource if the instance is destructed or not.
         */
        public function __construct($stream, $closeStream = false)
        {
        }
        /**
         * The destructor.
         */
        public function __destruct()
        {
        }
        /**
         * Closes the file handle.
         */
        public function cleanUp()
        {
        }
        /**
         * Returns the byte length of the buffer.
         *
         * @param bool $atOffset
         * @return int
         */
        public function getBufferLength($atOffset = false)
        {
        }
        /**
         * Get the current position in the stream.
         *
         * @return int
         */
        public function getPosition()
        {
        }
        /**
         * Returns the current buffer.
         *
         * @param bool $atOffset
         * @return string
         */
        public function getBuffer($atOffset = true)
        {
        }
        /**
         * Gets a byte at a specific position in the buffer.
         *
         * If the position is invalid the method will return false.
         *
         * If the $position parameter is set to null the value of $this->offset will be used.
         *
         * @param int|null $position
         * @return string|bool
         */
        public function getByte($position = null)
        {
        }
        /**
         * Returns a byte at a specific position, and set the offset to the next byte position.
         *
         * If the position is invalid the method will return false.
         *
         * If the $position parameter is set to null the value of $this->offset will be used.
         *
         * @param int|null $position
         * @return string|bool
         */
        public function readByte($position = null)
        {
        }
        /**
         * Read bytes from the current or a specific offset position and set the internal pointer to the next byte.
         *
         * If the position is invalid the method will return false.
         *
         * If the $position parameter is set to null the value of $this->offset will be used.
         *
         * @param int $length
         * @param int|null $position
         * @return string|false
         */
        public function readBytes($length, $position = null)
        {
        }
        /**
         * Read a line from the current position.
         *
         * @param int $length
         * @return string|bool
         */
        public function readLine($length = 1024)
        {
        }
        /**
         * Set the offset position in the current buffer.
         *
         * @param int $offset
         */
        public function setOffset($offset)
        {
        }
        /**
         * Returns the current offset in the current buffer.
         *
         * @return int
         */
        public function getOffset()
        {
        }
        /**
         * Add an offset to the current offset.
         *
         * @param int $offset
         */
        public function addOffset($offset)
        {
        }
        /**
         * Make sure that there is at least one character beyond the current offset in the buffer.
         *
         * @return bool
         */
        public function ensureContent()
        {
        }
        /**
         * Returns the stream.
         *
         * @return resource
         */
        public function getStream()
        {
        }
        /**
         * Gets the total available length.
         *
         * @return int
         */
        public function getTotalLength()
        {
        }
        /**
         * Resets the buffer to a position and re-read the buffer with the given length.
         *
         * If the $pos parameter is negative the start buffer position will be the $pos'th position from
         * the end of the file.
         *
         * If the $pos parameter is negative and the absolute value is bigger then the totalLength of
         * the file $pos will set to zero.
         *
         * @param int|null $pos Start position of the new buffer
         * @param int $length Length of the new buffer. Mustn't be negative
         */
        public function reset($pos = 0, $length = 200)
        {
        }
        /**
         * Ensures bytes in the buffer with a specific length and location in the file.
         *
         * @param int $pos
         * @param int $length
         * @see reset()
         */
        public function ensure($pos, $length)
        {
        }
        /**
         * Forcefully read more data into the buffer.
         *
         * @param int $minLength
         * @return bool Returns false if the stream reaches the end
         */
        public function increaseLength($minLength = 100)
        {
        }
    }
    /**
     * Exception for the pdf parser class
     */
    class PdfParserException extends \setasign\Fpdi\FpdiException
    {
        /**
         * @var int
         */
        const NOT_IMPLEMENTED = 0x1;
        /**
         * @var int
         */
        const IMPLEMENTED_IN_FPDI_PDF_PARSER = 0x2;
        /**
         * @var int
         */
        const INVALID_DATA_TYPE = 0x3;
        /**
         * @var int
         */
        const FILE_HEADER_NOT_FOUND = 0x4;
        /**
         * @var int
         */
        const PDF_VERSION_NOT_FOUND = 0x5;
        /**
         * @var int
         */
        const INVALID_DATA_SIZE = 0x6;
    }
}
namespace setasign\Fpdi\PdfParser\Type {
    /**
     * A class defining a PDF data type
     */
    class PdfType
    {
        /**
         * Resolves a PdfType value to its value.
         *
         * This method is used to evaluate indirect and direct object references until a final value is reached.
         *
         * @param PdfType $value
         * @param PdfParser $parser
         * @param bool $stopAtIndirectObject
         * @return PdfType
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public static function resolve(\setasign\Fpdi\PdfParser\Type\PdfType $value, \setasign\Fpdi\PdfParser\PdfParser $parser, $stopAtIndirectObject = false)
        {
        }
        /**
         * Ensure that a value is an instance of a specific PDF type.
         *
         * @param string $type
         * @param PdfType $value
         * @param string $errorMessage
         * @return mixed
         * @throws PdfTypeException
         */
        protected static function ensureType($type, $value, $errorMessage)
        {
        }
        /**
         * The value of the PDF type.
         *
         * @var mixed
         */
        public $value;
    }
    /**
     * Class representing a PDF null object
     */
    class PdfNull extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        // empty body
    }
    /**
     * Class representing PDF token object
     */
    class PdfToken extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Helper method to create an instance.
         *
         * @param string $token
         * @return self
         */
        public static function create($token)
        {
        }
        /**
         * Ensures that the passed value is a PdfToken instance.
         *
         * @param mixed $token
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($token)
        {
        }
    }
    /**
     * Class representing a PDF name object
     */
    class PdfName extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses a name object from the passed tokenizer and stream-reader.
         *
         * @param Tokenizer $tokenizer
         * @param StreamReader $streamReader
         * @return self
         */
        public static function parse(\setasign\Fpdi\PdfParser\Tokenizer $tokenizer, \setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Unescapes a name string.
         *
         * @param string $value
         * @return string
         */
        public static function unescape($value)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param string $string
         * @return self
         */
        public static function create($string)
        {
        }
        /**
         * Ensures that the passed value is a PdfName instance.
         *
         * @param mixed $name
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($name)
        {
        }
    }
    /**
     * Class representing a numeric PDF object
     */
    class PdfNumeric extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Helper method to create an instance.
         *
         * @param int|float $value
         * @return PdfNumeric
         */
        public static function create($value)
        {
        }
        /**
         * Ensures that the passed value is a PdfNumeric instance.
         *
         * @param mixed $value
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($value)
        {
        }
    }
    /**
     * Class representing a PDF dictionary object
     */
    class PdfDictionary extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses a dictionary of the passed tokenizer, stream-reader and parser.
         *
         * @param Tokenizer $tokenizer
         * @param StreamReader $streamReader
         * @param PdfParser $parser
         * @return bool|self
         * @throws PdfTypeException
         */
        public static function parse(\setasign\Fpdi\PdfParser\Tokenizer $tokenizer, \setasign\Fpdi\PdfParser\StreamReader $streamReader, \setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param PdfType[] $entries The keys are the name entries of the dictionary.
         * @return self
         */
        public static function create(array $entries = [])
        {
        }
        /**
         * Get a value by its key from a dictionary or a default value.
         *
         * @param mixed $dictionary
         * @param string $key
         * @param PdfType|null $default
         * @return PdfNull|PdfType
         * @throws PdfTypeException
         */
        public static function get($dictionary, $key, \setasign\Fpdi\PdfParser\Type\PdfType $default = null)
        {
        }
        /**
         * Ensures that the passed value is a PdfDictionary instance.
         *
         * @param mixed $dictionary
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($dictionary)
        {
        }
    }
    /**
     * Class representing a hexadecimal encoded PDF string object
     */
    class PdfHexString extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses a hexadecimal string object from the stream reader.
         *
         * @param StreamReader $streamReader
         * @return bool|self
         */
        public static function parse(\setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param string $string The hex encoded string.
         * @return self
         */
        public static function create($string)
        {
        }
        /**
         * Ensures that the passed value is a PdfHexString instance.
         *
         * @param mixed $hexString
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($hexString)
        {
        }
    }
    /**
     * Class representing a PDF stream object
     */
    class PdfStream extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses a stream from a stream reader.
         *
         * @param PdfDictionary $dictionary
         * @param StreamReader $reader
         * @param PdfParser $parser Optional to keep backwards compatibility
         * @return self
         * @throws PdfTypeException
         */
        public static function parse(\setasign\Fpdi\PdfParser\Type\PdfDictionary $dictionary, \setasign\Fpdi\PdfParser\StreamReader $reader, \setasign\Fpdi\PdfParser\PdfParser $parser = null)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param PdfDictionary $dictionary
         * @param string $stream
         * @return self
         */
        public static function create(\setasign\Fpdi\PdfParser\Type\PdfDictionary $dictionary, $stream)
        {
        }
        /**
         * Ensures that the passed value is a PdfStream instance.
         *
         * @param mixed $stream
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($stream)
        {
        }
        /**
         * The stream or its byte-offset position.
         *
         * @var int|string
         */
        protected $stream;
        /**
         * The stream reader instance.
         *
         * @var StreamReader|null
         */
        protected $reader;
        /**
         * The PDF parser instance.
         *
         * @var PdfParser
         */
        protected $parser;
        /**
         * Get the stream data.
         *
         * @param bool $cache Whether cache the stream data or not.
         * @return bool|string
         * @throws PdfTypeException
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public function getStream($cache = false)
        {
        }
        /**
         * Extract the stream "manually".
         *
         * @return string
         * @throws PdfTypeException
         */
        protected function extractStream()
        {
        }
        /**
         * Get the unfiltered stream data.
         *
         * @return string
         * @throws FilterException
         * @throws PdfParserException
         */
        public function getUnfilteredStream()
        {
        }
    }
    /**
     * Class representing an indirect object
     */
    class PdfIndirectObject extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses an indirect object from a tokenizer, parser and stream-reader.
         *
         * @param int $objectNumberToken
         * @param int $objectGenerationNumberToken
         * @param PdfParser $parser
         * @param Tokenizer $tokenizer
         * @param StreamReader $reader
         * @return bool|self
         * @throws PdfTypeException
         */
        public static function parse($objectNumberToken, $objectGenerationNumberToken, \setasign\Fpdi\PdfParser\PdfParser $parser, \setasign\Fpdi\PdfParser\Tokenizer $tokenizer, \setasign\Fpdi\PdfParser\StreamReader $reader)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param int $objectNumber
         * @param int $generationNumber
         * @param PdfType $value
         * @return self
         */
        public static function create($objectNumber, $generationNumber, \setasign\Fpdi\PdfParser\Type\PdfType $value)
        {
        }
        /**
         * Ensures that the passed value is a PdfIndirectObject instance.
         *
         * @param mixed $indirectObject
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($indirectObject)
        {
        }
        /**
         * The object number.
         *
         * @var int
         */
        public $objectNumber;
        /**
         * The generation number.
         *
         * @var int
         */
        public $generationNumber;
    }
    /**
     * Exception class for pdf type classes
     */
    class PdfTypeException extends \setasign\Fpdi\PdfParser\PdfParserException
    {
        /**
         * @var int
         */
        const NO_NEWLINE_AFTER_STREAM_KEYWORD = 0x601;
    }
    /**
     * Class representing a boolean PDF object
     */
    class PdfBoolean extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Helper method to create an instance.
         *
         * @param bool $value
         * @return self
         */
        public static function create($value)
        {
        }
        /**
         * Ensures that the passed value is a PdfBoolean instance.
         *
         * @param mixed $value
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($value)
        {
        }
    }
    /**
     * Class representing a PDF string object
     */
    class PdfString extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses a string object from the stream reader.
         *
         * @param StreamReader $streamReader
         * @return self
         */
        public static function parse(\setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param string $value The string needs to be escaped accordingly.
         * @return self
         */
        public static function create($value)
        {
        }
        /**
         * Ensures that the passed value is a PdfString instance.
         *
         * @param mixed $string
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($string)
        {
        }
        /**
         * Unescapes escaped sequences in a PDF string according to the PDF specification.
         *
         * @param string $s
         * @return string
         */
        public static function unescape($s)
        {
        }
    }
    /**
     * Class representing an indirect object reference
     */
    class PdfIndirectObjectReference extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Helper method to create an instance.
         *
         * @param int $objectNumber
         * @param int $generationNumber
         * @return self
         */
        public static function create($objectNumber, $generationNumber)
        {
        }
        /**
         * Ensures that the passed value is a PdfIndirectObject instance.
         *
         * @param mixed $value
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($value)
        {
        }
        /**
         * The generation number.
         *
         * @var int
         */
        public $generationNumber;
    }
    /**
     * Class representing a PDF array object
     *
     * @property array $value The value of the PDF type.
     */
    class PdfArray extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses an array of the passed tokenizer and parser.
         *
         * @param Tokenizer $tokenizer
         * @param PdfParser $parser
         * @return bool|self
         * @throws PdfTypeException
         */
        public static function parse(\setasign\Fpdi\PdfParser\Tokenizer $tokenizer, \setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param PdfType[] $values
         * @return self
         */
        public static function create(array $values = [])
        {
        }
        /**
         * Ensures that the passed array is a PdfArray instance with a (optional) specific size.
         *
         * @param mixed $array
         * @param null|int $size
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($array, $size = null)
        {
        }
    }
}
namespace setasign\Fpdi\PdfParser\Filter {
    /**
     * Exception for filters
     */
    class FilterException extends \setasign\Fpdi\PdfParser\PdfParserException
    {
        const UNSUPPORTED_FILTER = 0x201;
        const NOT_IMPLEMENTED = 0x202;
    }
    /**
     * Exception for flate filter class
     */
    class FlateException extends \setasign\Fpdi\PdfParser\Filter\FilterException
    {
        /**
         * @var integer
         */
        const NO_ZLIB = 0x401;
        /**
         * @var integer
         */
        const DECOMPRESS_ERROR = 0x402;
    }
    /**
     * Exception for Ascii85 filter class
     */
    class Ascii85Exception extends \setasign\Fpdi\PdfParser\Filter\FilterException
    {
        /**
         * @var integer
         */
        const ILLEGAL_CHAR_FOUND = 0x301;
        /**
         * @var integer
         */
        const ILLEGAL_LENGTH = 0x302;
    }
    /**
     * Interface for filters
     */
    interface FilterInterface
    {
        /**
         * Decode a string.
         *
         * @param string $data The input string
         * @return string
         */
        public function decode($data);
    }
    /**
     * Class for handling LZW encoded data
     */
    class Lzw implements \setasign\Fpdi\PdfParser\Filter\FilterInterface
    {
        /**
         * @var null|string
         */
        protected $data;
        /**
         * @var array
         */
        protected $sTable = [];
        /**
         * @var int
         */
        protected $dataLength = 0;
        /**
         * @var int
         */
        protected $tIdx;
        /**
         * @var int
         */
        protected $bitsToGet = 9;
        /**
         * @var int
         */
        protected $bytePointer;
        /**
         * @var int
         */
        protected $nextData = 0;
        /**
         * @var int
         */
        protected $nextBits = 0;
        /**
         * @var array
         */
        protected $andTable = [511, 1023, 2047, 4095];
        /**
         * Method to decode LZW compressed data.
         *
         * @param string $data The compressed data
         * @return string The uncompressed data
         * @throws LzwException
         */
        public function decode($data)
        {
        }
        /**
         * Initialize the string table.
         */
        protected function initsTable()
        {
        }
        /**
         * Add a new string to the string table.
         *
         * @param string $oldString
         * @param string $newString
         */
        protected function addStringToTable($oldString, $newString = '')
        {
        }
        /**
         * Returns the next 9, 10, 11 or 12 bits.
         *
         * @return int
         */
        protected function getNextCode()
        {
        }
    }
    /**
     * Class for handling ASCII hexadecimal encoded data
     */
    class AsciiHex implements \setasign\Fpdi\PdfParser\Filter\FilterInterface
    {
        /**
         * Converts an ASCII hexadecimal encoded string into its binary representation.
         *
         * @param string $data The input string
         * @return string
         */
        public function decode($data)
        {
        }
        /**
         * Converts a string into ASCII hexadecimal representation.
         *
         * @param string $data The input string
         * @param boolean $leaveEOD
         * @return string
         */
        public function encode($data, $leaveEOD = false)
        {
        }
    }
    /**
     * Class for handling zlib/deflate encoded data
     */
    class Flate implements \setasign\Fpdi\PdfParser\Filter\FilterInterface
    {
        /**
         * Checks whether the zlib extension is loaded.
         *
         * Used for testing purpose.
         *
         * @return boolean
         * @internal
         */
        protected function extensionLoaded()
        {
        }
        /**
         * Decodes a flate compressed string.
         *
         * @param string|false $data The input string
         * @return string
         * @throws FlateException
         */
        public function decode($data)
        {
        }
    }
    /**
     * Exception for LZW filter class
     */
    class LzwException extends \setasign\Fpdi\PdfParser\Filter\FilterException
    {
        /**
         * @var integer
         */
        const LZW_FLAVOUR_NOT_SUPPORTED = 0x501;
    }
    /**
     * Class for handling ASCII base-85 encoded data
     */
    class Ascii85 implements \setasign\Fpdi\PdfParser\Filter\FilterInterface
    {
        /**
         * Decode ASCII85 encoded string.
         *
         * @param string $data The input string
         * @return string
         * @throws Ascii85Exception
         */
        public function decode($data)
        {
        }
    }
}
namespace setasign\Fpdi\PdfParser\CrossReference {
    /**
     * ReaderInterface for cross-reference readers.
     */
    interface ReaderInterface
    {
        /**
         * Get an offset by an object number.
         *
         * @param int $objectNumber
         * @return int|bool False if the offset was not found.
         */
        public function getOffsetFor($objectNumber);
        /**
         * Get the trailer related to this cross reference.
         *
         * @return PdfDictionary
         */
        public function getTrailer();
    }
    /**
     * Abstract class for cross-reference reader classes.
     */
    abstract class AbstractReader
    {
        /**
         * @var PdfParser
         */
        protected $parser;
        /**
         * @var PdfDictionary
         */
        protected $trailer;
        /**
         * AbstractReader constructor.
         *
         * @param PdfParser $parser
         * @throws CrossReferenceException
         * @throws PdfTypeException
         */
        public function __construct(\setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Get the trailer dictionary.
         *
         * @return PdfDictionary
         */
        public function getTrailer()
        {
        }
        /**
         * Read the trailer dictionary.
         *
         * @throws CrossReferenceException
         * @throws PdfTypeException
         */
        protected function readTrailer()
        {
        }
    }
    /**
     * Class FixedReader
     *
     * This reader allows a very less overhead parsing of single entries of the cross-reference, because the main entries
     * are only read when needed and not in a single run.
     */
    class FixedReader extends \setasign\Fpdi\PdfParser\CrossReference\AbstractReader implements \setasign\Fpdi\PdfParser\CrossReference\ReaderInterface
    {
        /**
         * @var StreamReader
         */
        protected $reader;
        /**
         * Data of subsections.
         *
         * @var array
         */
        protected $subSections;
        /**
         * FixedReader constructor.
         *
         * @param PdfParser $parser
         * @throws CrossReferenceException
         */
        public function __construct(\setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Get all subsection data.
         *
         * @return array
         */
        public function getSubSections()
        {
        }
        /**
         * @inheritdoc
         * @return int|false
         */
        public function getOffsetFor($objectNumber)
        {
        }
        /**
         * Read the cross-reference.
         *
         * This reader will only read the subsections in this method. The offsets were resolved individually by this
         * information.
         *
         * @throws CrossReferenceException
         */
        protected function read()
        {
        }
        /**
         * Fixes an invalid object number shift.
         *
         * This method can be used to repair documents with an invalid subsection header:
         *
         * <code>
         * xref
         * 1 7
         * 0000000000 65535 f
         * 0000000009 00000 n
         * 0000412075 00000 n
         * 0000412172 00000 n
         * 0000412359 00000 n
         * 0000412417 00000 n
         * 0000412468 00000 n
         * </code>
         *
         * It shall only be called on the first table.
         *
         * @return bool
         */
        public function fixFaultySubSectionShift()
        {
        }
    }
    /**
     * Exception used by the CrossReference and Reader classes.
     */
    class CrossReferenceException extends \setasign\Fpdi\PdfParser\PdfParserException
    {
        /**
         * @var int
         */
        const INVALID_DATA = 0x101;
        /**
         * @var int
         */
        const XREF_MISSING = 0x102;
        /**
         * @var int
         */
        const ENTRIES_TOO_LARGE = 0x103;
        /**
         * @var int
         */
        const ENTRIES_TOO_SHORT = 0x104;
        /**
         * @var int
         */
        const NO_ENTRIES = 0x105;
        /**
         * @var int
         */
        const NO_TRAILER_FOUND = 0x106;
        /**
         * @var int
         */
        const NO_STARTXREF_FOUND = 0x107;
        /**
         * @var int
         */
        const NO_XREF_FOUND = 0x108;
        /**
         * @var int
         */
        const UNEXPECTED_END = 0x109;
        /**
         * @var int
         */
        const OBJECT_NOT_FOUND = 0x10a;
        /**
         * @var int
         */
        const COMPRESSED_XREF = 0x10b;
        /**
         * @var int
         */
        const ENCRYPTED = 0x10c;
    }
    /**
     * Class CrossReference
     *
     * This class processes the standard cross reference of a PDF document.
     */
    class CrossReference
    {
        /**
         * The byte length in which the "startxref" keyword should be searched.
         *
         * @var int
         */
        public static $trailerSearchLength = 5500;
        /**
         * @var int
         */
        protected $fileHeaderOffset = 0;
        /**
         * @var PdfParser
         */
        protected $parser;
        /**
         * @var ReaderInterface[]
         */
        protected $readers = [];
        /**
         * CrossReference constructor.
         *
         * @param PdfParser $parser
         * @throws CrossReferenceException
         * @throws PdfTypeException
         */
        public function __construct(\setasign\Fpdi\PdfParser\PdfParser $parser, $fileHeaderOffset = 0)
        {
        }
        /**
         * Get the size of the cross reference.
         *
         * @return integer
         */
        public function getSize()
        {
        }
        /**
         * Get the trailer dictionary.
         *
         * @return PdfDictionary
         */
        public function getTrailer()
        {
        }
        /**
         * Get the cross reference readser instances.
         *
         * @return ReaderInterface[]
         */
        public function getReaders()
        {
        }
        /**
         * Get the offset by an object number.
         *
         * @param int $objectNumber
         * @return integer|bool
         */
        public function getOffsetFor($objectNumber)
        {
        }
        /**
         * Get an indirect object by its object number.
         *
         * @param int $objectNumber
         * @return PdfIndirectObject
         * @throws CrossReferenceException
         */
        public function getIndirectObject($objectNumber)
        {
        }
        /**
         * Read the cross-reference table at a given offset.
         *
         * Internally the method will try to evaluate the best reader for this cross-reference.
         *
         * @param int $offset
         * @return ReaderInterface
         * @throws CrossReferenceException
         * @throws PdfTypeException
         */
        protected function readXref($offset)
        {
        }
        /**
         * Get a cross-reference reader instance.
         *
         * @param PdfToken|PdfIndirectObject $initValue
         * @return ReaderInterface|bool
         * @throws CrossReferenceException
         * @throws PdfTypeException
         */
        protected function initReaderInstance($initValue)
        {
        }
        /**
         * Check for encryption.
         *
         * @param PdfDictionary $dictionary
         * @throws CrossReferenceException
         */
        protected function checkForEncryption(\setasign\Fpdi\PdfParser\Type\PdfDictionary $dictionary)
        {
        }
        /**
         * Find the start position for the first cross-reference.
         *
         * @return int The byte-offset position of the first cross-reference.
         * @throws CrossReferenceException
         */
        protected function findStartXref()
        {
        }
    }
    /**
     * Class LineReader
     *
     * This reader class read all cross-reference entries in a single run.
     * It supports reading cross-references with e.g. invalid data (e.g. entries with a length < or > 20 bytes).
     */
    class LineReader extends \setasign\Fpdi\PdfParser\CrossReference\AbstractReader implements \setasign\Fpdi\PdfParser\CrossReference\ReaderInterface
    {
        /**
         * The object offsets.
         *
         * @var array
         */
        protected $offsets;
        /**
         * LineReader constructor.
         *
         * @param PdfParser $parser
         * @throws CrossReferenceException
         */
        public function __construct(\setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * @inheritdoc
         * @return int|false
         */
        public function getOffsetFor($objectNumber)
        {
        }
        /**
         * Get all found offsets.
         *
         * @return array
         */
        public function getOffsets()
        {
        }
        /**
         * Extracts the cross reference data from the stream reader.
         *
         * @param StreamReader $reader
         * @return string
         * @throws CrossReferenceException
         */
        protected function extract(\setasign\Fpdi\PdfParser\StreamReader $reader)
        {
        }
        /**
         * Read the cross-reference entries.
         *
         * @param string $xrefContent
         * @throws CrossReferenceException
         */
        protected function read($xrefContent)
        {
        }
    }
}
namespace setasign\Fpdi\PdfParser {
    /**
     * A PDF parser class
     */
    class PdfParser
    {
        /**
         * @var StreamReader
         */
        protected $streamReader;
        /**
         * @var Tokenizer
         */
        protected $tokenizer;
        /**
         * The file header.
         *
         * @var string
         */
        protected $fileHeader;
        /**
         * The offset to the file header.
         *
         * @var int
         */
        protected $fileHeaderOffset;
        /**
         * @var CrossReference|null
         */
        protected $xref;
        /**
         * All read objects.
         *
         * @var array
         */
        protected $objects = [];
        /**
         * PdfParser constructor.
         *
         * @param StreamReader $streamReader
         */
        public function __construct(\setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Removes cycled references.
         *
         * @internal
         */
        public function cleanUp()
        {
        }
        /**
         * Get the stream reader instance.
         *
         * @return StreamReader
         */
        public function getStreamReader()
        {
        }
        /**
         * Get the tokenizer instance.
         *
         * @return Tokenizer
         */
        public function getTokenizer()
        {
        }
        /**
         * Resolves the file header.
         *
         * @throws PdfParserException
         * @return int
         */
        protected function resolveFileHeader()
        {
        }
        /**
         * Get the cross-reference instance.
         *
         * @return CrossReference
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public function getCrossReference()
        {
        }
        /**
         * Get the PDF version.
         *
         * @return int[] An array of major and minor version.
         * @throws PdfParserException
         */
        public function getPdfVersion()
        {
        }
        /**
         * Get the catalog dictionary.
         *
         * @return PdfDictionary
         * @throws Type\PdfTypeException
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public function getCatalog()
        {
        }
        /**
         * Get an indirect object by its object number.
         *
         * @param int $objectNumber
         * @param bool $cache
         * @return PdfIndirectObject
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public function getIndirectObject($objectNumber, $cache = false)
        {
        }
        /**
         * Read a PDF value.
         *
         * @param null|bool|string $token
         * @param null|string $expectedType
         * @return false|PdfArray|PdfBoolean|PdfDictionary|PdfHexString|PdfIndirectObject|PdfIndirectObjectReference|PdfName|PdfNull|PdfNumeric|PdfStream|PdfString|PdfToken
         * @throws Type\PdfTypeException
         */
        public function readValue($token = null, $expectedType = null)
        {
        }
    }
    /**
     * A tokenizer class.
     */
    class Tokenizer
    {
        /**
         * @var StreamReader
         */
        protected $streamReader;
        /**
         * A token stack.
         *
         * @var string[]
         */
        protected $stack = [];
        /**
         * Tokenizer constructor.
         *
         * @param StreamReader $streamReader
         */
        public function __construct(\setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Get the stream reader instance.
         *
         * @return StreamReader
         */
        public function getStreamReader()
        {
        }
        /**
         * Clear the token stack.
         */
        public function clearStack()
        {
        }
        /**
         * Push a token onto the stack.
         *
         * @param string $token
         */
        public function pushStack($token)
        {
        }
        /**
         * Get next token.
         *
         * @return bool|string
         */
        public function getNextToken()
        {
        }
        /**
         * Leap white spaces.
         *
         * @return boolean
         */
        public function leapWhiteSpaces()
        {
        }
    }
}
namespace setasign\Fpdi {
    /**
     * Class Fpdi
     *
     * This class let you import pages of existing PDF documents into a reusable structure for FPDF.
     */
    class Fpdi extends \setasign\Fpdi\FpdfTpl
    {
        use \setasign\Fpdi\FpdiTrait;
        use \setasign\Fpdi\FpdfTrait;
        /**
         * FPDI version
         *
         * @string
         */
        const VERSION = '2.4.1';
    }
}
namespace {
    /*******************************************************************************
    * Class to parse and subset TrueType fonts                                     *
    *                                                                              *
    * Version: 1.11                                                                *
    * Date:    2021-04-18                                                          *
    * Author:  Olivier PLATHEY                                                     *
    *******************************************************************************/
    class TTFParser
    {
        protected $f;
        protected $tables;
        protected $numberOfHMetrics;
        protected $numGlyphs;
        protected $glyphNames;
        protected $indexToLocFormat;
        protected $subsettedChars;
        protected $subsettedGlyphs;
        public $chars;
        public $glyphs;
        public $unitsPerEm;
        public $xMin, $yMin, $xMax, $yMax;
        public $postScriptName;
        public $embeddable;
        public $bold;
        public $typoAscender;
        public $typoDescender;
        public $capHeight;
        public $italicAngle;
        public $underlinePosition;
        public $underlineThickness;
        public $isFixedPitch;
        function __construct($file)
        {
        }
        function __destruct()
        {
        }
        function Parse()
        {
        }
        function ParseOffsetTable()
        {
        }
        function ParseHead()
        {
        }
        function ParseHhea()
        {
        }
        function ParseMaxp()
        {
        }
        function ParseHmtx()
        {
        }
        function ParseLoca()
        {
        }
        function ParseGlyf()
        {
        }
        function ParseCmap()
        {
        }
        function ParseName()
        {
        }
        function ParseOS2()
        {
        }
        function ParsePost()
        {
        }
        function Subset($chars)
        {
        }
        function AddGlyph($id)
        {
        }
        function Build()
        {
        }
        function BuildCmap()
        {
        }
        function BuildHhea()
        {
        }
        function BuildHmtx()
        {
        }
        function BuildLoca()
        {
        }
        function BuildGlyf()
        {
        }
        function BuildMaxp()
        {
        }
        function BuildPost()
        {
        }
        function BuildFont()
        {
        }
        function LoadTable($tag)
        {
        }
        function SetTable($tag, $data)
        {
        }
        function Seek($tag)
        {
        }
        function Skip($n)
        {
        }
        function Read($n)
        {
        }
        function ReadUShort()
        {
        }
        function ReadShort()
        {
        }
        function ReadULong()
        {
        }
        function CheckSum($s)
        {
        }
        function Error($msg)
        {
        }
    }
}
namespace baltpeter\Internetmarke {
    /**
     * Helper class to create form
     * for loading the portokasse
     */
    class PortokasseCharge
    {
        /**
         * @var string Generated during authentification in service class
         */
        protected $user_token;
        /**
         * @var datetime in format dmY-His. The form is only valid for the next 4 minutes
         */
        protected $time;
        /**
         * @var string url where user is redirected after successfully loading the portokasse
         */
        protected $success_url;
        /**
         * @var string url where user is redirected after failing to load the portokasse
         */
        protected $cancel_url;
        /**
         * @var integer number of eurocents of the balance of the portokasse after payment.
         *  Example: When user has an actual balance of 400 eurocents on his portokasse
         *  and he submits this form with $balance=1500 he will be asked
         *  to pay 1100. However, he has to pay at least 1000 eurocents regardless of his current balance.
         */
        protected $balance;
        /**
         * @var ParterInformation
         */
        protected $partner_information;
        /**
         * [__construct description]
         * @param ParterInformation  $parter_information
         * @param string  $user_token   Unique user ID
         * @param string  $success_url redirect url after success
         * @param string  $cancel_url  redirect url after failure
         * @param integer $balance balance in eurocents of the portokasse after payment
         */
        public function __construct(\baltpeter\Internetmarke\PartnerInformation $partner_information, $user_token, $success_url, $cancel_url, $balance = 1000)
        {
        }
        /**
         *
         * @return string
         */
        public function getSignature()
        {
        }
        /**
         *
         * @return string
         */
        public function getUserToken()
        {
        }
        public function getRequestTimestamp()
        {
        }
        /**
         *
         * @return string
         */
        public function getSuccessUrl()
        {
        }
        /**
         *
         * @return string
         */
        public function getCancelUrl()
        {
        }
        /**
         *
         * @return integer
         */
        public function getBalance()
        {
        }
    }
    abstract class ApiResult
    {
        public static function fromStdObject($std_object)
        {
        }
    }
    class Name extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var PersonName First name and last name of a natural person
         * (The parameters name and companyName are mutually exclusive, i.e., if a companyName is used, there must be no details on name.)
         */
        protected $personName;
        /**
         * @var CompanyName Company name and contact person
         * (The parameters name and companyName are mutually exclusive, i.e., if a companyName is used, there must be no details on name.)
         */
        protected $companyName;
        /**
         * Name constructor.
         *
         * @param PersonName $person_name
         * @param CompanyName $company_name
         */
        public function __construct($person_name, $company_name)
        {
        }
        /**
         * @return PersonName
         */
        public function getPersonName()
        {
        }
        /**
         * @param PersonName $personName
         */
        public function setPersonName($personName)
        {
        }
        /**
         * @return CompanyName
         */
        public function getCompanyName()
        {
        }
        /**
         * @param CompanyName $companyName
         */
        public function setCompanyName($companyName)
        {
        }
    }
    class OrderItem extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var int Deutsche Post’s internal product ID for the selected product
         */
        protected $productCode;
        /**
         * @var int ID of the image to be printed
         */
        protected $imageId;
        /**
         * @var AddressBinding Optional address details for Internet stamps in the address zone
         */
        protected $address;
        /**
         * @var Position Optional specification of the position of the Internet stamp on the PDF document
         */
        protected $position;
        /**
         * @var string Layout of the Internet stamp (possible values: 'AddressZone' and 'FrankingZone')
         */
        protected $voucherLayout;
        /**
         * OrderItem constructor.
         *
         * @param int $product_code
         * @param int $image_id
         * @param AddressBinding $address_binding
         * @param Position $position
         * @param string $voucher_layout
         */
        public function __construct($product_code, $image_id, $address_binding, $position, $voucher_layout)
        {
        }
        /**
         * @return int
         */
        public function getProductCode()
        {
        }
        /**
         * @param int $productCode
         */
        public function setProductCode($productCode)
        {
        }
        /**
         * @return int
         */
        public function getImageId()
        {
        }
        /**
         * @param int $imageId
         */
        public function setImageId($imageId)
        {
        }
        /**
         * @return AddressBinding
         */
        public function getAddress()
        {
        }
        /**
         * @param AddressBinding $address
         */
        public function setAddress($address)
        {
        }
        /**
         * @return Position
         */
        public function getPosition()
        {
        }
        /**
         * @param Position $position
         */
        public function setPosition($position)
        {
        }
        /**
         * @return string
         */
        public function getVoucherLayout()
        {
        }
        /**
         * @param string $voucherLayout
         */
        public function setVoucherLayout($voucherLayout)
        {
        }
    }
    class AddressBinding extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var NamedAddress The sender's address
         */
        protected $sender;
        /**
         * @var NamedAddress The recipient's address
         */
        protected $receiver;
        /**
         * AddressBinding constructor.
         *
         * @param NamedAddress $sender_address
         * @param NamedAddress $receiver_address
         */
        public function __construct($sender_address, $receiver_address)
        {
        }
        /**
         * @return NamedAddress
         */
        public function getSender()
        {
        }
        /**
         * @param NamedAddress $sender
         */
        public function setSender($sender)
        {
        }
        /**
         * @return NamedAddress
         */
        public function getReceiver()
        {
        }
        /**
         * @param NamedAddress $receiver
         */
        public function setReceiver($receiver)
        {
        }
    }
    class PageFormat extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var int Page format ID
         */
        protected $id;
        /**
         * @var bool true if addresses can be printed on the franking marks using the page format
         */
        protected $isAddressPossible;
        /**
         * @var bool true if image can be printed on the franking marks using the page format
         */
        protected $isImagePossible;
        /**
         * @var string Name of the page format (e.g. 'DIN A4 normal paper' or 'letter C5 162 x 229')
         */
        protected $name;
        /**
         * @var string Description of the page format
         */
        protected $description;
        /**
         * @var string Specification of the print medium (possible values: 'REGULARPAGE', 'ENVELOPE', 'LABELPRINTER', 'LABELPAGE')
         */
        protected $pageType;
        /**
         * @var PageLayout Description of the page layout in a structured format
         */
        protected $pageLayout;
        /**
         * PageFormat constructor.
         *
         * @param int $id
         * @param bool $is_address_possible
         * @param bool $is_image_possible
         * @param string $name
         * @param string $description
         * @param string $page_type
         * @param PageLayout $page_layout
         */
        public function __construct($id, $is_address_possible, $is_image_possible, $name, $description, $page_type, $page_layout)
        {
        }
        /**
         * @return int
         */
        public function getId()
        {
        }
        /**
         * @param int $id
         */
        public function setId($id)
        {
        }
        /**
         * @return boolean
         */
        public function isIsAddressPossible()
        {
        }
        /**
         * @param boolean $isAddressPossible
         */
        public function setIsAddressPossible($isAddressPossible)
        {
        }
        /**
         * @return boolean
         */
        public function isIsImagePossible()
        {
        }
        /**
         * @param boolean $isImagePossible
         */
        public function setIsImagePossible($isImagePossible)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $name
         */
        public function setName($name)
        {
        }
        /**
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * @param string $description
         */
        public function setDescription($description)
        {
        }
        /**
         * @return string
         */
        public function getPageType()
        {
        }
        /**
         * @param string $pageType
         */
        public function setPageType($pageType)
        {
        }
        /**
         * @return PageLayout
         */
        public function getPageLayout()
        {
        }
        /**
         * @param PageLayout $pageLayout
         */
        public function setPageLayout($pageLayout)
        {
        }
    }
    class LabelCount extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var int Number of label items in the x direction
         */
        protected $labelX;
        /**
         * @var int Number of label items in the y direction
         */
        protected $labelY;
        /**
         * LabelCount constructor.
         *
         * @param int $label_x Number of label items in the x direction
         * @param int $label_y Number of label items in the y direction
         */
        public function __construct($label_x, $label_y)
        {
        }
        /**
         * @return int Number of label items in the x direction
         */
        public function getLabelX()
        {
        }
        /**
         * @param int $labelX Number of label items in the x direction
         */
        public function setLabelX($labelX)
        {
        }
        /**
         * @return int Number of label items in the y direction
         */
        public function getLabelY()
        {
        }
        /**
         * @param int $labelY Number of label items in the y direction
         */
        public function setLabelY($labelY)
        {
        }
    }
    class Margin extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var int Inner top margin size of the page format in millimeters
         */
        protected $top;
        /**
         * @var int Inner bottom margin size of the page format in millimeters
         */
        protected $bottom;
        /**
         * @var int Inner left margin size of the page format in millimeters
         */
        protected $left;
        /**
         * @var int Inner right margin size of the page format in millimeters
         */
        protected $right;
        /**
         * Margin constructor.
         *
         * @param int $top Inner top margin size of the page format in millimeters
         * @param int $bottom Inner bottom margin size of the page format in millimeters
         * @param int $left Inner left margin size of the page format in millimeters
         * @param int $right Inner right margin size of the page format in millimeters
         */
        public function __construct($top, $bottom, $left, $right)
        {
        }
        /**
         * @return int Inner top margin size of the page format in millimeters
         */
        public function getTop()
        {
        }
        /**
         * @param int $top Inner top margin size of the page format in millimeters
         */
        public function setTop($top)
        {
        }
        /**
         * @return int Inner bottom margin size of the page format in millimeters
         */
        public function getBottom()
        {
        }
        /**
         * @param int $bottom Inner bottom margin size of the page format in millimeters
         */
        public function setBottom($bottom)
        {
        }
        /**
         * @return int Inner left margin size of the page format in millimeters
         */
        public function getLeft()
        {
        }
        /**
         * @param int $left Inner left margin size of the page format in millimeters
         */
        public function setLeft($left)
        {
        }
        /**
         * @return int Inner right margin size of the page format in millimeters
         */
        public function getRight()
        {
        }
        /**
         * @param int $right Inner right margin size of the page format in millimeters
         */
        public function setRight($right)
        {
        }
    }
    class PageLayout extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var Size Dimension of the page format in millimeters in the x and y direction
         */
        protected $size;
        /**
         * @var string Page orientation (possible values: 'PORTRAIT' and 'LANDSCAPE')
         */
        protected $orientation;
        /**
         * @var LabelSpacing Spacing between labels in millimeters
         */
        protected $labelSpacing;
        /**
         * @var LabelCount Number of label items in the x and y direction
         */
        protected $labelCount;
        /**
         * @var Margin Inner margin size of the page format in millimeters
         */
        protected $margin;
        /**
         * PageLayout constructor.
         *
         * @param Size $size Dimension of the page format in millimeters in the x and y direction
         * @param string $orientation Page orientation (possible values: 'PORTRAIT' and 'LANDSCAPE')
         * @param LabelSpacing $label_spacing Spacing between labels in millimeters
         * @param LabelCount $label_count Number of label items in the x and y direction
         * @param Margin $margin Inner margin size of the page format in millimeters
         */
        public function __construct($size, $orientation, $label_spacing, $label_count, $margin)
        {
        }
        /**
         * @return Size Dimension of the page format in millimeters in the x and y direction
         */
        public function getSize()
        {
        }
        /**
         * @param Size $size Dimension of the page format in millimeters in the x and y direction
         */
        public function setSize($size)
        {
        }
        /**
         * @return string Page orientation (possible values: 'PORTRAIT' and 'LANDSCAPE')
         */
        public function getOrientation()
        {
        }
        /**
         * @param string $orientation Page orientation (possible values: 'PORTRAIT' and 'LANDSCAPE')
         */
        public function setOrientation($orientation)
        {
        }
        /**
         * @return LabelSpacing Spacing between labels in millimeters
         */
        public function getLabelSpacing()
        {
        }
        /**
         * @param LabelSpacing $labelSpacing Spacing between labels in millimeters
         */
        public function setLabelSpacing($labelSpacing)
        {
        }
        /**
         * @return LabelCount Number of label items in the x and y direction
         */
        public function getLabelCount()
        {
        }
        /**
         * @param LabelCount $labelCount Number of label items in the x and y direction
         */
        public function setLabelCount($labelCount)
        {
        }
        /**
         * @return Margin Inner margin size of the page format in millimeters
         */
        public function getMargin()
        {
        }
        /**
         * @param Margin $margin Inner margin size of the page format in millimeters
         */
        public function setMargin($margin)
        {
        }
    }
    class Address extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var string Address supplement
         */
        protected $additional;
        /**
         * @var string Street
         */
        protected $street;
        /**
         * @var string House number
         */
        protected $houseNo;
        /**
         * @var string Postal code (ZIP code)
         */
        protected $zip;
        /**
         * @var string City
         */
        protected $city;
        /**
         * @var string 3-digit ISO country code
         */
        protected $country;
        /**
         * Address constructor.
         *
         * @param string $additional
         * @param string $street
         * @param string $house_no
         * @param string $zip
         * @param string $city
         * @param string $country
         */
        public function __construct($additional, $street, $house_no, $zip, $city, $country)
        {
        }
        /**
         * @return string
         */
        public function getAdditional()
        {
        }
        /**
         * @param string $additional
         */
        public function setAdditional($additional)
        {
        }
        /**
         * @return string
         */
        public function getStreet()
        {
        }
        /**
         * @param string $street
         */
        public function setStreet($street)
        {
        }
        /**
         * @return string
         */
        public function getHouseNo()
        {
        }
        /**
         * @param string $houseNo
         */
        public function setHouseNo($houseNo)
        {
        }
        /**
         * @return string
         */
        public function getZip()
        {
        }
        /**
         * @param string $zip
         */
        public function setZip($zip)
        {
        }
        /**
         * @return string
         */
        public function getCity()
        {
        }
        /**
         * @param string $city
         */
        public function setCity($city)
        {
        }
        /**
         * @return string
         */
        public function getCountry()
        {
        }
        /**
         * @param string $country
         */
        public function setCountry($country)
        {
        }
    }
    class PublicGalleryItem extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var string Technical designation of the image category
         */
        protected $category;
        /**
         * @var string Category and type of image
         */
        protected $categoryDescription;
        /**
         * @var int Technical ID, which uniquely identifies the category
         */
        protected $categoryId;
        /**
         * @var array An array of the images
         */
        protected $images;
        /**
         * PublicGalleryItem constructor.
         *
         * @param string $category
         * @param string $category_description
         * @param int $category_id
         * @param array $images
         */
        public function __construct($category, $category_description, $category_id, array $images = null)
        {
        }
        /**
         * @return string
         */
        public function getCategory()
        {
        }
        /**
         * @param string $category
         */
        public function setCategory($category)
        {
        }
        /**
         * @return string
         */
        public function getCategoryDescription()
        {
        }
        /**
         * @param string $categoryDescription
         */
        public function setCategoryDescription($categoryDescription)
        {
        }
        /**
         * @return int
         */
        public function getCategoryId()
        {
        }
        /**
         * @param int $categoryId
         */
        public function setCategoryId($categoryId)
        {
        }
        /**
         * @return array
         */
        public function getImages()
        {
        }
        /**
         * @param array $images
         */
        public function setImages($images)
        {
        }
    }
    class Service extends \SoapClient
    {
        protected $partner_information;
        /**
         * Service constructor.
         *
         * @param $partner_information PartnerInformation
         * @param array $options A array of config values for `SoapClient` (see PHP docs)
         * @param string $wsdl The wsdl file to use (defaults to 'https://internetmarke.deutschepost.de/OneClickForAppV3?wsdl')
         */
        public function __construct($partner_information, $options = array(), $wsdl = null)
        {
        }
        /**
         * Used to authenticate a user on the system. Returns a token and some information about the user
         *
         * @param $username string The user's email address
         * @param $password string The user's (plaintext) password
         * @return User An object holding: - a token used as authentication for other methods, - the user's wallet balance,
         *      - whether the user accepted the T&C, - an (optional) information text
         */
        public function authenticateUser($username, $password)
        {
        }
        /**
         * Fetch a list of all valid page formats
         *
         * @return PageFormat[]
         */
        public function retrievePageFormats()
        {
        }
        /**
         * Generate a unique order number (if your system doesn't generate its own)
         *
         * @param $user_token string A token to authenticate the user (gotten from `authenticateUser`)
         * @return string Next available shop order ID
         */
        public function createShopOrderId($user_token)
        {
        }
        /**
         * Fetch a hierarchical structure of image categories and the images in those categories
         *
         * @return PublicGalleryItem[]
         */
        public function retrievePublicGallery()
        {
        }
        /**
         * Fetch the user's private image gallery
         *
         * @param $user_token string A token to authenticate the user (gotten from `authenticateUser`)
         * @return array The user's images (empty if there are none)
         */
        public function retrievePrivateGallery($user_token)
        {
        }
        /**
         * Get a link to a preview of a stamp in PDF format
         *
         * @param $product_code int A product code for the type of stamp (a list of products is only available via the separate ProdWS service)
         * @param $voucher_layout string The layout of the stamp (possible values: 'FrankingZone' and 'AddressZone')
         * @param $page_format_id int ID of the page layout to be used (gotten from `retrievePageFormats`)
         * @param null $image_id An image ID to include in the stamp (optional, gotten from `retrievePublicGallery` or `retrievePrivateGallery`)
         * @return string A link to the preview stamp in PDF format
         */
        public function retrievePreviewVoucherPdf($product_code, $voucher_layout, $page_format_id, $image_id = null)
        {
        }
        /**
         * Get a link to a preview of a stamp in PNG format
         *
         * @param $product_code int A product code for the type of stamp (a list of products is only available via the separate ProdWS service)
         * @param $voucher_layout string The layout of the stamp (possible values: 'FrankingZone' and 'AddressZone')
         * @param null $image_id An image ID to include in the stamp (optional, gotten from `retrievePublicGallery` or `retrievePrivateGallery`)
         * @return string A link to the preview stamp in PNG format
         */
        public function retrievePreviewVoucherPng($product_code, $voucher_layout, $image_id = null)
        {
        }
        /**
         * Create a stamp in PDF format (costs actual money, debited from the Portokasse account)
         *
         * @param $user_token string A token to authenticate the user (gotten from `authenticateUser`)
         * @param $page_format_id int ID of the page layout to be used (gotten from `retrievePageFormats`)
         * @param $positions OrderItem[] An array of items to be ordered
         * @param $total int The total value of the shopping cart in eurocents (this is actually checked by the server and has to be correct)
         * @param null $shop_order_id
         * @param null $ppl_id
         * @param null $create_manifest bool Whether to create a posting receipt
         * @param null $create_shipping_list int Type of shipping list to be created (0: No shipping list,
         *      1: Shipping list without addresses, 2: Shipping list with addresses)
         * @return \stdClass An object containing: - a link to the PDF version of the stamp, - a link to the shipping list (if requested),
         *      - the user's wallet balance after the order, - the order ID, - the voucher ID, - the tracking ID (if applicable)
         */
        public function checkoutShoppingCartPdf($user_token, $page_format_id, $positions, $total, $shop_order_id = null, $ppl_id = null, $create_manifest = null, $create_shipping_list = null)
        {
        }
        /**
         * Create a stamp in PNG format (costs actual money, debited from the Portokasse account)
         *
         * @param $user_token string A token to authenticate the user (gotten from `authenticateUser`)
         * @param $positions OrderItem[] An array of items to be ordered
         * @param $total int The total value of the shopping cart in eurocents (this is actually checked by the server and has to be correct)
         * @param null $shop_order_id
         * @param null $ppl_id
         * @param null $create_manifest bool Whether to create a posting receipt
         * @param null $create_shipping_list int Type of shipping list to be created (0: No shipping list,
         *      1: Shipping list without addresses, 2: Shipping list with addresses)
         * @return \stdClass An object containing: - a link to the PNG version of the stamp, - a link to the shipping list (if requested),
         *      - the user's wallet balance after the order, - the order ID, - the voucher ID, - the tracking ID (if applicable)
         */
        public function checkoutShoppingCartPng($user_token, $positions, $total, $shop_order_id = null, $ppl_id = null, $create_manifest = null, $create_shipping_list = null)
        {
        }
        /**
         * Fetch a previous order (from `checkoutShoppingCartPdf` or `checkoutShoppingCartPng`)
         *
         * @param $user_token string A token to authenticate the user (gotten from `authenticateUser`)
         * @param $shop_order_id int The order ID of the order to be fetched
         * @return \stdClass Same as for the corresponding call to `checkoutShoppingCart(Pdf|Png)`
         */
        public function retrieveOrder($user_token, $shop_order_id)
        {
        }
    }
    class PartnerInformation
    {
        /**
         * @var string The partner's ID as supplied by DPDHL
         */
        protected $partnerId;
        /**
         * @var int The secret to be used for the signature (usually 1)
         */
        protected $keyPhase;
        /**
         * @var string A secret (and static) key supplied to the partner by DPDHL
         */
        protected $schlusselDpwnMeinmarktplatz;
        /**
         * PartnerInformation constructor.
         *
         * @param string $partner_id The partner's ID as supplied by DPDHL
         * @param int $key_phase The secret to be used for the signature (usually 1)
         * @param string $schlussel_dpwn_meinmarktplatz A secret (and static) key supplied to the partner by DPDHL
         */
        public function __construct($partner_id, $key_phase, $schlussel_dpwn_meinmarktplatz)
        {
        }
        /**
         * @return string The partner's ID as supplied by DPDHL
         */
        public function getPartnerId()
        {
        }
        /**
         * @param string $partnerId The partner's ID as supplied by DPDHL
         */
        public function setPartnerId($partnerId)
        {
        }
        /**
         * @return int The secret to be used for the signature (usually 1)
         */
        public function getKeyPhase()
        {
        }
        /**
         * @param int $keyPhase The secret to be used for the signature (usually 1)
         */
        public function setKeyPhase($keyPhase)
        {
        }
        /**
         * @return string A secret (and static) key supplied to the partner by DPDHL
         */
        public function getSchlusselDpwnMeinmarktplatz()
        {
        }
        /**
         * @param string $schlusselDpwnMeinmarktplatz A secret (and static) key supplied to the partner by DPDHL
         */
        public function setSchlusselDpwnMeinmarktplatz($schlusselDpwnMeinmarktplatz)
        {
        }
        /**
         * @return string The signature to be appended to the request header
         */
        protected function calculateSignature()
        {
        }
        /**
         * @return array An array of SOAP headers to authenticate the request with the Internetmarke server. Valid for four minutes from `REQUEST_TIMESTAMP`
         */
        public function soapHeaderArray()
        {
        }
    }
    class StampPngResult extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var string url to zipfile
         */
        public $link;
        /**
         * @var integer portokasse balance in eurocent
         */
        public $walletBallance;
        /**
         * @var stdClass with attributes `shopOrderId` and `voucherList`
         */
        public $shoppingCart;
        /**
         * @var string url to manifestLink
         */
        public $manifestLink;
        /**
         *
         * @param string $link           url to zipfile
         * @param integer $walletBallance portokasse balance in eurocent
         * @param stdClass $shoppingCart   with attributes `shopOrderId` and `voucherList`
         * @param string url to posting receipt of order
         */
        public function __construct($link, $walletBallance, $shoppingCart, $manifestLink = null)
        {
        }
        /**
         * Store zip and png files in folder of $path
         * @param string $path location where png should be extracted to
         * @return array on success: filenames of png's that were extracted
         *               on failure: if copy of zip file failed false,
         *                           if zip coulnd not be opened the error code
         */
        public function unzipPNG($path)
        {
        }
    }
    class NamedAddress extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var Name A person or company name
         */
        protected $name;
        /**
         * @var Address An address
         */
        protected $address;
        /**
         * NamedAddress constructor.
         *
         * @param Name $name
         * @param Address $address
         */
        public function __construct(\baltpeter\Internetmarke\Name $name, \baltpeter\Internetmarke\Address $address)
        {
        }
        /**
         * @return Name
         */
        public function getName()
        {
        }
        /**
         * @param Name $name
         */
        public function setName($name)
        {
        }
        /**
         * @return Address
         */
        public function getAddress()
        {
        }
        /**
         * @param Address $address
         */
        public function setAddress($address)
        {
        }
    }
    class Position
    {
        /**
         * @var int Column on the page
         */
        protected $labelX;
        /**
         * @var int Row on the page
         */
        protected $labelY;
        /**
         * @var int Page number
         */
        protected $page;
        /**
         * Position constructor.
         *
         * @param int $label_x
         * @param int $label_y
         * @param int $page
         */
        public function __construct($label_x, $label_y, $page)
        {
        }
        /**
         * @return int
         */
        public function getLabelX()
        {
        }
        /**
         * @param int $labelX
         */
        public function setLabelX($labelX)
        {
        }
        /**
         * @return int
         */
        public function getLabelY()
        {
        }
        /**
         * @param int $labelY
         */
        public function setLabelY($labelY)
        {
        }
        /**
         * @return int
         */
        public function getPage()
        {
        }
        /**
         * @param int $page
         */
        public function setPage($page)
        {
        }
    }
    class Size extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var int Width in millimeters
         */
        protected $x;
        /**
         * @var int Height in millimeters
         */
        protected $y;
        /**
         * Size constructor.
         *
         * @param int $x Width in millimeters
         * @param int $y Height in millimeters
         */
        public function __construct($x, $y)
        {
        }
        /**
         * @return int Width in millimeters
         */
        public function getX()
        {
        }
        /**
         * @param int $x Width in millimeters
         */
        public function setX($x)
        {
        }
        /**
         * @return int Height in millimeters
         */
        public function getY()
        {
        }
        /**
         * @param int $y Height in millimeters
         */
        public function setY($y)
        {
        }
    }
    class CompanyName
    {
        /**
         * @var string Company name
         */
        protected $company;
        /**
         * @var PersonName Name of the company's contact person
         */
        protected $personName;
        /**
         * CompanyName constructor.
         *
         * @param string $company
         * @param PersonName $person_name
         */
        public function __construct($company, $person_name)
        {
        }
        /**
         * @return string
         */
        public function getCompany()
        {
        }
        /**
         * @param string $company
         */
        public function setCompany($company)
        {
        }
        /**
         * @return PersonName
         */
        public function getPersonName()
        {
        }
        /**
         * @param PersonName $personName
         */
        public function setPersonName($personName)
        {
        }
    }
    class LabelSpacing extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var int Spacing between labels in the x direction in millimeters
         */
        protected $x;
        /**
         * @var int Spacing between labels in the y direction in millimeters
         */
        protected $y;
        /**
         * Size constructor.
         *
         * @param int $x Spacing between labels in the x direction in millimeters
         * @param int $y Spacing between labels in the y direction in millimeters
         */
        public function __construct($x, $y)
        {
        }
        /**
         * @return int Spacing between labels in the x direction in millimeters
         */
        public function getX()
        {
        }
        /**
         * @param int $x Spacing between labels in the x direction in millimeters
         */
        public function setX($x)
        {
        }
        /**
         * @return int Spacing between labels in the y direction in millimeters
         */
        public function getY()
        {
        }
        /**
         * @param int $y Spacing between labels in the y direction in millimeters
         */
        public function setY($y)
        {
        }
    }
    class PersonName extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var string
         */
        protected $salutation;
        /**
         * @var string
         */
        protected $title;
        /**
         * @var string
         */
        protected $firstname;
        /**
         * @var string
         */
        protected $lastname;
        /**
         * PersonName constructor.
         *
         * @param string $salutation
         * @param string $title
         * @param string $firstname
         * @param string $lastname
         */
        public function __construct($salutation, $title, $firstname, $lastname)
        {
        }
        /**
         * @return string
         */
        public function getSalutation()
        {
        }
        /**
         * @param string $salutation
         */
        public function setSalutation($salutation)
        {
        }
        /**
         * @return string
         */
        public function getTitle()
        {
        }
        /**
         * @param string $title
         */
        public function setTitle($title)
        {
        }
        /**
         * @return string
         */
        public function getFirstname()
        {
        }
        /**
         * @param string $firstname
         */
        public function setFirstname($firstname)
        {
        }
        /**
         * @return string
         */
        public function getLastname()
        {
        }
        /**
         * @param string $lastname
         */
        public function setLastname($lastname)
        {
        }
    }
    class User extends \baltpeter\Internetmarke\ApiResult
    {
        /**
         * @var string Unique user ID. Used for those web services that require user authentication. The userToken is only valid for one day.
         */
        protected $userToken;
        /**
         * @var int Balance of the postage account in eurocents
         */
        protected $walletBalance;
        /**
         * @var bool Has this user already agreed to the current GT&C and DP DHL data protection provisions?
         */
        protected $showTermsAndConditions;
        /**
         * @var string Optional information text
         */
        protected $info_message;
        /**
         * User constructor.
         *
         * @param string $user_token Unique user ID
         * @param int $wallet_balance Balance of the account
         * @param bool $show_terms_and_conditions Has this user agreed to the T&C?
         * @param string $info_message Optional information text
         */
        public function __construct($user_token, $wallet_balance, $show_terms_and_conditions, $info_message)
        {
        }
        /**
         * @return string Unique user ID
         */
        public function getUserToken()
        {
        }
        /**
         * @param string $userToken Unique user ID
         */
        public function setUserToken($userToken)
        {
        }
        /**
         * @return int Balance of the account
         */
        public function getWalletBalance()
        {
        }
        /**
         * @param int $walletBalance Balance of the account
         */
        public function setWalletBalance($walletBalance)
        {
        }
        /**
         * @return boolean Has this user agreed to the T&C?
         */
        public function isShowTermsAndConditions()
        {
        }
        /**
         * @param boolean $show_terms_and_conditions Has this user agreed to the T&C?
         */
        public function setShowTermsAndConditions($show_terms_and_conditions)
        {
        }
        /**
         * @return string Optional information text
         */
        public function getInfoMessage()
        {
        }
        /**
         * @param string $info_message Optional information text
         */
        public function setInfoMessage($info_message)
        {
        }
    }
}
namespace Automattic\Jetpack\Autoloader\jpa83bd0043569b733865ec55cbc4a4417 {
    // phpcs:ignore
    /**
     * This class handles management of the actual PHP autoloader.
     */
    class Autoloader
    {
        /**
         * Checks to see whether or not the autoloader should be initialized and then initializes it if so.
         *
         * @param Container|null $container The container we want to use for autoloader initialization. If none is given
         *                                  then a container will be created automatically.
         */
        public static function init($container = null)
        {
        }
    }
    // phpcs:ignore
    /**
     * This class ensures that we're only executing the latest autoloader.
     */
    class Latest_Autoloader_Guard
    {
        /**
         * The constructor.
         *
         * @param Plugins_Handler    $plugins_handler    The Plugins_Handler instance.
         * @param Autoloader_Handler $autoloader_handler The Autoloader_Handler instance.
         * @param Autoloader_Locator $autoloader_locator The Autoloader_Locator instance.
         */
        public function __construct($plugins_handler, $autoloader_handler, $autoloader_locator)
        {
        }
        /**
         * Indicates whether or not the autoloader should be initialized. Note that this function
         * has the side-effect of actually loading the latest autoloader in the event that this
         * is not it.
         *
         * @param string   $current_plugin             The current plugin we're checking.
         * @param string[] $plugins                    The active plugins to check for autoloaders in.
         * @param bool     $was_included_by_autoloader Indicates whether or not this autoloader was included by another.
         *
         * @return bool True if we should stop initialization, otherwise false.
         */
        public function should_stop_init($current_plugin, $plugins, $was_included_by_autoloader)
        {
        }
    }
    // phpcs:ignore
    /**
     * This class handles management of the actual PHP autoloader.
     */
    class PHP_Autoloader
    {
        /**
         * Registers the autoloader with PHP so that it can begin autoloading classes.
         *
         * @param Version_Loader $version_loader The class loader to use in the autoloader.
         */
        public function register_autoloader($version_loader)
        {
        }
        /**
         * Unregisters the active autoloader so that it will no longer autoload classes.
         */
        public function unregister_autoloader()
        {
        }
        /**
         * Loads a class file if one could be found.
         *
         * Note: This function is static so that the autoloader can be easily unregistered. If
         * it was a class method we would have to unwrap the object to check the namespace.
         *
         * @param string $class_name The name of the class to autoload.
         *
         * @return bool Indicates whether or not a class file was loaded.
         */
        public static function load_class($class_name)
        {
        }
    }
    // phpcs:ignore
    /**
     * This class handles locating and caching all of the active plugins.
     */
    class Plugins_Handler
    {
        /**
         * The transient key for plugin paths.
         */
        const TRANSIENT_KEY = 'jetpack_autoloader_plugin_paths';
        /**
         * The constructor.
         *
         * @param Plugin_Locator $plugin_locator The locator for finding active plugins.
         * @param Path_Processor $path_processor The processor for transforming cached paths.
         */
        public function __construct($plugin_locator, $path_processor)
        {
        }
        /**
         * Gets all of the active plugins we can find.
         *
         * @param bool $include_deactivating When true, plugins deactivating this request will be considered active.
         * @param bool $record_unknown When true, the current plugin will be marked as active and recorded when unknown.
         *
         * @return string[]
         */
        public function get_active_plugins($include_deactivating, $record_unknown)
        {
        }
        /**
         * Gets all of the cached plugins if there are any.
         *
         * @return string[]
         */
        public function get_cached_plugins()
        {
        }
        /**
         * Saves the plugin list to the cache.
         *
         * @param array $plugins The plugin list to save to the cache.
         */
        public function cache_plugins($plugins)
        {
        }
        /**
         * Checks to see whether or not the plugin list given has changed when compared to the
         * shared `$jetpack_autoloader_cached_plugin_paths` global. This allows us to deal
         * with cases where the active list may change due to filtering..
         *
         * @param string[] $plugins The plugins list to check against the global cache.
         *
         * @return bool True if the plugins have changed, otherwise false.
         */
        public function have_plugins_changed($plugins)
        {
        }
    }
    // phpcs:ignore
    /**
     * This class loads other classes based on given parameters.
     */
    class Version_Loader
    {
        /**
         * The constructor.
         *
         * @param Version_Selector $version_selector The Version_Selector object.
         * @param array            $classmap The verioned classmap to load using.
         * @param array            $psr4_map The versioned PSR-4 map to load using.
         * @param array            $filemap The versioned filemap to load.
         */
        public function __construct($version_selector, $classmap, $psr4_map, $filemap)
        {
        }
        /**
         * Finds the file path for the given class.
         *
         * @param string $class_name The class to find.
         *
         * @return string|null $file_path The path to the file if found, null if no class was found.
         */
        public function find_class_file($class_name)
        {
        }
        /**
         * Load all of the files in the filemap.
         */
        public function load_filemap()
        {
        }
    }
    // phpcs:ignore
    /**
     * This class handles dealing with paths for the autoloader.
     */
    class Path_Processor
    {
        /**
         * Given a path this will replace any of the path constants with a token to represent it.
         *
         * @param string $path The path we want to process.
         *
         * @return string The tokenized path.
         */
        public function tokenize_path_constants($path)
        {
        }
        /**
         * Given a path this will replace any of the path constant tokens with the expanded path.
         *
         * @param string $tokenized_path The path we want to process.
         *
         * @return string The expanded path.
         */
        public function untokenize_path_constants($tokenized_path)
        {
        }
        /**
         * Given a file and an array of places it might be, this will find the absolute path and return it.
         *
         * @param string $file The plugin or theme file to resolve.
         * @param array  $directories_to_check The directories we should check for the file if it isn't an absolute path.
         *
         * @return string|false Returns the absolute path to the directory, otherwise false.
         */
        public function find_directory_with_autoloader($file, $directories_to_check)
        {
        }
    }
    /**
     * This class locates autoloaders.
     */
    class Autoloader_Locator
    {
        /**
         * The constructor.
         *
         * @param Version_Selector $version_selector The version selector object.
         */
        public function __construct($version_selector)
        {
        }
        /**
         * Finds the path to the plugin with the latest autoloader.
         *
         * @param array  $plugin_paths An array of plugin paths.
         * @param string $latest_version The latest version reference.
         *
         * @return string|null
         */
        public function find_latest_autoloader($plugin_paths, &$latest_version)
        {
        }
        /**
         * Gets the path to the autoloader.
         *
         * @param string $plugin_path The path to the plugin.
         *
         * @return string
         */
        public function get_autoloader_path($plugin_path)
        {
        }
        /**
         * Gets the version for the autoloader.
         *
         * @param string $plugin_path The path to the plugin.
         *
         * @return string|null
         */
        public function get_autoloader_version($plugin_path)
        {
        }
    }
    // phpcs:ignore
    /**
     * Allows the latest autoloader to register hooks that can be removed when the autoloader is reset.
     */
    class Hook_Manager
    {
        /**
         * The constructor.
         */
        public function __construct()
        {
        }
        /**
         * Adds an action to WordPress and registers it internally.
         *
         * @param string   $tag           The name of the action which is hooked.
         * @param callable $callable      The function to call.
         * @param int      $priority      Used to specify the priority of the action.
         * @param int      $accepted_args Used to specify the number of arguments the callable accepts.
         */
        public function add_action($tag, $callable, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * Adds a filter to WordPress and registers it internally.
         *
         * @param string   $tag           The name of the filter which is hooked.
         * @param callable $callable      The function to call.
         * @param int      $priority      Used to specify the priority of the filter.
         * @param int      $accepted_args Used to specify the number of arguments the callable accepts.
         */
        public function add_filter($tag, $callable, $priority = 10, $accepted_args = 1)
        {
        }
        /**
         * Removes all of the registered hooks.
         */
        public function reset()
        {
        }
    }
    // phpcs:ignore
    /**
     * This class manages the files and dependencies of the autoloader.
     */
    class Container
    {
        /**
         * Since each autoloader's class files exist within their own namespace we need a map to
         * convert between the local class and a shared key. Note that no version checking is
         * performed on these dependencies and the first autoloader to register will be the
         * one that is utilized.
         */
        const SHARED_DEPENDENCY_KEYS = array(\Automattic\Jetpack\Autoloader\jpa83bd0043569b733865ec55cbc4a4417\Hook_Manager::class => 'Hook_Manager');
        /**
         * A map of all the dependencies we've registered with the container and created.
         *
         * @var array
         */
        protected $dependencies;
        /**
         * The constructor.
         */
        public function __construct()
        {
        }
        /**
         * Gets a dependency out of the container.
         *
         * @param string $class The class to fetch.
         *
         * @return mixed
         * @throws \InvalidArgumentException When a class that isn't registered with the container is fetched.
         */
        public function get($class)
        {
        }
    }
    // phpcs:ignore
    /**
     * This class handles the shutdown of the autoloader.
     */
    class Shutdown_Handler
    {
        /**
         * Constructor.
         *
         * @param Plugins_Handler $plugins_handler The Plugins_Handler instance to use.
         * @param string[]        $cached_plugins The plugins cached by the autoloaer.
         * @param bool            $was_included_by_autoloader Indicates whether or not the autoloader was included by another.
         */
        public function __construct($plugins_handler, $cached_plugins, $was_included_by_autoloader)
        {
        }
        /**
         * Handles the shutdown of the autoloader.
         */
        public function __invoke()
        {
        }
    }
    // phpcs:ignore
    /**
     * This class reads autoloader manifest files.
     */
    class Manifest_Reader
    {
        /**
         * The constructor.
         *
         * @param Version_Selector $version_selector The Version_Selector object.
         */
        public function __construct($version_selector)
        {
        }
        /**
         * Reads all of the manifests in the given plugin paths.
         *
         * @param array  $plugin_paths  The paths to the plugins we're loading the manifest in.
         * @param string $manifest_path The path that we're loading the manifest from in each plugin.
         * @param array  $path_map The path map to add the contents of the manifests to.
         *
         * @return array $path_map The path map we've built using the manifests in each plugin.
         */
        public function read_manifests($plugin_paths, $manifest_path, &$path_map)
        {
        }
        /**
         * Registers a plugin's manifest file with the path map.
         *
         * @param string $manifest_path The absolute path to the manifest that we're loading.
         * @param array  $path_map The path map to add the contents of the manifest to.
         */
        protected function register_manifest($manifest_path, &$path_map)
        {
        }
        /**
         * Registers an entry from the manifest in the path map.
         *
         * @param string $key The identifier for the entry we're registering.
         * @param array  $data The data for the entry we're registering.
         * @param array  $path_map The path map to add the contents of the manifest to.
         */
        protected function register_record($key, $data, &$path_map)
        {
        }
    }
    /**
     * This class selects the package version for the autoloader.
     */
    class Autoloader_Handler
    {
        /**
         * The constructor.
         *
         * @param PHP_Autoloader   $php_autoloader The PHP_Autoloader instance.
         * @param Hook_Manager     $hook_manager The Hook_Manager instance.
         * @param Manifest_Reader  $manifest_reader The Manifest_Reader instance.
         * @param Version_Selector $version_selector The Version_Selector instance.
         */
        public function __construct($php_autoloader, $hook_manager, $manifest_reader, $version_selector)
        {
        }
        /**
         * Checks to see whether or not an autoloader is currently in the process of initializing.
         *
         * @return bool
         */
        public function is_initializing()
        {
        }
        /**
         * Activates an autoloader using the given plugins and activates it.
         *
         * @param string[] $plugins The plugins to initialize the autoloader for.
         */
        public function activate_autoloader($plugins)
        {
        }
        /**
         * Resets the active autoloader and all related global state.
         */
        public function reset_autoloader()
        {
        }
    }
    // phpcs:ignore
    /**
     * Used to select package versions.
     */
    class Version_Selector
    {
        /**
         * Checks whether the selected package version should be updated. Composer development
         * package versions ('9999999-dev' or versions that start with 'dev-') are favored
         * when the JETPACK_AUTOLOAD_DEV constant is set to true.
         *
         * @param String $selected_version The currently selected package version.
         * @param String $compare_version The package version that is being evaluated to
         *                                determine if the version needs to be updated.
         *
         * @return bool Returns true if the selected package version should be updated,
         *                 else false.
         */
        public function is_version_update_required($selected_version, $compare_version)
        {
        }
        /**
         * Checks whether the given package version is a development version.
         *
         * @param String $version The package version.
         *
         * @return bool True if the version is a dev version, else false.
         */
        public function is_dev_version($version)
        {
        }
    }
    // phpcs:ignore
    /**
     * This class scans the WordPress installation to find active plugins.
     */
    class Plugin_Locator
    {
        /**
         * The constructor.
         *
         * @param Path_Processor $path_processor The Path_Processor instance.
         */
        public function __construct($path_processor)
        {
        }
        /**
         * Finds the path to the current plugin.
         *
         * @return string $path The path to the current plugin.
         *
         * @throws \RuntimeException If the current plugin does not have an autoloader.
         */
        public function find_current_plugin()
        {
        }
        /**
         * Checks a given option for plugin paths.
         *
         * @param string $option_name  The option that we want to check for plugin information.
         * @param bool   $site_option  Indicates whether or not we want to check the site option.
         *
         * @return array $plugin_paths The list of absolute paths we've found.
         */
        public function find_using_option($option_name, $site_option = false)
        {
        }
        /**
         * Checks for plugins in the `action` request parameter.
         *
         * @param string[] $allowed_actions The actions that we're allowed to return plugins for.
         *
         * @return array $plugin_paths The list of absolute paths we've found.
         */
        public function find_using_request_action($allowed_actions)
        {
        }
    }
}
namespace {
    /**
     * Defines application features from the specific context.
     */
    class PackerContext implements \Behat\Behat\Context\Context
    {
        /**
         * @var Box
         */
        protected $box;
        /**
         * @var BoxList
         */
        protected $boxList;
        /**
         * @var ItemList
         */
        protected $itemList;
        /**
         * @var PackedBox
         */
        protected $packedBox;
        /**
         * @var PackedBoxList
         */
        protected $packedBoxList;
        /**
         * @var string
         */
        protected $packerClass = \DVDoug\BoxPacker\Packer::class;
        /**
         * Initializes context.
         *
         * Every scenario gets its own context instance.
         * You can also pass arbitrary arguments to the
         * context constructor through behat.yml.
         */
        public function __construct()
        {
        }
        /**
         * @Given /^there is a box "([^"]+)", which has external dimensions (\d+)mm w × (\d+)mm l × (\d+)mm d × (\d+)g and internal dimensions (\d+)mm w × (\d+)mm l × (\d+)mm d and has a max weight of (\d+)g$/
         */
        public function thereIsABox($boxType, $outerWidth, $outerLength, $outerDepth, $emptyWeight, $innerWidth, $innerLength, $innerDepth, $maxWeight) : void
        {
        }
        /**
         * @Given /^the box "([^"]+)", which has external dimensions (\d+)mm w × (\d+)mm l × (\d+)mm d × (\d+)g and internal dimensions (\d+)mm w × (\d+)mm l × (\d+)mm d and has a max weight of (\d+)g$/
         */
        public function theBox($boxType, $outerWidth, $outerLength, $outerDepth, $emptyWeight, $innerWidth, $innerLength, $innerDepth, $maxWeight) : void
        {
        }
        /**
         * @When /^I add (\d+) x "([^"]+)" with dimensions (\d+)mm w × (\d+)mm l × (\d+)mm d × (\d+)g$/
         */
        public function thereIsAnItem($qty, $itemName, $width, $length, $depth, $weight) : void
        {
        }
        /**
         * @When /^I add (\d+) x keep flat "([^"]+)" with dimensions (\d+)mm w × (\d+)mm l × (\d+)mm d × (\d+)g$/
         */
        public function thereIsAKeepFlatItem($qty, $itemName, $width, $length, $depth, $weight) : void
        {
        }
        /**
         * @When I do a packing
         */
        public function iDoAPacking() : void
        {
        }
        /**
         * @When I do a volume-only packing
         */
        public function iDoAVolumePacking() : void
        {
        }
        /**
         * @Then /^I should have (\d+) boxes of type "([^"]+)"$/
         */
        public function thereExistsBoxes($qty, $boxType) : void
        {
        }
        /**
         * @Then /^the packed box should have (\d+) items of type "([^"]+)"$/
         */
        public function thePackedBoxShouldHaveItems($qty, $itemType) : void
        {
        }
        /**
         * @Transform /^(\d+)$/
         */
        public function castStringToNumber($string)
        {
        }
    }
    /**
     * Defines application features from the specific context.
     */
    class InfalliblePackerContext extends \PackerContext
    {
        /**
         * @var string
         */
        protected $packerClass = \DVDoug\BoxPacker\InfalliblePacker::class;
        /**
         * @var ItemList
         */
        protected $unpackedItemList;
        /**
         * @When I do an infallible packing
         */
        public function iDoAnInfalliblePacking() : void
        {
        }
        /**
         * @Then /^the unpacked item list should have (\d+) items of type "([^"]+)"$/
         */
        public function theUnpackedItemListShouldHaveItems($qty, $itemType) : void
        {
        }
    }
}
namespace DVDoug\BoxPacker {
    /**
     * List of packed boxes.
     *
     * @author Doug Wright
     */
    class PackedBoxList implements \IteratorAggregate, \Countable, \JsonSerializable
    {
        /**
         * @return Traversable|PackedBox[]
         */
        public function getIterator() : \Traversable
        {
        }
        /**
         * Number of items in list.
         */
        public function count() : int
        {
        }
        public function insert(\DVDoug\BoxPacker\PackedBox $item) : void
        {
        }
        /**
         * Do a bulk insert.
         *
         * @internal
         *
         * @param PackedBox[] $boxes
         */
        public function insertFromArray(array $boxes) : void
        {
        }
        /**
         * @internal
         */
        public function top() : \DVDoug\BoxPacker\PackedBox
        {
        }
        /**
         * Calculate the average (mean) weight of the boxes.
         */
        public function getMeanWeight() : float
        {
        }
        /**
         * Calculate the average (mean) weight of the boxes.
         */
        public function getMeanItemWeight() : float
        {
        }
        /**
         * Calculate the variance in weight between these boxes.
         */
        public function getWeightVariance() : float
        {
        }
        /**
         * Get volume utilisation of the set of packed boxes.
         */
        public function getVolumeUtilisation() : float
        {
        }
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
    }
    /**
     * An item to be packed.
     *
     * @author Doug Wright
     */
    class OrientatedItem implements \JsonSerializable
    {
        /**
         * @var Item
         */
        protected $item;
        /**
         * @var int
         */
        protected $width;
        /**
         * @var int
         */
        protected $length;
        /**
         * @var int
         */
        protected $depth;
        /**
         * @var int
         */
        protected $surfaceFootprint;
        /**
         * @var bool[]
         */
        protected static $stabilityCache = [];
        /**
         * @var array
         */
        protected $dimensionsAsArray;
        /**
         * Constructor.
         */
        public function __construct(\DVDoug\BoxPacker\Item $item, int $width, int $length, int $depth)
        {
        }
        /**
         * Item.
         */
        public function getItem() : \DVDoug\BoxPacker\Item
        {
        }
        /**
         * Item width in mm in it's packed orientation.
         */
        public function getWidth() : int
        {
        }
        /**
         * Item length in mm in it's packed orientation.
         */
        public function getLength() : int
        {
        }
        /**
         * Item depth in mm in it's packed orientation.
         */
        public function getDepth() : int
        {
        }
        /**
         * Calculate the surface footprint of the current orientation.
         */
        public function getSurfaceFootprint() : int
        {
        }
        /**
         * Is this item stable (low centre of gravity), calculated as if the tipping point is >15 degrees.
         *
         * N.B. Assumes equal weight distribution.
         */
        public function isStable() : bool
        {
        }
        /**
         * Is the supplied item the same size as this one?
         *
         * @internal
         */
        public function isSameDimensions(\DVDoug\BoxPacker\Item $item) : bool
        {
        }
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
        public function __toString() : string
        {
        }
    }
    /**
     * Class NoBoxesAvailableException
     * Exception used when an item cannot be packed into any box.
     */
    class NoBoxesAvailableException extends \RuntimeException
    {
        /**
         * @var Item
         */
        public $item;
        /**
         * NoBoxesAvailableException constructor.
         */
        public function __construct(string $message, \DVDoug\BoxPacker\Item $item)
        {
        }
        public function getItem() : \DVDoug\BoxPacker\Item
        {
        }
    }
    /**
     * Class ItemTooLargeException
     * Exception used when an item is too large to pack into any box.
     * @deprecated now unused, just catch NoBoxesAvailableException
     */
    class ItemTooLargeException extends \DVDoug\BoxPacker\NoBoxesAvailableException
    {
    }
}
namespace Psr\Log {
    /**
     * Describes a logger-aware instance.
     */
    interface LoggerAwareInterface
    {
        /**
         * Sets a logger instance on the object.
         *
         * @param LoggerInterface $logger
         *
         * @return void
         */
        public function setLogger(\Psr\Log\LoggerInterface $logger);
    }
    /**
     * Basic Implementation of LoggerAwareInterface.
     */
    trait LoggerAwareTrait
    {
        /**
         * The logger instance.
         *
         * @var LoggerInterface|null
         */
        protected $logger;
        /**
         * Sets a logger.
         *
         * @param LoggerInterface $logger
         */
        public function setLogger(\Psr\Log\LoggerInterface $logger)
        {
        }
    }
}
namespace DVDoug\BoxPacker {
    /**
     * Actual packer.
     *
     * @author Doug Wright
     * @internal
     */
    class WeightRedistributor implements \Psr\Log\LoggerAwareInterface
    {
        use \Psr\Log\LoggerAwareTrait;
        /**
         * Constructor.
         */
        public function __construct(\DVDoug\BoxPacker\BoxList $boxList, \DVDoug\BoxPacker\PackedBoxSorter $packedBoxSorter, \SplObjectStorage $boxQuantitiesAvailable)
        {
        }
        /**
         * Given a solution set of packed boxes, repack them to achieve optimum weight distribution.
         */
        public function redistributeWeight(\DVDoug\BoxPacker\PackedBoxList $originalBoxes) : \DVDoug\BoxPacker\PackedBoxList
        {
        }
    }
    /**
     * A callback to be used with usort(), implementing logic to determine which Box is "better".
     */
    interface BoxSorter
    {
        /**
         * Return -1 if $boxA is "best", 1 if $boxB is "best" or 0 if neither is "best".
         */
        public function compare(\DVDoug\BoxPacker\Box $boxA, \DVDoug\BoxPacker\Box $boxB) : int;
    }
    class DefaultBoxSorter implements \DVDoug\BoxPacker\BoxSorter
    {
        public function compare(\DVDoug\BoxPacker\Box $boxA, \DVDoug\BoxPacker\Box $boxB) : int
        {
        }
    }
    /**
     * A "box" (or envelope?) to pack items into.
     *
     * @author Doug Wright
     */
    interface Box
    {
        /**
         * Reference for box type (e.g. SKU or description).
         */
        public function getReference() : string;
        /**
         * Outer width in mm.
         */
        public function getOuterWidth() : int;
        /**
         * Outer length in mm.
         */
        public function getOuterLength() : int;
        /**
         * Outer depth in mm.
         */
        public function getOuterDepth() : int;
        /**
         * Empty weight in g.
         */
        public function getEmptyWeight() : int;
        /**
         * Inner width in mm.
         */
        public function getInnerWidth() : int;
        /**
         * Inner length in mm.
         */
        public function getInnerLength() : int;
        /**
         * Inner depth in mm.
         */
        public function getInnerDepth() : int;
        /**
         * Max weight the packaging can hold in g.
         */
        public function getMaxWeight() : int;
    }
    /**
     * A callback to be used with usort(), implementing logic to determine which PackedBox is "better".
     */
    interface PackedBoxSorter
    {
        /**
         * Return -1 if $boxA is "best", 1 if $boxB is "best" or 0 if neither is "best".
         */
        public function compare(\DVDoug\BoxPacker\PackedBox $boxA, \DVDoug\BoxPacker\PackedBox $boxB) : int;
    }
    /**
     * List of boxes available to put items into, ordered by volume.
     *
     * @author Doug Wright
     */
    class BoxList implements \IteratorAggregate
    {
        public function __construct(?\DVDoug\BoxPacker\BoxSorter $sorter = null)
        {
        }
        /**
         * Do a bulk create.
         *
         * @param Box[] $boxes
         */
        public static function fromArray(array $boxes, bool $preSorted = false) : self
        {
        }
        /**
         * @return Traversable|Box[]
         */
        public function getIterator() : \Traversable
        {
        }
        public function insert(\DVDoug\BoxPacker\Box $item) : void
        {
        }
    }
    /**
     * A callback to be used with usort(), implementing logic to determine which Item is a higher priority for packing.
     */
    interface ItemSorter
    {
        /**
         * Return -1 if $itemA is preferred, 1 if $itemB is preferred or 0 if neither is preferred.
         */
        public function compare(\DVDoug\BoxPacker\Item $itemA, \DVDoug\BoxPacker\Item $itemB) : int;
    }
    /**
     * An item to be packed.
     *
     * @author Doug Wright
     */
    interface Item
    {
        /**
         * Item SKU etc.
         */
        public function getDescription() : string;
        /**
         * Item width in mm.
         */
        public function getWidth() : int;
        /**
         * Item length in mm.
         */
        public function getLength() : int;
        /**
         * Item depth in mm.
         */
        public function getDepth() : int;
        /**
         * Item weight in g.
         */
        public function getWeight() : int;
        /**
         * Does this item need to be kept flat / packed "this way up"?
         */
        public function getKeepFlat() : bool;
    }
    /**
     * An item to be packed where additional constraints need to be considered. Only implement this interface if you actually
     * need this additional functionality as it will slow down the packing algorithm.
     *
     * @author Doug Wright
     */
    interface ConstrainedPlacementItem extends \DVDoug\BoxPacker\Item
    {
        /**
         * Hook for user implementation of item-specific constraints, e.g. max <x> batteries per box.
         */
        public function canBePacked(\DVDoug\BoxPacker\Box $box, \DVDoug\BoxPacker\PackedItemList $alreadyPackedItems, int $proposedX, int $proposedY, int $proposedZ, int $width, int $length, int $depth) : bool;
    }
    /**
     * Actual packer.
     *
     * @author Doug Wright
     */
    class VolumePacker implements \Psr\Log\LoggerAwareInterface
    {
        /**
         * The logger instance.
         *
         * @var LoggerInterface
         */
        protected $logger;
        /**
         * Box to pack items into.
         *
         * @var Box
         */
        protected $box;
        /**
         * List of items to be packed.
         *
         * @var ItemList
         */
        protected $items;
        /**
         * Whether the packer is in single-pass mode.
         *
         * @var bool
         */
        protected $singlePassMode = false;
        /**
         * Whether the packer should only try packing along the width.
         *
         * @var bool
         */
        protected $packAcrossWidthOnly = false;
        /**
         * @var bool
         */
        protected $beStrictAboutItemOrdering = false;
        /**
         * Constructor.
         */
        public function __construct(\DVDoug\BoxPacker\Box $box, \DVDoug\BoxPacker\ItemList $items)
        {
        }
        /**
         * Sets a logger.
         */
        public function setLogger(\Psr\Log\LoggerInterface $logger) : void
        {
        }
        public function packAcrossWidthOnly() : void
        {
        }
        public function beStrictAboutItemOrdering(bool $beStrict) : void
        {
        }
        /**
         * @internal
         */
        public function setSinglePassMode(bool $singlePassMode) : void
        {
        }
        /**
         * Pack as many items as possible into specific given box.
         *
         * @return PackedBox packed box
         */
        public function pack() : \DVDoug\BoxPacker\PackedBox
        {
        }
    }
    /**
     * A "box" with items.
     *
     * @author Doug Wright
     */
    class PackedBox implements \JsonSerializable
    {
        /**
         * Box used.
         *
         * @var Box
         */
        protected $box;
        /**
         * Items in the box.
         *
         * @var PackedItemList
         */
        protected $items;
        /**
         * Total weight of items in the box.
         *
         * @var int
         */
        protected $itemWeight;
        /**
         * Volume used for items as % of box.
         *
         * @var float
         */
        protected $volumeUtilisation;
        /**
         * Get box used.
         */
        public function getBox() : \DVDoug\BoxPacker\Box
        {
        }
        /**
         * Get items packed.
         */
        public function getItems() : \DVDoug\BoxPacker\PackedItemList
        {
        }
        /**
         * Get packed weight.
         *
         * @return int weight in grams
         */
        public function getWeight() : int
        {
        }
        /**
         * Get packed weight of the items only.
         *
         * @return int weight in grams
         */
        public function getItemWeight() : int
        {
        }
        /**
         * Get remaining width inside box for another item.
         */
        public function getRemainingWidth() : int
        {
        }
        /**
         * Get remaining length inside box for another item.
         */
        public function getRemainingLength() : int
        {
        }
        /**
         * Get remaining depth inside box for another item.
         */
        public function getRemainingDepth() : int
        {
        }
        /**
         * Used width inside box for packing items.
         */
        public function getUsedWidth() : int
        {
        }
        /**
         * Used length inside box for packing items.
         */
        public function getUsedLength() : int
        {
        }
        /**
         * Used depth inside box for packing items.
         */
        public function getUsedDepth() : int
        {
        }
        /**
         * Get remaining weight inside box for another item.
         */
        public function getRemainingWeight() : int
        {
        }
        public function getInnerVolume() : int
        {
        }
        /**
         * Get used volume of the packed box.
         */
        public function getUsedVolume() : int
        {
        }
        /**
         * Get unused volume of the packed box.
         */
        public function getUnusedVolume() : int
        {
        }
        /**
         * Get volume utilisation of the packed box.
         */
        public function getVolumeUtilisation() : float
        {
        }
        /**
         * Constructor.
         */
        public function __construct(\DVDoug\BoxPacker\Box $box, \DVDoug\BoxPacker\PackedItemList $packedItemList)
        {
        }
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
    }
    /**
     * Figure out best choice of orientations for an item and a given context.
     *
     * @author Doug Wright
     * @internal
     */
    class OrientatedItemSorter implements \Psr\Log\LoggerAwareInterface
    {
        use \Psr\Log\LoggerAwareTrait;
        /**
         * @var int[]
         */
        protected static $lookaheadCache = [];
        public function __construct(\DVDoug\BoxPacker\OrientatedItemFactory $factory, bool $singlePassMode, int $widthLeft, int $lengthLeft, int $depthLeft, \DVDoug\BoxPacker\ItemList $nextItems, int $rowLength, int $x, int $y, int $z, \DVDoug\BoxPacker\PackedItemList $prevPackedItemList)
        {
        }
        public function __invoke(\DVDoug\BoxPacker\OrientatedItem $a, \DVDoug\BoxPacker\OrientatedItem $b)
        {
        }
        /**
         * Approximation of a forward-looking packing.
         *
         * Not an actual packing, that has additional logic regarding constraints and stackability, this focuses
         * purely on fit.
         */
        protected function calculateAdditionalItemsPackedWithThisOrientation(\DVDoug\BoxPacker\OrientatedItem $prevItem) : int
        {
        }
    }
    /**
     * Applies load stability to generated result.
     *
     * @author Doug Wright
     * @internal
     */
    class LayerStabiliser
    {
        /**
         * @param PackedLayer[] $packedLayers
         *
         * @return PackedLayer[]
         */
        public function stabilise(array $packedLayers) : array
        {
        }
    }
    /**
     * List of items to be packed, ordered by volume.
     *
     * @author Doug Wright
     */
    class ItemList implements \Countable, \IteratorAggregate
    {
        public function __construct(?\DVDoug\BoxPacker\ItemSorter $sorter = null)
        {
        }
        /**
         * Do a bulk create.
         *
         * @param Item[] $items
         */
        public static function fromArray(array $items, bool $preSorted = false) : self
        {
        }
        public function insert(\DVDoug\BoxPacker\Item $item, int $qty = 1) : void
        {
        }
        /**
         * Remove item from list.
         */
        public function remove(\DVDoug\BoxPacker\Item $item) : void
        {
        }
        public function removePackedItems(\DVDoug\BoxPacker\PackedItemList $packedItemList) : void
        {
        }
        /**
         * @internal
         */
        public function extract() : \DVDoug\BoxPacker\Item
        {
        }
        /**
         * @internal
         */
        public function top() : \DVDoug\BoxPacker\Item
        {
        }
        /**
         * @internal
         */
        public function topN(int $n) : self
        {
        }
        /**
         * @return Traversable|Item[]
         */
        public function getIterator() : \Traversable
        {
        }
        /**
         * Number of items in list.
         */
        public function count() : int
        {
        }
        /**
         * Does this list contain items with constrained placement criteria.
         */
        public function hasConstrainedItems() : bool
        {
        }
    }
    /**
     * A packed item.
     *
     * @author Doug Wright
     */
    class PackedItem implements \JsonSerializable
    {
        /**
         * @var int
         */
        protected $x;
        /**
         * @var int
         */
        protected $y;
        /**
         * @var int
         */
        protected $z;
        /**
         * @var Item
         */
        protected $item;
        /**
         * @var int
         */
        protected $width;
        /**
         * @var int
         */
        protected $length;
        /**
         * @var int
         */
        protected $depth;
        /**
         * PackedItem constructor.
         */
        public function __construct(\DVDoug\BoxPacker\Item $item, int $x, int $y, int $z, int $width, int $length, int $depth)
        {
        }
        public function getX() : int
        {
        }
        public function getY() : int
        {
        }
        public function getZ() : int
        {
        }
        public function getItem() : \DVDoug\BoxPacker\Item
        {
        }
        public function getWidth() : int
        {
        }
        public function getLength() : int
        {
        }
        public function getDepth() : int
        {
        }
        public function getVolume() : int
        {
        }
        public static function fromOrientatedItem(\DVDoug\BoxPacker\OrientatedItem $orientatedItem, int $x, int $y, int $z) : self
        {
        }
        /**
         * @deprecated
         */
        public function toOrientatedItem() : \DVDoug\BoxPacker\OrientatedItem
        {
        }
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
    }
    /**
     * Figure out orientations for an item and a given set of dimensions.
     *
     * @author Doug Wright
     * @internal
     */
    class OrientatedItemFactory implements \Psr\Log\LoggerAwareInterface
    {
        use \Psr\Log\LoggerAwareTrait;
        /**
         * @var Box
         */
        protected $box;
        /**
         * Whether the packer is in single-pass mode.
         *
         * @var bool
         */
        protected $singlePassMode = false;
        /**
         * @var bool[]
         */
        protected static $emptyBoxStableItemOrientationCache = [];
        public function __construct(\DVDoug\BoxPacker\Box $box)
        {
        }
        public function setSinglePassMode(bool $singlePassMode) : void
        {
        }
        /**
         * Get the best orientation for an item.
         */
        public function getBestOrientation(\DVDoug\BoxPacker\Item $item, ?\DVDoug\BoxPacker\OrientatedItem $prevItem, \DVDoug\BoxPacker\ItemList $nextItems, int $widthLeft, int $lengthLeft, int $depthLeft, int $rowLength, int $x, int $y, int $z, \DVDoug\BoxPacker\PackedItemList $prevPackedItemList, bool $considerStability) : ?\DVDoug\BoxPacker\OrientatedItem
        {
        }
        /**
         * Find all possible orientations for an item.
         *
         * @return OrientatedItem[]
         */
        public function getPossibleOrientations(\DVDoug\BoxPacker\Item $item, ?\DVDoug\BoxPacker\OrientatedItem $prevItem, int $widthLeft, int $lengthLeft, int $depthLeft, int $x, int $y, int $z, \DVDoug\BoxPacker\PackedItemList $prevPackedItemList) : array
        {
        }
        /**
         * @param  OrientatedItem[] $possibleOrientations
         * @return OrientatedItem[]
         */
        protected function getUsableOrientations(\DVDoug\BoxPacker\Item $item, array $possibleOrientations) : array
        {
        }
        /**
         * Return the orientations for this item if it were to be placed into the box with nothing else.
         */
        protected function hasStableOrientationsInEmptyBox(\DVDoug\BoxPacker\Item $item) : bool
        {
        }
    }
    /**
     * Class WorkingVolume.
     * @internal
     */
    class WorkingVolume implements \DVDoug\BoxPacker\Box, \JsonSerializable
    {
        /**
         * Constructor.
         */
        public function __construct(int $width, int $length, int $depth, int $maxWeight)
        {
        }
        public function getReference() : string
        {
        }
        public function getOuterWidth() : int
        {
        }
        public function getOuterLength() : int
        {
        }
        public function getOuterDepth() : int
        {
        }
        public function getEmptyWeight() : int
        {
        }
        public function getInnerWidth() : int
        {
        }
        public function getInnerLength() : int
        {
        }
        public function getInnerDepth() : int
        {
        }
        public function getMaxWeight() : int
        {
        }
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
    }
    /**
     * Actual packer.
     *
     * @author Doug Wright
     */
    class Packer implements \Psr\Log\LoggerAwareInterface
    {
        use \Psr\Log\LoggerAwareTrait;
        /**
         * Number of boxes at which balancing weight is deemed not worth it.
         *
         * @var int
         */
        protected $maxBoxesToBalanceWeight = 12;
        /**
         * List of items to be packed.
         *
         * @var ItemList
         */
        protected $items;
        /**
         * List of box sizes available to pack items into.
         *
         * @var BoxList
         */
        protected $boxes;
        /**
         * Quantities available of each box type.
         *
         * @var SplObjectStorage
         */
        protected $boxesQtyAvailable;
        /**
         * @var PackedBoxSorter
         */
        protected $packedBoxSorter;
        public function __construct()
        {
        }
        /**
         * Add item to be packed.
         */
        public function addItem(\DVDoug\BoxPacker\Item $item, int $qty = 1) : void
        {
        }
        /**
         * Set a list of items all at once.
         * @param iterable|Item[] $items
         */
        public function setItems(iterable $items) : void
        {
        }
        /**
         * Add box size.
         */
        public function addBox(\DVDoug\BoxPacker\Box $box) : void
        {
        }
        /**
         * Add a pre-prepared set of boxes all at once.
         */
        public function setBoxes(\DVDoug\BoxPacker\BoxList $boxList) : void
        {
        }
        /**
         * Set the quantity of this box type available.
         */
        public function setBoxQuantity(\DVDoug\BoxPacker\Box $box, int $qty) : void
        {
        }
        /**
         * Number of boxes at which balancing weight is deemed not worth the extra computation time.
         */
        public function getMaxBoxesToBalanceWeight() : int
        {
        }
        /**
         * Number of boxes at which balancing weight is deemed not worth the extra computation time.
         */
        public function setMaxBoxesToBalanceWeight(int $maxBoxesToBalanceWeight) : void
        {
        }
        public function setPackedBoxSorter(\DVDoug\BoxPacker\PackedBoxSorter $packedBoxSorter) : void
        {
        }
        public function beStrictAboutItemOrdering(bool $beStrict) : void
        {
        }
        /**
         * Pack items into boxes.
         */
        public function pack() : \DVDoug\BoxPacker\PackedBoxList
        {
        }
        /**
         * Pack items into boxes using the principle of largest volume item first.
         *
         * @throws NoBoxesAvailableException
         */
        public function doVolumePacking(bool $singlePassMode = false, bool $enforceSingleBox = false) : \DVDoug\BoxPacker\PackedBoxList
        {
        }
        /**
         * Get a "smart" ordering of the boxes to try packing items into. The initial BoxList is already sorted in order
         * so that the smallest boxes are evaluated first, but this means that time is spent on boxes that cannot possibly
         * hold the entire set of items due to volume limitations. These should be evaluated first.
         */
        protected function getBoxList(bool $enforceSingleBox = false) : iterable
        {
        }
        /**
         * @param PackedBox[] $packedBoxes
         */
        protected function findBestBoxFromIteration(array $packedBoxes) : \DVDoug\BoxPacker\PackedBox
        {
        }
    }
    /**
     * A packed layer.
     *
     * @author Doug Wright
     * @internal
     */
    class PackedLayer
    {
        /**
         * Items packed into this layer.
         *
         * @var PackedItem[]
         */
        protected $items = [];
        /**
         * Add a packed item to this layer.
         */
        public function insert(\DVDoug\BoxPacker\PackedItem $packedItem) : void
        {
        }
        /**
         * Get the packed items.
         *
         * @return PackedItem[]
         */
        public function getItems() : array
        {
        }
        /**
         * Calculate footprint area of this layer.
         *
         * @return int mm^2
         */
        public function getFootprint() : int
        {
        }
        public function getStartX() : int
        {
        }
        public function getEndX() : int
        {
        }
        public function getWidth() : int
        {
        }
        public function getStartY() : int
        {
        }
        public function getEndY() : int
        {
        }
        public function getLength() : int
        {
        }
        public function getStartZ() : int
        {
        }
        public function getEndZ() : int
        {
        }
        public function getDepth() : int
        {
        }
        public function getWeight() : int
        {
        }
        public function merge(self $otherLayer) : void
        {
        }
    }
    /**
     * A version of the packer that swallows internal exceptions.
     *
     * @author Doug Wright
     */
    class InfalliblePacker extends \DVDoug\BoxPacker\Packer
    {
        /**
         * @var ItemList
         */
        protected $unpackedItems;
        /**
         * InfalliblePacker constructor.
         */
        public function __construct()
        {
        }
        /**
         * Return the items that couldn't be packed.
         */
        public function getUnpackedItems() : \DVDoug\BoxPacker\ItemList
        {
        }
        /**
         * {@inheritdoc}
         */
        public function pack() : \DVDoug\BoxPacker\PackedBoxList
        {
        }
    }
    /**
     * A "box" (or envelope?) to pack items into with limited supply.
     *
     * @author Doug Wright
     */
    interface LimitedSupplyBox extends \DVDoug\BoxPacker\Box
    {
        /**
         * Quantity of boxes available.
         */
        public function getQuantityAvailable() : int;
    }
    /**
     * List of packed items, ordered by volume.
     *
     * @author Doug Wright
     */
    class PackedItemList implements \Countable, \IteratorAggregate
    {
        public function insert(\DVDoug\BoxPacker\PackedItem $item) : void
        {
        }
        /**
         * @return Traversable|PackedItem[]
         */
        public function getIterator() : \Traversable
        {
        }
        /**
         * Number of items in list.
         */
        public function count() : int
        {
        }
        /**
         * Get copy of this list as a standard PHP array.
         *
         * @internal
         *
         * @return Item[]
         */
        public function asItemArray() : array
        {
        }
        /**
         * Get total volume of these items.
         */
        public function getVolume() : int
        {
        }
        /**
         * Get total weight of these items.
         */
        public function getWeight() : int
        {
        }
    }
    /**
     * An item to be packed where additional constraints need to be considered. Only implement this interface if you actually
     * need this additional functionality as it will slow down the packing algorithm.
     *
     * @deprecated use ConstrainedPlacementItem instead which has additional flexibility
     * @author Doug Wright
     */
    interface ConstrainedItem extends \DVDoug\BoxPacker\Item
    {
        /**
         * Hook for user implementation of item-specific constraints, e.g. max <x> batteries per box.
         */
        public function canBePackedInBox(\DVDoug\BoxPacker\PackedItemList $alreadyPackedItems, \DVDoug\BoxPacker\Box $box) : bool;
    }
    class DefaultItemSorter implements \DVDoug\BoxPacker\ItemSorter
    {
        public function compare(\DVDoug\BoxPacker\Item $itemA, \DVDoug\BoxPacker\Item $itemB) : int
        {
        }
    }
    class DefaultPackedBoxSorter implements \DVDoug\BoxPacker\PackedBoxSorter
    {
        public function compare(\DVDoug\BoxPacker\PackedBox $boxA, \DVDoug\BoxPacker\PackedBox $boxB) : int
        {
        }
    }
    /**
     * Layer packer.
     *
     * @internal
     * @author Doug Wright
     */
    class LayerPacker implements \Psr\Log\LoggerAwareInterface
    {
        /**
         * Constructor.
         */
        public function __construct(\DVDoug\BoxPacker\Box $box)
        {
        }
        /**
         * Sets a logger.
         */
        public function setLogger(\Psr\Log\LoggerInterface $logger) : void
        {
        }
        public function setSinglePassMode(bool $singlePassMode) : void
        {
        }
        public function beStrictAboutItemOrdering(bool $beStrict) : void
        {
        }
        /**
         * Pack items into an individual vertical layer.
         */
        public function packLayer(\DVDoug\BoxPacker\ItemList &$items, \DVDoug\BoxPacker\PackedItemList $packedItemList, int $startX, int $startY, int $startZ, int $widthForLayer, int $lengthForLayer, int $depthForLayer, int $guidelineLayerDepth, bool $considerStability) : \DVDoug\BoxPacker\PackedLayer
        {
        }
    }
}
namespace Defuse\Crypto\Exception {
    class CryptoException extends \Exception
    {
    }
    class EnvironmentIsBrokenException extends \Defuse\Crypto\Exception\CryptoException
    {
    }
    class WrongKeyOrModifiedCiphertextException extends \Defuse\Crypto\Exception\CryptoException
    {
    }
    class BadFormatException extends \Defuse\Crypto\Exception\CryptoException
    {
    }
    class IOException extends \Defuse\Crypto\Exception\CryptoException
    {
    }
}
namespace Defuse\Crypto {
    /**
     * Class DerivedKeys
     * @package Defuse\Crypto
     */
    final class DerivedKeys
    {
        /**
         * Returns the authentication key.
         * @return string
         */
        public function getAuthenticationKey()
        {
        }
        /**
         * Returns the encryption key.
         * @return string
         */
        public function getEncryptionKey()
        {
        }
        /**
         * Constructor for DerivedKeys.
         *
         * @param string $akey
         * @param string $ekey
         */
        public function __construct($akey, $ekey)
        {
        }
    }
    final class Key
    {
        const KEY_CURRENT_VERSION = "\xde\xf0\x00\x00";
        const KEY_BYTE_SIZE = 32;
        /**
         * Creates new random key.
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return Key
         */
        public static function createNewRandomKey()
        {
        }
        /**
         * Loads a Key from its encoded form.
         *
         * By default, this function will call Encoding::trimTrailingWhitespace()
         * to remove trailing CR, LF, NUL, TAB, and SPACE characters, which are
         * commonly appended to files when working with text editors.
         *
         * @param string $saved_key_string
         * @param bool $do_not_trim (default: false)
         *
         * @throws Ex\BadFormatException
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return Key
         */
        public static function loadFromAsciiSafeString(#[\SensitiveParameter] $saved_key_string, $do_not_trim = false)
        {
        }
        /**
         * Encodes the Key into a string of printable ASCII characters.
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string
         */
        public function saveToAsciiSafeString()
        {
        }
        /**
         * Gets the raw bytes of the key.
         *
         * @return string
         */
        public function getRawBytes()
        {
        }
    }
    final class KeyProtectedByPassword
    {
        const PASSWORD_KEY_CURRENT_VERSION = "\xde\xf1\x00\x00";
        /**
         * Creates a random key protected by the provided password.
         *
         * @param string $password
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return KeyProtectedByPassword
         */
        public static function createRandomPasswordProtectedKey(#[\SensitiveParameter] $password)
        {
        }
        /**
         * Loads a KeyProtectedByPassword from its encoded form.
         *
         * @param string $saved_key_string
         *
         * @throws Ex\BadFormatException
         *
         * @return KeyProtectedByPassword
         */
        public static function loadFromAsciiSafeString(#[\SensitiveParameter] $saved_key_string)
        {
        }
        /**
         * Encodes the KeyProtectedByPassword into a string of printable ASCII
         * characters.
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string
         */
        public function saveToAsciiSafeString()
        {
        }
        /**
         * Decrypts the protected key, returning an unprotected Key object that can
         * be used for encryption and decryption.
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         *
         * @param string $password
         * @return Key
         */
        public function unlockKey(#[\SensitiveParameter] $password)
        {
        }
        /**
         * Changes the password.
         *
         * @param string $current_password
         * @param string $new_password
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         *
         * @return KeyProtectedByPassword
         */
        public function changePassword(#[\SensitiveParameter] $current_password, #[\SensitiveParameter] $new_password)
        {
        }
    }
    class Crypto
    {
        /**
         * Encrypts a string with a Key.
         *
         * @param string $plaintext
         * @param Key    $key
         * @param bool   $raw_binary
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws \TypeError
         *
         * @return string
         */
        public static function encrypt($plaintext, $key, $raw_binary = false)
        {
        }
        /**
         * Encrypts a string with a password, using a slow key derivation function
         * to make password cracking more expensive.
         *
         * @param string $plaintext
         * @param string $password
         * @param bool   $raw_binary
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws \TypeError
         *
         * @return string
         */
        public static function encryptWithPassword($plaintext, #[\SensitiveParameter] $password, $raw_binary = false)
        {
        }
        /**
         * Decrypts a ciphertext to a string with a Key.
         *
         * @param string $ciphertext
         * @param Key    $key
         * @param bool   $raw_binary
         *
         * @throws \TypeError
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         *
         * @return string
         */
        public static function decrypt($ciphertext, $key, $raw_binary = false)
        {
        }
        /**
         * Decrypts a ciphertext to a string with a password, using a slow key
         * derivation function to make password cracking more expensive.
         *
         * @param string $ciphertext
         * @param string $password
         * @param bool   $raw_binary
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         * @throws \TypeError
         *
         * @return string
         */
        public static function decryptWithPassword($ciphertext, #[\SensitiveParameter] $password, $raw_binary = false)
        {
        }
        /**
         * Decrypts a legacy ciphertext produced by version 1 of this library.
         *
         * @param string $ciphertext
         * @param string $key
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         * @throws \TypeError
         *
         * @return string
         */
        public static function legacyDecrypt($ciphertext, #[\SensitiveParameter] $key)
        {
        }
        /**
         * Raw unauthenticated encryption (insecure on its own).
         *
         * @param string $plaintext
         * @param string $key
         * @param string $iv
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string
         */
        protected static function plainEncrypt($plaintext, #[\SensitiveParameter] $key, #[\SensitiveParameter] $iv)
        {
        }
        /**
         * Raw unauthenticated decryption (insecure on its own).
         *
         * @param string $ciphertext
         * @param string $key
         * @param string $iv
         * @param string $cipherMethod
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string
         */
        protected static function plainDecrypt($ciphertext, #[\SensitiveParameter] $key, #[\SensitiveParameter] $iv, $cipherMethod)
        {
        }
        /**
         * Verifies an HMAC without leaking information through side-channels.
         *
         * @param string $expected_hmac
         * @param string $message
         * @param string $key
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return bool
         */
        protected static function verifyHMAC($expected_hmac, $message, #[\SensitiveParameter] $key)
        {
        }
    }
    /*
     * We're using static class inheritance to get access to protected methods
     * inside Crypto. To make it easy to know where the method we're calling can be
     * found, within this file, prefix calls with `Crypto::` or `RuntimeTests::`,
     * and don't use `self::`.
     */
    class RuntimeTests extends \Defuse\Crypto\Crypto
    {
        /**
         * Runs the runtime tests.
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @return void
         */
        public static function runtimeTest()
        {
        }
    }
    final class Encoding
    {
        const CHECKSUM_BYTE_SIZE = 32;
        const CHECKSUM_HASH_ALGO = 'sha256';
        const SERIALIZE_HEADER_BYTES = 4;
        /**
         * Converts a byte string to a hexadecimal string without leaking
         * information through side channels.
         *
         * @param string $byte_string
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string
         */
        public static function binToHex($byte_string)
        {
        }
        /**
         * Converts a hexadecimal string into a byte string without leaking
         * information through side channels.
         *
         * @param string $hex_string
         *
         * @throws Ex\BadFormatException
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string
         * @psalm-suppress TypeDoesNotContainType
         */
        public static function hexToBin($hex_string)
        {
        }
        /**
         * Remove trialing whitespace without table look-ups or branches.
         *
         * Calling this function may leak the length of the string as well as the
         * number of trailing whitespace characters through side-channels.
         *
         * @param string $string
         * @return string
         */
        public static function trimTrailingWhitespace($string = '')
        {
        }
        /*
         * SECURITY NOTE ON APPLYING CHECKSUMS TO SECRETS:
         *
         *      The checksum introduces a potential security weakness. For example,
         *      suppose we apply a checksum to a key, and that an adversary has an
         *      exploit against the process containing the key, such that they can
         *      overwrite an arbitrary byte of memory and then cause the checksum to
         *      be verified and learn the result.
         *
         *      In this scenario, the adversary can extract the key one byte at
         *      a time by overwriting it with their guess of its value and then
         *      asking if the checksum matches. If it does, their guess was right.
         *      This kind of attack may be more easy to implement and more reliable
         *      than a remote code execution attack.
         *
         *      This attack also applies to authenticated encryption as a whole, in
         *      the situation where the adversary can overwrite a byte of the key
         *      and then cause a valid ciphertext to be decrypted, and then
         *      determine whether the MAC check passed or failed.
         *
         *      By using the full SHA256 hash instead of truncating it, I'm ensuring
         *      that both ways of going about the attack are equivalently difficult.
         *      A shorter checksum of say 32 bits might be more useful to the
         *      adversary as an oracle in case their writes are coarser grained.
         *
         *      Because the scenario assumes a serious vulnerability, we don't try
         *      to prevent attacks of this style.
         */
        /**
         * INTERNAL USE ONLY: Applies a version header, applies a checksum, and
         * then encodes a byte string into a range of printable ASCII characters.
         *
         * @param string $header
         * @param string $bytes
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string
         */
        public static function saveBytesToChecksummedAsciiSafeString($header, #[\SensitiveParameter] $bytes)
        {
        }
        /**
         * INTERNAL USE ONLY: Decodes, verifies the header and checksum, and returns
         * the encoded byte string.
         *
         * @param string $expected_header
         * @param string $string
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\BadFormatException
         *
         * @return string
         */
        public static function loadBytesFromChecksummedAsciiSafeString($expected_header, #[\SensitiveParameter] $string)
        {
        }
    }
    final class KeyOrPassword
    {
        const PBKDF2_ITERATIONS = 100000;
        const SECRET_TYPE_KEY = 1;
        const SECRET_TYPE_PASSWORD = 2;
        /**
         * Initializes an instance of KeyOrPassword from a key.
         *
         * @param Key $key
         *
         * @return KeyOrPassword
         */
        public static function createFromKey(\Defuse\Crypto\Key $key)
        {
        }
        /**
         * Initializes an instance of KeyOrPassword from a password.
         *
         * @param string $password
         *
         * @return KeyOrPassword
         */
        public static function createFromPassword(#[\SensitiveParameter] $password)
        {
        }
        /**
         * Derives authentication and encryption keys from the secret, using a slow
         * key derivation function if the secret is a password.
         *
         * @param string $salt
         *
         * @throws Ex\CryptoException
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return DerivedKeys
         */
        public function deriveKeys($salt)
        {
        }
    }
    final class Core
    {
        const HEADER_VERSION_SIZE = 4;
        const MINIMUM_CIPHERTEXT_SIZE = 84;
        const CURRENT_VERSION = "\xde\xf5\x02\x00";
        const CIPHER_METHOD = 'aes-256-ctr';
        const BLOCK_BYTE_SIZE = 16;
        const KEY_BYTE_SIZE = 32;
        const SALT_BYTE_SIZE = 32;
        const MAC_BYTE_SIZE = 32;
        const HASH_FUNCTION_NAME = 'sha256';
        const ENCRYPTION_INFO_STRING = 'DefusePHP|V2|KeyForEncryption';
        const AUTHENTICATION_INFO_STRING = 'DefusePHP|V2|KeyForAuthentication';
        const BUFFER_BYTE_SIZE = 1048576;
        const LEGACY_CIPHER_METHOD = 'aes-128-cbc';
        const LEGACY_BLOCK_BYTE_SIZE = 16;
        const LEGACY_KEY_BYTE_SIZE = 16;
        const LEGACY_HASH_FUNCTION_NAME = 'sha256';
        const LEGACY_MAC_BYTE_SIZE = 32;
        const LEGACY_ENCRYPTION_INFO_STRING = 'DefusePHP|KeyForEncryption';
        const LEGACY_AUTHENTICATION_INFO_STRING = 'DefusePHP|KeyForAuthentication';
        /*
         * V2.0 Format: VERSION (4 bytes) || SALT (32 bytes) || IV (16 bytes) ||
         *              CIPHERTEXT (varies) || HMAC (32 bytes)
         *
         * V1.0 Format: HMAC (32 bytes) || IV (16 bytes) || CIPHERTEXT (varies).
         */
        /**
         * Adds an integer to a block-sized counter.
         *
         * @param string $ctr
         * @param int    $inc
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string
         *
         * @psalm-suppress RedundantCondition - It's valid to use is_int to check for overflow.
         */
        public static function incrementCounter($ctr, $inc)
        {
        }
        /**
         * Returns a random byte string of the specified length.
         *
         * @param int $octets
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string
         */
        public static function secureRandom($octets)
        {
        }
        /**
         * Computes the HKDF key derivation function specified in
         * http://tools.ietf.org/html/rfc5869.
         *
         * @param string $hash   Hash Function
         * @param string $ikm    Initial Keying Material
         * @param int    $length How many bytes?
         * @param string $info   What sort of key are we deriving?
         * @param string $salt
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @psalm-suppress UndefinedFunction - We're checking if the function exists first.
         *
         * @return string
         */
        public static function HKDF($hash, $ikm, $length, $info = '', $salt = null)
        {
        }
        /**
         * Checks if two equal-length strings are the same without leaking
         * information through side channels.
         *
         * @param string $expected
         * @param string $given
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return bool
         */
        public static function hashEquals($expected, $given)
        {
        }
        /**
         * Throws an exception if the constant doesn't exist.
         *
         * @param string $name
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         */
        public static function ensureConstantExists($name)
        {
        }
        /**
         * Throws an exception if the function doesn't exist.
         *
         * @param string $name
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         */
        public static function ensureFunctionExists($name)
        {
        }
        /**
         * Throws an exception if the condition is false.
         *
         * @param bool $condition
         * @param string $message
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         */
        public static function ensureTrue($condition, $message = '')
        {
        }
        /*
         * We need these strlen() and substr() functions because when
         * 'mbstring.func_overload' is set in php.ini, the standard strlen() and
         * substr() are replaced by mb_strlen() and mb_substr().
         */
        /**
         * Computes the length of a string in bytes.
         *
         * @param string $str
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return int
         */
        public static function ourStrlen($str)
        {
        }
        /**
         * Behaves roughly like the function substr() in PHP 7 does.
         *
         * @param string $str
         * @param int    $start
         * @param int    $length
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string|bool
         */
        public static function ourSubstr($str, $start, $length = null)
        {
        }
        /**
         * Computes the PBKDF2 password-based key derivation function.
         *
         * The PBKDF2 function is defined in RFC 2898. Test vectors can be found in
         * RFC 6070. This implementation of PBKDF2 was originally created by Taylor
         * Hornby, with improvements from http://www.variations-of-shadow.com/.
         *
         * @param string $algorithm  The hash algorithm to use. Recommended: SHA256
         * @param string $password   The password.
         * @param string $salt       A salt that is unique to the password.
         * @param int    $count      Iteration count. Higher is better, but slower. Recommended: At least 1000.
         * @param int    $key_length The length of the derived key in bytes.
         * @param bool   $raw_output If true, the key is returned in raw binary format. Hex encoded otherwise.
         *
         * @throws Ex\EnvironmentIsBrokenException
         *
         * @return string A $key_length-byte key derived from the password and salt.
         */
        public static function pbkdf2($algorithm, #[\SensitiveParameter] $password, $salt, $count, $key_length, $raw_output = false)
        {
        }
    }
    final class File
    {
        /**
         * Encrypts the input file, saving the ciphertext to the output file.
         *
         * @param string $inputFilename
         * @param string $outputFilename
         * @param Key    $key
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\IOException
         */
        public static function encryptFile($inputFilename, $outputFilename, \Defuse\Crypto\Key $key)
        {
        }
        /**
         * Encrypts a file with a password, using a slow key derivation function to
         * make password cracking more expensive.
         *
         * @param string $inputFilename
         * @param string $outputFilename
         * @param string $password
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\IOException
         */
        public static function encryptFileWithPassword($inputFilename, $outputFilename, #[\SensitiveParameter] $password)
        {
        }
        /**
         * Decrypts the input file, saving the plaintext to the output file.
         *
         * @param string $inputFilename
         * @param string $outputFilename
         * @param Key    $key
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\IOException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         */
        public static function decryptFile($inputFilename, $outputFilename, \Defuse\Crypto\Key $key)
        {
        }
        /**
         * Decrypts a file with a password, using a slow key derivation function to
         * make password cracking more expensive.
         *
         * @param string $inputFilename
         * @param string $outputFilename
         * @param string $password
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\IOException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         */
        public static function decryptFileWithPassword($inputFilename, $outputFilename, #[\SensitiveParameter] $password)
        {
        }
        /**
         * Takes two resource handles and encrypts the contents of the first,
         * writing the ciphertext into the second.
         *
         * @param resource $inputHandle
         * @param resource $outputHandle
         * @param Key      $key
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         */
        public static function encryptResource($inputHandle, $outputHandle, \Defuse\Crypto\Key $key)
        {
        }
        /**
         * Encrypts the contents of one resource handle into another with a
         * password, using a slow key derivation function to make password cracking
         * more expensive.
         *
         * @param resource $inputHandle
         * @param resource $outputHandle
         * @param string   $password
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\IOException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         */
        public static function encryptResourceWithPassword($inputHandle, $outputHandle, #[\SensitiveParameter] $password)
        {
        }
        /**
         * Takes two resource handles and decrypts the contents of the first,
         * writing the plaintext into the second.
         *
         * @param resource $inputHandle
         * @param resource $outputHandle
         * @param Key      $key
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\IOException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         */
        public static function decryptResource($inputHandle, $outputHandle, \Defuse\Crypto\Key $key)
        {
        }
        /**
         * Decrypts the contents of one resource into another with a password, using
         * a slow key derivation function to make password cracking more expensive.
         *
         * @param resource $inputHandle
         * @param resource $outputHandle
         * @param string   $password
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\IOException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         */
        public static function decryptResourceWithPassword($inputHandle, $outputHandle, #[\SensitiveParameter] $password)
        {
        }
        /**
         * Decrypts a file-backed resource with either a key or a password.
         *
         * @param resource      $inputHandle
         * @param resource      $outputHandle
         * @param KeyOrPassword $secret
         * @return void
         *
         * @throws Ex\EnvironmentIsBrokenException
         * @throws Ex\IOException
         * @throws Ex\WrongKeyOrModifiedCiphertextException
         * @psalm-suppress PossiblyInvalidArgument
         *      Fixes erroneous errors caused by PHP 7.2 switching the return value
         *      of hash_init from a resource to a HashContext.
         */
        public static function decryptResourceInternal($inputHandle, $outputHandle, \Defuse\Crypto\KeyOrPassword $secret)
        {
        }
        /**
         * Read from a stream; prevent partial reads.
         *
         * @param resource $stream
         * @param int      $num_bytes
         * @return string
         *
         * @throws Ex\IOException
         * @throws Ex\EnvironmentIsBrokenException
         */
        public static function readBytes($stream, $num_bytes)
        {
        }
        /**
         * Write to a stream; prevents partial writes.
         *
         * @param resource $stream
         * @param string   $buf
         * @param int      $num_bytes
         * @return int
         *
         * @throws Ex\IOException
         */
        public static function writeBytes($stream, $buf, $num_bytes = null)
        {
        }
    }
}
namespace WsdlToPhp\WsSecurity {
    class WsSecurity
    {
        /**
         * @var Security
         */
        protected $security;
        /**
         * @param string $username
         * @param string $password
         * @param bool   $passwordDigest
         * @param int    $addCreated
         * @param int    $addExpires
         * @param bool   $mustunderstand
         * @param string $actor
         * @param string $usernameId
         * @param bool   $addNonce
         * @param string $envelopeNamespace
         */
        protected function __construct($username, $password, $passwordDigest = false, $addCreated = 0, $addExpires = 0, $mustunderstand = false, $actor = null, $usernameId = null, $addNonce = true, $envelopeNamespace = \WsdlToPhp\WsSecurity\Security::ENV_NAMESPACE)
        {
        }
        /**
         * @return Security
         */
        public function getSecurity()
        {
        }
        /**
         * Create the SoapHeader object to send as SoapHeader in the SOAP request.
         *
         * @param string $username
         * @param string $password
         * @param bool   $passwordDigest
         * @param int    $addCreated
         * @param int    $addExpires
         * @param bool   $returnSoapHeader
         * @param bool   $mustunderstand
         * @param string $actor
         * @param string $usernameId
         * @param bool   $addNonce
         * @param string $envelopeNamespace
         *
         * @return \SoapHeader|\SoapVar
         */
        public static function createWsSecuritySoapHeader($username, $password, $passwordDigest = false, $addCreated = 0, $addExpires = 0, $returnSoapHeader = true, $mustunderstand = false, $actor = null, $usernameId = null, $addNonce = true, $envelopeNamespace = \WsdlToPhp\WsSecurity\Security::ENV_NAMESPACE)
        {
        }
        /**
         * @param bool   $mustunderstand
         * @param string $actor
         * @param string $envelopeNamespace
         *
         * @return WsSecurity
         */
        protected function initSecurity($mustunderstand = false, $actor = null, $envelopeNamespace = \WsdlToPhp\WsSecurity\Security::ENV_NAMESPACE)
        {
        }
        /**
         * @param string $username
         * @param string $usernameId
         *
         * @return WsSecurity
         */
        protected function setUsernameToken($username, $usernameId = null)
        {
        }
        /**
         * @param string $password
         * @param bool   $passwordDigest
         * @param int    $addCreated
         *
         * @return WsSecurity
         */
        protected function setPassword($password, $passwordDigest = false, $addCreated = 0)
        {
        }
        /**
         * @param bool $addNonce
         *
         * @return WsSecurity
         */
        protected function setNonce($addNonce)
        {
        }
        /**
         * @param int $addCreated
         *
         * @return WsSecurity
         */
        protected function setCreated($addCreated)
        {
        }
        /**
         * @param int $addCreated
         * @param int $addExpires
         *
         * @return WsSecurity
         */
        protected function setTimestamp($addCreated = 0, $addExpires = 0)
        {
        }
        /**
         * @return UsernameToken
         */
        protected function getUsernameToken()
        {
        }
        /**
         * @return Password
         */
        protected function getPassword()
        {
        }
    }
    /**
     * Base class to represent any element that must be included for a WS-Security header.
     * Each element must be named with the actual targeted element tag name.
     * The namespace is also mandatory.
     * Finally the attributes are optional.
     */
    class Element
    {
        /**
         * Namespace for WSSE elements.
         *
         * @var string
         */
        const NS_WSSE = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
        /**
         * Namespace name for WSSE elements.
         *
         * @var string
         */
        const NS_WSSE_NAME = 'wsse';
        /**
         * Namespace for WSSU elements.
         *
         * @var string
         */
        const NS_WSSU = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
        /**
         * Namespace name for WSSU elements.
         *
         * @var string
         */
        const NS_WSSU_NAME = 'wssu';
        /**
         * Name of the element used as the WS-Security tag.
         *
         * @var string
         */
        protected $name = '';
        /**
         * Value of the element.
         * It can either be a string value or a Element object.
         *
         * @var Element|string
         */
        protected $value = '';
        /**
         * Array of attributes that must contains the element.
         *
         * @var array
         */
        protected $attributes = [];
        /**
         * The namespace the element belongs to.
         *
         * @var string
         */
        protected $namespace = '';
        /**
         * Nonce used to generate digest password.
         *
         * @var string
         */
        protected $nonceValue;
        /**
         * Timestamp used to generate digest password.
         *
         * @var int
         */
        protected $timestampValue;
        /**
         * Current \DOMDocument used to generate XML content.
         *
         * @var \DOMDocument
         */
        protected static $dom = null;
        /**
         * Generic constructor.
         *
         * @param string $name
         * @param string $namespace
         * @param mixed  $value
         * @param array  $attributes
         */
        public function __construct($name, $namespace, $value = null, array $attributes = [])
        {
        }
        /**
         * Method called to generate the string XML request to be sent among the SOAP Header.
         *
         * @param bool $asDomElement returns elements as a \DOMElement or as a string
         *
         * @return \DOMElement|string
         */
        protected function __toSend($asDomElement = false)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $name
         *
         * @return Element
         */
        public function setName($name)
        {
        }
        /**
         * @return array
         */
        public function getAttributes()
        {
        }
        /**
         * @param array $attributes
         *
         * @return Element
         */
        public function setAttributes(array $attributes)
        {
        }
        /**
         * @param string $name
         * @param mixed  $value
         *
         * @return Element
         */
        public function setAttribute($name, $value)
        {
        }
        /**
         * @return bool true|false
         */
        public function hasAttributes()
        {
        }
        /**
         * @return string
         */
        public function getNamespace()
        {
        }
        /**
         * @param string $namespace
         *
         * @return Element
         */
        public function setNamespace($namespace)
        {
        }
        /**
         * @return Element|string
         */
        public function getValue()
        {
        }
        /**
         * @param Element|string
         * @param mixed $value
         *
         * @return Element
         */
        public function setValue($value)
        {
        }
        /**
         * @return string
         */
        public function getNonceValue()
        {
        }
        /**
         * @param string $nonceValue
         *
         * @return Element
         */
        public function setNonceValue($nonceValue)
        {
        }
        /**
         * @param mixed $formatted
         *
         * @return int|string
         */
        public function getTimestampValue($formatted = false)
        {
        }
        /**
         * @param int $timestampValue
         *
         * @return Element
         */
        public function setTimestampValue($timestampValue)
        {
        }
        /**
         * Returns the element to send as WS-Security header.
         *
         * @return string
         */
        public function toSend()
        {
        }
        /**
         * Handle adding value to element according to the value type.
         *
         * @param mixed       $value
         * @param \DOMElement $element
         *
         * @return Element
         */
        protected function appendValueToElementToSend($value, \DOMElement $element)
        {
        }
        /**
         * @param Element     $element
         * @param \DOMElement $element
         */
        protected function appendElementToElementToSend(\WsdlToPhp\WsSecurity\Element $value, \DOMElement $element)
        {
        }
        /**
         * @param array       $values
         * @param \DOMElement $element
         */
        protected function appendValuesToElementToSend(array $values, \DOMElement $element)
        {
        }
        /**
         * @param \DOMElement $element
         *
         * @return Element
         */
        protected function appendAttributesToElementToSend(\DOMElement $element)
        {
        }
        /**
         * Returns the name with its namespace.
         *
         * @return string
         */
        protected function getNamespacedName()
        {
        }
    }
    class Security extends \WsdlToPhp\WsSecurity\Element
    {
        /**
         * Element name.
         *
         * @var string
         */
        const NAME = 'Security';
        /**
         * Element attribute mustunderstand name.
         *
         * @var string
         */
        const ATTRIBUTE_MUST_UNDERSTAND = ':mustunderstand';
        /**
         * Element attribute mustunderstand name.
         *
         * @var string
         */
        const ATTRIBUTE_ACTOR = ':actor';
        /**
         * Envelop namespace.
         *
         * @var string
         */
        const ENV_NAMESPACE = 'SOAP-ENV';
        /**
         * UsernameToken element.
         *
         * @var UsernameToken
         */
        protected $usernameToken;
        /**
         * Timestamp element.
         *
         * @var Timestamp
         */
        protected $timestamp;
        /**
         * Constructor for Nonce element.
         *
         * @param bool   $mustunderstand
         * @param string $actor
         * @param string $envelopeNamespace
         * @param string $namespace         the namespace
         */
        public function __construct($mustunderstand = false, $actor = null, $namespace = self::NS_WSSE, $envelopeNamespace = self::ENV_NAMESPACE)
        {
        }
        /**
         * Overrides methods in order to set the values.
         *
         * @param bool $asDomElement returns elements as a DOMElement or as a string
         *
         * @return \DOMElement|string
         */
        protected function __toSend($asDomElement = false)
        {
        }
        /**
         * @return UsernameToken
         */
        public function getUsernameToken()
        {
        }
        /**
         * @param UsernameToken $usernameToken
         *
         * @return Security
         */
        public function setUsernameToken(\WsdlToPhp\WsSecurity\UsernameToken $usernameToken)
        {
        }
        /**
         * @return Timestamp
         */
        public function getTimestamp()
        {
        }
        /**
         * @param Timestamp $timestamp
         *
         * @return Security
         */
        public function setTimestamp(\WsdlToPhp\WsSecurity\Timestamp $timestamp)
        {
        }
    }
    class Timestamp extends \WsdlToPhp\WsSecurity\Element
    {
        /**
         * Element name.
         *
         * @var string
         */
        const NAME = 'Timestamp';
        /**
         * Created element.
         *
         * @var Created
         */
        protected $created;
        /**
         * Created element.
         *
         * @var Expires
         */
        protected $expires;
        /**
         * Constructor for Timestamp element.
         *
         * @param string $namespace the namespace
         */
        public function __construct($namespace = self::NS_WSSU)
        {
        }
        /**
         * Overrides method in order to add created and expires values if they are set.
         *
         * @param bool $asDomElement returns elements as a DOMElement or as a string
         *
         * @return string
         */
        protected function __toSend($asDomElement = false)
        {
        }
        /**
         * @return Created
         */
        public function getCreated()
        {
        }
        /**
         * @param Created $created
         *
         * @return Timestamp
         */
        public function setCreated(\WsdlToPhp\WsSecurity\Created $created)
        {
        }
        /**
         * @return Expires
         */
        public function getExpires()
        {
        }
        /**
         * @param Expires $expires
         *
         * @return Expires
         */
        public function setExpires(\WsdlToPhp\WsSecurity\Expires $expires)
        {
        }
    }
    class Username extends \WsdlToPhp\WsSecurity\Element
    {
        /**
         * Element name.
         *
         * @var string
         */
        const NAME = 'Username';
        /**
         * Constructor for Username element.
         *
         * @param string $username  the username
         * @param string $namespace the namespace
         */
        public function __construct($username, $namespace = self::NS_WSSE)
        {
        }
    }
    class UsernameToken extends \WsdlToPhp\WsSecurity\Element
    {
        /**
         * Element name.
         *
         * @var string
         */
        const NAME = 'UsernameToken';
        /**
         * Attribute id name.
         *
         * @var string
         */
        const ATTRIBUTE_ID = 'Id';
        /**
         * Username element.
         *
         * @var Username
         */
        protected $username;
        /**
         * Password element.
         *
         * @var Password
         */
        protected $password;
        /**
         * Created element.
         *
         * @var Created
         */
        protected $created;
        /**
         * Nonce element.
         *
         * @var Nonce
         */
        protected $nonce;
        /**
         * Constructor for UsernameToken element.
         *
         * @see Element::__construct()
         *
         * @param string $id
         * @param string $namespace the namespace
         */
        public function __construct($id = null, $namespace = self::NS_WSSE)
        {
        }
        /**
         * Overrides method in order to add username, password and created values if they are set.
         *
         * @param bool $asDomElement returns elements as a DOMElement or as a string
         *
         * @return string
         */
        protected function __toSend($asDomElement = false)
        {
        }
        /**
         * @return Username
         */
        public function getUsername()
        {
        }
        /**
         * @param Username $username
         *
         * @return UsernameToken
         */
        public function setUsername(\WsdlToPhp\WsSecurity\Username $username)
        {
        }
        /**
         * @return Password
         */
        public function getPassword()
        {
        }
        /**
         * @param Password $password
         *
         * @return UsernameToken
         */
        public function setPassword($password)
        {
        }
        /**
         * @return Created
         */
        public function getCreated()
        {
        }
        /**
         * @param Created $created
         *
         * @return UsernameToken
         */
        public function setCreated($created)
        {
        }
        /**
         * @return Nonce
         */
        public function getNonce()
        {
        }
        /**
         * @param Nonce $nonce
         *
         * @return UsernameToken
         */
        public function setNonce($nonce)
        {
        }
    }
    class Nonce extends \WsdlToPhp\WsSecurity\Element
    {
        /**
         * Element name.
         *
         * @var string
         */
        const NAME = 'Nonce';
        /**
         * Element name.
         *
         * @var string
         */
        const ATTRIBUTE_ENCODING_TYPE = 'EncodingType';
        /**
         * Element name.
         *
         * @var string
         */
        const NS_ENCODING = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary';
        /**
         * Constructor for Nonce element.
         *
         * @param string $nonce     the nonce value
         * @param string $namespace the namespace
         */
        public function __construct($nonce, $namespace = self::NS_WSSE)
        {
        }
        /**
         * Encode Nonce value.
         *
         * @param string $nonce
         *
         * @return string
         */
        public static function encodeNonce($nonce)
        {
        }
    }
    class Created extends \WsdlToPhp\WsSecurity\Element
    {
        /**
         * Element name.
         *
         * @var string
         */
        const NAME = 'Created';
        /**
         * Constructor for Created element.
         *
         * @param int    $_timestamp the timestamp value
         * @param string $_namespace the namespace
         */
        public function __construct($_timestamp, $_namespace = self::NS_WSSU)
        {
        }
    }
    class Expires extends \WsdlToPhp\WsSecurity\Element
    {
        /**
         * Element name.
         *
         * @var string
         */
        const NAME = 'Expires';
        /**
         * Constructor for Expires element.
         *
         * @param int    $timestamp the timestamp value
         * @param int    $expiresIn the expires in time
         * @param string $namespace the namespace
         */
        public function __construct($timestamp, $expiresIn = 3600, $namespace = self::NS_WSSU)
        {
        }
    }
    /**
     * Class that represents the Password element.
     *
     * @author WsdlToPhp Team <contact@wsdltophp.com>
     */
    class Password extends \WsdlToPhp\WsSecurity\Element
    {
        /**
         * Element name.
         *
         * @var string
         */
        const NAME = 'Password';
        /**
         * Element attribute type name.
         *
         * @var string
         */
        const ATTRIBUTE_TYPE = 'Type';
        /**
         * Passwor must be sent using digest.
         *
         * @var string
         */
        const TYPE_PASSWORD_DIGEST = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest';
        /**
         * Passwor must be sent in text.
         *
         * @var string
         */
        const TYPE_PASSWORD_TEXT = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText';
        /**
         * TypeValue of password.
         *
         * @var string
         */
        protected $typeValue;
        /**
         * Constructor for Password element.
         *
         * @param string $password       the password
         * @param string $typeValue      the typeValue
         * @param string $timestampValue the timestamp to use
         * @param string $namespace      the namespace
         */
        public function __construct($password, $typeValue = self::TYPE_PASSWORD_TEXT, $timestampValue = 0, $namespace = self::NS_WSSE)
        {
        }
        /**
         * Returns the converted form of the password accroding to the password typeValue.
         *
         * @param string $password
         */
        public function convertPassword($password)
        {
        }
        /**
         * When generating the password digest, we define values (nonce and timestamp) that can be used in other place.
         *
         * @param string $password
         */
        public function digestPassword($password)
        {
        }
        /**
         * @return string
         */
        public function getTypeValue()
        {
        }
        /**
         * @param string $typeValue
         *
         * @return Password
         */
        public function setTypeValue($typeValue)
        {
        }
    }
}
namespace Psr\Log {
    class InvalidArgumentException extends \InvalidArgumentException
    {
    }
    /**
     * This is a simple Logger trait that classes unable to extend AbstractLogger
     * (because they extend another class, etc) can include.
     *
     * It simply delegates all log-level-specific methods to the `log` method to
     * reduce boilerplate code that a simple Logger that does the same thing with
     * messages regardless of the error level has to implement.
     */
    trait LoggerTrait
    {
        /**
         * System is unusable.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function emergency($message, array $context = array())
        {
        }
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function alert($message, array $context = array())
        {
        }
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function critical($message, array $context = array())
        {
        }
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function error($message, array $context = array())
        {
        }
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function warning($message, array $context = array())
        {
        }
        /**
         * Normal but significant events.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function notice($message, array $context = array())
        {
        }
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function info($message, array $context = array())
        {
        }
        /**
         * Detailed debug information.
         *
         * @param string $message
         * @param array  $context
         *
         * @return void
         */
        public function debug($message, array $context = array())
        {
        }
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed  $level
         * @param string $message
         * @param array  $context
         *
         * @return void
         *
         * @throws \Psr\Log\InvalidArgumentException
         */
        public abstract function log($level, $message, array $context = array());
    }
    /**
     * Describes a logger instance.
     *
     * The message MUST be a string or object implementing __toString().
     *
     * The message MAY contain placeholders in the form: {foo} where foo
     * will be replaced by the context data in key "foo".
     *
     * The context array can contain arbitrary data. The only assumption that
     * can be made by implementors is that if an Exception instance is given
     * to produce a stack trace, it MUST be in a key named "exception".
     *
     * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
     * for the full interface specification.
     */
    interface LoggerInterface
    {
        /**
         * System is unusable.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function emergency($message, array $context = array());
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function alert($message, array $context = array());
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function critical($message, array $context = array());
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function error($message, array $context = array());
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function warning($message, array $context = array());
        /**
         * Normal but significant events.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function notice($message, array $context = array());
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function info($message, array $context = array());
        /**
         * Detailed debug information.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function debug($message, array $context = array());
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed   $level
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         *
         * @throws \Psr\Log\InvalidArgumentException
         */
        public function log($level, $message, array $context = array());
    }
    /**
     * This is a simple Logger implementation that other Loggers can inherit from.
     *
     * It simply delegates all log-level-specific methods to the `log` method to
     * reduce boilerplate code that a simple Logger that does the same thing with
     * messages regardless of the error level has to implement.
     */
    abstract class AbstractLogger implements \Psr\Log\LoggerInterface
    {
        /**
         * System is unusable.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function emergency($message, array $context = array())
        {
        }
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function alert($message, array $context = array())
        {
        }
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function critical($message, array $context = array())
        {
        }
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function error($message, array $context = array())
        {
        }
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function warning($message, array $context = array())
        {
        }
        /**
         * Normal but significant events.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function notice($message, array $context = array())
        {
        }
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function info($message, array $context = array())
        {
        }
        /**
         * Detailed debug information.
         *
         * @param string  $message
         * @param mixed[] $context
         *
         * @return void
         */
        public function debug($message, array $context = array())
        {
        }
    }
    /**
     * Describes log levels.
     */
    class LogLevel
    {
        const EMERGENCY = 'emergency';
        const ALERT = 'alert';
        const CRITICAL = 'critical';
        const ERROR = 'error';
        const WARNING = 'warning';
        const NOTICE = 'notice';
        const INFO = 'info';
        const DEBUG = 'debug';
    }
    /**
     * This Logger can be used to avoid conditional log calls.
     *
     * Logging should always be optional, and if no logger is provided to your
     * library creating a NullLogger instance to have something to throw logs at
     * is a good way to avoid littering your code with `if ($this->logger) { }`
     * blocks.
     */
    class NullLogger extends \Psr\Log\AbstractLogger
    {
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed  $level
         * @param string $message
         * @param array  $context
         *
         * @return void
         *
         * @throws \Psr\Log\InvalidArgumentException
         */
        public function log($level, $message, array $context = array())
        {
        }
    }
}
namespace Psr\Log\Test {
    /**
     * Used for testing purposes.
     *
     * It records all records and gives you access to them for verification.
     *
     * @method bool hasEmergency($record)
     * @method bool hasAlert($record)
     * @method bool hasCritical($record)
     * @method bool hasError($record)
     * @method bool hasWarning($record)
     * @method bool hasNotice($record)
     * @method bool hasInfo($record)
     * @method bool hasDebug($record)
     *
     * @method bool hasEmergencyRecords()
     * @method bool hasAlertRecords()
     * @method bool hasCriticalRecords()
     * @method bool hasErrorRecords()
     * @method bool hasWarningRecords()
     * @method bool hasNoticeRecords()
     * @method bool hasInfoRecords()
     * @method bool hasDebugRecords()
     *
     * @method bool hasEmergencyThatContains($message)
     * @method bool hasAlertThatContains($message)
     * @method bool hasCriticalThatContains($message)
     * @method bool hasErrorThatContains($message)
     * @method bool hasWarningThatContains($message)
     * @method bool hasNoticeThatContains($message)
     * @method bool hasInfoThatContains($message)
     * @method bool hasDebugThatContains($message)
     *
     * @method bool hasEmergencyThatMatches($message)
     * @method bool hasAlertThatMatches($message)
     * @method bool hasCriticalThatMatches($message)
     * @method bool hasErrorThatMatches($message)
     * @method bool hasWarningThatMatches($message)
     * @method bool hasNoticeThatMatches($message)
     * @method bool hasInfoThatMatches($message)
     * @method bool hasDebugThatMatches($message)
     *
     * @method bool hasEmergencyThatPasses($message)
     * @method bool hasAlertThatPasses($message)
     * @method bool hasCriticalThatPasses($message)
     * @method bool hasErrorThatPasses($message)
     * @method bool hasWarningThatPasses($message)
     * @method bool hasNoticeThatPasses($message)
     * @method bool hasInfoThatPasses($message)
     * @method bool hasDebugThatPasses($message)
     */
    class TestLogger extends \Psr\Log\AbstractLogger
    {
        /**
         * @var array
         */
        public $records = [];
        public $recordsByLevel = [];
        /**
         * @inheritdoc
         */
        public function log($level, $message, array $context = [])
        {
        }
        public function hasRecords($level)
        {
        }
        public function hasRecord($record, $level)
        {
        }
        public function hasRecordThatContains($message, $level)
        {
        }
        public function hasRecordThatMatches($regex, $level)
        {
        }
        public function hasRecordThatPasses(callable $predicate, $level)
        {
        }
        public function __call($method, $args)
        {
        }
        public function reset()
        {
        }
    }
    /**
     * Provides a base test class for ensuring compliance with the LoggerInterface.
     *
     * Implementors can extend the class and implement abstract methods to run this
     * as part of their test suite.
     */
    abstract class LoggerInterfaceTest extends \PHPUnit\Framework\TestCase
    {
        /**
         * @return LoggerInterface
         */
        public abstract function getLogger();
        /**
         * This must return the log messages in order.
         *
         * The simple formatting of the messages is: "<LOG LEVEL> <MESSAGE>".
         *
         * Example ->error('Foo') would yield "error Foo".
         *
         * @return string[]
         */
        public abstract function getLogs();
        public function testImplements()
        {
        }
        /**
         * @dataProvider provideLevelsAndMessages
         */
        public function testLogsAtAllLevels($level, $message)
        {
        }
        public function provideLevelsAndMessages()
        {
        }
        /**
         * @expectedException \Psr\Log\InvalidArgumentException
         */
        public function testThrowsOnInvalidLevel()
        {
        }
        public function testContextReplacement()
        {
        }
        public function testObjectCastToString()
        {
        }
        public function testContextCanContainAnything()
        {
        }
        public function testContextExceptionKeyCanBeExceptionOrOtherValues()
        {
        }
    }
    /**
     * This class is internal and does not follow the BC promise.
     *
     * Do NOT use this class in any way.
     *
     * @internal
     */
    class DummyTest
    {
        public function __toString()
        {
        }
    }
}
namespace Digitick\Sepa\Exception {
    /**
     * SEPA file generator.
     *
     * @copyright © Blage <www.blage.net> 2013
     * @license GNU Lesser General Public License v3.0
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Lesser Public License as
     * published by the Free Software Foundation, either version 3 of the
     * License, or (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program. If not, see <http://www.gnu.org/licenses/>.
     */
    class Exception extends \Exception
    {
    }
    /**
     * SEPA file generator.
     *
     * @copyright © Blage <www.blage.net> 2013
     * @license GNU Lesser General Public License v3.0
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Lesser Public License as
     * published by the Free Software Foundation, either version 3 of the
     * License, or (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program. If not, see <http://www.gnu.org/licenses/>.
     */
    class InvalidPaymentMethodException extends \Digitick\Sepa\Exception\Exception
    {
    }
    /**
     * SEPA file generator.
     *
     * @copyright © Blage <www.blage.net> 2013
     * @license GNU Lesser General Public License v3.0
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Lesser Public License as
     * published by the Free Software Foundation, either version 3 of the
     * License, or (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program. If not, see <http://www.gnu.org/licenses/>.
     */
    class InvalidArgumentException extends \Digitick\Sepa\Exception\Exception
    {
    }
    /**
     * SEPA file generator.
     *
     * @copyright © Blage <www.blage.net> 2013
     * @license GNU Lesser General Public License v3.0
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Lesser Public License as
     * published by the Free Software Foundation, either version 3 of the
     * License, or (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program. If not, see <http://www.gnu.org/licenses/>.
     */
    class InvalidTransferFileConfiguration extends \Digitick\Sepa\Exception\Exception
    {
    }
    /**
     * SEPA file generator.
     *
     * @copyright © Blage <www.blage.net> 2013
     * @license GNU Lesser General Public License v3.0
     *
     * This program is free software: you can redistribute it and/or modify
     * it under the terms of the GNU General Lesser Public License as
     * published by the Free Software Foundation, either version 3 of the
     * License, or (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program. If not, see <http://www.gnu.org/licenses/>.
     */
    class InvalidTransferTypeException extends \Digitick\Sepa\Exception\Exception
    {
    }
}
namespace Digitick\Sepa\Util {
    class StringHelper
    {
        public static function sanitizeString(string $inputString) : string
        {
        }
    }
}
namespace Digitick\Sepa {
    class PaymentInformation
    {
        /**
         * The first drawn from several recurring debits
         */
        const S_FIRST = 'FRST';
        /**
         * A recurring direct debit in a number of direct debits
         */
        const S_RECURRING = 'RCUR';
        /**
         * A one time non-recurring debit
         */
        const S_ONEOFF = 'OOFF';
        /**
         * The last direct debit in a series of recurring debits
         */
        const S_FINAL = 'FNAL';
        /**
         * @var string Unambiguously identify the payment.
         */
        public $id;
        /**
         * @var string|null Purpose of the transaction(s).
         */
        public $categoryPurposeCode;
        /**
         * @var string Debtor's name.
         */
        public $originName;
        /**
         * Unique identification of an organisation, as assigned by an institution, using an identification scheme.
         *
         * @var string|null
         */
        public $originBankPartyIdentification;
        /**
         * Name of the identification scheme, in a coded form as published in an external list. 1-4 characters.
         *
         * @var string|null
         */
        public $originBankPartyIdentificationScheme;
        /**
         * @var string Debtor's account IBAN.
         */
        public $originAccountIBAN;
        /**
         * @var string|null Debtor's account bank BIC code.
         */
        public $originAgentBIC;
        /**
         * @var string Debtor's account ISO currency code.
         */
        protected $originAccountCurrency;
        /**
         * @var string|null Payment method.
         */
        protected $paymentMethod;
        /**
         * @var string|null Local service instrument code.
         */
        protected $localInstrumentCode;
        /**
         * Date of payment execution
         *
         * @var \DateTime
         */
        protected $dueDate;
        /**
         * @var string|null Instruction priority.
         */
        protected $instructionPriority;
        /**
         * @var int
         */
        protected $controlSumCents = 0;
        /**
         * @var int Number of payment transactions.
         */
        protected $numberOfTransactions = 0;
        /**
         * @var TransferInformationInterface[]
         */
        protected $transfers = array();
        /**
         * Valid Payment Methods set by the TransferFile
         *
         * @var string[]
         */
        protected $validPaymentMethods = array();
        /**
         * @var string|null
         */
        protected $creditorId;
        /**
         * @var string|null
         */
        protected $sequenceType;
        /**
         * Should the bank book multiple transaction as a batch
         *
         * @var bool|null
         */
        protected $batchBooking;
        /**
         * @var \DateTime|null
         */
        protected $mandateSignDate;
        /**
         * @var string
         */
        protected $dateFormat = 'Y-m-d';
        public function __construct(string $id, string $originAccountIBAN, ?string $originAgentBIC, string $originName, string $originAccountCurrency = 'EUR')
        {
        }
        public function addTransfer(\Digitick\Sepa\TransferInformation\TransferInformationInterface $transfer) : void
        {
        }
        /**
         * @return TransferInformationInterface[]
         */
        public function getTransfers() : array
        {
        }
        /**
         * The domBuilder accept this Object
         */
        public function accept(\Digitick\Sepa\DomBuilder\DomBuilderInterface $domBuilder) : void
        {
        }
        /**
         * @throws InvalidArgumentException
         */
        public function setPaymentMethod(string $method) : void
        {
        }
        /**
         * @throws InvalidArgumentException
         */
        public function setLocalInstrumentCode(string $localInstrumentCode) : void
        {
        }
        /**
         * @param string[] $validPaymentMethods
         */
        public function setValidPaymentMethods(array $validPaymentMethods) : void
        {
        }
        public function setCategoryPurposeCode(string $categoryPurposeCode) : void
        {
        }
        public function getCategoryPurposeCode() : ?string
        {
        }
        public function setDueDate(\DateTime $dueDate) : void
        {
        }
        public function getDueDate() : string
        {
        }
        /**
         * @throws InvalidArgumentException
         */
        public function setInstructionPriority(string $instructionPriority) : void
        {
        }
        public function getInstructionPriority() : ?string
        {
        }
        public function setMandateSignDate(\DateTime $mandateSignDate) : void
        {
        }
        public function getMandateSignDate() : ?\DateTime
        {
        }
        public function setOriginName(string $originName) : void
        {
        }
        public function getOriginName() : string
        {
        }
        public function setOriginBankPartyIdentification(string $id) : void
        {
        }
        public function getOriginBankPartyIdentification() : ?string
        {
        }
        public function setOriginBankPartyIdentificationScheme(string $scheme) : void
        {
        }
        public function getOriginBankPartyIdentificationScheme() : ?string
        {
        }
        public function setOriginAgentBIC(string $originAgentBIC) : void
        {
        }
        public function getOriginAgentBIC() : ?string
        {
        }
        public function setOriginAccountIBAN(string $originAccountIBAN) : void
        {
        }
        public function getOriginAccountIBAN() : string
        {
        }
        public function setOriginAccountCurrency(string $originAccountCurrency) : void
        {
        }
        public function getOriginAccountCurrency() : string
        {
        }
        public function setId(string $id) : void
        {
        }
        public function getId() : string
        {
        }
        public function getControlSumCents() : int
        {
        }
        public function getLocalInstrumentCode() : ?string
        {
        }
        public function getNumberOfTransactions() : int
        {
        }
        public function getPaymentMethod() : ?string
        {
        }
        public function setCreditorId(string $creditorSchemeId) : void
        {
        }
        public function getCreditorId() : ?string
        {
        }
        public function setSequenceType(string $sequenceType) : void
        {
        }
        public function getSequenceType() : ?string
        {
        }
        public function setBatchBooking(bool $batchBooking) : void
        {
        }
        public function getBatchBooking() : ?bool
        {
        }
        public function setDueDateFormat(string $format) : void
        {
        }
    }
}
namespace Digitick\Sepa\TransferInformation {
    interface TransferInformationInterface
    {
        public function accept(\Digitick\Sepa\DomBuilder\DomBuilderInterface $domBuilder) : void;
        public function getTransferAmount() : int;
        public function getEndToEndIdentification() : string;
        public function getInstructionId() : ?string;
        public function getCreditorReferenceType() : ?string;
    }
    class BaseTransferInformation implements \Digitick\Sepa\TransferInformation\TransferInformationInterface
    {
        /**
         * Account Identifier
         *
         * @var string
         */
        protected $iban;
        /**
         * Financial Institution Identifier;
         *
         * @var string|null
         */
        protected $bic;
        /**
         * Amount in cents; must be between 1 and 99999999999
         *
         * @var int
         */
        protected $transferAmount;
        /**
         * @var string
         */
        protected $name;
        /**
         * @var string|null
         */
        protected $instructionId;
        /**
         * @var string
         */
        protected $EndToEndIdentification;
        /**
         * @var string
         */
        protected $currency = 'EUR';
        /**
         * Purpose of this transaction
         *
         * @var string|null
         */
        protected $remittanceInformation;
        /**
         * Structured creditor reference type.
         *
         * @var string|null
         */
        protected $creditorReferenceType;
        /**
         * Structured creditor reference.
         *
         * @var string|null
         */
        protected $creditorReference;
        /**
         * Nation with its own government.
         *
         * The code is checked against the list of country names obtained from the
         * United Nations (ISO 3166, Alpha-2 code).
         *
         * @var string|null
         */
        protected $country;
        /**
         * Name of a built-up area, with defined boundaries, and a local government.
         *
         * Maximum allowed length is 35 characters.
         *
         * @var string|null
         */
        protected $townName;
        /**
         * Identifier consisting of a group of letters and/or numbers that is added
         * to a postal address to assist the sorting of mail.
         *
         * Maximum allowed length is 16 characters.
         *
         * @var string|null
         */
        protected $postCode;
        /**
         * Name of a street or thoroughfare.
         *
         * Maximum allowed length is 70 characters.
         *
         * @var string|null
         */
        protected $streetName;
        /**
         * Number that identifies the position of a building on a street.
         *
         * Maximum allowed length is 16 characters.
         *
         * @var string|null
         */
        protected $buildingNumber;
        /**
         * Information that locates and identifies a specific address, as defined
         * by postal services, presented in free format text.
         *
         * Maximum allowed length is 70 characters.
         *
         * @var string|string[]|null
         */
        protected $postalAddress;
        /**
         * @param int $amount amount in cents
         */
        public function __construct(int $amount, string $iban, string $name, ?string $identification = null)
        {
        }
        public function accept(\Digitick\Sepa\DomBuilder\DomBuilderInterface $domBuilder) : void
        {
        }
        public function getTransferAmount() : int
        {
        }
        public function setCurrency(string $currency) : void
        {
        }
        public function getCurrency() : string
        {
        }
        public function setEndToEndIdentification(string $EndToEndIdentification) : void
        {
        }
        public function getEndToEndIdentification() : string
        {
        }
        public function setInstructionId(string $instructionId) : void
        {
        }
        public function getInstructionId() : ?string
        {
        }
        public function getIban() : string
        {
        }
        public function setBic(string $bic) : void
        {
        }
        public function getBic() : ?string
        {
        }
        public function setCreditorReference(string $creditorReference) : void
        {
        }
        public function getCreditorReference() : ?string
        {
        }
        public function setCreditorReferenceType(string $creditorReferenceType) : void
        {
        }
        public function getCreditorReferenceType() : ?string
        {
        }
        public function setRemittanceInformation(string $remittanceInformation) : void
        {
        }
        public function getRemittanceInformation() : ?string
        {
        }
        public function getCountry() : ?string
        {
        }
        public function setCountry(string $country) : void
        {
        }
        /**
         * Get the name of the town where the creditor/debtor is located
         *
         * Maximum allowed length is 35 characters.
         *
         * @return string|null
         */
        public function getTownName() : ?string
        {
        }
        /**
         * Set the name of the town where the creditor/debtor is located.
         *
         * @param string|null $townName Maximum allowed length is 35 characters.
         */
        public function setTownName(?string $townName) : void
        {
        }
        /**
         * Get the post code where the creditor/debtor is located.
         *
         * @return string|null
         */
        public function getPostCode() : ?string
        {
        }
        /**
         * Set the post code where the creditor/debtor is located.
         *
         * @param string|null $postCode Maximum allowed length is 16 characters.
         */
        public function setPostCode(?string $postCode) : void
        {
        }
        /**
         * Get the street name where the creditor/debtor is located.
         *
         * @return string|null
         */
        public function getStreetName() : ?string
        {
        }
        /**
         * Set the street name where the creditor/debtor is located.
         *
         * @param string|null $streetName Maximum allowed length is 70 characters.
         */
        public function setStreetName(?string $streetName) : void
        {
        }
        /**
         * Get the number that identifies the position of the building on the street
         * where the creditor/debtor is located.
         *
         * @return string|null
         */
        public function getBuildingNumber() : ?string
        {
        }
        /**
         * Set the number that identifies the position of the building on the street
         * where the creditor/debtor is located.
         *
         * @param string|null $buildingNumber Maximum allowed length is 16 characters.
         */
        public function setBuildingNumber(?string $buildingNumber) : void
        {
        }
        /**
         * @return string|string[]|null
         */
        public function getPostalAddress()
        {
        }
        /**
         * @param string|string[] $postalAddress
         */
        public function setPostalAddress($postalAddress) : void
        {
        }
    }
    class CustomerCreditTransferInformation extends \Digitick\Sepa\TransferInformation\BaseTransferInformation
    {
        public function getCreditorName() : string
        {
        }
    }
    class CustomerDirectDebitTransferInformation extends \Digitick\Sepa\TransferInformation\BaseTransferInformation
    {
        /**
         * @var string|null
         */
        protected $mandateId;
        /**
         * @var \DateTime|null
         */
        protected $mandateSignDate;
        /**
         * @var \DateTime|null
         */
        protected $finalCollectionDate;
        /**
         * @var bool
         */
        protected $amendedDebtorAccount = false;
        /**
         * @var string|null
         */
        protected $originalDebtorIban;
        /**
         * @var string|null
         */
        protected $originalMandateId;
        public function hasAmendments() : bool
        {
        }
        public function hasAmendedDebtorAccount() : bool
        {
        }
        public function setAmendedDebtorAccount(bool $status) : void
        {
        }
        public function setFinalCollectionDate(\DateTime $finalCollectionDate) : void
        {
        }
        public function getFinalCollectionDate() : ?\DateTime
        {
        }
        public function setOriginalDebtorIban(string $originalDebtorIban) : void
        {
        }
        public function getOriginalDebtorIban() : ?string
        {
        }
        public function setOriginalMandateId(string $originalMandateId) : void
        {
        }
        public function getOriginalMandateId() : ?string
        {
        }
        public function setMandateId(string $mandateId) : void
        {
        }
        public function getMandateId() : ?string
        {
        }
        public function setMandateSignDate(\DateTime $mandateSignDate) : void
        {
        }
        public function getMandateSignDate() : ?\DateTime
        {
        }
        public function getDebitorName() : string
        {
        }
    }
}
namespace Digitick\Sepa\TransferFile\Factory {
    class TransferFileFacadeFactory
    {
        /**
         * @param string $uniqueMessageIdentification Maximum length: 35. Reference Number of the bulk.
         *                                            Part of the duplication check (unique daily reference).
         *                                            The first 8 or 11 characters of <Msgld> must match the BIC of the
         *                                            Instructing Agent. The rest of the field can be freely defined.
         */
        public static function createDirectDebit(string $uniqueMessageIdentification, string $initiatingPartyName, string $painFormat = 'pain.008.002.02') : \Digitick\Sepa\TransferFile\Facade\CustomerDirectDebitFacade
        {
        }
        public static function createDirectDebitWithGroupHeader(\Digitick\Sepa\GroupHeader $groupHeader, string $painFormat = 'pain.008.002.02') : \Digitick\Sepa\TransferFile\Facade\CustomerDirectDebitFacade
        {
        }
        public static function createCustomerCredit(string $uniqueMessageIdentification, string $initiatingPartyName, string $painFormat = 'pain.001.002.03') : \Digitick\Sepa\TransferFile\Facade\CustomerCreditFacade
        {
        }
        public static function createCustomerCreditWithGroupHeader(\Digitick\Sepa\GroupHeader $groupHeader, string $painFormat = 'pain.001.002.03') : \Digitick\Sepa\TransferFile\Facade\CustomerCreditFacade
        {
        }
    }
}
namespace Digitick\Sepa\TransferFile {
    interface TransferFileInterface
    {
        public function __construct(\Digitick\Sepa\GroupHeader $groupHeader);
        public function getGroupHeader() : \Digitick\Sepa\GroupHeader;
        /**
         * Validate the transferfile
         *
         * @throws InvalidTransferFileConfiguration
         * @throws InvalidTransferTypeException
         */
        public function validate() : void;
        public function accept(\Digitick\Sepa\DomBuilder\DomBuilderInterface $domBuilder) : void;
    }
    abstract class BaseTransferFile implements \Digitick\Sepa\TransferFile\TransferFileInterface
    {
        /**
         * @var GroupHeader
         */
        protected $groupHeader;
        /**
         * @var PaymentInformation[]
         */
        protected $paymentInformations = [];
        public function __construct(\Digitick\Sepa\GroupHeader $groupHeader)
        {
        }
        public function getGroupHeader() : \Digitick\Sepa\GroupHeader
        {
        }
        public function addPaymentInformation(\Digitick\Sepa\PaymentInformation $paymentInformation) : void
        {
        }
        /**
         * @throws InvalidTransferFileConfiguration
         */
        public function accept(\Digitick\Sepa\DomBuilder\DomBuilderInterface $domBuilder) : void
        {
        }
        /**
         * Update the group header with transaction informations collected by paymentinformation
         *
         * @throws InvalidTransferFileConfiguration
         */
        public function validate() : void
        {
        }
    }
    class CustomerCreditTransferFile extends \Digitick\Sepa\TransferFile\BaseTransferFile
    {
        public function addPaymentInformation(\Digitick\Sepa\PaymentInformation $paymentInformation) : void
        {
        }
        /**
         * Validate the transferfile
         *
         * @throws InvalidTransferFileConfiguration
         * @throws InvalidTransferTypeException
         */
        public function validate() : void
        {
        }
    }
}
namespace Digitick\Sepa\TransferFile\Facade {
    interface CustomerTransferFileFacadeInterface
    {
        /**
         * @throws InvalidArgumentException
         */
        public function addPaymentInfo(string $paymentName, array $paymentInformation) : \Digitick\Sepa\PaymentInformation;
        /**
         * @throws InvalidArgumentException
         */
        public function addTransfer(string $paymentName, array $transferInformation) : \Digitick\Sepa\TransferInformation\TransferInformationInterface;
        public function asXML() : string;
    }
    abstract class BaseCustomerTransferFileFacade implements \Digitick\Sepa\TransferFile\Facade\CustomerTransferFileFacadeInterface
    {
        /**
         * @var TransferFileInterface
         */
        protected $transferFile;
        /**
         * @var BaseDomBuilder
         */
        protected $domBuilder;
        /**
         * @var array
         */
        protected $payments = array();
        public function __construct(\Digitick\Sepa\TransferFile\TransferFileInterface $transferFile, \Digitick\Sepa\DomBuilder\BaseDomBuilder $domBuilder)
        {
        }
        /**
         * Return the payment info with the name passed by $paymentName.
         */
        public function getPaymentInfo(string $paymentName) : ?\Digitick\Sepa\PaymentInformation
        {
        }
        public function asXML() : string
        {
        }
        /**
         * @param array{dueDate: string|\DateTime} $paymentInformation
         *
         * @throws InvalidArgumentException if the dueDate is not valid
         */
        public function createDueDateFromPaymentInformation(array $paymentInformation, string $default = 'now') : \DateTime
        {
        }
    }
    /**
     * Class CustomerCreditFacade
     */
    class CustomerCreditFacade extends \Digitick\Sepa\TransferFile\Facade\BaseCustomerTransferFileFacade
    {
        /**
         * @param array{
         *             id: string,
         *             debtorName: string,
         *             debtorAccountIBAN: string,
         *             debtorAgentBIC?: string,
         *             dueDate?: string|\DateTime,
         *             batchBooking?: bool
         *             } $paymentInformation
         *
         * @throws InvalidArgumentException
         */
        public function addPaymentInfo(string $paymentName, array $paymentInformation) : \Digitick\Sepa\PaymentInformation
        {
        }
        /**
         * @param array{
         *             amount: int,
         *             creditorIban: string,
         *             creditorName: string,
         *             creditorBic?: string,
         *             creditorReference?: string,
         *             remittanceInformation: string,
         *             endToEndId?: string,
         *             instructionId?: string
         *             } $transferInformation
         *
         * @throws InvalidArgumentException
         *
         * @return CustomerCreditTransferInformation
         */
        public function addTransfer(string $paymentName, array $transferInformation) : \Digitick\Sepa\TransferInformation\TransferInformationInterface
        {
        }
    }
    class CustomerDirectDebitFacade extends \Digitick\Sepa\TransferFile\Facade\BaseCustomerTransferFileFacade
    {
        /**
         * @param array{
         *             id: string,
         *             creditorName: string,
         *             creditorAccountIBAN: string,
         *             creditorAgentBIC?: string,
         *             seqType: string,
         *             creditorId: string,
         *             localInstrumentCode?: string,
         *             batchBooking?: bool,
         *             dueDate?: string|\DateTime
         *             } $paymentInformation
         *
         * @throws InvalidArgumentException
         */
        public function addPaymentInfo(string $paymentName, array $paymentInformation) : \Digitick\Sepa\PaymentInformation
        {
        }
        /**
         * @param array{
         *             amount: int,
         *             debtorIban: string,
         *             debtorBic?: string,
         *             debtorMandate: string,
         *             debtorMandateSignDate: string|\DateTime,
         *             remittanceInformation: string,
         *             creditorReference?: string,
         *             endToEndId?: string,
         *             originalMandateId?: string
         *             originalDebtorIban?: string
         *             amendedDebtorAccount?: string
         *             postCode?: string
         *             townName?: string
         *             streetName?: string
         *             buildingNumber?: string
         *             debtorCountry?: string
         *             debtorAdrLine?: string
         *             } $transferInformation
         *
         * @return CustomerDirectDebitTransferInformation
         *
         * @throws InvalidArgumentException
         */
        public function addTransfer(string $paymentName, array $transferInformation) : \Digitick\Sepa\TransferInformation\TransferInformationInterface
        {
        }
    }
}
namespace Digitick\Sepa\TransferFile {
    class CustomerDirectDebitTransferFile extends \Digitick\Sepa\TransferFile\BaseTransferFile
    {
        public function addPaymentInformation(\Digitick\Sepa\PaymentInformation $paymentInformation) : void
        {
        }
        /**
         * Validate the transferfile
         *
         * @throws InvalidTransferFileConfiguration
         * @throws InvalidTransferTypeException
         */
        public function validate() : void
        {
        }
    }
}
namespace Digitick\Sepa\DomBuilder {
    class DomBuilderFactory
    {
        /**
         * @throws InvalidArgumentException
         **/
        public static function createDomBuilder(\Digitick\Sepa\TransferFile\TransferFileInterface $transferFile, string $painFormat = '', $withSchemaLocation = true) : \Digitick\Sepa\DomBuilder\DomBuilderInterface
        {
        }
    }
    /**
     * Used to build the Dom-structure for the different types of SEPA files
     *
     * Class DomBuilderInterface
     * @package Digitick\Sepa\DomBuilder
     */
    interface DomBuilderInterface
    {
        public function asXml() : string;
        /**
         * Build the root of the document
         */
        public function visitTransferFile(\Digitick\Sepa\TransferFile\TransferFileInterface $transferFile) : void;
        /**
         * Add GroupHeader Information to the document
         */
        public function visitGroupHeader(\Digitick\Sepa\GroupHeader $groupHeader) : void;
        /**
         * Crawl PaymentInformation containing the Transactions
         */
        public function visitPaymentInformation(\Digitick\Sepa\PaymentInformation $paymentInformation) : void;
        /**
         * Crawl Transactions
         */
        public function visitTransferInformation(\Digitick\Sepa\TransferInformation\TransferInformationInterface $transactionInformation) : void;
    }
    abstract class BaseDomBuilder implements \Digitick\Sepa\DomBuilder\DomBuilderInterface
    {
        /**
         * @var \DOMDocument
         */
        protected $doc;
        /**
         * @var \DOMElement
         */
        protected $root;
        /**
         * @var \DOMElement|null
         */
        protected $currentTransfer;
        /**
         * @var \DOMELement|null
         */
        protected $currentPayment;
        /**
         * @var string
         */
        protected $painFormat;
        /**
         * @param string $painFormat Supported format: 'pain.001.002.03', 'pain.001.001.03', 'pain.008.002.02', 'pain.008.001.02'
         * @param bool $withSchemaLocation define if xsi:schemaLocation attribute is added to root
         */
        public function __construct(string $painFormat, bool $withSchemaLocation = true)
        {
        }
        protected function createElement(string $name, ?string $value = null) : \DOMElement
        {
        }
        public function asXml() : string
        {
        }
        /**
         * Format an integer as a monetary value.
         */
        protected function intToCurrency(int $amount) : string
        {
        }
        /**
         * Add GroupHeader Information to the document
         */
        public function visitGroupHeader(\Digitick\Sepa\GroupHeader $groupHeader) : void
        {
        }
        protected function getFinancialInstitutionElement(?string $bic) : \DOMElement
        {
        }
        public function getIbanElement(string $iban) : \DOMElement
        {
        }
        /**
         * Create remittance element with un-structured message.
         */
        public function getRemittenceElement(string $message) : \DOMElement
        {
        }
        /**
         * Create remittance element with structured creditor reference.
         */
        public function getStructuredRemittanceElement(\Digitick\Sepa\TransferInformation\TransferInformationInterface $transactionInformation) : \DOMElement
        {
        }
    }
    /**
     * Class CustomerCreditTransferDomBuilder
     */
    class CustomerCreditTransferDomBuilder extends \Digitick\Sepa\DomBuilder\BaseDomBuilder
    {
        function __construct(string $painFormat = 'pain.001.002.03', $withSchemaLocation = true)
        {
        }
        /**
         * Build the root of the document
         */
        public function visitTransferFile(\Digitick\Sepa\TransferFile\TransferFileInterface $transferFile) : void
        {
        }
        /**
         * Crawl PaymentInformation containing the Transactions
         */
        public function visitPaymentInformation(\Digitick\Sepa\PaymentInformation $paymentInformation) : void
        {
        }
        /**
         * Crawl Transactions
         */
        public function visitTransferInformation(\Digitick\Sepa\TransferInformation\TransferInformationInterface $transactionInformation) : void
        {
        }
        /**
         * Add the specific OrgId element for the format 'pain.001.001.03'
         */
        public function visitGroupHeader(\Digitick\Sepa\GroupHeader $groupHeader) : void
        {
        }
        /**
         * Creates Id element used in Group header and Debtor elements.
         *
         * @param  string      $id         Unique and unambiguous identification of a party. Length 1-35
         * @param  string|null $schemeCode Name of the identification scheme. Length 1-4 or null
         * @param  string|null $issr       Issuer
         */
        protected function getOrganizationIdentificationElement(string $id, ?string $schemeCode = null, ?string $issr = null) : \DOMElement
        {
        }
        /**
         * Appends an address node to the passed dom element containing country and unstructured address lines.
         * Does nothing if no address exists in $transactionInformation.
         */
        protected function appendAddressToDomElement(\DOMElement $creditor, \Digitick\Sepa\TransferInformation\CustomerCreditTransferInformation $transactionInformation) : void
        {
        }
    }
    class CustomerDirectDebitTransferDomBuilder extends \Digitick\Sepa\DomBuilder\BaseDomBuilder
    {
        public function __construct(string $painFormat = 'pain.008.002.02', $withSchemaLocation = true)
        {
        }
        /**
         * Build the root of the document
         */
        public function visitTransferFile(\Digitick\Sepa\TransferFile\TransferFileInterface $transferFile) : void
        {
        }
        /**
         * Crawl PaymentInformation containing the Transactions
         */
        public function visitPaymentInformation(\Digitick\Sepa\PaymentInformation $paymentInformation) : void
        {
        }
        /**
         * Crawl Transactions
         */
        public function visitTransferInformation(\Digitick\Sepa\TransferInformation\TransferInformationInterface $transactionInformation) : void
        {
        }
        /**
         * Add the specific OrgId element for the format 'pain.008.001.02'
         */
        public function visitGroupHeader(\Digitick\Sepa\GroupHeader $groupHeader) : void
        {
        }
    }
}
namespace Digitick\Sepa {
    class GroupHeader
    {
        /**
         * Whether this is a test Transaction
         *
         * @var bool
         */
        protected $isTest;
        /**
         * @var string Unambiguously identify the message.
         */
        protected $messageIdentification;
        /**
         * The initiating Party for this payment
         *
         * @var string|null
         */
        protected $initiatingPartyId;
        /**
         * Name of the identification scheme, in a coded form as published in an external list. 1-4 characters.
         *
         * @var string|null
         */
        public $initiatingPartyIdentificationScheme;
        /**
         * The Issuer.
         *
         * @var string|null
         */
        protected $issuer;
        /**
         * @var int
         */
        protected $numberOfTransactions = 0;
        /**
         * @var int
         */
        protected $controlSumCents = 0;
        /**
         * @var string
         */
        protected $initiatingPartyName;
        /**
         * @var \DateTime
         */
        protected $creationDateTime;
        /**
         * @var string
         */
        protected $creationDateTimeFormat = 'Y-m-d\\TH:i:s\\Z';
        /**
         * @param string $messageIdentification Maximum length: 35. Reference Number of the bulk.
         *                                      Part of the duplication check (unique daily reference).
         *                                      The first 8 or 11 characters of <Msgld> must match the BIC of the
         *                                      Instructing Agent. The rest of the field can be freely defined.
         */
        public function __construct(string $messageIdentification, string $initiatingPartyName, bool $isTest = false)
        {
        }
        public function accept(\Digitick\Sepa\DomBuilder\DomBuilderInterface $domBuilder) : void
        {
        }
        public function setControlSumCents(int $controlSumCents) : void
        {
        }
        public function getControlSumCents() : int
        {
        }
        public function setInitiatingPartyId(string $initiatingPartyId) : void
        {
        }
        public function getInitiatingPartyId() : ?string
        {
        }
        public function setInitiatingPartyIdentificationScheme(string $scheme) : void
        {
        }
        public function getInitiatingPartyIdentificationScheme() : ?string
        {
        }
        public function getIssuer() : ?string
        {
        }
        public function setIssuer(string $issuer) : void
        {
        }
        public function setInitiatingPartyName(string $initiatingPartyName) : void
        {
        }
        public function getInitiatingPartyName() : string
        {
        }
        public function setIsTest(bool $isTest) : void
        {
        }
        public function getIsTest() : bool
        {
        }
        public function setMessageIdentification(string $messageIdentification) : void
        {
        }
        public function getMessageIdentification() : string
        {
        }
        public function setNumberOfTransactions(int $numberOfTransactions) : void
        {
        }
        public function getNumberOfTransactions() : int
        {
        }
        public function getCreationDateTime() : \DateTime
        {
        }
        public function setCreationDateTimeFormat(string $creationDateTimeFormat) : void
        {
        }
        public function getCreationDateTimeFormat() : string
        {
        }
    }
}
namespace Vendidero\Germanized\Utilities {
    /**
     * A class of utilities for dealing with numbers.
     */
    final class NumberUtil
    {
        /**
         * Round a number using the built-in `round` function, but unless the value to round is numeric
         * (a number or a string that can be parsed as a number), apply 'floatval' first to it
         * (so it will convert it to 0 in most cases).
         *
         * This is needed because in PHP 7 applying `round` to a non-numeric value returns 0,
         * but in PHP 8 it throws an error. Specifically, in WooCommerce we have a few places where
         * round('') is often executed.
         *
         * @param mixed $val The value to round.
         * @param int   $precision The optional number of decimal digits to round to.
         * @param int   $mode A constant to specify the mode in which rounding occurs.
         *
         * @return float The value rounded to the given precision as a float, or the supplied default value.
         */
        public static function round($val, int $precision = 0, int $mode = PHP_ROUND_HALF_UP) : float
        {
        }
        /**
         * Rounds a float to the current price decimal precision.
         *
         * @param $val
         *
         * @return float
         */
        public static function round_to_precision($val, $precision = '')
        {
        }
    }
}
namespace Vendidero\Germanized {
    /**
     * Autoloader class.
     *
     * @since 3.7.0
     */
    class Autoloader
    {
        /**
         * Require the autoloader and return the result.
         *
         * If the autoloader is not present, let's log the failure and display a nice admin notice.
         *
         * @return boolean
         */
        public static function init()
        {
        }
        /**
         * If the autoloader is missing, add an admin notice.
         */
        protected static function missing_autoloader()
        {
        }
    }
    /**
     * Packages class.
     *
     * @since 3.0.0
     */
    class Packages
    {
        /**
         * Array of package names and their main package classes.
         *
         * @var array Key is the package name/directory, value is the main package class which handles init.
         */
        protected static $packages = array('woocommerce-germanized-shipments' => '\\Vendidero\\Germanized\\Shipments\\Package', 'woocommerce-germanized-dhl' => '\\Vendidero\\Germanized\\DHL\\Package');
        /**
         * Init the package loader.
         *
         * @since 3.7.0
         */
        public static function init()
        {
        }
        public static function get_packages()
        {
        }
        /**
         * Callback for WordPress init hook.
         */
        public static function on_init()
        {
        }
        /**
         * Checks a package exists by looking for it's directory.
         *
         * @param string $package Package name.
         *
         * @return boolean
         */
        public static function package_exists($package)
        {
        }
        /**
         * Loads packages after plugins_loaded hook.
         *
         * Each package should include an init file which loads the package so it can be used by core.
         */
        protected static function load_packages()
        {
        }
        /**
         * If a package is missing, add an admin notice.
         *
         * @param string $package Package name.
         */
        protected static function missing_package($package)
        {
        }
    }
    /**
     * Packages class.
     *
     * @since 3.7.0
     */
    class Shopmark
    {
        protected $default_priority = 10;
        protected $callback = null;
        protected $default_filter = '';
        protected $location = '';
        protected $type = '';
        protected $default_enabled = true;
        public function __construct($args = array())
        {
        }
        protected function get_hook_prefix()
        {
        }
        protected function get_option($default = '', $suffix = '')
        {
        }
        public function get_option_name($suffix = '')
        {
        }
        public function get_type()
        {
        }
        public function get_location()
        {
        }
        public function get_default_priority()
        {
        }
        public function get_default_filter()
        {
        }
        public function get_number_of_params()
        {
        }
        public function reset_options()
        {
        }
        public function get_callback()
        {
        }
        public function get_is_action()
        {
        }
        public function get_priority()
        {
        }
        public function get_filter()
        {
        }
        public function is_default_enabled()
        {
        }
        public function is_enabled()
        {
        }
        public function execute()
        {
        }
        public function remove()
        {
        }
    }
    /**
     * Useful to install standalone plugins associated with Germanized, e.g.
     * One Stop Shop for WooCommerce.
     */
    class PluginsHelper
    {
        public static function init()
        {
        }
        /**
         * After the first successful connection to TS new gen has been detected, remove the migration note.
         *
         * @return void
         */
        public static function observe_ts_integration_connect()
        {
        }
        public static function needs_trusted_shops_migration()
        {
        }
        /**
         * Delete the option which indicates that the OSS plugin needs to be installed
         * after a Germanized update.
         *
         * @param $plugin
         *
         * @return void
         */
        public static function observe_plugin_activation($plugin)
        {
        }
        /**
         * Get the path to the plugin file relative to the plugins directory from the plugin slug.
         *
         * E.g. 'woocommerce' returns 'woocommerce/woocommerce.php'
         *
         * @param string $slug Plugin slug to get path for.
         *
         * @return string|false
         */
        public static function get_plugin_path_from_slug($slug)
        {
        }
        protected static function get_plugin_slug($path)
        {
        }
        /**
         * Get an array of installed plugin slugs.
         *
         * @return array
         */
        public static function get_installed_plugin_slugs()
        {
        }
        /**
         * Get an array of installed plugins with their file paths as a key value pair.
         *
         * @return array
         */
        public static function get_installed_plugins_paths()
        {
        }
        /**
         * Get an array of active plugin slugs.
         *
         * @return array
         */
        public static function get_active_plugin_slugs()
        {
        }
        /**
         * Checks if a plugin is installed.
         *
         * @param string $plugin Path to the plugin file relative to the plugins directory or the plugin directory name.
         *
         * @return bool
         */
        public static function is_plugin_installed($plugin)
        {
        }
        protected static function get_plugins()
        {
        }
        protected static function get_active_plugins()
        {
        }
        /**
         * Checks if a plugin is active.
         *
         * @param string $plugin Path to the plugin file relative to the plugins directory or the plugin directory name.
         *
         * @return bool
         */
        public static function is_plugin_active($plugin)
        {
        }
        /**
         * @return bool
         */
        public static function is_oss_plugin_active()
        {
        }
        /**
         * @return bool
         */
        public static function is_oss_plugin_installed()
        {
        }
        /**
         * @return bool
         */
        public static function is_trusted_shops_plugin_active()
        {
        }
        /**
         * @return bool
         */
        public static function is_woocommerce_plugin_active()
        {
        }
        /**
         * @return bool
         */
        public static function is_pro_version_active()
        {
        }
        /**
         * Get plugin name.
         *
         * @param string $plugin Path to the plugin file relative to the plugins directory or the plugin directory name.
         *
         * @return array|false
         */
        public static function get_plugin_name($plugin)
        {
        }
        /**
         * Get plugin data.
         *
         * @param string $plugin Path to the plugin file relative to the plugins directory or the plugin directory name.
         *
         * @return array|false
         */
        public static function get_plugin_data($plugin)
        {
        }
        /**
         * @param $version
         *
         * @return string
         */
        protected static function parse_version($version)
        {
        }
        public static function get_major_version($version)
        {
        }
        /**
         * This method removes additional accuracy from $ver2 if this version is more accurate than $main_ver.
         *
         * @param $main_ver
         * @param $ver2
         * @param $operator
         *
         * @return bool
         */
        public static function compare_versions($main_ver, $ver2, $operator)
        {
        }
        public static function get_plugin_version($plugin)
        {
        }
        /**
         * @param $plugin
         *
         * @return bool
         */
        protected static function install_and_activate_plugin($plugin)
        {
        }
        /**
         * @return bool
         */
        public static function install_or_activate_extension($extension_name)
        {
        }
        /**
         * @return bool
         */
        public static function install_or_activate_oss()
        {
        }
        /**
         * @return bool
         */
        public static function install_or_activate_trusted_shops()
        {
        }
        public static function get_plugin_manual_install_message($plugin)
        {
        }
        /**
         * Install an array of plugins.
         *
         * @param array $plugins Plugins to install.
         * @return array|\WP_Error
         */
        protected static function install_plugins($plugins)
        {
        }
        public static function is_plugin_whitelisted($plugin)
        {
        }
        protected static function get_whitelisted_plugins()
        {
        }
        /**
         * Activate the requested plugins.
         *
         * @param array $plugins Plugins.
         * @return array Plugin Status
         */
        protected static function activate_plugins($plugins)
        {
        }
        public static function filter_bundled_plugin_names($plugins)
        {
        }
        public static function clear_cache()
        {
        }
    }
    /**
     * Packages class.
     *
     * @since 3.7.0
     */
    class Shopmarks
    {
        protected static $shopmarks = array();
        protected static function register_single_product()
        {
        }
        protected static function register_single_product_grouped()
        {
        }
        protected static function register_product_loop()
        {
        }
        protected static function register_product_block()
        {
        }
        protected static function register_cart()
        {
        }
        protected static function register_mini_cart()
        {
        }
        protected static function register_checkout()
        {
        }
        protected static function register_order()
        {
        }
        /**
         * @param Shopmark $shopmark1
         * @param Shopmark $shopmark2
         *
         * @return int
         */
        protected static function uasort_callback($shopmark1, $shopmark2)
        {
        }
        public static function get_locations()
        {
        }
        public static function get_location_title($location)
        {
        }
        /**
         * @param string $location
         *
         * @return string[]
         */
        public static function get_filters($location = 'single_product')
        {
        }
        public static function get_types($location = 'single_product')
        {
        }
        public static function get_type_title($location, $type)
        {
        }
        public static function get_filter_title($location, $filter_name)
        {
        }
        public static function get_filter($location, $filter_name)
        {
        }
        public static function get_filter_options($location)
        {
        }
        public static function register($location = '')
        {
        }
        /**
         * @return Shopmark[]
         */
        public static function get($location = '')
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments\Interfaces {
    /**
     * ShipmentLabel class.
     */
    interface ShipmentLabel
    {
        /**
         * Return the unique identifier for the label
         *
         * @return mixed
         */
        public function get_id();
        public function get_download_url($args = array());
        public function supports_additional_file_type($file_type);
        public function get_additional_file_types();
        /**
         * Returns the (local) label file path. False in case the label is not stored locally.
         *
         * @return bool|string
         */
        public function get_file($file_type = '');
        /**
         * Returns the label number which is used as a tracking id for the corresponding shipment.
         *
         * @return string
         */
        public function get_number();
        /**
         * Checks whether the label already has a valid number or not.
         *
         * @return boolean
         */
        public function has_number();
        public function get_product_id();
        public function get_services();
        /**
         * Returns the label shipment type, e.g. simple or return.
         *
         * @return string
         */
        public function get_type();
        public function get_parent_id();
        public function get_shipping_provider_instance();
        /**
         * Saves the label to DB.
         */
        public function save();
        /**
         * Delete the label from DB.
         */
        public function delete($force = false);
        /**
         * Returns whether the label is trackable or not.
         *
         * @return boolean
         */
        public function is_trackable();
        public function supports_third_party_email_notification();
        public function set_props($props);
        public function update_meta_data($key, $value, $meta_id = 0);
        /**
         * Get the label from the API and store it locally
         *
         * @return ShipmentError|true
         */
        public function fetch();
    }
}
namespace Vendidero\Germanized\Shipments\Labels {
    /**
     * Label class.
     */
    class Label extends \WC_Data implements \Vendidero\Germanized\Shipments\Interfaces\ShipmentLabel
    {
        /**
         * This is the name of this object type.
         *
         * @since 3.0.0
         * @var string
         */
        protected $object_type = 'shipment_label';
        /**
         * Contains the data store name.
         *
         * @var string
         */
        protected $data_store_name = 'shipment-label';
        /**
         * Stores meta in cache for future reads.
         * A group must be set to to enable caching.
         *
         * @since 3.0.0
         * @var string
         */
        protected $cache_group = 'shipment-labels';
        /**
         * Stores shipment data.
         *
         * @var array
         */
        protected $data = array('date_created' => null, 'shipment_id' => 0, 'product_id' => '', 'parent_id' => 0, 'number' => '', 'shipping_provider' => '', 'weight' => '', 'net_weight' => '', 'length' => '', 'width' => '', 'height' => '', 'path' => '', 'created_via' => '', 'services' => array());
        public function __construct($data = 0)
        {
        }
        public function get_type()
        {
        }
        /**
         * Merge changes with data and clear.
         * Overrides WC_Data::apply_changes.
         * array_replace_recursive does not work well for license because it merges domains registered instead
         * of replacing them.
         *
         * @since 3.2.0
         */
        public function apply_changes()
        {
        }
        /**
         * Prefix for action and filter hooks on data.
         *
         * @since  3.0.0
         * @return string
         */
        protected function get_general_hook_prefix()
        {
        }
        /**
         * Prefix for action and filter hooks on data.
         *
         * @since  3.0.0
         * @return string
         */
        protected function get_hook_prefix()
        {
        }
        /**
         * Return the date this license was created.
         *
         * @since  3.0.0
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return WC_DateTime|null object if the date is set or null if there is no date.
         */
        public function get_date_created($context = 'view')
        {
        }
        public function get_shipment_id($context = 'view')
        {
        }
        public function get_shipping_provider($context = 'view')
        {
        }
        public function get_shipping_provider_instance()
        {
        }
        public function get_parent_id($context = 'view')
        {
        }
        public function get_created_via($context = 'view')
        {
        }
        public function get_product_id($context = 'view')
        {
        }
        public function get_number($context = 'view')
        {
        }
        public function has_number()
        {
        }
        /**
         * Returns the weight in kg
         *
         * @param string $context
         *
         * @return string
         */
        public function get_weight($context = 'view')
        {
        }
        public function get_net_weight($context = 'view')
        {
        }
        /**
         * Returns the length in cm
         *
         * @param string $context
         *
         * @return string
         */
        public function get_length($context = 'view')
        {
        }
        /**
         * Returns the width in cm
         *
         * @param string $context
         *
         * @return string
         */
        public function get_width($context = 'view')
        {
        }
        /**
         * Returns the height in cm
         *
         * @param string $context
         *
         * @return string
         */
        public function get_height($context = 'view')
        {
        }
        public function get_dimensions($context = 'view')
        {
        }
        public function has_dimensions()
        {
        }
        public function get_path($context = 'view', $file_path = '')
        {
        }
        public function get_services($context = 'view')
        {
        }
        public function has_service($service)
        {
        }
        public function get_shipment()
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Setters
        |--------------------------------------------------------------------------
        */
        /**
         * Set the date this license was last updated.
         *
         * @since  1.0.0
         * @param  string|integer|null $date UTC timestamp, or ISO 8601 DateTime. If the DateTime string has no timezone or offset, WordPress site timezone will be assumed. Null if their is no date.
         */
        public function set_date_created($date = null)
        {
        }
        public function set_number($number)
        {
        }
        public function set_product_id($number)
        {
        }
        public function set_shipping_provider($slug)
        {
        }
        public function set_parent_id($id)
        {
        }
        public function set_created_via($created_via)
        {
        }
        public function set_weight($weight)
        {
        }
        public function set_net_weight($weight)
        {
        }
        public function set_width($width)
        {
        }
        public function set_length($length)
        {
        }
        public function set_height($height)
        {
        }
        public function set_path($path, $file_type = '')
        {
        }
        public function set_services($services)
        {
        }
        /**
         * Returns linked children labels.
         *
         * @return ShipmentLabel[]
         */
        public function get_children()
        {
        }
        public function has_children()
        {
        }
        public function add_service($service)
        {
        }
        public function remove_service($service)
        {
        }
        public function supports_additional_file_type($file_type)
        {
        }
        public function get_additional_file_types()
        {
        }
        public function get_file($file_type = '')
        {
        }
        protected function get_new_filename($file_type = '')
        {
        }
        public function get_filename($file_type = '')
        {
        }
        protected function get_file_by_path($file)
        {
        }
        public function set_shipment_id($shipment_id)
        {
        }
        /**
         * @param Shipment $shipment
         */
        public function set_shipment(&$shipment)
        {
        }
        public function get_download_url($args = array())
        {
        }
        /**
         * @return ShipmentError|true
         */
        public function fetch()
        {
        }
        /**
         * @param $stream
         * @param string $file_type
         *
         * @return false|string
         */
        public function upload_label_file($stream, $file_type = '')
        {
        }
        /**
         * @param $url
         * @param string $file_type
         *
         * @return false|string
         */
        public function download_label_file($url, $file_type = '')
        {
        }
        public function is_trackable()
        {
        }
        public function supports_third_party_email_notification()
        {
        }
        /**
         * Gets a prop for a getter method.
         *
         * @since  3.0.0
         * @param  string $prop Name of prop to get.
         * @param  string $address billing or shipping.
         * @param  string $context What the value is for. Valid values are view and edit.
         * @return mixed
         */
        protected function get_address_prop($prop, $address = 'sender_address', $context = 'view')
        {
        }
        protected function round_customs_item_weight($value, $precision = 0)
        {
        }
        protected function get_per_item_weights($total_weight, $item_weights, $shipment_items)
        {
        }
        public function get_customs_data($max_desc_length = 255)
        {
        }
    }
}
namespace Vendidero\Germanized\DHL\Label {
    abstract class Label extends \Vendidero\Germanized\Shipments\Labels\Label
    {
        protected $legacy = false;
        public function __construct($data = 0, $legacy = false)
        {
        }
        public function get_dhl_product($context = 'view')
        {
        }
        /**
         * Returns linked children labels.
         *
         * @return ShipmentLabel[]
         */
        public function get_children()
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Setters
        |--------------------------------------------------------------------------
        */
        protected function set_time_prop($prop, $value)
        {
        }
        public function is_legacy()
        {
        }
        public function get_product_id($context = 'view')
        {
        }
        public function get_preferred_time()
        {
        }
        public function get_preferred_time_start($context = 'view')
        {
        }
        public function get_preferred_time_end($context = 'view')
        {
        }
        public function get_preferred_formatted_time()
        {
        }
        public function set_preferred_time_start($time)
        {
        }
        public function set_preferred_time_end($time)
        {
        }
        protected function get_file_by_path($file)
        {
        }
    }
    /**
     * Deutsche Post Label class.
     */
    class DeutschePost extends \Vendidero\Germanized\DHL\Label\Label
    {
        /**
         * Stores product data.
         *
         * @var array
         */
        protected $extra_data = array('page_format' => '', 'position_x' => 1, 'position_y' => 1, 'shop_order_id' => '', 'stamp_total' => 0, 'voucher_id' => '', 'original_url' => '', 'manifest_url' => '', 'wp_int_awb' => '', 'wp_int_barcode' => '');
        public function __construct($data = 0, $legacy = false)
        {
        }
        public function get_type()
        {
        }
        public function get_shipping_provider($context = 'view')
        {
        }
        public function get_number($context = 'view')
        {
        }
        public function get_page_format($context = 'view')
        {
        }
        public function get_position_x($context = 'view')
        {
        }
        public function get_position_y($context = 'view')
        {
        }
        public function get_wp_int_awb($context = 'view')
        {
        }
        public function get_wp_int_barcode($context = 'view')
        {
        }
        public function get_services($context = 'view')
        {
        }
        public function set_services($services)
        {
        }
        public function get_additional_services($context = 'view')
        {
        }
        public function set_additional_services($value)
        {
        }
        public function set_page_format($value)
        {
        }
        public function set_position_x($value)
        {
        }
        public function set_position_y($value)
        {
        }
        public function set_wp_int_awb($value)
        {
        }
        public function set_wp_int_barcode($value)
        {
        }
        public function get_stamp_total($context = 'view')
        {
        }
        public function set_stamp_total($value)
        {
        }
        public function get_shop_order_id($context = 'view')
        {
        }
        public function set_shop_order_id($value)
        {
        }
        public function get_voucher_id($context = 'view')
        {
        }
        public function set_voucher_id($value)
        {
        }
        public function get_original_url($context = 'view')
        {
        }
        public function set_original_url($value)
        {
        }
        public function get_manifest_url($context = 'view')
        {
        }
        public function set_manifest_url($value)
        {
        }
        public function is_warenpost_international()
        {
        }
        public function is_trackable()
        {
        }
        /**
         * @return \WP_Error|true
         */
        public function fetch()
        {
        }
        public function delete($force_delete = false)
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments\Interfaces {
    /**
     * ShipmentLabel class.
     */
    interface ShipmentReturnLabel extends \Vendidero\Germanized\Shipments\Interfaces\ShipmentLabel
    {
    }
}
namespace Vendidero\Germanized\Shipments\Labels {
    /**
     * Label class.
     */
    class ReturnLabel extends \Vendidero\Germanized\Shipments\Labels\Label implements \Vendidero\Germanized\Shipments\Interfaces\ShipmentReturnLabel
    {
        /**
         * Stores shipment data.
         *
         * @var array
         */
        protected $extra_data = array('sender_address' => array());
        public function get_type()
        {
        }
        public function get_sender_address($context = 'view')
        {
        }
        /**
         * Gets a prop for a getter method.
         *
         * @since  3.0.0
         * @param  string $prop Name of prop to get.
         * @param  string $address billing or shipping.
         * @param  string $context What the value is for. Valid values are view and edit.
         * @return mixed
         */
        protected function get_sender_address_prop($prop, $context = 'view')
        {
        }
        public function get_sender_address_2($context = 'view')
        {
        }
        public function get_sender_address_addition()
        {
        }
        public function get_sender_street($context = 'view')
        {
        }
        public function get_sender_street_number($context = 'view')
        {
        }
        public function get_sender_street_addition($context = 'view')
        {
        }
        public function get_sender_company($context = 'view')
        {
        }
        public function get_sender_name($context = 'view')
        {
        }
        public function get_sender_formatted_full_name()
        {
        }
        public function get_sender_postcode($context = 'view')
        {
        }
        public function get_sender_city($context = 'view')
        {
        }
        public function get_sender_state($context = 'view')
        {
        }
        public function get_sender_country($context = 'view')
        {
        }
        public function get_sender_phone($context = 'view')
        {
        }
        public function get_sender_email($context = 'view')
        {
        }
        public function set_sender_address($value)
        {
        }
    }
}
namespace Vendidero\Germanized\DHL\Label {
    abstract class ReturnLabel extends \Vendidero\Germanized\Shipments\Labels\ReturnLabel
    {
        protected $legacy = false;
        public function __construct($data = 0, $legacy = false)
        {
        }
        public function is_legacy()
        {
        }
        public function get_product_id($context = 'view')
        {
        }
        public function get_dhl_product($context = 'view')
        {
        }
        protected function get_file_by_path($file)
        {
        }
    }
    /**
     * DHL ReturnLabel class.
     */
    class DHLReturn extends \Vendidero\Germanized\DHL\Label\ReturnLabel
    {
        /**
         * Stores product data.
         *
         * @var array
         */
        protected $extra_data = array('receiver_slug' => '', 'sender_address' => array());
        protected function get_hook_prefix()
        {
        }
        public function get_type()
        {
        }
        public function get_shipping_provider($context = 'view')
        {
        }
        public function get_receiver_id()
        {
        }
        public function get_receiver_slug($context = 'view')
        {
        }
        public function set_receiver_slug($receiver_slug)
        {
        }
        /**
         * @return \WP_Error|true
         */
        public function fetch()
        {
        }
    }
    /**
     * DHL ReturnLabel class.
     */
    class DHLInlayReturn extends \Vendidero\Germanized\DHL\Label\DHLReturn
    {
        public function get_type()
        {
        }
    }
    /**
     * DHL ReturnLabel class.
     */
    class DHL extends \Vendidero\Germanized\DHL\Label\Label
    {
        /**
         * Stores product data.
         *
         * @var array
         */
        protected $extra_data = array('default_path' => '', 'export_path' => '', 'preferred_day' => '', 'preferred_location' => '', 'preferred_neighbor' => '', 'preferred_delivery_type' => '', 'ident_date_of_birth' => '', 'ident_min_age' => '', 'visual_min_age' => '', 'email_notification' => 'no', 'has_inlay_return' => 'no', 'codeable_address_only' => 'no', 'duties' => '', 'endorsement' => 'return', 'return_address' => array(), 'cod_total' => 0, 'cod_includes_additional_total' => 'no');
        public function get_type()
        {
        }
        public function get_shipping_provider($context = 'view')
        {
        }
        public function get_return_address($context = 'view')
        {
        }
        /**
         * Gets a prop for a getter method.
         *
         * @since  3.0.0
         * @param  string $prop Name of prop to get.
         * @param  string $address billing or shipping.
         * @param  string $context What the value is for. Valid values are view and edit.
         * @return mixed
         */
        protected function get_return_address_prop($prop, $context = 'view')
        {
        }
        public function get_return_street($context = 'view')
        {
        }
        public function get_return_street_number($context = 'view')
        {
        }
        public function get_return_company($context = 'view')
        {
        }
        public function get_return_name($context = 'view')
        {
        }
        public function get_return_formatted_full_name()
        {
        }
        public function get_return_postcode($context = 'view')
        {
        }
        public function get_return_city($context = 'view')
        {
        }
        public function get_return_state($context = 'view')
        {
        }
        public function get_return_country($context = 'view')
        {
        }
        public function get_return_phone($context = 'view')
        {
        }
        public function get_return_email($context = 'view')
        {
        }
        public function get_cod_total($context = 'view')
        {
        }
        public function get_cod_includes_additional_total($context = 'view')
        {
        }
        public function cod_includes_additional_total($context = 'view')
        {
        }
        public function get_duties($context = 'view')
        {
        }
        public function get_endorsement($context = 'view')
        {
        }
        public function get_preferred_day($context = 'view')
        {
        }
        public function get_preferred_delivery_type($context = 'view')
        {
        }
        public function get_preferred_location($context = 'view')
        {
        }
        public function get_preferred_neighbor($context = 'view')
        {
        }
        public function get_ident_date_of_birth($context = 'view')
        {
        }
        public function get_ident_min_age($context = 'view')
        {
        }
        public function get_visual_min_age($context = 'view')
        {
        }
        public function get_email_notification($context = 'view')
        {
        }
        public function has_email_notification()
        {
        }
        public function get_has_inlay_return($context = 'view')
        {
        }
        public function has_inlay_return()
        {
        }
        /**
         * Returns a directly linked return label.
         *
         * @return bool|DHLInlayReturn
         */
        public function get_inlay_return_label()
        {
        }
        /**
         * Checks whether the label has a directly linked return label.
         *
         * @return bool
         */
        public function has_inlay_return_label()
        {
        }
        public function get_codeable_address_only($context = 'view')
        {
        }
        public function codeable_address_only()
        {
        }
        public function set_return_address($value)
        {
        }
        public function set_cod_total($value)
        {
        }
        public function set_cod_includes_additional_total($value)
        {
        }
        public function set_duties($duties)
        {
        }
        public function set_endorsement($type)
        {
        }
        public function set_preferred_day($day)
        {
        }
        public function set_preferred_delivery_type($delivery_type)
        {
        }
        public function set_preferred_location($location)
        {
        }
        public function set_preferred_neighbor($neighbor)
        {
        }
        public function set_email_notification($value)
        {
        }
        public function set_has_inlay_return($value)
        {
        }
        public function set_codeable_address_only($value)
        {
        }
        public function set_ident_date_of_birth($date)
        {
        }
        public function set_ident_min_age($age)
        {
        }
        public function set_visual_min_age($age)
        {
        }
        /**
         * @return \WP_Error|true
         */
        public function fetch()
        {
        }
        public function delete($force_delete = false)
        {
        }
        public function get_additional_file_types()
        {
        }
        public function get_filename($file_type = '')
        {
        }
        public function get_file($file_type = '')
        {
        }
        public function get_path($context = 'view', $file_type = '')
        {
        }
        public function set_path($path, $file_type = '')
        {
        }
        public function get_default_file()
        {
        }
        public function get_default_filename()
        {
        }
        public function get_export_file()
        {
        }
        public function get_export_filename()
        {
        }
        public function set_default_path($path)
        {
        }
        public function set_export_path($path)
        {
        }
        public function get_default_path($context = 'view')
        {
        }
        public function get_export_path($context = 'view')
        {
        }
        public function is_trackable()
        {
        }
    }
    /**
     * DHL ReturnLabel class.
     */
    class DeutschePostReturn extends \Vendidero\Germanized\DHL\Label\DeutschePost implements \Vendidero\Germanized\Shipments\Interfaces\ShipmentReturnLabel
    {
        /**
         * Stores product data.
         *
         * @var array
         */
        protected $extra_data = array('page_format' => '', 'position_x' => 0, 'position_y' => 0, 'shop_order_id' => '', 'stamp_total' => 0, 'voucher_id' => '', 'original_url' => '', 'manifest_url' => '', 'sender_address' => array());
        protected function get_hook_prefix()
        {
        }
        public function get_type()
        {
        }
    }
}
namespace Vendidero\Germanized\DHL {
    /**
     * Shipment Order
     *
     * @class       WC_GZD_Shipment_Order
     * @version     1.0.0
     * @author      Vendidero
     */
    class Order
    {
        /**
         * The actual order item object
         *
         * @var object
         */
        protected $order;
        /**
         * @param WC_Customer $customer
         */
        public function __construct($order)
        {
        }
        /**
         * Returns the Woo WC_Order original object
         *
         * @return object|WC_Order
         */
        public function get_order()
        {
        }
        protected function get_dhl_props()
        {
        }
        protected function set_dhl_date_prop($prop, $value, $format = 'Y-m-d')
        {
        }
        protected function set_dhl_time_prop($prop, $value)
        {
        }
        protected function set_dhl_boolean_prop($prop, $value)
        {
        }
        protected function set_dhl_prop($prop, $value)
        {
        }
        protected function delete_dhl_prop($prop)
        {
        }
        protected function get_dhl_prop($prop)
        {
        }
        /**
         * @return bool
         */
        public function supports_email_notification()
        {
        }
        public function get_min_age()
        {
        }
        public function needs_age_verification()
        {
        }
        public function has_cod_payment()
        {
        }
        public function get_date_of_birth()
        {
        }
        public function get_preferred_day()
        {
        }
        public function has_preferred_day()
        {
        }
        public function get_preferred_time_start()
        {
        }
        public function get_preferred_time_end()
        {
        }
        public function has_preferred_time()
        {
        }
        public function get_preferred_time()
        {
        }
        public function get_preferred_formatted_time()
        {
        }
        public function get_preferred_location()
        {
        }
        public function get_preferred_delivery_type()
        {
        }
        public function has_preferred_delivery_type()
        {
        }
        public function has_cdp_delivery()
        {
        }
        public function has_preferred_location()
        {
        }
        public function get_preferred_neighbor()
        {
        }
        public function get_preferred_neighbor_address()
        {
        }
        public function has_preferred_neighbor()
        {
        }
        public function get_preferred_neighbor_formatted_address()
        {
        }
        public function set_preferred_delivery_type($delivery_type)
        {
        }
        public function set_preferred_day($date)
        {
        }
        public function set_preferred_time_start($time)
        {
        }
        public function set_preferred_time_end($time)
        {
        }
        public function set_preferred_location($location)
        {
        }
        public function set_preferred_neighbor($neighbor)
        {
        }
        public function set_preferred_neighbor_address($address)
        {
        }
        /**
         * Call child methods if the method does not exist.
         *
         * @param $method
         * @param $args
         *
         * @return bool|mixed
         */
        public function __call($method, $args)
        {
        }
    }
    /**
     * Main package class.
     */
    class Package
    {
        /**
         * Version.
         *
         * @var string
         */
        const VERSION = '2.0.4';
        public static $upload_dir_suffix = '';
        // These are all considered domestic by DHL
        protected static $us_territories = array('US', 'GU', 'AS', 'PR', 'UM', 'VI');
        protected static $holidays = array();
        protected static $api = null;
        protected static $im_api = null;
        protected static $iso = null;
        /**
         * Init the package - load the REST API Server class.
         */
        public static function init()
        {
        }
        public static function on_shipments_init()
        {
        }
        /**
         * @param ShippingProvider $provider
         */
        public static function maybe_set_default_provider($provider)
        {
        }
        public static function load_dependencies_notice()
        {
        }
        public static function has_dependencies()
        {
        }
        public static function has_load_dependencies()
        {
        }
        public static function base_country_is_supported()
        {
        }
        public static function get_supported_countries()
        {
        }
        public static function base_country_supports($type = 'services')
        {
        }
        public static function get_date_de_timezone($format = 'Y-m-d')
        {
        }
        public static function get_holidays($country = 'DE')
        {
        }
        public static function legacy_label_table_exists()
        {
        }
        public static function maybe_set_upload_dir()
        {
        }
        public static function is_enabled()
        {
        }
        public static function is_dhl_enabled()
        {
        }
        public static function get_country_iso_alpha3($country_code)
        {
        }
        public static function init_hooks()
        {
        }
        public static function register_label_types($types)
        {
        }
        public static function filter_templates($path, $template_name)
        {
        }
        public static function get_default_bank_account_data($data_key = '')
        {
        }
        /**
         * @return false|DHL
         */
        public static function get_dhl_shipping_provider()
        {
        }
        /**
         * @return false|DeutschePost
         */
        public static function get_deutsche_post_shipping_provider()
        {
        }
        public static function eur_to_cents($price)
        {
        }
        public static function cents_to_eur($price)
        {
        }
        public static function add_shipping_provider_class_name($class_names)
        {
        }
        public static function install()
        {
        }
        public static function install_integration()
        {
        }
        public static function is_integration()
        {
        }
        public static function register_data_stores($stores)
        {
        }
        public static function get_api()
        {
        }
        public static function get_internetmarke_api()
        {
        }
        /**
         * Return the version of the package.
         *
         * @return string
         */
        public static function get_version()
        {
        }
        /**
         * Return the path to the package.
         *
         * @return string
         */
        public static function get_path()
        {
        }
        public static function get_template_path()
        {
        }
        /**
         * Return the path to the package.
         *
         * @return string
         */
        public static function get_url()
        {
        }
        public static function get_assets_url()
        {
        }
        public static function is_debug_mode()
        {
        }
        public static function enable_logging()
        {
        }
        public static function get_app_id()
        {
        }
        public static function get_app_token()
        {
        }
        public static function get_geschaeftskunden_portal_url()
        {
        }
        public static function get_internetmarke_main_url()
        {
        }
        public static function get_warenpost_international_rest_url()
        {
        }
        public static function get_internetmarke_products_url()
        {
        }
        public static function get_internetmarke_refund_url()
        {
        }
        public static function get_internetmarke_partner_id()
        {
        }
        public static function get_internetmarke_token()
        {
        }
        public static function get_internetmarke_key_phase()
        {
        }
        public static function get_internetmarke_product_username()
        {
        }
        public static function get_internetmarke_product_password()
        {
        }
        public static function get_internetmarke_product_mandant_id()
        {
        }
        public static function is_deutsche_post_enabled()
        {
        }
        public static function get_internetmarke_username()
        {
        }
        public static function get_internetmarke_warenpost_int_ekp()
        {
        }
        /**
         * The Warenpost International API (necessary for customs forms)
         * needs separate Sandbox credentials. In live mode the Portokasse credentials are being used.
         *
         * @return string
         */
        public static function get_internetmarke_warenpost_int_username()
        {
        }
        public static function get_internetmarke_password()
        {
        }
        public static function get_internetmarke_warenpost_int_password()
        {
        }
        /**
         * CIG Authentication (basic auth) user. In Sandbox mode use Developer ID and password of entwickler.dhl.de
         *
         * @return mixed|string|void
         */
        public static function get_cig_user()
        {
        }
        /**
         * CIG Authentication (basic auth) password. In Sandbox mode use Developer ID and password of entwickler.dhl.de
         *
         * @return mixed|string|void
         */
        public static function get_cig_password()
        {
        }
        /**
         * GK Auth user
         *
         * @return mixed|string|void
         */
        public static function get_gk_api_user()
        {
        }
        /**
         * GK Auth password
         *
         * @return mixed|string|void
         */
        public static function get_gk_api_signature()
        {
        }
        /**
         * Retoure Auth user
         *
         * @return mixed|string|void
         */
        public static function get_retoure_api_user()
        {
        }
        public static function use_legacy_soap_api()
        {
        }
        public static function get_label_rest_api_url()
        {
        }
        public static function get_return_receivers()
        {
        }
        public static function get_return_receiver_by_slug($slug)
        {
        }
        public static function get_return_receiver_by_country($country)
        {
        }
        /**
         * Retoure Auth signature
         *
         * @return mixed|string|void
         */
        public static function get_retoure_api_signature()
        {
        }
        public static function get_cig_url()
        {
        }
        public static function get_rest_url()
        {
        }
        public static function get_gk_api_url()
        {
        }
        public static function get_dhl_com_api_key()
        {
        }
        public static function get_business_portal_url()
        {
        }
        /**
         * Generate a unique key.
         *
         * @return string
         */
        protected static function generate_key()
        {
        }
        public static function get_upload_dir_suffix()
        {
        }
        public static function get_upload_dir()
        {
        }
        public static function get_relative_upload_dir($path)
        {
        }
        public static function set_upload_dir_filter()
        {
        }
        public static function get_file_by_path($file)
        {
        }
        public static function get_core_wsdl_file($file)
        {
        }
        /**
         * Retrieves a local, cached, WSDL file by a WSDL link.
         * In case the file exists in core direction (assets/wsdl) prefer this file otherwise
         * try to download and cache the WSDL file locally for 14 days.
         *
         * In case of enabled debug mode - use WSDL link instead of cached files.
         *
         * @param $wsdl_link
         *
         * @return false|mixed|string|void
         */
        public static function get_wsdl_file($wsdl_link)
        {
        }
        public static function unset_upload_dir_filter()
        {
        }
        public static function filter_upload_dir($args)
        {
        }
        public static function get_participation_number($product, $args = array())
        {
        }
        /**
         * @param $name
         * @param bool|ShippingMethod $method
         *
         * @return mixed|void
         */
        public static function get_setting($name, $shipment = false, $default = false)
        {
        }
        public static function log($message, $type = 'info')
        {
        }
        public static function get_available_countries()
        {
        }
        public static function get_base_country()
        {
        }
        public static function get_us_territories()
        {
        }
        /**
         * Function return whether the sender and receiver country is the same territory
         */
        public static function is_shipping_domestic($country_receiver, $postcode = '')
        {
        }
        /**
         * Check if it is an EU shipment
         */
        public static function is_eu_shipment($country_receiver, $postcode = '')
        {
        }
        protected static function get_eu_countries()
        {
        }
        /**
         * Function return whether the sender and receiver country is "crossborder" i.e. needs CUSTOMS declarations (outside EU)
         */
        public static function is_crossborder_shipment($country_receiver, $postcode = '')
        {
        }
    }
    /**
     * WC_Ajax class.
     */
    class Ajax
    {
        /**
         * Hook in ajax handlers.
         */
        public static function init()
        {
        }
        /**
         * Hook in methods - uses WordPress ajax handlers (admin-ajax).
         */
        public static function add_ajax_events()
        {
        }
        public static function suppress_errors()
        {
        }
        /**
         *
         */
        public static function refresh_deutsche_post_label_preview()
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments {
    /**
     * Product
     *
     * @class       Product
     * @version     1.0.0
     * @author      Vendidero
     */
    class Product
    {
        /**
         * The actual product object
         *
         * @var WC_Product
         */
        protected $product;
        /**
         * @param WC_Product $product
         *
         * @throws \Exception
         */
        public function __construct($product)
        {
        }
        /**
         * Returns the Woo WC_Product original object
         *
         * @return object|WC_Product
         */
        public function get_product()
        {
        }
        protected function get_forced_parent_product()
        {
        }
        public function get_customs_description($context = 'view')
        {
        }
        public function is_non_returnable($context = 'view')
        {
        }
        public function get_hs_code($context = 'view')
        {
        }
        public function get_manufacture_country($context = 'view')
        {
        }
        public function get_main_category()
        {
        }
        public function set_hs_code($code)
        {
        }
        public function set_manufacture_country($country)
        {
        }
        public function set_customs_description($description)
        {
        }
        public function set_is_non_returnable($is_non_returnable)
        {
        }
        /**
         * Call child methods if the method does not exist.
         *
         * @param $method
         * @param $args
         *
         * @return bool|mixed
         */
        public function __call($method, $args)
        {
        }
    }
}
namespace Vendidero\Germanized\DHL {
    class Product extends \Vendidero\Germanized\Shipments\Product
    {
    }
    /**
     * Main package class.
     */
    class Install
    {
        public static function install()
        {
        }
        protected static function get_address_name_parts($address_type = 'shipper')
        {
        }
        /**
         * @param Simple $provider
         * @param $key
         * @param $value
         */
        protected static function update_provider_setting($provider, $key, $value)
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments\Interfaces {
    /**
     * ShipmentLabel class.
     */
    interface ShippingProvider
    {
        /**
         * Return the unique identifier for the label
         *
         * @return mixed
         */
        public function get_id();
        public function get_help_link();
        public function get_signup_link();
        public function is_pro();
        /**
         * Whether or not this instance is a manual integration.
         * Manual integrations are constructed dynamically from DB and do not support
         * automatic shipment handling, e.g. label creation.
         *
         * @return bool
         */
        public function is_manual_integration();
        public function supports_customer_return_requests();
        public function supports_labels($label_type, $shipment = false);
        public function hide_return_address();
        public function get_edit_link($section = '');
        public function is_activated();
        public function needs_manual_confirmation_for_returns();
        public function supports_customer_returns($order = false);
        public function supports_guest_returns();
        public function get_title($context = 'view');
        public function get_name($context = 'view');
        public function get_description($context = 'view');
        public function has_return_instructions();
        public function activate();
        public function deactivate();
        public function get_tracking_url($shipment);
        public function get_tracking_desc($shipment, $plain = false);
        public function get_tracking_placeholders($shipment = false);
        public function get_setting($key, $default = null);
        public function get_shipment_setting($shipment, $key, $default = null);
        public function update_settings($section = '', $data = null, $save = true);
        public function get_settings($section = '', $for_shipping_method = false);
        public function update_setting($setting, $value);
        public function get_setting_sections();
        public function get_shipping_method_settings();
        public function save();
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         *
         * @return mixed|void
         */
        public function get_label($shipment);
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_label_fields_html($shipment);
        public function create_label($shipment, $props = false);
    }
    /**
     * ShipmentLabel class.
     */
    interface ShippingProviderAuto extends \Vendidero\Germanized\Shipments\Interfaces\ShippingProvider
    {
        public function get_label_classname($type);
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_available_label_products($shipment);
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_default_label_product($shipment);
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_label_fields($shipment);
        public function automatically_generate_label($shipment = false);
        public function get_label_automation_shipment_status($shipment = false);
        public function automatically_set_shipment_status_shipped($shipment = false);
        public function automatically_generate_return_label();
        public function is_sandbox();
        public function get_settings_help_pointers($section = '');
    }
}
namespace Vendidero\Germanized\Shipments\ShippingProvider {
    class Simple extends \WC_Data implements \Vendidero\Germanized\Shipments\Interfaces\ShippingProvider
    {
        /**
         * This is the name of this object type.
         *
         * @since 1.0.0
         * @var string
         */
        protected $object_type = 'shipping_provider';
        /**
         * Contains a reference to the data store for this class.
         *
         * @since 1.0.0
         * @var object
         */
        protected $data_store_name = 'shipping-provider';
        /**
         * Stores meta in cache for future reads.
         * A group must be set to to enable caching.
         *
         * @since 1.0.0
         * @var string
         */
        protected $cache_group = 'shipping_provider';
        /**
         * Stores provider data.
         *
         * @var array
         */
        protected $data = array('activated' => true, 'title' => '', 'name' => '', 'description' => '', 'order' => 0, 'supports_customer_returns' => false, 'supports_guest_returns' => false, 'return_manual_confirmation' => true, 'return_instructions' => '', 'tracking_url_placeholder' => '', 'tracking_desc_placeholder' => '');
        protected $address_data = array('shipper' => null, 'return' => null);
        /**
         * Get the provider if ID is passed. In case it is an integration, data will be provided through the impl.
         * This class should NOT be instantiated, but the `wc_gzd_get_shipping_provider` function should be used.
         *
         * @param int|object|ShippingProvider $provider Provider to read.
         */
        public function __construct($data = 0)
        {
        }
        public function get_help_link()
        {
        }
        public function get_signup_link()
        {
        }
        public function is_pro()
        {
        }
        /**
         * Whether or not this instance is a manual integration.
         * Manual integrations are constructed dynamically from DB and do not support
         * automatic shipment handling, e.g. label creation.
         *
         * @return bool
         */
        public function is_manual_integration()
        {
        }
        /**
         * Whether or not this instance supports a certain label type.
         *
         * @param string $label_type The label type e.g. simple or return.
         * @param false|Shipment Shipment instance
         *
         * @return bool
         */
        public function supports_labels($label_type, $shipment = false)
        {
        }
        public function supports_customer_return_requests()
        {
        }
        /**
         * Some providers (e.g. DHL) create return labels automatically and the return
         * address is chosen dynamically depending on the country. For that reason the return address
         * might not show up within emails or in customer panel.
         *
         * @return bool
         */
        public function hide_return_address()
        {
        }
        public function get_edit_link($section = '')
        {
        }
        /**
         * Returns whether the shipping provider is active for usage or not.
         *
         * @return bool
         */
        public function is_activated()
        {
        }
        public function needs_manual_confirmation_for_returns()
        {
        }
        /**
         * @param false|\WC_Order $order
         *
         * @return bool
         */
        public function supports_customer_returns($order = false)
        {
        }
        public function supports_guest_returns()
        {
        }
        /**
         * Returns a title for the shipping provider.
         *
         * @param string $context
         *
         * @return string
         */
        public function get_title($context = 'view')
        {
        }
        /**
         * Returns the provider order.
         *
         * @param string $context
         *
         * @return int
         */
        public function get_order($context = 'view')
        {
        }
        /**
         * Returns a unique slug/name for the shipping provider.
         *
         * @param string $context
         *
         * @return string
         */
        public function get_name($context = 'view')
        {
        }
        /**
         * Returns a description for the provider.
         *
         * @param string $context
         *
         * @return string
         */
        public function get_description($context = 'view')
        {
        }
        /**
         * Returns whether the shipping provider is activated or not.
         *
         * @param string $context
         *
         * @return string
         */
        public function get_activated($context = 'view')
        {
        }
        /**
         * Returns whether the shipping provider needs manual confirmation for a return.
         *
         * @param string $context
         *
         * @return string
         */
        public function get_return_manual_confirmation($context = 'view')
        {
        }
        /**
         * Returns whether the shipping provider supports returns added by customers or not.
         *
         * @param string $context
         *
         * @return string
         */
        public function get_supports_customer_returns($context = 'view')
        {
        }
        /**
         * Returns whether the shipping provider supports returns added by guests or not.
         *
         * @param string $context
         *
         * @return string
         */
        public function get_supports_guest_returns($context = 'view')
        {
        }
        /**
         * Returns the tracking url placeholder which is being used to
         * construct a tracking url.
         *
         * @param string $context
         *
         * @return mixed
         */
        public function get_tracking_url_placeholder($context = 'view')
        {
        }
        public function get_default_tracking_url_placeholder()
        {
        }
        /**
         * Returns the tracking description placeholder which is being used to
         * construct a tracking description.
         *
         * @param string $context
         *
         * @return mixed
         */
        public function get_tracking_desc_placeholder($context = 'view')
        {
        }
        public function get_default_tracking_desc_placeholder()
        {
        }
        /**
         * Returns the return instructions.
         *
         * @param string $context
         *
         * @return mixed
         */
        public function get_return_instructions($context = 'view')
        {
        }
        public function has_return_instructions()
        {
        }
        protected function get_address_props($address_type = 'shipper')
        {
        }
        public function get_shipper_address_data()
        {
        }
        public function get_address_prop($prop, $type = 'shipper')
        {
        }
        public function get_shipper_email()
        {
        }
        public function get_shipper_phone()
        {
        }
        public function get_contact_phone()
        {
        }
        public function get_shipper_first_name()
        {
        }
        public function get_shipper_last_name()
        {
        }
        public function get_shipper_name()
        {
        }
        public function get_shipper_formatted_full_name()
        {
        }
        public function get_shipper_company()
        {
        }
        public function get_shipper_address()
        {
        }
        public function get_shipper_address_1()
        {
        }
        public function get_shipper_address_2()
        {
        }
        public function get_shipper_street()
        {
        }
        public function get_shipper_street_number()
        {
        }
        public function get_shipper_postcode()
        {
        }
        public function get_shipper_city()
        {
        }
        public function get_shipper_customs_reference_number()
        {
        }
        public function get_shipper_customs_uk_vat_id()
        {
        }
        public function get_shipper_country()
        {
        }
        public function get_shipper_state()
        {
        }
        public function get_return_address_data()
        {
        }
        public function get_return_first_name()
        {
        }
        public function get_return_last_name()
        {
        }
        public function get_return_company()
        {
        }
        public function get_return_name()
        {
        }
        public function get_return_formatted_full_name()
        {
        }
        public function get_return_address()
        {
        }
        public function get_return_address_2()
        {
        }
        public function get_return_street()
        {
        }
        public function get_return_street_number()
        {
        }
        public function get_return_postcode()
        {
        }
        public function get_return_city()
        {
        }
        public function get_return_country()
        {
        }
        public function get_return_state()
        {
        }
        public function get_return_email()
        {
        }
        public function get_return_phone()
        {
        }
        /**
         * Set the current shipping provider to active or inactive.
         *
         * @param bool $is_activated
         */
        public function set_activated($is_activated)
        {
        }
        /**
         * Mark the current shipping provider as manual needed confirmation for returns.
         *
         * @param bool $needs_confirmation
         */
        public function set_return_manual_confirmation($needs_confirmation)
        {
        }
        /**
         * Set whether or not the current shipping provider supports customer returns
         *
         * @param bool $supports
         */
        public function set_supports_customer_returns($supports)
        {
        }
        /**
         * Set whether or not the current shipping provider supports guest returns
         *
         * @param bool $supports
         */
        public function set_supports_guest_returns($supports)
        {
        }
        public function update_settings_with_defaults()
        {
        }
        /**
         * Activate current ShippingProvider instance.
         */
        public function activate()
        {
        }
        /**
         * Deactivate current ShippingProvider instance.
         */
        public function deactivate()
        {
        }
        /**
         * Set the name of the current shipping provider.
         *
         * @param string $name
         */
        public function set_name($name)
        {
        }
        /**
         * Set the title of the current shipping provider.
         *
         * @param string $title
         */
        public function set_title($title)
        {
        }
        /**
         * Set the order of the current shipping provider.
         *
         * @param int $order
         */
        public function set_order($order)
        {
        }
        /**
         * Set the description of the current shipping provider.
         *
         * @param string $description
         */
        public function set_description($description)
        {
        }
        /**
         * Set the return instructions of the current shipping provider.
         *
         * @param string $instructions
         */
        public function set_return_instructions($instructions)
        {
        }
        /**
         * Set the tracking url placeholder of the current shipping provider.
         *
         * @param string $placeholder
         */
        public function set_tracking_url_placeholder($placeholder)
        {
        }
        /**
         * Set the tracking description placeholder of the current shipping provider.
         *
         * @param string $placeholder
         */
        public function set_tracking_desc_placeholder($placeholder)
        {
        }
        /**
         * Returns the tracking url for a specific shipment.
         *
         * @param Shipment $shipment
         *
         * @return string
         */
        public function get_tracking_url($shipment)
        {
        }
        /**
         * Returns the tracking description for a certain shipment.
         *
         * @param Shipment $shipment
         *
         * @return string
         */
        public function get_tracking_desc($shipment, $plain = false)
        {
        }
        /**
         * @param bool|Shipment $shipment
         *
         * @return array
         */
        public function get_tracking_placeholders($shipment = false)
        {
        }
        /**
         * Prefix for action and filter hooks on data.
         *
         * @since  3.0.0
         * @return string
         */
        protected function get_hook_prefix()
        {
        }
        /**
         * Prefix for action and filter hooks on data.
         *
         * @since  3.0.0
         * @return string
         */
        protected function get_general_hook_prefix()
        {
        }
        protected function get_general_settings($for_shipping_method = false)
        {
        }
        /**
         * @param Shipment $shipment
         * @param $key
         */
        public function get_shipment_setting($shipment, $key, $default = null)
        {
        }
        public function get_setting($key, $default = null, $context = 'view')
        {
        }
        protected function retrieve_password($value)
        {
        }
        protected function unprefix_setting_key($key)
        {
        }
        public function update_settings($section = '', $data = null, $save = true)
        {
        }
        public function update_setting($setting, $value)
        {
        }
        public function get_settings($section = '', $for_shipping_method = false)
        {
        }
        protected function get_return_settings($for_shipping_method = false)
        {
        }
        protected function get_all_settings($for_shipping_method = false)
        {
        }
        public function get_shipping_method_settings()
        {
        }
        public function get_setting_sections()
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         *
         * @return ShipmentLabel|false
         */
        public function get_label($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_label_fields_html($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         * @param mixed $props
         */
        public function create_label($shipment, $props = false)
        {
        }
    }
    abstract class Auto extends \Vendidero\Germanized\Shipments\ShippingProvider\Simple implements \Vendidero\Germanized\Shipments\Interfaces\ShippingProviderAuto
    {
        protected $extra_data = array('label_default_shipment_weight' => '', 'label_minimum_shipment_weight' => '', 'label_auto_enable' => false, 'label_auto_shipment_status' => 'gzd-processing', 'label_return_auto_enable' => false, 'label_return_auto_shipment_status' => 'gzd-processing', 'label_auto_shipment_status_shipped' => false);
        public function get_label_default_shipment_weight($context = 'view')
        {
        }
        protected function get_default_label_default_shipment_weight()
        {
        }
        public function get_label_minimum_shipment_weight($context = 'view')
        {
        }
        protected function get_default_label_minimum_shipment_weight()
        {
        }
        /**
         * @param false|Shipment $shipment
         *
         * @return boolean
         */
        public function automatically_generate_label($shipment = false)
        {
        }
        /**
         * @param false|Shipment $shipment
         *
         * @return string
         */
        public function get_label_automation_shipment_status($shipment = false)
        {
        }
        public function automatically_set_shipment_status_shipped($shipment = false)
        {
        }
        public function get_label_auto_enable($context = 'view')
        {
        }
        public function get_label_auto_shipment_status_shipped($context = 'view')
        {
        }
        public function get_label_auto_shipment_status($context = 'view')
        {
        }
        public function automatically_generate_return_label()
        {
        }
        public function get_label_return_auto_enable($context = 'view')
        {
        }
        public function get_label_return_auto_shipment_status($context = 'view')
        {
        }
        public function is_sandbox()
        {
        }
        public function set_label_default_shipment_weight($weight)
        {
        }
        public function set_label_minimum_shipment_weight($weight)
        {
        }
        public function set_label_auto_enable($enable)
        {
        }
        public function set_label_auto_shipment_status_shipped($enable)
        {
        }
        public function set_label_auto_shipment_status($status)
        {
        }
        public function set_label_return_auto_enable($enable)
        {
        }
        public function set_label_return_auto_shipment_status($status)
        {
        }
        public function get_label_classname($type)
        {
        }
        /**
         * Whether or not this instance is a manual integration.
         * Manual integrations are constructed dynamically from DB and do not support
         * automatic shipment handling, e.g. label creation.
         *
         * @return bool
         */
        public function is_manual_integration()
        {
        }
        /**
         * Whether or not this instance supports a certain label type.
         *
         * @param string $label_type The label type e.g. simple or return.
         *
         * @return bool
         */
        public function supports_labels($label_type, $shipment = false)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         *
         * @return mixed|void
         */
        public function get_label($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_label_fields_html($shipment)
        {
        }
        protected function get_automation_settings($for_shipping_method = false)
        {
        }
        public function get_settings_help_pointers($section = '')
        {
        }
        protected function get_label_settings($for_shipping_method = false)
        {
        }
        protected function get_available_base_countries()
        {
        }
        public function get_setting_sections()
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_label_fields($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        protected function get_simple_label_fields($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        protected function get_return_label_fields($shipment)
        {
        }
        /**
         * @param Shipment $shipment
         * @param $props
         *
         * @return ShipmentError|mixed
         */
        protected function validate_label_request($shipment, $props)
        {
        }
        /**
         * @param Shipment $shipment
         *
         * @return array
         */
        protected function get_default_label_props($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         * @param mixed $props
         *
         * @return ShipmentError|true
         */
        public function create_label($shipment, $props = false)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_available_label_services($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public abstract function get_available_label_products($shipment);
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public abstract function get_default_label_product($shipment);
    }
}
namespace Vendidero\Germanized\DHL\ShippingProvider {
    class DeutschePost extends \Vendidero\Germanized\Shipments\ShippingProvider\Auto
    {
        protected function get_default_label_minimum_shipment_weight()
        {
        }
        protected function get_default_label_default_shipment_weight()
        {
        }
        public function supports_customer_return_requests()
        {
        }
        public function get_help_link()
        {
        }
        public function get_signup_link()
        {
        }
        public function get_label_classname($type)
        {
        }
        /**
         * @param false|\WC_Order $order
         *
         * @return bool
         */
        public function supports_customer_returns($order = false)
        {
        }
        public function supports_labels($label_type, $shipment = false)
        {
        }
        public function get_title($context = 'view')
        {
        }
        public function get_name($context = 'view')
        {
        }
        public function get_description($context = 'view')
        {
        }
        public function get_default_tracking_url_placeholder()
        {
        }
        public function get_api_username($context = 'view')
        {
        }
        public function set_api_username($username)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_available_label_products($shipment)
        {
        }
        protected function get_available_base_countries()
        {
        }
        protected function get_general_settings($for_shipping_method = false)
        {
        }
        protected function get_label_settings($for_shipping_method = false)
        {
        }
        protected function get_product_select_options()
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_label_fields($shipment)
        {
        }
        protected function get_portokasse_charge_button()
        {
        }
        public function get_label_fields_html($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         *
         * @return array
         */
        protected function get_return_label_fields($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         *
         * @return array|\WP_Error
         */
        protected function get_simple_label_fields($shipment)
        {
        }
        public function get_available_additional_services($product_id, $selected_services = array())
        {
        }
        protected function get_default_available_label_args($shipment, $default_args = array())
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_default_label_product($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_available_label_services($shipment)
        {
        }
        protected function get_default_label_props($shipment)
        {
        }
        protected function get_default_simple_label_props($shipment)
        {
        }
        /**
         * @param Shipment $shipment
         *
         * @return array
         */
        protected function get_default_return_label_props($shipment)
        {
        }
        /**
         * @param Shipment $shipment
         * @param $props
         *
         * @return \WP_Error|mixed
         */
        protected function validate_label_request($shipment, $args = array())
        {
        }
    }
    /**
     * Shipment Order
     *
     * @class       WC_GZD_Shipment_Order
     * @version     1.0.0
     * @author      Vendidero
     */
    class ShippingMethod
    {
        /**
         * @var \Vendidero\Germanized\Shipments\ShippingProvider\Method null
         */
        protected $method = null;
        protected $preferred_services = null;
        /**
         * ShippingProviderMethodDHL constructor.
         *
         * @param \Vendidero\Germanized\Shipments\ShippingProvider\Method $method
         */
        public function __construct($method)
        {
        }
        public function is_dhl_enabled()
        {
        }
        public function is_deutsche_post_enabled()
        {
        }
        public function is_packstation_enabled()
        {
        }
        public function is_postoffice_enabled()
        {
        }
        public function is_parcelshop_enabled()
        {
        }
        public function get_enabled_preferred_services()
        {
        }
        public function is_preferred_service_enabled($service)
        {
        }
        /**
         * Call child methods if the method does not exist.
         *
         * @param $method
         * @param $args
         *
         * @return bool|mixed
         */
        public function __call($method, $args)
        {
        }
    }
    class DHL extends \Vendidero\Germanized\Shipments\ShippingProvider\Auto
    {
        protected function get_default_label_default_shipment_weight()
        {
        }
        public function get_title($context = 'view')
        {
        }
        public function get_name($context = 'view')
        {
        }
        public function get_description($context = 'view')
        {
        }
        public function get_default_tracking_url_placeholder()
        {
        }
        public function is_sandbox()
        {
        }
        public function get_customer_number()
        {
        }
        public function get_label_classname($type)
        {
        }
        public function supports_labels($label_type, $shipment = false)
        {
        }
        public function get_services($shipment = false)
        {
        }
        public function get_product_services($product, $shipment = false)
        {
        }
        public function supports_customer_return_requests()
        {
        }
        /**
         * Some providers (e.g. DHL) create return labels automatically and the return
         * address is chosen dynamically depending on the country. For that reason the return address
         * might not show up within emails or in customer panel.
         *
         * @return bool
         */
        public function hide_return_address()
        {
        }
        public function get_api_username($context = 'view')
        {
        }
        public function set_api_username($username)
        {
        }
        public function get_label_retoure_enable($context = 'view')
        {
        }
        public function set_label_retoure_enable($enable)
        {
        }
        public function get_label_custom_shipper_reference($context = 'view')
        {
        }
        public function set_label_custom_shipper_reference($ref)
        {
        }
        public function has_custom_shipper_reference()
        {
        }
        public function get_retoure_receiver_ids($context = 'view')
        {
        }
        public function set_retoure_receiver_ids($ids)
        {
        }
        public function get_api_sandbox_username($context = 'view')
        {
        }
        public function set_api_sandbox_username($username)
        {
        }
        public function get_setting_sections()
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         *
         * @return array
         */
        protected function get_return_label_fields($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         *
         * @return array
         */
        protected function get_simple_label_fields($shipment)
        {
        }
        public function get_participation_number($product)
        {
        }
        public function enable_retoure()
        {
        }
        /**
         * @param Shipment $shipment
         * @param $props
         *
         * @return \WP_Error|mixed
         */
        protected function validate_label_request($shipment, $props)
        {
        }
        /**
         * @param Shipment $shipment
         * @param $args
         *
         * @return \WP_Error|mixed
         */
        protected function validate_return_label_args($shipment, $args = array())
        {
        }
        /**
         * @param Shipment $shipment
         * @param $args
         *
         * @return \WP_Error|mixed
         */
        protected function validate_simple_label_args($shipment, $args = array())
        {
        }
        /**
         * @param Shipment $shipment
         *
         * @return array
         */
        protected function get_default_label_props($shipment)
        {
        }
        /**
         * @param Shipment $shipment
         *
         * @return array
         */
        protected function get_default_return_label_props($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_default_label_product($shipment)
        {
        }
        /**
         * @param Shipment $shipment
         *
         * @return string
         */
        protected function get_incoterms($shipment)
        {
        }
        /**
         * @param Shipment $shipment
         *
         * @return array
         */
        protected function get_default_simple_label_props($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_available_label_products($shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        public function get_available_label_services($shipment)
        {
        }
        protected function get_available_base_countries()
        {
        }
        protected function get_connection_status_html()
        {
        }
        protected function get_general_settings($for_shipping_method = false)
        {
        }
        protected function get_pickup_settings($for_shipping_method = false)
        {
        }
        protected function get_preferred_settings($for_shipping_method = false)
        {
        }
        protected function get_label_settings($for_shipping_method = false)
        {
        }
        public function get_help_link()
        {
        }
        public function get_signup_link()
        {
        }
        public function get_settings_help_pointers($section = '')
        {
        }
    }
}
namespace Vendidero\Germanized\DHL {
    /**
     * Main package class.
     */
    class ParcelLocator
    {
        protected static $localized_scripts = array();
        public static function init()
        {
        }
        public static function street_number_is_valid($is_valid, $data)
        {
        }
        public static function refresh_shipping_data_session($fragments)
        {
        }
        public static function admin_profile_fields($fields)
        {
        }
        public static function manipulate_address_fields($fields)
        {
        }
        public static function validate_address_postnumber($value)
        {
        }
        public static function validate_address_fields($value)
        {
        }
        /**
         * @param $send_to_pickup
         * @param $types
         * @param Shipment $shipment
         */
        public static function shipment_has_pickup($send_to_pickup, $types, $shipment)
        {
        }
        public static function get_postnumber_by_shipment($shipment)
        {
        }
        /**
         * @param WC_Order $order
         * @param $data
         */
        public static function maybe_adjust_order_data($order, $data)
        {
        }
        public static function get_supported_countries()
        {
        }
        public static function get_excluded_gateways()
        {
        }
        /**
         * @param $data
         * @param $type
         * @param WC_Order $order
         *
         * @return mixed
         */
        public static function add_order_address_data($data, $type, $order)
        {
        }
        public static function set_address_format($formats)
        {
        }
        public static function set_formatted_shipping_address($fields, $order)
        {
        }
        public static function get_postnumber_by_order($order)
        {
        }
        public static function get_shipping_address_type_by_order($order)
        {
        }
        public static function get_pickup_address_by_order($order)
        {
        }
        public static function order_has_pickup($order)
        {
        }
        public static function get_pickup_type_by_order($order)
        {
        }
        public static function get_postnumber_by_user($user)
        {
        }
        public static function set_formatted_billing_address($fields, $order)
        {
        }
        public static function set_formatted_address($placeholder, $args)
        {
        }
        public static function set_user_address($address, $customer_id, $name)
        {
        }
        public static function manipulate_checkout_fields()
        {
        }
        public static function switch_street_label($fields)
        {
        }
        protected static function get_rate_with_instance_id($rate_id)
        {
        }
        public static function get_shipping_method_data($from_session = false)
        {
        }
        protected static function remove_whitespace($str)
        {
        }
        public static function format_address_data($data)
        {
        }
        public static function validate_checkout()
        {
        }
        protected static function get_available_pickup_types()
        {
        }
        protected static function validate_address($args)
        {
        }
        public static function add_inline_styles()
        {
        }
        public static function localize_printed_scripts()
        {
        }
        public static function add_scripts()
        {
        }
        protected static function disable_method_setting()
        {
        }
        protected static function get_setting($key, $check_method = true)
        {
        }
        public static function is_enabled()
        {
        }
        public static function is_available($check_shipping_method = true)
        {
        }
        public static function is_postoffice_enabled($check_shipping_method = true)
        {
        }
        public static function is_packstation_enabled($check_shipping_method = true)
        {
        }
        public static function is_parcelshop_enabled($check_shipping_method = true)
        {
        }
        public static function has_map($check_shipping_method = true)
        {
        }
        public static function get_max_results()
        {
        }
        protected static function get_street_placeholder($method = false)
        {
        }
        /**
         * @param string $sep
         * @param bool $plural
         * @param bool|ShippingMethod $method
         *
         * @return string
         */
        protected static function get_type_text($sep = '', $plural = true, $method = false)
        {
        }
        public static function add_admin_shipping_fields($fields)
        {
        }
        public static function get_address_types($method = false)
        {
        }
        public static function add_shipping_fields($fields)
        {
        }
        protected static function get_pickup_type_address_label($method = false)
        {
        }
        protected static function get_pickup_type_address_placeholder($method = false)
        {
        }
        protected static function get_icon($type = 'packstation')
        {
        }
        protected static function get_button_text($method = false)
        {
        }
        protected static function get_button($method = false)
        {
        }
        protected static function get_pickup_locator_link()
        {
        }
        public static function add_button()
        {
        }
        public static function add_form()
        {
        }
        public static function ajax_refresh_shipping_data()
        {
        }
        public static function extract_pickup_keyword_id($str)
        {
        }
        public static function get_pickup_address_field_by_country($country = '')
        {
        }
        public static function get_pickup_address_fields()
        {
        }
        /**
         * @param $args
         * @param $report_invalid_address
         *
         * @return array|WP_Error
         */
        public static function is_valid_pickup_address($args, $report_invalid_address = false)
        {
        }
        public static function ajax_validate_address()
        {
        }
        public static function ajax_search()
        {
        }
    }
    /**
     * Main package class.
     */
    class ParcelServices
    {
        public static function init()
        {
        }
        protected static function cart_needs_shipping()
        {
        }
        public static function fragments($fragments)
        {
        }
        public static function maybe_output_fields()
        {
        }
        public static function maybe_output_fields_before_submit()
        {
        }
        public static function order_totals($total_rows, $order)
        {
        }
        public static function create_order($order)
        {
        }
        protected static function get_posted_data()
        {
        }
        public static function validate($data, $errors)
        {
        }
        /**
         * @param \WC_Cart $cart
         */
        public static function add_fees($cart)
        {
        }
        public static function add_scripts()
        {
        }
        protected static function get_excluded_payment_gateways()
        {
        }
        protected static function payment_gateway_supports_services($method)
        {
        }
        protected static function get_preferred_home_delivery_cost()
        {
        }
        protected static function get_preferred_day_cost()
        {
        }
        public static function is_preferred_day_excluded($day)
        {
        }
        public static function get_preferred_day_cutoff_time()
        {
        }
        public static function get_preferred_day_preparation_days()
        {
        }
        protected static function is_preferred_enabled()
        {
        }
        protected static function preferred_services_available($customer_country = '')
        {
        }
        public static function get_cdp_countries()
        {
        }
        public static function is_pddp_available($country, $postcode = '')
        {
        }
        public static function is_cdp_available($customer_country = '')
        {
        }
        protected static function is_preferred_option_available()
        {
        }
        protected static function get_data()
        {
        }
        protected static function refresh_day_session()
        {
        }
        public static function add_fields($with_wrapper = true)
        {
        }
        public static function is_enabled()
        {
        }
        public static function is_preferred_day_enabled()
        {
        }
        public static function is_preferred_time_enabled()
        {
        }
        public static function is_preferred_location_enabled()
        {
        }
        public static function is_preferred_delivery_type_enabled()
        {
        }
        public static function is_preferred_neighbor_enabled()
        {
        }
        public static function get_default_preferred_delivery_type()
        {
        }
        public static function get_preferred_delivery_types()
        {
        }
        public static function get_preferred_delivery_type_title($type)
        {
        }
        protected static function get_setting($key)
        {
        }
    }
}
namespace Vendidero\Germanized\DHL\Api {
    abstract class Rest
    {
        /**
         * The request response
         * @var array
         */
        protected $response = null;
        /**
         * @var mixed
         */
        protected $id = '';
        /**
         * @var array
         */
        protected $remote_header = array();
        /**
         * DHL_Api constructor.
         *
         * @param string $api_key, $api_secret
         */
        public function __construct()
        {
        }
        /**
         * Method to set id
         *
         * @param $id
         */
        public function set_id($id)
        {
        }
        /**
         * Get the id
         *
         * @return $id
         */
        public function get_id()
        {
        }
        protected function get_auth()
        {
        }
        public function get_request($endpoint = '', $query_args = array(), $content_type = 'json')
        {
        }
        protected function handle_get_response($response_code, $response_body)
        {
        }
        public function get_base_url()
        {
        }
        protected function encode_body_args($args)
        {
        }
        public function post_request($endpoint = '', $query_args = array())
        {
        }
        public function delete_request($endpoint = '', $query_args = array())
        {
        }
        protected function handle_post_response($response_code, $response_body)
        {
        }
        protected function get_basic_auth_encode($user, $pass)
        {
        }
        protected function set_header($authorization = '', $request_type = 'GET', $endpoint = '')
        {
        }
        protected function get_header()
        {
        }
    }
    class ReturnRest extends \Vendidero\Germanized\DHL\Api\Rest
    {
        /**
         * @param \Vendidero\Germanized\DHL\Label\ReturnLabel $label
         *
         * @return mixed
         * @throws Exception
         */
        public function get_return_label(&$label)
        {
        }
        public function get_base_url()
        {
        }
        /**
         * @param \Vendidero\Germanized\DHL\Label\ReturnLabel $label
         */
        protected function get_request_args($label)
        {
        }
        public function get_receiver_ids()
        {
        }
        public function create_return_label($label)
        {
        }
        /**
         * @param ReturnLabel $label
         * @param $response_body
         *
         * @return mixed
         * @throws Exception
         */
        protected function update_return_label($label, $response_body)
        {
        }
        protected function get_auth()
        {
        }
        protected function set_header($authorization = '', $request_type = 'GET', $endpoint = '')
        {
        }
    }
    /**
     * DHL Shipment class.
     */
    class ImProductList
    {
        protected $products = null;
        protected $available_products = null;
        /**
         * @var Internetmarke
         */
        protected $im = null;
        public function __construct($im)
        {
        }
        public function get_products($filters = array())
        {
        }
        protected function load_products()
        {
        }
        protected function load_available_products()
        {
        }
        public function get_product_services($product_id)
        {
        }
        /**
         * Returns available service slugs for a certain (parent) product.
         *
         * In case additional services chosen are supplied, only those services (e.g. Zusatzentgelt MBf which is only available if EINSCHREIBEN has been selected)
         * are added which are compatible with the current selection.
         *
         * @param $parent_id
         * @param array $services
         *
         * @return string[]
         */
        public function get_services_for_product($parent_id, $services = array())
        {
        }
        /**
         * Returns the product id based on a list of services.
         * In case no services are supplied, the main product is returned.
         *
         * @param $parent_id
         * @param $services
         *
         * @return object|false
         */
        public function get_product_data_by_services($parent_id, $services = array())
        {
        }
        public function get_available_products($filters = array())
        {
        }
        protected function filter_products($products, $filters = array())
        {
        }
        public function get_base_products()
        {
        }
        public function get_product_data_by_code($product_code)
        {
        }
        public function get_product_data($product_id)
        {
        }
        protected function get_dimensions($dimensions, $type = 'width')
        {
        }
        public function get_additional_services()
        {
        }
        public function get_additional_service_title($service)
        {
        }
        protected function get_additional_service_identifiers()
        {
        }
        protected function is_additional_service($slug)
        {
        }
        protected function get_product_base_slug($slug)
        {
        }
        protected function get_product_service_slugs($slug)
        {
        }
        protected function sanitize_product_slug($product_name)
        {
        }
        public function update()
        {
        }
    }
    class ParcelRest extends \Vendidero\Germanized\DHL\Api\Rest
    {
        protected $account_num = '';
        public function __construct()
        {
        }
        public function get_services($args)
        {
        }
        protected function set_header($authorization = '', $request_type = 'GET', $endpoint = '')
        {
        }
    }
    class LocationFinder extends \Vendidero\Germanized\DHL\Api\Rest
    {
        protected function is_debug_mode()
        {
        }
        public function get_base_url()
        {
        }
        public function get_api_key()
        {
        }
        protected function set_header($authorization = '', $request_type = 'GET', $endpoint = '')
        {
        }
        protected function get_translated_weekday($schema)
        {
        }
        protected function get_time_string($time_raw)
        {
        }
        public function find_by_id($keyword, $country, $postcode)
        {
        }
        protected function adjust_location_result($result)
        {
        }
        /**
         * @param $address
         * @param $types
         * @param $limit
         *
         * @return array
         * @throws Exception
         */
        public function get_parcel_location($address, $types = array(), $limit = false)
        {
        }
    }
    class ImPartnerInformation extends \baltpeter\Internetmarke\PartnerInformation
    {
        /**
         * @return string The signature to be appended to the request header
         */
        protected function calculateSignature($date = false)
        {
        }
        /**
         * @return array An array of SOAP headers to authenticate the request with the Internetmarke server. Valid for four minutes from `REQUEST_TIMESTAMP`
         */
        public function soapHeaderArray()
        {
        }
    }
    class ImRefundSoap extends \SoapClient
    {
        /**
         * Service constructor.
         *
         * @param $partner_information PartnerInformation
         * @param array $options A array of config values for `SoapClient` (see PHP docs)
         * @param string $wsdl The wsdl file to use (defaults to 'https://internetmarke.deutschepost.de/OneClickForAppV3?wsdl')
         */
        public function __construct($partner_information, $options = array(), $wsdl = null)
        {
        }
        /**
         * Authenticate user request.
         *
         * @return User
         */
        public function authenticateUser($username, $password)
        {
        }
        /**
         * Return retoure id.
         *
         * @return int
         */
        public function createRetoureId()
        {
        }
        /**
         * Retoure/refund selected shipping labels.
         *
         * @param $user_token
         * @param $shop_retoure_id
         * @param $shop_retoure_id
         * @param $voucher_set
         *
         * @return int
         */
        public function retoureVouchers($user_token, $shop_retoure_id, $shop_order_id, $voucher_set = array())
        {
        }
    }
    // Singleton API connection class
    class AuthSoap
    {
        /**
         * define Auth API endpoint
         */
        const PR_DHL_HEADER_LINK = 'http://dhl.de/webservice/cisbase';
        /**
         * constructor.
         */
        public function __construct($wsdl_link)
        {
        }
        public function get_access_token($client_id = '', $client_secret = '')
        {
        }
    }
    class Internetmarke
    {
        /**
         * @var ImPartnerInformation|null
         */
        protected $partner = null;
        /**
         * @var Service|null
         */
        protected $api = null;
        protected $wp_int_api = null;
        /**
         * @var User|null
         */
        protected $user = null;
        /**
         * @var \WP_Error
         */
        protected $errors = null;
        /**
         * @var ImProductList|null
         */
        protected $products = null;
        /**
         * @var ImRefundSoap|null
         */
        protected $refund_api = null;
        /**
         * @var null|PageFormat[]
         */
        protected $page_formats = null;
        public function __construct()
        {
        }
        public function get_api($auth = false)
        {
        }
        public function is_configured()
        {
        }
        public function auth()
        {
        }
        public function has_authentication_error()
        {
        }
        public function get_authentication_error()
        {
        }
        public function has_startup_error()
        {
        }
        public function get_startup_error()
        {
        }
        public function get_error_message()
        {
        }
        public function has_errors()
        {
        }
        public function get_errors()
        {
        }
        public function is_available()
        {
        }
        public function get_user()
        {
        }
        public function get_balance($force_refresh = false)
        {
        }
        protected function invalidate_balance()
        {
        }
        public function reload_products()
        {
        }
        protected function load_products()
        {
        }
        public function get_products($filters = array())
        {
        }
        public function get_base_products()
        {
        }
        public function get_default_available_products()
        {
        }
        public function get_available_products($filters = array())
        {
        }
        public function get_product_list()
        {
        }
        public function is_warenpost_international($im_product_code)
        {
        }
        public function is_warenpost_international_eu($im_product_code)
        {
        }
        protected function format_dimensions($product, $type = 'length')
        {
        }
        public function get_product_data_by_code($im_product_id)
        {
        }
        public function get_product_data($product_id)
        {
        }
        public function get_product_id($im_product_id)
        {
        }
        public function get_product_parent_code($im_product_id)
        {
        }
        public function product_code_is_parent($im_product_id)
        {
        }
        public function get_product_total($product_code)
        {
        }
        public function get_available_products_printable()
        {
        }
        public function get_product_preview_data($im_product_id)
        {
        }
        public function get_page_formats($force_refresh = false)
        {
        }
        public function get_page_format_list()
        {
        }
        public function get_product_services($im_product_id)
        {
        }
        public function get_product_code($maybe_parent_product_code, $services = array())
        {
        }
        public function preview_stamp($product_id, $address_type = 'FrankingZone', $image_id = null)
        {
        }
        /**
         * @param DeutschePost $label
         *
         * @return mixed
         */
        public function get_label(&$label)
        {
        }
        protected function get_wp_int_api()
        {
        }
        /**
         * @param DeutschePost $label
         *
         * @return mixed
         */
        protected function create_or_update_wp_int_label(&$label)
        {
        }
        /**
         * @param DeutschePost $label
         *
         * @return mixed
         */
        protected function create_or_update_default_label(&$label)
        {
        }
        public function get_refund_api()
        {
        }
        /**
         * @param DeutschePost $label
         *
         * @return false|int
         */
        public function refund_label($label)
        {
        }
        /**
         * @param DeutschePost $label
         *
         * @return false|int
         * @throws \Exception
         */
        protected function refund_default_label($label)
        {
        }
        /**
         * @param DeutschePost $label
         *
         * @return false|int
         * @throws \Exception
         */
        protected function refund_wp_int_label($label)
        {
        }
        /**
         * @param DeutschePost $label
         *
         * @return mixed
         */
        public function delete_label(&$label)
        {
        }
        protected function get_shipment_address_prop($shipment, $prop, $address_type = '')
        {
        }
        protected function get_shipment_address_data($shipment, $address_type = '')
        {
        }
        /**
         * @param DeutschePost|DeutschePostReturn $label
         */
        protected function create_default_label(&$label)
        {
        }
        /**
         * @param DeutschePost $label
         * @param \stdClass $stamp
         *
         * @return mixed
         * @throws \Exception
         */
        protected function update_default_label(&$label, $stamp)
        {
        }
        public function update_products()
        {
        }
    }
    abstract class Soap
    {
        /**
         * Passed arguments to the API
         *
         * @var string
         */
        protected $args = array();
        /**
         * The request response
         * @var array
         */
        protected $response = null;
        /**
         * @var
         */
        protected $soap_auth = null;
        /**
         * @var array
         */
        protected $body_request = array();
        /**
         * DHL_Api constructor.
         *
         * @param string $api_key, $api_secret
         */
        public function __construct($wsdl_link)
        {
        }
        protected function get_wsdl_file($wsdl_link)
        {
        }
        protected function get_auth_api()
        {
        }
        public abstract function get_access_token();
        protected function walk_recursive_remove(array $array)
        {
        }
    }
    class ImProductsSoap extends \SoapClient
    {
        public function __construct($options = array(), $wsdl = null)
        {
        }
        protected function get_headers()
        {
        }
        public function get_products($dedicated_products = 1)
        {
        }
    }
    class Paket
    {
        /**
         * @var null|LabelSoap
         */
        protected $label_api = null;
        /**
         * @var null|LabelRest
         */
        protected $label_rest_api = null;
        /**
         * @var null|LocationFinder
         */
        protected $finder_api = null;
        /**
         * @var null|ParcelRest
         */
        protected $parcel_api = null;
        /**
         * @var null|ReturnRest
         */
        protected $return_api = null;
        protected $country_code = '';
        public function __construct($country_code)
        {
        }
        /**
         * @return LabelSoap|null
         * @throws Exception
         */
        public function get_label_api()
        {
        }
        /**
         * @return LabelRest|null
         * @throws Exception
         */
        public function get_label_rest_api()
        {
        }
        /**
         * @return LocationFinder|null
         * @throws Exception
         */
        public function get_finder_api()
        {
        }
        /**
         * @return ReturnRest|null
         * @throws Exception
         */
        public function get_return_api()
        {
        }
        /**
         * @return ParcelRest|null
         * @throws Exception
         */
        public function get_parcel_api()
        {
        }
        public function get_country_code()
        {
        }
        /**
         * @return bool|\WP_Error
         */
        public function test_connection()
        {
        }
        public function get_parcel_location($address, $types = array())
        {
        }
        public function get_return_label(&$label)
        {
        }
        public function get_label(&$label)
        {
        }
        public function delete_label(&$label)
        {
        }
        protected function is_holiday($datetime)
        {
        }
        protected function is_working_day($datetime)
        {
        }
        /**
         * This method calculates the starting date for the preferred day time option
         * and calls the DHL API to retrieve days and times to be chosen by the user in the frontend.
         *
         * Starting date calculation works as follows:
         * 1. If preparation days are set -> add x working days to the current date
         * 2. If current time is greater than cutoff time -> add one working day
         * 3. If excluded working days have been chosen -> add x working days
         * 4. Statically add 2 days for DHL
         *
         * @param $postcode
         * @param string $cutoff_time
         *
         * @return array
         * @throws Exception
         */
        public function get_preferred_available_days($postcode, $cutoff_time = '')
        {
        }
        protected function get_preferred_days($preferred_services)
        {
        }
    }
    class LabelRest extends \Vendidero\Germanized\DHL\Api\Rest
    {
        public function get_base_url()
        {
        }
        protected function get_auth()
        {
        }
        protected function handle_get_response($response_code, $response_body)
        {
        }
        protected function handle_post_response($response_code, $response_body)
        {
        }
        protected function set_header($authorization = '', $request_type = 'GET', $endpoint = '')
        {
        }
        /**
         * @param \Vendidero\Germanized\DHL\Label\DHL $label
         *
         * @throws \Exception
         */
        public function get_label($label)
        {
        }
        /**
         * @param \Vendidero\Germanized\DHL\Label\DHL $label
         *
         * @return boolean|ShipmentError
         * @throws \Exception
         */
        public function create_label($label)
        {
        }
        /**
         * @param Label\DHL $label
         *
         * @throws \Exception
         */
        public function delete_label($label)
        {
        }
        protected function get_profile()
        {
        }
        protected function walk_recursive_remove(array $array)
        {
        }
        protected function get_export_type($customs_data, $label)
        {
        }
        public function test_connection()
        {
        }
    }
    class LabelSoap extends \Vendidero\Germanized\DHL\Api\Soap
    {
        const DHL_MAX_ITEMS = '99';
        const DHL_RETURN_PRODUCT = '07';
        public function __construct()
        {
        }
        /**
         * Use the current local WSDL file instead as DHL
         * does not seem to server minor version WSDL files via URL.
         *
         * @param $wsdl_link
         *
         * @return string
         */
        protected function get_wsdl_file($wsdl_link)
        {
        }
        public function get_access_token()
        {
        }
        public function test_connection()
        {
        }
        /**
         * @param Label\DHL $label
         *
         * @return mixed
         * @throws Exception
         */
        public function get_label(&$label)
        {
        }
        /**
         * @param Label\DHL $label
         *
         * @return mixed
         *
         * @throws Exception
         */
        public function create_label(&$label)
        {
        }
        /**
         * @param Label\DHL $label
         * @param $status
         * @param $response_body
         *
         * @return mixed
         * @throws Exception
         */
        protected function update_label(&$label, $status, $response_body)
        {
        }
        /**
         * @param Label\DHL $label
         *
         * @throws Exception
         */
        protected function delete_label_call(&$label)
        {
        }
        /**
         * @param Label\DHL $label
         *
         * @throws Exception
         */
        public function delete_label(&$label)
        {
        }
        /**
         * @param Label\DHL $label
         * @return array
         *
         * @throws Exception
         */
        protected function get_create_label_request($label)
        {
        }
        protected function get_export_type($customs_data, $label)
        {
        }
    }
    class ImWarenpostIntRest extends \Vendidero\Germanized\DHL\Api\Rest
    {
        public function get_base_url()
        {
        }
        public function get_pdf($awb)
        {
        }
        /**
         * Updates the label
         *
         * @param DeutschePost $label
         * @param \stdClass $result
         *
         * @throws Exception
         */
        public function update_label(&$label, $result)
        {
        }
        protected function clean_state($string)
        {
        }
        /**
         * Creates a new order based on the given data
         *
         * @see https://api-qa.deutschepost.com/dpi-apidoc/index_prod_v1.html#/reference/orders/create-order/create-order
         *
         * @param DeutschePost $label
         *
         * @throws Exception
         */
        public function create_label(&$label)
        {
        }
        protected function encode_body_args($args)
        {
        }
        protected function get_user_token()
        {
        }
        protected function is_sandbox()
        {
        }
        protected function get_auth()
        {
        }
        /**
         * Could be either:
         *
         * - application/pdf (A6)
         * - application/pdf+singlepage (A6)
         * - application/pdf+singlepage+6x4 (6x4 inch)
         * - application/zpl (A6)
         * - application/zpl+rotated (rotated by 90 degrees for label printers)
         * - application/zpl+6x4 (6x4 inch)
         * - application/zpl+rotated+6x4 (6x4 inch and rotated by 90 degrees for label printers)
         *
         * @return string
         */
        protected function get_pdf_accept_header()
        {
        }
        protected function set_header($authorization = '', $request_type = 'GET', $endpoint = '')
        {
        }
        protected function get_ekp()
        {
        }
        protected function walk_recursive_remove(array $array)
        {
        }
        protected function get_basic_auth_encode($user, $pass)
        {
        }
        protected function handle_get_response($response_code, $response_body)
        {
        }
        protected function handle_post_response($response_code, $response_body)
        {
        }
        protected function get_partner_id()
        {
        }
        protected function get_key_phase()
        {
        }
        protected function get_partner_token()
        {
        }
        protected function get_signature($date = null)
        {
        }
    }
}
namespace Vendidero\Germanized\DHL\Admin {
    /**
     * WC_Admin class.
     */
    class Admin
    {
        /**
         * Constructor.
         */
        public static function init()
        {
        }
        public static function add_notices()
        {
        }
        public static function refresh_data()
        {
        }
        public static function save_custom_fields($value, $option, $raw_value)
        {
        }
        public static function output_dp_charge_field($option)
        {
        }
        public static function output_participation_numbers_field($option)
        {
        }
        public static function output_receiver_ids_field($option)
        {
        }
        public static function add_template_check($check)
        {
        }
        public static function add_legacy_meta_box()
        {
        }
        public static function legacy_meta_box()
        {
        }
        public static function get_legacy_label_download_url($order_id)
        {
        }
        public static function download_legacy_label()
        {
        }
        public static function admin_scripts()
        {
        }
        public static function admin_styles()
        {
        }
        public static function get_screen_ids()
        {
        }
    }
}
namespace Vendidero\Germanized\DHL\Admin\Importer {
    /**
     * WC_Admin class.
     */
    class Internetmarke
    {
        public static function is_available()
        {
        }
        public static function is_plugin_enabled()
        {
        }
        public static function import_settings()
        {
        }
    }
    /**
     * WC_Admin class.
     */
    class DHL
    {
        public static function is_available()
        {
        }
        public static function is_plugin_enabled()
        {
        }
        public static function import_settings()
        {
        }
        public static function import_order_data($limit = 10, $offset = 0)
        {
        }
        protected static function order_has_pickup($order)
        {
        }
    }
}
namespace Vendidero\Germanized\DHL\Admin {
    class Status
    {
        public static function init()
        {
        }
        public static function render()
        {
        }
        public static function register_tab($tabs)
        {
        }
        protected static function test_url($url, $response_code = 200)
        {
        }
        public static function get_urls_to_ping()
        {
        }
    }
}
namespace Vendidero\Germanized\DHL\Legacy\DataStores {
    /**
     * Abstract Order Data Store: Stored in CPT.
     *
     * @version  3.0.0
     */
    class Label extends \WC_Data_Store_WP implements \WC_Object_Data_Store_Interface
    {
        /**
         * Internal meta type used to store order data.
         *
         * @var string
         */
        protected $meta_type = 'gzd_dhl_label';
        protected $core_props = array('shipment_id', 'parent_id', 'number', 'path', 'type', 'default_path', 'export_path', 'dhl_product', 'date_created', 'date_created_gmt');
        /**
         * Data stored in meta keys, but not considered "meta" for an order.
         *
         * @since 3.0.0
         * @var array
         */
        protected $internal_meta_keys = array('_preferred_day', '_preferred_time_start', '_preferred_time_end', '_preferred_location', '_preferred_neighbor', '_ident_date_of_birth', '_ident_min_age', '_visual_min_age', '_email_notification', '_codeable_address_only', '_return_address', '_shipper_address', '_has_inlay_return', '_services', '_duties', '_cod_total', '_cod_includes_additional_total', '_weight', '_net_weight', '_width', '_length', '_height', '_created_via', '_receiver_slug', '_page_format', '_shop_order_id', '_stamp_total', '_voucher_id', '_original_url', '_manifest_url', '_additional_services', '_wp_int_awb', '_wp_int_barcode');
        /*
        |--------------------------------------------------------------------------
        | CRUD Methods
        |--------------------------------------------------------------------------
        */
        /**
         * Method to create a new shipment in the database.
         *
         * @param \Vendidero\Germanized\DHL\Legacy\Label $label Label object.
         */
        public function create(&$label)
        {
        }
        protected function get_hook_postfix($label)
        {
        }
        /**
         * Method to update a label in the database.
         *
         * @param \Vendidero\Germanized\DHL\Legacy\Label $label Label object.
         */
        public function update(&$label)
        {
        }
        /**
         * Remove a shipment from the database.
         *
         * @since 3.0.0
         * @param \Vendidero\Germanized\DHL\Label\Label|\Vendidero\Germanized\DHL\Label\ReturnLabel $label Label object.
         * @param bool $force_delete Unused param.
         */
        public function delete(&$label, $force_delete = false)
        {
        }
        /**
         * Read a shipment from the database.
         *
         * @since 3.0.0
         *
         * @param \Vendidero\Germanized\DHL\Legacy\Label $label Label object.
         *
         * @throws Exception Throw exception if invalid shipment.
         */
        public function read(&$label)
        {
        }
        /**
         * Clear any caches.
         *
         * @param \Vendidero\Germanized\DHL\Legacy\Label $label Label object.
         * @since 3.0.0
         */
        protected function clear_caches(&$label)
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Additional Methods
        |--------------------------------------------------------------------------
        */
        /**
         * Get the label type based on label ID.
         *
         * @param int $label_id Label id.
         * @return string
         */
        public function get_label_type($label_id)
        {
        }
        /**
         * Read extra data associated with the shipment.
         *
         * @param \Vendidero\Germanized\DHL\Legacy\Label $label Label object.
         * @since 3.0.0
         */
        protected function read_label_data(&$label)
        {
        }
        protected function save_label_data(&$label)
        {
        }
        /**
         * Update meta data in, or delete it from, the database.
         *
         * Avoids storing meta when it's either an empty string or empty array.
         * Other empty values such as numeric 0 and null should still be stored.
         * Data-stores can force meta to exist using `must_exist_meta_keys`.
         *
         * Note: WordPress `get_metadata` function returns an empty string when meta data does not exist.
         *
         * @param WC_Data $object The WP_Data object (WC_Coupon for coupons, etc).
         * @param string  $meta_key Meta key to update.
         * @param mixed   $meta_value Value to save.
         *
         * @since 3.6.0 Added to prevent empty meta being stored unless required.
         *
         * @return bool True if updated/deleted.
         */
        protected function update_or_delete_meta($object, $meta_key, $meta_value)
        {
        }
        /**
         * Get valid WP_Query args from a WC_Order_Query's query variables.
         *
         * @since 3.0.6
         * @param array $query_vars query vars from a WC_Order_Query.
         * @return array
         */
        protected function get_wp_query_args($query_vars)
        {
        }
        public function get_query_args($query_vars)
        {
        }
        /**
         * Table structure is slightly different between meta types, this function will return what we need to know.
         *
         * @since  3.0.0
         * @return array Array elements: table, object_id_field, meta_id_field
         */
        protected function get_db_info()
        {
        }
        public function get_label_count()
        {
        }
    }
}
namespace Vendidero\Germanized\DHL\Legacy {
    /**
     * WC_Admin class.
     */
    class DownloadHandler
    {
        protected static function parse_args($args = array())
        {
        }
        public static function download_label($label_id, $args = array())
        {
        }
    }
    /**
     * Label factory class
     */
    class LabelFactory
    {
        /**
         * Get label.
         */
        public static function get_label($label_id = false, $label_type = 'simple')
        {
        }
        public static function get_label_id($label)
        {
        }
    }
    /**
     * Abstract WC Object Query Class
     *
     * Extended by classes to provide a query abstraction layer for safe object searching.
     *
     * @version  3.1.0
     * @package  WooCommerce/Abstracts
     */
    class LabelQuery extends \WC_Object_Query
    {
        protected $args = array();
        protected $query_fields = array();
        protected $query_from = '';
        protected $query_where = '';
        protected $meta_query = null;
        protected $query_limit = '';
        protected $query_orderby = '';
        protected $request = '';
        protected $results = null;
        protected $total_labels = 0;
        /**
         * Get the default allowed query vars.
         *
         * @return array
         */
        protected function get_default_query_vars()
        {
        }
        /**
         * Get labels matching the current query vars.
         *
         * @return Label[] objects
         *
         * @throws \Exception When WC_Data_Store validation fails.
         */
        public function get_labels()
        {
        }
        public function get_total()
        {
        }
        /**
         * Query shipments.
         *
         * @param array $query_args
         */
        protected function query($query_args)
        {
        }
        /**
         * Parse the query before preparing it.
         */
        protected function parse_query()
        {
        }
        /**
         * Prepare the query for DB usage.
         */
        protected function prepare_query()
        {
        }
        /**
         * Used internally to generate an SQL string for searching across multiple columns
         *
         * @since 3.0.6
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $string
         * @param array  $cols
         * @param bool   $wild   Whether to allow wildcard searches. Default is false for Network Admin, true for single site.
         *                       Single site allows leading and trailing wildcards, Network Admin only trailing.
         * @return string
         */
        protected function get_search_sql($string, $cols, $wild = false)
        {
        }
        /**
         * Parse orderby statement.
         *
         * @param string $orderby
         * @return string
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * Parse order statement.
         *
         * @param string $order
         * @return string
         */
        protected function parse_order($order)
        {
        }
    }
    class Helper
    {
        public static function maybe_define_db_tables()
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments\DataStores {
    /**
     * WC Order Item Data Store
     *
     * @version  3.0.0
     */
    class ShipmentItem extends \WC_Data_Store_WP implements \WC_Object_Data_Store_Interface
    {
        /**
         * Data stored in meta keys, but not considered "meta" for an order.
         *
         * @since 3.0.0
         * @var array
         */
        protected $internal_meta_keys = array('_width', '_length', '_height', '_weight', '_total', '_subtotal', '_sku', '_return_reason_code', '_hs_code', '_customs_description', '_manufacture_country', '_attributes');
        protected $core_props = array('shipment_id', 'order_item_id', 'quantity', 'name', 'product_id', 'parent_id');
        protected $must_exist_meta_keys = array();
        /**
         * Meta type. This should match up with
         * the types available at https://developer.wordpress.org/reference/functions/add_metadata/.
         * WP defines 'post', 'user', 'comment', and 'term'.
         *
         * @var string
         */
        protected $meta_type = 'gzd_shipment_item';
        /**
         * Create a new shipment item in the database.
         *
         * @since 3.0.0
         * @param \Vendidero\Germanized\Shipments\ShipmentItem $item Shipment item object.
         */
        public function create(&$item)
        {
        }
        /**
         * Update a shipment item in the database.
         *
         * @since 3.0.0
         * @param \Vendidero\Germanized\Shipments\ShipmentItem $item Shipment item object.
         */
        public function update(&$item)
        {
        }
        /**
         * Remove a shipment item from the database.
         *
         * @since 3.0.0
         * @param \Vendidero\Germanized\Shipments\ShipmentItem $item Shipment item object.
         * @param array         $args Array of args to pass to the delete method.
         */
        public function delete(&$item, $args = array())
        {
        }
        /**
         * Read a shipment item from the database.
         *
         * @since 3.0.0
         *
         * @param \Vendidero\Germanized\Shipments\ShipmentItem $item Shipment item object.
         *
         * @throws Exception If invalid shipment item.
         */
        public function read(&$item)
        {
        }
        /**
         * Read extra data associated with the shipment item.
         *
         * @param \Vendidero\Germanized\Shipments\ShipmentItem $item Shipment item object.
         * @since 3.0.0
         */
        protected function read_item_data(&$item)
        {
        }
        /**
         * Update meta data in, or delete it from, the database.
         *
         * Avoids storing meta when it's either an empty string or empty array.
         * Other empty values such as numeric 0 and null should still be stored.
         * Data-stores can force meta to exist using `must_exist_meta_keys`.
         *
         * Note: WordPress `get_metadata` function returns an empty string when meta data does not exist.
         *
         * @param WC_Data $object The WP_Data object (WC_Coupon for coupons, etc).
         * @param string   $meta_key Meta key to update.
         * @param mixed    $meta_value Value to save.
         *
         * @since 3.6.0 Added to prevent empty meta being stored unless required.
         *
         * @return bool True if updated/deleted.
         */
        protected function update_or_delete_meta($object, $meta_key, $meta_value)
        {
        }
        /**
         * Saves an item's data to the database / item meta.
         * Ran after both create and update, so $item->get_id() will be set.
         *
         * @since 3.0.0
         * @param \Vendidero\Germanized\Shipments\ShipmentItem $item Shipment item object.
         */
        public function save_item_data(&$item)
        {
        }
        /**
         * Clear meta cache.
         *
         * @param \Vendidero\Germanized\Shipments\ShipmentItem $item Shipment item object.
         */
        public function clear_cache(&$item)
        {
        }
        /**
         * Table structure is slightly different between meta types, this function will return what we need to know.
         *
         * @since  3.0.0
         * @return array Array elements: table, object_id_field, meta_id_field
         */
        protected function get_db_info()
        {
        }
    }
    /**
     * Abstract Order Data Store: Stored in CPT.
     *
     * @version  3.0.0
     */
    class Packaging extends \WC_Data_Store_WP implements \WC_Object_Data_Store_Interface
    {
        /**
         * Internal meta type used to store order data.
         *
         * @var string
         */
        protected $meta_type = 'gzd_packaging';
        protected $must_exist_meta_keys = array();
        protected $core_props = array('type', 'date_created', 'date_created_gmt', 'weight', 'max_content_weight', 'length', 'width', 'height', 'description', 'order');
        /*
        |--------------------------------------------------------------------------
        | CRUD Methods
        |--------------------------------------------------------------------------
        */
        /**
         * Method to create a new packaging in the database.
         *
         * @param \Vendidero\Germanized\Shipments\Packaging $packaging Packaging object.
         */
        public function create(&$packaging)
        {
        }
        /**
         * Method to update a packaging in the database.
         *
         * @param \Vendidero\Germanized\Shipments\Packaging $packaging Packaging object.
         */
        public function update(&$packaging)
        {
        }
        /**
         * Remove a Packaging from the database.
         *
         * @since 3.0.0
         * @param \Vendidero\Germanized\Shipments\Packaging $packaging Packaging object.
         * @param bool                $force_delete Unused param.
         */
        public function delete(&$packaging, $force_delete = false)
        {
        }
        /**
         * Read a Packaging from the database.
         *
         * @since 3.3.0
         *
         * @param \Vendidero\Germanized\Shipments\Packaging $packaging Packaging object.
         *
         * @throws Exception Throw exception if invalid packaging.
         */
        public function read(&$packaging)
        {
        }
        /**
         * Clear any caches.
         *
         * @param \Vendidero\Germanized\Shipments\Packaging $packaging Packaging object.
         * @since 3.0.0
         */
        protected function clear_caches(&$packaging)
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Additional Methods
        |--------------------------------------------------------------------------
        */
        /**
         * Get the packaging type based on ID.
         *
         * @param int $packaging_id Packaging id.
         * @return string
         */
        public function get_packaging_type($packing_id)
        {
        }
        /**
         * Read extra data associated with the Packaging.
         *
         * @param \Vendidero\Germanized\Shipments\Packaging $packaging Packaging object.
         * @since 3.0.0
         */
        protected function read_packaging_data(&$packaging)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Packaging $packaging
         */
        protected function save_packaging_data(&$packaging)
        {
        }
        /**
         * Update meta data in, or delete it from, the database.
         *
         * Avoids storing meta when it's either an empty string or empty array.
         * Other empty values such as numeric 0 and null should still be stored.
         * Data-stores can force meta to exist using `must_exist_meta_keys`.
         *
         * Note: WordPress `get_metadata` function returns an empty string when meta data does not exist.
         *
         * @param WC_Data $object The WP_Data object (WC_Coupon for coupons, etc).
         * @param string  $meta_key Meta key to update.
         * @param mixed   $meta_value Value to save.
         *
         * @since 3.6.0 Added to prevent empty meta being stored unless required.
         *
         * @return bool True if updated/deleted.
         */
        protected function update_or_delete_meta($object, $meta_key, $meta_value)
        {
        }
        /**
         * Get valid WP_Query args from a WC_Order_Query's query variables.
         *
         * @since 3.0.6
         * @param array $query_vars query vars from a WC_Order_Query.
         * @return array
         */
        protected function get_wp_query_args($query_vars)
        {
        }
        public function get_packaging_list($args = array())
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         * @param \Vendidero\Germanized\Shipments\Packaging|PackagingBox $packaging
         *
         * @return bool
         */
        public function shipment_fits_into_packaging_naive($shipment, $packaging)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         *
         * @return \Vendidero\Germanized\Shipments\Packaging[]
         */
        public function find_available_packaging_for_shipment($shipment)
        {
        }
        protected function sort_packaging_list($packaging)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Packaging $packaging_a
         * @param \Vendidero\Germanized\Shipments\Packaging $packaging_b
         *
         * @return int
         */
        protected function sort_packaging_list_callback($packaging_a, $packaging_b)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         * @param string|array $types
         *
         * @return \Vendidero\Germanized\Shipments\Packaging|false
         */
        public function find_best_match_for_shipment($shipment)
        {
        }
        /**
         * Table structure is slightly different between meta types, this function will return what we need to know.
         *
         * @since  3.0.0
         * @return array Array elements: table, object_id_field, meta_id_field
         */
        protected function get_db_info()
        {
        }
        public function get_query_args($query_vars)
        {
        }
    }
    /**
     * Abstract Order Data Store: Stored in CPT.
     *
     * @version  3.0.0
     */
    class Shipment extends \WC_Data_Store_WP implements \WC_Object_Data_Store_Interface
    {
        /**
         * Internal meta type used to store order data.
         *
         * @var string
         */
        protected $meta_type = 'gzd_shipment';
        protected $must_exist_meta_keys = array();
        /**
         * Data stored in meta keys, but not considered "meta" for an order.
         *
         * @since 3.0.0
         * @var array
         */
        protected $internal_meta_keys = array('_width', '_length', '_height', '_weight', '_packaging_weight', '_address', '_total', '_subtotal', '_additional_total', '_sender_address', '_weight_unit', '_dimension_unit', '_is_customer_requested');
        protected $core_props = array('country', 'type', 'parent_id', 'order_id', 'tracking_id', 'date_created', 'date_created_gmt', 'date_sent', 'date_sent_gmt', 'est_delivery_date', 'est_delivery_date_gmt', 'status', 'shipping_provider', 'shipping_method', 'packaging_id', 'version');
        /*
        |--------------------------------------------------------------------------
        | CRUD Methods
        |--------------------------------------------------------------------------
        */
        /**
         * Method to create a new shipment in the database.
         *
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment Shipment object.
         */
        public function create(&$shipment)
        {
        }
        /**
         * Get the status to save to the object.
         *
         * @since 3.6.0
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment Shipment object.
         * @return string
         */
        protected function get_status($shipment)
        {
        }
        /**
         * Method to update a shipment in the database.
         *
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment Shipment object.
         */
        public function update(&$shipment)
        {
        }
        /**
         * Remove a shipment from the database.
         *
         * @since 3.0.0
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment Shipment object.
         * @param bool                $force_delete Unused param.
         */
        public function delete(&$shipment, $force_delete = false)
        {
        }
        /**
         * Read a shipment from the database.
         *
         * @since 3.0.0
         *
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment Shipment object.
         *
         * @throws Exception Throw exception if invalid shipment.
         */
        public function read(&$shipment)
        {
        }
        /**
         * Clear any caches.
         *
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment Shipment object.
         * @since 3.0.0
         */
        protected function clear_caches(&$shipment)
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Additional Methods
        |--------------------------------------------------------------------------
        */
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        protected function get_search_index($shipment)
        {
        }
        protected function get_hook_postfix($shipment)
        {
        }
        /**
         * Get the label type based on label ID.
         *
         * @param int $shipment_id Shipment id.
         * @return string
         */
        public function get_shipment_type($shipment_id)
        {
        }
        /**
         * Read extra data associated with the shipment.
         *
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment Shipment object.
         * @since 3.0.0
         */
        protected function read_shipment_data(&$shipment)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment
         */
        protected function save_shipment_data(&$shipment)
        {
        }
        /**
         * Update meta data in, or delete it from, the database.
         *
         * Avoids storing meta when it's either an empty string or empty array.
         * Other empty values such as numeric 0 and null should still be stored.
         * Data-stores can force meta to exist using `must_exist_meta_keys`.
         *
         * Note: WordPress `get_metadata` function returns an empty string when meta data does not exist.
         *
         * @param WC_Data $object The WP_Data object (WC_Coupon for coupons, etc).
         * @param string  $meta_key Meta key to update.
         * @param mixed   $meta_value Value to save.
         *
         * @since 3.6.0 Added to prevent empty meta being stored unless required.
         *
         * @return bool True if updated/deleted.
         */
        protected function update_or_delete_meta($object, $meta_key, $meta_value)
        {
        }
        /**
         * Read items from the database for this shipment.
         *
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment Shipment object.
         *
         * @return array
         */
        public function read_items($shipment)
        {
        }
        /**
         * Remove all items from the shipment.
         *
         * @param \Vendidero\Germanized\Shipments\Shipment $shipment Shipment object.
         */
        public function delete_items($shipment)
        {
        }
        /**
         * Get valid WP_Query args from a WC_Order_Query's query variables.
         *
         * @since 3.0.6
         * @param array $query_vars query vars from a WC_Order_Query.
         * @return array
         */
        protected function get_wp_query_args($query_vars)
        {
        }
        /**
         * Table structure is slightly different between meta types, this function will return what we need to know.
         *
         * @since  3.0.0
         * @return array Array elements: table, object_id_field, meta_id_field
         */
        protected function get_db_info()
        {
        }
        public function get_query_args($query_vars)
        {
        }
        public function get_shipment_count($status, $type = '')
        {
        }
    }
    /**
     * Abstract Order Data Store: Stored in CPT.
     *
     * @version  3.0.0
     */
    class Label extends \WC_Data_Store_WP implements \WC_Object_Data_Store_Interface
    {
        /**
         * Internal meta type used to store order data.
         *
         * @var string
         */
        protected $meta_type = 'gzd_shipment_label';
        protected $core_props = array('shipment_id', 'parent_id', 'product_id', 'number', 'path', 'type', 'shipping_provider', 'date_created', 'date_created_gmt');
        /**
         * Data stored in meta keys, but not considered "meta" for an order.
         *
         * @since 3.0.0
         * @var array
         */
        protected $internal_meta_keys = array('_services', '_weight', '_net_weight', '_width', '_length', '_height', '_created_via');
        /*
        |--------------------------------------------------------------------------
        | CRUD Methods
        |--------------------------------------------------------------------------
        */
        /**
         * Method to create a new shipment in the database.
         *
         * @param \Vendidero\Germanized\Shipments\Labels\Label $label Label object.
         */
        public function create(&$label)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Labels\Label $label
         *
         * @return string
         */
        protected function get_hook_postfix($label)
        {
        }
        /**
         * Method to update a label in the database.
         *
         * @param \Vendidero\Germanized\Shipments\Labels\Label $label Label object.
         */
        public function update(&$label)
        {
        }
        /**
         * Remove a shipment from the database.
         *
         * @since 3.0.0
         * @param \Vendidero\Germanized\Shipments\Labels\Label $label Label object.
         * @param bool                $force_delete Unused param.
         */
        public function delete(&$label, $force_delete = false)
        {
        }
        /**
         * Read a shipment from the database.
         *
         * @since 3.0.0
         *
         * @param \Vendidero\Germanized\Shipments\Labels\Label $label Label object.
         *
         * @throws Exception Throw exception if invalid shipment.
         */
        public function read(&$label)
        {
        }
        /**
         * Clear any caches.
         *
         * @param \Vendidero\Germanized\Shipments\Labels\Label $label Label object.
         * @since 3.0.0
         */
        protected function clear_caches(&$label)
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Additional Methods
        |--------------------------------------------------------------------------
        */
        /**
         * Get the label type based on label ID.
         *
         * @param int $label_id Label id.
         * @return bool|mixed
         */
        public function get_label_data($label_id)
        {
        }
        /**
         * Read extra data associated with the shipment.
         *
         * @param \Vendidero\Germanized\Shipments\Labels\Label $label Label object.
         * @since 3.0.0
         */
        protected function read_label_data(&$label)
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Labels\Label $label
         */
        protected function save_label_data(&$label)
        {
        }
        /**
         * Update meta data in, or delete it from, the database.
         *
         * Avoids storing meta when it's either an empty string or empty array.
         * Other empty values such as numeric 0 and null should still be stored.
         * Data-stores can force meta to exist using `must_exist_meta_keys`.
         *
         * Note: WordPress `get_metadata` function returns an empty string when meta data does not exist.
         *
         * @param WC_Data $object The WP_Data object (WC_Coupon for coupons, etc).
         * @param string  $meta_key Meta key to update.
         * @param mixed   $meta_value Value to save.
         *
         * @since 3.6.0 Added to prevent empty meta being stored unless required.
         *
         * @return bool True if updated/deleted.
         */
        protected function update_or_delete_meta($object, $meta_key, $meta_value)
        {
        }
        /**
         * Get valid WP_Query args from a WC_Order_Query's query variables.
         *
         * @since 3.0.6
         * @param array $query_vars query vars from a WC_Order_Query.
         * @return array
         */
        protected function get_wp_query_args($query_vars)
        {
        }
        public function get_query_args($query_vars)
        {
        }
        /**
         * Table structure is slightly different between meta types, this function will return what we need to know.
         *
         * @since  3.0.0
         * @return array Array elements: table, object_id_field, meta_id_field
         */
        protected function get_db_info()
        {
        }
        public function get_label_count()
        {
        }
    }
    /**
     * Abstract Shipping Provider Data Store.
     *
     * @version  3.0.0
     */
    class ShippingProvider extends \WC_Data_Store_WP implements \WC_Object_Data_Store_Interface
    {
        /**
         * Internal meta type used to store order data.
         *
         * @var string
         */
        protected $meta_type = 'gzd_shipping_provider';
        /**
         * Data stored in meta keys, but not considered "meta" for an order.
         *
         * @since 3.0.0
         * @var array
         */
        protected $internal_meta_keys = array('_tracking_url_placeholder', '_tracking_desc_placeholder', '_description', '_return_manual_confirmation', '_return_instructions', '_supports_customer_returns', '_supports_guest_returns');
        protected $core_props = array('activated', 'title', 'name', 'order');
        /*
        |--------------------------------------------------------------------------
        | CRUD Methods
        |--------------------------------------------------------------------------
        */
        /**
         * Method to create a new provider in the database.
         *
         * @param \Vendidero\Germanized\Shipments\ShippingProvider\Simple $provider Shipping provider object.
         */
        public function create(&$provider)
        {
        }
        /**
         * Generate a unique name to save to the object.
         *
         * @since 3.6.0
         * @param \Vendidero\Germanized\Shipments\ShippingProvider\Simple $provider Shipping provider object.
         * @return string
         */
        protected function get_unqiue_name($provider)
        {
        }
        protected function is_manual_creation_request()
        {
        }
        protected function is_reserved_name($name)
        {
        }
        /**
         * Method to update a shipping provider in the database.
         *
         * @param \Vendidero\Germanized\Shipments\ShippingProvider\Simple $provider Shipping provider object.
         */
        public function update(&$provider)
        {
        }
        /**
         * Remove a shipping provider from the database.
         *
         * @since 3.0.0
         * @param \Vendidero\Germanized\Shipments\ShippingProvider\Simple $provider Shipping provider object.
         * @param bool                $force_delete Unused param.
         */
        public function delete(&$provider, $force_delete = false)
        {
        }
        /**
         * Read a shipping provider from the database.
         *
         * @since 3.0.0
         *
         * @param \Vendidero\Germanized\Shipments\ShippingProvider\Simple $provider Shipping provider object.
         *
         * @throws Exception Throw exception if invalid shipping provider.
         */
        public function read(&$provider)
        {
        }
        public function is_activated($name)
        {
        }
        /**
         * Clear any caches.
         *
         * @param \Vendidero\Germanized\Shipments\ShippingProvider\Simple $provider Shipping provider object.
         * @since 3.0.0
         */
        protected function clear_caches(&$provider)
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Additional Methods
        |--------------------------------------------------------------------------
        */
        /**
         * Read extra data associated with the shipping provider.
         *
         * @param \Vendidero\Germanized\Shipments\ShippingProvider\Simple $provider Shipping provider object.
         * @since 3.0.0
         */
        protected function read_provider_data(&$provider)
        {
        }
        /**
         * Save shipping provider data.
         *
         * @param \Vendidero\Germanized\Shipments\ShippingProvider\Simple $provider Shipping provider object.
         */
        protected function save_provider_data(&$provider)
        {
        }
        /**
         * Update meta data in, or delete it from, the database.
         *
         * Avoids storing meta when it's either an empty string or empty array.
         * Other empty values such as numeric 0 and null should still be stored.
         * Data-stores can force meta to exist using `must_exist_meta_keys`.
         *
         * Note: WordPress `get_metadata` function returns an empty string when meta data does not exist.
         *
         * @param WC_Data $object The WP_Data object (WC_Coupon for coupons, etc).
         * @param string  $meta_key Meta key to update.
         * @param mixed   $meta_value Value to save.
         *
         * @since 3.6.0 Added to prevent empty meta being stored unless required.
         *
         * @return bool True if updated/deleted.
         */
        protected function update_or_delete_meta($object, $meta_key, $meta_value)
        {
        }
        /**
         * Table structure is slightly different between meta types, this function will return what we need to know.
         *
         * @since  3.0.0
         * @return array Array elements: table, object_id_field, meta_id_field
         */
        protected function get_db_info()
        {
        }
        public function get_shipping_provider_count()
        {
        }
        public function get_shipping_provider_name($provider_id)
        {
        }
        public function get_shipping_providers()
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments {
    class PDFSplitter
    {
        /**
         * Fpdi pdf instance
         *
         * @var null|Fpdi
         */
        protected $_pdf = null;
        protected $pagecount = 0;
        protected $file = '';
        protected $filename = '';
        /**
         * Pdf constructor
         *
         */
        public function __construct($file, $stream = false, $filename = '')
        {
        }
        public function get_page_count()
        {
        }
        public function split()
        {
        }
        /**
         * Add file to this pdf
         *
         * @param string $filename Filename of the source file
         * @param mixed $pages Range of files (if not set, all pages where imported)
         */
        public function add($filename, $pages = array())
        {
        }
        /**
         * Output merged pdf
         *
         * @param string $type
         */
        public function output($filename, $type = 'I')
        {
        }
        /**
         * Force download merged pdf as file
         *
         * @param $filename
         * @return string
         */
        public function download($filename)
        {
        }
        /**
         * Save merged pdf
         *
         * @param $filename
         * @return string
         */
        public function save($filename)
        {
        }
    }
    class WPMLHelper
    {
        /**
         * @param bool|WC_GZD_Compatibility_WPML $compatibility
         */
        public static function init($compatibility = false)
        {
        }
        public static function translate_email_shipment_items($args)
        {
        }
        public static function register_provider_filters()
        {
        }
        public static function filter_shipping_provider_return_instructions($instructions, $provider)
        {
        }
        public static function filter_shipping_provider_url($placeholder, $provider)
        {
        }
        public static function filter_shipping_provider_placeholder($placeholder, $provider)
        {
        }
        /**
         * @param integer $provider_id
         * @param Simple $provider
         */
        public static function register_shipping_provider_strings($provider_id, $provider)
        {
        }
        protected static function get_shipping_provider_strings()
        {
        }
        /**
         * @param $string_name
         * @param Simple $provider
         */
        protected static function get_shipping_provider_string_id($string_name, $provider)
        {
        }
        /**
         * @param $string_name
         * @param Simple $provider
         */
        protected static function get_shipping_provider_string_package($string_name, $provider)
        {
        }
        /**
         * @param $emails
         */
        public static function register_emails($emails)
        {
        }
    }
    /**
     * Shipment Class.
     */
    abstract class Shipment extends \WC_Data
    {
        /**
         * Stores data about status changes so relevant hooks can be fired.
         *
         * @var bool|array
         */
        protected $status_transition = false;
        /**
         * This is the name of this object type.
         *
         * @since 1.0.0
         * @var string
         */
        protected $object_type = 'shipment';
        /**
         * Contains a reference to the data store for this class.
         *
         * @since 1.0.0
         * @var object
         */
        protected $data_store_name = 'shipment';
        /**
         * Stores meta in cache for future reads.
         * A group must be set to to enable caching.
         *
         * @since 1.0.0
         * @var string
         */
        protected $cache_group = 'shipment';
        /**
         * The contained ShipmentItems.
         *
         * @var null|Shipment
         */
        protected $items = null;
        /**
         * List of items to be deleted on save.
         *
         * @var Shipment[]
         */
        protected $items_to_delete = array();
        protected $items_to_pack = null;
        /**
         * Item weights.
         *
         * @var null|float[]
         */
        protected $weights = null;
        /**
         * Item lengths.
         *
         * @var null|float[]
         */
        protected $lengths = null;
        /**
         * Item widths.
         *
         * @var null|float[]
         */
        protected $widths = null;
        /**
         * Item volumes.
         *
         * @var null|float[]
         */
        protected $volumes = null;
        /**
         * Item heights.
         *
         * @var null|float[]
         */
        protected $heights = null;
        /**
         * Packaging
         *
         * @var null|Packaging
         */
        protected $packaging = null;
        /**
         * @var Method
         */
        protected $shipping_method_instance = null;
        /**
         * Stores shipment data.
         *
         * @var array
         */
        protected $data = array('date_created' => null, 'date_sent' => null, 'status' => '', 'weight' => '', 'width' => '', 'height' => '', 'length' => '', 'packaging_weight' => '', 'weight_unit' => '', 'dimension_unit' => '', 'country' => '', 'address' => array(), 'tracking_id' => '', 'shipping_provider' => '', 'shipping_method' => '', 'total' => 0, 'subtotal' => 0, 'additional_total' => 0, 'est_delivery_date' => null, 'packaging_id' => 0, 'version' => '');
        /**
         * Get the shipment if ID is passed, otherwise the shipment is new and empty.
         * This class should NOT be instantiated, but the `wc_gzd_get_shipment` function should be used.
         *
         * @param int|object|Shipment $shipment Shipment to read.
         */
        public function __construct($data = 0)
        {
        }
        public function get_type()
        {
        }
        /**
         * Merge changes with data and clear.
         * Overrides WC_Data::apply_changes.
         *
         * @since 3.2.0
         */
        public function apply_changes()
        {
        }
        /**
         * @return bool|Order
         */
        public function get_order_shipment()
        {
        }
        public function set_order_shipment(&$order_shipment)
        {
        }
        /**
         * Return item count (quantities summed up).
         *
         * @return int
         */
        public function get_item_count()
        {
        }
        /**
         * Prefix for action and filter hooks on data.
         *
         * @return string
         */
        protected function get_hook_prefix()
        {
        }
        /**
         * Prefix for action and filter hooks on data.
         *
         * @return string
         */
        protected function get_general_hook_prefix()
        {
        }
        public function is_shipping_domestic()
        {
        }
        /**
         * Returns true in case the shipment is being shipped inner EU, e.g.
         * from a base country inside of the EU to another country inside the EU.
         *
         * @return bool
         */
        public function is_shipping_inner_eu()
        {
        }
        public function is_shipping_international()
        {
        }
        /**
         * Return the shipment statuses without gzd- internal prefix.
         *
         * @param  string $context View or edit context.
         * @return string
         */
        public function get_status($context = 'view')
        {
        }
        /**
         * Checks whether the shipment has a specific status or not.
         *
         * @param  string|string[] $status The status to be checked against.
         * @return boolean
         */
        public function has_status($status)
        {
        }
        /**
         * Return the date this shipment was created.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return WC_DateTime|null object if the date is set or null if there is no date.
         */
        public function get_date_created($context = 'view')
        {
        }
        /**
         * Return the date this shipment was sent.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return WC_DateTime|null object if the date is set or null if there is no date.
         */
        public function get_date_sent($context = 'view')
        {
        }
        /**
         * Returns the shipment method.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_shipping_method($context = 'view')
        {
        }
        public function get_shipping_method_instance()
        {
        }
        /**
         * Returns the shipment weight. In case view context was chosen and weight is not yet set, returns the content weight.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_weight($context = 'view')
        {
        }
        public function get_total_weight()
        {
        }
        public function get_packaging_weight($context = 'view')
        {
        }
        public function get_items_to_pack()
        {
        }
        /**
         * Returns the shipment weight unit.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_weight_unit($context = 'view')
        {
        }
        /**
         * Returns the shipment dimension unit.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_dimension_unit($context = 'view')
        {
        }
        /**
         * Returns the shipment length. In case view context was chosen and length is not yet set, returns the content length.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_length($context = 'view')
        {
        }
        public function get_package_length()
        {
        }
        public function has_packaging()
        {
        }
        /**
         * Returns the shipment width. In case view context was chosen and width is not yet set, returns the content width.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_width($context = 'view')
        {
        }
        public function get_package_width()
        {
        }
        /**
         * Returns the shipment height. In case view context was chosen and height is not yet set, returns the content height.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_height($context = 'view')
        {
        }
        public function get_package_height()
        {
        }
        public function has_dimensions()
        {
        }
        /**
         * Returns the calculated weights for included items.
         *
         * @return float[]
         */
        public function get_item_weights()
        {
        }
        /**
         * Returns the calculated lengths for included items.
         *
         * @return float[]
         */
        public function get_item_lengths()
        {
        }
        public function get_item_volumes()
        {
        }
        /**
         * Returns the calculated widths for included items.
         *
         * @return float[]
         */
        public function get_item_widths()
        {
        }
        /**
         * Returns the calculated heights for included items.
         *
         * @return float[]
         */
        public function get_item_heights()
        {
        }
        /**
         * Returns the calculated weight for included items.
         *
         * @return float
         */
        public function get_content_weight()
        {
        }
        public function get_content_dimensions()
        {
        }
        /**
         * Returns the calculated length for included items.
         *
         * @return float
         */
        public function get_content_length()
        {
        }
        /**
         * Returns the calculated width for included items.
         *
         * @return float
         */
        public function get_content_width()
        {
        }
        /**
         * Returns the calculated volume for included items.
         *
         * @return float
         */
        public function get_content_volume()
        {
        }
        /**
         * Returns the calculated height for included items.
         *
         * @return float
         */
        public function get_content_height()
        {
        }
        /**
         * Returns the shipping address properties.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string[]
         */
        public function get_address($context = 'view')
        {
        }
        /**
         * Returns the shipment total.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return float
         */
        public function get_total($context = 'view')
        {
        }
        /**
         * Returns the shipment total.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return float
         */
        public function get_subtotal($context = 'view')
        {
        }
        /**
         * Returns the additional total amount containing shipping and fee costs.
         * Only one of the shipments related to an order should include additional total.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return float
         */
        public function get_additional_total($context = 'view')
        {
        }
        /**
         * Default shipment incoterms, e.g. DAP.
         *
         * @return string
         */
        public function get_incoterms()
        {
        }
        public function has_tracking()
        {
        }
        /**
         * Returns the shipment tracking id.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_tracking_id($context = 'view')
        {
        }
        /**
         * Returns the shipment tracking URL.
         *
         * @return string
         */
        public function get_tracking_url()
        {
        }
        /**
         * Returns the shipment tracking instruction.
         *
         * @return string
         */
        public function get_tracking_instruction($plain = false)
        {
        }
        /**
         * Returns whether the current shipment has tracking instructions available or not.
         *
         * @return boolean
         */
        public function has_tracking_instruction()
        {
        }
        /**
         * Returns the shipment shipping provider.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_shipping_provider($context = 'view')
        {
        }
        public function get_shipping_provider_title()
        {
        }
        public function get_shipping_provider_instance()
        {
        }
        /**
         * Returns the formatted shipping address.
         *
         * @param  string $empty_content Content to show if no address is present.
         * @return string
         */
        public function get_formatted_address($empty_content = '')
        {
        }
        /**
         * Get a formatted shipping address for the order.
         *
         * @return string
         */
        public function get_address_map_url($address)
        {
        }
        /**
         * Returns the shipment address phone number.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_phone($context = 'view')
        {
        }
        /**
         * Returns the shipment address email.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_email($context = 'view')
        {
        }
        /**
         * Returns the shipment address first line.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_address_1($context = 'view')
        {
        }
        /**
         * Returns the shipment address second line.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_address_2($context = 'view')
        {
        }
        /**
         * Returns the shipment address street number by splitting the address.
         *
         * @param  string $type The address type e.g. address_1 or address_2.
         *
         * @return string
         */
        public function get_address_street_number($type = 'address_1')
        {
        }
        /**
         * Returns the shipment address street without number by splitting the address.
         *
         * @param  string $type The address type e.g. address_1 or address_2.
         *
         * @return string
         */
        public function get_address_street($type = 'address_1')
        {
        }
        public function get_address_street_addition($type = 'address_1')
        {
        }
        public function get_address_street_addition_2($type = 'address_1')
        {
        }
        /**
         * Returns the shipment address company.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_company($context = 'view')
        {
        }
        /**
         * Returns the shipment address first name.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_first_name($context = 'view')
        {
        }
        /**
         * Returns the shipment address last name.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_last_name($context = 'view')
        {
        }
        /**
         * Returns the shipment address formatted full name.
         *
         * @return string
         */
        public function get_formatted_full_name()
        {
        }
        /**
         * Returns the shipment address postcode.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_postcode($context = 'view')
        {
        }
        /**
         * Returns the shipment address city.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_city($context = 'view')
        {
        }
        /**
         * Returns the shipment address state.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_state($context = 'view')
        {
        }
        public function get_formatted_state()
        {
        }
        /**
         * Returns the shipment address country.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_country($context = 'view')
        {
        }
        /**
         * Returns the shipment address customs reference number.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_customs_reference_number($context = 'view')
        {
        }
        /**
         * Returns a sender address prop by checking the corresponding provider and falling back to
         * global sender address setting data.
         *
         * @param string $prop
         * @param string $context
         *
         * @return null|string
         */
        protected function get_sender_address_prop($prop, $context = 'view')
        {
        }
        /**
         * Returns the formatted sender address.
         *
         * @param  string $empty_content Content to show if no address is present.
         * @return string
         */
        public function get_formatted_sender_address($empty_content = '')
        {
        }
        /**
         * Returns the address of the sender e.g. customer.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string[]
         */
        public function get_sender_address($context = 'view')
        {
        }
        /**
         * Returns the sender address phone number.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_phone($context = 'view')
        {
        }
        /**
         * Returns the sender address email.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_email($context = 'view')
        {
        }
        /**
         * Returns the sender address first line.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_address_1($context = 'view')
        {
        }
        /**
         * Returns the sender address second line.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_address_2($context = 'view')
        {
        }
        /**
         * Returns the sender address street number by splitting the address.
         *
         * @param  string $type The address type e.g. address_1 or address_2.
         *
         * @return string
         */
        public function get_sender_address_street_number($type = 'address_1')
        {
        }
        /**
         * Returns the sender address street without number by splitting the address.
         *
         * @param  string $type The address type e.g. address_1 or address_2.
         *
         * @return string
         */
        public function get_sender_address_street($type = 'address_1')
        {
        }
        /**
         * Returns the sender address street addition by splitting the address.
         *
         * @param  string $type The address type e.g. address_1 or address_2.
         *
         * @return string
         */
        public function get_sender_address_street_addition($type = 'address_1')
        {
        }
        public function get_sender_address_street_addition_2($type = 'address_1')
        {
        }
        /**
         * Returns the sender address company.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_company($context = 'view')
        {
        }
        /**
         * Returns the sender address first name.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_first_name($context = 'view')
        {
        }
        /**
         * Returns the shipment address last name.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_last_name($context = 'view')
        {
        }
        /**
         * Returns the sender address formatted full name.
         *
         * @return string
         */
        public function get_formatted_sender_full_name()
        {
        }
        /**
         * Returns the sender address postcode.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_postcode($context = 'view')
        {
        }
        /**
         * Returns the sender address city.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_city($context = 'view')
        {
        }
        /**
         * Returns the sender address state.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_state($context = 'view')
        {
        }
        /**
         * Returns the sender address customs reference number.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_customs_reference_number($context = 'view')
        {
        }
        /**
         * Returns the sender address customs reference number.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_customs_uk_vat_id($context = 'view')
        {
        }
        public function get_formatted_sender_state()
        {
        }
        /**
         * Returns the sender address country.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_sender_country($context = 'view')
        {
        }
        /**
         * Return the date this shipment is estimated to be delivered.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return WC_DateTime|null object if the date is set or null if there is no date.
         */
        public function get_est_delivery_date($context = 'view')
        {
        }
        /**
         * Decides whether the shipment is sent to an external pickup or not.
         *
         * @param string[]|string $types
         *
         * @return boolean
         */
        public function send_to_external_pickup($types = array())
        {
        }
        /**
         * Returns an address prop.
         *
         * @param string $prop
         * @param string $context
         *
         * @return null|string
         */
        protected function get_address_prop($prop, $context = 'view')
        {
        }
        /**
         * Returns dimensions.
         *
         * @return string|array
         */
        public function get_dimensions($context = 'view')
        {
        }
        /**
         * Returns dimensions.
         *
         * @return string|array
         */
        public function get_package_dimensions()
        {
        }
        public function get_formatted_dimensions()
        {
        }
        /**
         * Returns whether the shipment is editable or not.
         *
         * @return boolean
         */
        public function is_editable()
        {
        }
        /**
         * Returns the shipment number.
         *
         * @return string
         */
        public function get_shipment_number()
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Setters
        |--------------------------------------------------------------------------
        */
        /**
         * Set shipment status.
         *
         * @param string  $new_status Status to change the shipment to. No internal gzd- prefix is required.
         * @param boolean $manual_update Whether it is a manual status update or not.
         * @return array  details of change
         */
        public function set_status($new_status, $manual_update = false)
        {
        }
        public function is_shipped()
        {
        }
        /**
         * Maybe set date sent.
         *
         * Sets the date sent variable when transitioning to the shipped shipment status.
         * Date sent is set once in this manner - only when it is not already set.
         */
        public function maybe_set_date_sent()
        {
        }
        /**
         * Updates status of shipment immediately.
         *
         * @uses Shipment::set_status()
         *
         * @param string $new_status    Status to change the shipment to. No internal gzd- prefix is required.
         * @param bool   $manual        Is this a manual order status change?
         * @return bool
         */
        public function update_status($new_status, $manual = false)
        {
        }
        /**
         * Set the date this shipment was created.
         *
         * @param  string|integer|null $date UTC timestamp, or ISO 8601 DateTime. If the DateTime string has no timezone or offset, WordPress site timezone will be assumed. Null if their is no date.
         */
        public function set_date_created($date = null)
        {
        }
        /**
         * Set the date this shipment was sent.
         *
         * @param  string|integer|null $date UTC timestamp, or ISO 8601 DateTime. If the DateTime string has no timezone or offset, WordPress site timezone will be assumed. Null if their is no date.
         */
        public function set_date_sent($date = null)
        {
        }
        /**
         * Set shipment weight in kg.
         *
         * @param string $weight The weight.
         */
        public function set_weight($weight)
        {
        }
        public function set_packaging_weight($weight)
        {
        }
        /**
         * Set shipment total weight.
         *
         * @param string $weight The weight.
         */
        public function set_total_weight($weight)
        {
        }
        /**
         * Set shipment width.
         *
         * @param string $width The width.
         */
        public function set_width($width)
        {
        }
        public function set_weight_unit($unit)
        {
        }
        public function set_dimension_unit($unit)
        {
        }
        /**
         * Set shipment length.
         *
         * @param string $length The length.
         */
        public function set_length($length)
        {
        }
        /**
         * Set shipment height.
         *
         * @param string $height The height.
         */
        public function set_height($height)
        {
        }
        /**
         * Set shipment address.
         *
         * @param string[] $address The address props.
         */
        public function set_address($address)
        {
        }
        /**
         * Set shipment shipping method.
         *
         * @param string $method The shipping method.
         */
        public function set_shipping_method($method)
        {
        }
        /**
         * Set shipment version.
         *
         * @param string $version The version.
         */
        public function set_version($version)
        {
        }
        /**
         * Set the date this shipment will be delivered.
         *
         * @param  string|integer|null $date UTC timestamp, or ISO 8601 DateTime. If the DateTime string has no timezone or offset, WordPress site timezone will be assumed. Null if their is no date.
         */
        public function set_est_delivery_date($date = null)
        {
        }
        /**
         * Set shipment total.
         *
         * @param float|string $value The shipment total.
         */
        public function set_total($value)
        {
        }
        /**
         * Set shipment total.
         *
         * @param float|string $value The shipment total.
         */
        public function set_subtotal($value)
        {
        }
        /**
         * Set shipment additional total.
         *
         * @param float|string $value The shipment total.
         */
        public function set_additional_total($value)
        {
        }
        /**
         * Set shipment shipping country.
         *
         * @param string $country The country in ISO format.
         */
        public function set_country($country)
        {
        }
        /**
         * Update a specific address prop.
         *
         * @param $prop
         * @param $value
         */
        protected function set_address_prop($prop, $value)
        {
        }
        /**
         * Set shipment tracking id.
         *
         * @param string $tracking_id The trakcing id.
         */
        public function set_tracking_id($tracking_id)
        {
        }
        /**
         * Set shipment shipping provider.
         *
         * @param string $provider The shipping provider.
         */
        public function set_shipping_provider($provider)
        {
        }
        /**
         * Set packaging id.
         *
         * @param integer $packaging_id The packaging id.
         */
        public function set_packaging_id($packaging_id)
        {
        }
        public function sync_packaging()
        {
        }
        public function update_packaging()
        {
        }
        /**
         * Return an array of items within this shipment.
         *
         * @return ShipmentItem[]
         */
        public function get_items()
        {
        }
        /**
         * Get's the URL to edit the shipment in the backend.
         *
         * @return string
         */
        public abstract function get_edit_shipment_url();
        public function get_view_shipment_url()
        {
        }
        /**
         * Get an item object.
         *
         * @param  int  $item_id ID of item to get.
         *
         * @return ShipmentItem|false
         */
        public function get_item($item_id)
        {
        }
        /**
         * Remove item from the shipment.
         *
         * @param int $item_id Item ID to delete.
         *
         * @return false|void
         */
        public function remove_item($item_id)
        {
        }
        public function update_item_quantity($item_id, $quantity = 1)
        {
        }
        /**
         * Adds a shipment item to this shipment. The shipment item will not persist until save.
         *
         * @since 3.0.0
         * @param ShipmentItem $item Shipment item object.
         *
         * @return false|void
         */
        public function add_item($item)
        {
        }
        /**
         * Reset item content data.
         */
        protected function reset_content_data()
        {
        }
        /**
         * Handle the status transition.
         */
        protected function status_transition()
        {
        }
        /**
         * Remove all items from the shipment.
         */
        public function remove_items()
        {
        }
        /**
         * Save all items which are part of this shipment.
         */
        protected function save_items()
        {
        }
        /**
         * Finds an ShipmentItem based on an order item id.
         *
         * @param integer $order_item_id
         *
         * @return bool|ShipmentItem
         */
        public function get_item_by_order_item_id($order_item_id)
        {
        }
        /**
         * Returns version.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return integer
         */
        public function get_version($context = 'view')
        {
        }
        /**
         * Returns the packaging id belonging to the shipment.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return integer
         */
        public function get_packaging_id($context = 'view')
        {
        }
        public function get_packaging()
        {
        }
        /**
         * Returns a list of available (fitting) packaging options for the current shipment
         *
         * @return Packaging[]
         */
        public function get_available_packaging()
        {
        }
        /**
         * Returns a list of user-selectable packaging options for the current shipment.
         *
         * @return Packaging[]
         */
        public function get_selectable_packaging()
        {
        }
        public function get_default_packaging()
        {
        }
        /**
         * Tries to fetch the order for the current shipment.
         *
         * @return bool|WC_Order|null
         */
        public abstract function get_order();
        public abstract function get_order_id();
        /**
         * Returns the formatted order number.
         *
         * @return string
         */
        public function get_order_number()
        {
        }
        /**
         * Returns whether the Shipment contains an order item or not.
         *
         * @param integer|integer[] $item_id
         *
         * @return boolean
         */
        public function contains_order_item($item_id)
        {
        }
        public function get_shippable_item_count()
        {
        }
        /**
         * Finds an ShipmentItem based on an item parent id.
         *
         * @param integer $item_parent_id
         *
         * @return bool|ShipmentItem
         */
        public function get_item_by_item_parent_id($item_parent_id)
        {
        }
        public function needs_items($available_items = false)
        {
        }
        public function sync($args = array())
        {
        }
        public function sync_items($args = array())
        {
        }
        /**
         * Returns a label
         *
         * @return boolean|ShipmentLabel|ShipmentReturnLabel
         */
        public function get_label()
        {
        }
        /**
         * Output label admin fields.
         */
        public function get_label_settings_html()
        {
        }
        /**
         * @param $props
         *
         * @return true|ShipmentError
         */
        public function create_label($props = false)
        {
        }
        public function delete_label($force = false)
        {
        }
        /**
         * Whether or not the current shipments supports labels or not.
         *
         * @return bool
         */
        public function supports_label()
        {
        }
        /**
         * Whether or not the current shipments needs a label or not.
         *
         * @return bool
         */
        public function needs_label($check_status = true)
        {
        }
        /**
         * Whether or not the current shipment has a valid label or not.
         *
         * @return bool
         */
        public function has_label()
        {
        }
        public function get_label_download_url($args = array())
        {
        }
        public function add_note($note, $added_by_user = false)
        {
        }
        /**
         * Calculate totals based on contained items.
         */
        protected function calculate_totals()
        {
        }
        public function delete($force_delete = false)
        {
        }
        /**
         * Save data to the database.
         *
         * @return integer shipment id
         */
        public function save()
        {
        }
    }
    /**
     * Return Shipment Class.
     */
    class ReturnShipment extends \Vendidero\Germanized\Shipments\Shipment
    {
        protected $extra_data = array('order_id' => 0, 'is_customer_requested' => false, 'sender_address' => array());
        /**
         * Returns the shipment type.
         *
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * Returns the order id belonging to the shipment.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return integer
         */
        public function get_order_id($context = 'view')
        {
        }
        /**
         * Returns whether the current return was requested by a customer or not.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return boolean
         */
        public function get_is_customer_requested($context = 'view')
        {
        }
        public function is_customer_requested()
        {
        }
        public function confirm_customer_request()
        {
        }
        /**
         * Returns the address of the sender e.g. customer.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string[]
         */
        public function get_sender_address($context = 'view')
        {
        }
        /**
         * Set shipment order id.
         *
         * @param string $order_id The order id.
         */
        public function set_order_id($order_id)
        {
        }
        /**
         * Set if the current return was requested by the customer or not.
         *
         * @param string $is_requested Whether or not it is requested by the customer.
         */
        public function set_is_customer_requested($is_requested)
        {
        }
        /**
         * Set shipment order.
         *
         * @param Order $order_shipment The order shipment.
         */
        public function set_order_shipment(&$order_shipment)
        {
        }
        /**
         * Returns shipment order.
         *
         * @return Order|null The order shipment.
         */
        public function get_order_shipment()
        {
        }
        /**
         * Returns the shippable item count.
         *
         * @return int
         */
        public function get_shippable_item_count()
        {
        }
        /**
         * Tries to fetch the order for the current shipment.
         *
         * @return bool|WC_Order|null
         */
        public function get_order()
        {
        }
        /**
         * Returns available shipment methods by checking the corresponding order.
         *
         * @return string[]
         */
        public function get_available_shipping_methods()
        {
        }
        /**
         * Returns a sender address prop.
         *
         * @param string $prop
         * @param string $context
         *
         * @return null|string
         */
        protected function get_sender_address_prop($prop, $context = 'view')
        {
        }
        /**
         * Set sender address.
         *
         * @param string[] $address The address props.
         */
        public function set_sender_address($address)
        {
        }
        /**
         * Syncs the return shipment with the corresponding parent shipment.
         *
         * @param array $args
         *
         * @return bool
         */
        public function sync($args = array())
        {
        }
        /**
         * Keeps items in sync with the parent shipment items.
         * Limits quantities and removes non-existent items.
         *
         * @param array $args
         *
         * @return bool
         */
        public function sync_items($args = array())
        {
        }
        /**
         * Returns whether the Shipment needs additional items or not.
         *
         * @param bool|integer[] $available_items
         *
         * @return bool
         */
        public function needs_items($available_items = false)
        {
        }
        /**
         * Returns the edit shipment URL.
         *
         * @return mixed|string|void
         */
        public function get_edit_shipment_url()
        {
        }
    }
    /**
     * Shipment Class.
     */
    class SimpleShipment extends \Vendidero\Germanized\Shipments\Shipment
    {
        protected $extra_data = array('order_id' => 0);
        /**
         * Returns the shipment type.
         *
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * Returns the order id belonging to the shipment.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return integer
         */
        public function get_order_id($context = 'view')
        {
        }
        /**
         * Set shipment order id.
         *
         * @param string $order_id The order id.
         */
        public function set_order_id($order_id)
        {
        }
        /**
         * Set shipment order.
         *
         * @param Order $order_shipment The order shipment.
         */
        public function set_order_shipment(&$order_shipment)
        {
        }
        /**
         * Tries to fetch the order for the current shipment.
         *
         * @return bool|WC_Order|null
         */
        public function get_order()
        {
        }
        /**
         * Returns the order shipment instance. Loads from DB if not yet exists.
         *
         * @return bool|Order
         */
        public function get_order_shipment()
        {
        }
        /**
         * Sync the shipment with it's corresponding order.
         *
         * @param array $args
         *
         * @return bool
         */
        public function sync($args = array())
        {
        }
        /**
         * Sync items with the corresponding order items.
         * Limits quantities and removes non-existing items.
         *
         * @param array $args
         *
         * @return bool
         */
        public function sync_items($args = array())
        {
        }
        /**
         * Returns available shipment methods by checking the corresponding order.
         *
         * @return string[]
         */
        public function get_available_shipping_methods()
        {
        }
        /**
         * Returns the number of items available for shipment.
         *
         * @return int|mixed|void
         */
        public function get_shippable_item_count()
        {
        }
        /**
         * Returns whether the Shipment needs additional items or not.
         *
         * @param bool|integer[] $available_items
         *
         * @return bool
         */
        public function needs_items($available_items = false)
        {
        }
        /**
         * Returns the edit shipment URL.
         *
         * @return mixed|string|void
         */
        public function get_edit_shipment_url()
        {
        }
    }
    class ShipmentError extends \WP_Error
    {
        protected $is_soft_error = false;
        public function __construct($code = '', $message = '', $data = '')
        {
        }
        public function add($code, $message, $data = '')
        {
        }
        public function get_error_messages_by_type()
        {
        }
        public function get_soft_error_messages($code = '')
        {
        }
        public function add_soft_error($code, $message)
        {
        }
        public function is_soft_error()
        {
        }
        protected function set_is_soft_error()
        {
        }
        public static function from_wp_error(\WP_Error $from)
        {
        }
    }
    /**
     * Shipment Order
     *
     * @class       WC_GZD_Shipment_Order
     * @version     1.0.0
     * @author      Vendidero
     */
    class Order
    {
        /**
         * The actual order item object
         *
         * @var object
         */
        protected $order;
        protected $shipments = null;
        protected $shipments_to_delete = array();
        /**
         * @param WC_Customer $customer
         */
        public function __construct($order)
        {
        }
        /**
         * Returns the Woo WC_Order original object
         *
         * @return object|WC_Order
         */
        public function get_order()
        {
        }
        /**
         * @return WC_DateTime|null
         */
        public function get_date_shipped()
        {
        }
        public function is_shipped()
        {
        }
        public function get_shipping_status()
        {
        }
        public function has_shipped_shipments()
        {
        }
        public function get_return_status()
        {
        }
        public function get_default_return_shipping_provider()
        {
        }
        public function validate_shipments($args = array())
        {
        }
        /**
         * @param Shipment $shipment
         *
         * @return float
         */
        public function calculate_shipment_additional_total($shipment)
        {
        }
        public function validate_shipment_item_quantities($shipment_id = false)
        {
        }
        /**
         * @return Shipment[] Shipments
         */
        public function get_shipments()
        {
        }
        /**
         * @return SimpleShipment[]
         */
        public function get_simple_shipments($shipped_only = false)
        {
        }
        /**
         * @return ReturnShipment[]
         */
        public function get_return_shipments()
        {
        }
        public function add_shipment(&$shipment)
        {
        }
        public function remove_shipment($shipment_id)
        {
        }
        /**
         * @param $shipment_id
         *
         * @return bool|SimpleShipment|ReturnShipment
         */
        public function get_shipment($shipment_id)
        {
        }
        /**
         * @param WC_Order_Item $order_item
         */
        public function get_item_quantity_left_for_shipping($order_item, $args = array())
        {
        }
        public function get_item_quantity_sent_by_order_item_id($order_item_id)
        {
        }
        public function order_item_is_non_returnable($order_item_id)
        {
        }
        /**
         * @param ShipmentItem $item
         */
        public function get_item_quantity_left_for_returning($order_item_id, $args = array())
        {
        }
        /**
         * @param false $group_by_shipping_class
         *
         * @return OrderItem[]
         */
        public function get_items_to_pack_left_for_shipping($group_by_shipping_class = false)
        {
        }
        /**
         * @param bool|Shipment $shipment
         * @return array
         */
        public function get_available_items_for_shipment($args = array())
        {
        }
        /**
         * Returns the first found matching shipment item for a certain order item id.
         *
         * @param $order_item_id
         *
         * @return bool|ShipmentItem
         */
        public function get_simple_shipment_item($order_item_id)
        {
        }
        public function get_non_returnable_items()
        {
        }
        /**
         * @return array
         */
        public function get_available_items_for_return($args = array())
        {
        }
        public function item_needs_shipping($order_item, $args = array())
        {
        }
        /**
         * Checks whether an item needs return or not by checking the quantity left for return.
         *
         * @param ShipmentItem $item
         * @param array $args
         *
         * @return mixed|void
         */
        public function item_needs_return($item, $args = array())
        {
        }
        /**
         * Returns the return request key added to allow a guest customer to add
         * a new return request to a certain order.
         *
         * @return mixed
         */
        public function get_order_return_request_key()
        {
        }
        /**
         * Removes the return request key from the order. Saves the order.
         */
        public function delete_order_return_request_key()
        {
        }
        /**
         * Returns items that are ready for shipping (defaults to non-virtual line items).
         *
         * @return WC_Order_Item[] Shippable items.
         */
        public function get_shippable_items()
        {
        }
        /**
         * Returns items that are ready for return. By default only shipped (or delivered) items are returnable.
         *
         * @return ShipmentItem[] Shippable items.
         */
        public function get_returnable_items()
        {
        }
        public function get_shippable_item_quantity($order_item)
        {
        }
        /**
         * Returns the total number of shippable items.
         *
         * @return mixed|void
         */
        public function get_shippable_item_count()
        {
        }
        /**
         * Returns the number of total returnable items.
         *
         * @return mixed|void
         */
        public function get_returnable_item_count()
        {
        }
        protected function has_local_pickup()
        {
        }
        /**
         * Checks whether the order needs shipping or not by checking quantity
         * for every line item.
         *
         * @param bool $sent_only Whether to only include shipments treated as sent or not.
         *
         * @return bool Whether the order needs shipping or not.
         */
        public function needs_shipping($args = array())
        {
        }
        /**
         * Checks whether the order needs return or not by checking quantity
         * for every line item.
         *
         * @return bool Whether the order needs shipping or not.
         */
        public function needs_return($args = array())
        {
        }
        public function save()
        {
        }
        /**
         * Call child methods if the method does not exist.
         *
         * @param $method
         * @param $args
         *
         * @return bool|mixed
         */
        public function __call($method, $args)
        {
        }
    }
    /**
     * Main package class.
     */
    class Package
    {
        /**
         * Version.
         *
         * @var string
         */
        const VERSION = '2.4.2';
        public static $upload_dir_suffix = '';
        protected static $method_settings = null;
        protected static $iso = null;
        /**
         * Init the package - load the REST API Server class.
         */
        public static function init()
        {
        }
        protected static function init_hooks()
        {
        }
        public static function add_return_shipment_guest_endpoints($template, $template_name)
        {
        }
        public static function register_shortcodes()
        {
        }
        public static function return_request_form($args = array())
        {
        }
        public static function load_wpml_compatibility($compatibility)
        {
        }
        public static function get_excluded_methods()
        {
        }
        public static function set_method_filters($methods)
        {
        }
        /**
         * Indicates whether the BoxPack library for improved packing calculation is supported
         *
         * @return bool
         */
        public static function is_packing_supported()
        {
        }
        public static function get_method_settings()
        {
        }
        public static function filter_method_settings($p_settings, $method)
        {
        }
        public static function add_method_settings($p_settings)
        {
        }
        public static function load_shipping_methods($package)
        {
        }
        public static function is_hpos_enabled()
        {
        }
        public static function inject_endpoints()
        {
        }
        public static function get_country_iso_alpha3($country_code)
        {
        }
        protected static function get_countries_iso_alpha3()
        {
        }
        public static function get_country_iso_alpha2($country_code)
        {
        }
        public static function get_base_country()
        {
        }
        public static function get_base_postcode()
        {
        }
        public static function base_country_belongs_to_eu_customs_area()
        {
        }
        public static function country_belongs_to_eu_customs_area($country, $postcode = '')
        {
        }
        public static function is_shipping_international($country, $args = array())
        {
        }
        public static function is_shipping_domestic($country, $args = array())
        {
        }
        /**
         * Whether shipping is inner EU (from one EU country to another) shipment or not.
         *
         * @param $country
         * @param array $args
         *
         * @return mixed|void
         */
        public static function is_shipping_inner_eu_country($country, $args = array())
        {
        }
        public static function get_endpoints()
        {
        }
        public static function register_endpoints($query_vars)
        {
        }
        public static function install()
        {
        }
        public static function install_integration()
        {
        }
        public static function maybe_set_upload_dir()
        {
        }
        public static function is_feature_plugin()
        {
        }
        public static function check_version()
        {
        }
        /**
         * Generate a unique key.
         *
         * @return string
         */
        protected static function generate_key()
        {
        }
        public static function log($message, $type = 'info')
        {
        }
        public static function get_upload_dir_suffix()
        {
        }
        public static function get_upload_dir()
        {
        }
        public static function get_relative_upload_dir($path)
        {
        }
        public static function set_upload_dir_filter()
        {
        }
        public static function unset_upload_dir_filter()
        {
        }
        public static function get_file_by_path($file)
        {
        }
        public static function filter_upload_dir($args)
        {
        }
        public static function has_dependencies()
        {
        }
        /**
         * Function used to Init WooCommerce Template Functions - This makes them pluggable by plugins and themes.
         */
        public static function include_template_functions()
        {
        }
        public static function filter_templates($path, $template_name)
        {
        }
        public static function register_data_stores($stores)
        {
        }
        /**
         * Return the version of the package.
         *
         * @return string
         */
        public static function get_version()
        {
        }
        /**
         * Return the path to the package.
         *
         * @return string
         */
        public static function get_path()
        {
        }
        /**
         * Return the path to the package.
         *
         * @return string
         */
        public static function get_url()
        {
        }
        public static function get_assets_url()
        {
        }
        public static function get_setting($name, $default = false)
        {
        }
        public static function get_store_address_country()
        {
        }
        public static function get_store_address_street()
        {
        }
        public static function get_store_address_street_number()
        {
        }
        public static function is_valid_datetime($maybe_datetime, $format = 'Y-m-d')
        {
        }
        public static function is_valid_mysql_date($mysql_date)
        {
        }
    }
    /**
     * WC_Ajax class.
     */
    class Ajax
    {
        /**
         * Hook in ajax handlers.
         */
        public static function init()
        {
        }
        /**
         * Hook in methods - uses WordPress ajax handlers (admin-ajax).
         */
        public static function add_ajax_events()
        {
        }
        public static function suppress_errors()
        {
        }
        public static function send_return_shipment_notification_email()
        {
        }
        public static function confirm_return_request()
        {
        }
        public static function create_shipment_label_load()
        {
        }
        public static function remove_shipment_label()
        {
        }
        public static function create_shipment_label_submit()
        {
        }
        protected static function get_shipment_html($p_shipment, $p_is_active = true)
        {
        }
        protected static function get_label_html($p_shipment, $p_label = false)
        {
        }
        /**
         * @param ShipmentLabel $label
         *
         * @return string
         */
        protected static function label_download_button_html($label)
        {
        }
        public static function edit_shipping_provider_status()
        {
        }
        public static function remove_shipping_provider()
        {
        }
        public static function sort_shipping_provider()
        {
        }
        public static function shipments_bulk_action_handle()
        {
        }
        public static function update_shipment_status()
        {
        }
        public static function remove_shipment()
        {
        }
        public static function add_shipment()
        {
        }
        public static function add_return_shipment_submit()
        {
        }
        public static function validate_shipment_item_quantities()
        {
        }
        public static function sync_shipment_items()
        {
        }
        public static function json_search_shipping_provider()
        {
        }
        public static function json_search_orders()
        {
        }
        public static function refresh_shipment_packaging()
        {
        }
        protected static function get_packaging_select_html($shipment)
        {
        }
        public static function save_shipments()
        {
        }
        public static function add_return_shipment_load()
        {
        }
        public static function add_shipment_item_load()
        {
        }
        public static function add_shipment_item_submit()
        {
        }
        public static function remove_shipment_item()
        {
        }
        public static function limit_shipment_item_quantity()
        {
        }
    }
    /**
     * Main package class.
     */
    class Install
    {
        public static function install()
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments\Labels {
    /**
     * WC_Admin class.
     */
    class DownloadHandler
    {
        public static function init()
        {
        }
        public static function download_bulk_export()
        {
        }
        public static function download_label()
        {
        }
        public static function parse_args($args = array())
        {
        }
        public static function download($path, $filename, $force = false)
        {
        }
    }
    /**
     * Abstract WC Object Query Class
     *
     * Extended by classes to provide a query abstraction layer for safe object searching.
     *
     * @version  3.1.0
     * @package  WooCommerce/Abstracts
     */
    class Query extends \WC_Object_Query
    {
        protected $args = array();
        protected $query_fields = array();
        protected $query_from = '';
        protected $query_where = '';
        protected $meta_query = null;
        protected $query_limit = '';
        protected $query_orderby = '';
        protected $request = '';
        protected $results = null;
        protected $total_labels = 0;
        /**
         * Get the default allowed query vars.
         *
         * @return array
         */
        protected function get_default_query_vars()
        {
        }
        /**
         * Get labels matching the current query vars.
         *
         * @return Label[] objects
         *
         * @throws \Exception When WC_Data_Store validation fails.
         */
        public function get_labels()
        {
        }
        public function get_total()
        {
        }
        /**
         * Query shipments.
         *
         * @param array $query_args
         */
        protected function query($query_args)
        {
        }
        /**
         * Parse the query before preparing it.
         */
        protected function parse_query()
        {
        }
        /**
         * Prepare the query for DB usage.
         */
        protected function prepare_query()
        {
        }
        /**
         * Used internally to generate an SQL string for searching across multiple columns
         *
         * @since 3.0.6
         *
         * @global \wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $string
         * @param array  $cols
         * @param bool   $wild   Whether to allow wildcard searches. Default is false for Network Admin, true for single site.
         *                       Single site allows leading and trailing wildcards, Network Admin only trailing.
         * @return string
         */
        protected function get_search_sql($string, $cols, $wild = false)
        {
        }
        /**
         * Parse orderby statement.
         *
         * @param string $orderby
         * @return string
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * Parse order statement.
         *
         * @param string $order
         * @return string
         */
        protected function parse_order($order)
        {
        }
    }
    /**
     * Main package class.
     */
    class Automation
    {
        /**
         * Init the package - load the REST API Server class.
         */
        public static function init()
        {
        }
        /**
         * @param Shipment $shipment
         */
        public static function maybe_adjust_shipment_status($shipment)
        {
        }
        public static function set_after_create_automation($shipment_id, $shipment)
        {
        }
        /**
         * @param Shipment $shipment
         * @param boolean $is_hook
         */
        protected static function do_automation($shipment, $is_hook = true)
        {
        }
        /**
         * @param $shipment_id
         * @param Shipment $shipment
         */
        public static function set_automation($shipment_id, $shipment)
        {
        }
        public static function create_label($shipment_id, $shipment = false)
        {
        }
        public static function maybe_create_label($shipment_id, $shipment = false)
        {
        }
    }
    /**
     * Label factory class
     */
    class Factory
    {
        /**
         * Get label.
         *
         * @param  mixed $label_id (default: false) Label id to get or empty if new.
         * @return ShipmentLabel|bool
         */
        public static function get_label($label_id = false, $shipping_provider_name = '', $label_type = 'simple')
        {
        }
        public static function get_label_id($label)
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments {
    class Emails
    {
        public static function init()
        {
        }
        public static function attach_shipments_data($order, $sent_to_admin, $plain_text, $email = false)
        {
        }
        public static function set_woocommerce_template_dir($dir, $template)
        {
        }
        public static function register_emails($emails)
        {
        }
        public static function email_hooks()
        {
        }
        public static function register_email_notifications($actions)
        {
        }
        /**
         * @param Shipment $shipment
         * @param bool $sent_to_admin
         * @param bool $plain_text
         * @param string $email
         */
        public static function email_return_instructions($shipment, $sent_to_admin = false, $plain_text = false, $email = '')
        {
        }
        /**
         * @param Shipment $shipment
         * @param bool $sent_to_admin
         * @param bool $plain_text
         * @param string $email
         */
        public static function email_tracking($shipment, $sent_to_admin = false, $plain_text = false, $email = '')
        {
        }
        /**
         * @param Shipment $shipment
         * @param bool $sent_to_admin
         * @param bool $plain_text
         * @param string $email
         */
        public static function email_address($shipment, $sent_to_admin = false, $plain_text = false, $email = '')
        {
        }
        /**
         * Show the order details table
         *
         * @param \WC_Order $order         Order instance.
         * @param bool      $sent_to_admin If should sent to admin.
         * @param bool      $plain_text    If is plain text email.
         * @param string    $email         Email address.
         */
        public static function email_details($shipment, $sent_to_admin = false, $plain_text = false, $email = '')
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments\ShippingProvider {
    /**
     * Shipment Order
     *
     * @class       WC_GZD_Shipment_Order
     * @version     1.0.0
     * @author      Vendidero
     */
    class Method
    {
        /**
         * The actual method object
         *
         * @var WC_Shipping_Method
         */
        protected $method = false;
        protected $instance_form_fields = array();
        protected $is_placeholder = false;
        protected $placeholder_instance_id = '';
        protected $placeholder_id = '';
        protected $provider_slug = null;
        /**
         * @param WC_Shipping_Method|\WC_Shipping_Rate|mixed $method
         * @param boolean $is_placeholder
         */
        public function __construct($method, $is_placeholder = false)
        {
        }
        protected function init_placeholder($id)
        {
        }
        public function get_fallback_setting_value($setting_key)
        {
        }
        protected function supports_instance_settings()
        {
        }
        public function is_placeholder()
        {
        }
        /**
         * Get all available shipping method settings. This method (re-) loads all
         * the settings available across every registered shipping provider.
         * Call the cached version instead for performance improvements.
         *
         * @see Package::get_method_settings()
         *
         * @return mixed|void
         */
        public static function get_admin_settings()
        {
        }
        protected function init()
        {
        }
        protected function get_hook_prefix()
        {
        }
        /**
         * Returns the Woo WC_Shipping_Method original object
         *
         * @return object|WC_Shipping_Method
         */
        public function get_method()
        {
        }
        public function get_id()
        {
        }
        public function get_instance_id()
        {
        }
        public function has_option($key)
        {
        }
        public function setting_belongs_to_provider($setting_key, $provider = '')
        {
        }
        public function is_provider_enabled($provider)
        {
        }
        public function set_provider($provider_name)
        {
        }
        public function get_provider()
        {
        }
        public function get_provider_instance()
        {
        }
        protected function get_custom_setting_prefix_key()
        {
        }
        protected function maybe_prefix_key($key)
        {
        }
        public function get_option($key)
        {
        }
        /**
         * Call child methods if the method does not exist.
         *
         * @param $method
         * @param $args
         *
         * @return bool|mixed
         */
        public function __call($method, $args)
        {
        }
    }
    class Helper
    {
        /**
         * The single instance of the class
         *
         * @var Helper
         * @since 1.0.5
         */
        protected static $_instance = null;
        /**
         * Stores shipping providers loaded.
         *
         * @var Simple[]|null
         */
        public $shipping_providers = null;
        /**
         * Main Helper Instance.
         *
         * Ensures only one instance of the Shipping Provider Helper is loaded or can be loaded.
         *
         * @return Helper Main instance
         * @since 1.0.5
         */
        public static function instance()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @since 2.1
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 2.1
         */
        public function __wakeup()
        {
        }
        /**
         * Initialize.
         */
        public function __construct()
        {
        }
        /**
         * Register a shipping provider.
         *
         * @param ShippingProvider|string $provider Either the name of the provider's class, or an instance of the provider's class.
         *
         * @return bool|void
         */
        public function register_shipping_provider($provider)
        {
        }
        /**
         * Shipping providers register themselves by returning their main class name through the woocommerce_gzd_shipping_provider_integrations filter.
         *
         * @return array
         */
        public function get_shipping_provider_class_names()
        {
        }
        public function is_shipping_provider_activated($name)
        {
        }
        /**
         * Loads all shipping providers which are hooked in.
         *
         * @return ShippingProvider[]
         */
        public function load_shipping_providers()
        {
        }
        /**
         * Returns all registered shipping providers for usage.
         *
         * @return Simple|Auto|ShippingProvider[]
         */
        public function get_shipping_providers()
        {
        }
        /**
         * @param $name
         *
         * @return false|Simple|Auto|ShippingProvider
         */
        public function get_shipping_provider($name)
        {
        }
    }
    /**
     * Shipment Order
     *
     * @class       WC_GZD_Shipment_Order
     * @version     1.0.0
     * @author      Vendidero
     */
    class MethodPlaceholder extends \Vendidero\Germanized\Shipments\ShippingProvider\Method
    {
        public function __construct($id)
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments {
    /**
     * Order item class.
     */
    class ShipmentItem extends \WC_Data
    {
        protected $order_item = null;
        protected $shipment = null;
        protected $product = null;
        /**
         * Order Data array. This is the core order data exposed in APIs since 3.0.0.
         *
         * @since 3.0.0
         * @var array
         */
        protected $data = array('shipment_id' => 0, 'order_item_id' => 0, 'parent_id' => 0, 'quantity' => 1, 'product_id' => 0, 'weight' => '', 'width' => '', 'length' => '', 'height' => '', 'sku' => '', 'name' => '', 'total' => 0, 'subtotal' => 0, 'hs_code' => '', 'customs_description' => '', 'manufacture_country' => '', 'attributes' => array());
        /**
         * Stores meta in cache for future reads.
         * A group must be set to to enable caching.
         *
         * @var string
         */
        protected $cache_group = 'shipment-items';
        /**
         * Meta type. This should match up with
         * the types available at https://developer.wordpress.org/reference/functions/add_metadata/.
         * WP defines 'post', 'user', 'comment', and 'term'.
         *
         * @var string
         */
        protected $meta_type = 'shipment_item';
        /**
         * This is the name of this object type.
         *
         * @var string
         */
        protected $object_type = 'shipment_item';
        /**
         * Constructor.
         *
         * @param int|object|array $item ID to load from the DB, or WC_Order_Item object.
         */
        public function __construct($item = 0)
        {
        }
        /**
         * Merge changes with data and clear.
         * Overrides WC_Data::apply_changes.
         * array_replace_recursive does not work well for order items because it merges taxes instead
         * of replacing them.
         *
         * @since 3.2.0
         */
        public function apply_changes()
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Getters
        |--------------------------------------------------------------------------
        */
        public function get_type()
        {
        }
        /**
         * Get order ID this meta belongs to.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return int
         */
        public function get_shipment_id($context = 'view')
        {
        }
        /**
         * Get order ID this meta belongs to.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return int
         */
        public function get_order_item_id($context = 'view')
        {
        }
        /**
         * Get order ID this meta belongs to.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return int
         */
        public function get_product_id($context = 'view')
        {
        }
        /**
         * Get item parent id.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return int
         */
        public function get_parent_id($context = 'view')
        {
        }
        /**
         * Get order ID this meta belongs to.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return int
         */
        public function get_total($context = 'view')
        {
        }
        /**
         * Get order ID this meta belongs to.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return int
         */
        public function get_subtotal($context = 'view')
        {
        }
        /**
         * Get quantity.
         *
         * @return int
         */
        public function get_sku($context = 'view')
        {
        }
        /**
         * Get quantity.
         *
         * @return int
         */
        public function get_quantity($context = 'view')
        {
        }
        /**
         * Get weight.
         *
         * @return string
         */
        public function get_weight($context = 'view')
        {
        }
        /**
         * Get width.
         *
         * @return string
         */
        public function get_width($context = 'view')
        {
        }
        /**
         * Get length.
         *
         * @return string
         */
        public function get_length($context = 'view')
        {
        }
        /**
         * Get height.
         *
         * @return string
         */
        public function get_height($context = 'view')
        {
        }
        public function get_name($context = 'view')
        {
        }
        public function get_customs_description($context = 'view')
        {
        }
        public function get_hs_code($context = 'view')
        {
        }
        public function get_manufacture_country($context = 'view')
        {
        }
        /**
         * Get attributes.
         *
         * @return string[]
         */
        public function get_attributes($context = 'view')
        {
        }
        public function has_attributes()
        {
        }
        /**
         * Get parent order object.
         *
         * @return SimpleShipment|ReturnShipment|Shipment
         */
        public function get_shipment()
        {
        }
        /**
         * Sets the linked shipment instance.
         *
         * @param Shipment $shipment
         */
        public function set_shipment(&$shipment)
        {
        }
        /**
         * Syncs an item with either it's parent item or the corresponding order item.
         *
         * @param array $args
         */
        public function sync($args = array())
        {
        }
        public function get_order_item()
        {
        }
        public function get_product()
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Setters
        |--------------------------------------------------------------------------
        */
        /**
         * Set order ID.
         *
         * @param int $value Order ID.
         */
        public function set_shipment_id($value)
        {
        }
        /**
         * Set order ID.
         *
         * @param int $value Order ID.
         */
        public function set_order_item_id($value)
        {
        }
        /**
         * Set order ID.
         *
         * @param int $value Order ID.
         */
        public function set_total($value)
        {
        }
        /**
         * Set order ID.
         *
         * @param int $value Order ID.
         */
        public function set_subtotal($value)
        {
        }
        /**
         * Set order ID.
         *
         * @param int $value Order ID.
         */
        public function set_product_id($value)
        {
        }
        /**
         * Set parent id.
         *
         * @param int $value parent id.
         */
        public function set_parent_id($value)
        {
        }
        public function set_sku($sku)
        {
        }
        /**
         * Set weight in kg
         *
         * @param $weight
         */
        public function set_weight($weight)
        {
        }
        /**
         * Set width in cm
         *
         * @param $weight
         */
        public function set_width($width)
        {
        }
        /**
         * Set length in cm
         *
         * @param $weight
         */
        public function set_length($length)
        {
        }
        /**
         * Set height in cm
         *
         * @param $weight
         */
        public function set_height($height)
        {
        }
        public function get_dimensions($context = 'view')
        {
        }
        public function set_quantity($quantity)
        {
        }
        public function set_name($name)
        {
        }
        public function set_hs_code($code)
        {
        }
        public function set_customs_description($description)
        {
        }
        public function set_manufacture_country($country)
        {
        }
        /**
         * Set attributes
         *
         * @param $attributes
         */
        public function set_attributes($attributes)
        {
        }
        /*
        |--------------------------------------------------------------------------
        | Other Methods
        |--------------------------------------------------------------------------
        */
    }
    class Automation
    {
        protected static $current_new_order_id = null;
        public static function init()
        {
        }
        /**
         * Make sure that his callback is only executed once for new order requests.
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function after_new_order($order)
        {
        }
        /**
         * @param $order_id
         * @param $old_status
         * @param $new_status
         * @param WC_Order $order
         */
        public static function maybe_mark_shipments_shipped($order_id, $old_status, $new_status, $order)
        {
        }
        public static function mark_shipments_shipped($order_id)
        {
        }
        /**
         * Mark the order as completed if the order is fully shipped.
         *
         * @param $order_id
         */
        public static function mark_order_completed($order_id)
        {
        }
        public static function create_shipments($order, $enable_auto_filter = true)
        {
        }
        protected static function get_auto_statuses()
        {
        }
        public static function maybe_create_shipments($order_id)
        {
        }
        public static function maybe_create_subscription_shipments($renewal_order)
        {
        }
    }
    class PDFMerger
    {
        /**
         * Fpdi pdf instance
         *
         * @var null|Fpdi
         */
        protected $_pdf = null;
        /**
         * Pdf constructor
         *
         */
        public function __construct()
        {
        }
        /**
         * Add file to this pdf
         *
         * @param string $filename Filename of the source file
         * @param mixed $pages Range of files (if not set, all pages where imported)
         */
        public function add($filename, $pages = array(), $width = 210)
        {
        }
        /**
         * Output merged pdf
         *
         * @param string $type
         */
        public function output($filename, $type = 'I')
        {
        }
        /**
         * Force download merged pdf as file
         *
         * @param $filename
         *
         * @return string
         */
        public function download($filename)
        {
        }
        /**
         * Save merged pdf
         *
         * @param $filename
         *
         * @return string
         */
        public function save($filename)
        {
        }
    }
    /**
     * Return reason
     *
     * @class       ReturnReason
     * @version     1.0.0
     * @author      Vendidero
     */
    class ReturnReason
    {
        protected $args = array();
        public function __construct($args)
        {
        }
        public function get_reason()
        {
        }
        public function get_code()
        {
        }
        public function get_name()
        {
        }
        public function get_order()
        {
        }
    }
    /**
     * Packaging Class.
     */
    class Packaging extends \WC_Data
    {
        /**
         * This is the name of this object type.
         *
         * @since 1.0.0
         * @var string
         */
        protected $object_type = 'packaging';
        /**
         * Contains a reference to the data store for this class.
         *
         * @since 1.0.0
         * @var object
         */
        protected $data_store_name = 'packaging';
        /**
         * Stores meta in cache for future reads.
         * A group must be set to to enable caching.
         *
         * @since 1.0.0
         * @var string
         */
        protected $cache_group = 'packaging';
        /**
         * Stores packaging data.
         *
         * @var array
         */
        protected $data = array('date_created' => null, 'weight' => 0, 'max_content_weight' => 0, 'width' => 0, 'height' => 0, 'length' => 0, 'order' => 0, 'type' => '', 'description' => '');
        /**
         * Get the packaging if ID is passed, otherwise the packaging is new and empty.
         * This class should NOT be instantiated, but the `wc_gzd_get_packaging` function should be used.
         *
         * @param int|object|Packaging $packaging packaging to read.
         */
        public function __construct($data = 0)
        {
        }
        /**
         * Merge changes with data and clear.
         * Overrides WC_Data::apply_changes.
         *
         * @since 3.2.0
         */
        public function apply_changes()
        {
        }
        /**
         * Prefix for action and filter hooks on data.
         *
         * @return string
         */
        protected function get_hook_prefix()
        {
        }
        /**
         * Prefix for action and filter hooks on data.
         *
         * @return string
         */
        protected function get_general_hook_prefix()
        {
        }
        /**
         * Return the date this packaging was created.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return WC_DateTime|null object if the date is set or null if there is no date.
         */
        public function get_date_created($context = 'view')
        {
        }
        /**
         * Returns the packaging weight in kg.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_weight($context = 'view')
        {
        }
        /**
         * Returns the packaging max content weight in kg.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_max_content_weight($context = 'view')
        {
        }
        /**
         * Returns the packaging order within its list.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_order($context = 'view')
        {
        }
        /**
         * Returns the packaging type e.g. box or letter.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_type($context = 'view')
        {
        }
        /**
         * Returns the packaging description.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_description($context = 'view')
        {
        }
        /**
         * Returns the packaging length in cm.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_length($context = 'view')
        {
        }
        /**
         * Returns the packaging width in cm.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_width($context = 'view')
        {
        }
        /**
         * Returns the packaging height in cm.
         *
         * @param  string $context What the value is for. Valid values are 'view' and 'edit'.
         * @return string
         */
        public function get_height($context = 'view')
        {
        }
        public function has_dimensions()
        {
        }
        /**
         * Returns dimensions.
         *
         * @return string|array
         */
        public function get_dimensions()
        {
        }
        public function get_formatted_dimensions()
        {
        }
        public function get_volume()
        {
        }
        /**
         * Set the date this packaging was created.
         *
         * @param  string|integer|null $date UTC timestamp, or ISO 8601 DateTime. If the DateTime string has no timezone or offset, WordPress site timezone will be assumed. Null if their is no date.
         */
        public function set_date_created($date = null)
        {
        }
        /**
         * Set packaging weight in kg.
         *
         * @param string $weight The weight.
         */
        public function set_weight($weight)
        {
        }
        public function get_title()
        {
        }
        /**
         * Set packaging order.
         *
         * @param integer $order The order.
         */
        public function set_order($order)
        {
        }
        /**
         * Set packaging max content weight in kg.
         *
         * @param string $weight The weight.
         */
        public function set_max_content_weight($weight)
        {
        }
        /**
         * Set packaging type
         *
         * @param string $type The type.
         */
        public function set_type($type)
        {
        }
        /**
         * Set packaging description
         *
         * @param string $description The description.
         */
        public function set_description($description)
        {
        }
        /**
         * Set packaging width in cm.
         *
         * @param string $width The width.
         */
        public function set_width($width)
        {
        }
        /**
         * Set packaging length in cm.
         *
         * @param string $length The length.
         */
        public function set_length($length)
        {
        }
        /**
         * Set packaging height in cm.
         *
         * @param string $height The height.
         */
        public function set_height($height)
        {
        }
    }
    /**
     * Abstract WC Object Query Class
     *
     * Extended by classes to provide a query abstraction layer for safe object searching.
     *
     * @version  3.1.0
     * @package  WooCommerce/Abstracts
     */
    class ShipmentQuery extends \WC_Object_Query
    {
        protected $args = array();
        protected $query_fields = array();
        protected $query_from = '';
        protected $query_where = '';
        protected $meta_query = null;
        protected $query_limit = '';
        protected $query_orderby = '';
        protected $request = '';
        protected $results = null;
        protected $total_shipments = 0;
        protected $max_num_pages = 0;
        /**
         * Get the default allowed query vars.
         *
         * @return array
         */
        protected function get_default_query_vars()
        {
        }
        /**
         * Get shipments matching the current query vars.
         *
         * @return Shipment[] Array containing Shipments.
         */
        public function get_shipments()
        {
        }
        public function get_total()
        {
        }
        public function get_max_num_pages()
        {
        }
        /**
         * Query shipments.
         *
         * @param array $query_args
         */
        protected function query($query_args)
        {
        }
        /**
         * Parse the query before preparing it.
         */
        protected function parse_query()
        {
        }
        /**
         * Prepare the query for DB usage.
         */
        protected function prepare_query()
        {
        }
        /**
         * Used internally to generate an SQL string for searching across multiple columns
         *
         * @since 3.0.6
         *
         * @global wpdb $wpdb WordPress database abstraction object.
         *
         * @param string $string
         * @param array  $cols
         * @param bool   $wild   Whether to allow wildcard searches. Default is false for Network Admin, true for single site.
         *                       Single site allows leading and trailing wildcards, Network Admin only trailing.
         * @return string
         */
        protected function get_search_sql($string, $cols, $wild = false)
        {
        }
        /**
         * Parse orderby statement.
         *
         * @param string $orderby
         * @return string
         */
        protected function parse_orderby($orderby)
        {
        }
        /**
         * Parse order statement.
         *
         * @param string $order
         * @return string
         */
        protected function parse_order($order)
        {
        }
    }
    /**
     * Packaging factory class
     */
    class PackagingFactory
    {
        /**
         * Get packaging.
         *
         * @param  mixed $packaging_id (default: false) Packaging id to get or empty if new.
         * @return Packaging|bool
         */
        public static function get_packaging($packaging_id = false)
        {
        }
        public static function get_packaging_id($packaging)
        {
        }
    }
    /**
     * Order item class.
     */
    class ShipmentReturnItem extends \Vendidero\Germanized\Shipments\ShipmentItem
    {
        protected $extra_data = array('return_reason_code' => '');
        public function get_type()
        {
        }
        public function get_return_reason_code($context = 'view')
        {
        }
        public function set_return_reason_code($code)
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments\Packing {
    /**
     * An item to be packed.
     */
    class OrderItem implements \DVDoug\BoxPacker\Item
    {
        /**
         * @var \WC_Order_Item_Product
         */
        protected $item = null;
        protected $product = null;
        protected $dimensions = array();
        protected $weight = 0;
        /**
         * Box constructor.
         *
         * @param \WC_Order_Item_Product $item
         *
         * @throws \Exception
         */
        public function __construct($item)
        {
        }
        public function get_id()
        {
        }
        /**
         * @return \WC_Order_Item_Product
         */
        public function get_order_item()
        {
        }
        /**
         * Item SKU etc.
         */
        public function getDescription() : string
        {
        }
        /**
         * Item width in mm.
         */
        public function getWidth() : int
        {
        }
        /**
         * Item length in mm.
         */
        public function getLength() : int
        {
        }
        /**
         * Item depth in mm.
         */
        public function getDepth() : int
        {
        }
        /**
         * Item weight in g.
         */
        public function getWeight() : int
        {
        }
        /**
         * Does this item need to be kept flat / packed "this way up"?
         */
        public function getKeepFlat() : bool
        {
        }
    }
    class PackagingBox implements \DVDoug\BoxPacker\Box
    {
        /**
         * @var Packaging
         */
        protected $packaging = null;
        protected $dimensions = array();
        protected $max_weight = 0;
        protected $weight = 0;
        /**
         * Box constructor.
         *
         * @param Packaging $packaging
         */
        public function __construct($packaging)
        {
        }
        public function get_id()
        {
        }
        /**
         * Reference for box type (e.g. SKU or description).
         */
        public function getReference() : string
        {
        }
        /**
         * Outer width in mm.
         */
        public function getOuterWidth() : int
        {
        }
        /**
         * Outer length in mm.
         */
        public function getOuterLength() : int
        {
        }
        /**
         * Outer depth in mm.
         */
        public function getOuterDepth() : int
        {
        }
        /**
         * Empty weight in g.
         */
        public function getEmptyWeight() : int
        {
        }
        /**
         * Returns the threshold by which the inner dimension gets reduced
         * in comparison to the outer dimension.
         *
         * @param string $type
         *
         * @return float
         */
        public function get_inner_dimension_buffer($value, $type = 'width')
        {
        }
        /**
         * Inner width in mm.
         */
        public function getInnerWidth() : int
        {
        }
        /**
         * Inner length in mm.
         */
        public function getInnerLength() : int
        {
        }
        /**
         * Inner depth in mm.
         */
        public function getInnerDepth() : int
        {
        }
        /**
         * Max weight the packaging can hold in g.
         */
        public function getMaxWeight() : int
        {
        }
    }
    /**
     * An item to be packed.
     */
    class ShipmentItem implements \DVDoug\BoxPacker\Item
    {
        /**
         * @var \Vendidero\Germanized\Shipments\ShipmentItem
         */
        protected $item = null;
        protected $product = null;
        protected $dimensions = array();
        protected $weight = 0;
        /**
         * Box constructor.
         *
         * @param \Vendidero\Germanized\Shipments\ShipmentItem $item
         */
        public function __construct($item)
        {
        }
        /**
         * @return \Vendidero\Germanized\Shipments\ShipmentItem
         */
        public function get_shipment_item()
        {
        }
        public function get_id()
        {
        }
        /**
         * Item SKU etc.
         */
        public function getDescription() : string
        {
        }
        /**
         * Item width in mm.
         */
        public function getWidth() : int
        {
        }
        /**
         * Item length in mm.
         */
        public function getLength() : int
        {
        }
        /**
         * Item depth in mm.
         */
        public function getDepth() : int
        {
        }
        /**
         * Item weight in g.
         */
        public function getWeight() : int
        {
        }
        /**
         * Does this item need to be kept flat / packed "this way up"?
         */
        public function getKeepFlat() : bool
        {
        }
    }
    class Helper
    {
        protected static $packaging = null;
        /**
         * @param false $id
         *
         * @return PackagingBox[]|boolean|PackagingBox
         */
        public static function get_available_packaging($id = false)
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments\Admin {
    /**
     * WC_Admin class.
     */
    class Admin
    {
        protected static $bulk_handlers = null;
        /**
         * Constructor.
         */
        public static function init()
        {
        }
        public static function render_order_columns($column, $post_id)
        {
        }
        public static function register_order_shipping_status_column($columns)
        {
        }
        /**
         * In case the shipper/return country is set to AF (or DE with missing state) due to a bug in Woo, make sure
         * to automatically adjust it to the right value in case the base country option is being saved.
         *
         * @return void
         */
        public static function observe_base_country_setting()
        {
        }
        public static function product_options()
        {
        }
        /**
         * @param \WC_Product $product
         */
        public static function save_product($product)
        {
        }
        public static function check_upload_dir()
        {
        }
        protected static function add_settings_after($settings, $id, $insert = array(), $type = '')
        {
        }
        public static function register_endpoint_settings($settings, $current_section)
        {
        }
        public static function menu_return_count()
        {
        }
        public static function get_admin_shipment_item_columns($shipment)
        {
        }
        protected static function sort_shipment_item_columns($a, $b)
        {
        }
        public static function save_packaging_list()
        {
        }
        public static function save_return_reasons($tab, $current_section)
        {
        }
        public static function output_return_reasons_field($value)
        {
        }
        public static function output_packaging_reports($value)
        {
        }
        public static function output_packaging_list($value)
        {
        }
        public static function add_template_check($check)
        {
        }
        public static function add_table_view($screen_ids)
        {
        }
        public static function handle_order_bulk_actions($redirect_to, $action, $ids)
        {
        }
        public static function define_order_bulk_actions($actions)
        {
        }
        public static function set_screen_option($new_value, $option, $value)
        {
        }
        public static function shipments_menu()
        {
        }
        /**
         * @param Shipment $shipment
         */
        public static function get_shipment_tracking_html($shipment)
        {
        }
        /**
         * @param Table $table
         */
        protected static function setup_table($table)
        {
        }
        public static function setup_shipments_table()
        {
        }
        public static function setup_returns_table()
        {
        }
        public static function shipments_page()
        {
        }
        public static function returns_page()
        {
        }
        public static function add_meta_boxes()
        {
        }
        public static function admin_styles()
        {
        }
        public static function admin_scripts()
        {
        }
        /**
         * @return BulkActionHandler[] $handler
         */
        public static function get_bulk_action_handlers()
        {
        }
        public static function get_bulk_action_handler($action)
        {
        }
        /**
         * Helper function to determine whether the current screen is an order edit screen.
         *
         * @param string $screen_id Screen ID.
         *
         * @return bool Whether the current screen is an order edit screen.
         */
        protected static function is_order_meta_box_screen($screen_id)
        {
        }
        public static function get_order_screen_id()
        {
        }
        protected static function get_order_screen_ids()
        {
        }
        public static function get_screen_ids()
        {
        }
    }
    /**
     * WC_Meta_Box_Order_Items Class.
     */
    class MetaBox
    {
        /**
         * @param Order $order
         */
        public static function refresh_shipments(&$order)
        {
        }
        /**
         * @param Order $order
         * @param bool $shipment
         */
        public static function refresh_shipment_items(&$order, &$shipment = false)
        {
        }
        /**
         * @param Order $order
         */
        public static function refresh_status(&$order)
        {
        }
        protected static function init_order_object($post)
        {
        }
        /**
         * Output the metabox.
         *
         * @param \WP_Post $post
         */
        public static function output($post)
        {
        }
        /**
         * Save meta box data.
         *
         * @param int $post_id
         */
        public static function save($order_id)
        {
        }
    }
    /**
     * Class Table
     * @package Vendidero/Germanized/Shipments\Admin
     */
    class Table extends \WP_List_Table
    {
        protected $query = null;
        protected $stati = array();
        protected $counts = array();
        protected $notice = array();
        protected $shipment_type = '';
        /**
         * Constructor.
         *
         * @since 3.0.6
         *
         * @see WP_List_Table::__construct() for more information on default arguments.
         *
         * @global WP_Post_Type $post_type_object
         * @global wpdb         $wpdb
         *
         * @param array $args An associative array of arguments.
         */
        public function __construct($args = array())
        {
        }
        public function set_default_hidden_columns($columns, $screen)
        {
        }
        protected function get_default_hidden_columns()
        {
        }
        public function enable_query_removing($args)
        {
        }
        /**
         * Handle bulk actions.
         *
         * @param  string $redirect_to URL to redirect to.
         * @param  string $action      Action name.
         * @param  array  $ids         List of ids.
         * @return string
         */
        public function handle_bulk_actions($action, $ids, $redirect_to)
        {
        }
        public function output_notice()
        {
        }
        /**
         * Show confirmation message that order status changed for number of orders.
         */
        public function set_bulk_notice()
        {
        }
        public function set_notice($message, $type = 'success')
        {
        }
        protected function get_stati()
        {
        }
        /**
         * @return bool
         */
        public function ajax_user_can()
        {
        }
        public function get_page_option()
        {
        }
        /**
         * @global array     $avail_post_stati
         * @global WP_Query $wp_query
         * @global int       $per_page
         * @global string    $mode
         */
        public function prepare_items()
        {
        }
        /**
         */
        public function no_items()
        {
        }
        /**
         * Determine if the current view is the "All" view.
         *
         * @since 4.2.0
         *
         * @return bool Whether the current view is the "All" view.
         */
        protected function is_base_request()
        {
        }
        /**
         * @global array $locked_post_status This seems to be deprecated.
         * @global array $avail_post_stati
         * @return array
         */
        protected function get_views()
        {
        }
        /**
         * Helper to create links to edit.php with params.
         *
         * @since 4.4.0
         *
         * @param string[] $args  Associative array of URL parameters for the link.
         * @param string   $label Link text.
         * @param string   $class Optional. Class attribute. Default empty string.
         * @return string The formatted link string.
         */
        protected function get_edit_link($args, $label, $class = '')
        {
        }
        /**
         * @return string
         */
        public function current_action()
        {
        }
        /**
         * Display a monthly dropdown for filtering items
         *
         * @since 3.0.6
         *
         * @global wpdb      $wpdb
         * @global WP_Locale $wp_locale
         *
         * @param string $post_type
         */
        protected function months_dropdown($type)
        {
        }
        /**
         * Generate the table navigation above or below the table
         *
         * @since 3.0.6
         * @param string $which
         */
        protected function display_tablenav($which)
        {
        }
        /**
         * @param string $which
         */
        protected function extra_tablenav($which)
        {
        }
        protected function shipping_provider_filter()
        {
        }
        protected function order_filter()
        {
        }
        /**
         * @return array
         */
        protected function get_table_classes()
        {
        }
        protected function get_custom_columns()
        {
        }
        /**
         * @return array
         */
        public function get_columns()
        {
        }
        /**
         * @return array
         */
        protected function get_sortable_columns()
        {
        }
        /**
         * Gets the name of the default primary column.
         *
         * @since 4.3.0
         *
         * @return string Name of the default primary column, in this case, 'title'.
         */
        protected function get_default_primary_column_name()
        {
        }
        /**
         * Handles the default column output.
         *
         * @since 4.3.0
         *
         * @param Shipment $shipment The current shipment object.
         * @param string          $column_name The current column name.
         */
        public function column_default($shipment, $column_name)
        {
        }
        public function get_main_page()
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param Shipment $shipment The current shipment object.
         */
        public function column_title($shipment)
        {
        }
        protected function get_custom_actions($shipment, $actions)
        {
        }
        /**
         * Handles shipment actions.
         *
         * @since 0.0.1
         *
         * @param Shipment $shipment The current shipment object.
         */
        protected function column_actions($shipment)
        {
        }
        public function column_cb($shipment)
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param Shipment $shipment The current shipment object.
         */
        public function column_items($shipment)
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param Shipment $shipment The current shipment object.
         */
        public function column_address($shipment)
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param Shipment $shipment The current shipment object.
         */
        public function column_status($shipment)
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param Shipment $shipment The current shipment object.
         */
        public function column_weight($shipment)
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param Shipment $shipment The current shipment object.
         */
        public function column_packaging($shipment)
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param Shipment $shipment The current shipment object.
         */
        public function column_dimensions($shipment)
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param Shipment $shipment The current shipment object.
         */
        public function column_date($shipment)
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param Shipment $shipment The current shipment object.
         */
        public function column_order($shipment)
        {
        }
        /**
         *
         * @param int|WC_GZD_Shipment $shipment
         */
        public function single_row($shipment)
        {
        }
        protected function get_custom_bulk_actions($actions)
        {
        }
        protected function get_hook_prefix()
        {
        }
        /**
         * @return array
         */
        protected function get_bulk_actions()
        {
        }
    }
    /**
     * Class Table
     * @package Vendidero/Germanized/Shipments\Admin
     */
    class ReturnTable extends \Vendidero\Germanized\Shipments\Admin\Table
    {
        protected function get_custom_columns()
        {
        }
        /**
         * @param ReturnShipment $shipment
         * @param $actions
         *
         * @return mixed
         */
        protected function get_custom_actions($shipment, $actions)
        {
        }
        public function get_main_page()
        {
        }
        protected function get_custom_bulk_actions($actions)
        {
        }
        /**
         * Handles the post author column output.
         *
         * @since 4.3.0
         *
         * @param ReturnShipment $shipment The current shipment object.
         */
        public function column_sender($shipment)
        {
        }
    }
    /**
     * Shipment Order
     *
     * @class       WC_GZD_Shipment_Order
     * @version     1.0.0
     * @author      Vendidero
     */
    abstract class BulkActionHandler
    {
        /**
         * Step being handled
         *
         * @var integer
         */
        protected $step = 1;
        protected $ids = array();
        protected $notices = array();
        protected $type = 'simple';
        public function __construct()
        {
        }
        protected function get_notice_option_name()
        {
        }
        public abstract function get_title();
        public function get_nonce_name()
        {
        }
        public function get_shipment_type()
        {
        }
        public function set_shipment_type($type)
        {
        }
        public function get_success_redirect_url()
        {
        }
        public function get_step()
        {
        }
        public function set_step($step)
        {
        }
        public function get_notices($type = 'error')
        {
        }
        public function get_success_message()
        {
        }
        public function admin_handled()
        {
        }
        public function admin_after_error()
        {
        }
        public function add_notice($notice, $type = 'error')
        {
        }
        public function update_notices()
        {
        }
        public function reset($is_new = false)
        {
        }
        public abstract function get_action();
        public function get_max_step()
        {
        }
        public abstract function get_limit();
        public function get_total()
        {
        }
        public abstract function handle();
        public function set_ids($ids)
        {
        }
        public function get_ids()
        {
        }
        public function get_current_ids()
        {
        }
        /**
         * Get count of records exported.
         *
         * @since 3.0.6
         * @return int
         */
        public function get_total_processed()
        {
        }
        /**
         * Get total % complete.
         *
         * @since 3.0.6
         * @return int
         */
        public function get_percent_complete()
        {
        }
        public function is_last_step()
        {
        }
    }
    /**
     * Shipment Order
     *
     * @class       WC_GZD_Shipment_Order
     * @version     1.0.0
     * @author      Vendidero
     */
    class BulkLabel extends \Vendidero\Germanized\Shipments\Admin\BulkActionHandler
    {
        protected $path = '';
        public function get_action()
        {
        }
        public function get_limit()
        {
        }
        public function get_title()
        {
        }
        public function get_file()
        {
        }
        protected function update_file($path)
        {
        }
        protected function get_file_option_name()
        {
        }
        public function get_filename()
        {
        }
        public function reset($is_new = false)
        {
        }
        protected function get_download_button()
        {
        }
        public function get_success_message()
        {
        }
        public function admin_after_error()
        {
        }
        protected function get_files_option_name()
        {
        }
        protected function get_files()
        {
        }
        protected function add_file($path)
        {
        }
        public function handle()
        {
        }
    }
    /**
     * WC_Admin class.
     */
    class Settings
    {
        public static function get_section_description($section)
        {
        }
        public static function get_pointers($section)
        {
        }
        protected static function get_general_settings()
        {
        }
        public static function get_address_label_by_prop($prop, $type = 'shipper')
        {
        }
        protected static function get_address_field_type_by_prop($prop)
        {
        }
        protected static function get_address_desc_by_prop($prop)
        {
        }
        protected static function get_address_fields_to_skip()
        {
        }
        protected static function get_address_settings()
        {
        }
        protected static function get_packaging_settings()
        {
        }
        public static function get_settings($current_section = '')
        {
        }
        public static function get_additional_breadcrumb_items($breadcrumb)
        {
        }
        public static function get_sections()
        {
        }
        public static function after_save($current_section = '')
        {
        }
        public static function get_sanitized_settings($settings, $data = null)
        {
        }
        public static function render_label_fields($settings, $shipment, $echo = false)
        {
        }
    }
    /**
     * WC_Admin class.
     */
    class ProviderSettings
    {
        public static function get_current_provider()
        {
        }
        public static function get_help_link()
        {
        }
        public static function get_next_pointers_link($provider_name = false)
        {
        }
        public static function get_pointers($section)
        {
        }
        public static function get_description()
        {
        }
        public static function get_breadcrumb($current_section = '')
        {
        }
        protected static function get_section_title($section = '')
        {
        }
        protected static function get_breadcrumb_label($label, $current_section = '')
        {
        }
        public static function save($section = '')
        {
        }
        public static function get_settings($current_section = '')
        {
        }
        public static function output_providers()
        {
        }
        protected static function provider_screen()
        {
        }
        public static function get_sections()
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments\Rest {
    class ShipmentsController extends \WC_REST_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v3';
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'shipments';
        /**
         * Registers rest routes for this controller.
         */
        public function register_routes()
        {
        }
        /**
         * Get object.
         *
         * @param  int|Shipment $id Object ID.
         * @return Shipment Shipment object or WP_Error object.
         */
        protected function get_object($id)
        {
        }
        /**
         * Get object permalink.
         *
         * @param  Shipment $shipment Object.
         * @return string
         */
        protected function get_permalink($shipment)
        {
        }
        /**
         * Checks if a given request has access to get a specific item.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         * @since 4.7.0
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has access to get a specific item.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         * @since 4.7.0
         */
        public function get_items_permissions_check($request)
        {
        }
        protected function check_permissions($object_type = 'shipment', $context = 'read', $object_id = 0)
        {
        }
        /**
         * Retrieves a collection of items.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         * @since 4.7.0
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to update a specific item.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return true|WP_Error True if the request has access to update the item, WP_Error object otherwise.
         * @since 4.7.0
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has access to create a specific item.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return true|WP_Error True if the request has access to create the item, WP_Error object otherwise.
         * @since 4.7.0
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * @param $request
         * @param boolean $creating
         *
         * @return Shipment
         * @throws \WC_REST_Exception
         */
        protected function prepare_object_for_database($request, $creating = false)
        {
        }
        /**
         * Wrapper method to create/update order items.
         * When updating, the item ID provided is checked to ensure it is associated
         * with the order.
         *
         * @param Shipment $shipment order object.
         * @param array    $posted item provided in the request body.
         *
         * @throws \WC_REST_Exception If item ID is not associated with order.
         */
        protected function set_item($shipment, $posted)
        {
        }
        /**
         * Helper method to check if the resource ID associated with the provided item is null.
         * Items can be deleted by setting the resource ID to null.
         *
         * @param array $item Item provided in the request body.
         * @return bool True if the item resource ID is null, false otherwise.
         */
        protected function item_is_null($item)
        {
        }
        /**
         * Save an object data.
         *
         * @since  3.0.0
         * @param  WP_REST_Request $request  Full details about the request.
         * @param  bool            $creating If is creating a new object.
         * @return Shipment|WP_Error
         */
        protected function save_object($request, $creating = false)
        {
        }
        /**
         * Create a single item.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_Error|WP_REST_Response
         */
        public function create_item($request)
        {
        }
        /**
         * Update a single post.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_Error|WP_REST_Response
         */
        public function update_item($request)
        {
        }
        /**
         * Prepares the object for the REST response.
         *
         * @since  3.0.0
         * @param  Shipment        $shipment  Object data.
         * @param  WP_REST_Request $request Request object.
         * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.
         */
        protected function prepare_object_for_response($shipment, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param Shipment        $shipment  Object data.
         * @param WP_REST_Request $request Request object.
         * @return array                   Links for the given post.
         */
        protected function prepare_links($shipment, $request)
        {
        }
        /**
         * Get a single item.
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_Error|WP_REST_Response
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete a specific item.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         * @since 4.7.0
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes one item from the collection.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         * @since 4.7.0
         */
        public function delete_item($request)
        {
        }
        /**
         * Checks if a given request has access to get a specific item.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return true|WP_Error True if the request has read access for the item, WP_Error object otherwise.
         * @since 4.7.0
         */
        public function get_label_permissions_check($request)
        {
        }
        /**
         * Retrieves one item from the collection.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         * @since 4.7.0
         */
        public function get_label($request)
        {
        }
        public function delete_label($request)
        {
        }
        public function create_label($request)
        {
        }
        /**
         * Checks if a given request has access to create a specific item.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         * @since 4.7.0
         */
        public function create_label_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has access to delete a specific item.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return true|WP_Error True if the request has access to delete the item, WP_Error object otherwise.
         * @since 4.7.0
         */
        public function delete_label_permissions_check($request)
        {
        }
        /**
         * Retrieves the item's schema, conforming to JSON Schema.
         *
         * @return array Item schema data.
         * @since 4.7.0
         */
        public function get_item_schema()
        {
        }
        /**
         * @param Shipment $shipment
         * @param string $context
         * @param bool|int $dp
         *
         * @return array
         */
        public static function prepare_shipment($shipment, $context = 'view', $dp = false)
        {
        }
        /**
         * @param Label $label
         * @param string $context
         * @param bool|int $dp
         *
         * @return array
         */
        public static function prepare_label($label, $context = 'view', $dp = false)
        {
        }
        /**
         * Get the query params for collections.
         *
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * Get the schema of a single shipment
         *
         * @return array
         */
        public static function get_single_item_schema()
        {
        }
        public function get_public_item_label_schema()
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments {
    class FormHandler
    {
        /**
         * Hook in methods.
         */
        public static function init()
        {
        }
        public static function return_request_success_message()
        {
        }
        protected static function get_return_request_success_message($needs_manual_confirmation = false)
        {
        }
        /**
         * Parses a string and finds the longest, contiguous number which is assumed to be the order id.
         *
         * @param $order_id_str
         *
         * @return string
         */
        public static function get_order_id_from_string($order_id_str)
        {
        }
        public static function process_return_request()
        {
        }
        /**
         * @param $order_id
         * @param $email
         *
         * @return false|integer
         */
        public static function find_order($order_id, $email)
        {
        }
        public static function filter_query_by_order_number($query, $query_vars)
        {
        }
        /**
         * Save the password/account details and redirect back to the my account page.
         */
        public static function add_return_shipment()
        {
        }
    }
    /**
     * @copyright Copyright (c) 2017 VIISON GmbH
     */
    class AddressSplitter
    {
        /**
         * This function splits an address line like for example "Pallaswiesenstr. 45 App 231" into its individual parts.
         * Supported parts are additionToAddress1, streetName, houseNumber and additionToAddress2. AdditionToAddress1
         * and additionToAddress2 contain additional information that is given at the start and the end of the string, respectively.
         * Unit tests for testing the regular expression that this function uses exist over at https://regex101.com/r/vO5fY7/1.
         * More information on this functionality can be found at http://blog.viison.com/post/115849166487/shopware-5-from-a-technical-point-of-view#address-splitting.
         *
         * @param string $address
         *
         * @return array
         * @throws Exception
         */
        public static function split_address($address)
        {
        }
        /**
         * @param string $house_number A house number string to split in base and extension
         *
         * @return array
         * @throws Exception
         */
        public static function split_house_number($house_number)
        {
        }
    }
    class Api
    {
        public static function init()
        {
        }
        public static function prepare_product($response, $object, $request)
        {
        }
        /**
         * @param \WC_Product $product
         * @param $request
         *
         * @return \WC_Product $product
         */
        public static function update_product($product, $request)
        {
        }
        public static function remove_status_prefix($status)
        {
        }
        /**
         * Extend schema.
         *
         * @since 1.0.0
         *
         * @param array $schema_properties Data used to create the order.
         *
         * @return array
         */
        public static function order_schema($schema_properties)
        {
        }
        /**
         * Extend product variation schema.
         *
         * @since 1.0.0
         *
         * @param array $schema_properties Data used to create the product.
         *
         * @return array
         */
        public static function product_variation_schema($schema_properties)
        {
        }
        /**
         * Extend product schema.
         *
         * @since 1.0.0
         *
         * @param array $schema_properties Data used to create the product.
         *
         * @return array
         */
        public static function product_schema($schema_properties)
        {
        }
        /**
         * @param WP_REST_Response $response
         * @param $post
         * @param WP_REST_Request $request
         *
         * @return mixed
         */
        public static function prepare_order_shipments($response, $post, $request)
        {
        }
        public static function order_shipments_schema($schema)
        {
        }
        protected static function get_shipment_statuses()
        {
        }
        public static function register_controllers($controller)
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments\Packaging {
    class Report
    {
        public function __construct($id, $args = array())
        {
        }
        public function exists()
        {
        }
        public function get_title()
        {
        }
        public function get_url()
        {
        }
        public function get_delete_link()
        {
        }
        public function get_refresh_link()
        {
        }
        public function get_cancel_link()
        {
        }
        public function get_type()
        {
        }
        public function set_type($type)
        {
        }
        public function set_id($id)
        {
        }
        public function set_id_part($value, $part = 'type')
        {
        }
        public function get_id()
        {
        }
        public function get_date_start()
        {
        }
        public function set_date_start($date)
        {
        }
        public function get_date_end()
        {
        }
        public function set_date_end($date)
        {
        }
        public function get_status()
        {
        }
        public function get_version()
        {
        }
        public function set_status($status)
        {
        }
        public function set_version($version)
        {
        }
        public function get_date_requested()
        {
        }
        public function set_date_requested($date)
        {
        }
        /**
         * @return int
         */
        public function get_total_count()
        {
        }
        public function get_total_weight($round = true, $unit = '')
        {
        }
        public function set_total_weight($weight)
        {
        }
        public function set_total_count($count)
        {
        }
        public function get_packaging_ids()
        {
        }
        public function get_countries()
        {
        }
        public function reset()
        {
        }
        public function get_packaging_ids_by_country($country)
        {
        }
        public function get_packaging_count($packaging_id, $country = '')
        {
        }
        public function get_packaging_weight($packaging_id, $country = '', $round = true, $unit = '')
        {
        }
        public function get_total_packaging_weight_by_country($country, $round = true, $unit = '')
        {
        }
        public function get_total_packaging_count_by_country($country)
        {
        }
        public function set_packaging_count($packaging_id, $count)
        {
        }
        public function set_packaging_weight($packaging_id, $weight)
        {
        }
        public function set_packaging_count_by_country($country, $packaging_id, $count)
        {
        }
        public function set_packaging_weight_by_country($country, $packaging_id, $weight)
        {
        }
        public function set_total_packaging_count_by_country($country, $count)
        {
        }
        public function set_total_packaging_weight_by_country($country, $weight)
        {
        }
        protected function maybe_round($total, $round = true)
        {
        }
        public function save()
        {
        }
        public function delete()
        {
        }
    }
    class AsyncReportGenerator
    {
        protected $args = array();
        protected $type = '';
        public function __construct($type = 'yearly', $args = array())
        {
        }
        public function get_type()
        {
        }
        public function get_args()
        {
        }
        public function get_id()
        {
        }
        public function delete()
        {
        }
        public function start()
        {
        }
        /**
         * @return true|\WP_Error
         */
        public function next()
        {
        }
        /**
         * @return Report
         */
        public function complete()
        {
        }
        protected function get_temporary_result()
        {
        }
    }
    class ReportQueue
    {
        public static function start($type = 'quarterly', $date = null, $end_date = null)
        {
        }
        public static function clear_cache()
        {
        }
        public static function get_queue_details($report_id)
        {
        }
        public static function get_batch_size()
        {
        }
        public static function get_shipment_statuses()
        {
        }
        /**
         * @param $args
         *
         * @return \Vendidero\Germanized\Shipments\Shipment[]
         */
        public static function query($args)
        {
        }
        public static function cancel($id)
        {
        }
        public static function get_queue()
        {
        }
        public static function is_running($id)
        {
        }
        public static function get_hook_name($id)
        {
        }
        public static function next($type, $args)
        {
        }
        /**
         * @param AsyncReportGenerator $generator
         */
        public static function complete($generator)
        {
        }
        public static function maybe_stop_report($report_id)
        {
        }
        public static function get_reports_running()
        {
        }
        public static function get_timeframe($type, $date = null, $date_end = null)
        {
        }
    }
    class ReportHelper
    {
        public static function init()
        {
        }
        public static function add_page()
        {
        }
        public static function hide_page_from_menu()
        {
        }
        /**
         * @param Report $report
         *
         * @return array[]
         */
        public static function get_report_actions($report)
        {
        }
        public static function render_report()
        {
        }
        public static function cleanup()
        {
        }
        public static function setup_recurring_actions()
        {
        }
        public static function get_report_title($id)
        {
        }
        public static function get_report_id($parts)
        {
        }
        public static function get_available_report_types()
        {
        }
        public static function get_report_data($id)
        {
        }
        public static function string_to_datetime($time_string)
        {
        }
        public static function clear_caches()
        {
        }
        public static function get_report_ids()
        {
        }
        public static function get_report_status_title($status)
        {
        }
        /**
         * @param array $args
         *
         * @return Report[]
         */
        public static function get_reports($args = array())
        {
        }
        /**
         * @param Report $report
         */
        public static function remove_report($report)
        {
        }
        /**
         * @param $id
         *
         * @return false|Report
         */
        public static function get_report($id)
        {
        }
        public static function delete_report()
        {
        }
        protected static function get_clean_referer()
        {
        }
        public static function refresh_report()
        {
        }
        public static function cancel_report()
        {
        }
    }
}
namespace Vendidero\Germanized\Shipments {
    class Validation
    {
        public static function init()
        {
        }
        /**
         * In case a certain shipping provider is being deactivated make sure that the default
         * shipping provider option is removed in case the option equals the deactivated provider.
         *
         * @param ShippingProvider $provider
         */
        public static function maybe_disable_default_shipping_provider($provider)
        {
        }
        /**
         * @param integer $shipment_id
         * @param Shipment $shipment
         */
        public static function maybe_update_order_date_shipped($shipment_id, $shipment)
        {
        }
        public static function check_order_shipped($order)
        {
        }
        /**
         * Delete editable shipments if an order is cancelled.
         *
         * @param $order_id
         * @param WC_Order $order
         */
        public static function maybe_cancel_shipments($order_id, $order)
        {
        }
        public static function before_delete_refund($refund_id)
        {
        }
        public static function delete_refund_order($refund_id)
        {
        }
        public static function refresh_refund_order($refund)
        {
        }
        public static function delete_order($order_id)
        {
        }
        public static function new_order($order)
        {
        }
        public static function update_order($order_id)
        {
        }
        public static function delete_order_item($order_item_id)
        {
        }
        public static function create_order_item($order_item_id, $order_item, $order_id)
        {
        }
        protected static function is_admin_save_order_request()
        {
        }
        /**
         * @param $order_item_id
         * @param WC_Order_Item $order_item
         */
        public static function update_order_item($order_item_id, $order_item)
        {
        }
    }
    /**
     * Shipment factory class
     */
    class ShipmentFactory
    {
        /**
         * Get shipment.
         *
         * @param  mixed $shipment_id (default: false) Shipment id to get or empty if new.
         * @return SimpleShipment|ReturnShipment|bool
         */
        public static function get_shipment($shipment_id = false, $shipment_type = 'simple')
        {
        }
        public static function get_shipment_id($shipment)
        {
        }
    }
}
namespace {
    /**
     * Customer return shipment notification.
     *
     * Return shipment request notifications are sent to the customer (guest) after submitting a new return request
     * via the return request form.
     *
     * @class    WC_GZD_Email_Customer_Return_Shipment_Request
     * @version  1.0.0
     * @package  Vendidero/Germanized/Shipments/Emails
     * @extends  WC_Email
     */
    class WC_GZD_Email_Customer_Guest_Return_Shipment_Request extends \WC_Email
    {
        public $request_url = '';
        public $helper = \null;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Switch Woo and Germanized locale
         */
        public function setup_locale()
        {
        }
        /**
         * Restore Woo and Germanized locale
         */
        public function restore_locale()
        {
        }
        /**
         * Trigger.
         *
         * @param int $order_id order ID.
         */
        public function trigger($order_id)
        {
        }
        /**
         * Return content from the additional_content field.
         *
         * Displayed above the footer.
         *
         * @since 2.0.4
         * @return string
         */
        public function get_additional_content()
        {
        }
        /**
         * Get content html.
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 1.0.1
         * @return string
         */
        public function get_default_additional_content()
        {
        }
    }
    /**
     * Customer return shipment delivered notification.
     *
     * This notification is being sent to the customer to inform him that his return was delivered successfully.
     *
     * @class    WC_GZD_Email_Customer_Return_Shipment_Delivered
     * @version  1.0.0
     * @package  Vendidero/Germanized/Shipments/Emails
     * @extends  WC_Email
     */
    class WC_GZD_Email_Customer_Return_Shipment_Delivered extends \WC_Email
    {
        /**
         * Shipment.
         *
         * @var ReturnShipment|bool
         */
        public $shipment;
        public $helper = \null;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Switch Woo and Germanized locale
         */
        public function setup_locale()
        {
        }
        /**
         * Restore Woo and Germanized locale
         */
        public function restore_locale()
        {
        }
        /**
         * Trigger.
         *
         * @param int $shipment_id Shipment ID.
         * @param bool $is_confirmation
         */
        public function trigger($shipment_id)
        {
        }
        /**
         * Return content from the additional_content field.
         *
         * Displayed above the footer.
         *
         * @since 2.0.4
         * @return string
         */
        public function get_additional_content()
        {
        }
        /**
         * Get content html.
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 1.0.1
         * @return string
         */
        public function get_default_additional_content()
        {
        }
    }
    /**
     * Admin return shipment notification.
     *
     * @class    WC_GZD_Email_New_Return_Shipment_Request
     * @version  1.0.0
     * @package  Vendidero/Germanized/Shipments/Emails
     * @extends  WC_Email
     */
    class WC_GZD_Email_New_Return_Shipment_Request extends \WC_Email
    {
        /**
         * Shipment.
         *
         * @var ReturnShipment|bool
         */
        public $shipment;
        public $helper = \null;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger.
         *
         * @param int|ReturnShipment $shipment_id Shipment ID.
         */
        public function trigger($shipment_id)
        {
        }
        /**
         * Return content from the additional_content field.
         *
         * Displayed above the footer.
         *
         * @since 2.0.4
         * @return string
         */
        public function get_additional_content()
        {
        }
        /**
         * Get content html.
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        public function get_attachments()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 1.0.1
         * @return string
         */
        public function get_default_additional_content()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Customer Shipment notification.
     *
     * Shipment notification are sent as soon as a shipment is marked as shipped.
     *
     * @class    WC_GZD_Email_Customer_Shipment
     * @version  1.0.0
     * @package  Vendidero/Germanized/Shipments/Emails
     * @extends  WC_Email
     */
    class WC_GZD_Email_Customer_Shipment extends \WC_Email
    {
        /**
         * Shipment.
         *
         * @var Shipment|bool
         */
        public $shipment;
        /**
         * Is the order partial shipped?
         *
         * @var bool
         */
        public $partial_shipment;
        public $helper = \null;
        public $total_shipments = 1;
        public $cur_position = 1;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @param bool $partial Whether it is a partial refund or a full refund.
         * @since  3.1.0
         * @return string
         */
        public function get_default_subject($partial = \false)
        {
        }
        /**
         * Get email heading.
         *
         * @param bool $partial Whether it is a partial refund or a full refund.
         * @since  3.1.0
         * @return string
         */
        public function get_default_heading($partial = \false)
        {
        }
        /**
         * Get email subject.
         *
         * @return string
         */
        public function get_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         */
        public function get_heading()
        {
        }
        /**
         * Switch Woo and Germanized locale
         */
        public function setup_locale()
        {
        }
        /**
         * Restore Woo and Germanized locale
         */
        public function restore_locale()
        {
        }
        public function get_shipped_position_number($shipment_id)
        {
        }
        /**
         * Trigger.
         *
         * @param int  $shipment_id Shipment ID.
         */
        public function trigger($shipment_id)
        {
        }
        /**
         * Return content from the additional_content field.
         *
         * Displayed above the footer.
         *
         * @since 2.0.4
         * @return string
         */
        public function get_additional_content()
        {
        }
        /**
         * Get content html.
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 1.0.1
         * @return string
         */
        public function get_default_additional_content()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Customer return shipment notification.
     *
     * Return shipment notifications are sent as soon as a return shipment is marked as processing.
     *
     * @class    WC_GZD_Email_Customer_Return_Shipment
     * @version  1.0.0
     * @package  Vendidero/Germanized/Shipments/Emails
     * @extends  WC_Email
     */
    class WC_GZD_Email_Customer_Return_Shipment extends \WC_Email
    {
        /**
         * Shipment.
         *
         * @var ReturnShipment|bool
         */
        public $shipment;
        public $helper = \null;
        /**
         * Is this email a confirmation for the customer after manually reviewing the return?
         *
         * @var bool
         */
        public $is_confirmation = \false;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Switch Woo and Germanized locale
         */
        public function setup_locale()
        {
        }
        /**
         * Restore Woo and Germanized locale
         */
        public function restore_locale()
        {
        }
        /**
         * Trigger.
         *
         * @param int $shipment_id Shipment ID.
         * @param bool $is_confirmation
         */
        public function trigger($shipment_id, $is_confirmation = \false)
        {
        }
        /**
         * Return content from the additional_content field.
         *
         * Displayed above the footer.
         *
         * @since 2.0.4
         * @return string
         */
        public function get_additional_content()
        {
        }
        /**
         * Get content html.
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        public function get_attachments()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 1.0.1
         * @return string
         */
        public function get_default_additional_content()
        {
        }
    }
}
namespace Vendidero\EUTaxHelper {
    class Helper
    {
        /**
         * Version.
         *
         * @var string
         */
        const VERSION = '1.1.0';
        public static function get_version()
        {
        }
        public static function oss_procedure_is_enabled()
        {
        }
        public static function get_eu_countries()
        {
        }
        public static function get_eu_vat_countries()
        {
        }
        public static function is_northern_ireland($country, $postcode = '')
        {
        }
        public static function is_eu_vat_country($country, $postcode = '')
        {
        }
        public static function is_third_country($country, $postcode = '')
        {
        }
        public static function is_eu_country($country)
        {
        }
        public static function is_eu_vat_postcode_exemption($country, $postcode = '')
        {
        }
        /**
         * Get VAT exemptions (of EU countries) for certain postcodes (e.g. canary islands)
         *
         * @see https://www.hk24.de/produktmarken/beratung-service/recht-und-steuern/steuerrecht/umsatzsteuer-mehrwertsteuer/umsatzsteuer-mehrwertsteuer-international/verfahrensrecht/territoriale-besonderheiten-umsatzsteuer-zollrecht-1167674
         * @see https://github.com/woocommerce/woocommerce/issues/5143
         * @see https://ec.europa.eu/taxation_customs/business/vat/eu-vat-rules-topic/territorial-status-eu-countries-certain-territories_en
         *
         * @return \string[][]
         */
        public static function get_vat_postcode_exemptions_by_country($country = '')
        {
        }
        /**
         * @param integer|\WC_Order $order
         *
         * @return array
         */
        public static function get_order_taxable_location($order)
        {
        }
        public static function get_taxable_location()
        {
        }
        public static function is_admin_order_ajax_request()
        {
        }
        public static function is_admin_order_request()
        {
        }
        public static function current_request_has_vat_exempt()
        {
        }
        public static function get_base_country()
        {
        }
        /**
         * Returns a list of EU countries except base country.
         *
         * @return string[]
         */
        public static function get_non_base_eu_countries($include_gb = false)
        {
        }
        public static function country_supports_eu_vat($country, $postcode = '')
        {
        }
        public static function import_oss_tax_rates($tax_class_slug_names = array())
        {
        }
        public static function import_default_tax_rates($tax_class_slug_names = array())
        {
        }
        public static function import_tax_rates($tax_class_slug_names = array())
        {
        }
        protected static function parse_tax_class_slug_names($tax_class_slug_names = array())
        {
        }
        protected static function import_tax_rates_internal($is_oss = true, $tax_class_slug_names = array())
        {
        }
        protected static function clear_cache()
        {
        }
        public static function get_tax_class_slugs($tax_class_slug_names = array())
        {
        }
        public static function get_tax_type_by_country_rate($rate_percentage, $country)
        {
        }
        public static function get_eu_tax_rates()
        {
        }
        /**
         * @param \stdClass $rate
         *
         * @return bool
         */
        public static function tax_rate_is_northern_ireland($rate)
        {
        }
        public static function import_rates($rates, $tax_class = '', $tax_class_type = '')
        {
        }
        /**
         * @param $rate_id
         * @param \WC_Order $order
         */
        public static function get_tax_rate_percent($rate_id, $order)
        {
        }
        public static function get_tax_rate_percentage($rate_id)
        {
        }
    }
}
namespace {
    /**
     * Direct debit mandate email
     *
     * Email is being sent directly after the order to inform the customer about the SEPA mandate.
     *
     * @class        WC_GZD_Email_Customer_Revocation
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Email_Customer_SEPA_Direct_Debit_Mandate extends \WC_Email
    {
        public $gateway = \null;
        public $helper = \null;
        /**
         * Constructor
         *
         * @access public
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_heading()
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        public function trigger($order)
        {
        }
        /**
         * Return content from the additional_content field.
         *
         * Displayed above the footer.
         *
         * @since 3.0.4
         * @return string
         */
        public function get_additional_content()
        {
        }
        /**
         * get_content_html function.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * get_content_plain function.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
    }
    class WC_GZD_Email_Helper
    {
        /**
         * @var WC_Email|null
         */
        protected $email = \null;
        /**
         * WC_GZDP_Email_Helper constructor.
         *
         * @param WC_Email $email
         */
        public function __construct($email)
        {
        }
        /**
         * @return WC_Email
         */
        public function get_email()
        {
        }
        /**
         * Switch Woo and Germanized to site locale
         */
        public function setup_locale()
        {
        }
        /**
         * Restore Woo and Germanized locale
         */
        public function restore_locale()
        {
        }
        /**
         * Adds better compatibility to multi-language-plugins such as WPML.
         * Should be called during trigger method after setting up the email object
         * so that e.g. order data is available.
         */
        public function setup_email_locale($lang = \false)
        {
        }
        public function restore_email_locale()
        {
        }
    }
    /**
     * Cancelled, failed order notification for customers
     *
     * @class        WC_GZD_Email_Customer_Cancelled_Order
     * @version      1.0.0
     * @author       vendidero
     */
    class WC_GZD_Email_Customer_Cancelled_Order extends \WC_Email
    {
        public $helper;
        protected $has_failed = \false;
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_subject($failed = \false)
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_heading($failed = \false)
        {
        }
        /**
         * Get email subject.
         *
         * @return string
         */
        public function get_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         */
        public function get_heading()
        {
        }
        public function trigger_failed($order_id)
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        public function trigger($order_id, $has_failed = \false)
        {
        }
        /**
         * Return content from the additional_content field.
         *
         * Displayed above the footer.
         *
         * @since 3.0.4
         * @return string
         */
        public function get_additional_content()
        {
        }
        /**
         * Get content html.
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Revocation conformation Email
     *
     * Email is being sent if a customer fills out the revocation form (insert via [revocation_form] shortcut)
     *
     * @class        WC_GZD_Email_Customer_Revocation
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Email_Customer_Revocation extends \WC_Email
    {
        public $user_email = '';
        public $helper;
        /**
         * Constructor
         *
         * @access public
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_heading()
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        public function trigger($user_data = array())
        {
        }
        /**
         * Get email heading.
         *
         * @access public
         * @return string
         */
        public function get_admin_email()
        {
        }
        /**
         * get_content_html function.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * get_content_plain function.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Return content from the additional_content field.
         *
         * Displayed above the footer.
         *
         * @since 3.0.4
         * @return string
         */
        public function get_additional_content()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Customer Processing Order Email
     *
     * An email sent to the customer when a new order is received/paid for.
     *
     * @class        WC_Email_Customer_Processing_Order
     * @version        2.0.0
     * @package        WooCommerce/Classes/Emails
     * @author        WooThemes
     * @extends    WC_Email
     */
    class WC_GZD_Email_Customer_Processing_Order extends \WC_Email_Customer_Processing_Order
    {
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_heading()
        {
        }
    }
    /**
     * Customer Processing Order Email
     *
     * An email sent to the customer when a new order is received/paid for.
     *
     * @class        WC_Email_Customer_Processing_Order
     * @version        2.0.0
     * @package        WooCommerce/Classes/Emails
     * @author        WooThemes
     * @extends    WC_Email
     */
    class WC_GZD_Email_Customer_On_Hold_Order extends \WC_Email_Customer_On_Hold_Order
    {
        public function __construct()
        {
        }
        public function trigger($order_id, $order = \false)
        {
        }
    }
    /**
     * Customer New Account
     *
     * An email sent to the customer when they create an account.
     *
     * @class        WC_Email_Customer_New_Account
     * @version        2.3.0
     * @package        WooCommerce/Classes/Emails
     * @author        WooThemes
     * @extends    WC_Email
     */
    class WC_GZD_Email_Customer_New_Account_Activation extends \WC_Email
    {
        public $user_login;
        public $user_email;
        public $user_activation;
        public $user_activation_url;
        public $user_pass;
        public $password_generated;
        public $set_password_url;
        public $helper = \null;
        /**
         * Constructor
         *
         * @access public
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_heading()
        {
        }
        /**
         * Return content from the additional_content field.
         *
         * Displayed above the footer.
         *
         * @since 3.0.4
         * @return string
         */
        public function get_additional_content()
        {
        }
        /**
         * Generate set password URL link for a new user.
         *
         * See also Automattic\WooCommerce\Blocks\Domain\Services\Email\CustomerNewAccount and wp_new_user_notification.
         *
         * @since 6.0.0
         * @return string
         */
        protected function generate_set_password_url()
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        public function trigger($user_id, $user_activation, $user_activation_url, $user_pass = '', $password_generated = \false)
        {
        }
        /**
         * get_content_html function.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * get_content_plain function.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
    }
    /**
     * eKomi Review Reminder Email
     *
     * This Email is being sent after the order has been marked as completed to transfer the eKomi Rating Link to the customer.
     *
     * @class        WC_GZD_Email_Customer_Ekomi
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Email_Customer_Paid_For_Order extends \WC_Email
    {
        public $helper;
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         * @since  3.1.0
         */
        public function get_default_heading()
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        public function trigger($order_id)
        {
        }
        /**
         * Return content from the additional_content field.
         *
         * Displayed above the footer.
         *
         * @since 3.0.4
         * @return string
         */
        public function get_additional_content()
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
    }
    class WC_GZD_Legal_Checkbox
    {
        public function __construct($id, $args = array())
        {
        }
        public function __get($key)
        {
        }
        /**
         * Update method for the settings array which tries to call the setters if available.
         *
         * @param array $args
         */
        public function update($args = array())
        {
        }
        /**
         * Returns an option of the current checkbox from the database.
         *
         * @param $key
         * @param string $default
         *
         * @return array|string
         */
        public function get_option($key, $default = '')
        {
        }
        public function update_option($key, $value)
        {
        }
        /**
         * Unique identifier
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * @param string $identifier
         */
        public function set_id($id)
        {
        }
        /**
         * Returns the HTML id used for the input field.
         *
         * @return string
         */
        public function get_html_id()
        {
        }
        /**
         * @param string $html_id
         */
        public function set_html_id($html_id)
        {
        }
        /**
         * Returns whether to show or not show the actual checkbox
         *
         * @return string yes or no
         */
        public function get_hide_input()
        {
        }
        /**
         * @param bool $show_label_only
         */
        public function set_hide_input($hide_input)
        {
        }
        /**
         * Whether to show or not show the actual checkbox
         *
         * @return bool
         */
        public function hide_input()
        {
        }
        /**
         * HTML classes used for the checkbox
         *
         * @return array
         */
        public function get_html_classes()
        {
        }
        /**
         * @param array $html_classes
         */
        public function set_html_classes($html_classes)
        {
        }
        /**
         * HTML classes for the surrounding wrapper.
         *
         * @return array
         */
        public function get_html_wrapper_classes()
        {
        }
        /**
         * @param array $html_wrapper_classes
         */
        public function set_html_wrapper_classes($html_wrapper_classes)
        {
        }
        /**
         * HTML CSS style as string.
         *
         * @return string
         */
        public function get_html_style()
        {
        }
        /**
         * @param string $html_style
         */
        public function set_html_style($html_style)
        {
        }
        /**
         * The name attribute of the checkbox element.
         *
         * @return string
         */
        public function get_html_name()
        {
        }
        /**
         * @param string $html_name
         */
        public function set_html_name($html_name)
        {
        }
        /**
         * The value attribute of the checkbox element.
         *
         * @return string
         */
        public function get_value()
        {
        }
        /**
         * @param string $value
         */
        public function set_value($value)
        {
        }
        /**
         * The checkbox label. By default returns the formatted label (placeholders being replaced).
         *
         * @param bool $plain Whether to return plain text without replacing placeholders or not
         *
         * @return string
         */
        public function get_label($plain = \false)
        {
        }
        /**
         * @param string $label
         */
        public function set_label($label)
        {
        }
        /**
         * Placeholders (key => value) which are being applied to the label.
         *
         * @return array
         */
        public function get_label_args()
        {
        }
        /**
         * @param array $label_args
         */
        public function set_label_args($label_args)
        {
        }
        /**
         * Error message being outputted when validation fails.
         *
         * @param bool $plain Whether to return plain text without replacing placeholders or not
         *
         * @return string
         */
        public function get_error_message($plain = \false)
        {
        }
        /**
         * @param string $error_message
         */
        public function set_error_message($error_message)
        {
        }
        /**
         * The printing order (from low to high)
         *
         * @return int
         */
        public function get_priority()
        {
        }
        /**
         * @param int $priority
         */
        public function set_priority($priority)
        {
        }
        /**
         * The template location.
         *
         * @return string
         */
        public function get_template_name()
        {
        }
        /**
         * @param string $template_name
         */
        public function set_template_name($template_name)
        {
        }
        /**
         * Arguments passed to the template file in key => value pairs.
         *
         * @return array
         */
        public function get_template_args()
        {
        }
        /**
         * @param array $template_args
         */
        public function set_template_args($template_args)
        {
        }
        /**
         * The locations where the checkbox is being outputted.
         *
         * @return array
         */
        public function get_locations()
        {
        }
        /**
         * @param array $locations
         */
        public function set_locations($locations)
        {
        }
        /**
         * Locations being supported by the current checkbox.
         *
         * @return array
         */
        public function get_supporting_locations()
        {
        }
        public function set_supporting_locations($locations)
        {
        }
        /**
         * Product categories to show the checkbox for.
         *
         * @return array
         */
        public function get_show_for_categories()
        {
        }
        public function set_show_for_categories($category_ids)
        {
        }
        public function show_for_category($category_id)
        {
        }
        /**
         * Countries show the checkbox for.
         *
         * @return array
         */
        public function get_show_for_countries()
        {
        }
        public function show_for_country($country)
        {
        }
        public function set_show_for_countries($countries)
        {
        }
        /**
         * Whether the checkbox is enabled or not.
         *
         * @return string yes or no
         */
        public function get_is_enabled()
        {
        }
        /**
         * Whether the checkbox is enabled or not.
         *
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * @param bool $enabled
         */
        public function set_is_enabled($enabled)
        {
        }
        /**
         * Whether the checkbox is to be printed or not.
         *
         * @return string yes or no
         */
        public function get_is_shown()
        {
        }
        /**
         * Whether the checkbox is to be printed or not.
         *
         * @return bool
         */
        public function is_shown()
        {
        }
        /**
         * @param bool $show
         */
        public function set_is_shown($show)
        {
        }
        /**
         * Whether the checkbox is mandatory or not.
         *
         * @return string yes or no
         */
        public function get_is_mandatory()
        {
        }
        /**
         * Whether the checkbox is mandatory or not.
         *
         * @return bool
         */
        public function is_mandatory()
        {
        }
        /**
         * @param bool $mandatory
         */
        public function set_is_mandatory($mandatory)
        {
        }
        /**
         * Whether the checkbox shall be refresh via checkout fragments or not.
         *
         * @return string yes or no
         */
        public function get_refresh_fragments()
        {
        }
        /**
         * Whether the checkbox shall be refresh via checkout fragments or not.
         *
         * @return bool.
         */
        public function do_refresh_fragments()
        {
        }
        /**
         * @param bool $refresh_fragments
         */
        public function set_refresh_fragments($refresh_fragments)
        {
        }
        /**
         * Whether the checkbox is a core checkbox or not.
         *
         * @return string yes or no
         */
        public function get_is_core()
        {
        }
        /**
         * Whether the checkbox is a core checkbox or not.
         *
         * @return bool.
         */
        public function is_core()
        {
        }
        /**
         * @param bool $is_core
         */
        public function set_is_core($is_core)
        {
        }
        /**
         * The name being shown within the admin UI.
         *
         * @return string
         */
        public function get_admin_name()
        {
        }
        /**
         * @param string $admin_name
         */
        public function set_admin_name($admin_name)
        {
        }
        /**
         * The description being shown within the admin UI.
         *
         * @return string
         */
        public function get_admin_desc()
        {
        }
        /**
         * @param string $admin_desc
         */
        public function set_admin_desc($admin_desc)
        {
        }
        /**
         * Whether the current checkbox is hidden.
         *
         * @return bool
         */
        public function is_hidden()
        {
        }
        /**
         * Whether the current checkbox shall be printed or not.
         *
         * @return bool
         */
        public function is_printable()
        {
        }
        /**
         * Whether the current checkbox shall be validated or not.
         *
         * @return bool
         */
        protected function is_validateable()
        {
        }
        /**
         * Whether the checkbox is new.
         *
         * @return bool
         */
        public function is_new()
        {
        }
        /**
         * Render HTML classes.
         *
         * @param $classes
         */
        public function render_classes($classes)
        {
        }
        /**
         * Validate the checkbox.
         *
         * @param string $value
         * @param string $location
         *
         * @return bool
         */
        public function validate($value = '', $location = 'checkout')
        {
        }
        /**
         * Render the checkbox. Output a wrapper to make the checkbox refreshable even though it is not being printed.
         */
        public function render()
        {
        }
        /**
         * Returns the current checkbox' data.
         *
         * @return array
         */
        public function get_data()
        {
        }
        /**
         * Returns the prefix for a certain form field within the administration UI.
         *
         * @return string
         */
        public function get_form_field_id_prefix()
        {
        }
        /**
         * Returns the id for a certain form field within the administration UI.
         *
         * @return string
         */
        public function get_form_field_id($key)
        {
        }
        /**
         * Returns form fields as array to be interpreted by WC_Admin_Settings.
         *
         * @return array
         */
        public function get_form_fields()
        {
        }
        public function pre_update_option($value, $old_value, $name)
        {
        }
        public function pre_get_option($value, $name, $default = \null)
        {
        }
        /**
         * Outputs the admin fields within the settings screen.
         */
        public function admin_options()
        {
        }
        /**
         * Saves the fields from the settings screen.
         */
        public function save_fields()
        {
        }
    }
    /**
     * WooProduct class
     */
    class WC_GZD_Order_Item
    {
        /**
         * The actual order item object
         *
         * @var WC_Order_Item
         */
        protected $order_item;
        /**
         * @param WC_Order_Item $order_item
         */
        public function __construct($order_item)
        {
        }
        /**
         * Returns the Woo Order Item original object
         *
         * @return WC_Order_Item
         */
        public function get_order_item()
        {
        }
        public function get_id()
        {
        }
        public function save()
        {
        }
        /**
         * Call child methods if the method does not exist.
         *
         * @param $method
         * @param $args
         *
         * @return bool|mixed
         */
        public function __call($method, $args)
        {
        }
    }
    /**
     * WooProduct class
     */
    class WC_GZD_Order_Item_Product extends \WC_GZD_Order_Item
    {
        /**
         * @var WC_Order_Item_Product
         */
        public $order_item = \null;
        public function get_unit()
        {
        }
        public function set_unit($unit)
        {
        }
        public function get_unit_base()
        {
        }
        public function get_deposit_type()
        {
        }
        public function get_deposit_net_amount()
        {
        }
        public function get_deposit_amount($incl_tax = \false)
        {
        }
        public function get_deposit_amount_html($tax_display = '')
        {
        }
        public function get_deposit_quantity()
        {
        }
        public function get_deposit_packaging_type()
        {
        }
        public function get_deposit_packaging_type_title()
        {
        }
        public function get_deposit_net_amount_per_unit()
        {
        }
        public function get_deposit_amount_per_unit($incl_tax = \false)
        {
        }
        public function has_deposit()
        {
        }
        public function get_formatted_unit_base()
        {
        }
        public function get_formatted_unit()
        {
        }
        public function set_unit_base($unit)
        {
        }
        public function set_deposit_type($deposit_type)
        {
        }
        public function set_deposit_packaging_type($packaging_type)
        {
        }
        public function set_deposit_amount($amount)
        {
        }
        public function set_deposit_net_amount($amount)
        {
        }
        public function set_deposit_quantity($amount)
        {
        }
        public function set_deposit_amount_per_unit($amount)
        {
        }
        public function set_deposit_net_amount_per_unit($amount)
        {
        }
        public function get_unit_product()
        {
        }
        public function set_unit_product($unit)
        {
        }
        public function get_cart_description()
        {
        }
        public function get_defect_description()
        {
        }
        public function set_cart_description($item_desc)
        {
        }
        public function set_defect_description($item_desc)
        {
        }
        public function get_delivery_time()
        {
        }
        public function set_delivery_time($delivery_time)
        {
        }
        public function get_min_age()
        {
        }
        public function set_min_age($min_age)
        {
        }
        public function needs_age_verification()
        {
        }
        public function has_unit_price()
        {
        }
        public function get_formatted_unit_price($inc_tax = \true, $after_discounts = \false)
        {
        }
        public function get_formatted_product_units()
        {
        }
        public function has_unit_product()
        {
        }
        public function get_unit_price()
        {
        }
        public function set_unit_price($price)
        {
        }
        public function get_unit_price_subtotal()
        {
        }
        public function set_unit_price_subtotal($price)
        {
        }
        public function get_unit_price_net()
        {
        }
        public function set_unit_price_net($price)
        {
        }
        public function get_unit_price_subtotal_net()
        {
        }
        public function set_unit_price_subtotal_net($price)
        {
        }
        public function get_quantity()
        {
        }
        public function recalculate_unit_price()
        {
        }
    }
    /**
     * Taxonomy base class.
     *
     * @class    WC_GZD_Taxonomy
     * @version  1.0.0
     * @author   vendidero
     */
    class WC_GZD_Taxonomy
    {
        /**
         * Adds the units from i18n template
         */
        public function __construct($taxonomy = '')
        {
        }
        /**
         * Get units by key
         *
         * @param mixed $key
         *
         * @return mixed
         */
        public function __get($key)
        {
        }
        /**
         * @param $key
         * @param $by
         *
         * @return false|WP_Term
         */
        public function get_term_object($key, $by = 'slug')
        {
        }
        /**
         * Returns the term name.
         *
         * @param $key
         * @param $by
         *
         * @return false|string
         */
        public function get_term($key, $by = 'slug')
        {
        }
        public function get_taxonomy()
        {
        }
        /**
         * Returns a list of terms slug=>name
         *
         * @return string[] terms as array
         */
        public function get_terms($args = array())
        {
        }
    }
    /**
     * Helper to retrieve deposit types.
     *
     * @class    WC_GZD_Deposit_Types
     * @version  3.9.0
     * @author   vendidero
     */
    class WC_GZD_Deposit_Types extends \WC_GZD_Taxonomy
    {
        public function __construct()
        {
        }
        public function get_deposit_type($key, $by = 'slug')
        {
        }
        public function get_deposit_type_term($key, $by = 'slug')
        {
        }
        /**
         * Returns a list of terms slug=>name
         *
         * @return string[] terms as array
         */
        public function get_terms($args = array())
        {
        }
        public function get_deposit_types($args = array())
        {
        }
        public function get_packaging_types()
        {
        }
        public function get_packaging_type($term)
        {
        }
        public function get_packaging_type_title($type)
        {
        }
        public function get_deposit($term)
        {
        }
    }
    class WC_GZD_Checkout
    {
        public $custom_fields = array();
        public $custom_fields_admin = array();
        protected static $force_free_shipping_filter = \false;
        protected static $_instance = \null;
        protected $checkout_data = \null;
        public static function instance()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @since 1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 1.0
         */
        public function __wakeup()
        {
        }
        public function __construct()
        {
        }
        public function maybe_remove_northern_ireland_taxes($cart)
        {
        }
        public function maybe_adjust_default_shipping_tax_class($value)
        {
        }
        public function get_checkout_value($key)
        {
        }
        public function refresh_photovoltaic_systems_notice($fragments)
        {
        }
        /**
         * @param WC_Cart $cart
         *
         * @return void
         */
        public function maybe_adjust_photovoltaic_cart_data($cart)
        {
        }
        public function prevent_prices_include_tax()
        {
        }
        public static function filter_de_states($states)
        {
        }
        /**
         * @param array     $data
         * @param WP_Error $errors
         */
        public function maybe_force_street_number($data, $errors)
        {
        }
        /**
         * Remove cart unit price subtotal filter
         */
        public function maybe_remove_shopmark_filters()
        {
        }
        /**
         * Prevent tax class merging. Could lead to future problems - not yet implemented
         *
         * @param string $code tax class code
         * @param int $rate_id
         *
         * @return string          unique tax class code
         */
        public function prevent_tax_name_merge($code, $rate_id)
        {
        }
        /**
         * Calls a filter to temporarily set cart tax to zero. This is only done to hide the cart tax estimated text.
         * Filter is being remove right after get_cart_tax - check has been finished within cart-totals.php
         */
        public function hide_cart_estimated_text()
        {
        }
        /**
         * Removes the zero cart tax filter after get_cart_tax has been finished
         */
        public function remove_cart_tax_zero_filter()
        {
        }
        /**
         * This will set the cart tax to zero
         *
         * @param float $tax current's cart tax
         *
         * @return int
         */
        public function set_cart_tax_zero($tax)
        {
        }
        /**
         * @param array $tax_totals
         * @param WC_Cart $cart
         *
         * @return mixed
         */
        public function set_cart_excluding_tax_labels($tax_totals, $cart)
        {
        }
        /**
         * Flag the order as supporting split tax.
         *
         * @param WC_Order $order
         */
        public function order_meta($order)
        {
        }
        public function prevent_differential_mixed_carts($has_passed, $product_id, $quantity)
        {
        }
        public function refresh_order_submit($fragments)
        {
        }
        /**
         * @param WC_Order $order
         * @param $posted
         */
        public function order_store_checkbox_data($order, $posted)
        {
        }
        /**
         * @param WC_Order $order
         *
         * @return void
         */
        public function add_order_notes($order)
        {
        }
        /**
         * @param WC_Order $order
         * @param $posted
         */
        public function order_age_verification($order, $posted)
        {
        }
        public function set_payment_url_to_force_payment($url, $order)
        {
        }
        public function force_pay_order_redirect()
        {
        }
        public function maybe_disable_force_pay_script()
        {
        }
        public function enqueue_force_pay_script()
        {
        }
        public function set_free_shipping_filter($cart)
        {
        }
        public function free_shipping_auto_select($rates)
        {
        }
        public function add_payment_link($order_id)
        {
        }
        public function init_fields()
        {
        }
        public function set_title_field_mapping_editors($val)
        {
        }
        protected function remove_fee_taxes($cart)
        {
        }
        /**
         * This filter is important to get the right (rounded) per tax rate tax amounts.
         *
         * By default Woo does round shipping taxes differently as shipping costs
         * are treated as net prices. Germanized does treat shipping costs as gross in
         * case prices include tax.
         *
         * @param $taxes
         * @param WC_Cart $cart
         */
        public function fix_cart_shipping_tax_rounding($taxes, $cart)
        {
        }
        /**
         * @param $taxes
         * @param WC_Cart $cart
         */
        public function maybe_remove_shipping_tax_filter($taxes, $cart)
        {
        }
        public function remove_shipping_taxes($taxes)
        {
        }
        /**
         * @param $args
         * @param WC_Shipping_Method $method
         *
         * @return mixed
         */
        public function maybe_remove_default_shipping_taxes($args, $method)
        {
        }
        /**
         * Tell the OSS package that shipping costs include tax for improved compatibility.
         *
         * @return bool
         */
        public function shipping_costs_include_taxes()
        {
        }
        /**
         * @param WC_Shipping_Rate[] $rates
         * @param $package
         *
         * @return mixed
         */
        public function adjust_shipping_taxes($rates, $package)
        {
        }
        /**
         * @param $fee_taxes
         * @param $fee
         * @param WC_Cart_Totals $cart_totals
         */
        public function adjust_fee_taxes($fee_taxes, $fee, $cart_totals)
        {
        }
        /**
         * Apply rounding to an array of taxes before summing. Rounds to store DP setting, ignoring precision.
         *
         * @since  3.2.6
         * @param  float $value    Tax value.
         * @param  bool  $in_cents Whether precision of value is in cents.
         * @return float
         */
        public function round_line_tax($value, $in_cents = \false)
        {
        }
        public function round_line_tax_in_cents($value)
        {
        }
        /**
         * Temporarily removes all shipping rates (except chosen one) from packages to only show chosen package within checkout.
         */
        public function remove_shipping_rates()
        {
        }
        /**
         * @param WC_Order_Item_Product $item
         * @param $cart_item_key
         * @param $values
         * @param $order
         */
        public function set_order_item_meta_crud($item, $cart_item_key, $values, $order)
        {
        }
        public function set_formatted_address($placeholder, $args)
        {
        }
        public function set_custom_fields($fields = array(), $type = 'billing')
        {
        }
        public function set_custom_fields_shipping($fields)
        {
        }
        public function set_custom_fields_admin($fields = array(), $type = 'billing')
        {
        }
        public function set_custom_fields_admin_billing($fields = array())
        {
        }
        public function set_custom_fields_admin_shipping($fields = array())
        {
        }
        /**
         * @param WC_Order $order
         */
        public function save_fields($order)
        {
        }
    }
    /**
     * CLI class.
     */
    class WC_GZD_CLI
    {
        /**
         * Load required files and hooks to make the CLI work.
         */
        public function __construct()
        {
        }
        public function register_update_command()
        {
        }
        public function update_command()
        {
        }
    }
    class WC_GZD_Customer_Helper
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @since 1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 1.0
         */
        public function __wakeup()
        {
        }
        public function __construct()
        {
        }
        public function set_doi_session($user_id)
        {
        }
        public function delete_doi_session()
        {
        }
        public function resend_activation_check()
        {
        }
        public function maybe_add_activation_notice()
        {
        }
        protected function get_resend_activation_url()
        {
        }
        public function is_customer_title_enabled()
        {
        }
        public function set_user_address($address, $customer_id, $type)
        {
        }
        public function load_customer_fields($data, $customer, $user_id)
        {
        }
        public function social_login_activation_check($message, $user)
        {
        }
        public function profile_field_title($fields)
        {
        }
        public function is_double_opt_in_enabled()
        {
        }
        public function is_double_opt_in_login_enabled()
        {
        }
        public function delete_checkout_signup_cookie()
        {
        }
        public function disable_signup($checkout)
        {
        }
        public function login_redirect($redirect, $user)
        {
        }
        public function disable_checkout()
        {
        }
        public function show_disabled_checkout_notice()
        {
        }
        protected function registration_redirect($query_args = array())
        {
        }
        public function disable_registration_auto_login($result, $user_id)
        {
        }
        public function get_double_opt_in_user_roles()
        {
        }
        public function enable_double_opt_in_for_user($user = \false)
        {
        }
        public function login_restriction($user, $password)
        {
        }
        /**
         * Check for activation codes on my account page
         */
        public function customer_account_activation_check()
        {
        }
        /**
         * Check for customer that didn't activate their accounts within a couple of time and delete them
         */
        public function account_cleanup()
        {
        }
        public function send_password_reset_link_instead_of_passwords()
        {
        }
        /**
         * Activate customer account based on activation code
         *
         * @param string $activation_code hashed activation code
         *
         * @return boolean|WP_Error
         */
        public function customer_account_activate($activation_code, $login = \false)
        {
        }
        protected function resend_customer_activation_email($user_id, $maybe_generate_new_password = \false)
        {
        }
        public function email_hooks($mailer)
        {
        }
        public function disable_new_account_mail_callback()
        {
        }
        /**
         * Customer new account activation email.
         *
         * @param int $customer_id
         * @param array $new_customer_data
         */
        public function customer_new_account_activation($customer_id, $new_customer_data = array(), $password_generated = \false)
        {
        }
        public function get_customer_activation_url($key)
        {
        }
        public function get_customer_activation_meta($customer_id, $force_new = \false)
        {
        }
        public function get_account_cleanup_user_role_exclusions()
        {
        }
    }
    class WC_GZD_Legal_Checkbox_Manager
    {
        protected $checkboxes = array();
        protected static $_instance = \null;
        protected $options = \null;
        protected $core_checkboxes = array('terms', 'download', 'service', 'parcel_delivery', 'privacy', 'sepa', 'review_reminder', 'used_goods_warranty', 'defective_copy', 'photovoltaic_systems');
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function maybe_hide_terms_checkbox()
        {
        }
        public function refresh_fragments_checkout($fragments)
        {
        }
        public function get_core_checkbox_ids()
        {
        }
        protected function get_legal_label_args()
        {
        }
        public function register_core_checkboxes()
        {
        }
        public function show_conditionally_register()
        {
        }
        public function show_conditionally_reviews()
        {
        }
        /**
         * @param WC_Product $_product
         *
         * @return []
         */
        protected function get_product_category_ids($_product)
        {
        }
        protected function get_cart_product_data()
        {
        }
        public function show_conditionally_pay_for_order()
        {
        }
        public function show_conditionally_checkout()
        {
        }
        protected function update_show_conditionally($location, $args = array())
        {
        }
        public function get_options($force_refresh = \false)
        {
        }
        public function update_options($options)
        {
        }
        public function do_register_action()
        {
        }
        public function validate_pay_for_order($order)
        {
        }
        /**
         * @param array $data
         * @param WP_Error $errors
         */
        public function validate_checkout($data, $errors)
        {
        }
        public function validate_reviews($approved, $comment_data)
        {
        }
        public function validate_register($validation_error)
        {
        }
        public function get_locations()
        {
        }
        public function update($id, $args)
        {
        }
        public function delete($id)
        {
        }
        public function register($id, $args)
        {
        }
        public function remove($id)
        {
        }
        /**
         * @param $id
         *
         * @return false|WC_GZD_Legal_Checkbox
         */
        public function get_checkbox($id)
        {
        }
        /**
         * @param $args
         * @param $context
         *
         * @return WC_GZD_Legal_Checkbox[]
         */
        public function get_checkboxes($args = array(), $context = '')
        {
        }
        protected function filter($args = array(), $operator = 'AND')
        {
        }
        public function render($location = 'checkout')
        {
        }
        protected function sort($checkboxes = array())
        {
        }
    }
    /**
     * The Price Labels Class stores labels to be added as price suffixes.
     *
     * @class WC_Germanized_Price_Labels
     * @version  1.0.0
     * @author   Vendidero
     */
    class WC_GZD_Price_Labels extends \WC_GZD_Taxonomy
    {
        /**
         * Adds the units from i18n template
         */
        public function __construct()
        {
        }
        public function get_label($key, $by = 'slug')
        {
        }
        public function get_label_term($key, $by = 'slug')
        {
        }
        public function get_labels($args = array())
        {
        }
    }
    /**
     * AJAX Handler
     *
     * @class        WC_GZD_AJAX
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_AJAX
    {
        /**
         * Hook in methods
         */
        public static function init()
        {
        }
        public static function gzd_install_extension()
        {
        }
        public static function gzd_toggle_tab_enabled()
        {
        }
        public static function gzd_legal_checkboxes_save_changes()
        {
        }
        public static function gzd_json_search_delivery_time()
        {
        }
        /**
         * @param $price
         * @param WC_Product $product
         */
        protected static function get_price_excluding_tax($price, $product)
        {
        }
        protected static function get_price_including_tax($price, $product)
        {
        }
        public static function gzd_refresh_cart_vouchers()
        {
        }
        public static function gzd_refresh_unit_price()
        {
        }
        /**
         * @param WC_GZD_Product|WC_Product $product
         * @param $prices
         *
         * @return array
         */
        public static function get_db_prices_by_display_prices($product, $prices)
        {
        }
        public static function tmp_increase_price_decimals()
        {
        }
        public static function tmp_manipulate_tax_calculation($taxes, $price, $rates, $price_includes_tax)
        {
        }
        /**
         * Checks revocation form and sends Email to customer and Admin
         */
        public static function gzd_revocation()
        {
        }
    }
    /**
     * WC_GZD_Cache_Helper.
     */
    class WC_GZD_Cache_Helper
    {
        /**
         * This function shall flush caches for some widely spread Caching Plugins.
         *
         * @param string $type the cache type
         * @param array $cache_args additional arguments e.g. cache_type
         */
        public static function maybe_flush_cache($type = 'db', $cache_args = array())
        {
        }
    }
    // Exit if accessed directly
    /**
     * WooCommerce Germanized Abstract Product
     *
     * The WC_GZD_Product Class is used to offer additional functionality for every product type.
     *
     * @class        WC_GZD_Product
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Product
    {
        /**
         * The actual Product object (e.g. simple, variable)
         * @var WC_Product
         */
        protected $child;
        /**
         * @var null|WP_Term[]
         */
        protected $delivery_times = \null;
        protected $delivery_times_need_update = \false;
        protected $warranty_attachment = \false;
        protected $allergenic = \null;
        protected $nutrients = \null;
        protected $deposit_type = \null;
        /**
         * Construct new WC_GZD_Product
         *
         * @param WC_Product $product
         */
        public function __construct($product)
        {
        }
        /**
         * @param WC_Product $product
         *
         * @return void
         */
        public function set_wc_product($product)
        {
        }
        public function get_wc_product()
        {
        }
        protected function get_prop($prop, $context = 'view')
        {
        }
        protected function set_prop($prop, $value)
        {
        }
        public function __call($method, $args)
        {
        }
        public function get_unit($context = 'view')
        {
        }
        public function get_unit_base($context = 'view')
        {
        }
        public function get_warranty_attachment_id($context = 'view')
        {
        }
        public function get_gtin($context = 'view')
        {
        }
        public function get_mpn($context = 'view')
        {
        }
        public function get_nutrient_ids($context = 'view')
        {
        }
        public function get_nutrients($context = 'view')
        {
        }
        public function has_nutrients()
        {
        }
        public function get_nutrients_html($context = 'view')
        {
        }
        public function get_allergen_ids($context = 'view')
        {
        }
        public function has_allergenic()
        {
        }
        public function get_allergenic($context = 'view')
        {
        }
        public function get_formatted_allergenic($context = 'view')
        {
        }
        public function get_ingredients($context = 'view')
        {
        }
        /**
         * @return string
         */
        public function get_formatted_ingredients($context = 'view')
        {
        }
        public function get_nutrient_reference_value($context = 'view')
        {
        }
        public function get_nutri_score($context = 'view')
        {
        }
        public function get_formatted_nutri_score()
        {
        }
        public function get_drained_weight($context = 'view')
        {
        }
        public function get_net_filling_quantity($context = 'view')
        {
        }
        public function get_formatted_net_filling_quantity()
        {
        }
        public function get_formatted_drain_weight()
        {
        }
        public function get_alcohol_content($context = 'view')
        {
        }
        public function get_formatted_alcohol_content($context = 'view')
        {
        }
        public function includes_alcohol($context = 'view')
        {
        }
        public function get_food_distributor($context = 'view')
        {
        }
        public function get_formatted_food_distributor($context = 'view')
        {
        }
        public function get_food_place_of_origin($context = 'view')
        {
        }
        public function get_formatted_food_place_of_origin($context = 'view')
        {
        }
        public function get_food_description($context = 'view')
        {
        }
        public function get_formatted_food_description($context = 'view')
        {
        }
        public function get_deposit_type_term($context = 'view')
        {
        }
        public function get_deposit_type($context = 'view')
        {
        }
        public function get_deposit_packaging_type($context = 'view')
        {
        }
        public function get_deposit_packaging_type_title($context = 'view')
        {
        }
        /**
         * Returns the total deposit amount.
         *
         * @param string $tax_display
         * @param string $context
         *
         * @return string formatted deposit amount
         */
        public function get_deposit_amount($context = 'view', $tax_display = '')
        {
        }
        /**
         * Returns unit price including tax
         *
         * @param integer $qty
         * @param string $price
         *
         * @return string  unit price including tax
         */
        public function get_deposit_amount_including_tax($qty = 1, $price = '')
        {
        }
        /**
         * Returns deposit amount excluding tax
         *
         * @param integer $qty
         * @param string $price
         *
         * @return string deposit amount excluding tax
         */
        public function get_deposit_amount_excluding_tax($qty = 1, $price = '')
        {
        }
        public function get_deposit_amount_per_unit($context = 'view', $tax_display = '')
        {
        }
        public function get_deposit_quantity($context = 'view')
        {
        }
        public function has_deposit($context = 'view')
        {
        }
        public function get_unit_product($context = 'view')
        {
        }
        public function get_unit_price_regular($context = 'view')
        {
        }
        public function get_unit_price($context = 'view')
        {
        }
        public function get_unit_price_sale($context = 'view')
        {
        }
        public function get_unit_price_auto($context = 'view')
        {
        }
        public function is_unit_price_auto($context = 'view')
        {
        }
        public function get_sale_price_label($context = 'view')
        {
        }
        public function get_sale_price_regular_label($context = 'view')
        {
        }
        public function get_mini_desc($context = 'view')
        {
        }
        public function get_defect_description($context = 'view')
        {
        }
        public function get_cart_description($context = 'view')
        {
        }
        public function get_warranty_attachment($context = 'view')
        {
        }
        public function get_warranty_file($context = 'view')
        {
        }
        public function get_warranty_url($context = 'view')
        {
        }
        public function get_warranty_filename($context = 'view')
        {
        }
        public function has_warranty($context = 'view')
        {
        }
        public function has_cart_description()
        {
        }
        public function get_formatted_mini_desc($context = 'view')
        {
        }
        public function get_formatted_cart_description($context = 'view')
        {
        }
        public function get_service($context = 'view')
        {
        }
        public function is_service($context = 'view')
        {
        }
        /**
         * This method refers to other services in terms of their VAT treatment.
         * Services/virtual products may be treated differently.
         *
         * @see https://www.smartsteuer.de/online/lexikon/s/sonstige-leistung/
         *
         * @param $context
         *
         * @return boolean
         */
        public function is_other_service($context = 'view')
        {
        }
        public function get_photovoltaic_system($context = 'view')
        {
        }
        public function is_photovoltaic_system($context = 'view')
        {
        }
        public function get_used_good($context = 'view')
        {
        }
        public function is_food($context = 'view')
        {
        }
        public function get_is_food($context = 'view')
        {
        }
        public function is_used_good($context = 'view')
        {
        }
        public function get_defective_copy($context = 'view')
        {
        }
        public function is_defective_copy($context = 'view')
        {
        }
        public function get_free_shipping($context = 'view')
        {
        }
        public function has_free_shipping($context = 'view')
        {
        }
        public function get_differential_taxation($context = 'view')
        {
        }
        public function is_differential_taxed($context = 'view')
        {
        }
        public function set_deposit_type($deposit_type)
        {
        }
        public function set_deposit_quantity($quantity)
        {
        }
        public function set_warranty_attachment_id($id)
        {
        }
        public function set_gtin($gtin)
        {
        }
        public function set_mpn($mpn)
        {
        }
        public function set_nutrient_ids($ids)
        {
        }
        public function set_nutrient_reference_value($value)
        {
        }
        public function set_allergen_ids($ids)
        {
        }
        public function set_ingredients($ingredients)
        {
        }
        public function set_nutri_score($score)
        {
        }
        public function set_drained_weight($weight)
        {
        }
        public function set_net_filling_quantity($quantity)
        {
        }
        public function set_alcohol_content($content)
        {
        }
        public function set_food_distributor($distributor)
        {
        }
        public function set_food_place_of_origin($place_of_origin)
        {
        }
        public function set_food_description($description)
        {
        }
        public function set_unit_price($price)
        {
        }
        public function set_unit_price_regular($price)
        {
        }
        public function set_unit_price_sale($price)
        {
        }
        public function set_unit($unit)
        {
        }
        public function set_unit_base($base)
        {
        }
        public function set_unit_product($product)
        {
        }
        public function set_unit_price_auto($auto)
        {
        }
        public function set_service($service)
        {
        }
        public function set_photovoltaic_system($service)
        {
        }
        public function set_defective_copy($is_defective_copy)
        {
        }
        public function set_used_good($is_used_good)
        {
        }
        public function set_is_food($is_food)
        {
        }
        public function set_free_shipping($shipping)
        {
        }
        public function set_differential_taxation($taxation)
        {
        }
        public function set_sale_price_label($label)
        {
        }
        public function set_sale_price_regular_label($label)
        {
        }
        public function set_mini_desc($desc)
        {
        }
        public function set_defect_description($desc)
        {
        }
        public function set_cart_description($desc)
        {
        }
        public function recalculate_unit_price($args = array())
        {
        }
        public function needs_age_verification()
        {
        }
        public function has_min_age()
        {
        }
        public function has_nutrient($id, $context = 'view')
        {
        }
        public function get_nutrient_value($id, $context = 'view')
        {
        }
        public function get_nutrient_reference($id, $context = 'view')
        {
        }
        public function get_nutrient($id, $context = 'view')
        {
        }
        public function get_min_age($context = 'view')
        {
        }
        public function set_min_age($min_age)
        {
        }
        protected function attribute_is_checkout_visible($attribute)
        {
        }
        public function get_checkout_attributes($item_data = array(), $cart_variation_data = array())
        {
        }
        /**
         * Checks whether current product applies for a virtual VAT exception (downloadable or virtual)
         *
         * @return boolean
         */
        public function is_virtual_vat_exception()
        {
        }
        public function add_labels_to_price_html($price_html)
        {
        }
        public function get_price_html_from_to($from, $to, $show_labels = \true)
        {
        }
        protected function is_doing_price_html_action()
        {
        }
        public function hide_shopmarks_due_to_missing_price()
        {
        }
        /**
         * Gets a product's tax description (if is taxable)
         *
         * @return mixed string if is taxable else returns false
         */
        public function get_tax_info()
        {
        }
        /**
         * Checks whether current Product has a unit price
         *
         * @return boolean
         */
        public function has_unit()
        {
        }
        /**
         * Returns unit base html
         *
         * @return string
         */
        public function get_unit_base_html()
        {
        }
        public function get_unit_html()
        {
        }
        public function get_unit_term($context = 'view')
        {
        }
        public function get_unit_name($context = 'view')
        {
        }
        public function get_sale_price_label_term($context = 'view')
        {
        }
        public function get_sale_price_label_name($context = 'view')
        {
        }
        public function get_sale_price_regular_label_term($context = 'view')
        {
        }
        public function get_sale_price_regular_label_name($context = 'view')
        {
        }
        /**
         * Returns the unit price (if is sale then return sale price)
         *
         * @param integer $qty
         * @param string $price
         *
         * @return string  formatted unit price
         */
        public function get_formatted_unit_price($qty = 1, $price = '', $tax_display = '')
        {
        }
        /**
         * Returns unit price including tax
         *
         * @param integer $qty
         * @param string $price
         *
         * @return string  unit price including tax
         */
        public function get_unit_price_including_tax($qty = 1, $price = '')
        {
        }
        /**
         * Returns unit price excluding tax
         *
         * @param integer $qty
         * @param string $price
         *
         * @return string  unit price excluding tax
         */
        public function get_unit_price_excluding_tax($qty = 1, $price = '')
        {
        }
        /**
         * Checks whether unit price is on sale
         *
         * @return boolean
         */
        public function is_on_unit_sale()
        {
        }
        /**
         * Returns the deposit time html output
         *
         * @return string
         */
        public function get_deposit_amount_html($context = 'view', $tax_display = '')
        {
        }
        /**
         * Returns unit price html output
         *
         * @return string
         */
        public function get_unit_price_html($show_sale = \true, $tax_display = '')
        {
        }
        public function is_unit_price_calculated_automatically()
        {
        }
        public function has_unit_product()
        {
        }
        /**
         * Formats the amount of product units
         *
         * @return string
         */
        public function get_unit_product_html()
        {
        }
        /**
         * @return WP_Term[]
         */
        public function get_delivery_times($context = 'view')
        {
        }
        public function get_delivery_time_slugs($context = 'view')
        {
        }
        protected function set_delivery_time_slugs($slugs)
        {
        }
        public function delivery_times_need_update()
        {
        }
        public function set_delivery_times_need_update($need_update = \true)
        {
        }
        public function set_default_delivery_time_slug($slug)
        {
        }
        protected function get_current_customer_shipping_country()
        {
        }
        /**
         * Returns the current products delivery time term without falling back to default term
         *
         * @return false|WP_Term false returns false if term does not exist otherwise returns term object
         */
        public function get_delivery_time($context = 'view')
        {
        }
        public function get_default_delivery_time_slug($context = 'view')
        {
        }
        public function get_gzd_version($context = 'view')
        {
        }
        /**
         * @param string $context
         *
         * @return false|WP_Term
         */
        public function get_default_delivery_time($context = 'view')
        {
        }
        public function get_country_specific_delivery_times($context = 'view')
        {
        }
        public function set_gzd_version($version)
        {
        }
        protected function is_valid_country_specific_delivery_time($slug, $country)
        {
        }
        public function set_country_specific_delivery_times($terms)
        {
        }
        public function get_delivery_time_by_country($country = '', $context = 'view')
        {
        }
        /**
         * Returns current product's delivery time term. If none has been set and a default delivery time has been set, returns that instead.
         *
         * @return WP_Term|false
         */
        public function get_delivery_time_term($context = 'view')
        {
        }
        public function get_delivery_time_name($context = 'view')
        {
        }
        /**
         * Returns the delivery time html output
         *
         * @return string
         */
        public function get_delivery_time_html($context = 'view')
        {
        }
        /**
         * Returns the defect description html output
         *
         * @return string
         */
        public function get_formatted_defect_description($context = 'view')
        {
        }
        /**
         * Returns the shipping costs notice html output
         *
         * @return string
         */
        public function get_shipping_costs_html()
        {
        }
        public function save()
        {
        }
    }
    // Exit if accessed directly
    /**
     * Product Variation
     *
     * @class        WC_GZD_Product_Variation
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Product_Variation extends \WC_GZD_Product
    {
        /**
         * @var WC_GZD_Product
         */
        protected $parent = \null;
        protected $gzd_variation_level_meta = array('unit_price' => '', 'unit_price_regular' => '', 'unit_price_sale' => '', 'unit_price_auto' => '', 'service' => '', 'photovoltaic_system' => '', 'used_good' => '', 'defective_copy' => '', 'defect_description' => '');
        protected $gzd_variation_inherited_meta_data = array('unit', 'unit_base', 'unit_product', 'sale_price_label', 'sale_price_regular_label', 'free_shipping', 'differential_taxation', 'min_age', 'default_delivery_time', 'delivery_time_countries', 'warranty_attachment_id', 'gtin', 'mpn', 'deposit_type', 'deposit_quantity', 'nutrient_ids', 'nutrient_reference_value', 'allergen_ids', 'ingredients', 'nutri_score', 'drained_weight', 'net_filling_quantity', 'alcohol_content', 'food_distributor', 'food_place_of_origin', 'food_description', 'is_food', 'mini_desc');
        protected $gzd_variation_prevent_zero_inherit_meta_data = array('alcohol_content');
        protected $gzd_variation_forced_inherited_meta_data = array('unit', 'unit_base', 'free_shipping', 'differential_taxation', 'is_food');
        public function get_gzd_parent()
        {
        }
        public function get_forced_inherited_props()
        {
        }
        public function get_prop($prop, $context = 'view')
        {
        }
        public function get_unit($context = 'view')
        {
        }
        /**
         * Data is being handled by parent product.
         *
         * @param $unit
         */
        public function set_unit($unit)
        {
        }
        /**
         * Data is being handled by parent product.
         *
         * @param $base
         */
        public function set_unit_base($base)
        {
        }
        /**
         * Data is being handled by parent product.
         *
         * @param $free_shipping
         */
        public function set_free_shipping($free_shipping)
        {
        }
        /**
         * Data is being handled by parent product.
         *
         * @param $diff_taxation
         */
        public function set_differential_taxation($diff_taxation)
        {
        }
        public function get_nutrient_ids($context = 'view')
        {
        }
        public function get_delivery_time_slugs($context = 'view')
        {
        }
        protected function is_valid_country_specific_delivery_time($slug, $country)
        {
        }
    }
    /**
     * Direct Debit Payment Gateway
     *
     * Provides a Direct Debit Payment Gateway.
     *
     * @class        WC_GZD_Gateway_Direct_Debit
     * @extends        WC_Payment_Gateway
     * @version        2.1.0
     * @author        Vendidero, holzhannes
     */
    class WC_GZD_Gateway_Direct_Debit extends \WC_Payment_Gateway
    {
        public static $has_loaded = \false;
        public $admin_fields = array();
        /**
         * Constructor for the gateway.
         */
        public function __construct()
        {
        }
        public function init()
        {
        }
        public function validate_pay_order_checkbox()
        {
        }
        /**
         * @param WC_Order $order
         */
        public function print_debit_fields($order)
        {
        }
        /**
         * @param WC_Order $order
         */
        public function save_debit_fields($order)
        {
        }
        /**
         * @param $actions
         * @param WC_Order $order
         *
         * @return mixed
         */
        public function order_actions($actions, $order)
        {
        }
        public function export_view()
        {
        }
        public function unpaid_order_query($query, $query_vars)
        {
        }
        public function export_args($args = array())
        {
        }
        public function export($args = array())
        {
        }
        /**
         * @param WC_Order|false $order
         *
         * @return mixed|void
         */
        public function get_mandate_id($order = \false)
        {
        }
        /**
         * @param WC_Order $order
         *
         * @return false|int
         */
        public function get_debit_date($order)
        {
        }
        /**
         * @param WC_Order $order
         *
         * @return false|int|null
         */
        public function get_mandate_sign_date($order)
        {
        }
        /**
         * @param WC_Order $order
         *
         * @return string
         */
        public function get_mandate_type($order)
        {
        }
        /**
         * @param WC_Order $order
         * @param $sent_to_admin
         * @param $plain_text
         */
        public function email_sepa($order, $sent_to_admin, $plain_text)
        {
        }
        public function set_debit_fields($fields)
        {
        }
        public function send_mail($order_id)
        {
        }
        public function clean_whitespaces($str)
        {
        }
        /**
         * @param WC_Order $order
         */
        public function on_pay_for_order($order)
        {
        }
        protected function sanitize_iban($iban)
        {
        }
        protected function sanitize_bic($bic)
        {
        }
        /**
         * @param WC_Order $order
         */
        protected function update_order($order, $save = \false)
        {
        }
        /**
         * @param WC_Order $order
         */
        public function set_order_meta($order)
        {
        }
        public function generate_mandate()
        {
        }
        public function generate_mandate_by_order($order)
        {
        }
        public function mask($data)
        {
        }
        public function generate_mandate_text($args = array())
        {
        }
        /**
         * Initialise Gateway Settings Form Fields
         */
        public function init_form_fields()
        {
        }
        public function get_user_account_data($user_id = '')
        {
        }
        /**
         * Payment form on checkout page
         */
        public function payment_fields()
        {
        }
        public function validate_fields()
        {
        }
        public function validate_checkbox()
        {
        }
        /**
         * payment_scripts function.
         *
         * Outputs scripts used for simplify payment
         */
        public function payment_scripts()
        {
        }
        protected function get_mandate_text_checkout_fields()
        {
        }
        /**
         * Output for the order received page.
         */
        public function thankyou_page()
        {
        }
        /**
         * Add content to the WC emails.
         *
         * @access public
         *
         * @param WC_Order $order
         * @param bool $sent_to_admin
         * @param bool $plain_text
         */
        public function email_instructions($order, $sent_to_admin, $plain_text = \false)
        {
        }
        /**
         * Process the payment and return the result
         *
         * @param int $order_id
         *
         * @return array
         */
        public function process_payment($order_id)
        {
        }
        public function maybe_encrypt($string)
        {
        }
        public function maybe_decrypt($string)
        {
        }
        public function supports_encryption()
        {
        }
    }
    class WC_GZD_Gateway_Direct_Debit_Encryption_Helper
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public function get_random_key()
        {
        }
        public function is_configured()
        {
        }
        public function encrypt($string)
        {
        }
        public function decrypt($string)
        {
        }
    }
    /**
     * Pay by Invoice Gateway
     *
     * Provides an Invoice Payment Gateway.
     *
     * @class        WC_GZD_Gateway_Invoice
     * @extends        WC_Payment_Gateway
     * @version        2.1.0
     * @author        Vendidero
     */
    class WC_GZD_Gateway_Invoice extends \WC_Payment_Gateway
    {
        /**
         * Constructor for the gateway.
         */
        public function __construct()
        {
        }
        public function admin_options()
        {
        }
        /**
         * Initialise Gateway Settings Form Fields
         */
        public function init_form_fields()
        {
        }
        /**
         * Output for the order received page.
         */
        public function thankyou_page()
        {
        }
        /**
         * Add content to the WC emails.
         *
         * @access public
         *
         * @param WC_Order $order
         * @param bool $sent_to_admin
         * @param bool $plain_text
         */
        public function email_instructions($order, $sent_to_admin, $plain_text = \false)
        {
        }
        public function is_available()
        {
        }
        public function process_subscription_payment($order_total, $order_id)
        {
        }
        /**
         * Process the payment and return the result
         *
         * @param int $order_id
         *
         * @return array
         */
        public function process_payment($order_id)
        {
        }
    }
    // Exit if accessed directly
    /**
     * Contains Revocation Form Fields
     *
     * @class        WC_GZD_Revocation
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Revocation
    {
        /**
         * Returns necessary form fields for revocation_form
         *
         * @return array
         */
        public static function get_fields()
        {
        }
    }
    /**
     * Voucher discounts class.
     */
    class WC_GZD_Voucher_Discounts extends \WC_Discounts
    {
        /**
         * @var WC_Coupon
         */
        protected $coupon = \null;
        /**
         * @var WC_Cart|WC_Order
         */
        protected $object = \null;
        public function __construct($object, $coupon)
        {
        }
        protected function init()
        {
        }
        public function allow_free_shipping()
        {
        }
        public function apply_coupon($coupon, $validate = \true)
        {
        }
        public function set_items_from_cart($cart)
        {
        }
        public function set_items_from_order($order)
        {
        }
        /**
         * Get items which the coupon should be applied to.
         *
         * @since  3.2.0
         * @param  object $coupon Coupon object.
         * @return array
         */
        protected function get_items_to_apply_coupon($coupon)
        {
        }
    }
    /**
     * The Units Class stores units/measurements data.
     *
     * @class WC_Germanized_Units
     * @version  1.0.0
     * @author   Vendidero
     */
    class WC_GZD_Units extends \WC_GZD_Taxonomy
    {
        /**
         * Adds the units from i18n template
         */
        public function __construct()
        {
        }
        public function get_unit($key, $by = 'slug')
        {
        }
        public function get_unit_term($key, $by = 'slug')
        {
        }
        public function get_units($args = array())
        {
        }
    }
    /**
     * Helper to retrieve delivery times.
     *
     * @class    WC_GZD_Delivery_Times
     * @version  3.8.0
     * @author   vendidero
     */
    class WC_GZD_Delivery_Times extends \WC_GZD_Taxonomy
    {
        public function __construct()
        {
        }
        public function get_delivery_time($key, $by = 'slug')
        {
        }
        public function get_delivery_time_term($key, $by = 'slug')
        {
        }
        public function get_delivery_times($args = array())
        {
        }
    }
    /**
     * Attaches legal relevant Pages to WooCommerce Emails if has been set by WooCommerce Germanized Options
     *
     * @class        WC_GZD_Emails
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Emails
    {
        /**
         * Adds legal page ids to different options and adds a hook to the email footer
         */
        public function __construct()
        {
        }
        public function checkout_block_payment_context_confirmation_callback($context, $payment_result)
        {
        }
        public function checkout_block_no_payment_context_confirmation_callback($redirect, $order)
        {
        }
        public function register_confirmation_fallback($order_id)
        {
        }
        public function after_order_shutdown($order_id)
        {
        }
        public function get_email_plain_content($content_post)
        {
        }
        public function attach_product_warranties($attachments, $mail_id, $object = \false)
        {
        }
        public function register_custom_email_actions($actions)
        {
        }
        public function prevent_html_url_auto_link($url)
        {
        }
        public function reset_email_instance($text)
        {
        }
        /**
         * On including a template (e.g. emails/customer-processing-order.php)
         * Woo adds arguments to the template. In this method we do check whether the arguments
         * contain an email (which indicates that an email template is included and send). We will then
         * set the global email instance to the included email instance and use that to determine whether to add certain
         * legal texts to it or not.
         *
         * @param $template
         * @param $template_name
         * @param $args
         *
         * @return mixed
         */
        public function maybe_set_current_email_instance($template, $template_name, $args)
        {
        }
        /**
         * Returns the current email instance (if available).
         *
         * @return bool|WC_Email
         */
        public function get_current_email_instance()
        {
        }
        /**
         * Add BCC headers depending on the current email template.
         * Make the last parameter option to potentially support Woo < 3.9.
         *
         * @param $headers
         * @param $id
         * @param $object
         * @param null $email
         *
         * @return string
         */
        public function add_bcc_email_headers($headers, $id, $object, $email = \null)
        {
        }
        public function init_bcc_field($mailer)
        {
        }
        public function pay_for_order_request_needs_confirmation($order)
        {
        }
        /**
         * @param WC_Order $order
         */
        public function disable_pay_order_confirmation($order)
        {
        }
        public function save_confirmation_text_option()
        {
        }
        public function confirmation_text_option($object)
        {
        }
        public function register_order_confirmation_email_action($actions)
        {
        }
        public function maybe_set_gettext_email_filter($template_name, $template_path, $located, $args)
        {
        }
        public function replace_processing_email_text($translated, $original, $domain)
        {
        }
        public function replace_title_email_text($translated, $original, $domain)
        {
        }
        protected function get_processing_email_text($order_id)
        {
        }
        public function maybe_set_gettext_username_filter($template_name, $template_path, $located, $args)
        {
        }
        public function maybe_hide_username_password_reset($translated, $original, $domain)
        {
        }
        public function maybe_hide_username_new_account($translated, $original, $domain)
        {
        }
        public function check_for_partial_refund_mail($result, $mail_id, $tpl)
        {
        }
        public function admin_hooks()
        {
        }
        public function send_manual_order_confirmation($order_id)
        {
        }
        public function email_hooks($mailer)
        {
        }
        /**
         * @param WC_Order $order
         *
         * @return void
         */
        public function maybe_prevent_confirmation_email_sending($order)
        {
        }
        /**
         * @param integer $order_id
         *
         * @return void
         */
        public function maybe_restore_confirmation_email_sending($order_id, $from, $to, $order)
        {
        }
        /**
         * Add small business global Email Footer
         */
        public function small_business_notice()
        {
        }
        public function get_gateways_disabling_paid_for_order_mail()
        {
        }
        /**
         * Tweak to prevent Woo from sending confirmation emails for queued email tasks.
         * We are using this filter to allow late-checking whether the instant order confirmation is enabled
         * for this order.
         *
         * @param boolean $send
         * @param $filter
         * @param $args
         *
         * @return boolean
         */
        public function maybe_prevent_queued_confirmation_email_sending($send, $filter, $args)
        {
        }
        public function maybe_disable_order_paid_email_notification_queued($send, $filter, $args)
        {
        }
        public function maybe_disable_order_paid_email_notification($order_id, $order = \false)
        {
        }
        protected function maybe_prevent_order_paid_email_notification($order_id)
        {
        }
        public function resend_order_emails($emails)
        {
        }
        public function set_woocommerce_template_dir($dir, $template)
        {
        }
        public function prevent_confirmation_email_sending()
        {
        }
        public function restore_confirmation_email_sending()
        {
        }
        /**
         * @param WC_Order $order
         */
        public function confirm_order($order)
        {
        }
        /**
         * Send order confirmation mail directly after order is being sent
         *
         * @param mixed $return
         * @param mixed $order
         */
        public function send_order_confirmation_mails($result, $order)
        {
        }
        public function trigger_order_confirmation_emails($order)
        {
        }
        /**
         * @param WC_Order $order
         * @param $sent_to_admin
         * @param $plain_text
         */
        public function email_notices($order, $sent_to_admin, $plain_text)
        {
        }
        public function is_order_confirmation_email($id)
        {
        }
        public function email_pay_now_button($order)
        {
        }
        public function email_footer_plain($text)
        {
        }
        public function get_email_instance_by_id($id)
        {
        }
        public function set_order_email_filters($order, $sent_to_admin, $plain_text, $current = \null)
        {
        }
        public function remove_order_email_filters()
        {
        }
        /**
         * Add email styles
         *
         * @param string $css
         *
         * @return string
         */
        public function styles($css)
        {
        }
        /**
         * Hook into Email Footer and attach legal page content if necessary
         *
         * @param object $mail
         */
        public function hook_mail_footer($mail)
        {
        }
        /**
         * Add global footer Hooks to Email templates
         */
        public function add_template_footers($email = \false)
        {
        }
        public function get_current_email_object()
        {
        }
        /**
         * Attach page content by ID. Removes revocation_form shortcut to not show the form within the Email footer.
         *
         * @param integer $page_id
         */
        public function attach_page_content($page_id, $mail, $email_type = 'html')
        {
        }
        /**
         * Replaces revocation_form shortcut with a link to the revocation form
         *
         * @param array $atts
         *
         * @return string
         */
        public function revocation_form_replacement($atts)
        {
        }
    }
    // Exit if accessed directly
    /**
     * Adds Germanized Shortcodes
     *
     * @class        WC_GZD_Shortcodes
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Shortcodes
    {
        /**
         * Initializes Shortcodes
         */
        public static function init()
        {
        }
        protected static function get_gzd_product_shortcode($atts, $function_name = '')
        {
        }
        public static function gzd_product_unit_price($atts)
        {
        }
        public static function gzd_product_units($atts)
        {
        }
        public static function gzd_product_delivery_time($atts)
        {
        }
        public static function gzd_product_tax_notice($atts)
        {
        }
        public static function gzd_product_shipping_notice($atts)
        {
        }
        /**
         * This shortcode attaches legal page content to the footer for a certain email template.
         * Is useful in case an email customizer plugin is used to style emails.
         *
         * @param $atts
         */
        public static function gzd_email_legal_page_attachments($atts)
        {
        }
        public static function gzd_product_cart_desc($atts)
        {
        }
        public static function gzd_product_defect_description($atts)
        {
        }
        public static function gzd_product_deposit($atts)
        {
        }
        public static function gzd_product_food($atts, $content, $tag)
        {
        }
        public static function gzd_product_deposit_packaging_type($atts)
        {
        }
        public static function gzd_add_price_suffixes($price, $org_product)
        {
        }
        public static function gzd_add_to_cart($atts)
        {
        }
        public static function replace_add_to_cart_shortcode($shortcode)
        {
        }
        public static function gzd_complaints($atts)
        {
        }
        /**
         * Returns revocation_form template html
         *
         * @param array $atts
         *
         * @return string revocation form html
         */
        public static function revocation_form($atts)
        {
        }
        /**
         * Returns payment methods info html
         *
         * @param array $atts
         *
         * @return string
         */
        public static function payment_methods_info($atts)
        {
        }
        /**
         * Returns VAT info
         *
         * @param array $atts
         * @param string $content
         *
         * @return string
         */
        public static function gzd_vat_info($atts, $content = '')
        {
        }
        /**
         * Returns Sale info
         *
         * @param array $atts
         * @param string $content
         *
         * @return string
         */
        public static function gzd_sale_info($atts, $content = '')
        {
        }
    }
    /**
     * Class WC_GZD_Coupon_Helper
     */
    class WC_GZD_Coupon_Helper
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @since 1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 1.0
         */
        public function __wakeup()
        {
        }
        public function __construct()
        {
        }
        public function register_coupon_item_discount_total_filter($item_id, $item, $order_id)
        {
        }
        public function unregister_coupon_item_discount_total_filter($item_id, $item, $order_id)
        {
        }
        /**
         * @param $value
         * @param WC_Order_Item_Coupon $item
         *
         * @return mixed
         */
        public function item_discount_filter($value, $item)
        {
        }
        /**
         * On saving a coupon order item make sure to check whether it's
         * a voucher and transform the item to a voucher.
         *
         * @param WC_Order_Item $item
         *
         * @return void
         */
        public function on_order_item_coupon_save($item)
        {
        }
        /**
         * This event may be fired once per coupon stored within the order.
         * Do only register the woocommerce_order_after_calculate_totals event once.
         *
         * @param $coupon
         *
         * @return mixed
         */
        public function on_recalculate_order_coupons($coupon)
        {
        }
        protected function register_coupon_validation_filters()
        {
        }
        protected function unregister_coupon_validation_filters()
        {
        }
        public function is_valid_free_shipping_filter($free_shipping, $coupon)
        {
        }
        public function is_valid_for_product_filter($is_valid, $product, $coupon)
        {
        }
        /**
         * @param WC_Order_Item_Coupon $item
         * @param WC_Coupon $coupon
         * @param string $tax_display_mode
         *
         * @return void
         */
        protected function convert_order_item_coupon_to_voucher($item, $coupon, $tax_display_mode = 'incl')
        {
        }
        public function observe_order_voucher_removal($and_taxes, $order)
        {
        }
        /**
         * @param boolean $and_taxes
         * @param WC_Order $order
         *
         * @return void
         */
        public function observer_order_voucher_refresh($and_taxes, $order)
        {
        }
        /**
         * @param WC_Order $order
         *
         * @return boolean
         */
        protected function maybe_remove_order_vouchers($order)
        {
        }
        /**
         * As Woo does not offer a hook on coupon removal we'll need to observe the
         * calculate totals event and remove the fee in case the coupon is missing.
         *
         * @param WC_Order $order
         * @param boolean $force_refresh
         *
         * @return boolean
         */
        protected function refresh_order_vouchers($order, $force_refresh = \true)
        {
        }
        /**
         * @param WC_Order_Item_Coupon $coupon
         * @param WC_Order $order
         *
         * @return void
         */
        public function add_voucher_to_order($coupon, $order, $fee = \false)
        {
        }
        /**
         * @param WC_Order_Item_Coupon $coupon
         * @param WC_Order|false $order
         *
         * @return WC_Order_Item_Fee|false
         */
        public function get_order_item_fee_by_coupon($coupon, $order = \false)
        {
        }
        /**
         * @param WC_Order_Item_Fee $fee
         * @param WC_Order|false $order
         *
         * @return WC_Order_Item_Coupon|false
         */
        public function get_order_item_coupon_by_fee($fee, $order = \false)
        {
        }
        public function voucher_discount($discount, $item)
        {
        }
        public function get_voucher_data_from_cart()
        {
        }
        public function voucher_fragments($fragments)
        {
        }
        protected function get_order_fee_total($order)
        {
        }
        public function limit_order_voucher_discounts_callback($and_taxes, $order)
        {
        }
        /**
         * Woo calculates max discounts for fees based on net amounts. By doing so
         * negative fees will never be able to reach 0 order total in case of prices excluding taxes.
         *
         * Do also make sure that (sequential) vouchers do not exceed order total.
         *
         * @see WC_Order::calculate_totals()
         *
         * @param WC_Order $order
         *
         * @return bool
         */
        public function limit_order_voucher_discounts($order)
        {
        }
        public function fee_is_voucher($fee)
        {
        }
        /**
         * Should always round at subtotal?
         *
         * @since 3.9.0
         * @return bool
         */
        protected static function round_at_subtotal()
        {
        }
        /**
         * Apply rounding to an array of taxes before summing. Rounds to store DP setting, ignoring precision.
         *
         * @since  3.2.6
         * @param  float $value    Tax value.
         * @param  bool  $in_cents Whether precision of value is in cents.
         * @return float
         */
        protected static function round_line_tax($value, $in_cents = \true)
        {
        }
        /**
         * Woo seems to ignore the non-taxable status for negative fees @see WC_Order_Item_Fee::calculate_taxes()
         *
         * @param WC_Order_Item_Fee $fee
         *
         * @return void
         */
        public function remove_order_item_fee_taxes($fee)
        {
        }
        /**
         * @param WC_Coupon|WC_Order_Item_Coupon $coupon
         *
         * @return boolean
         */
        public function voucher_includes_shipping_costs($coupon)
        {
        }
        /**
         * Woo seems to ignore the non-taxable status for negative fees @see WC_Cart_Totals::get_fees_from_cart()
         *
         * @param $taxes
         * @param $fee
         * @param WC_Cart_Totals $cart_totals
         *
         * @return array|mixed
         */
        public function remove_taxes_for_vouchers($taxes, $fee, $cart_totals)
        {
        }
        /**
         * @param boolean $force_tax
         * @param $fee
         *
         * @return boolean
         */
        public function exclude_vouchers_from_forced_tax($force_tax, $fee)
        {
        }
        /**
         * @param WC_Coupon $coupon
         *
         * @return void
         */
        protected function register_coupon_as_fee($coupon)
        {
        }
        /**
         * @param WC_Order_Item_Coupon|WC_Coupon $item
         *
         * @return WC_Coupon
         */
        protected function get_voucher_by_coupon_order_item($item)
        {
        }
        /**
         * @param WC_Coupon|WC_Order_Item_Coupon $coupon
         *
         * @return array
         */
        protected function get_fee_data_from_coupon($coupon, $object)
        {
        }
        public function vouchers_as_fees()
        {
        }
        /**
         * @param boolean $is_valid
         * @param WC_Coupon $coupon
         *
         * @return boolean
         */
        public function is_valid($is_valid, $coupon)
        {
        }
        public function on_apply_voucher($coupon_code)
        {
        }
        public function legacy_shipments_order_has_voucher($has_voucher, $order)
        {
        }
        /**
         * Checks whether an order has a voucher as coupon or not.
         *
         * @param WC_Order|integer $order
         * @param bool $allow_legacy
         *
         * @return bool
         */
        public function order_has_voucher($order, $allow_legacy = \false)
        {
        }
        /**
         * @param WC_Order|integer $order
         *
         * @return boolean
         */
        public function order_supports_fee_vouchers($order)
        {
        }
        /**
         * Checks whether an order has a voucher as coupon or not.
         *
         * @param $order
         *
         * @return string
         */
        public function order_voucher_total($order, $inc_tax = \true)
        {
        }
        /**
         * Legacy support for non-fee vouchers.
         *
         * Adjust WooCommerce order recalculation to make it compatible with vouchers.
         * Maybe some day we'll be able to hook into calculate_taxes or calculate_totals so that is not necessary anymore.
         */
        public function legacy_before_recalculate_totals()
        {
        }
        public function legacy_adjust_item_total($value, $item)
        {
        }
        /**
         * Sets voucher coupon data if available.
         *
         * @param WC_Order_Item_Coupon $item
         * @param string $code
         * @param WC_Coupon $coupon
         * @param WC_Order $order
         */
        public function coupon_item_save($item, $code, $coupon, $order)
        {
        }
        /**
         * @param string $code
         *
         * @return WC_Coupon|boolean
         */
        protected function get_voucher_by_code($code)
        {
        }
        /**
         * Sets voucher coupon data if available.
         *
         * @param WC_Order_Item_Fee $item
         * @param $fee_key
         * @param object $fee
         * @param WC_Order $order
         */
        public function fee_item_save($item, $fee_key, $fee, $order)
        {
        }
        /**
         * @param WC_Order $order
         */
        protected function get_tax_display_mode($order)
        {
        }
        /**
         * @param WC_Coupon $coupon
         *
         * @return bool
         */
        protected function coupon_is_voucher($coupon)
        {
        }
        /**
         * @param WC_Order_Item_Coupon $coupon
         *
         * @return bool
         */
        protected function order_item_coupon_is_voucher($coupon, $allow_legacy = \false)
        {
        }
        /**
         * @param WC_Coupon $coupon
         */
        public function convert_coupon_to_voucher($coupon)
        {
        }
        public function coupon_options($id, $coupon)
        {
        }
        /**
         * @param $id
         * @param WC_Coupon $coupon
         */
        public function coupon_save($id, $coupon)
        {
        }
    }
    /**
     * WC_Shop_Customizer class.
     */
    class WC_GZD_Shop_Customizer
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Add settings to the customizer.
         *
         * @param WP_Customize_Manager $wp_customize Theme Customizer object.
         */
        public function remove_settings($wp_customize)
        {
        }
    }
    /**
     * WooCommerce Payment Gateways class
     *
     * Loads hooks for payment gateways
     *
     * @class        WC_GZD_Payment_Gateways
     * @category    Class
     * @author        vendidero
     */
    class WC_GZD_Payment_Gateways
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        /**
         * Remove PayPal thank you for payment text if the order has not been paid yet.
         *
         * @param $text
         * @param WC_Order $order
         *
         * @return mixed
         */
        public function remove_paypal_filter($text, $order)
        {
        }
        public function gateway_admin_init()
        {
        }
        public function gateway_pay_init()
        {
        }
        public function gateway_ajax_init()
        {
        }
        public function save_fields()
        {
        }
        /**
         * Set default order button text instead of the button text defined by each payment gateway.
         * Can be overriden by setting force_order_button_text within payment gateway class
         * Manipulate payment gateway description if has a fee and init gateway title filter
         */
        public function checkout()
        {
        }
        public function gateway_supports_fees($id)
        {
        }
        protected function maybe_force_gateway_button_text($gateway)
        {
        }
        public function manipulate_gateways()
        {
        }
        /**
         * Dynamically set filter to show additional fields
         */
        public function init_fields()
        {
        }
        /**
         * Set additional payment gateway admin fields
         *
         * @param array $fields
         */
        public function set_fields($fields)
        {
        }
        /**
         * Update fee for cart if feeable gateway has been selected as payment method
         */
        public function init_fee()
        {
        }
        /**
         * Sets fee for a specific gateway
         *
         * @param object $gateway
         */
        public function set_fee($gateway)
        {
        }
    }
    class WC_GZD_Dependencies
    {
        /**
         * This is the minimum Woo version supported by Germanized
         *
         * @var string
         */
        public static $woocommerce_minimum_version_required = '3.9';
        public static function is_loadable()
        {
        }
        public static function is_woocommerce_outdated()
        {
        }
        public static function get_woocommerce_min_version_required()
        {
        }
        public function is_plugin_activated($plugin_slug)
        {
        }
        /**
         * This method removes accuration from $ver2 if this version is more accurate than $main_ver
         */
        public function compare_versions($main_ver, $ver2, $operator)
        {
        }
        protected function parse_version($version)
        {
        }
        /**
         * Checks if WooCommerce is activated
         *
         * @return boolean true if WooCommerce is activated
         */
        public function is_woocommerce_activated()
        {
        }
        public function dependencies_notice()
        {
        }
    }
    class WC_GZD_Food_Helper
    {
        public static function init()
        {
        }
        public static function get_nutrient_reference_values()
        {
        }
        public static function get_nutri_score_values()
        {
        }
        public static function get_food_attribute_types()
        {
        }
        public static function get_nutrient_types()
        {
        }
        public static function get_nutrient_rounding_rules()
        {
        }
    }
    /**
     * Installation related functions and hooks
     *
     * @class        WC_GZD_Install
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Install
    {
        /**
         * Hook in tabs.
         */
        public function __construct()
        {
        }
        public static function redirect()
        {
        }
        /**
         * check_version function.
         *
         * @access public
         * @return void
         */
        public static function check_version()
        {
        }
        /**
         * Install WC_Germanized
         */
        public static function install()
        {
        }
        protected static function install_packages()
        {
        }
        public static function deactivate()
        {
        }
        /**
         * Update DB version to current
         */
        public static function update_db_version($version = \null)
        {
        }
        public static function get_db_update_callbacks()
        {
        }
        /**
         * Show plugin changes. Code adapted from W3 Total Cache.
         */
        public static function in_plugin_update_message($args)
        {
        }
        public static function create_units()
        {
        }
        public static function create_labels()
        {
        }
        public static function create_tax_rates()
        {
        }
        /**
         * Updates WooCommerce Options if user chooses to automatically adapt german options
         */
        public static function set_default_settings()
        {
        }
        /**
         * Create pages that the plugin relies on, storing page id's in variables.
         *
         * @access public
         * @return void
         */
        public static function create_pages()
        {
        }
        public static function woo_page_detection_callback($valid_page_found, $slug, $page_content)
        {
        }
        /**
         * Default options
         *
         * Sets up the default options used on the settings page
         *
         * @access public
         */
        public static function create_options()
        {
        }
    }
    class WC_GZD_Product_Import
    {
        public $columns = array();
        protected static $_instance = \null;
        public static function instance()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @since 1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 1.0
         */
        public function __wakeup()
        {
        }
        public function __construct()
        {
        }
        public function get_columns()
        {
        }
        public function set_special_columns($columns)
        {
        }
        public function get_formatting_callbacks()
        {
        }
        public function parse_data($data)
        {
        }
        /**
         * Parse a description value field
         *
         * @param string $description field value.
         *
         * @return string
         */
        public function parse_html_field($description)
        {
        }
        protected function starts_with($haystack, $needle)
        {
        }
        public function set_columns($columns, $item)
        {
        }
        public function set_mappings($columns)
        {
        }
        /**
         * @param WC_Product $product
         * @param $data
         *
         * @return mixed|void
         */
        public function import($product, $data)
        {
        }
        public function parse_bool_str($value)
        {
        }
        public function parse_allergenic($allergenic)
        {
        }
        public function parse_nutrient_reference_value($ref_value)
        {
        }
        public function parse_nutri_score($nutri_score)
        {
        }
        public function parse_deposit_type($name)
        {
        }
        public function parse_unit($name)
        {
        }
        public function parse_sale_price_label($name)
        {
        }
        public function parse_delivery_time($name)
        {
        }
        public function parse_nutrient($nutrient_data)
        {
        }
        public function parse_min_age($min_age)
        {
        }
        public function parse_term($name, $taxonomy, $output = 'term_id')
        {
        }
        /**
         * @param WC_Product $product
         * @param $value
         *
         * @return mixed
         */
        public function set_column_value_delivery_time($product, $value)
        {
        }
        /**
         * @param WC_Product $product
         * @param $value
         *
         * @return mixed
         */
        public function set_column_value_country_specific_delivery_times($product, $value)
        {
        }
    }
    /**
     * Helper to retrieve nutrients.
     *
     * @class    WC_GZD_Nutrients
     * @version  3.9.0
     * @author   vendidero
     */
    class WC_GZD_Nutrients extends \WC_GZD_Taxonomy
    {
        public function __construct()
        {
        }
        public function get_nutrient($key, $by = 'slug')
        {
        }
        public function get_nutrient_term($key, $by = 'slug')
        {
        }
        public function get_nutrients($args = array())
        {
        }
        public function get_nutrient_object($term)
        {
        }
    }
    // Exit if accessed directly
    /**
     * WooCommerce Germanized Product Variable
     *
     * The WC_GZD_Product_Variable Class is used to offer additional functionality for every variable product.
     *
     * @class        WC_GZD_Product
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Product_Variable extends \WC_GZD_Product
    {
        protected $unit_prices_array = array();
        /**
         * Get the min or max variation unit regular price.
         *
         * @param string $min_or_max - min or max
         * @param boolean $display Whether the value is going to be displayed
         *
         * @return string
         */
        public function get_variation_unit_regular_price($min_or_max = 'min', $display = \false)
        {
        }
        /**
         * Get the min or max variation unit sale price.
         *
         * @param string $min_or_max - min or max
         * @param boolean $display Whether the value is going to be displayed
         *
         * @return string
         */
        public function get_variation_unit_sale_price($min_or_max = 'min', $display = \false)
        {
        }
        /**
         * Get the min or max variation (active) unit price.
         *
         * @param string $min_or_max - min or max
         * @param boolean $display Whether the value is going to be displayed
         *
         * @return string
         */
        public function get_variation_unit_price($min_or_max = 'min', $display = \false)
        {
        }
        public function is_on_unit_sale()
        {
        }
        public function has_unit()
        {
        }
        public function has_unit_fields()
        {
        }
        public function get_price_html_from_to($from, $to, $show_labels = \true)
        {
        }
        /**
         * Returns the price in html format.
         *
         * @access public
         *
         * @param string $price (default: '')
         *
         * @return string
         */
        public function get_unit_price_html($price = '', $tax_display = '')
        {
        }
        /**
         * Get an array of all sale and regular unit prices from all variations. This is used for example when displaying the price range at variable product level or seeing if the variable product is on sale.
         *
         * Can be filtered by plugins which modify costs, but otherwise will include the raw meta costs unlike get_price() which runs costs through the woocommerce_get_price filter.
         * This is to ensure modified prices are not cached, unless intended.
         *
         * @param bool $display Are prices for display? If so, taxes will be calculated.
         *
         * @return array() Array of RAW prices, regular prices, and sale prices with keys set to variation ID.
         */
        public function get_variation_unit_prices($display = \false, $tax_display = '')
        {
        }
    }
    class WC_GZD_Shipping_Rate extends \WC_Shipping_Rate
    {
        public $tax_shares = array();
        public function __construct(\WC_Shipping_Rate $rate)
        {
        }
        public function set_shared_taxes()
        {
        }
        public function set_costs()
        {
        }
        public function get_shared_taxes()
        {
        }
    }
    class WC_GZD_Hook_Priorities
    {
        /**
         * Single instance of WC_GZD_Hook_Priorities
         *
         * @var object
         */
        protected static $_instance = \null;
        public $priorities = array();
        public $default_priorities = array();
        public $hooks = array();
        public $queue = array();
        protected $hook_order_queue = array();
        protected $original_priorities = array();
        public static function instance()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @since 1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 1.0
         */
        public function __wakeup()
        {
        }
        public function __construct()
        {
        }
        public function init()
        {
        }
        /**
         * Returns the priority for critical hooks (see $this->priorities) which may be customized by a theme.
         *
         * @param $hook
         * @param $function
         *
         * @return int
         */
        public function get_priority($hook, $function, $fallback = 10, $force_original = \false)
        {
        }
        public function update_priority($hook, $function, $new_priority = 10, $old_priority = \false, $fallback = 10)
        {
        }
        /**
         * Returns the priority for a custom wc germanized frontend hook
         */
        public function get_hook_priority($hook, $suppress_filters = \false)
        {
        }
        public function get_hook_priorities()
        {
        }
        /**
         * This method forces a sequential order of a certain hook. Switches
         * priorities after_setup_theme to improve theme compatibility.
         *
         * @param $hook
         * @param $functions
         *
         * @return void
         */
        public function force_hook_order($hook, $functions)
        {
        }
        public function force_hook_order_queued()
        {
        }
        public function change_priority($hook, $function, $new_prio)
        {
        }
        /**
         * Hooked by after_setup_theme. Not to be called directly
         */
        public function change_priority_queue()
        {
        }
        public function clear_cache()
        {
        }
        /**
         * Regenerates the hook priority cache (checks for theme customizations)
         */
        public function load_priorities()
        {
        }
    }
    /**
     * Virtual VAT Helper
     *
     *
     * @class    WC_GZD_Deprecated_Virtual_VAT_Helper
     * @category Class
     * @author   vendidero
     * @deprecated
     */
    class WC_GZD_Deprecated_Virtual_VAT_Helper
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function init()
        {
        }
        public function set_base_tax_rates($rates, $tax_class)
        {
        }
    }
    /**
     * Class WC_GZD_REST_Product_Price_Labels_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Product_Price_Labels_V1_Controller extends \WC_REST_Terms_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v1';
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'products/price_labels';
        /**
         * Taxonomy.
         *
         * @var string
         */
        protected $taxonomy = 'product_price_label';
        /**
         * Prepare a single delivery Time output for response.
         *
         * @param WP_Term $item Term object.
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response $response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Get the Category schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * Class WC_GZD_REST_Product_Price_Labels_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Product_Price_Labels_V2_Controller extends \WC_GZD_REST_Product_Price_Labels_V1_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v2';
    }
    /**
     * Class WC_GZD_REST_Product_Price_Labels_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Product_Price_Labels_Controller extends \WC_GZD_REST_Product_Price_Labels_V2_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v3';
    }
    /**
     * Class WC_GZD_REST_Product_Units_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Product_Units_V1_Controller extends \WC_REST_Terms_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v1';
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'products/units';
        /**
         * Taxonomy.
         *
         * @var string
         */
        protected $taxonomy = 'product_unit';
        /**
         * Prepare a single delivery Time output for response.
         *
         * @param WP_Term $item Term object.
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response $response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Get the Category schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * Class WC_GZD_REST_Product_Delivery_Times_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Product_Delivery_Times_V1_Controller extends \WC_REST_Terms_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v1';
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'products/delivery_times';
        /**
         * Taxonomy.
         *
         * @var string
         */
        protected $taxonomy = 'product_delivery_time';
        /**
         * Prepare a single delivery Time output for response.
         *
         * @param WP_Term $item Term object.
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response $response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Get the Category schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * Class WC_GZD_REST_Product_Delivery_Times_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Product_Delivery_Times_V2_Controller extends \WC_GZD_REST_Product_Delivery_Times_V1_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v2';
    }
    /**
     * Class WC_GZD_REST_Product_Delivery_Times_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Product_Delivery_Times_Controller extends \WC_GZD_REST_Product_Delivery_Times_V2_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v3';
    }
    /**
     * Class WC_GZD_REST_Nutrients_Controller
     *
     * @since 3.9.0
     * @author vendidero
     */
    class WC_GZD_REST_Nutrients_Controller extends \WC_REST_Terms_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v3';
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'nutrients';
        /**
         * Taxonomy.
         *
         * @var string
         */
        protected $taxonomy = 'product_nutrient';
        /**
         * Prepare a single delivery Time output for response.
         *
         * @param WP_Term $item Term object.
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response $response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        protected function get_nutrient($term)
        {
        }
        /**
         * Get the Category schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Update term meta fields.
         *
         * @param WP_Term         $term    Term object.
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error
         */
        protected function update_term_meta_fields($term, $request)
        {
        }
    }
    /**
     * Class WC_GZD_REST_Product_Units_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Product_Units_V2_Controller extends \WC_GZD_REST_Product_Units_V1_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v2';
    }
    /**
     * Class WC_GZD_REST_Product_Units_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Product_Units_Controller extends \WC_GZD_REST_Product_Units_V2_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v3';
    }
    /**
     * @since 3.9.0
     * @author vendidero
     */
    class WC_GZD_REST_Product_Deposit_Types_Controller extends \WC_REST_Terms_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v3';
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'products/deposit_types';
        /**
         * Taxonomy.
         *
         * @var string
         */
        protected $taxonomy = 'product_deposit_type';
        /**
         * Prepare a single delivery Time output for response.
         *
         * @param WP_Term $item Term object.
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response $response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Get the Category schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Update term meta fields.
         *
         * @param WP_Term         $term    Term object.
         * @param WP_REST_Request $request Full details about the request.
         * @return bool|WP_Error
         */
        protected function update_term_meta_fields($term, $request)
        {
        }
    }
    /**
     * Class WC_GZD_REST_Customers_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Customers_Controller
    {
        /**
         * ExtendOrdersController constructor.
         */
        public function __construct()
        {
        }
        /**
         * Filter customer data returned from the REST API.
         *
         * @param WP_REST_Response $response The response object.
         * @param WP_User $customer User object used to create response.
         * @param WP_REST_Request $request Request object.
         *
         * @return WP_REST_Response
         * @since 1.0.0
         * @wp-hook woocommerce_rest_prepare_customer
         *
         */
        public function prepare($response, $user_data, $request)
        {
        }
        /**
         * Prepare a single customer for create or update.
         *
         * @param WP_User $customer Data used to create the customer.
         * @param WP_REST_Request $request Request object.
         * @param bool $creating True when creating item, false when updating.
         *
         * @since 1.0.0
         * @wp-hook woocommerce_rest_insert_customer
         *
         */
        public function insert($user_data, $request, $creating)
        {
        }
        /**
         * Extend schema.
         *
         * @param array $schema_properties Data used to create the customer.
         *
         * @return array
         * @since 1.0.0
         * @wp-hook woocommerce_rest_customer_schema
         *
         */
        public function schema($schema_properties)
        {
        }
    }
    // Exit if accessed directly
    class WC_GZD_REST_API
    {
        protected static $_instance = \null;
        public static $endpoints = array();
        public static function instance()
        {
        }
        public function init()
        {
        }
        public function rest_api_includes()
        {
        }
        public function register_rest_routes()
        {
        }
    }
    /**
     * Class WC_GZD_REST_Allergenic_Controller
     *
     * @since 3.9.0
     * @author vendidero
     */
    class WC_GZD_REST_Allergenic_Controller extends \WC_REST_Terms_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'wc/v3';
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'allergenic';
        /**
         * Taxonomy.
         *
         * @var string
         */
        protected $taxonomy = 'product_allergen';
        /**
         * Prepare a single delivery Time output for response.
         *
         * @param WP_Term $item Term object.
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response $response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Get the Category schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * Class WC_GZD_REST_Products_Controller
     *
     * @since 1.7.0
     */
    class WC_GZD_REST_Products_Controller
    {
        public function __construct()
        {
        }
        /**
         * Extend variation schema.
         *
         * @wp-hook woocommerce_rest_customer_schema
         *
         * @param array $schema_properties Data used to create the customer.
         *
         * @return array
         */
        public function variation_schema($schema_properties)
        {
        }
        protected function get_item_schema_properties()
        {
        }
        /**
         * Extend schema.
         *
         * @wp-hook woocommerce_rest_customer_schema
         *
         * @param array $schema_properties Data used to create the customer.
         *
         * @return array
         */
        public function schema($schema_properties)
        {
        }
        public function prepare($response, $post, $request)
        {
        }
        public function insert_update($product, $request, $inserted)
        {
        }
        /**
         * @param $request
         * @param WC_Product $product
         *
         * @return array
         */
        public function get_product_saveable_data($request, $product)
        {
        }
        /**
         * Makes sure that term data uses default data if no request data was received. Deletes the term data by returning an empty string if request data is empty.
         *
         * @param $request_data
         * @param int $current
         *
         * @return array|int|string
         */
        protected function get_term_data($request_data, $current = 0)
        {
        }
        public function save_update_product_data($request, $product)
        {
        }
        protected function prepare_nutrients($nutrient_ids)
        {
        }
    }
    /**
     * Class WC_GZD_REST_Orders_Controller
     *
     * @since 1.7.0
     * @author vendidero, Daniel Huesken
     */
    class WC_GZD_REST_Orders_Controller
    {
        /**
         * ExtendOrdersController constructor.
         */
        public function __construct()
        {
        }
        /**
         * Filter order data returned from the REST API.
         *
         * @param WP_REST_Response $response The response object.
         * @param WP_Post $post object used to create response.
         * @param WP_REST_Request $request Request object.
         *
         * @return WP_REST_Response
         * @since 1.0.0
         * @wp-hook woocommerce_rest_prepare_order
         *
         */
        public function prepare($response, $post, $request)
        {
        }
        public function insert($order, $request, $creating)
        {
        }
        /**
         * @param WC_Order $order
         * @param $request
         *
         * @return mixed
         */
        public function save_update_order_data($order, $request)
        {
        }
        /**
         * Extend schema.
         *
         * @param array $schema_properties Data used to create the order.
         *
         * @return array
         * @since 1.0.0
         * @wp-hook woocommerce_rest_order_schema
         *
         */
        public function schema($schema_properties)
        {
        }
    }
    class WC_GZD_Product_Attribute extends \WC_Product_Attribute
    {
        /**
         * Data array.
         *
         * @var array
         */
        protected $data = array();
        /**
         * WC_GZD_Product_Attribute constructor.
         *
         * @param null WC_Product_Attribute $attribute
         */
        public function __construct($attribute = \null)
        {
        }
        /**
         * Returns the original attribute.
         *
         * @return WC_Product_Attribute
         */
        public function get_attribute()
        {
        }
        /**
         * Returns current product attribute data.
         *
         * @return array
         */
        public function get_data()
        {
        }
        /**
         * Set if visible during cart/checkout.
         *
         * @param bool $value If is visible on cart/checkout.
         */
        public function set_checkout_visible($value)
        {
        }
        /**
         * Get if visible during cart/checkout.
         *
         * @return bool
         */
        public function get_checkout_visible()
        {
        }
        /**
         * Get if visible during cart/checkout.
         *
         * @return bool
         */
        public function is_checkout_visible()
        {
        }
        /**
         * OffsetGet.
         *
         * @param string $offset Offset.
         *
         * @return mixed
         */
        public function offsetGet($offset)
        {
        }
        /**
         * OffsetSet.
         *
         * @param string $offset Offset.
         * @param mixed $value Value.
         */
        public function offsetSet($offset, $value)
        {
        }
        /**
         * OffsetUnset.
         *
         * @param string $offset Offset.
         */
        public function offsetUnset($offset)
        {
        }
        /**
         * OffsetExists.
         *
         * @param string $offset Offset.
         *
         * @return bool
         */
        public function offsetExists($offset)
        {
        }
    }
    class WC_GZD_Product_Attribute_Helper
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @since 1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 1.0
         */
        public function __wakeup()
        {
        }
        public function __construct()
        {
        }
        public function attribute_visibility($attribute, $i)
        {
        }
        public function cart_item_data_filter($item_data, $cart_item)
        {
        }
        public function get_attribute_by_variation($product, $name)
        {
        }
        public function update_attributes($product, $updated_props)
        {
        }
        public function prepare_attributes_filter($attribute, $data, $i)
        {
        }
        protected function get_product_id($maybe_product_id)
        {
        }
        public function get_attribute($attribute, $product_id = \false)
        {
        }
    }
    /**
     * Registers delivery time taxonomy
     *
     * @class        WC_GZD_Post_Types
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Post_Types
    {
        /**
         * Hook in methods
         */
        public static function init()
        {
        }
        /**
         * Register Delivery Time Taxonomy
         */
        public static function register_taxonomies()
        {
        }
    }
    // Exit if accessed directly
    class WC_GZD_Admin_Customer
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function add_user_column_value($value, $column_name, $user_id)
        {
        }
        public function add_user_column($columns)
        {
        }
        /**
         * Adds customer activation option to profile
         *
         * @param object $user
         */
        public function profile_add_activation_field($user)
        {
        }
        /**
         * Delete activation key if user has been marked as opted in
         *
         * @param int $user_id
         */
        public function profile_save_activation_field($user_id)
        {
        }
    }
    // Exit if accessed directly
    class WC_GZD_Admin_Order
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        /**
         * @param WC_Order_Item $item
         *
         * @return void
         */
        public function remove_additional_costs_meta($item)
        {
        }
        /**
         * WooCommerce does by default not show full precision amounts for shipping and fees in admin panel
         * that's why the refund (tax) amount entered by the shop owner might differ from the actual amount (with full precision)
         * in the corresponding parent item. In case the rounded amounts equal, use the higher-precision amounts from the parent item instead.
         *
         * @param WC_Order_Refund $refund
         * @param $args
         *
         * @return void
         */
        public function fix_refund_precision($refund, $args)
        {
        }
        /**
         * When (re-) calculation order totals Woo does round shipping total to current price decimals.
         * That is not the case within cart/checkout and leads to rounding issues. This filter forces recalculating
         * the exact shipping total instead of using the already calculated shipping total amount while calculating order totals.
         *
         * @see WC_Abstract_Order::calculate_totals()
         *
         * @param $and_taxes
         * @param WC_Order $order
         */
        public function set_shipping_total_filter($and_taxes, $order)
        {
        }
        /**
         * Remove the filter after order totals have been calculated successfully.
         */
        public function remove_shipping_total_filter()
        {
        }
        /**
         * @param $total
         * @param WC_Order $order
         */
        public function force_shipping_total_exact($total, $order)
        {
        }
        /**
         * @param WC_Order_Item $item
         * @param array $calculate_tax_for
         */
        public function adjust_item_taxes($item, $calculate_tax_for = array())
        {
        }
        /**
         * @param WC_Order_Item $item
         * @param WC_Order_Item|false $old_item
         *
         * @return float
         */
        protected function get_item_total($item, $old_item = \false)
        {
        }
        /**
         * @param WC_Order $order
         *
         * @return array
         */
        public function get_order_taxable_location($order)
        {
        }
        /**
         * @param WC_Order $order
         * @param string $type
         *
         * @return array
         */
        public function get_order_tax_share($order, $type = 'shipping')
        {
        }
    }
    class WC_GZD_Admin_Provider_DPD extends \Vendidero\Germanized\Shipments\ShippingProvider\Simple
    {
        public function get_edit_link($section = '')
        {
        }
        public function get_name($context = 'view')
        {
        }
        public function get_description($context = 'view')
        {
        }
        public function get_title($context = 'view')
        {
        }
        public function is_manual_integration()
        {
        }
        public function is_pro()
        {
        }
        public function is_activated()
        {
        }
        public function activate()
        {
        }
        public function get_help_link()
        {
        }
        public function save()
        {
        }
    }
    // Exit if accessed directly
    class WC_GZD_Admin
    {
        /**
         * Single instance of WooCommerce Germanized Main Class
         *
         * @var object
         */
        protected static $_instance = \null;
        protected $wizard = \null;
        public static function instance()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @since 1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 1.0
         */
        public function __wakeup()
        {
        }
        public function __construct()
        {
        }
        public function tool_actions()
        {
        }
        protected function check_install_oss()
        {
        }
        protected function check_install_ts()
        {
        }
        protected function check_enable_debug_mode()
        {
        }
        protected function check_disable_food_options()
        {
        }
        /**
         * @param \Vendidero\Germanized\Shipments\Interfaces\ShippingProvider $providers
         */
        public function maybe_register_shipping_providers($providers)
        {
        }
        public function is_gls_available()
        {
        }
        public function is_dpd_available()
        {
        }
        public function oss_enable_hide_tax_percentage()
        {
        }
        public function check_dhl_import()
        {
        }
        public function import_dhl_settings()
        {
        }
        public function check_internetmarke_import()
        {
        }
        public function import_internetmarke_settings()
        {
        }
        public function save_fields($value, $option, $raw_value)
        {
        }
        public function save_decimal_field($value, $option, $raw_value)
        {
        }
        public function save_toggle_input_field($value, $option, $raw_value)
        {
        }
        public function image_field($value)
        {
        }
        public function html_field($value)
        {
        }
        public function hidden_field($value)
        {
        }
        /**
         * Show a notice highlighting bad template files.
         */
        public function get_template_version_check_result()
        {
        }
        public function toggle_input_field($value)
        {
        }
        public function term_field($value)
        {
        }
        public function pre_update_gzd_privacy_option_page($new_value, $old_value)
        {
        }
        /**
         * Updates Germanized privacy page option as soon as WP option changes to keep the pages in sync.
         *
         * @param $new_value
         * @param $old_value
         */
        public function pre_update_wp_privacy_option_page($new_value, $old_value)
        {
        }
        public function send_paid_for_order_notification($order)
        {
        }
        public function resend_order_confirmation($order)
        {
        }
        public function order_actions($actions)
        {
        }
        public function status_tab()
        {
        }
        public function set_gzd_status_tab($tabs)
        {
        }
        /**
         * @param WC_Order $order
         */
        public function show_checkbox_status($order)
        {
        }
        public function set_addon($products, $section_id)
        {
        }
        public function status_page()
        {
        }
        public function add_scripts()
        {
        }
        /**
         * @param string $post_type
         * @param WP_Post $post
         *
         * @return void
         */
        public function add_legal_page_metabox($post_type, $post)
        {
        }
        public function init_legal_page_metabox($post)
        {
        }
        /**
         * @param string $post_type
         * @param WP_Post $post
         *
         * @return void
         */
        public function register_product_meta_boxes($post_type, $post)
        {
        }
        public function save_legal_page_content($post_id, $post, $update)
        {
        }
        public function init_product_mini_desc($post)
        {
        }
        public function init_product_defect_description($post)
        {
        }
        protected function check_language_install()
        {
        }
        protected function check_text_options_deletion()
        {
        }
        public function get_complaints_shortcode_pages()
        {
        }
        public function check_resend_activation_email()
        {
        }
        protected function check_complaints_shortcode_append()
        {
        }
        public function is_complaints_shortcode_inserted($page_id)
        {
        }
        public function insert_complaints_shortcode($page_id)
        {
        }
        protected function check_encryption_key_insert()
        {
        }
        protected function check_disable_notices()
        {
        }
        public function disable_small_business_options()
        {
        }
        public function enable_small_business_options()
        {
        }
        protected function check_insert_vat_rates()
        {
        }
        public function get_shipping_method_instances()
        {
        }
        public function get_shipping_method_instances_options()
        {
        }
        public function get_payment_gateway_options()
        {
        }
        public function remove_setting($settings, $id)
        {
        }
        public function insert_setting_after($settings, $id, $insert = array(), $type = '')
        {
        }
    }
    /**
     * Adds Notices after Install / Update to Admin
     *
     * @class        WC_GZD_Admin_Notices
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Admin_Notices
    {
        /**
         * Single instance current class
         *
         * @var object
         */
        protected static $_instance = \null;
        protected $notes = \null;
        /**
         * Ensures that only one instance of this class is loaded or can be loaded.
         *
         * @static
         */
        public static function instance()
        {
        }
        protected function __construct()
        {
        }
        /**
         * Inform users of possible compatibility conflicts. Append a notice in case of detecting an incompatibility.
         *
         * @see https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/includes/admin/helper/class-wc-helper-updater.php#L25
         *
         * @param $data
         *
         * @return mixed
         */
        public function pro_incompatibility_plain_update_message($data)
        {
        }
        protected function is_next_update_compatible_with_pro($new_version)
        {
        }
        public function pro_incompatibility_notice($data, $plugin)
        {
        }
        protected function get_pro_incompatible_message($plain = \false)
        {
        }
        public function enable_notices()
        {
        }
        /**
         * @return WC_GZD_Admin_Note[]
         */
        public function get_notes()
        {
        }
        public function get_woo_note($id = '')
        {
        }
        /**
         * @param $name
         *
         * @return bool|WC_GZD_Admin_Note
         */
        public function get_note($name)
        {
        }
        /**
         * Add notices + styles if needed.
         */
        public function add_notices()
        {
        }
        public function activate_legal_news_note()
        {
        }
        public function remove_theme_notice_hide()
        {
        }
        public function check_notice_hide()
        {
        }
        public function is_theme_ready()
        {
        }
        public function is_theme_supported_by_pro()
        {
        }
        /**
         * Checks if current theme is woocommerce germanized compatible
         *
         * @return boolean
         */
        public function is_theme_compatible()
        {
        }
    }
    /**
     * The Storefront NUX Admin class
     */
    class WC_GZD_Admin_Setup_Wizard
    {
        /**
         * Setup class.
         *
         * @since 2.2.0
         */
        public function __construct()
        {
        }
        public function load()
        {
        }
        public function initialize()
        {
        }
        protected function uasort_callback($step1, $step2)
        {
        }
        protected function get_settings($step = '')
        {
        }
        /**
         * Add admin menus/screens.
         */
        public function admin_menus()
        {
        }
        /**
         * Register/enqueue scripts and styles for the Setup Wizard.
         *
         * Hooked onto 'admin_enqueue_scripts'.
         */
        public function enqueue_scripts()
        {
        }
        public function get_error_message($step = \false)
        {
        }
        /**
         * Show the setup wizard.
         */
        public function setup_wizard()
        {
        }
        public function get_step($key = \false)
        {
        }
        public function get_step_url($key)
        {
        }
        public function get_next_step()
        {
        }
        protected function header()
        {
        }
        protected function steps()
        {
        }
        protected function content()
        {
        }
        protected function footer()
        {
        }
        public function save()
        {
        }
        public function wc_gzd_setup_provider_save()
        {
        }
        public function wc_gzd_setup_encrypt_save()
        {
        }
        public function wc_gzd_setup_germanize_save()
        {
        }
        public function wc_gzd_setup_settings_save()
        {
        }
    }
    /**
     * Adds Settings Interface to WooCommerce Settings Tabs
     *
     * @class        WC_GZD_Settings_Germanized
     * @version        1.0.0
     * @author        Vendidero
     */
    abstract class WC_GZD_Settings_Tab extends \WC_Settings_Page
    {
        public function __construct()
        {
        }
        public function notice_on_activate()
        {
        }
        public function get_current_section()
        {
        }
        public function needs_install()
        {
        }
        public function get_extension_name()
        {
        }
        protected function get_pro_content_html()
        {
        }
        public function get_section_title($section = '')
        {
        }
        public function header()
        {
        }
        public function get_help_link()
        {
        }
        public function has_help_link()
        {
        }
        public function is_pro()
        {
        }
        protected function output_description()
        {
        }
        protected function get_additional_breadcrumb_items($breadcrumb)
        {
        }
        /**
         * Output sections.
         */
        public function output_sections()
        {
        }
        protected function section_is_pro($section_id)
        {
        }
        protected function get_section_url($section_id)
        {
        }
        protected function get_breadcrumb()
        {
        }
        public function get_description()
        {
        }
        protected function get_breadcrumb_label($label)
        {
        }
        protected function get_section_description($section)
        {
        }
        public function supports_disabling()
        {
        }
        public function get_settings_for_section_core($section_id)
        {
        }
        public function get_settings($section_id = '')
        {
        }
        public abstract function get_tab_settings($current_section = '');
        public function get_sidebar($current_section = '')
        {
        }
        public function has_tutorial()
        {
        }
        public function get_pointers()
        {
        }
        protected function is_saveable()
        {
        }
        public function hide_from_main_panel()
        {
        }
        public function output()
        {
        }
        public function is_enabled()
        {
        }
        public function disable()
        {
        }
        public function enable()
        {
        }
        protected function get_enable_option_name()
        {
        }
        public function get_link()
        {
        }
        public abstract function get_name();
        protected function before_save($settings, $current_section = '')
        {
        }
        protected function after_save($settings, $current_section = '')
        {
        }
        public function save()
        {
        }
    }
    /**
     * Adds Germanized Shopmark settings.
     *
     * @class        WC_GZD_Settings_Tab_Shopmarks
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Shopmarks extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_help_link()
        {
        }
        public function get_name()
        {
        }
        public function get_sections()
        {
        }
        protected function section_is_pro($section_id)
        {
        }
        public function get_pointers()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        public function get_section_description($section)
        {
        }
        protected function get_product_widget_settings()
        {
        }
        protected function get_email_settings()
        {
        }
        protected function get_display_settings($location)
        {
        }
        protected function get_general_settings()
        {
        }
        protected function get_digital_type_options()
        {
        }
        protected function get_delivery_time_settings()
        {
        }
        protected function is_saveable()
        {
        }
        protected function get_food_settings()
        {
        }
        protected function get_unit_price_settings()
        {
        }
        protected function get_price_label_settings()
        {
        }
    }
    /**
     * Adds Germanized Shipments settings.
     *
     * @class        WC_GZD_Settings_Tab_Shipments
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Trusted_Shops extends \WC_GZD_Settings_Tab
    {
        public function get_extension_name()
        {
        }
        public function needs_install()
        {
        }
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function get_help_link()
        {
        }
        public function get_sections()
        {
        }
        public function output()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        public function is_enabled()
        {
        }
    }
    /**
     * Adds Germanized Tax settings.
     *
     * @class        WC_GZD_Settings_Tab_Taxes
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Multistep_Checkout extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function is_pro()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        public function is_enabled()
        {
        }
    }
    /**
     * Adds Settings Interface to WooCommerce Settings Tabs
     *
     * @class        WC_GZD_Settings_Germanized
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Germanized extends \WC_Settings_Page
    {
        protected $id = 'germanized';
        protected $tabs = \null;
        public function __construct()
        {
        }
        public function add_wc_admin_breadcrumbs($is_connected, $current_page)
        {
        }
        public function filter_wc_admin_breadcrumbs($breadcrumbs)
        {
        }
        public function get_settings_for_section_core($section_id)
        {
        }
        public function get_settings($section_id = '')
        {
        }
        public function admin_styles()
        {
        }
        public function admin_scripts()
        {
        }
        protected function is_active()
        {
        }
        public function add_body_classes($classes)
        {
        }
        public function get_tabs()
        {
        }
        /**
         * @param $name
         *
         * @return bool|WC_GZD_Settings_Tab
         */
        public function get_tab_by_name($name)
        {
        }
        public function output()
        {
        }
    }
    /**
     * Adds Germanized Shipments settings.
     *
     * @class        WC_GZD_Settings_Tab_Shipments
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Shipping_Provider extends \WC_GZD_Settings_Tab
    {
        protected function get_available_providers()
        {
        }
        public function get_description()
        {
        }
        protected function get_section_url($section)
        {
        }
        protected function get_breadcrumb()
        {
        }
        public function get_pointers()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function get_help_link()
        {
        }
        public function get_sections()
        {
        }
        public function save()
        {
        }
        public function output()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
    }
    /**
     * Adds Germanized Tax settings.
     *
     * @class        WC_GZD_Settings_Tab_Taxes
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Taxes extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function get_sections()
        {
        }
        public function get_help_link()
        {
        }
        protected function get_vat_settings()
        {
        }
        protected function get_vat_id_settings()
        {
        }
        protected function get_additional_costs_settings()
        {
        }
        protected function get_differential_taxation_settings()
        {
        }
        protected function get_section_url($section_id)
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
    }
    /**
     * Adds Germanized Tax settings.
     *
     * @class        WC_GZD_Settings_Tab_Taxes
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Revocation_Generator extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function is_pro()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        public function is_enabled()
        {
        }
    }
    /**
     * Adds Germanized Email settings.
     *
     * @class        WC_GZD_Settings_Tab_Emails
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Emails extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function get_sections()
        {
        }
        protected function section_is_pro($section_id)
        {
        }
        public function get_pointers()
        {
        }
        public function get_section_description($section)
        {
        }
        protected function is_saveable()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        protected function get_attachment_pdf_settings()
        {
        }
        protected function get_attachment_settings()
        {
        }
        protected function get_visibility_settings()
        {
        }
        protected function get_default_email_ids_by_attachment_type($type)
        {
        }
        protected function get_general_settings()
        {
        }
    }
    /**
     * Adds Germanized Tax settings.
     *
     * @class        WC_GZD_Settings_Tab_Taxes
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Invoices extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function is_pro()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        protected function get_pro_content_html()
        {
        }
        public function is_enabled()
        {
        }
    }
    /**
     * Adds Germanized Tax settings.
     *
     * @class        WC_GZD_Settings_Tab_Taxes
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Terms_Generator extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function is_pro()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        public function is_enabled()
        {
        }
    }
    /**
     * Adds Germanized Shipments settings.
     *
     * @class        WC_GZD_Settings_Tab_Shipments
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Shipments extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function get_help_link()
        {
        }
        public function get_sections()
        {
        }
        protected function get_additional_breadcrumb_items($breadcrumb)
        {
        }
        protected function get_breadcrumb_label($label)
        {
        }
        protected function after_save($settings, $current_section = '')
        {
        }
        public function get_pointers()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        protected function get_auto_packing_settings()
        {
        }
    }
    /**
     * Adds Germanized Shipments settings.
     *
     * @class        WC_GZD_Settings_Tab_Shipments
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_OSS extends \WC_GZD_Settings_Tab
    {
        public function get_extension_name()
        {
        }
        public function needs_install()
        {
        }
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function get_help_link()
        {
        }
        public function get_sections()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        public function is_enabled()
        {
        }
    }
    /**
     * Adds Germanized Checkboxes settings.
     *
     * @class        WC_GZD_Settings_Tab_Checkboxes
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Checkboxes extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function get_pointers()
        {
        }
        public function get_current_section()
        {
        }
        public function get_current_checkbox_id()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        protected function get_section_description($checkbox_id)
        {
        }
        public function get_section_title($checkbox_id = '')
        {
        }
        protected function get_breadcrumb()
        {
        }
        /**
         * Handles output of the shipping zones page in admin.
         */
        public function output()
        {
        }
        protected function edit_screen($checkbox_id)
        {
        }
        protected function screen()
        {
        }
    }
    /**
     * Adds Germanized Tax settings.
     *
     * @class        WC_GZD_Settings_Tab_Taxes
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Contract extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function is_pro()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        public function is_enabled()
        {
        }
    }
    /**
     * Adds Germanized Tax settings.
     *
     * @class        WC_GZD_Settings_Tab_Taxes
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_DOI extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function notice_on_activate()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        protected function get_enable_option_name()
        {
        }
        public function supports_disabling()
        {
        }
    }
    /**
     * Adds Germanized Tax settings.
     *
     * @class        WC_GZD_Settings_Tab_Taxes
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_General extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function get_sections()
        {
        }
        public function get_section_description($section)
        {
        }
        protected function get_legal_page_settings()
        {
        }
        protected function get_dispute_resolution_settings()
        {
        }
        protected function get_small_business_settings()
        {
        }
        protected function get_checkout_settings()
        {
        }
        protected function get_shop_settings()
        {
        }
        protected function get_photovoltaic_systems_settings()
        {
        }
        public function get_pointers()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
        protected function before_save($settings, $current_section = '')
        {
        }
    }
    /**
     * Adds Germanized Button Solution settings.
     *
     * @class        WC_GZD_Settings_Tab_Emails
     * @version        3.0.0
     * @author        Vendidero
     */
    class WC_GZD_Settings_Tab_Button_Solution extends \WC_GZD_Settings_Tab
    {
        public function get_description()
        {
        }
        public function get_label()
        {
        }
        public function get_name()
        {
        }
        public function get_help_link()
        {
        }
        public function get_pointers()
        {
        }
        public function get_tab_settings($current_section = '')
        {
        }
    }
    /**
     * WC_Admin_Pointers Class.
     */
    class WC_GZD_Settings_Pointers
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        protected function get_settings()
        {
        }
        /**
         * Setup pointers for screen.
         */
        public function setup_pointers_for_screen()
        {
        }
        /**
         * Pointers for creating a product.
         */
        public function general_tutorial()
        {
        }
        /**
         * Enqueue pointers and add script to page.
         *
         * @param array $pointers
         */
        public function enqueue_pointers($pointers)
        {
        }
    }
    /**
     * Adds unit price and delivery time to variable Product metabox.
     *
     * @class       WC_Germanized_Meta_Box_Product_Data_Variable
     * @author        Vendidero
     * @version     1.0.0
     */
    class WC_Germanized_Meta_Box_Product_Data_Variable
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public static function bulk_save($bulk_action, $data, $product_id, $variations)
        {
        }
        protected static function bulk_action_variable_status_toggle($variations, $type = 'service')
        {
        }
        protected static function bulk_action_variable_delivery_time($variations, $data)
        {
        }
        protected static function bulk_action_variable_unit_product($variations, $data)
        {
        }
        protected static function bulk_action_variable_unit_auto($variations, $data)
        {
        }
        public static function bulk_edit()
        {
        }
        public static function product_types($loop, $variation_data, $variation)
        {
        }
        protected static function get_delivery_time_wrapper_classes()
        {
        }
        public static function output($loop, $variation_data, $variation)
        {
        }
        public static function save($variation_id, $i)
        {
        }
    }
    /**
     * WC_Germanized_Meta_Box_Product_Data
     */
    class WC_Germanized_Meta_Box_Product_Data
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public static function food_tab()
        {
        }
        public static function register_product_tab($tabs)
        {
        }
        /**
         * @param WC_Product $product
         *
         * @return void
         */
        public static function quick_edit_save($product)
        {
        }
        public static function quick_edit_data($post, $post_type_object)
        {
        }
        public static function quick_edit()
        {
        }
        public static function bulk_save($product)
        {
        }
        public static function bulk_edit()
        {
        }
        /**
         * @param WC_Product $product
         */
        public static function update_terms($product)
        {
        }
        /**
         * @param WC_Product $duplicate
         * @param WC_Product $product
         */
        public static function update_before_duplicate($duplicate, $product)
        {
        }
        /**
         * @param WC_Product $product
         */
        public static function before_save($product)
        {
        }
        public static function product_types($types)
        {
        }
        public static function output()
        {
        }
        public static function output_delivery_time_select2($args = array())
        {
        }
        public static function output_shipping()
        {
        }
        public static function output_warranty_upload()
        {
        }
        public static function get_available_delivery_time_countries()
        {
        }
        public static function is_available_delivery_time_country($country)
        {
        }
        public static function get_label_by_delivery_time_country($country)
        {
        }
        /**
         * @param WC_Product $product_object
         */
        public static function output_delivery_time_by_country($product_object)
        {
        }
        public static function get_fields()
        {
        }
        protected static function get_field_sanitization_type($field)
        {
        }
        /**
         * Pre-sanitize field data.
         *
         * @param $field
         * @param mixed $value Possibly slashed data.
         *
         * @return mixed
         */
        public static function get_sanitized_field_value($field, $value = \null)
        {
        }
        public static function save($product)
        {
        }
        /**
         * @param WC_Product $product
         *
         * @return array
         */
        public static function get_default_product_data($product)
        {
        }
        public static function save_unit_price(&$product, $data, $is_variation = \false)
        {
        }
        /**
         * @param WC_GZD_Product $gzd_product
         * @param $data
         *
         * @TODO need to check for REST API compatibility in case country-specific delivery times are missing during the request
         */
        protected static function save_delivery_times($gzd_product, $data)
        {
        }
        /**
         * @param WC_Product $product
         * @param $data
         * @param false $is_variation
         */
        public static function save_product_data(&$product, $data, $is_variation = \false)
        {
        }
    }
    // Exit if accessed directly
    class WC_GZD_Admin_Legal_Checkboxes
    {
        /**
         * Single instance of WooCommerce Germanized Main Class
         *
         * @var object
         */
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function additional_age_verification_fields($fields, $checkbox)
        {
        }
        public function additional_service_fields($fields, $checkbox)
        {
        }
        public function additional_download_fields($fields, $checkbox)
        {
        }
        public function additional_parcel_delivery_fields($fields, $checkbox)
        {
        }
        public function disable_include($enable, $current_section)
        {
        }
    }
    class WC_GZD_Admin_Deposit_Types
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        /**
         * Save category fields
         *
         * @param mixed $term_id Term ID being saved.
         * @param mixed $tt_id Term taxonomy ID.
         * @param string $taxonomy Taxonomy slug.
         */
        public function save_fields($term_id, $tt_id = '', $taxonomy = '')
        {
        }
        public function add_fields()
        {
        }
        protected function get_deposit_packaging_types()
        {
        }
        /**
         * Edit category thumbnail field.
         *
         * @param mixed $term Term (category) being edited.
         */
        public function edit_fields($term)
        {
        }
    }
    /**
     * WC_Admin_GZD_Status Class
     */
    class WC_GZD_Admin_Status extends \WC_Admin_Status
    {
        public static $tax_tables = array('woocommerce_tax_rates', 'woocommerce_tax_rate_locations');
        public static function output()
        {
        }
        public static function status_default($status)
        {
        }
        public static function get_legal_pages()
        {
        }
        public static function tax_tables_exist()
        {
        }
        public static function get_missing_tax_tables()
        {
        }
    }
    class WC_GZD_Admin_Provider_GLS extends \Vendidero\Germanized\Shipments\ShippingProvider\Simple
    {
        public function get_edit_link($section = '')
        {
        }
        public function get_name($context = 'view')
        {
        }
        public function get_description($context = 'view')
        {
        }
        public function get_title($context = 'view')
        {
        }
        public function is_manual_integration()
        {
        }
        public function is_pro()
        {
        }
        public function is_activated()
        {
        }
        public function activate()
        {
        }
        public function get_help_link()
        {
        }
        public function save()
        {
        }
    }
    // Exit if accessed directly
    /**
     * Add Welcome Screen and Feature Overview
     *
     * @class        WC_GZD_Admin_Welcome
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Admin_Welcome
    {
        /**
         * __construct function.
         *
         * @access public
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add admin menus/screens
         *
         * @access public
         * @return void
         */
        public function admin_menus()
        {
        }
        /**
         * admin_css function.
         *
         * @access public
         * @return void
         */
        public function admin_css()
        {
        }
        /**
         * Add styles just for this page, and remove dashboard page links.
         *
         * @access public
         * @return void
         */
        public function admin_head()
        {
        }
        /**
         * Output the about screen.
         */
        public function about_screen()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    abstract class WC_GZD_Admin_Note
    {
        public abstract function get_name();
        protected function get_name_prefixed()
        {
        }
        public function exists()
        {
        }
        public function get_action_url($action)
        {
        }
        protected function has_nonce_action()
        {
        }
        protected function get_note()
        {
        }
        protected function is_pro()
        {
        }
        public function enable_notices()
        {
        }
        public function is_disabled()
        {
        }
        public abstract function get_title();
        public abstract function get_content();
        public function get_type()
        {
        }
        public function is_dismissable()
        {
        }
        public function is_deactivatable()
        {
        }
        protected function get_icon_type()
        {
        }
        public function has_actions()
        {
        }
        protected function use_wp_notice_api()
        {
        }
        protected function add()
        {
        }
        protected function convert_content($content)
        {
        }
        public function get_dismiss_text()
        {
        }
        public function get_deactivate_text()
        {
        }
        public function add_fallback()
        {
        }
        public function get_dismiss_url()
        {
        }
        public function get_deactivate_url()
        {
        }
        protected function get_dismiss_option_name()
        {
        }
        protected function get_deactivate_option_name()
        {
        }
        public function get_actions()
        {
        }
        protected function get_days_until_show()
        {
        }
        public function dismiss($and_note = \true)
        {
        }
        public function delete_note()
        {
        }
        public function get_fallback_notice_type()
        {
        }
        public function deactivate($and_note = \true)
        {
        }
        public function reset()
        {
        }
        public function queue()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    class WC_GZD_Admin_Note_Review extends \WC_GZD_Admin_Note
    {
        public function is_disabled()
        {
        }
        public function get_name()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        public function is_deactivatable()
        {
        }
        public function get_deactivate_text()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    class WC_GZD_Admin_Note_Theme_Supported extends \WC_GZD_Admin_Note
    {
        protected $current_theme = \null;
        public function is_disabled()
        {
        }
        protected function get_current_theme()
        {
        }
        public function get_name()
        {
        }
        public function is_pro()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        public function get_actions()
        {
        }
    }
    class WC_GZD_Admin_Note_Legal_News extends \WC_GZD_Admin_Note
    {
        public function get_name()
        {
        }
        public function is_disabled()
        {
        }
        public function dismiss($and_note = \true)
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * WC_GZD_Admin_Note_TS_Install.
     */
    class WC_GZD_Admin_Note_TS_Install extends \WC_GZD_Admin_Note
    {
        public function get_fallback_notice_type()
        {
        }
        public function is_disabled()
        {
        }
        public function get_name()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        protected function has_nonce_action()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    class WC_GZD_Admin_Note_Template_Outdated extends \WC_GZD_Admin_Note
    {
        protected $templates = \null;
        protected $current_theme = \null;
        protected function get_template_version_check_result()
        {
        }
        public function is_disabled()
        {
        }
        protected function get_current_theme()
        {
        }
        public function get_name()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    class WC_GZD_Admin_Note_Encryption extends \WC_GZD_Admin_Note
    {
        public function get_fallback_notice_type()
        {
        }
        public function is_disabled()
        {
        }
        public function get_name()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        protected function has_nonce_action()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    class WC_GZD_Admin_Note_Base_Country extends \WC_GZD_Admin_Note
    {
        public function is_disabled()
        {
        }
        public function get_name()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    class WC_GZD_Admin_Note_DHL_Importer extends \WC_GZD_Admin_Note
    {
        public function is_disabled()
        {
        }
        public function get_name()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        protected function has_nonce_action()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    class WC_GZD_Admin_Note_Shipping_Excl_Tax extends \WC_GZD_Admin_Note
    {
        public function is_disabled()
        {
        }
        public function dismiss($and_note = \true)
        {
        }
        public function get_name()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * WC_GZD_Admin_Note_Virtual_Vat.
     */
    class WC_GZD_Admin_Note_Virtual_Vat extends \WC_GZD_Admin_Note
    {
        public function is_disabled()
        {
        }
        public function get_name()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    class WC_GZD_Admin_Note_Internetmarke_Importer extends \WC_GZD_Admin_Note
    {
        public function is_disabled()
        {
        }
        public function get_name()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        protected function has_nonce_action()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    class WC_GZD_Admin_Note_Pro extends \WC_GZD_Admin_Note
    {
        public function get_name()
        {
        }
        public function is_pro()
        {
        }
        public function get_days_until_show()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * WC_GZD_Admin_Note_OSS_Install.
     */
    class WC_GZD_Admin_Note_OSS_Install extends \WC_GZD_Admin_Note
    {
        public function get_fallback_notice_type()
        {
        }
        public function is_disabled()
        {
        }
        public function get_name()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        protected function has_nonce_action()
        {
        }
        public function get_actions()
        {
        }
    }
    /**
     * WC_Admin_Notes_Welcome_Message.
     */
    class WC_GZD_Admin_Note_Update extends \WC_GZD_Admin_Note
    {
        public function get_name()
        {
        }
        public function is_disabled()
        {
        }
        public function get_title()
        {
        }
        public function get_content()
        {
        }
        protected function has_nonce_action()
        {
        }
        public function get_actions()
        {
        }
    }
    // Exit if accessed directly
    class WC_GZD_Admin_Product_Categories
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        /**
         * Save category fields
         *
         * @param mixed $term_id Term ID being saved.
         * @param mixed $tt_id Term taxonomy ID.
         * @param string $taxonomy Taxonomy slug.
         */
        public function save_category_fields($term_id, $tt_id = '', $taxonomy = '')
        {
        }
        /**
         * Category thumbnail fields.
         */
        public function add_category_fields()
        {
        }
        /**
         * Edit category thumbnail field.
         *
         * @param mixed $term Term (category) being edited.
         */
        public function edit_category_fields($term)
        {
        }
    }
    class WC_GZD_Secret_Box_Helper
    {
        public static function get_encryption_key_notice($encryption_type = '', $explanation = '')
        {
        }
        /**
         * @return string|WP_Error
         */
        public static function get_random_encryption_key()
        {
        }
        public static function get_encryption_key_constant($encryption_type = '')
        {
        }
        /**
         * @param string $salt
         * @param string $encryption_type
         *
         * @return array|WP_Error
         */
        public static function get_encryption_key_data($salt = '', $encryption_type = '', $force_fallback = \false)
        {
        }
        /**
         * The sodium_compat does not support zeroing memory and throws an exception:
         * https://github.com/paragonie/sodium_compat/blob/master/src/Compat.php#L3301
         *
         * @param $pw
         */
        protected static function memzero($pw)
        {
        }
        public static function has_valid_encryption_key($encryption_type = '')
        {
        }
        /**
         * @param $message
         * @param string $encryption_type
         *
         * @return string|WP_Error
         */
        public static function encrypt($message, $encryption_type = '')
        {
        }
        /**
         * Decrypts a message of a certain type.
         *
         * @param $cipher
         * @param string $encryption_type
         *
         * @return WP_Error|mixed
         */
        public static function decrypt($cipher, $encryption_type = '')
        {
        }
        /**
         * Checks whether this installation supports auto-inserting the encryption key to the wp-config.php file.
         *
         * @return bool
         */
        public static function supports_auto_insert()
        {
        }
        /**
         * Try to insert the encryption key (e.g. for securely storing API credentials) in the wp-config.php file.
         *
         * @param $encryption_type
         *
         * @return bool
         */
        public static function maybe_insert_missing_key($encryption_type = '')
        {
        }
        /**
         * @param \WP_Error $error
         */
        protected static function log_error($error)
        {
        }
        public static function has_errors()
        {
        }
    }
    /**
     * The
     *
     * @class WC_GZD_Compatibility
     * @version  1.0.0
     * @author   Vendidero
     */
    abstract class WC_GZD_Compatibility
    {
        public function __construct()
        {
        }
        public function early_execution()
        {
        }
        public function after_plugins_loaded()
        {
        }
        protected static function parse_version_data($version_data)
        {
        }
        public static function is_applicable()
        {
        }
        public static function is_activated()
        {
        }
        public static function is_plugin()
        {
        }
        public static function is_supported()
        {
        }
        public static abstract function get_name();
        public static abstract function get_path();
        public static function get_version_data()
        {
        }
        public abstract function load();
    }
    class WC_GZD_Compatibility_Elementor_Pro extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function after_plugins_loaded()
        {
        }
        public static function disable_ajax_callback()
        {
        }
        public function load()
        {
        }
        public function init_widgets($widgets_manager)
        {
        }
    }
    /**
     * WC GZD Role Based Pricing Compatibility Base Helper
     *
     * @class        WC_GZD_Compatibility_Woocommerce_Role_Based_Pricing
     * @category    Class
     * @author        vendidero
     */
    abstract class WC_GZD_Compatibility_Woocommerce_Role_Based_Pricing extends \WC_GZD_Compatibility
    {
        protected function hooks()
        {
        }
        public function refresh_on_load($params)
        {
        }
        public function adjust_cart_hooks()
        {
        }
        public function load()
        {
        }
        public function set_unit_price_product_filter($html, $product)
        {
        }
        public function unit_price_order_item($price, $gzd_product, $item, $order)
        {
        }
        public function set_unit_price_filter()
        {
        }
        /**
         * @param WC_GZD_Product $product
         */
        public function calculate_unit_price($product)
        {
        }
        public function variable_unit_prices_hash($price_hash)
        {
        }
    }
    /**
     * Addify Role Based Pricing Compatibility
     *
     * Specific configuration for Addify Role Based Pricing Compatibility
     * https://woocommerce.com/products/role-based-pricing-for-woocommerce/
     *
     */
    class WC_GZD_Compatibility_Addify_Role_Based_Pricing extends \WC_GZD_Compatibility_Woocommerce_Role_Based_Pricing
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
    }
    /**
     * Product Addons Helper
     *
     * @class    WC_GZD_Compatibility_WooCommerce_Product_Addons
     * @category Class
     * @author   vendidero
     */
    class WC_GZD_Compatibility_WooCommerce_Product_Addons extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        public function shopmarks($post_id)
        {
        }
    }
    /**
     * WPML Helper
     *
     * Specific configuration for WPML
     *
     * @class        WC_GZD_WPML_Helper
     * @category    Class
     * @author        vendidero
     */
    class WC_GZD_Compatibility_WooCommerce_Subscriptions extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public static function get_version_data()
        {
        }
        public function load()
        {
        }
        public function replace_email_titles($replace_title, $textdomain)
        {
        }
        public function stop_forced_redirect($redirect, $order)
        {
        }
        public function exclude_meta($meta)
        {
        }
        public function adjust_subscription_rounded_shipping($total)
        {
        }
        public function enable_unit_prices($types)
        {
        }
        public function product_classname($classname, $type)
        {
        }
        public function set_tax_notice($price, $cart)
        {
        }
    }
    /**
     * WPML Helper
     *
     * Specific configuration for WPML
     *
     * @class        WC_GZD_WPML_Helper
     * @category    Class
     * @author        vendidero
     */
    class WC_GZD_Compatibility_WooCommerce_Product_Bundles extends \WC_GZD_Compatibility
    {
        public static $variable_has_filtered = \false;
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        public function bundle_revocation_exempt($is_exempt, $product, $type, $item)
        {
        }
        /**
         * Make sure to load the Germanized variation script in case a variable bundled item is included.
         *
         * @param $templates
         *
         * @return mixed
         */
        public function register_template($templates)
        {
        }
        public function register_script($suffix, $frontend_script_path, $assets_path)
        {
        }
        public function before_bundled_variation_options($options, $gzd_product, $parent)
        {
        }
        public function bundled_variation($product_id, $bundled_item)
        {
        }
        /**
         * Prevent bundle price HTML infinite loops
         *
         * @see WC_GZD_Product::is_doing_price_html_action()
         *
         * @param $is_doing_action
         *
         * @return bool|mixed
         */
        public function is_doing_price_html_action($is_doing_action)
        {
        }
        public function output_bundle_shopmarks()
        {
        }
        /**
         * @param \WC_Bundled_Item    $bundled_item
         * @param \WC_Product_Bundle  $bundle
         */
        public function register_item_price_filters($bundled_item, $bundle)
        {
        }
        protected function replace_p_tags($html)
        {
        }
        public function add_price_suffixes($price, $org_price, $org_product)
        {
        }
        /**
         * @param \WC_Bundled_Item    $bundled_item
         * @param \WC_Product_Bundle  $bundle
         */
        public function unregister_item_price_filters($bundled_item, $bundle)
        {
        }
        public function enable_unit_prices($types)
        {
        }
        /**
         * If the bundled product is priced individually WC Product Bundles marks the item as virtual.
         * In that case we are returning the original product to be matched agains Germanized tax share check.
         *
         * @param $product
         * @param $item
         * @param $item_key
         * @param $type
         *
         * @return mixed
         */
        public function switch_bundle_tax_share_product($product, $item, $item_key, $type)
        {
        }
    }
    /**
     * Compatibility script for eRecht24 legal texts for WordPress
     *
     * @class        WC_GZD_Compatibility_eRecht24
     * @category     Class
     * @author       vendidero
     */
    class WC_GZD_Compatibility_ERecht24 extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        public function register_whitelisted_shortcodes($shortcodes)
        {
        }
    }
    /**
     * Compatibility script for https://wordpress.org/plugins/flexible-checkout-fields/
     *
     * @class        WC_GZD_Compatibility_Flexible_Checkout_Fields
     * @category     Class
     * @author       vendidero
     */
    class WC_GZD_Compatibility_Flexible_Checkout_Fields extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        public function filter_customer_title($meta_value, $field)
        {
        }
    }
    /**
     * Woo Discount Rules
     *
     * Specific configuration for Woo Discount Rules
     * https://wordpress.org/plugins/woo-discount-rules/
     *
     * This plugin should be configured to not show discount on product pages as
     * this plugin does only adjust the visible price through WC price_html filters which does
     * not change the actual product price. For that reason Germanized is not able to adjust the
     * unit price accordingly on the single product page.
     */
    class WC_GZD_Compatibility_Woo_Discount_Rules extends \WC_GZD_Compatibility_Woocommerce_Role_Based_Pricing
    {
        protected function hooks()
        {
        }
        public function register_simple_price_target($target)
        {
        }
        public function register_variable_price_target($target)
        {
        }
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
    }
    /**
     * Compatibility script for https://wordpress.org/plugins/cartflows/
     *
     * @class        WC_GZD_Compatibility_Cartflows
     * @category     Class
     * @author       vendidero
     */
    class WC_GZD_Compatibility_Cartflows extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        protected function enable_cartflows_support()
        {
        }
    }
    /**
     * Woo Gateway PayPal Express Checkout Helper
     *
     * Specific compatibility for PayPal Express
     *
     * @class        WC_GZD_Compatibility_Woocommerce_Gateway_Paypal_Express_Checkout
     * @category    Class
     * @author        vendidero
     */
    class WC_GZD_Compatibility_WooCommerce_Gateway_Paypal_Express_Checkout extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        /**
         * Problem: Smart Button is bound to review_order_after_submit which gets executed earlier than GZD submit button.
         * Leads to JS problems while rendering the PayPal button. That's why we need to move the functionality to the GZD hook.
         *
         * @param $gateways
         *
         * @return mixed
         */
        public function payment_gateways($gateways)
        {
        }
    }
    /**
     * WooCommerce Composite Products
     *
     * Specific configuration for WooCommerce Composite Products
     * https://woocommerce.com/products/composite-products/
     *
     * @author vendidero
     */
    class WC_GZD_Compatibility_WooCommerce_Composite_Products extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        public function output_composite_shopmarks()
        {
        }
    }
    /**
     *
     * Ensure compatibility between WooCommerce Germanized and WooCommerce Memberships
     *
     * @class       WC_GZD_Compatibility_WooCommerce_Memberships
     * @category    Class
     * @author      René Haubner, retsch Internetagentur, www.retsch-it.de
     */
    class WC_GZD_Compatibility_WooCommerce_Memberships extends \WC_GZD_Compatibility_Woocommerce_Role_Based_Pricing
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function calculate_unit_price($product)
        {
        }
    }
    /**
     * WPML Helper
     *
     * Specific configuration for WPML
     *
     * @class        WC_GZD_WPML_Helper
     * @category    Class
     * @author        vendidero
     */
    class WC_GZD_Compatibility_WPML extends \WC_GZD_Compatibility
    {
        protected $dynamic_unit_pricing = \null;
        protected $new_language = \false;
        protected $original_variation_id = \false;
        protected $original_product_id = \false;
        protected static $removed_get_term_filter = \false;
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public static function is_activated()
        {
        }
        public function load()
        {
        }
        /**
         * Make sure to filter order items language in case order details or order confirmation is resent
         * during admin edit order requests.
         *
         * @param string $language
         * @param WC_Order $order
         *
         * @return string
         */
        public function maybe_filter_wpml_order_items_language($language, $order)
        {
        }
        /**
         * Maybe translate custom order item product data to make sure delivery time, cart description
         * is being stored in the actual user's language.
         *
         * @param WC_Order_Item_Product $item
         * @param WC_Order $order
         *
         * @return void
         */
        public function maybe_switch_order_meta_language($item, $order)
        {
        }
        /**
         * Maybe restore the language after updating item meta.
         *
         * @param WC_Order_Item_Product $item
         * @param WC_Order $order
         *
         * @return void
         */
        public function maybe_restore_order_meta_language($item, $order)
        {
        }
        public function filter_product_nutrient_value_term($term_id, $product, $context)
        {
        }
        public function filter_product_delivery_times($delivery_times, $gzd_product, $product, $context)
        {
        }
        public function filter_product_country_specific_delivery_times($delivery_time_countries, $gzd_product, $product, $context)
        {
        }
        public function filter_product_default_delivery_time($default_delivery_time, $gzd_product, $product, $context)
        {
        }
        /**
         * Switch current email to a certain language by reloading locale and triggering Woo WPML.
         *
         * @param $lang
         */
        public function switch_lang($lang)
        {
        }
        /**
         * Newer version of WPML do not automatically translate string options in admin requests.
         * Make sure these Germanized settings are translated during email sending and/or item meta updates.
         *
         * @return void
         */
        public function force_admin_option_translation()
        {
        }
        /**
         * Filters the Woo WPML email language based on a global variable.
         *
         * @param $lang
         */
        public function filter_email_lang($p_lang)
        {
        }
        /**
         * Setup email locale based on customer.
         *
         * @param WC_Email       $email
         * @param string|boolean $lang
         */
        public function setup_email_locale($email, $lang)
        {
        }
        protected function translate_email_setting($email_id, $option_name = 'heading')
        {
        }
        /**
         * Restore email locale after successfully sending the email
         */
        public function restore_email_locale()
        {
        }
        protected function get_emails()
        {
        }
        protected function get_email_options()
        {
        }
        public function register_email_options($options)
        {
        }
        public function filter_email_section_prefix($prefix, $email_option)
        {
        }
        /**
         * Reload default, WC and WC Germanized locale
         */
        public function reload_locale()
        {
        }
        public function before_show_product_unit_price($product)
        {
        }
        public function set_language_field()
        {
        }
        public function unhook_terms_clause()
        {
        }
        public function rehook_terms_clause()
        {
        }
        public function send_order_admin_confirmation($order_id)
        {
        }
        public function set_order_admin_confirmation($is_sent)
        {
        }
        public function unregister_order_confirmation_hooks()
        {
        }
        public function language_locale_filter($default)
        {
        }
        public function language_user_locale_filter($value, $user_id, $meta_key)
        {
        }
        public function set_language($lang, $set_default = \false)
        {
        }
        public function restore_language()
        {
        }
        public function filter_page_ids()
        {
        }
        public function translate_page($id)
        {
        }
    }
    /**
     * PolyLang Helper
     *
     * Specific configuration for PolyLang
     *
     * @class        WC_GZD_Compatibility_PolyLang
     * @category    Class
     * @author        vendidero
     */
    class WC_GZD_Compatibility_Woo_Poly_Integration extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function early_execution()
        {
        }
        public function load()
        {
        }
        public function unlock_fields($fields)
        {
        }
        public function get_pll_email_instance()
        {
        }
        public function set_pll_email_instance($instance)
        {
        }
        public function get_order_emails()
        {
        }
        public function get_emails()
        {
        }
        public function setup_emails()
        {
        }
        public function unload_textdomain()
        {
        }
        public function reload_textdomain()
        {
        }
        public function translate_emails($pll_mail_instance)
        {
        }
        public function translate_order_subject($subject, $object)
        {
        }
        public function translate_order_heading($heading, $object)
        {
        }
        public function register_emails($mails, $pll_mail_instance)
        {
        }
        public function translate_taxonomies_variations($from, $to, $from_variable, $to_variable)
        {
        }
        public function translate_taxonomies($post_id, $post, $translations)
        {
        }
        public function translate_product_taxonomies($original_post_id, $new_post_id, $lang, $current_lang = '')
        {
        }
        public function add_fields($metas)
        {
        }
        public function register_pages($pages)
        {
        }
    }
    /**
     * WooCommerce Dynamic Pricing & Discounts
     *
     * @see https://support.rightpress.net/hc/en-us/categories/200133263-WooCommerce-Dynamic-Pricing-Discounts
     */
    class WC_GZD_Compatibility_WC_Dynamic_Pricing_And_Discounts extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
    }
    /**
     * WPML Helper
     *
     * Specific configuration for WPML
     *
     * @class        WC_GZD_WPML_Helper
     * @category    Class
     * @author        vendidero
     */
    class WC_GZD_Compatibility_WooCommerce_Role_Based_Prices extends \WC_GZD_Compatibility_Woocommerce_Role_Based_Pricing
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
    }
    /**
     * ET Builder (e.g. Divi) compatibility
     *
     * Divi uses a custom hook-builder for WooCommerce (see Divi/includes/builder/feature/woocommerce-modules.php et_builder_wc_relocate_single_product_summary)
     * to dynamically relocate hooks (e.g. shopmarks) to the right place/widget in the builder.
     */
    class WC_GZD_Compatibility_ET_Builder extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function is_plugin()
        {
        }
        public static function is_applicable()
        {
        }
        public static function is_activated()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        protected function is_et_builder_single_product()
        {
        }
        protected function post_is_et_builder($post, $type = 'checkout')
        {
        }
        /**
         * Either use the global post object or the current Divi builder template post.
         *
         * @return WP_Post|null
         */
        protected function get_divi_builder_post()
        {
        }
        protected function is_et_builder_checkout()
        {
        }
    }
    /**
     * Compatibility script for https://de.wordpress.org/plugins/legal-texts-connector-it-recht-kanzlei/
     *
     * @class        WC_GZD_Compatibility_Legal_Texts_Connector_IT_Recht_Kanzlei
     * @category     Class
     * @author       vendidero
     */
    class WC_GZD_Compatibility_Legal_Texts_Connector_IT_Recht_Kanzlei extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        public function register_whitelisted_shortcodes($shortcodes)
        {
        }
    }
    /**
     * WooCommerce PayPal Payments Helper
     *
     * @see https://wordpress.org/plugins/woocommerce-paypal-payments/
     *
     * @class    WC_GZD_Compatibility_WooCommerce_PayPal_Payments
     * @category Class
     * @author   vendidero
     */
    class WC_GZD_Compatibility_WooCommerce_PayPal_Payments extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        public function after_plugins_loaded()
        {
        }
        public function move_paypal_payment_button($filter)
        {
        }
    }
    class WC_GZD_Compatibility_Elementor extends \WC_GZD_Compatibility
    {
        protected static $readd_elementor_filter = \false;
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        /**
         * Disable elementor HTML wrap for plain content output (e.g. within emails).
         *
         * @return void
         */
        public function load()
        {
        }
        public function maybe_remove_content_filters()
        {
        }
        public function maybe_add_content_filters()
        {
        }
    }
    /**
     * WooCommerce Measurement Price Calculator Compatibility
     *
     * @see https://woocommerce.com/products/measurement-price-calculator/
     */
    class WC_GZD_Compatibility_WooCommerce_Measurement_Price_Calculator extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
    }
    class WC_GZD_Compatibility_TranslatePress_Multilingual extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        public function setup_notification($shipment_id)
        {
        }
    }
    /**
     * Klarna Helper
     *
     * Specific configuration for Klarna.
     *
     * @class        WC_GZD_Compatibility_Klarna_Checkout_For_WooCommerce
     * @category     Class
     * @author       vendidero
     */
    class WC_GZD_Compatibility_Klarna_Checkout_For_WooCommerce extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        /**
         * Register checkbox (fields) as ignored checkout fields to prevent Klarna from moving them.
         *
         * @param $fields
         *
         * @return array
         */
        public function add_checkbox_fields($fields)
        {
        }
        public function add_klarna_checkboxes()
        {
        }
        public function add_checkboxes()
        {
        }
        public function increase_checkout_time($time)
        {
        }
        /**
         * Prevent Germanized from adjusting the pay for order URL.
         *
         * @param $enable
         * @param $order
         *
         * @return bool
         */
        public function disable_force_pay_order($enable, $order)
        {
        }
        /**
         * Disable checkbox validation for Klarna orders.
         */
        public function maybe_disable_checkboxes()
        {
        }
    }
    class WC_GZD_Compatibility_WooCommerce_All_Products_For_Subscriptions extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
    }
    /**
     * WPML Helper
     *
     * Specific configuration for WPML
     *
     * @class        WC_GZD_WPML_Helper
     * @category    Class
     * @author        vendidero
     */
    class WC_GZD_Compatibility_WooCommerce_Dynamic_Pricing extends \WC_GZD_Compatibility_Woocommerce_Role_Based_Pricing
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function variable_unit_prices_hash($hash)
        {
        }
    }
    /**
     * PayPal Plus Helper for Inpsyde
     *
     * Specific configuration for Woo PayPal Plus by Inspyde
     *
     * @class        WC_GZD_Compatibility_Woo_Paypalplus
     * @category    Class
     * @author        vendidero
     */
    class WC_GZD_Compatibility_Woo_PaypalPlus extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
        /**
         * This method tries to clear PayPal Plus session data to allow our plugin to manipulate item data within checkout.
         * Needed e.g. for payment gateway fees or vat_exempts.
         */
        public function clear_paypal_session()
        {
        }
    }
    /**
     * PolyLang Helper
     *
     * Specific configuration for PolyLang
     *
     * @class        WC_GZD_Compatibility_PolyLang
     * @category    Class
     * @author        vendidero
     */
    class WC_GZD_Compatibility_Polylang extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        /**
         * Maybe define AJAX for Woo requests right after plugins are loaded so that PolyLang changes to the right language by default.
         */
        public function after_plugins_loaded()
        {
        }
        public function load()
        {
        }
        public function refresh_checkbox()
        {
        }
        public function set_language_field()
        {
        }
    }
    abstract class WC_GZD_Elementor_Widget extends \ElementorPro\Modules\Woocommerce\Widgets\Products_Base
    {
        public function get_keywords()
        {
        }
        public function get_name()
        {
        }
        public function get_categories()
        {
        }
        public function get_icon()
        {
        }
        public function get_custom_help_url()
        {
        }
        public abstract function get_postfix();
        protected abstract function get_title_raw();
        public function get_title()
        {
        }
        protected function register_controls()
        {
        }
        protected function get_title_prefix()
        {
        }
        protected function render()
        {
        }
        public function render_plain_content()
        {
        }
        public function get_group_name()
        {
        }
        public function get_preview_content()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Shipping_Notice extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Deposit extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Deposit_Packaging_Type extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Unit_Price extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Defect_Description extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Units extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Ingredients extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Nutri_Score extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Nutrients extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Allergenic extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Tax_Notice extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    class WC_GZD_Elementor_Widget_Product_Delivery_Time extends \WC_GZD_Elementor_Widget
    {
        public function get_title_raw()
        {
        }
        public function get_postfix()
        {
        }
    }
    /**
     * Compatibility script for https://wisdmlabs.com/docs/article/wisdm-customer-specific-pricing/csp-getting-started/csp-user-guide/specific-pricing-options-at-the-product-level/
     *
     * @class        WC_GZD_Compatibility_Customer_Specific_Pricing_For_WooCommerce
     * @category     Class
     * @author       vendidero
     */
    class WC_GZD_Compatibility_Customer_Specific_Pricing_For_WooCommerce extends \WC_GZD_Compatibility
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function load()
        {
        }
    }
    /**
     * B2B Market
     *
     * Specific configuration for B2B Market plugin
     */
    class WC_GZD_Compatibility_B2B_Market extends \WC_GZD_Compatibility_Woocommerce_Role_Based_Pricing
    {
        public static function get_name()
        {
        }
        public static function get_path()
        {
        }
        public function set_unit_price_filter()
        {
        }
        protected function get_prices_from_string($price_html)
        {
        }
        /**
         * @param string $price
         * @param WC_GZD_Product $gzd_product
         */
        public function filter_variable_unit_price($price, $gzd_product)
        {
        }
        /**
         * @param WC_GZD_Product $gzd_product
         */
        public function calculate_unit_price($gzd_product)
        {
        }
        public function variable_unit_prices_hash($price_hash)
        {
        }
    }
    class WC_GZD_Order_Helper
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        /**
         * Cloning is forbidden.
         *
         * @since 1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 1.0
         */
        public function __wakeup()
        {
        }
        public function __construct()
        {
        }
        public function maybe_remove_northern_ireland_taxes($order_item, $calculate_tax_for)
        {
        }
        /**
         * @param WC_Order $order
         *
         * @return boolean
         */
        public function get_order_main_service_tax_class($order, $type = 'shipping')
        {
        }
        public function create_refund_with_items($order_id)
        {
        }
        /**
         * @param $order_id
         * @param WC_Order $order
         *
         * @return void
         */
        public function on_create_order($order_id)
        {
        }
        /**
         * @param WC_Abstract_Order $order
         *
         * @return void
         */
        public function set_order_version($order)
        {
        }
        public function get_order_version($order)
        {
        }
        /**
         * @param WC_Order_Item_Fee $item
         * @param $fee_key
         * @param $fee
         * @param WC_Order $order
         */
        public function set_fee_split_tax_meta($item, $fee_key, $fee, $order)
        {
        }
        public function remove_cancel_button($actions, $order)
        {
        }
        public function maybe_reduce_order_stock($order_id)
        {
        }
        public function disallow_user_order_cancellation($allcaps, $caps, $args)
        {
        }
        public function cancel_order_url($url)
        {
        }
        /**
         * @param WC_Order_Item $item
         */
        public function on_order_item_update($item)
        {
        }
        /**
         * Hide product description from order meta default output
         *
         * @param array $metas
         */
        public function set_order_meta_hidden($metas)
        {
        }
        public function refresh_item_data($item)
        {
        }
        public function add_order_address_data($data, $type, $order)
        {
        }
        /**
         * @param $fields
         * @param WC_Order $order
         *
         * @return mixed
         */
        public function set_formatted_billing_address($fields, $order)
        {
        }
        public function order_address_enable_customer_title($fields)
        {
        }
        public function set_formatted_shipping_address($fields, $order)
        {
        }
        /**
         * Improve tax display within order totals
         *
         * @param array    $order_totals
         * @param WC_Order $order
         *
         * @return array
         */
        public function order_item_tax_totals($order_totals, $order, $tax_display = '')
        {
        }
        public function recalculate_order_item_unit_price($order_item)
        {
        }
    }
    class WC_GZD_Product_Export
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        protected $additional_columns = array();
        protected $is_exporting_delivery_time = \false;
        protected $is_exporting_nutrients = \false;
        /**
         * Cloning is forbidden.
         *
         * @since 1.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 1.0
         */
        public function __wakeup()
        {
        }
        public function __construct()
        {
        }
        public function register_column_filters()
        {
        }
        public function init()
        {
        }
        public function get_columns()
        {
        }
        public function register_core_meta_data($meta_keys_to_skip, $product)
        {
        }
        public function register_additional_columns($columns)
        {
        }
        public function set_columns($columns)
        {
        }
        /**
         * @param $row
         * @param WC_Product $product
         */
        public function export_delivery_times($row, $product)
        {
        }
        /**
         * @param $row
         * @param WC_Product $product
         */
        public function export_nutrients($row, $product)
        {
        }
        /**
         * @param $value
         * @param WC_Product $product
         *
         * @return mixed|void|null
         */
        public function export_column($value, $product)
        {
        }
        protected function filter_description_field($description)
        {
        }
        /**
         * Get formatted regular unit price.
         *
         * @param WC_Product $product Product being exported.
         *
         * @return string
         */
        protected function get_column_value_unit_price_regular($product)
        {
        }
        /**
         * Get formatted sale unit price.
         *
         * @param WC_Product $product Product being exported.
         *
         * @return string
         */
        protected function get_column_value_unit_price_sale($product)
        {
        }
        protected function get_column_value_allergen_ids($product)
        {
        }
        protected function get_column_value_sale_price_label($product)
        {
        }
        protected function get_column_value_sale_price_regular_label($product)
        {
        }
        protected function get_column_value_unit($product)
        {
        }
    }
    /**
     * Product Factory Class
     *
     * The WooCommerce product factory creating the right product object
     *
     * @class        WC_Product_Factory
     * @version        2.3.0
     * @package        WooCommerce/Classes
     * @category    Class
     * @author        WooThemes
     */
    class WC_GZD_Product_Factory
    {
        /**
         * get_product function.
         *
         * @param bool $the_product (default: false)
         * @param array $args (default: array())
         *
         * @return WC_Product|bool false if the product cannot be loaded
         */
        public function get_product($the_product = \false)
        {
        }
        /**
         * @return WeakMap
         */
        protected function get_product_list()
        {
        }
        /**
         * @param WC_Product $product
         *
         * @return WC_GZD_Product
         */
        public function get_cached_gzd_product($product)
        {
        }
        /**
         * Gets product without injecting gzd_product. Only available as fallback
         *
         * @param bool $the_product (default: false)
         * @param array $args (default: array())
         *
         * @return WC_Product|bool false if the product cannot be loaded
         */
        public function get_product_standalone($the_product = \false)
        {
        }
        /**
         * Returns and locates the WC_GZD_Product Object based on product type.
         *
         * @param WC_Product $product the product
         *
         * @return WC_GZD_Product
         */
        public function get_gzd_product($product)
        {
        }
    }
    /**
     * Helper to retrieve allergenic.
     *
     * @class    WC_GZD_Allergenic
     * @version  3.9.0
     * @author   vendidero
     */
    class WC_GZD_Allergenic extends \WC_GZD_Taxonomy
    {
        public function __construct()
        {
        }
        public function get_allergen($key, $by = 'slug')
        {
        }
        public function get_allergen_term($key, $by = 'slug')
        {
        }
        public function get_allergenic($args = array())
        {
        }
        public function get_allergen_object($term)
        {
        }
    }
    // Exit if accessed directly
    /**
     * WooCommerce Germanized Grouped Product
     *
     * The WC_GZD_Product_Grouped Class is used to offer additional functionality for every grouped product.
     *
     * @class        WC_GZD_Product
     * @version        1.0.0
     * @author        Vendidero
     */
    class WC_GZD_Product_Grouped extends \WC_GZD_Product
    {
        protected $child_prices = \null;
        protected $has_unit_price = \false;
        protected function get_min_max_child_products()
        {
        }
        protected function get_child_unit_data()
        {
        }
        protected function get_child_unit_prices($tax_display = '')
        {
        }
        protected function get_child_units()
        {
        }
        public function get_unit($context = 'view')
        {
        }
        /**
         * Returns unit base html
         *
         * @return string
         */
        public function get_unit_base($context = 'view')
        {
        }
        public function get_delivery_time_html($context = 'view')
        {
        }
        /**
         * Show unit prices only if every product has a unit price and shares the same unit.
         *
         * @return bool
         */
        public function has_unit()
        {
        }
        /**
         * Returns the price in html format.
         *
         * @param string $price (default: '').
         *
         * @return string
         */
        public function get_unit_price_html($show_sale = \true, $tax_display = '')
        {
        }
    }
    class WC_GZD_Privacy
    {
        protected static $_instance = \null;
        public static function instance()
        {
        }
        public function __construct()
        {
        }
        public function erase_order_data($order)
        {
        }
        public function erase_customer_data($response, $customer)
        {
        }
        public function get_order_data($data, $order)
        {
        }
        public function get_customer_data($data, $customer)
        {
        }
    }
}
namespace {
    /**
     * @return WooCommerce_Germanized $plugin instance
     */
    function WC_germanized()
    {
    }
    # Verify an IBAN number.
    #  If $machine_format_only, do not tolerate unclean (eg. spaces, dashes, leading 'IBAN ' or 'IIBAN ', lower case) input.
    #  (Otherwise, input can be printed 'IIBAN xx xx xx...' or 'IBAN xx xx xx...' or machine 'xxxxx' format.)
    #  Returns true or false.
    function verify_iban($iban, $machine_format_only = \false)
    {
    }
    # Convert an IBAN to machine format.  To do this, we
    # remove IBAN from the start, if present, and remove
    # non basic roman letter / digit characters
    function iban_to_machine_format($iban)
    {
    }
    # Convert an IBAN to human format. To do this, we
    # simply insert spaces right now, as per the ECBS
    # (European Committee for Banking Standards)
    # recommendations available at:
    # http://www.europeanpaymentscouncil.eu/knowledge_bank_download.cfm?file=ECBS%20standard%20implementation%20guidelines%20SIG203V3.2.pdf
    function iban_to_human_format($iban)
    {
    }
    # Convert an IBAN to obfuscated presentation. To do this, we
    # replace the checksum and all subsequent characters with an
    # asterisk, except for the final four characters, and then
    # return in human format, ie.
    #  HU69107000246667654851100005 -> HU** **** **** **** **** **** 0005
    #
    # We avoid the checksum as it may be used to infer the rest
    # of the IBAN in cases where the country has few valid banks
    # and branches, or other information about the account such
    # as bank, branch, or date issued is known (where a sequential
    # issuance scheme is in use).
    #
    # Note that output of this function should be presented with
    # other information to a user, such as the date last used or
    # the date added to their account, in order to better facilitate
    # unambiguous relative identification.
    function iban_to_obfuscated_format($iban)
    {
    }
    # Get the country part from an IBAN
    function iban_get_country_part($iban)
    {
    }
    # Get the checksum part from an IBAN
    function iban_get_checksum_part($iban)
    {
    }
    # Get the BBAN part from an IBAN
    function iban_get_bban_part($iban)
    {
    }
    # Check the checksum of an IBAN - code modified from Validate_Finance PEAR class
    function iban_verify_checksum($iban)
    {
    }
    # Find the correct checksum for an IBAN
    #  $iban  The IBAN whose checksum should be calculated
    function iban_find_checksum($iban)
    {
    }
    # Set the correct checksum for an IBAN
    #  $iban  IBAN whose checksum should be set
    function iban_set_checksum($iban)
    {
    }
    # Character substitution required for IBAN MOD97-10 checksum validation/generation
    #  $s  Input string (IBAN)
    function iban_checksum_string_replace($s)
    {
    }
    # Same as below but actually returns resulting checksum
    function iban_mod97_10_checksum($numeric_representation)
    {
    }
    # Perform MOD97-10 checksum calculation ('Germanic-level efficiency' version - thanks Chris!)
    function iban_mod97_10($numeric_representation)
    {
    }
    # Get an array of all the parts from an IBAN
    function iban_get_parts($iban)
    {
    }
    # Get the Bank ID (institution code) from an IBAN
    function iban_get_bank_part($iban)
    {
    }
    # Get the Branch ID (sort code) from an IBAN
    function iban_get_branch_part($iban)
    {
    }
    # Get the (branch-local) account ID from an IBAN
    function iban_get_account_part($iban)
    {
    }
    # Get the national checksum part from an IBAN
    function iban_get_nationalchecksum_part($iban)
    {
    }
    # Get the name of an IBAN country
    function iban_country_get_country_name($iban_country)
    {
    }
    # Get the domestic example for an IBAN country
    function iban_country_get_domestic_example($iban_country)
    {
    }
    # Get the BBAN example for an IBAN country
    function iban_country_get_bban_example($iban_country)
    {
    }
    # Get the BBAN format (in SWIFT format) for an IBAN country
    function iban_country_get_bban_format_swift($iban_country)
    {
    }
    # Get the BBAN format (as a regular expression) for an IBAN country
    function iban_country_get_bban_format_regex($iban_country)
    {
    }
    # Get the BBAN length for an IBAN country
    function iban_country_get_bban_length($iban_country)
    {
    }
    # Get the IBAN example for an IBAN country
    function iban_country_get_iban_example($iban_country)
    {
    }
    # Get the IBAN format (in SWIFT format) for an IBAN country
    function iban_country_get_iban_format_swift($iban_country)
    {
    }
    # Get the IBAN format (as a regular expression) for an IBAN country
    function iban_country_get_iban_format_regex($iban_country)
    {
    }
    # Get the IBAN length for an IBAN country
    function iban_country_get_iban_length($iban_country)
    {
    }
    # Get the BBAN Bank ID start offset for an IBAN country
    function iban_country_get_bankid_start_offset($iban_country)
    {
    }
    # Get the BBAN Bank ID stop offset for an IBAN country
    function iban_country_get_bankid_stop_offset($iban_country)
    {
    }
    # Get the BBAN Branch ID start offset for an IBAN country
    function iban_country_get_branchid_start_offset($iban_country)
    {
    }
    # Get the BBAN Branch ID stop offset for an IBAN country
    function iban_country_get_branchid_stop_offset($iban_country)
    {
    }
    # Get the BBAN (national) checksum start offset for an IBAN country
    #  Returns '' when (often) not present)
    function iban_country_get_nationalchecksum_start_offset($iban_country)
    {
    }
    # Get the BBAN (national) checksum stop offset for an IBAN country
    #  Returns '' when (often) not present)
    function iban_country_get_nationalchecksum_stop_offset($iban_country)
    {
    }
    # Get the registry edition for an IBAN country
    function iban_country_get_registry_edition($iban_country)
    {
    }
    # Is the IBAN country one official issued by SWIFT?
    function iban_country_get_country_swift_official($iban_country)
    {
    }
    # Is the IBAN country a SEPA member?
    function iban_country_is_sepa($iban_country)
    {
    }
    # Get the IANA code of an IBAN country
    function iban_country_get_iana($iban_country)
    {
    }
    # Get the ISO3166-1 alpha-2 code of an IBAN country
    function iban_country_get_iso3166($iban_country)
    {
    }
    # Get the parent registrar IBAN country of an IBAN country
    function iban_country_get_parent_registrar($iban_country)
    {
    }
    # Get the official currency of an IBAN country as an ISO4217 alpha code
    # (Note: Returns '' if there is no official currency, eg. for AA (IIBAN))
    function iban_country_get_currency_iso4217($iban_country)
    {
    }
    # Get the URL of an IBAN country's central bank
    # (Note: Returns '' if there is no central bank. Also, note that
    #        sometimes multiple countries share one central bank)
    function iban_country_get_central_bank_url($iban_country)
    {
    }
    # Get the name of an IBAN country's central bank
    # (Note: Returns '' if there is no central bank. Also, note that
    #        sometimes multiple countries share one central bank)
    function iban_country_get_central_bank_name($iban_country)
    {
    }
    # Get the list of all IBAN countries
    function iban_countries()
    {
    }
    # Get the membership of an IBAN country
    # (Note: Possible Values eu_member, efta_member, other_member, non_member)
    function iban_country_get_membership($iban_country)
    {
    }
    # Get the membership of an IBAN country
    # (Note: Possible Values eu_member, efta_member, other_member, non_member)
    function iban_country_get_is_eu_member($iban_country)
    {
    }
    # Given an incorrect IBAN, return an array of zero or more checksum-valid
    # suggestions for what the user might have meant, based upon common
    # mistranscriptions.
    #  IDEAS:
    #   - length correction via adding/removing leading zeros from any single component
    #   - overlength correction via dropping final digit(s)
    #   - national checksum algorithm checks (apply same testing methodology, abstract to separate function)
    #   - length correction by removing double digits (xxyzabxybaaz = change aa to a, or xx to x)
    #   - validate bank codes
    #   - utilize format knowledge with regards to alphanumeric applicability in that offset in that national BBAN format
    #   - turkish TL/TK thing
    #   - norway NO gets dropped due to mis-identification with "No." for number (ie. if no country code try prepending NO)
    function iban_mistranscription_suggestions($incorrect_iban)
    {
    }
    function _iban_load_registry()
    {
    }
    # Get information from the IBAN registry by example IBAN / code combination
    function _iban_get_info($iban, $code)
    {
    }
    # Get information from the IBAN registry by country / code combination
    function _iban_country_get_info($country, $code)
    {
    }
    # Load common mistranscriptions from disk.
    function _iban_load_mistranscriptions()
    {
    }
    # Find the correct national checksum for an IBAN
    #  (Returns the correct national checksum as a string, or '' if unimplemented for this IBAN's country)
    #  (NOTE: only works for some countries)
    function iban_find_nationalchecksum($iban)
    {
    }
    # Verify the correct national checksum for an IBAN
    #  (Returns true or false, or '' if unimplemented for this IBAN's country)
    #  (NOTE: only works for some countries)
    function iban_verify_nationalchecksum($iban)
    {
    }
    # Verify the correct national checksum for an IBAN
    #  (Returns the (possibly) corrected IBAN, or '' if unimplemented for this IBAN's country)
    #  (NOTE: only works for some countries)
    function iban_set_nationalchecksum($iban)
    {
    }
    # Internal function to overwrite the national checksum portion of an IBAN
    function _iban_nationalchecksum_set($iban, $nationalchecksum)
    {
    }
    # Currently unused but may be useful for Norway.
    # ISO7064 MOD11-2
    # Adapted from https://gist.github.com/andreCatita/5714353 by Andrew Catita
    function _iso7064_mod112_catita($input)
    {
    }
    # Currently unused but may be useful for Norway.
    # ISO 7064:1983.MOD 11-2
    # by goseaside@sina.com
    function _iso7064_mod112_goseaside($vString)
    {
    }
    # ISO7064 MOD97-10 (Bosnia, etc.)
    # (Credit: Adapted from https://github.com/stvkoch/ISO7064-Mod-97-10/blob/master/ISO7064Mod97_10.php)
    function _iso7064_mod97_10($str)
    {
    }
    # Implement the national checksum for a Belgium (BE) IBAN
    #  (Credit: @gaetan-be, fixed by @Olympic1)
    function _iban_nationalchecksum_implementation_be($iban, $mode)
    {
    }
    # MOD11 helper function for the Spanish (ES) IBAN national checksum implementation
    #  (Credit: @dem3trio, code lifted from Spanish Wikipedia at https://es.wikipedia.org/wiki/C%C3%B3digo_cuenta_cliente)
    function _iban_nationalchecksum_implementation_es_mod11_helper($numero)
    {
    }
    # Implement the national checksum for a Spanish (ES) IBAN
    #  (Credit: @dem3trio, adapted from code on Spanish Wikipedia at https://es.wikipedia.org/wiki/C%C3%B3digo_cuenta_cliente)
    function _iban_nationalchecksum_implementation_es($iban, $mode)
    {
    }
    # Helper function for the France (FR) BBAN national checksum implementation
    #  (Credit: @gaetan-be)
    function _iban_nationalchecksum_implementation_fr_letters2numbers_helper($bban)
    {
    }
    # NOTE: Worryingly at least one domestic number found within CF online is
    #       not passing national checksum support. Perhaps banks do not issue
    #       with correct RIB (French-style national checksum) despite using
    #       the legacy format? Perhaps this is a mistranscribed number?
    #        http://www.radiomariacentrafrique.org/virement-bancaire.aspx
    #	  ie. CF19 20001 00001 01401832401 40
    #	The following two numbers work:
    #        http://fondationvoixducoeur.net/fr/pour-contribuer.html
    #	  ie. CF4220002002003712551080145 and CF4220001004113717538890110
    #       Since in the latter case the bank is the same as the former and
    #       the French structure, terminology and 2/3 correct is a fairly high
    #       correlation, we are going to assume that the first error is theirs.
    #
    # Implement the national checksum for a Central African Republic (CF) IBAN
    function _iban_nationalchecksum_implementation_cf($iban, $mode)
    {
    }
    # Implement the national checksum for a Chad (TD) IBAN
    function _iban_nationalchecksum_implementation_td($iban, $mode)
    {
    }
    # Implement the national checksum for a Comoros (KM) IBAN
    function _iban_nationalchecksum_implementation_km($iban, $mode)
    {
    }
    # Implement the national checksum for a Congo (CG) IBAN
    function _iban_nationalchecksum_implementation_cg($iban, $mode)
    {
    }
    # Implement the national checksum for a Djibouti (DJ) IBAN
    function _iban_nationalchecksum_implementation_dj($iban, $mode)
    {
    }
    # Implement the national checksum for an Equitorial Guinea (GQ) IBAN
    function _iban_nationalchecksum_implementation_gq($iban, $mode)
    {
    }
    # Implement the national checksum for a Gabon (GA) IBAN
    function _iban_nationalchecksum_implementation_ga($iban, $mode)
    {
    }
    # Implement the national checksum for a Monaco (MC) IBAN
    #  (Credit: @gaetan-be)
    function _iban_nationalchecksum_implementation_mc($iban, $mode)
    {
    }
    # Implement the national checksum for a France (FR) IBAN
    #  (Credit: @gaetan-be, http://www.credit-card.be/BankAccount/ValidationRules.htm#FR_Validation and
    #           https://docs.oracle.com/cd/E18727_01/doc.121/e13483/T359831T498954.htm)
    function _iban_nationalchecksum_implementation_fr($iban, $mode)
    {
    }
    # Implement the national checksum for a Norway (NO) IBAN
    #  (NOTE: Built from description at https://docs.oracle.com/cd/E18727_01/doc.121/e13483/T359831T498954.htm, not well tested)
    function _iban_nationalchecksum_implementation_no($iban, $mode)
    {
    }
    # ISO/IEC 7064, MOD 11-2
    # @param $input string Must contain only characters ('0123456789').
    # @output A 1 character string containing '0123456789X',
    #         or '' (empty string) on failure due to bad input.
    # (Credit: php-iso7064 @ https://github.com/globalcitizen/php-iso7064)
    function _iso7064_mod11_2($input)
    {
    }
    # Implement the national checksum systems based on ISO7064 MOD11-2 Algorithm
    function _iban_nationalchecksum_implementation_iso7064_mod11_2($iban, $mode, $drop_at_front = 0, $drop_at_end = 1)
    {
    }
    # Implement the national checksum systems based on Damm Algorithm
    function _iban_nationalchecksum_implementation_damm($iban, $mode)
    {
    }
    # Implement the national checksum systems based on Verhoeff Algorithm
    function _iban_nationalchecksum_implementation_verhoeff($iban, $mode, $strip_length_end, $strip_length_front = 0)
    {
    }
    # ISO/IEC 7064, MOD 97-10
    # @param $input string Must contain only characters ('0123456789').
    # @output A 2 character string containing '0123456789',
    #         or '' (empty string) on failure due to bad input.
    # (Credit: php-iso7064 @ https://github.com/globalcitizen/php-iso7064)
    function _iso7064_mod97_10_generated($input)
    {
    }
    # Implement the national checksum for an Montenegro (ME) IBAN
    #  (NOTE: Reverse engineered)
    function _iban_nationalchecksum_implementation_me($iban, $mode)
    {
    }
    # Implement the national checksum for an Macedonia (MK) IBAN
    #  (NOTE: Reverse engineered)
    function _iban_nationalchecksum_implementation_mk($iban, $mode)
    {
    }
    # Implement the national checksum for an Netherlands (NL) IBAN
    #  This applies to most banks, but not to 'INGB', therefore we
    #  treat it specially here.
    #  (Original code: Validate_NL PEAR class, since extended)
    function _iban_nationalchecksum_implementation_nl($iban, $mode)
    {
    }
    # Implement the national checksum for an Portugal (PT) IBAN
    #  (NOTE: Reverse engineered)
    function _iban_nationalchecksum_implementation_pt($iban, $mode)
    {
    }
    # Implement the national checksum for an Serbia (RS) IBAN
    #  (NOTE: Reverse engineered, including bank 'Narodna banka Srbije' (908) exception. For two
    #         separately published and legitimate looking IBANs from that bank, there appears to
    #         be a +97 offset on the checksum, so we simply ignore all checksums for this bank.)
    function _iban_nationalchecksum_implementation_rs($iban, $mode)
    {
    }
    # Implement the national checksum for an Slovenia (SI) IBAN
    #  Note: It appears that the central bank does not use these
    #        checksums, thus an exception has been added.
    #  (NOTE: Reverse engineered)
    function _iban_nationalchecksum_implementation_si($iban, $mode)
    {
    }
    # Implement the national checksum for Slovak Republic (SK) IBAN
    # Source of algorithm: https://www.nbs.sk/_img/Documents/_Legislativa/_Vestnik/OPAT8-09.pdf
    # Account number is currently verified only, it's possible to also add validation for bank code and account number prefix
    function _iban_nationalchecksum_implementation_sk($iban, $mode)
    {
    }
    # Implement the national checksum for MOD97-10 countries
    function _iban_nationalchecksum_implementation_mod97_10($iban, $mode)
    {
    }
    # Implement the national checksum for an Timor-Lest (TL) IBAN
    #  (NOTE: Reverse engineered, but works on 2 different IBAN from official sources)
    function _iban_nationalchecksum_implementation_tl($iban, $mode)
    {
    }
    # Luhn Check
    # (Credit: Adapted from @gajus' https://gist.github.com/troelskn/1287893#gistcomment-857491)
    function _luhn($string)
    {
    }
    # Verhoeff checksum
    # (Credit: Adapted from Semyon Velichko's code at https://en.wikibooks.org/wiki/Algorithm_Implementation/Checksums/Verhoeff_Algorithm#PHP)
    function _verhoeff($input)
    {
    }
    # Damm checksum
    # (Credit: https://en.wikibooks.org/wiki/Algorithm_Implementation/Checksums/Damm_Algorithm#PHP)
    function _damm($input)
    {
    }
    # Implement the national checksum for an Italian (IT) IBAN
    function _iban_nationalchecksum_implementation_it($iban, $mode)
    {
    }
    # Implement the national checksum for a San Marino (SM) IBAN
    function _iban_nationalchecksum_implementation_sm($iban, $mode)
    {
    }
    # Italian (and San Marino's) checksum
    # (Credit: Translated by Francesco Zanoni from http://community.visual-basic.it/lucianob/archive/2004/12/26/2464.aspx)
    # (Source: European Commettee of Banking Standards' Register of European Account Numbers (TR201 V3.23 — FEBRUARY 2007),
    #          available at URL http://www.cnb.cz/cs/platebni_styk/iban/download/TR201.pdf)
    function _italian($input)
    {
    }
    # Internal proxy function to access national checksum implementations
    #  $iban = IBAN to work with (length and country must be valid, IBAN checksum and national checksum may be incorrect)
    #  $mode = 'find', 'set', or 'verify'
    #    - In 'find' mode, the correct national checksum for $iban is returned.
    #    - In 'set' mode, a (possibly) modified version of $iban with the national checksum corrected is returned.
    #    - In 'verify' mode, the checksum within $iban is compared to correctly calculated value, and true or false is returned.
    #  If a national checksum algorithm does not exist or remains unimplemented for this country, or the supplied $iban or $mode is invalid, '' is returned.
    #  (NOTE: We cannot collapse 'verify' mode and implement here via simple string comparison between 'find' mode output and the nationalchecksum part,
    #         because some countries have systems which do not map to this approach, for example the Netherlands has no checksum part yet an algorithm exists)
    function _iban_nationalchecksum_implementation($iban, $mode)
    {
    }
    # swift_to_regex()
    #  converts the SWIFT IBAN format specifications to regular expressions
    #  eg: 4!n6!n1!n -> ^(\d{4})(\d{6})(\d{1})$
    function swift_to_regex($swift)
    {
    }
    # swift_tokenize()
    #  fetch individual tokens in a swift structural string
    function swift_tokenize($string, $calculate_offsets = 0)
    {
    }
    function usage()
    {
    }
    function includeIfExists($file)
    {
    }
    function composerRequirea83bd0043569b733865ec55cbc4a4417($fileIdentifier, $file)
    {
    }
    function Message($txt, $severity = '')
    {
    }
    function Notice($txt)
    {
    }
    function Warning($txt)
    {
    }
    function Error($txt)
    {
    }
    function LoadMap($enc)
    {
    }
    function GetInfoFromTrueType($file, $embed, $subset, $map)
    {
    }
    function GetInfoFromType1($file, $embed, $map)
    {
    }
    function MakeFontDescriptor($info)
    {
    }
    function MakeWidthArray($widths)
    {
    }
    function MakeFontEncoding($map)
    {
    }
    function MakeUnicodeArray($map)
    {
    }
    function SaveToFile($file, $s, $mode)
    {
    }
    function MakeDefinitionFile($file, $type, $enc, $embed, $subset, $map, $info)
    {
    }
    function MakeFont($fontfile, $enc = 'cp1252', $embed = \true, $subset = \true)
    {
    }
    /**
     * Autoload packages.
     *
     * The package autoloader includes version information which prevents classes in this feature plugin
     * conflicting with Germanized core.
     *
     * We want to fail gracefully if `composer install` has not been executed yet, so we are checking for the autoloader.
     * If the autoloader is not present, let's log the failure and display a nice admin notice.
     */
    $autoloader = __DIR__ . '/vendor/autoload_packages.php';
    /**
     * Standard way of retrieving shipments based on certain parameters.
     *
     * @since  2.6.0
     * @param  array $args Array of args (above).
     * @return \Vendidero\Germanized\DHL\Label\Label[]
     */
    function wc_gzd_dhl_get_labels($args)
    {
    }
    function wc_gzd_legacy_dhl_get_label_types()
    {
    }
    function wc_gzd_dhl_get_return_label_by_shipment($the_shipment)
    {
    }
    /**
     * Main function for returning label.
     *
     * @param  mixed $the_label Object or label id.
     *
     * @return bool|\Vendidero\Germanized\DHL\Label\Label
     *
     */
    function wc_gzd_dhl_get_label($the_label = \false)
    {
    }
    function wc_gzd_dhl_get_shipment_label($the_shipment, $type = '')
    {
    }
    /**
     * @param $label
     * @param \Vendidero\Germanized\Shipments\Shipment $the_shipment
     * @param \Vendidero\Germanized\Shipments\Interfaces\ShippingProvider $provider
     *
     * @return false|\Vendidero\Germanized\DHL\Label\Label
     */
    function _wc_gzd_dhl_legacy_shipment_label_dhl($label, $the_shipment, $provider)
    {
    }
    function _wc_gzd_dhl_legacy_shipment_label_deutsche_post($label, $the_shipment, $provider)
    {
    }
    function _wc_gzd_dhl_legacy_label($label, $the_label, $shipping_provider, $type)
    {
    }
    function wc_gzd_dhl_get_inlay_return_label_default_args($parent_label)
    {
    }
    function wc_gzd_dhl_validate_return_label_args($shipment, $args = array())
    {
    }
    function wc_gzd_dhl_validate_inlay_return_label_args($parent_label, $args = array())
    {
    }
    function wc_gzd_dhl_validate_label_args($shipment, $args = array())
    {
    }
    /**
     * @param \Vendidero\Germanized\Shipments\Shipment $shipment
     */
    function wc_gzd_dhl_shipment_needs_label($shipment, $check_status = \true)
    {
    }
    /**
     * @param \Vendidero\Germanized\DHL\Label\DHL $parent_label
     * @param array $args
     *
     * @return bool|\Vendidero\Germanized\DHL\Label\DHLInlayReturn|WP_Error
     */
    function wc_gzd_dhl_create_inlay_return_label($parent_label, $args = array())
    {
    }
    function wc_gzd_dhl_update_label($label, $args = array())
    {
    }
    /**
     * @param \Vendidero\Germanized\Shipments\Shipment $shipment the shipment
     * @param array $args
     */
    function wc_gzd_dhl_create_label($shipment, $args = \false)
    {
    }
    /**
     * @param \Vendidero\Germanized\DHL\Order $dhl_order
     * @param \Vendidero\Germanized\DHL\Label\ReturnLabel $shipment
     */
    function wc_gzd_dhl_get_return_label_default_args($dhl_order, $shipment)
    {
    }
    /**
     * @param \Vendidero\Germanized\Shipments\Shipment $shipment
     * @param string $unit
     *
     * @return float
     */
    function wc_gzd_dhl_get_shipment_weight($shipment, $unit = 'kg', $net_weight = \false)
    {
    }
    /**
     * @param \Vendidero\Germanized\Shipments\Shipment $shipment
     * @param string $dimension
     * @param string $unit
     */
    function wc_gzd_dhl_get_shipment_dimensions($shipment, $unit = 'cm')
    {
    }
    function wc_gzd_dhl_get_label_default_args($dhl_order, $shipment)
    {
    }
    function wc_gzd_dhl_get_label_id($label)
    {
    }
    function wc_gzd_dhl_upload_data($filename, $bits, $relative = \true)
    {
    }
    function wc_gzd_dhl_get_return_label_by_parent($label_parent_id)
    {
    }
    function wc_gzd_dhl_generate_label_filename($label, $prefix = 'label')
    {
    }
    function wc_gzd_dhl_get_deutsche_post_selected_default_product($shipment, $dhl_order = \false)
    {
    }
    function wc_gzd_dhl_get_deutsche_post_label_default_args($dhl_order, $shipment)
    {
    }
    function wc_gzd_dhl_validate_deutsche_post_label_args($shipment, $args = array())
    {
    }
    function wc_gzd_dhl_get_deutsche_post_default_product($shipment)
    {
    }
    function wc_gzd_dhl_round_customs_item_weight($value, $precision = 0)
    {
    }
    /**
     * @param Vendidero\Germanized\DHL\Label\Label $label
     *
     * @return array|false
     */
    function wc_gzd_dhl_get_shipment_customs_data($label, $max_desc_length = 255)
    {
    }
    function wc_gzd_dhl_format_preferred_api_time($time)
    {
    }
    /**
     * @param false|Shipment $shipment
     *
     * @return array
     */
    function wc_gzd_dhl_get_label_payment_ref_placeholder($shipment = \false)
    {
    }
    function wc_gzd_dhl_get_preferred_days_select_options($days, $current = '')
    {
    }
    function wc_gzd_dhl_get_duties()
    {
    }
    function wc_gzd_dhl_is_valid_visual_min_age($min_age)
    {
    }
    function wc_gzd_dhl_is_valid_ident_min_age($min_age)
    {
    }
    function wc_gzd_dhl_get_visual_min_ages()
    {
    }
    function wc_gzd_dhl_get_ident_min_ages()
    {
    }
    function wc_gzd_dhl_get_label_reference($reference_text, $placeholders = array())
    {
    }
    /**
     * @param Label\Label $label
     * @param Shipment $shipment
     *
     * @return string
     */
    function wc_gzd_dhl_get_label_customer_reference($label, $shipment)
    {
    }
    function wc_gzd_dhl_get_endorsement_types()
    {
    }
    /**
     * @param Label\DHL $label
     * @param $shipment
     *
     * @return string
     */
    function wc_gzd_dhl_get_label_endorsement_type($label, $shipment)
    {
    }
    function wc_gzd_dhl_get_return_label_customer_reference($label, $shipment)
    {
    }
    function wc_gzd_dhl_get_inlay_return_label_reference($label, $shipment)
    {
    }
    /**
     * @return false|\Vendidero\Germanized\DHL\ShippingProvider\ShippingMethod
     */
    function wc_gzd_dhl_get_current_shipping_method()
    {
    }
    function wc_gzd_dhl_get_international_services()
    {
    }
    function wc_gzd_get_domestic_services()
    {
    }
    function wc_gzd_dhl_get_services()
    {
    }
    /**
     * @param $instance_id
     *
     * @return \Vendidero\Germanized\DHL\ShippingProvider\ShippingMethod
     */
    function wc_gzd_dhl_get_shipping_method($instance_id)
    {
    }
    function wc_gzd_dhl_get_deutsche_post_shipping_method($instance_id)
    {
    }
    function wc_gzd_dhl_get_preferred_services()
    {
    }
    function wc_gzd_dhl_get_pickup_types()
    {
    }
    function wc_gzd_dhl_is_pickup_type($maybe_type, $type = 'packstation')
    {
    }
    function wc_gzd_dhl_get_excluded_working_days()
    {
    }
    function wc_gzd_dhl_order_has_pickup($order)
    {
    }
    function wc_gzd_dhl_get_pickup_type($type)
    {
    }
    /**
     * @param WP_Error $error
     *
     * @return bool
     */
    function wc_gzd_dhl_wp_error_has_errors($error)
    {
    }
    function wc_gzd_dhl_is_valid_datetime($maybe_datetime, $format = 'Y-m-d')
    {
    }
    function wc_gzd_dhl_format_label_state($state, $country)
    {
    }
    /**
     * @param $the_product
     *
     * @return \Vendidero\Germanized\Shipments\Product
     */
    function wc_gzd_dhl_get_product($the_product)
    {
    }
    /**
     * @param Shipment $shipment
     */
    function wc_gzd_dhl_get_label_shipment_address_addition($shipment)
    {
    }
    /**
     * @param Shipment $shipment
     *
     * @return mixed
     */
    function wc_gzd_dhl_get_label_shipment_street_number($shipment)
    {
    }
    /**
     * @param \Vendidero\Germanized\DHL\Label\ReturnLabel $label
     */
    function wc_gzd_dhl_get_return_label_sender_street_number($label)
    {
    }
    /**
     * @param $product
     * @param false|Shipment $shipment
     *
     * @return string[]
     */
    function wc_gzd_dhl_get_product_services($product, $shipment = \false)
    {
    }
    /**
     * @param $product
     * @param $service
     * @param false|Shipment $shipment
     *
     * @return bool
     */
    function wc_gzd_dhl_product_supports_service($product, $service, $shipment = \false)
    {
    }
    /**
     * @param $service
     * @param false|Shipment $shipment
     *
     * @return array
     */
    function wc_gzd_dhl_get_service_product_attributes($service, $shipment = \false)
    {
    }
    /**
     * @param Shipment $shipment
     *
     * @return array
     */
    function wc_gzd_dhl_get_deutsche_post_products($shipment, $parent_only = \true)
    {
    }
    /**
     * @param Shipment|false $shipment
     *
     * @return array
     */
    function wc_gzd_dhl_get_deutsche_post_products_domestic($shipment = \false, $parent_only = \true)
    {
    }
    function wc_gzd_dhl_im_get_product_list($products, $parent_only = \true)
    {
    }
    function wc_gzd_dhl_get_deutsche_post_products_eu($shipment = \false, $parent_only = \true)
    {
    }
    /**
     * @param Shipment|false $shipment
     *
     * @return array
     */
    function wc_gzd_dhl_get_deutsche_post_products_international($shipment = \false, $parent_only = \true)
    {
    }
    /**
     * @param Label\DHL $label
     * @param string $type
     *
     * @return mixed|string|void
     * @see https://entwickler.dhl.de/group/ep/grundlagen2
     */
    function wc_gzd_dhl_get_custom_label_format($label, $type = '')
    {
    }
    function wc_gzd_dhl_get_order($order)
    {
    }
    function wc_gzd_dhl_get_inlay_return_products()
    {
    }
    function wc_gzd_dhl_get_return_products_international()
    {
    }
    function wc_gzd_dhl_get_return_products_domestic()
    {
    }
    function wc_gzd_dhl_get_im_product_title($product_name)
    {
    }
    function wc_gzd_dhl_is_warenpost_international_available()
    {
    }
    function wc_gzd_dhl_get_products_international()
    {
    }
    function wc_gzd_dhl_get_product_title($product_id)
    {
    }
    function wc_gzd_dhl_get_products_eu()
    {
    }
    function wc_gzd_dhl_get_products($shipping_country, $shipping_postcode = '')
    {
    }
    function wc_gzd_dhl_get_return_products($shipping_country, $shipping_postcode = '')
    {
    }
    /**
     * @param $product
     * @param $args
     *
     * @return string
     * @throws Exception
     */
    function wc_gzd_dhl_get_billing_number($product, $args = array())
    {
    }
    function wc_gzd_dhl_get_return_receivers()
    {
    }
    function wc_gzd_dhl_get_default_return_receiver($country, $method = \false)
    {
    }
    function wc_gzd_dhl_get_default_return_receiver_slug($country)
    {
    }
    function wc_gzd_dhl_get_default_product($country, $shipment = \false)
    {
    }
    function wc_gzd_dhl_get_products_domestic()
    {
    }
    /** This filter is documented in templates/myaccount/shipment/shipment-details-item.php */
    $product_permalink = \apply_filters('woocommerce_gzd_shipment_item_permalink', $is_visible ? $product->get_permalink() : '', $item, $order);
    /**
     * This filter may adjust the item class added to the shipment details table row
     * on the customer account page.
     *
     * @param ShipmentItem $item The shipment item instance.
     * @param Shipment     $shipment The shipment instance.
     *
     * @since 3.0.1
     * @package Vendidero/Germanized/Shipments
     */
    $item_class = \apply_filters('woocommerce_gzd_shipment_item_class', 'woocommerce-table__line-item shipment_item', $item, $shipment);
    /**
     * This filter may adjust the shipment item permalink on the customer account page.
     *
     * @param string                                       $permalink The permalink.
     * @param ShipmentItem $item The shipment item instance.
     * @param Shipment     $shipment The shipment instance.
     *
     * @since 3.0.0
     * @package Vendidero/Germanized/Shipments
     */
    $product_permalink = \apply_filters('woocommerce_gzd_shipment_item_permalink', $is_visible ? $product->get_permalink() : '', $item, $shipment);
    \define('WC_GZD_SHIPMENTS_IS_FEATURE_PLUGIN', \true);
    /**
     * Autoload packages.
     *
     * The package autoloader includes version information which prevents classes in this feature plugin
     * conflicting with WooCommerce core.
     *
     * We want to fail gracefully if `composer install` has not been executed yet, so we are checking for the autoloader.
     * If the autoloader is not present, let's log the failure and display a nice admin notice.
     */
    $autoloader = __DIR__ . '/vendor/autoload_packages.php';
    /**
     * Get HTML for the order items to be shown in emails.
     *
     * @param Shipment $shipment Shipment object.
     * @param array           $args Arguments.
     *
     * @since 3.0.0
     * @return string
     */
    function wc_gzd_get_email_shipment_items($shipment, $args = array())
    {
    }
    function woocommerce_gzd_shipments_template_view_shipments($order_id)
    {
    }
    function woocommerce_gzd_shipments_template_view_shipment($shipment_id)
    {
    }
    function woocommerce_gzd_shipments_template_add_return_shipment($order_id)
    {
    }
    function woocommerce_gzd_shipment_details_table($shipment_id)
    {
    }
    function woocommerce_gzd_return_shipments_template_instructions($shipment_id)
    {
    }
    function woocommerce_gzd_shipments_template_non_returnable_items_note($order)
    {
    }
    /**
     * Standard way of retrieving labels based on certain parameters.
     *
     * @since  2.6.0
     * @param  array $args Array of args (above).
     * @return \Vendidero\Germanized\Shipments\Interfaces\ShipmentLabel[] Number of pages and an array of order objects if
     * paginate is true, or just an array of values.
     */
    function wc_gzd_get_shipment_labels($args)
    {
    }
    function wc_gzd_get_label_type_by_shipment($shipment)
    {
    }
    function wc_gzd_get_shipment_label_types()
    {
    }
    function wc_gzd_get_label_by_shipment($the_shipment, $type = '')
    {
    }
    /**
     * @param false $the_label
     * @param string $shipping_provider
     * @param string $type
     *
     * @return \Vendidero\Germanized\Shipments\Interfaces\ShipmentLabel|boolean
     */
    function wc_gzd_get_shipment_label($the_label = \false, $shipping_provider = '', $type = 'simple')
    {
    }
    /**
     * @param \Vendidero\Germanized\Shipments\Shipment $shipment
     * @param bool $net_weight
     * @param string $unit
     *
     * @return float
     */
    function wc_gzd_get_shipment_label_weight($shipment, $net_weight = \false, $unit = 'kg')
    {
    }
    /**
     * @param \Vendidero\Germanized\Shipments\Shipment $shipment
     * @param string $dimension
     * @param string $unit
     */
    function wc_gzd_get_shipment_label_dimensions($shipment, $unit = 'cm')
    {
    }
    function wc_gzd_get_formatted_state($country = '', $state = '')
    {
    }
    function wc_gzd_country_to_alpha3($country)
    {
    }
    function wc_gzd_country_to_alpha2($country)
    {
    }
    function wc_gzd_get_shipment_order($order)
    {
    }
    function wc_gzd_get_shipment_label_title($type, $plural = \false)
    {
    }
    function wc_gzd_get_shipment_types()
    {
    }
    /**
     * Get shipment type data by type.
     *
     * @param  string $type type name.
     * @return bool|array Details about the shipment type.
     *
     * @package Vendidero/Germanized/Shipments
     */
    function wc_gzd_get_shipment_type_data($type = \false)
    {
    }
    function wc_gzd_get_shipments_by_order($order)
    {
    }
    function wc_gzd_get_shipment_order_shipping_statuses()
    {
    }
    function wc_gzd_get_shipment_order_return_statuses()
    {
    }
    /**
     * @param $instance_id
     *
     * @return ShippingProvider\Method
     */
    function wc_gzd_get_shipping_provider_method($instance_id)
    {
    }
    /**
     * Returns the current shipping method rate id.
     *
     * @return false|string
     */
    function wc_gzd_get_current_shipping_method_id()
    {
    }
    function wc_gzd_get_current_shipping_provider_method()
    {
    }
    function wc_gzd_get_shipment_order_shipping_status_name($status)
    {
    }
    function wc_gzd_get_shipment_order_return_status_name($status)
    {
    }
    /**
     * Standard way of retrieving shipments based on certain parameters.
     *
     * @param  array $args Array of args (above).
     *
     * @return Shipment[] The shipments found.
     *@since  3.0.0
     */
    function wc_gzd_get_shipments($args)
    {
    }
    function wc_gzd_get_shipment_customer_visible_statuses($shipment_type = 'simple')
    {
    }
    /**
     * Main function for returning shipments.
     *
     * @param  mixed $the_shipment Object or shipment id.
     *
     * @return bool|SimpleShipment|ReturnShipment|Shipment
     */
    function wc_gzd_get_shipment($the_shipment)
    {
    }
    /**
     * Get all shipment statuses.
     *
     * @return array
     */
    function wc_gzd_get_shipment_statuses()
    {
    }
    /**
     * @param Shipment $shipment
     *
     * @return mixed|void
     */
    function wc_gzd_get_shipment_selectable_statuses($shipment)
    {
    }
    /**
     * @param Order $order_shipment
     * @param array $args
     *
     * @return ReturnShipment|WP_Error
     */
    function wc_gzd_create_return_shipment($order_shipment, $args = array())
    {
    }
    /**
     * @param Order $order_shipment
     * @param array $args
     *
     * @return Shipment|WP_Error
     */
    function wc_gzd_create_shipment($order_shipment, $args = array())
    {
    }
    function wc_gzd_create_shipment_item($shipment, $order_item, $args = array())
    {
    }
    function wc_gzd_allow_customer_return_empty_return_reason($order)
    {
    }
    /**
     * @param bool $allow_none
     * @param bool|WC_Order_Item $order_item
     *
     * @return ReturnReason[]
     */
    function wc_gzd_get_return_shipment_reasons($order_item = \false)
    {
    }
    function wc_gzd_return_shipment_reason_exists($maybe_reason, $shipment = \false)
    {
    }
    /**
     * @param ReturnReason $a
     * @param ReturnReason $b
     */
    function _wc_gzd_sort_return_shipment_reasons($a, $b)
    {
    }
    /**
     * @param WP_Error $error
     *
     * @return bool
     */
    function wc_gzd_shipment_wp_error_has_errors($error)
    {
    }
    /**
     * @param Shipment $shipment
     * @param ShipmentItem $shipment_item
     * @param array $args
     *
     * @return ShipmentReturnItem|WP_Error
     */
    function wc_gzd_create_return_shipment_item($shipment, $shipment_item, $args = array())
    {
    }
    function wc_gzd_get_shipment_editable_statuses()
    {
    }
    /**
     * @param Shipment $shipment
     */
    function wc_gzd_get_shipment_address_addition($shipment)
    {
    }
    function wc_gzd_split_shipment_street($street_str)
    {
    }
    function wc_gzd_get_shipping_providers()
    {
    }
    function wc_gzd_get_shipping_provider($name)
    {
    }
    function wc_gzd_get_default_shipping_provider()
    {
    }
    function wc_gzd_get_shipping_provider_select()
    {
    }
    function wc_gzd_get_shipping_provider_title($slug)
    {
    }
    /**
     * @param Shipment $shipment
     */
    function wc_gzd_get_shipment_shipping_provider_title($shipment)
    {
    }
    function wc_gzd_get_shipping_provider_slug($provider)
    {
    }
    function _wc_gzd_shipments_keep_force_filename($new_filename)
    {
    }
    function wc_gzd_shipments_upload_data($filename, $bits, $relative = \true)
    {
    }
    function wc_gzd_get_shipment_setting_default_address_fields($type = 'shipper')
    {
    }
    /**
     * @return array
     */
    function wc_gzd_get_shipment_setting_address_fields($address_type = 'shipper')
    {
    }
    /**
     * @param Order $shipment_order
     *
     * @return array
     */
    function wc_gzd_get_shipment_return_address($shipment_order = \false)
    {
    }
    /**
     * @param WC_Order $order
     */
    function wc_gzd_get_shipment_order_shipping_method_id($order)
    {
    }
    function wc_gzd_render_shipment_action_buttons($actions)
    {
    }
    function wc_gzd_get_shipment_status_name($status)
    {
    }
    function wc_gzd_get_shipment_sent_statuses()
    {
    }
    function wc_gzd_get_shipment_counts($type = '')
    {
    }
    function wc_gzd_get_shipment_count($status, $type = '')
    {
    }
    /**
     * See if a string is a shipment status.
     *
     * @param  string $maybe_status Status, including any gzd- prefix.
     * @return bool
     */
    function wc_gzd_is_shipment_status($maybe_status)
    {
    }
    /**
     * Main function for returning shipment items.
     *
     * @since  2.2
     *
     * @param mixed $the_item Object or shipment item id.
     * @param string $item_type The shipment item type.
     *
     * @return bool|ShipmentItem
     */
    function wc_gzd_get_shipment_item($the_item = \false, $item_type = 'simple')
    {
    }
    /**
     * Get the shipment item ID depending on what was passed.
     *
     * @since 3.0.0
     * @param  mixed $item Item data to convert to an ID.
     * @return int|bool false on failure
     */
    function wc_gzd_get_shipment_item_id($item)
    {
    }
    /**
     * Format dimensions for display.
     *
     * @since  3.0.0
     * @param  array $dimensions Array of dimensions.
     * @return string
     */
    function wc_gzd_format_shipment_dimensions($dimensions, $unit = '')
    {
    }
    /**
     * Format a weight for display.
     *
     * @since  3.0.0
     * @param  float $weight Weight.
     * @return string
     */
    function wc_gzd_format_shipment_weight($weight, $unit = '')
    {
    }
    /**
     * Get My Account > Shipments columns.
     *
     * @since 3.0.0
     * @return array
     */
    function wc_gzd_get_account_shipments_columns($type = 'simple')
    {
    }
    function wc_gzd_get_order_customer_add_return_url($order)
    {
    }
    /**
     * @param WC_Order $order
     *
     * @return mixed
     */
    function wc_gzd_order_is_customer_returnable($order, $check_date = \true)
    {
    }
    /**
     * @param $order
     *
     * @return bool|\Vendidero\Germanized\Shipments\Interfaces\ShippingProvider
     */
    function wc_gzd_get_order_shipping_provider($order)
    {
    }
    function wc_gzd_get_customer_order_return_request_key()
    {
    }
    function wc_gzd_customer_can_add_return_shipment($order_id)
    {
    }
    /**
     * @param WC_Order|integer $order
     */
    function wc_gzd_customer_return_needs_manual_confirmation($order)
    {
    }
    /**
     * Get account shipments actions.
     *
     * @since  3.2.0
     * @param  int|Shipment $shipment Shipment instance or ID.
     * @return array
     */
    function wc_gzd_get_account_shipments_actions($shipment)
    {
    }
    function wc_gzd_shipments_get_product($the_product)
    {
    }
    function wc_gzd_get_volume_dimension($dimension, $to_unit, $from_unit = '')
    {
    }
    /**
     * Given an element name, returns a class name.
     *
     * If the WP-related function is not defined, return empty string.
     *
     * @param string $element The name of the element.
     *
     * @return string
     */
    function wc_gzd_wp_theme_get_element_class_name($element)
    {
    }
    /**
     * Forces a WP_Error object to be converted to a ShipmentError.
     *
     * @param $error
     *
     * @return mixed|\Vendidero\Germanized\Shipments\ShipmentError
     */
    function wc_gzd_get_shipment_error($error)
    {
    }
    /**
     * @var Shipment $shipment
     * @var \Vendidero\Germanized\Shipments\Labels\Label $label
     */
    $actions = array();
    /**
     * Get Packaging.
     *
     * @param mixed $packaging_id (default: false) Packaging id to get or empty if new.
     *
     * @return \Vendidero\Germanized\Shipments\Packaging|bool
     */
    function wc_gzd_get_packaging($packaging_id = \false)
    {
    }
    function wc_gzd_get_packaging_types()
    {
    }
    /**
     * @return \Vendidero\Germanized\Shipments\Packaging[] $packaging_list
     */
    function wc_gzd_get_packaging_list()
    {
    }
    function wc_gzd_get_packaging_weight_unit()
    {
    }
    function wc_gzd_get_packaging_dimension_unit()
    {
    }
    function wc_gzd_get_packaging_select()
    {
    }
    function woocommerce_gzd_register_checkout_total_taxes()
    {
    }
    function woocommerce_gzd_maybe_add_small_business_vat_notice()
    {
    }
    function woocommerce_gzd_checkout_load_ajax_relevant_hooks()
    {
    }
    // Exit if accessed directly
    /**
     * @param bool|WC_Cart $cart
     *
     * @return bool|string
     */
    function wc_gzd_get_cart_tax_display_mode($cart = \false)
    {
    }
    function wc_gzd_get_tax_rate($tax_rate_id)
    {
    }
    function wc_gzd_cart_product_differential_taxation_mark($title, $cart_item, $cart_item_key = '')
    {
    }
    function wc_gzd_cart_contains_differential_taxed_product($cart_data = \null)
    {
    }
    /**
     * Appends product item desc live data (while checkout) or order meta to product name
     *
     * @param string $title
     * @param array|WC_Order_Item_Product $cart_item
     *
     * @return string
     */
    function wc_gzd_cart_product_item_desc($title, $cart_item, $cart_item_key = '')
    {
    }
    /**
     * Appends product defect description live data (while checkout) or order meta to product name
     *
     * @param string $title
     * @param array|WC_Order_Item_Product $cart_item
     *
     * @return string
     */
    function wc_gzd_cart_product_defect_description($title, $cart_item, $cart_item_key = '')
    {
    }
    function wc_gzd_cart_product_attributes($title, $cart_item, $cart_item_key = '')
    {
    }
    function wc_gzd_is_checkout_action()
    {
    }
    /**
     * Appends delivery time live data (while checkout) or order meta to product name
     *
     * @param string $title
     * @param array|WC_Order_Item_Product $cart_item
     *
     * @return string
     */
    function wc_gzd_cart_product_delivery_time($title, $cart_item, $cart_item_key = '')
    {
    }
    /**
     * Appends unit price to product price live data (while checkout) or order meta to product price
     *
     * @param string $price
     * @param array $cart_item
     *
     * @return string
     */
    function wc_gzd_cart_product_unit_price($price, $cart_item, $cart_item_key = '')
    {
    }
    /**
     * Appends deposit amount to product price live data (while checkout) or order meta to product price
     *
     * @param string $price
     * @param array $cart_item
     *
     * @return string
     */
    function wc_gzd_cart_product_deposit_amount($price, $cart_item, $cart_item_key = '')
    {
    }
    /**
     * Appends deposit packaging type live data (while checkout) or order meta to product name
     *
     * @param string $title
     * @param array $cart_item
     *
     * @return string
     */
    function wc_gzd_cart_product_deposit_packaging_type($title, $cart_item, $cart_item_key = '')
    {
    }
    /**
     * Appends product units live data (while checkout) or order meta to product name
     *
     * @param string $title
     * @param array $cart_item
     *
     * @return string
     */
    function wc_gzd_cart_product_units($title, $cart_item, $cart_item_key = '')
    {
    }
    function wc_gzd_cart_applies_for_photovoltaic_system_vat_exemption()
    {
    }
    function wc_gzd_cart_customer_applies_for_photovoltaic_system_vat_exemption()
    {
    }
    function wc_gzd_cart_contains_photovoltaic_system($items = \false)
    {
    }
    function wc_gzd_cart_needs_age_verification($items = \false)
    {
    }
    function wc_gzd_cart_get_age_verification_min_age($items = \false)
    {
    }
    function wc_gzd_item_is_tax_share_exempt($item, $type = 'shipping', $key = \false)
    {
    }
    /**
     * Calculates tax share for shipping/fees
     *
     * @param string $type
     * @param array $cart_contents
     *
     * @return array
     */
    function wc_gzd_get_cart_tax_share($type = 'shipping', $cart_contents = array())
    {
    }
    function wc_gzd_get_cart_main_service_tax_class($type = 'shipping')
    {
    }
    function wc_gzd_cart_remove_shipping_taxes($taxes, $cart)
    {
    }
    /**
     * @param WC_Cart $cart
     * @param boolean $include_shipping_taxes
     *
     * @return mixed
     */
    function wc_gzd_get_cart_taxes($cart, $include_shipping_taxes = \true)
    {
    }
    function wc_gzd_get_cart_total_taxes($include_shipping_taxes = \true)
    {
    }
    /**
     * Get order total tax html.
     *
     * @return void
     */
    function wc_gzd_cart_totals_order_total_tax_html()
    {
    }
    function wc_gzd_get_legal_text($plain_text)
    {
    }
    function wc_gzd_get_legal_text_error()
    {
    }
    function wc_gzd_get_legal_text_digital()
    {
    }
    function wc_gzd_get_legal_text_digital_error()
    {
    }
    function wc_gzd_get_legal_text_digital_email_notice()
    {
    }
    function wc_gzd_get_legal_text_service()
    {
    }
    function wc_gzd_get_legal_text_service_error()
    {
    }
    function wc_gzd_get_legal_text_service_email_notice()
    {
    }
    function wc_gzd_get_chosen_shipping_rates($args = array())
    {
    }
    function wc_gzd_get_legal_text_parcel_delivery($titles = array())
    {
    }
    function wc_gzd_checkout_adjustments_disabled()
    {
    }
    function wc_gzd_maybe_disable_checkout_adjustments()
    {
    }
    // Exit if accessed directly
    function wc_gzd_get_crud_data($object, $key, $suppress_suffix = \false)
    {
    }
    function wc_gzd_set_crud_data($object, $key, $value)
    {
    }
    function wc_gzd_set_crud_meta_data($object, $key, $value)
    {
    }
    function wc_gzd_unset_crud_meta_data($object, $key)
    {
    }
    function wc_gzd_set_crud_term_data($object, $term, $taxonomy)
    {
    }
    function wc_gzd_unset_crud_term_data($object, $taxonomy)
    {
    }
    function wc_gzd_get_order_item_product($item, $order)
    {
    }
    function wc_gzd_get_variable_visible_children($product)
    {
    }
    function wc_gzd_get_price_including_tax($product, $args = array())
    {
    }
    function wc_gzd_get_price_excluding_tax($product, $args = array())
    {
    }
    function wc_gzd_get_variation($parent, $variation)
    {
    }
    function wc_gzd_get_order_currency($order)
    {
    }
    function wc_gzd_reduce_order_stock($order_id)
    {
    }
    function wc_gzd_get_product_type($id)
    {
    }
    function wc_gzd_get_product_name($product)
    {
    }
    function wc_gzd_get_cart_url()
    {
    }
    function wc_gzd_get_checkout_url()
    {
    }
    function wc_gzd_help_tip($tip, $allow_html = \false)
    {
    }
    function wc_gzd_string_to_bool($string)
    {
    }
    function wc_gzd_bool_to_string($bool)
    {
    }
    // Exit if accessed directly
    /**
     * @param $total_rows
     * @param WC_Order $order
     *
     * @return mixed
     */
    function wc_gzd_cart_forwarding_fee_notice_filter($total_rows, $order)
    {
    }
    function wc_gzd_order_supports_parcel_delivery_reminder($order_id)
    {
    }
    function wc_gzd_order_applies_for_photovoltaic_system_vat_exemption($order_id)
    {
    }
    function wc_gzd_get_order_min_age($order_id)
    {
    }
    function wc_gzd_get_order_defect_descriptions($order_id)
    {
    }
    function wc_gzd_order_has_age_verification($order_id)
    {
    }
    function wc_gzd_order_is_anonymized($order)
    {
    }
    function wc_gzd_get_order_date($order, $format = '')
    {
    }
    /**
     * @param WC_Order $order
     * @param string $type
     */
    function wc_gzd_get_order_customer_title($order, $type = 'billing')
    {
    }
    /**
     * @param WC_Order_Item $order_item
     *
     * @return WC_GZD_Order_Item|WC_GZD_Order_Item_Product|false
     */
    function wc_gzd_get_order_item($order_item)
    {
    }
    // Before wpautop().
    /**
     * @param null $instance
     *
     * @return WC_GZD_Dependencies
     */
    function wc_gzd_get_dependencies($instance = \null)
    {
    }
    function wc_gzd_post_has_woocommerce_block($post_content)
    {
    }
    /**
     * @return Vendidero\Germanized\Shopmark[]
     */
    function wc_gzd_get_single_product_shopmarks()
    {
    }
    /**
     * @return Vendidero\Germanized\Shopmark[]
     */
    function wc_gzd_get_single_product_grouped_shopmarks()
    {
    }
    /**
     * @return Vendidero\Germanized\Shopmark[]
     */
    function wc_gzd_get_product_loop_shopmarks()
    {
    }
    /**
     * @return Vendidero\Germanized\Shopmark[]
     */
    function wc_gzd_get_product_block_shopmarks()
    {
    }
    /**
     * @return Vendidero\Germanized\Shopmark[]
     */
    function wc_gzd_get_cart_shopmarks()
    {
    }
    /**
     * @return Vendidero\Germanized\Shopmark[]
     */
    function wc_gzd_get_mini_cart_shopmarks()
    {
    }
    function _wc_gzd_get_differential_taxation_shopmark($location)
    {
    }
    /**
     * @return Vendidero\Germanized\Shopmark[]
     */
    function wc_gzd_get_checkout_shopmarks()
    {
    }
    /**
     * @return Vendidero\Germanized\Shopmark[]
     */
    function wc_gzd_get_order_shopmarks()
    {
    }
    /**
     * @param $location
     * @param $type
     *
     * @return bool|Vendidero\Germanized\Shopmark $shopmark
     */
    function wc_gzd_get_shopmark($location, $type)
    {
    }
    function wc_gzd_shopmark_is_enabled($location, $type)
    {
    }
    /**
     * @param WC_Order|integer|null $order
     *
     * @return bool
     */
    function wc_gzd_send_instant_order_confirmation($order = \null)
    {
    }
    function wc_gzd_get_legal_product_notice_types()
    {
    }
    function wc_gzd_get_age_verification_min_ages()
    {
    }
    function wc_gzd_get_age_verification_min_ages_select()
    {
    }
    /**
     * Format tax rate percentage for output in frontend
     *
     * @param float $rate
     * @param boolean $percent show percentage after number
     *
     * @return string
     */
    function wc_gzd_format_tax_rate_percentage($rate, $percent = \false)
    {
    }
    function wc_gzd_format_alcohol_content($alcohol_content)
    {
    }
    function wc_gzd_format_food_attribute_value($decimal, $args = array())
    {
    }
    function wc_gzd_is_customer_activated($user_id = '')
    {
    }
    function wc_gzd_get_hook_priority($hook)
    {
    }
    function wc_gzd_get_legal_pages($email_attachable_only = \false)
    {
    }
    function wc_gzd_get_default_email_attachment_order()
    {
    }
    function wc_gzd_get_email_attachment_order($legal_pages_only = \false)
    {
    }
    function wc_gzd_get_page_permalink($type)
    {
    }
    /**
     * @return bool
     *
     * @since 3.1.9
     */
    function wc_gzd_is_small_business()
    {
    }
    function wc_gzd_get_small_business_notice()
    {
    }
    function wc_gzd_get_differential_taxation_mark()
    {
    }
    function wc_gzd_get_differential_taxation_checkout_notice()
    {
    }
    function wc_gzd_shipping_method_id_matches_supported($method_id, $supported = array())
    {
    }
    function wc_gzd_is_parcel_delivery_data_transfer_checkbox_enabled($rate_ids = array())
    {
    }
    function wc_gzd_get_dispute_resolution_text()
    {
    }
    function wc_gzd_show_taxes_before_total($location = 'checkout')
    {
    }
    function wc_gzd_get_tax_rate_label($rate_percentage, $type = 'incl')
    {
    }
    /**
     * @param $tax_rate_id
     * @param WC_Order $order
     *
     * @return mixed|void
     */
    function wc_gzd_get_order_tax_rate_percentage($tax_rate_id, $order)
    {
    }
    function wc_gzd_get_shipping_costs_text($product = \false)
    {
    }
    /**
     * Sanitize html text field, e.g. to be passed to wp_editor.
     * Be aware that calling update_post_meta with the value returned might
     * lead to losing slashes as update_post_meta calls wp_unslash itself.
     *
     * @param string $value Slashed data expected
     *
     * @return string Unslashed HTML
     */
    function wc_gzd_sanitize_html_text_field($value)
    {
    }
    function wc_gzd_convert_coupon_to_voucher($coupon)
    {
    }
    function wc_gzd_get_differential_taxation_notice_text()
    {
    }
    function wc_gzd_get_privacy_policy_page_id()
    {
    }
    function wc_gzd_get_privacy_policy_url()
    {
    }
    function wc_gzd_get_customer_title_options()
    {
    }
    function wc_gzd_get_customer_title($value)
    {
    }
    function wc_gzd_register_legal_checkbox($id, $args)
    {
    }
    function wc_gzd_update_legal_checkbox($id, $args)
    {
    }
    /**
     * @param $id
     *
     * @return false|WC_GZD_Legal_Checkbox
     */
    function wc_gzd_get_legal_checkbox($id)
    {
    }
    function wc_gzd_remove_legal_checkbox($id)
    {
    }
    function wc_gzd_checkbox_is_enabled($id)
    {
    }
    /**
     * Remove Class Filter Without Access to Class Object
     *
     * In order to use the core WordPress remove_filter() on a filter added with the callback
     * to a class, you either have to have access to that class object, or it has to be a call
     * to a static method.  This method allows you to remove filters with a callback to a class
     * you don't have access to.
     *
     * Works with WordPress 1.2+ (4.7+ support added 9-19-2016)
     * Updated 2-27-2017 to use internal WordPress removal for 4.7+ (to prevent PHP warnings output)
     *
     * @param string $tag Filter to remove
     * @param string $class_name Class name for the filter's callback
     * @param string $method_name Method name for the filter's callback
     * @param int $priority Priority of the filter (default 10)
     *
     * @return bool Whether the function is removed.
     */
    function wc_gzd_remove_class_filter($tag, $class_name = '', $method_name = '', $priority = 10)
    {
    }
    /**
     * Remove Class Action Without Access to Class Object
     *
     * In order to use the core WordPress remove_action() on an action added with the callback
     * to a class, you either have to have access to that class object, or it has to be a call
     * to a static method.  This method allows you to remove actions with a callback to a class
     * you don't have access to.
     *
     * Works with WordPress 1.2+ (4.7+ support added 9-19-2016)
     *
     * @param string $tag Action to remove
     * @param string $class_name Class name for the action's callback
     * @param string $method_name Method name for the action's callback
     * @param int $priority Priority of the action (default 10)
     *
     * @return bool               Whether the function is removed.
     */
    function wc_gzd_remove_class_action($tag, $class_name = '', $method_name = '', $priority = 10)
    {
    }
    function wc_gzd_replace_label_shortcodes($html, $replacements)
    {
    }
    function _wc_gzd_page_shortcode($atts, $content = '')
    {
    }
    function _wc_gzd_legal_page_shortcode($atts, $content, $tag)
    {
    }
    function woocommerce_gzd_show_add_more_variants_notice($product)
    {
    }
    function woocommerce_gzd_get_more_variants_notice($product)
    {
    }
    function woocommmerce_gzd_price_range($price_html, $from, $to)
    {
    }
    function woocommerce_gzd_price_range_format_is_min_price()
    {
    }
    function woocommerce_gzd_price_range_format_is_max_price()
    {
    }
    function woocommerce_gzd_get_price_range_format()
    {
    }
    function woocommerce_gzd_get_unit_price_range_format()
    {
    }
    function woocommerce_gzd_format_unit_price_range($min_price, $max_price)
    {
    }
    function wc_gzd_get_default_revocation_address()
    {
    }
    function wc_gzd_get_formatted_revocation_address()
    {
    }
    /**
     * @param WP_Error $error
     */
    function wc_gzd_wp_error_has_errors($error)
    {
    }
    /**
     * @param WC_Email $email
     */
    function wc_gzd_get_email_helper($email)
    {
    }
    function wc_gzd_switch_to_email_locale($email, $lang = \false)
    {
    }
    function wc_gzd_restore_email_locale($email)
    {
    }
    /**
     * Switch Germanized to site language.
     *
     * @since 3.1.0
     */
    function wc_gzd_switch_to_site_locale()
    {
    }
    /**
     * Switch Germanized language to original.
     *
     * @since 3.1.0
     */
    function wc_gzd_restore_locale()
    {
    }
    function wc_gzd_format_unit($unit)
    {
    }
    function wc_gzd_format_unit_base($unit_base)
    {
    }
    function wc_gzd_format_product_units_decimal($unit_product)
    {
    }
    function wc_gzd_format_deposit_amount($amount, $args)
    {
    }
    function wc_gzd_format_unit_price($price, $unit, $unit_base, $product_units = '')
    {
    }
    function wc_gzd_get_additional_costs_tax_calculation_mode()
    {
    }
    function wc_gzd_enable_additional_costs_split_tax_calculation()
    {
    }
    function wc_gzd_calculate_additional_costs_taxes_based_on_main_service()
    {
    }
    function wc_gzd_additional_costs_taxes_detect_main_service_by()
    {
    }
    function wc_gzd_additional_costs_include_tax()
    {
    }
    function wc_gzd_base_country_is_eu()
    {
    }
    function wc_gzd_get_cart_defect_descriptions($items = \false)
    {
    }
    function wc_gzd_update_page_content($page_id, $content, $append = \true)
    {
    }
    function wc_gzd_content_has_shortcode($content, $shortcode)
    {
    }
    function wc_gzd_print_item_defect_descriptions($descriptions, $echo = \false)
    {
    }
    function wc_gzd_get_post_plain_content($content_post, $shortcodes_allowed = array())
    {
    }
    function wc_gzd_is_extended_debug_mode_enabled()
    {
    }
    function wc_gzd_get_base_country()
    {
    }
    function wc_gzd_is_admin_order_request()
    {
    }
    function wc_gzd_get_dom_document($html)
    {
    }
    /**
     * @param \DomDocument $dom
     *
     * @return string|false
     */
    function wc_gzd_get_dom_document_html($dom)
    {
    }
    function wc_gzd_register_hooks_in_product_block_html($html, $x_paths, $org_product, $hook_prefix = 'woocommerce_gzd_after_product_grid_block_after_')
    {
    }
    function wc_gzd_get_html_classes($classes)
    {
    }
    function wc_gzd_base_country_supports_photovoltaic_system_vat_exempt()
    {
    }
    function wc_gzd_customer_applies_for_photovoltaic_system_vat_exemption($args = array())
    {
    }
    // Exit if accessed directly
    /**
     * @param WC_Product $product
     */
    function _wc_gzd_check_unit_sale($product)
    {
    }
    /**
     * Register unit price update hook while cronjob is running
     */
    function wc_gzd_register_scheduled_unit_sales($product_ids)
    {
    }
    /**
     * @param $product
     *
     * @return bool|WC_GZD_Product
     */
    function wc_gzd_get_product($product)
    {
    }
    /**
     * @param $product
     *
     * @return bool|WC_GZD_Product
     */
    function wc_gzd_get_gzd_product($product)
    {
    }
    function wc_gzd_get_small_business_product_notice()
    {
    }
    function wc_gzd_is_revocation_exempt($product, $type = 'digital', $context_object = \null)
    {
    }
    function wc_gzd_needs_age_verification($product)
    {
    }
    /**
     * Checks whether the product matches one of the types.
     *
     * @param array|string $types multiple types are OR connected
     * @param WC_Product|WC_GZD_Product $product
     *
     * @return bool
     */
    function wc_gzd_product_matches_extended_type($types, $product)
    {
    }
    /**
     * @param array $args
     * @param bool|WC_GZD_Product $product
     *
     * @return array|mixed|void
     */
    function wc_gzd_recalculate_unit_price($args = array(), $product = \false)
    {
    }
    /**
     * @param $maybe_slug
     *
     * @return array|string|boolean
     */
    function wc_gzd_get_valid_product_delivery_time_slugs($maybe_slug, $allow_add_new = \true)
    {
    }
    function wc_gzd_product_review_is_verified($comment_id)
    {
    }
    function wc_gzd_product_rating_is_verified($product_id)
    {
    }
    function wc_gzd_get_legal_product_rating_authenticity_notice($product_id)
    {
    }
    function wc_gzd_get_legal_product_review_authenticity_notice($comment_id)
    {
    }
    /**
     * Single Product price per unit.
     */
    function woocommerce_gzd_template_single_legal_info()
    {
    }
    /**
     * Loop Product price per unit.
     */
    function woocommerce_gzd_template_loop_legal_info()
    {
    }
    /**
     * Single Product delivery time info
     */
    function woocommerce_gzd_template_grouped_single_legal_info($html, $grouped_child)
    {
    }
    function woocommerce_gzd_template_product_review_authenticity_status($comment)
    {
    }
    function woocommerce_gzd_template_product_rating_authenticity_status_loop()
    {
    }
    function woocommerce_gzd_template_product_rating_authenticity_status_single()
    {
    }
    function woocommerce_gzd_template_product_rating_authenticity_status_filter($html)
    {
    }
    function wc_gzd_template_adjust_product_block_html($html, $block)
    {
    }
    function wc_gzd_template_adjust_product_grid_block_html($html, $data, $org_product)
    {
    }
    function woocommerce_gzd_template_loop_price_unit()
    {
    }
    /**
     * Single Product price per unit.
     */
    function woocommerce_gzd_template_single_price_unit()
    {
    }
    function woocommerce_gzd_template_single_setup_global_product()
    {
    }
    /**
     * Grouped Product price per unit.
     * If grouped parent has unit price, recalculate child unit prices with grouped parent unit base.
     */
    function woocommerce_gzd_template_grouped_single_price_unit($html, $grouped_child)
    {
    }
    /**
     * Single Product Shipping costs info
     */
    function woocommerce_gzd_template_single_shipping_costs_info()
    {
    }
    /**
     * Loop Product Shipping costs info
     */
    function woocommerce_gzd_template_loop_shipping_costs_info()
    {
    }
    /**
     * Single Deposit info
     */
    function woocommerce_gzd_template_single_deposit()
    {
    }
    /**
     * Loop Deposit info
     */
    function woocommerce_gzd_template_loop_deposit()
    {
    }
    /**
     * Single Deposit info
     */
    function woocommerce_gzd_template_single_deposit_packaging_type()
    {
    }
    /**
     * Loop Deposit info
     */
    function woocommerce_gzd_template_loop_deposit_packaging_type()
    {
    }
    /**
     * Single Product delivery time info
     */
    function woocommerce_gzd_template_single_delivery_time_info()
    {
    }
    /**
     * Loop Product delivery time info
     */
    function woocommerce_gzd_template_loop_delivery_time_info()
    {
    }
    /**
     * Grouped single product delivery time info
     */
    function woocommerce_gzd_template_grouped_single_delivery_time_info($html, $grouped_child)
    {
    }
    /**
     * Grouped single product deposit amount
     */
    function woocommerce_gzd_template_grouped_single_deposit_amount($html, $grouped_child)
    {
    }
    /**
     * Grouped single product deposit packaging type
     */
    function woocommerce_gzd_template_grouped_single_deposit_packaging_type($html, $grouped_child)
    {
    }
    /**
     * Single Product delivery time info
     */
    function woocommerce_gzd_template_single_tax_info()
    {
    }
    /**
     * Loop Product delivery time info
     */
    function woocommerce_gzd_template_loop_tax_info()
    {
    }
    function woocommerce_gzd_template_single_product_units()
    {
    }
    function woocommerce_gzd_template_loop_product_units()
    {
    }
    function woocommerce_gzd_template_single_nutri_score()
    {
    }
    function woocommerce_gzd_template_loop_nutri_score()
    {
    }
    function woocommerce_gzd_template_single_defect_description()
    {
    }
    /**
     * @param $price
     * @param WC_GZD_Product $product
     */
    function woocommerce_gzd_template_add_more_variants_unit_price_notice($price, $product)
    {
    }
    /**
     * @param $price
     * @param WC_GZD_Product $product
     */
    function woocommerce_gzd_template_add_more_variants_price_notice($price, $product)
    {
    }
    /**
     * @param $price
     * @param WC_Product $product
     *
     * @return mixed
     */
    function woocommerce_gzd_price_notice($price, $product)
    {
    }
    function woocommerce_gzd_template_grouped_single_product_units($html, $grouped_child)
    {
    }
    function woocommerce_gzd_template_grouped_single_nutri_score($html, $grouped_child)
    {
    }
    function woocommerce_gzd_template_grouped_single_defect_description($html, $grouped_child)
    {
    }
    /**
     * small business info
     */
    function woocommerce_gzd_template_small_business_info()
    {
    }
    /**
     * small business info within checkout
     */
    function woocommerce_gzd_template_checkout_small_business_info()
    {
    }
    /**
     * footer vat info
     */
    function woocommerce_gzd_template_footer_vat_info()
    {
    }
    /**
     * footer sale info
     */
    function woocommerce_gzd_template_footer_sale_info()
    {
    }
    function woocommerce_gzd_template_cart_total_tax()
    {
    }
    /**
     * Display edit data notice
     */
    function woocommerce_gzd_template_checkout_edit_data_notice()
    {
    }
    function woocommerce_gzd_template_photovoltaic_systems_checkout_notice()
    {
    }
    /**
     * Display back to cart button within checkout cart
     */
    function woocommerce_gzd_template_checkout_back_to_cart()
    {
    }
    /**
     * Checkout payment gateway title
     */
    function woocommerce_gzd_template_checkout_payment_title()
    {
    }
    /**
     * Set terms checkbox manually
     */
    function woocommerce_gzd_template_checkout_set_terms_manually()
    {
    }
    /**
     * Replaces default review-order.php product table by gzd product table template (checkout/review-order-product-table.php).
     * Adds filter to hide default review order product table output.
     */
    function woocommerce_gzd_template_checkout_table_content_replacement()
    {
    }
    /**
     * Returns false to make sure default review order product table output is suppressed.
     *
     * @return boolean
     */
    function woocommerce_gzd_template_checkout_table_product_hide()
    {
    }
    /**
     * Remove review order product table cart item visibility filter after output has been suppressed.
     */
    function woocommerce_gzd_template_checkout_table_product_hide_filter_removal()
    {
    }
    /**
     * Manipulate the order submit button text
     */
    function woocommerce_gzd_template_order_button_text($text)
    {
    }
    /**
     * Add delivery time and unit price to variations
     */
    function woocommerce_gzd_add_variation_options($options, $product, $variation)
    {
    }
    /**
     * Manipulate order success text
     */
    function woocommerce_gzd_template_order_success_text($text)
    {
    }
    /**
     * Custom add to cart button
     */
    function woocommerce_gzd_template_loop_add_to_cart($text, $product)
    {
    }
    /**
     * Adds custom order submit template (at the end of checkout)
     */
    function woocommerce_gzd_template_order_submit($args = array())
    {
    }
    function woocommerce_gzd_template_order_submit_fallback()
    {
    }
    /**
     * Pay now button on success page
     */
    function woocommerce_gzd_template_order_pay_now_button($order_id)
    {
    }
    /**
     * Temporarily add a filter which removes order button html (that's how we get the order button at the end of checkout since WC 2.3)
     */
    function woocommerce_gzd_template_set_order_button_remove_filter()
    {
    }
    /**
     * Filter which temporarily sets order button html to false (stop displaying)
     */
    function woocommerce_gzd_template_button_temporary_hide($text)
    {
    }
    /**
     * Remove the order button html filter after payment.php has been parsed
     */
    function woocommerce_gzd_template_set_order_button_show_filter()
    {
    }
    function woocommerce_gzd_template_set_wc_terms_hide($show)
    {
    }
    function woocommerce_gzd_template_checkout_forwarding_fee_notice()
    {
    }
    function woocommerce_gzd_template_maybe_hide_delivery_time($hide, $product)
    {
    }
    function woocommerce_gzd_template_maybe_hide_shipping_costs($hide, $product)
    {
    }
    function woocommerce_gzd_template_digital_delivery_time_text($text, $product)
    {
    }
    function woocommerce_gzd_template_sale_price_label_html($price, $product)
    {
    }
    function woocommerce_gzd_template_small_business_total_vat_notice($total)
    {
    }
    function woocommerce_gzd_template_small_business_mini_cart_vat_notice()
    {
    }
    function woocommerce_gzd_template_differential_taxation_notice_cart()
    {
    }
    function woocommerce_gzd_template_differential_taxation_notice_order()
    {
    }
    function woocommerce_gzd_template_order_item_hooks()
    {
    }
    function woocommerce_gzd_template_mini_cart_taxes()
    {
    }
    function wc_gzd_template_empty_wc_privacy_policy_text($text, $type)
    {
    }
    function woocommerce_gzd_template_render_checkout_checkboxes()
    {
    }
    function woocommerce_gzd_template_render_register_checkboxes()
    {
    }
    function woocommerce_gzd_template_render_pay_for_order_checkboxes()
    {
    }
    function woocommerce_gzd_template_render_review_checkboxes($html, $args)
    {
    }
    function woocommerce_gzd_template_product_widget_filters_start($args)
    {
    }
    function woocommerce_gzd_template_product_widget_filters_end($args)
    {
    }
    function woocommerce_gzd_template_product_widget_price_html($html, $product)
    {
    }
    function woocommerce_gzd_template_mini_cart_remove_hooks()
    {
    }
    function woocommerce_gzd_template_mini_cart_add_hooks()
    {
    }
    function woocommerce_gzd_template_mini_cart_maybe_remove_hooks()
    {
    }
    function woocommerce_gzd_template_product_blocks($price_html, $product)
    {
    }
    function woocommerce_gzd_template_add_price_html_suffixes($price_html, $org_product, $args = array(), $location = 'product_widget')
    {
    }
    function wc_gzd_body_class($classes)
    {
    }
}