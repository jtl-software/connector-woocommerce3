<?php

namespace {
    class Woocommerce_German_Market
    {
        /**
         * Plugin version
         * @var string
         */
        public static $version = '3.28';
        /**
         * @var mixed
         */
        public static $plugin_name = 'WooCommerce German Market';
        /**
         * @var mixed
         */
        public static $textdomain = 'woocommerce-german-market';
        /**
         * @var mixed
         */
        public static $plugin_base_name = \NULL;
        /**
         * @var mixed
         */
        public static $plugin_url = \NULL;
        /**
         * @var string
         */
        public static $plugin_filename = __FILE__;
        public static $plugin_path;
        public static $autoupdater;
        /**
         * Plugin constructor. Init basic plugin behaviour and register hooks.
         */
        public function __construct()
        {
        }
        public function general_init()
        {
        }
        public function frontend_init()
        {
        }
        public function backend_init()
        {
        }
        /**
         * Creates an Instance of this Class
         *
         * @access public
         * @since 0.0.1
         * @return Woocommerce_German_Market
         */
        public static function get_instance()
        {
        }
        /**
         * Load the localization
         *
         * @since	0.5
         * @access	public
         * @uses	load_plugin_textdomain, plugin_basename
         * @return	void
         */
        public function load_plugin_textdomain()
        {
        }
        /**
         * Load translation for Austrian German and Swiss German
         * de_AT => de_DE_formal, de_CH => de_DE_formal, de_CH_informal =>
         *
         * @since	3.10.2
         * @access	public
         * @wp-hook	plugin_locale
         * @param 	String $locale
         * @param 	String $domain
         * @return	String
         */
        public static function language_for_at_and_ch($locale, $domain = '')
        {
        }
        /**
         * registers the css styles
         *
         * @static
         * @uses		get_option, wp_register_style, wp_enqueue_style, plugins_url
         * @access	public
         * @return	void
         */
        public static function load_styles()
        {
        }
        /**
         * registers the css styles frontend
         *
         * @static
         * @since 	3.5.3.
         * @wp-hook  wp_enqueue_scripts
         * @access	public
         * @return	void
         */
        public static function enqueue_frontend_styles()
        {
        }
        /**
         * enqueue admin scripts and pass variables into the global scope
         *
         * @static
         * @uses		wp_enqueue_script, wp_localize_script, plugin_dir_url
         * @access 	public
         * @return	void
         */
        public static function enqueue_admin_scripts()
        {
        }
        /**
         * enqueue admin scripts for media upload
         *
         * @static
         * @wp-hook current_screen
         * @since GM 3.5.2
         * @return void
         */
        public static function media_uploader()
        {
        }
        /**
         * enqueue frontend scripts and pass variables into the global scope
         *
         * @static
         * @uses		wp_enqueue_script, get_option, wp_localize_script, wp_get_referer, plugin_dir_url
         * @access 	public
         * @return	void
         */
        public static function enqueue_frontend_scripts()
        {
        }
        /**
         * @return bool
         */
        public static function is_frontend()
        {
        }
        /**
         * Check if current WooCommerce Version is equal or above 3.3
         *
         * @since	2.3
         * @author	ap
         * @access	public
         * @global	$woocommerce
         * @static
         * @return	boolean is above or not
         */
        public static function is_wc_3_0()
        {
        }
        /**
         * Returns plugin version
         * @since 2.3.1
         * @author ap
         * @access public
         * @static
         * @return string
         */
        public static function get_version()
        {
        }
        /**
         * Check if the current site is wgm checkout
         * @author ap
         * @access public
         * @static
         * @return boolean
         */
        public static function is_wgm_checkout()
        {
        }
        /**
         * Called when plugin is initialized
         * @author ap
         * @access public
         * @static
         */
        public static function init()
        {
        }
        /**
         * Exclude second checkout page from WooCommerce cache
         * @param array $page_uris
         * @access public
         * @since 2.4.10
         * @author ap, cb
         * @wp-hook pre_set_transient_woocommerce_cache_excluded_uris
         *
         * @return array $page_uris
         */
        public static function exclude_checkout_from_cache($page_uris)
        {
        }
        /**
         * Exclude second checkout page from WooCommerce cache
         * @access public
         * @since 3.8.2
         * @wp-hook wp
         * @return void
         */
        public static function exclude_checkout_from_cache_2()
        {
        }
        /**
         * Run activation on every site
         *
         * @static
         * @access public
         * @static
         * @wp-hook admin_init
         */
        public static function on_activate_site()
        {
        }
        /**
         * Run activation hook
         *
         * @static
         * @access public
         * @static
         * @register_activation_hook
         */
        public static function on_activate($network_wide)
        {
        }
        /**
         * Deactivation of the plugin
         *
         * @register_deactivation_hook
         * @static
         * @return void
         */
        public static function on_deactivate($network_wide)
        {
        }
        /**
         * Deactivation of the plugin on each site of multisite
         *
         * @static
         * @return void
         */
        public static function on_deactivate_site()
        {
        }
        /**
         * run uninstall hook
         *
         * @register_uninstall_hook
         * @static
         * @access public
         * @return void
         */
        public static function on_uninstall()
        {
        }
        /**
         * delete options on uninstall
         *
         * @static
         * @access public
         */
        public static function on_uninstall_site()
        {
        }
    }
    /**
     * SEPA Direct Debit Gateway
     *
     * Provides a SEPA Direct Debit.
     *
     * @class 		WGM_Gateway_Sepa_Direct_Debit
     * @extends		WC_Payment_Gateway
     * @version		1.0
     */
    class WGM_Gateway_Sepa_Direct_Debit extends \WC_Payment_Gateway
    {
        public static $instances = 0;
        /**
         * Init Payment Gateway
         */
        function __construct()
        {
        }
        /**
         * Add saved sepa data to mandate preview
         *
         * @wp-hook wgm_sepa_direct_debit_logged_in_user
         * @param Array $data
         * @return Array
         */
        public function add_saved_data_to_mandat_preview_args($data)
        {
        }
        /**
         * Returns the user meta key string.
         *
         * @access public
         * @static
         *
         * @param string $key
         *
         * @return string
         */
        public static function build_meta_key($key)
        {
        }
        /**
         * Returns the post key string.
         *
         * @access public
         * @static
         *
         * @param string $key
         *
         * @return string
         */
        public static function build_post_key($key)
        {
        }
        /**
         * Our schedule function to delete stored payment information.
         *
         * @hook german_market_sepa_bulk_delete_stored_payment_information
         *
         * @access public
         * @static
         *
         * @return void
         */
        public static function bulk_schedule_delete_stored_payment_information()
        {
        }
        /**
         * Processing payment gateway settings.
         *
         * @hook woocommerce_update_options_payment_gateways_german_market_sepa_direct_debit
         *
         * @access public
         *
         * @return bool was anything saved?
         */
        public function process_admin_options()
        {
        }
        /**
         * Updating custom SEPA fields.
         *
         * @wp-hook personal_options_update, edit_user_profile_update
         * @access public
         * @static
         *
         * @param int $user_id
         *
         * @return void
         */
        public static function update_profile_sepa_fields($user_id)
        {
        }
        /**
         * Add SEPA fields to admin area.
         *
         * @wp-hook show_user_profile, edit_user_profile
         *
         * @access public
         * @static
         *
         * @param WP_User $user
         *
         * @return void
         */
        public static function add_sepa_fields_to_user_section($user)
        {
        }
        /**
         * Ajax callback to check for exisiting customer SEPA payment information.
         *
         * @hook wp_ajax_german_market_sepa_check_stored_user_information
         *
         * @access public
         * @static
         *
         * @return json, die()
         */
        public static function check_for_stored_user_payment_information()
        {
        }
        /**
         * Disables the 'Add payment method' button in 'My Account' Section.
         *
         * @access public
         *
         * @return void
         */
        public function my_account_disable_add_payment_button()
        {
        }
        /**
         * Ajax callback to delete stored Sepa payment information.
         *
         * @hook wp_ajax_german_market_sepa_delete_user_information
         *
         * @access public
         * @static
         *
         * @return void, die()
         */
        public static function my_account_delete_user_payment_information()
        {
        }
        /**
         * Returns the brand string.
         *
         * @hook woocommerce_get_credit_card_type_label
         *
         * @access public
         *
         * @param string $brand
         *
         * @return string
         */
        public function get_brand_string($brand)
        {
        }
        /**
         * Manipulating WooCommerce 'saved payment methods' for page in 'my account' section.
         *
         * @hook woocommerce_saved_payment_methods_list
         *
         * @access public
         *
         * @param array $methods_list
         * @param int   $customer_id
         *
         * @return array
         */
        public function add_sepa_to_woocommerce_payment_methods_list($methods_list, $customer_id)
        {
        }
        /**
         * Saving payment method in 'my account' section.
         *
         * @access public
         *
         * @return array|void
         */
        public function add_payment_method()
        {
        }
        /**
         * Saving customers Sepa payment information on demand.
         *
         * @hook woocommerce_checkout_order_processed
         *
         * @access public
         *
         * @param array  $data
         * @param object $errors
         *
         * @return void
         */
        public function maybe_save_customer_payment_information()
        {
        }
        /**
         * Checkbox Logging
         *
         * @since 3.8.2
         *
         * @wp-hook german_market_checkbox_logging_checbkox_texts_array
         * @param Array $checkboxes_texts
         * @param String $pre_symbol
         * @param Array $posted_data
         * @param WC_Order $order
         * @return Array
         **/
        function checkbox_logging($checkboxes_texts, $pre_symbol, $posted_data, $order)
        {
        }
        /**
         * Output admin biling fields
         *
         * @since 3.6.2
         *
         * @wp-hook woocommerce_admin_order_data_after_billing_address
         * @param WC_Order $order
         * @return void
         **/
        function output_admin_billing_fields($order)
        {
        }
        /**
         * Show Sepa Data in plain emails
         *
         * @param WC_Order $order
         * @return void
         **/
        public function email_customer_details_plain_text($order, $sent_to_admin)
        {
        }
        /**
         * Show Sepa Data in Emails
         *
         * @wp-hook woocommerce_email_customer_details
         * @param WC_Order $order
         * @param Boolean $sent_to_admin
         * @param Boolean $plain_text
         * @return void
         **/
        public function email_customer_details($order, $sent_to_admin, $plain_text)
        {
        }
        /**
         * Add prenotification content to the WC emails.
         *
         * @since 3.10.4.1
         * @wp-hook woocommerce_email_before_order_table || woocommerce_email_after_order_table
         * @param WC_Order $order Order object.
         * @param bool     $sent_to_admin Sent to admin.
         * @param bool     $plain_text Email format: plain text or HTML.
         */
        public function email_prenotification($order, $sent_to_admin, $plain_text = \false)
        {
        }
        /**
         * Don't show prenotification content in invoice pdf
         *
         * @since 3.10.4.1
         * @wp-hook wp_wc_invoice_pdf_start_template 
         * @param void
         */
        public function prenotification_before_invoice_pdf()
        {
        }
        /**
         * Don't show prenotification content in invoice pdf
         *
         * @since 3.10.4.1
         * @wp-hook wp_wc_invoice_pdf_end_template 
         * @param void
         */
        public function prenotification_after_invoice_pdf()
        {
        }
        /**
         * Add content to the WC emails.
         *
         * @param WC_Order $order Order object.
         * @param bool     $sent_to_admin Sent to admin.
         * @param bool     $plain_text Email format: plain text or HTML.
         */
        public function email_instructions($order, $sent_to_admin, $plain_text = \false)
        {
        }
        /**
         * Save Data in Backend
         *
         * @wp-hook woocommerce_before_order_object_save
         * @return void
         **/
        public function sava_admin_data($order, $data_store)
        {
        }
        /**
         * Admin Billing Fields
         *
         * @param Array $fields
         * @return Array
         **/
        public function admin_billing_fields($fields = array(), $order = \false)
        {
        }
        /**
         * Save meta data
         *
         * @wp-hook woocommerce_checkout_update_order_meta
         *
         * @access public
         *
         * @param Integer $order_id
         * @param Array   $posted
         *
         * @return void
         **/
        public function update_order_meta($order_id, $posted)
        {
        }
        /**
         * Admin Panel Options
         * - Options for bits like 'title' and availability on a country-by-country basis
         *
         * @access public
         * @return void
         */
        function admin_options()
        {
        }
        /**
         * Initialise Gateway Settings Form Fields
         *
         * @access public
         * @return void
         */
        function init_form_fields()
        {
        }
        /**
         * Check If The Gateway Is Available For Use
         *
         * @access public
         * @return bool
         */
        function is_available()
        {
        }
        /**
         * Process the payment and return the result
         *
         * @access public
         * @param int $order_id
         * @return array
         */
        function process_payment($order_id)
        {
        }
        /**
         * send order id
         *
         * @access public
         * @param WC_Order $order
         * @return void
         */
        public function send_sepa_mail($order)
        {
        }
        /**
         * Output for the order received page.
         *
         * @access public
         * @return void
         */
        function thankyou()
        {
        }
        /**
         * Get Payment Fields
         * @return Array
         **/
        public static function get_payment_fields()
        {
        }
        /**
         * Additonal Checkout fields
         *
         * @return void
         */
        public function payment_fields()
        {
        }
        /**
         * Validate Additional Fields if second checkout page is enabled
         *
         * @wp-hook gm_checkout_validation called in inc/WGM_Sepa_Direct_debit
         * @param Integer $error_count
         * @return Integer
         **/
        public static function validate_required_fields($error_count = 0)
        {
        }
        /**
         * Validate Additional Fields if second checkout page is disabeld
         **/
        public function validate_fields()
        {
        }
        /**
         * Add checkbox
         *
         * @wp-hook woocommerce_de_review_order_after_submit called in inc/WGM_Sepa_Direct_debit
         * @param Integer $error_count
         * @return Integer
         **/
        public static function checkout_field_checkbox($review_order)
        {
        }
        /**
         * Validate checkbox
         *
         * @wp-hook gm_checkout_validation_fields called in inc/WGM_Sepa_Direct_debit
         *
         * @access public
         *
         * @param array $data
         * @param int   $error_count
         *
         * @return int
         **/
        public static function checkout_field_checkbox_validation($data, $error_count = 0)
        {
        }
        /**
         * Validate checkbox
         *
         * @wp-hook gm_checkout_validation_fields called in inc/WGM_Sepa_Direct_debit
         *
         * @access public
         *
         * @param array $data
         * @param int   $error_count
         *
         * @return int
         **/
        public static function checkout_field_checkbox_validation_second_checkout($error_count = 0)
        {
        }
        /**
         * add bulk action download 
         *
         * @access public
         * @hook admin_footer
         * @return void
         */
        public function add_bulk_action($actions)
        {
        }
        /**
         * do bulk action
         *
         * @access public
         * @static 
         * @hook WGM_Hpos::get_hook_for_order_handle_bulk_actions()
         * @param String $redirect_to
         * @param String $action
         * @param Array $order_ids
         * @return String
         */
        public function bulk_action($redirect_to, $action, $order_ids)
        {
        }
        /**
         * Show XML Download Errors
         *
         * @access public
         * @hook admin_notices
         * @return void
         */
        public function admin_xml_error_notice()
        {
        }
        /**
         * adds a small download button to the admin page for orders
         *
         * @since 0.0.1
         * @access public
         * @static 
         * @hook woocommerce_admin_order_actions
         * @arguments $actions, $theOrder
         * @return $actions
         */
        public function admin_order_actions($actions, $order)
        {
        }
        /**
         * Build SEPA Data for REST API
         *
         * @since 3.6.2
         * @access public
         * @static 
         * @param WC_Order $order
         * @return Array
         */
        public function get_api_data($order)
        {
        }
    }
    // Exit if accessed directly
    /**
     * Cash on Delivery Gateway
     *
     * Provides a Cash on Delivery Payment Gateway.
     *
     * @class 		WC_Gateway_COD
     * @extends		WC_Payment_Gateway
     * @version		2.0.0
     * @package		WooCommerce/Classes/Payment
     * @author 		Patrick Garman, Julian Jöris ( changes for WGM )
     */
    class WGM_Gateway_Cash_on_delivery_v2 extends \WC_Payment_Gateway
    {
        /**
         * Init Payment Gateway
         */
        function __construct()
        {
        }
        /**
         * Admin Panel Options
         * - Options for bits like 'title' and availability on a country-by-country basis
         *
         * @access public
         * @return void
         */
        function admin_options()
        {
        }
        /**
         * Initialise Gateway Settings Form Fields
         *
         * @access public
         * @return void
         */
        function init_form_fields()
        {
        }
        /**
         * Check If The Gateway Is Available For Use
         *
         * @access public
         * @return bool
         */
        function is_available()
        {
        }
        /**
         * Process the payment and return the result
         *
         * @access public
         * @param int $order_id
         * @return array
         */
        function process_payment($order_id)
        {
        }
        /**
         * Output for the order received page.
         *
         * @access public
         * @return void
         */
        function thankyou()
        {
        }
        /**
         * Add content to the WC emails.
         *
         * @access public
         * @param WC_Order $order
         * @param bool $sent_to_admin
         * @param bool $plain_text
         */
        public function email_instructions($order, $sent_to_admin, $plain_text = \false)
        {
        }
        /**
         * Deactivate fee tax
         * 
         * @since 3.10.5.1
         * @access public
         * @wp-hook woocommerce_de_calculate_gateway_fees_tax
         * @wp-hook woocommerce_de_show_gateway_fees_tax
         * @param Boolean $boolean
         * @param WC_Fee $fee
         * @return Boolean
         */
        public function disable_fee_tax($boolean, $fee)
        {
        }
    }
    // Exit if accessed directly
    /**
     * Purchase on account Gateway
     *
     * Provides a Cash on Delivery Payment Gateway.
     *
     * @class 		WGM_Gateway_Purchase_On_Account
     * @extends		WC_Payment_Gateway
     * @version		1.1
     */
    class WGM_Gateway_Purchase_On_Account extends \WC_Payment_Gateway
    {
        public static $instances = 0;
        /**
         * Init Payment Gateway
         */
        function __construct()
        {
        }
        /**
         * Hidden field for JS to get option "deactivate_ship_to_different_address"
         *
         * @since 3.6.2
         * @wp-hook woocommerce_after_checkout_billing_form
         * @return void
         */
        function hidden_field_for_deactivate_ship_to_different_address($checkout)
        {
        }
        /**
         * Admin Panel Options
         * - Options for bits like 'title' and availability on a country-by-country basis
         *
         * @access public
         * @return void
         */
        function admin_options()
        {
        }
        /**
         * Initialise Gateway Settings Form Fields
         *
         * @access public
         * @return void
         */
        function init_form_fields()
        {
        }
        /**
         * Check availability of gateway
         */
        public function check_availability()
        {
        }
        /**
         * Check If The Gateway Is Available For Use
         *
         * @access public
         * @return bool
         */
        function is_available()
        {
        }
        /**
         * Process the payment and return the result
         *
         * @access public
         * @param int $order_id
         * @return array
         */
        function process_payment($order_id)
        {
        }
        /**
         * Output for the order received page.
         *
         * @access public
         * @return void
         */
        function thankyou()
        {
        }
        /**
         * Add content to the WC emails.
         *
         * @access public
         * @param WC_Order $order
         * @param bool $sent_to_admin
         * @param bool $plain_text
         */
        public function email_instructions($order, $sent_to_admin, $plain_text = \false, $email = \false)
        {
        }
    }
    /**
     * Sepa Mandat Email
     *
     * An email sent to the customer when a new order is received
     *
     * @class       WGM_Email_Sepa
     * @version     1.0
     * @extends     WC_Email
     */
    class German_Market_Email_Sepa extends \WC_Email
    {
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         * get_type function.
         *
         * @return string
         */
        public function get_email_type()
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        function trigger($order_id)
        {
        }
        /**
         * Set Args
         **/
        function set_args($args)
        {
        }
        /**
         * get_content_html function.
         *
         * @access public
         * @return string
         */
        function get_content_html()
        {
        }
        /**
         * get_content_plain function.
         *
         * @access public
         * @return string
         */
        function get_content_plain()
        {
        }
        /**
         * template for sepa mandate in pdf
         *
         * @hook wp_wc_invoice_pdf_template_invoice_content
         * @param String $path
         * @return String
         */
        public static function pdf_content()
        {
        }
    }
    /**
     * Class with Template Snippet functions, Template Helper Functions
     * Output filtering Funktions of WooCommerce hooks
     *
     * @author jj, ap
     */
    class WGM_Template
    {
        protected static $button_html;
        protected static $run_time_cache = array();
        /**
         * Overloading Woocommerce with German Market templates
         * @param string $template
         * @param string $template_name
         * @param string $template_path
         * @access public
         * @static
         * @author ap
         * @return string the template
         */
        public static function add_woocommerce_de_templates($template, $template_name, $template_path)
        {
        }
        /**
         * Add Taxes in cart/cart.php if not german market template is used
         *
         * @wp-hook woocommerce_cart_item_subtotal
         * @param String $subtotal
         * @param Array $cart_item
         * @param String $cart_item_key
         * @return String
         **/
        public static function show_taxes_in_cart_theme_template($subtotal, $cart_item, $cart_item_key)
        {
        }
        /**
         * Overloading WGM Teplates with templates form the theme if existent
         * @param string $template_name  - tempalte name
         * @param string $template_path  - path the templates in theme folder
         * @param string $default_path  - path to templates in plugin folder
         * @return mixed found template
         * @author ap
         * @since 2.3
         */
        public static function locate_template($template_name, $template_path = '', $default_path = '')
        {
        }
        /**
         * @param string $template_name template name
         * @param array $args variables for template scope
         * @author ap
         * @since 2.3
         */
        public static function load_template($template_name, array $args = array())
        {
        }
        public static function add_mwst_rate_to_product_item_init()
        {
        }
        /**
         * adds german vat tax rate to every product
         * @since 1.1.5beta
         * @access public
         * @hook woocommerce_checkout_item_subtotal
         * @author ap
         * @param float $amount
         * @param array $item
         * @param int $item_id
         * @return string
         */
        public static function add_mwst_rate_to_product_item($amount, $item, $item_id)
        {
        }
        /**
         * adds german mwst tax rate to every product in line in order-details.php
         * @since	1.1.5beta
         * @access	public
         * @author ap
         * @hook 	woocommerce_checkout_item_subtotal
         * @param float $subtotal
         * @param array $item
         * @param WC_Abstract_Order $order_obj
         * @return string
         */
        public static function add_mwst_rate_to_product_order_item($subtotal, $item, $order_obj)
        {
        }
        /**
         * add filter for mwst rate to the label on cart
         *
         * @access public
         * @static
         * @return void
         * @uses add_filter
         */
        public static function add_mwst_rate_to_cart_totals()
        {
        }
        /**
         * remove filter for mwst rate to the label on cart
         *
         * @access public
         * @static
         * @return void
         * @uses add_filter
         */
        public static function remove_mwst_rate_from_cart_totals()
        {
        }
        /**
         * Adds tax rate (percentage) to tax label (tax rate name) in cart and checkout.
         *
         * @wp-hook woocommerce_rate_label
         *
         * @param   string $rate_name
         * @param   string $key
         *
         * @return  string $new_rate_name
         */
        public static function add_rate_to_label($rate_name, $key)
        {
        }
        /**
         *  print tax hint after prices in single
         *
         * @author jj, ap
         * @hook woocommerce_single_product_summary
         * @uses remove_action, get_post_meta, get_the_ID, get_woocommerce_currency_symbol
         * @access public
         * @static
         * @return void
         */
        public static function woocommerce_de_price_with_tax_hint_single($call_function = '')
        {
        }
        /**
         * print tax hint after prices in loop
         *
         * @uses globals $product, remove_action
         * @access public
         * @hook woocommerce_after_shop_loop_item_title
         * @static
         * @author jj, ap
         * @return void
         */
        public static function woocommerce_de_price_with_tax_hint_loop()
        {
        }
        public static function get_wgm_product_summary($product = \NULL, $call_function = '', $show_price = \true)
        {
        }
        /**
         * Add German Market Price Data in WooCommerce Blocks
         *
         * @since 3.10.3.3
         * @wp-hook woocommerce_blocks_product_grid_item_html
         * @param String $markup
         * @param Array $data
         * @param WC_Product $product
         * @return String
         */
        public static function german_market_woocommerce_blocks_price($markup, $data, $product)
        {
        }
        public static function add_product_summary_price_part($parts, \WC_Product $product, $hook)
        {
        }
        /**
         * Adds taxes and other German Market product data to grouped products view
         *
         * @wp-hook woocommerce_get_stock_html (since 3.5.1)
         * @param String $html
         * @param WC_Prodduct $product
         * @return String
         */
        public static function add_grouped_product_info($html, $product)
        {
        }
        /**
         * Adds price filter to grouped product view.
         *
         */
        public static function init_grouped_product_adaptions()
        {
        }
        /**
         * Output the Shippingform
         * @access public
         * @static
         * @author jj, ap
         * @return string the Shipping Form
         */
        public static function second_checkout_form_shipping()
        {
        }
        /**
         * @access public
         * @static
         * @author ap
         * @since 2.3.5
         */
        public static function shipping_address_check()
        {
        }
        /**
         * @access public
         * @static
         * @author ap
         * @return bool
         */
        public static function should_be_shipping_to_shippingadress()
        {
        }
        /**
         * Output the billing information form
         * @access public
         * @static
         * @author jj, ap
         * @return string The billing information
         */
        public static function second_checkout_form_billing()
        {
        }
        /**
         * print hidden fields for given post array
         * determined by given field array
         *
         * @param array $post_array
         * @param array $fields_array
         * @static
         * @author jj
         * @return void
         */
        public static function print_hidden_fields($post_array, $fields_array)
        {
        }
        /**
         * create hidden input element for associative array
         *
         * @link https://gist.github.com/eric1234/5802030
         *
         * @param array  $array  associative array containing values
         * @param string $prefix name attribute of input element
         */
        public static function array_to_input($array, $prefix = '')
        {
        }
        /**
         * Change the button text, if on checkout page
         *
         * @param string $button_text
         * @static
         * @author jj, ap
         * @return string
         * @hook woocommerce_order_button_text
         */
        public static function change_order_button_text($button_text)
        {
        }
        public static function add_cart_estimate_notice()
        {
        }
        /**
         * Adds the Shipping Time to the Product title
         *
         * @param string $item_name
         * @param array $item
         * @static
         * @author jj, ap
         * @return string
         * @hook woocommerce_order_product_title
         */
        public static function add_delivery_time_to_product_title($item_name, $item)
        {
        }
        /**
         * Add product info to order item
         * @param int $order_id
         * @param int $item_id
         * @param WC_Product $product
         * @param int $qty
         * @param array $args
         * @return void
         * @wp-hook woocommerce_order_add_product
         */
        public static function add_deliverytime_to_order_item($item_id, $item, $order_id)
        {
        }
        /**
         * show the delivery time in overview
         * @access public
         * @static
         * @author ap
         * @return void
         * @return mixed
         * @hook woocommerce_after_shop_loop_item
         */
        public static function woocommerce_de_after_shop_loop_item()
        {
        }
        /**
         * Remove Checkbox for terms in checkout page (not pay for order page)
         * @access public
         * @static
         * @hook woocommerce_checkout_show_terms
         * @param Boolean $bool
         * @return Boolean
         */
        public static function remove_terms_from_checkout_page($bool)
        {
        }
        /**
         * Add redirected payment gateway host to allowed domains, cache first
         *
         * @since 3.11.0.1
         * @access public
         * @static
         * @hook woocommerce_payment_successful_result
         * @param Array $result
         * @return Array
         */
        public static function validate_payment_result_redirect($result)
        {
        }
        /**
         * Add cached redirect url to allowed domains for wp_safe_redirect
         *
         * @since 3.11.0.1
         * @access public
         * @static
         * @hook allowed_redirect_hosts
         * @param Array $domains
         * @return Array
         */
        public static function add_payment_result_to_allowed_hosts($domains)
        {
        }
        /**
         * Interupt checkout process after validation, to use the checkout site again, to fullfill
         * the german second checkout verify obligation
         * Since 3.0 this is only to redirect to second checkout page
         *
         * @access public
         * @static
         * @return void
         * @param array $posted $_POST array at hook position
         * @hook woocommerce_after_checkout_validation
         */
        public static function do_de_checkout_after_validation($posted, $errors)
        {
        }
        /**
         * Checkout Validation without 2nd Checkout page
         *
         * @access public
         * @since GM v3.2
         * @static
         * @return void
         * @param array $posted $_POST array at hook position
         * @hook woocommerce_after_checkout_validation
         */
        public static function checkout_after_validation_without_sec_checkout($data, $errors)
        {
        }
        /**
         * Validation for "pay order" page
         * Checks whether user agreed to revocation policy / revocation policy for digital products
         * See WooCommerce method WC_Form_Handler::pay_action
         * See WGM method WGM_Template::do_de_checkout_after_validation
         *
         * @access public
         * @static
         * @return void
         * @hook wp
         */
        public static function pay_order_validation_of_revocation_policy()
        {
        }
        /**
         * Rename the warning if user doesn't click the "terms and condictions" checkbox on pay-order page
         *
         * @since 3.6
         * @access public
         * @static
         * @return void
         */
        public static function change_warning_text_for_terms_and_condition_checkbox()
        {
        }
        /**
         * This is just to rename the warning if user doesn't click the "terms and condictions" checkbox on pay-order page
         *
         * @since 3.6
         * @return void
         * @hook wp
         */
        public static function pay_order_validation_of_terms_and_conditions()
        {
        }
        /**
         * Checks if cart consists of only digital produtct, mixed products or no digital products
         *
         * @access public
         * @since 3.6
         * @static
         * @return string 'not_digital', 'only_digital', 'mixed'
         */
        public static function is_digital_cart_or_order($order = \false)
        {
        }
        /**
         * Replace Placeholders throug page links
         *
         * @access public
         * @since 3.6.2
         * @static
         * @param String $text_with_placeholders
         * @return String
         */
        public static function replace_placeholders_terms_privacy_revocation($text_with_placeholders)
        {
        }
        /**
         * Gets the correct text for first checkbox (terms and coditions, prvivacy police, recovation policy)
         *
         * @access public
         * @since 3.6
         * @static
         * @return String
         */
        public static function get_terms_text()
        {
        }
        /**
         * Gets the correct text for first checkbox error (terms and coditions, prvivacy police, recovation policy)
         *
         * @access public
         * @since 3.6
         * @static
         * @return String
         */
        public static function get_terms_error_text($order = \false)
        {
        }
        /**
         * Return Class for <p> of checkboxes
         *
         * @access public
         * @static
         * @since 	3.7
         * @param 	String $field_name
         * @param 	Mixed $checkout_validated
         * @param 	Array $post_data
         * @return 	String
         */
        public static function get_validation_p_class($field_name, $checkout_validated, $post_data = array())
        {
        }
        /**
         * add the german disclaimer to checkout
         * @access public
         * @static
         * @author ap
         * @return string review order
         * @hook woocommerce_review_order_before_submit
         */
        public static function add_review_order()
        {
        }
        /**
         * Checkout Checkbox Loggin
         *
         * @since 3.8.2
         * @wp-hook woocommerce_checkout_order_processed
         * @param Integer $order_id
         * @param Array $posted_data
         * @param WC_Order $order
         * @return void
         **/
        public static function checkbox_logging($order_id, $posted_data, $order)
        {
        }
        /**
         * Get digitial item notice
         *
         * @return String
         **/
        public static function get_digital_item_notice()
        {
        }
        /**
         * Echo digitial item notice
         *
         * @return void
         **/
        public static function digital_items_notice()
        {
        }
        /**
         * Add digital item notice after checkboxes in checkout
         *
         * @wp-hook woocommerce_de_review_order_after_submit
         * @param String $review_order
         * @return String
         **/
        public static function add_digital_items_notice($review_order)
        {
        }
        /**
         * add the hidden field and set the woocommerce_de_in_first_checkout
         * @access public
         * @static
         * @author ap
         * @hook woocommerce_review_order_before_submit
         */
        public static function add_wgm_checkout_session()
        {
        }
        /**
         * Adds the selected sale label to variable products
         *
         * @wp-hook woocommerce_get_price_html
         *
         * @param String $html
         * @param WC_Product $product
         * @return string
         */
        public static function add_sale_label_to_variable_products($html, $product = \null)
        {
        }
        /**
         * Adds the selected sale label to the sale price
         *
         * @wp-hook woocommerce_get_price_html
         *
         * @param String $html
         * @param WC_Product $product
         * @return string
         */
        public static function add_sale_label_to_price($html, $product = \null, $hide_for_variable_product = \true)
        {
        }
        /**
         * Show shipping time and shipping costs
         * @access public
         * @static
         * @author jj, ap
         * @param WC_Product $product
         * @return void
         * @hook woocommerce_single_product_summary
         */
        public static function add_template_loop_shop($product = \NULL, $delivery_time_label_overwrite = \false)
        {
        }
        // end function
        /**
         * Retrieves the delivery time string from its term ID
         *
         * @param WC_Product $product
         * @return string|void
         */
        public static function get_deliverytime_string($product)
        {
        }
        /**
         * get shipping time for order item by saved meta
         *
         * @param WC_Order_Item_Meta_Product $item
         * @return Bollean
         */
        public static function get_delivery_time_string_by_term_id($item)
        {
        }
        /**
         * If the product is of of stock, do we want to show delivery time?
         *
         * @param WC_Product $product
         * @return Bollean
         */
        public static function show_delivery_time_if_product_is_not_in_stock($product)
        {
        }
        /**
         * Retrieves a term ID from a given product meta key.
         * Recursively fetches the parent term ID from a variation if not set
         *
         * @param $product
         * @return int
         */
        public static function get_term_id_from_product_meta($meta_key, $product = \NULL)
        {
        }
        /**
         *  add shipping costs and and discalmer to cart before the buttons
         * @access public
         * @static
         * @author jj, ap
         * @return void
         * @hook woocommerce_widget_shopping_cart_before_buttons
         */
        public static function add_shopping_cart()
        {
        }
        /**
         * add shipping costs and and discalmer to cart
         * @access public
         * @static
         * @author jj, ap
         * @return void
         * @hook woocommerce_cart_contents
         */
        public static function add_shop_table_cart()
        {
        }
        /**
         * Returns the Small Trading Exemption string based on the Shop location
         *
         * @param bool $country @depcrcated
         * @return String
         */
        public static function get_ste_string($country = \FALSE)
        {
        }
        /**
         * Returns the default Small Trading Exemption string based on the Shop location
         *
         * @since 3.5
         * @return String
         */
        public static function get_default_ste_string()
        {
        }
        /**
         * Returns the Small Trading Exemption string based on the Shop location
         *
         * @param bool $country
         *
         * @return mixed|void
         */
        public static function get_ste_string_invoice($country = \FALSE, $order = \false)
        {
        }
        /**
         * Outputs readonly checkout fields
         *
         * @author jj
         * @access public
         * @static
         * @param string $key key of field
         * @param array $args	contains a list of args for showing the field, merged with defaults (below
         * @return string
         */
        public static function checkout_readonly_field($key, $args = array())
        {
        }
        /**
         * Get last checkout Hints
         *
         * Likely not used anymore!
         * @static
         * @author jj
         * @return string
         */
        public static function get_last_checkout_hints()
        {
        }
        /**
         * returns shipping costs and withdraw disclaimer as html with links
         *
         * @access public
         * @static
         * @author jj, ap
         * @uses get_option
         * @return string html
         */
        public static function disclaimer_line()
        {
        }
        /**
         * get string from texttemplate directory, if filename is given, else it returns the parameter
         *
         * @access	public
         * @static
         * @author	et, ap
         * @param	string $name template filename
         * @param	array $args
         * @return	void
         */
        public static function include_template($name, $args = array())
        {
        }
        /**
         * get string from texttemplate directory, if filename is given, else it returns the parameter
         *
         * @access public
         * @param string $name template filename
         * @author jj, ap
         * @return string
         */
        public static function get_text_template($name)
        {
        }
        /**
         * Adds payment information to the mails
         * @deprecated
         * @param WC_Order $order The Woocommerce order object
         * @access public
         * @author ap
         * @since 2.0
         * @hook woocommerce_email_after_order_table
         */
        public static function add_paymentmethod_to_mails($order)
        {
        }
        /**
         * Get product short description by product id regarding variations
         *
         * @param Integer $product_id
         * @return String
         * @access public
         * @static
         * @since 3.5.7
         * @last-updated 3.12.6
         */
        public static function get_short_description_by_product_id($product_id)
        {
        }
        /**
         * adds the product short description to the checkout
         * @param string $title
         * @param string $item
         * @return string
         * @author ap
         * @access public
         * @static
         * @hook woocommerce_checkout_cart_item_quantity
         */
        public static function add_product_short_desc_to_checkout_title($title, $cart_item, $cart_item_key)
        {
        }
        /**
         * adds the product short description to the oder listing
         * @access public
         * @static
         * @author ap
         * @param string $title
         * @param string $item
         * @return string
         */
        public static function add_product_short_desc_to_order_title($title, $item)
        {
        }
        /**
         * adds the product short description to the oder listing
         * @access public
         * @static
         * @param int $item_id
         * @param WC_Order_Item $item
         * @param WC_Order $order
         * @param bool $plain_text
         * @return void
         * @hook woocommerce_order_item_meta_start'
         */
        public static function woocommerce_order_item_meta_start_short_desc($item_id, $item, $order, $plain_text = \false)
        {
        }
        /**
         * adds the requirements to the order listing
         * @access public
         * @static
         * @param int $item_id
         * @param WC_Order_Item $item
         * @param WC_Order $order
         * @param bool $plain_text
         * @return void
         * @hook woocommerce_order_item_meta_start
         */
        public static function woocommerce_order_item_meta_requirements($item_id, $item, $order, $plain_text = \false)
        {
        }
        /**
         * adds the product short description to the oder listing
         * @access public
         * @static
         * @param int $item_id
         * @param WC_Order_Item $item
         * @param WC_Order $order
         * @param $plain_text
         * @return void
         * @hook woocommerce_order_item_meta_start
         */
        public static function add_product_function_desc($title, $item)
        {
        }
        /**
         * wp-hook woocommerce_single_product_summary
         * @return void
         */
        public static function add_digital_product_prerequisits()
        {
        }
        /**
         * @param $_product
         *
         * @return string|void
         */
        public static function get_digital_product_prerequisits($_product)
        {
        }
        /**
         * returns the extra cost for non eu countries to the product description
         * still used in class WGM_Embed
         *
         * @access public
         * @static
         * @return String
         */
        public static function get_extra_costs_eu()
        {
        }
        /**
         * returns the extra cost for non eu countries to the product description
         *
         * @since GM 3.4.2
         * @wp-hook wgm_product_summary_parts
         * @access public
         * @static
         * @return String
         */
        public static function add_extra_costs_non_eu($parts, \WC_Product $product, $hook)
        {
        }
        /**
         * hide flat rate shipping if free shipping is available
         * @access public
         * @static
         * @param Array $rates
         * @param Array $package
         * @return array
         * @hook woocommerce_package_rates
         */
        public static function hide_flat_rate_shipping_when_free_is_available($rates, $package)
        {
        }
        public static function kur_notice()
        {
        }
        public static function kur_review_order_notice()
        {
        }
        public static function kur_review_order_item($formatted_total, $order = \false)
        {
        }
        /**
         * Adds a [Digital] notice to the product title of a digital product
         *
         * @wp-hook woocommerce_product_title
         *
         * @param $name
         * @param $_product
         *
         * @return mixed|void
         */
        public static function add_virtual_product_notice($name, $_product)
        {
        }
        /**
         * Add the "[Digital]" to product name
         *
         * @author  ChriCo
         *
         * @wp-hook woocommerce_order_get_items
         *
         * @param   array $items
         * @return  array $items
         */
        public static function filter_order_item_name($items)
        {
        }
        /**
         * Caches the Order Button HTML and removes it form checkout
         * @param $button_html
         * @author ap
         * @singe 2.4.13
         * @wp-hook woocommerce_order_button_html
         * @return string
         */
        public static function remove_order_button_html($button_html)
        {
        }
        /**
         * Prints the cahced Order Button HTML at the absolute end of the checkout page
         *
         * @author ap
         * @singe 2.4.13
         * @wp-hook woocommerce_review_order_after_submit
         * @return void
         */
        public static function print_order_button_html()
        {
        }
        /**
         * Adds excluding tax notice after cart and checkout total
         * @param string $value
         * @author ap, ch
         * @hook woocommerce_cart_totals_order_total_html
         * @since 2.5
         * @return string
         */
        public static function woocommerce_cart_totals_excl_tax_string($value)
        {
        }
        /**
         * Adds excluding tax notice after cart and checkout total
         * @param string $value
         * @author ap, ch
         * @hook woocommerce_cart_totals_order_total_html
         * @since 2.5
         * @return string
         */
        public static function woocommerce_tax_totals_excl_tax_string($value)
        {
        }
        /**
         * Get totals for display on pages and in emails.
         *
         * @param  array  $total_rows [description]
         * @param  object $order      [description]
         * @return array             [description]
         */
        public static function get_order_item_totals($total_rows, $order)
        {
        }
        /**
         * Hide WGMs Order Item Meta form showing up in backend order view
         * @param array $meta Order Item Meta keys
         * @author ap
         * @since 2.5
         * @wp-hook woocommerce_hidden_order_itemmeta
         * @return array
         */
        public static function add_hidden_order_itemmeta(array $meta)
        {
        }
        /**
         * Show Copoun html without removal link
         * @param WC_Coupon|string $coupon
         * @author ap
         * @since 2.5
         * @return void
         */
        public static function checkout_totals_coupon_html($coupon)
        {
        }
        /**
         * Get tax string for order total.
         *
         * @param  array    $tax_totals  Array of tax rate objects
         * @param  string   $tax_display incl|excl
         * @param  WC_Order $order
         * @param  string  $tax_total_display
         *
         * @return string              String indicating taxes included|excluded
         */
        public static function get_totals_tax_string($tax_totals, $tax_display, $order = \NULL, $tax_total_display = \NULL, $show_refund = \true)
        {
        }
        /**
         * Avoid products that are for free in checkout
         *
         * @version 3.0.2
         * @wp-hook woocommerce_after_checkout_validation
         * @return void
         */
        public static function avoid_free_items_in_cart($data, $errors)
        {
        }
        /**
         * VC Compability
         *
         * @since GM v3.2
         * @param String $content
         * @return $content
         */
        public static function remove_vc_shortcodes($content)
        {
        }
        /**
         * Get Terms And Conditions Checkbox
         *
         * @since GM v3.2
         * @wp-hook woocommerce_de_add_review_order
         * @return void
         */
        public static function terms_and_conditions()
        {
        }
        /**
         * German Market Product Informations in Widgets
         *
         * @since GM v3.2
         * @wp-hook woocommerce_after_template_part
         * @param String $template_name
         * @return void
         */
        public static function widget_after_content_product($template_name, $template_path, $located, $args)
        {
        }
        /**
         * German Market Product Informations in Widgets
         *
         * @since GM v3.8.2
         * @wp-hook woocommerce_widget_product_item_end
         * @param Array $args
         * @return void
         */
        public static function widget_product_item_end($args)
        {
        }
        /**
         * German Market Product Informations in Mini Cart
         *
         * @since GM v3.2
         * @wp-hook woocommerce_widget_cart_item_quantity
         * @param String $html_string
         * @param Array $cart_item
         * @param String $cart_item_key
         * @return void
         */
        public static function mini_cart_price($html_string, $cart_item, $cart_item_key)
        {
        }
        /**
         * Delivery Time in Checkout: Add item meta
         *
         * @wp-hook woocommerce_add_cart_item_data
         * @since GM v3.2
         * @static
         * @access public
         * @param Array $cart_item_data
         * @param Integer $product_id
         * @param Integer $variation_id
         * @return Array
         **/
        public static function delivery_time_co_woocommerce_add_cart_item_data($cart_item_data, $product_id, $variation_id)
        {
        }
        /**
         * Delivery Time in Checkout: Add item meta from session
         *
         * @wp-hook woocommerce_add_cart_item_data
         * @since GM v3.2
         * @static
         * @access public
         * @param Array $cart_item_data
         * @param Array $cart_item_session_data
         * @param String $cart_item_key
         * @return Array
         **/
        public static function delivery_time_co_woocommerce_get_cart_item_from_session($cart_item_data, $cart_item_session_data, $cart_item_key)
        {
        }
        /**
         * Delivery Time in Checkout: Show Item Meta in Checkout
         *
         * @wp-hook woocommerce_add_cart_item_data
         * @since GM v3.2
         * @static
         * @access public
         * @param Array $data
         * @param Array $cart_item
         * @return Array
         **/
        public static function delivery_time_co_woocommerce_get_item_data($data, $cart_item)
        {
        }
        /**
         * Attributes in product names: Cart, Checkout
         *
         * @wp-hook woocommerce_cart_item_name
         * @since GM v3.4
         * @static
         * @access public
         * @param String $name
         * @param Array $cart_item
         * @param String $cart_item_key
         * @return String
         **/
        public static function attribute_in_product_name($name, $cart_item, $cart_item_key)
        {
        }
        /**
         * Attributes in product names: Order name
         *
         * @wp-hook woocommerce_order_item_name
         * @since GM v3.4
         * @static
         * @access public
         * @param String $name
         * @param WC_Order_Item_Product $item
         * @param Boolean $is_visible
         * @return String
         **/
        public static function attribute_in_product_name_order($name, $item, $is_visible = \false)
        {
        }
        /**
         * No user login in second checkout
         *
         * @wp-hook option_woocommerce_enable_checkout_login_reminder
         * @since GM v3.4.1
         * @static
         * @access public
         * @param String $value
         * @param String $option
         * @return String
         **/
        public static function remove_login_from_second_checkout($value, $option)
        {
        }
        /**
         * Privacy Declaration for My Account Registration
         *
         * @wp-hook woocommerce_register_form
         * @since 3.6
         * @static
         * @access public
         * @return void
         **/
        public static function my_account_registration_fields()
        {
        }
        /**
         * Privacy Declaration for Product Reviews
         *
         * @wp-hook woocommerce_product_review_comment_form_args
         * @since 3.6.2
         * @static
         * @access public
         * @param Array $comment_form
         * @return Array
         **/
        public static function product_review_privacy_policy($comment_form)
        {
        }
        /**
         * Privacy Declaration Error Text for Product Reviews
         *
         * @wp-hook preprocess_comment
         * @since 3.6.3
         * @static
         * @param Array $commentdata
         * @access public
         * @return Array
         **/
        public static function product_review_privacy_policy_validation($commentdata)
        {
        }
        /**
         * Privacy Declaration Error Text for My Account Registration
         *
         * @wp-hook woocommerce_registration_errors
         * @since 3.6
         * @static
         * @param WP_Errors $errors
         * @access public
         * @return WP_Errors
         **/
        public static function my_account_registration_fields_validation_and_errors($errors)
        {
        }
        /**
         * Has Customer chosen a local pickup for delivery
         *
         * @since 3.6.2
         * @static
         * @access public
         * @return Boolean
         **/
        public static function is_cart_local_pickup()
        {
        }
        /**
         * Has Customer chosen a local pickup for delivery in order
         *
         * @since 3.6.2
         * @static
         * @access public
         * @return Boolean
         **/
        public static function is_order_local_pickup($order)
        {
        }
        /**
         * Save Customer Note for handling returning to first checkout
         *
         * @since 3.8.2
         * @static
         * @access public
         * @wp-hook woocommerce_checkout_get_value
         * @param  String $value
         * @param  String $key
         * @return String
         **/
        public static function woocommerce_checkout_get_value_order_comments($value, $key)
        {
        }
        /**
         * Save "ship_to_different_address" for handling returning to first checkout
         *
         * @since 3.8.2
         * @static
         * @wp-hook woocommerce_ship_to_different_address_checked
         * @access public
         * @param  Boolean $boolean
         * @return Boolean
         **/
        public static function woocommerce_ship_to_different_address_checked($boolean)
        {
        }
        /**
         * Get German Market Data of a variable Product (quick)
         *
         * @since 3.9.2
         * @static
         * @access public
         * @param  WC_Product_Variable $variable_product
         * @param  String $type
         * @return String
         **/
        public static function get_variable_data_quick($variable_product, $type)
        {
        }
    }
    /**
     * Class WGM_Tax
     *
     * This class contains helper functions to calculate the tax and some formatting functions
     *
     * @author  ChriCo
     */
    class WGM_Tax
    {
        protected static $run_time_cache = array();
        /**
         * Add rate percent to tax labels if show tax == 'excluded'
         *
         * @since GM 3.2
         * @wp-hook woocommerce_cart_tax_totals
         * @param Array $tax_totals
         * @param WC_Cart OR WC_Order $cart_or_order
         * @return Array
         **/
        public static function woocommerce_cart_tax_or_order_totals($tax_totals, $cart_or_order)
        {
        }
        /**
         * @param $enabled
         *
         * @return bool
         */
        public static function is_cart_tax_enabled($enabled)
        {
        }
        /**
         * Returns true if the current Shop has activated the "kur"-option (*K*lein*u*nternehmer*r*egelung).
         *
         * @author  ChriCo
         *
         * @issue   #418
         * @return  bool true|false
         */
        public static function is_kur()
        {
        }
        /**
         * Returns the formatted split tax html
         *
         * @param   array  $rates
         * @param   string $type
         *
         * @return  string $html
         */
        public static function get_split_tax_html($rates, $type, $order = \null)
        {
        }
        /**
         * Returns the tax string for excl/incl tax
         *
         * @author  ChriCo
         *
         * @param   string $type
         *
         * @return  string $msg
         */
        public static function get_excl_incl_tax_string($label, $type, $rate, $amount)
        {
        }
        /**
         * Calculating the split tax on ajax callback in backend on "update tax"/"update sum"
         *
         * @wp-hook woocommerce_order_item_after_calculate_taxes
         * @wp-hook woocommerce_order_item_shipping_after_calculate_taxes
         * @wp-hook woocommerce_order_item_fee_after_calculate_taxes
         *
         * @param WC_Order_Item $order_item
         * @param Array  $calculate_tax_for
         *
         * @return    void
         */
        public static function recalc_taxes($order_item, $calculate_tax_for)
        {
        }
        /**
         * Calculating the split tax on ajax callback in backend on "update tax"/"update sum"
         *
         * @wp-hook    woocommerce_saved_order_items
         *
         * @param    int $order_id
         *
         * @return    void
         */
        public static function re_calculate_tax_on_save_order_items($order_id)
        {
        }
        /**
         * Calculating the tax based on default rate and reduced rate
         *
         * @param   int                   $price
         * @param   WC_Cart|WC_Order|null $cart_or_order
         *
         * @return  array $rates array(
         *                          'sum'   => Integer,
         *                          'rates  => array(
         *                              rate_id => array(
         *                                  'sum'       => Integer
         *                                  'rate'      => String
         *                                  'rate_id'   => Integer
         *                              ),
         *                              ...
         *                          )
         */
        public static function calculate_split_rate($price, $cart_or_order = \NULL, $bypass_digital = \FALSE, $fee_id = '', $type = 'shipping', $use_as_gross = \true, $check_condition = \true, $rate = \NULL)
        {
        }
        public static function add_tax_part($parts, $product)
        {
        }
        /**
         * print including tax for products
         *
         * @access public
         * @static
         * @author jj, ap
         *
         * @param WC_Product $product
         *
         * @return string
         */
        public static function text_including_tax($product, $cart = \false)
        {
        }
        public static function get_tax_line(\WC_Product $product, $cart = \false)
        {
        }
        /**
         * If a user becomes vat exempted (or it is not vat exempted any more)
         * the variation prices aren't correct in the shop.
         * This is also happening without German Market!
         * So you can use this also for other plugin compabilties
         *
         * @since v3.2
         * @wp-hook woocommerce_get_variation_prices_hash
         * @param String $hash
         * @return $String
         */
        public static function woocommerce_get_variation_prices_hash($hash)
        {
        }
        /**
         * Add a line break to incl excl string in emails
         *
         * @since v3.2
         * @wp-hook woocommerce_email_order_details
         * @param WC_Order $order
         * @param Bool $send_to_admin
         * @param Bool $plain_text
         * @param $email
         * @return void
         **/
        public static function new_line_excl_incl_string_in_emails($order, $sent_to_admin, $plain_text, $email = \false)
        {
        }
        /**
         * Add a line break to incl excl string in emails
         *
         * @since v3.5.2
         * @wp-hook gm_before_email_customer_confirm_order
         * @param WC_Order $order
         * @param Bool $send_to_admin
         * @param Bool $plain_text
         * @return void
         **/
        public static function new_line_excl_incl_string_in_email_customer_confirm_order($order, $sent_to_admin, $plain_text)
        {
        }
        /**
         * Add a line break to incl excl string in emails
         *
         * @since v3.2
         * @last change: v3.5 - removed <br /> again, too much line break in emails, may remove that completely in next WC update
         * @wp-hook wgm_get_excl_incl_tax_string
         * @param String $msg
         * @param String $type
         * @param String $rate
         * @param String $amount
         * @return String
         **/
        public static function email_wgm_get_excl_incl_tax_string($msg, $type, $rate, $amount)
        {
        }
        /**
         * Remove tax line form order item totals if "kur" ist active
         *
         * @since v3.2.2
         * @wp-hook woocommerce_get_order_item_totals
         * @param Array $total_rows
         * @param WC_Order $order
         * @return Array
         **/
        public static function remove_tax_order_item_totals($total_rows, $order)
        {
        }
        /**
         * Calculate new net rate if splittax is disabled and "gross function" is disabled, too
         *
         * @since v3.7.1
         * @param  float $net_cost
         * @return Array
         **/
        public static function get_calculate_net_rate_without_splittax($net_cost)
        {
        }
        /**
         * Get Applied Tax Rate from Cart
         *
         * @since v3.7.1
         * @return Array
         **/
        public static function get_applied_tax_class_if_splittax_is_off()
        {
        }
        /**
         * Calculate new net rate if splittax is disabled, but "gross function" is enabled
         *
         * @since v3.5
         * @param  float $net_cost
         * @return Array
         **/
        public static function calculate_gross_rate_without_splittax($net_cost)
        {
        }
        /**
         * WooCommerce summarize taxes by code, 
         * this code should contain the percent rate, 
         * so rates with same label but different percent are not summarized
         *
         * @wp-hook woocommerce_rate_code
         * @param String $code_string
         * @param Integer $key
         * @return String
         */
        public static function woocommerce_rate_code_add_percent_to_code($code_string, $key)
        {
        }
        /**
         * Get rate percent of tax_rate_id and an WC_Order, 
         * Should be used because of the case that WC_Tax::get_rate_percent returns 0 if
         * the rate_id does not exist anymore in WooCommerce
         *
         * @param String $rate_id
         * @param WC_Order $order
         * @return String
         */
        public static function get_rate_percent_by_rate_id_and_order($rate_id, $order)
        {
        }
        /**
         * Get Array of all tax information of shipping of fees of an order
         * usefull for refunds with split tax
         * 
         * @param WC_Order $order
         * @param String $type
         * @return Array
         */
        public static function get_shipping_or_fee_parts_by_order($order, $type = 'shipping')
        {
        }
    }
    /**
     * Class WGM_Tax_Hooks
     *
     * This Class is loaded in the plugin file
     * Load WGM_Tax by autoloader
     */
    class WGM_Tax_Hooks
    {
        public static function init()
        {
        }
        /**
         * Returns true if the current Shop has activated the "kur"-option (*K*lein*u*nternehmer*r*egelung).
         *
         * @author  ChriCo
         *
         * @issue   #418
         * @return  bool true|false
         */
        public static function is_kur()
        {
        }
    }
    class WGM_Shipping
    {
        public static function add_shipping_part($parts, $product)
        {
        }
        /**
         * Shipping page link template.
         *
         * @author glueckpress
         * @access public
         * @static
         * @since  2.6
         * @return string
         */
        public static function shipping_page_link($product = \NULL)
        {
        }
        /**
         * Get shipping string for frontend
         *
         * @param WC_Product $product
         * @return String
         */
        public static function get_shipping_page_link($product = \NULL)
        {
        }
        /**
         * Recalculate the split tax for the shipping-methods
         *
         * @author  ChriCo
         *
         * @wp-hook woocommerce_package_rates
         *
         * @param   array $rates
         *
         * @return  array $rates
         */
        public static function add_taxes_to_package_rates($rates)
        {
        }
        /**
         * Remove the taxes when "kur" (*K*lein*u*nternehmer*r*egelung) is enabled
         *
         * @author  ChriCo
         *
         * @wp-hook woocommerce_get_shipping_tax
         *
         * @param   int $taxes
         *
         * @return  int $taxes
         */
        public static function remove_kur_shipping_tax($taxes)
        {
        }
        /**
         * Adding the taxes to shipping method
         *
         * @author  ChriCo
         *
         * @wp-hook woocommerce_cart_shipping_method_full_label
         *
         * @param   string   $label
         * @param   stdClass $method
         *
         * @return  string $label
         */
        public static function add_shipping_tax_notice($label, $method)
        {
        }
        /**
         * Adding taxes to shipping to output
         *
         * @wp-hook woocommerce_order_shipping_to_display
         *
         * @param   string   $shipping
         * @param   WC_Order $order
         *
         * @return  string $shipping
         */
        public static function shipping_tax_for_thankyou($shipping, $order)
        {
        }
    }
    /**
     * Class WGM_Compatibilities
     *
     * German Market Userinterface
     *
     * @author MarketPress
     */
    class WGM_Compatibilities
    {
        public static $theme_compatibilities_path;
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Compatibilities
         */
        public static function get_instance()
        {
        }
        /**
         * Plugin WP Staging
         * Restore Options for Invoice PDF Add-On & Running Invoice PDF Add-On
         *
         * @since Version: 3.10.6.0.1
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function wp_staging_repair_invoice_and_running_invoice_number_add_on_options()
        {
        }
        /**
         * Theme Neve
         *
         * @since Version: 3.10.4.1
         * @wp-hook after_setup_theme
         * @tested with theme version 2.8.2
         * @return void
         */
        public function theme_neve()
        {
        }
        /**
         * Theme Open Shop
         *
         * @since v3.10.3
         * @tested with theme version 1.0.9
         * @wp-hook after_setup_theme
         * @return void
         */
        public function theme_open_shop()
        {
        }
        /**
         * Theme Beaver Builder Theme
         *
         * @since v3.10.2
         * @tested with theme version 1.7.6.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public function theme_bb_theme()
        {
        }
        /**
         * Theme Stockholm
         *
         * @since v3.10.2
         * @tested with theme version 5.2.1
         * @wp-hook after_setup_theme
         * @return void
         */
        public function theme_stockholm()
        {
        }
        /**
         * Theme Massive Dynamic
         *
         * @since v3.10.1
         * @tested with theme version 7.3
         * @wp-hook after_setup_theme
         * @return void
         */
        public function massive_dynamic()
        {
        }
        /**
         * Theme Savory
         *
         * @since v3.10.1
         * @tested with theme version 1.9
         * @wp-hook after_setup_theme
         * @return void
         */
        public function theme_savory()
        {
        }
        /**
         * Theme Biagiotti
         *
         * @since v3.10.1
         * @tested with theme version 1.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public function theme_biagiotti()
        {
        }
        /**
         * Theme Faith
         *
         * @since v3.10.1
         * @tested with theme version 1.1
         * @wp-hook after_setup_theme
         * @return void
         */
        public function theme_faith()
        {
        }
        /**
         * Theme Eveland
         *
         * @since v3.10.1
         * @tested with theme version 1.3.8
         * @wp-hook after_setup_theme
         * @return void
         */
        public function theme_eveland()
        {
        }
        /**
         * Theme Bolge
         *
         * @since v3.10.1
         * @tested with theme version 1.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public function theme_bolge()
        {
        }
        /**
         * Theme Kava
         *
         * @since v3.10.0.1
         * @tested with theme version 2.0.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public function theme_kava()
        {
        }
        /**
         * Theme Rehub
         *
         * @since v3.10.0.1
         * @tested with theme version 9.3.3
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_rehub()
        {
        }
        /**
         * Theme Sovereign
         *
         * @since v3.9.1.12
         * @tested with theme version 1.4
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_sovereign()
        {
        }
        /**
         * Theme Cerato
         *
         * @since v3.9.1.11
         * @tested with theme version 1.3.9
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_cerato()
        {
        }
        /**
         * Theme shopping
         *
         * @since v3.10.1
         * @tested with theme version 4.1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_shopping()
        {
        }
        /**
         * Theme Ken
         *
         * @since v3.9.1.9
         * @tested with theme version 4.2.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_ken()
        {
        }
        /**
         * Theme ToyShop (Storefront Child Theme): 2x price in loop
         *
         * @since v3.9.1.9
         * @tested with theme version 2.0.19
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_toyshop()
        {
        }
        /**
         * Theme ToyShop: CSS for Loop Price
         *
         * @since v3.9.1.9
         * @tested with theme version 2.0.19
         * @wp-hook wp_head
         * @return void
         */
        function theme_support_css_for_theme_toyshop()
        {
        }
        /**
         * Theme Vermeil: 2x price in product
         *
         * @since v3.9.1.1
         * @tested with theme version 1.0.0
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_vermeil()
        {
        }
        /**
         * Theme Coi
         *
         * @since v3.9.2
         * @tested with theme version 1.0.5
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_coi()
        {
        }
        /**
         * Theme Werkstatt
         *
         * @since v3.9.2
         * @tested with theme version 4.2.1.2
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_werkstatt()
        {
        }
        /**
         * Theme Naturalife
         *
         * @since v3.9.2
         * @tested with theme version 1.7.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_naturalife()
        {
        }
        /**
         * Theme Divi: Price Data if intern Page Builder ist used
         *
         * @since v3.9.2
         * @tested with theme version 3.29.2
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_divi()
        {
        }
        /**
         * Theme Divi: GM Price Data after Page Builder Pri
         *
         * @since v3.9.2
         * @tested with theme version 3.29.2
         * @wp-hook wgm_template_woocommerce_de_price_with_tax_hint_single_return
         * @param String $price
         * @param WC_Product $product
         * @return String
         */
        function theme_divi_page_builder_price_data($price, $product)
        {
        }
        /**
         * Theme Divi: Remove Price from output_parts
         *
         * @since v3.9.2
         * @tested with theme version 3.29.2
         * @wp-hook wgm_product_summary_parts_after
         * @param Array $output_parts
         * @param WC_Product $product
         * @param String $hook
         * @return Array
         */
        function theme_divi_remove_price_outpout_parts($output_parts, $product, $hook)
        {
        }
        /**
         * Theme Divi: Exception in hint single: Dont's show data if divi page builder is used
         *
         * @since v3.9.2
         * @tested with theme version 3.29.2
         * @wp-hook wgm_template_woocommerce_de_price_with_tax_hint_single_return
         * @param Boolean $boolean
         * @param WC_Product $product
         * @return Boolean
         */
        function theme_divi_hint_single_exception($boolean, $product)
        {
        }
        /**
         * Theme Makali: 2x price
         *
         * @since v3.9.2
         * @tested with theme version 1.2.8
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_makali()
        {
        }
        /**
         * Theme Kameleon: 2x price
         *
         * @since v3.9.2
         * @tested with theme version 2.0
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_kameleon()
        {
        }
        /**
         * Theme Hermes: 2x price, Bakery
         *
         * @since v3.9.2
         * @tested with theme version 1.7.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_hermes()
        {
        }
        /**
         * Theme WPLMS: 2x price
         *
         * @since v3.9.2
         * @tested with theme version 3.9.5
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_wplms()
        {
        }
        /**
         * Theme SweetTooth: 2x price in product
         *
         * @since v3.9.2
         * @tested with theme version 1.3
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_sweettooth()
        {
        }
        /**
         * Theme Retailer: 2x price in shop, change position
         *
         * @since v3.9.1
         * @tested with theme version 2.15
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_theretailer()
        {
        }
        /**
         * Theme Mesmerize: 2x price in loop
         *
         * @since v3.9.1
         * @tested with theme version 1.6.82
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_mesmerize()
        {
        }
        /**
         * Theme Mesmerize: Price in Loop
         *
         * @since v3.9.1
         * @tested with theme version 1.6.82
         * @wp-hook woocommerce_after_template_part
         * @param String $template_name
         * @param String $template_path
         * @param String $located
         * @param Array $args
         * @return void
         */
        function theme_support_mesmerize_loop_price($template_name, $template_path, $located, $args)
        {
        }
        /**
         * Theme Oxygen: Price and Bakery Builder
         *
         * @since v3.8.2
         * @tested with theme version 5.2.5
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_oxygen()
        {
        }
        /**
         * Theme Highlight: 2x Price in Loop
         *
         * @since v3.8.2
         * @tested with theme version 1.0.15
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_highlight()
        {
        }
        /**
         * Theme CiyaShop: 2x Price in Loop
         *
         * @since v3.8.2
         * @tested with theme version 3.4.2
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_ciyashop()
        {
        }
        /**
         * Theme Total: 2x Price in Loop
         *
         * @since v3.8.2
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_salient()
        {
        }
        /**
         * Theme Total: 2x Price Data in Widgets caused bei Bakery
         *
         * @since v3.8.2
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_total()
        {
        }
        /**
         * Theme Total: 2x Price Data in Widgets caused bei Bakery
         *
         * @since v3.8.2
         * @wp-hook woocommerce_get_price_html
         * @param Stirng $price
         * @param WC_Product $product
         * @return String
         */
        function theme_support_total_widget_price($price, $product)
        {
        }
        /**
         * German Market E-Maill footer does not contain page content
         *
         * @since v3.8.2
         * Theme Enfold with Avia Advanced Layout Builder, tested with Theme Version 4.4.1
         * @wp-hook german_market_email_footer_the_content_filter
         * @return void
         */
        function avia_advanced_layout_builder($boolean, $post)
        {
        }
        /**
         * Theme Verdure: 2x
         *
         * @since v3.8.2
         * @tested with theme version 1.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_verdure()
        {
        }
        /**
         * Style Fixes For Themes With Bakery Exception
         *
         * @since v3.8.2
         * @wp-hook wp_head
         * @return void
         */
        function theme_support_css_for_bakery_fixes_in_loop()
        {
        }
        /**
         * Theme DieFinnhutte: 2xPrice in Loop
         *
         * @since v3.8.2
         * @tested with theme version 1.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_diefinnhutte()
        {
        }
        /**
         * Remove price if $hook == 'single' but we are in a theme or 3rd plugin loop
         *
         * @since v3.9.1
         * @wp-hook wgm_product_summary_parts_after
         * @param Array $output_parts
         * @param WC_Product $product
         * @param String $hook
         * @return Array
         */
        function theme_support_remove_price_in_other_loops($output_parts, $product, $hook)
        {
        }
        /**
         * Theme Uncode: [digital][digital]
         *
         * @since v3.8.2
         * @tested with theme version 2.0.2
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_uncode()
        {
        }
        /**
         * Theme Uncode: [digital][digital] Callback
         *
         * @since v3.8.2
         * @tested with theme version 2.0.2
         * @wp-hook woocommerce_cart_item_name
         * @return String
         */
        function theme_support_uncode_remove_double_digital($title, $cart_item, $cart_item_key)
        {
        }
        /**
         * Theme Grosso: Double Price in loop
         *
         * @since v3.8.2
         * @tested with theme version 1.3.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_grosso()
        {
        }
        /**
         * Theme Grosso:  Price CSS Hack
         *
         * @since v3.8.2
         * @tested with theme version 1.3.1
         * @wp-hook wp
         * @return void
         */
        function theme_support_grosso_css()
        {
        }
        /**
         * Theme TM Robin: Double Price
         *
         * @since v3.8.2
         * @tested with theme version 1.7.7
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_tm_robin()
        {
        }
        /**
         * Theme TM Robin: Double Price CSS Hack
         *
         * @since v3.8.2
         * @tested with theme version 1.7.7
         * @wp-hook wp
         * @return void
         */
        function theme_support_tm_robin_css()
        {
        }
        /**
         * Theme Kanna: Double Price
         *
         * @since v3.8.2
         * @tested with theme version 1.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_appetito()
        {
        }
        /**
         * Theme Superfood: Double Price
         *
         * @since v3.8.2
         * @tested with theme version 1.4
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_superfood()
        {
        }
        /**
         * Plugin JetWooBuilder For Elementor (Add GM Data after)
         *
         * @since v3.8.2
         * @tested with plugin version 1.3.6
         * @wp-hook jet-woo-builder/template-functions/product-price
         * @param  String $price
         * @return String
         */
        function plugin_jet_woo_builder_price_data($price)
        {
        }
        /**
         * Theme Yolo Robino: Double Price single product
         *
         * @since v3.8.2
         * @tested with theme version 1.3.4
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_yolo_robino()
        {
        }
        /**
         * Theme Elaine: Double Price in loop and single product
         *
         * @since v3.8.2
         * @tested with theme version 1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_elaine()
        {
        }
        /**
         * Theme Elaine: Align German Market Data to center
         *
         * @since v3.8.2
         * @tested with theme version 1.0
         * @wp-hook wp_head
         * @return void
         */
        function theme_support_elaine_css()
        {
        }
        /**
         * Theme minera: GM Data in loop is missing
         *
         * @since v3.8.2
         * @tested with theme version 2.6
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_minera()
        {
        }
        /**
         * Theme depot: Double Price
         *
         * @since v3.8.2
         * @tested with theme version 1.4
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_depot()
        {
        }
        /**
         * WPBakeryVisualComposer: Price Infos after Price
         *
         * @since v3.8.1
         * @wp-hook woocommerce_get_price_html
         * @param String $price
         * @param WC_Product $product
         * @return String
         */
        function wp_bakery_woocommerce_get_price_html($price, $product)
        {
        }
        /**
         * Divi BodyCommerce: Price Infos after Price
         *
         * @since v3.8.2
         * @wp-hook woocommerce_get_price_html
         * @param String $price
         * @param WC_Product $product
         * @return String
         */
        function divi_bodycommerce_get_price_html($price, $product)
        {
        }
        /**
         * Theme DFD Native: Double Price
         *
         * @since v3.8.1
         * @tested with theme Version 1.4.0
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_dfd_native()
        {
        }
        /**
         * Theme Page Builder Framework: Double Price in Loop
         *
         * @since v3.8.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_page_builder_framework()
        {
        }
        /**
         * Plugin WooCommerce Bookings: Show Data in Invoice PDF
         *
         * @since v3.8.1
         * @tested with plugin version 1.12.2
         * @wp-hook wp_wc_infoice_pdf_item_meta_end_markup
         * @return void
         */
        function wc_bookings_wp_wc_infoice_pdf_item_meta_end_markup($item_meta_end, $item_id, $item, $order)
        {
        }
        /**
         * Theme Justshop: Double Price on Product Page
         *
         * @since v3.8.1
         * @tested with theme version 4.6
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_jutshop()
        {
        }
        /**
         * Theme Planetshine Polaris: Double Price on Product Page and Quickview
         *
         * @since v3.8.1
         * @tested with theme version 1.1.36
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_planetshine_polaris()
        {
        }
        /**
         * Theme Planetshine Polaris: Double Price on Product Page and Quickview
         *
         * @since v3.8.1
         * @tested with theme version 1.1.36
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_planetshine_polaris_quickview()
        {
        }
        /**
         * Theme Hypermarket: Replace GM Info in Loop
         *
         * @since v3.8.1
         * @tested with theme version 1.5.5
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_hypermarket()
        {
        }
        /**
         * Theme Electro
         *
         * @since v3.8.1 
         * @updated 3.10.4.1
         * @tested with theme version 2.5.8
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_electro()
        {
        }
        /**
         * Theme Adorn: Doubled Price on product page and loop
         *
         * @since v3.7.2
         * @tested with theme version 1.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_adorn()
        {
        }
        /**
         * Theme Adorn: Correct Loop Data
         *
         * @since v3.7.2
         * @tested with theme version 1.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_adorn_loop_price()
        {
        }
        /**
         * Theme Variegated: Doubled Price on product page and loop
         *
         * @since v3.7.2
         * @tested with theme version 1.0.0
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_variegated()
        {
        }
        /**
         * Theme Variegated: Doubled Price on product page and loop, reorder on single product
         *
         * @since v3.7.2
         * @tested with theme version 1.0.0
         * @wp-hook wp_head
         * @return void
         */
        function theme_support_variegated_css()
        {
        }
        /**
         * Divi Page Builder: JS Conflicts
         *
         * @since v3.7.2
         * @wp-hook wp_enqueue_scripts
         * @return void
         */
        function divi_page_builder()
        {
        }
        /**
         * Theme Ordo: Doubled Price on product page
         *
         * @since v3.7.2
         * @tested with theme version 1.1.4
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_ordo()
        {
        }
        /**
         * Plugins YITH WooCommerce Best Sellers & YITH WooCommerce Wishlist: Doubled [Digital]
         *
         * @since v3.7.2
         * @tested with plugin YITH WooCommerce Best Sellers Premium version 1.1.4
         * @tested with plugin YITH WooCommerce Wishlist Premium version 2.2.4
         * @wp-hook woocommerce_product_title
         * @param String $title
         * @param WC_Product $product
         * @return String
         */
        function plugins_yith_wl_bs($title, $product)
        {
        }
        /**
         * Theme Flatsome: Add German Market Data after single price
         *
         * @since 	v3.7.2
         * @tested with theme version 3.6.1
         * @wp-hook 	woocommerce_after_template_part
         * @param 	String $template_name
         * @param 	String $template_path
         * @param 	String $located
         * @param 	Array $args
         * @return 	void
         */
        function theme_flatsome_price_data($template_name, $template_path, $located, $args)
        {
        }
        /**
         * Plugin Elementor: Add extra class prefix to legacy-itemprop-offers
         * used for variable products: don't hide price infos of products in widgets
         *
         * @since 	v3.10.01
         * @wp-hook 	wgm_template_woocommerce_de_price_with_tax_hint_single_class_prefix
         * @param 	String $class_prefix
         * @param 	String $call_function
         * @param 	WC_Product $product
         * @return 	String
         */
        public function plugin_elementor_class_prefix($class_prefix, $call_function, $product)
        {
        }
        /**
         * Plugin Elementor: Add German Market Data after single price
         *
         * @since 	v3.7.2
         * @tested with plugin version 2.2.5
         * @wp-hook 	woocommerce_after_template_part
         * @param 	String $template_name
         * @param 	String $template_path
         * @param 	String $located
         * @param 	Array $args
         * @return 	void
         */
        function plugin_elementor_price_data($template_name, $template_path, $located, $args)
        {
        }
        /**
         * Plugin Woolentor Addons: Double Price in QuickView
         *
         * @since v3.9.2
         * @tested with plugin version 1.5.3
         * @wp-hook wgm_product_summary_parts_after
         * @param Array $output_parts
         * @param WC_Product $product
         * @param String $hook
         * @return Array
         */
        function plugin_woolentor_addons($output_parts, $product, $hook)
        {
        }
        /**
         * Plugin Elementor: Remove Filters from Plugin
         * before sending Email with German Market Content
         *
         * @since v3.7.1
         * @tested with plugin version 2.1.6
         * @wp-hook wgm_email_before_get_email_de_footer
         * @return void
         */
        function plugin_elementor_remove_filters()
        {
        }
        /**
         * Plugin Elementor: Add filters again from plugin
         * after sending Email with German Market Content
         *
         * @since v3.7.1
         * @tested with plugin version 2.1.6
         * @wp-hook wgm_email_after_get_email_de_footer
         * @return void
         */
        function plugin_elementor_add_filters_again()
        {
        }
        /**
         * Add wpautp tp content of tab content of fic add-on
         * for ingredients and allergens tabs
         *
         * @since v3.11.0.1
         * @tested with plugin version 4.5.5
         * @wp-hook gm_fic_tab_content_ingredients_by_id_content
         * @wp-hook gm_fic_tab_content_allergens_by_id_content
         * @return void
         */
        public function plugin_elementor_fic_add_on_tab_content($content)
        {
        }
        /**
         * Theme Amely: Doubled Price in loop and singe product pages
         *
         * @since v3.7
         * @tested with theme version 1.6.1
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_amely()
        {
        }
        /**
         * Plugin Wirecard Checkout Seamless: Show chosen payment type label on 2nd Checkout Page
         *
         * @since v3.7
         * @tested with plugin version 1.0.18
         * @wp-hook gm_2ndcheckout_gateway_label
         * @paran String $label
         * @return String
         */
        function wcs_gateway_2ndcheckout_label($label)
        {
        }
        /**
         * Theme iustore: Doubled Price in loop and singe product pages
         *
         * @since v3.6.4
         * @tested with theme version 1.8
         * @wp-hook init
         * @return void
         */
        function theme_support_iustore()
        {
        }
        /**
         * Theme iustore: Remove Theme Price
         *
         * @since v3.6.4
         * @tested with theme version 1.8
         * @wp-hook s7upf_product_price
         * @return void
         */
        function s7upf_product_price($html)
        {
        }
        /**
         * Theme Elessi: handsome-shop
         *
         * @since v3.6.3
         * @tested with theme version 1.0.9
         * @wp-hook init
         * @return void
         */
        function theme_support_handmade_shop()
        {
        }
        /**
         * Plugin HeidelpayCw
         *
         * With this Plugin registered customer have the user role "Subscriber" instead of "Customer"
         *
         * @since v3.6.3
         * @tested with plugin version 3.0.182
         * @wp-hook wgm_double_opt_in_activation_user_roldes
         * @return void
         */
        function wgm_double_opt_in_activation_user_roldes_heideplaycw($user_roles)
        {
        }
        /**
         * Theme Ronneby: Price in Loop & Product Pages
         *
         * @since v3.6.3
         * @tested with theme version 2.4.7
         * @wp-hook init
         * @return void
         */
        function theme_support_ronneby()
        {
        }
        /**
         * Theme Peony: Price in Loop
         *
         * @since v3.5.9
         * @wp-hook wp
         * @return void
         */
        function theme_support_peony()
        {
        }
        /**
         * Themes that uses an old version of 'cart/cart.php' of German Market
         * AND / OR
         * uses out cart table with tasxes but uses 'woocommerce_cart_item_subtotal' hook to display subtotals
         *
         * @since v3.5.8
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_cart_template_remove_taxes_in_subototal()
        {
        }
        /**
         * Theme XStore: Price in Product Pages
         *
         * @tested with theme version 7.2.3
         * @last-updated: v3.10.6.0.1
         * @since v3.5.7
         * @wp-hook wp
         * @return void
         */
        function theme_support_xstore()
        {
        }
        /**
         * Theme Sober: Checkboxes
         *
         * @since v3.8.2
         * @wp-hook wp_head
         * @return void
         */
        function theme_support_sober_css()
        {
        }
        /**
         * Theme Sober: Price in Shop
         *
         * @since v3.5.6
         * @wp-hook german_market_after_frontend_init
         * @return void
         */
        function theme_support_sober()
        {
        }
        /**
         * Theme Support: Remove GM Price in Shop
         *
         * @since v3.5.3
         * @wp-hook wgm_product_summary_parts
         * @param Array $output_parts
         * @param WC_Product $product
         * @param String $hook
         * @return Array
         */
        function theme_support_wgm_remove_price_in_summary_parts_in_shop($output_parts, $product, $hook)
        {
        }
        /**
         * Theme The7: Price in Loop
         *
         * @since v3.5.5
         * @last-updated v3.10.1
         * @tested with theme version 8.6.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public function theme_the7()
        {
        }
        /**
         * Theme Hestia Pro: Price in Loop
         *
         * @since v3.5.5
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_hestia_pro()
        {
        }
        /**
         * Remove Price in Shop
         *
         * @since v3.5.4
         * wp-hook wgm_product_summary_parts
         * @param Array $parts
         * @param WC_Product $product
         * @param String $hook
         * @return String
         **/
        function theme_support_hide_gm_price_in_loop($parts, $product, $hook)
        {
        }
        /**
         * Remove Price in Single Pages
         *
         * @since v3.7
         * wp-hook wgm_product_summary_parts
         * @param Array $parts
         * @param WC_Product $product
         * @param String $hook
         * @return String
         **/
        function theme_support_hide_gm_price_in_single($parts, $product, $hook)
        {
        }
        /**
         * Theme Kryia: Price in Loop
         *
         * @since v3.5.3
         * @wp-hook german_market_after_frontend_init
         * @return void
         */
        function theme_kriya()
        {
        }
        /**
         * Theme Kryia: Price in Loop, add DIVs
         *
         * @since v3.5.3
         * @wp-hook woocommerce_after_shop_loop_item
         * @return void
         */
        function theme_kriya_woocommerce_de_price_with_tax_hint_loop()
        {
        }
        /**
         * Theme Kryia: Price in Loop, don't show GM Price
         *
         * @since v3.5.3
         * @wp-hook wgm_product_summary_parts
         * @param Array $output_parts
         * @param WC_Product $product
         * @param String $hook
         * @return Array
         */
        function theme_kriya_wgm_product_summary_parts($output_parts, $product, $hook)
        {
        }
        /**
         * Theme Savoy: Payment Gateways in Checkout and TOC just once
         *
         * @version v3.6.2
         * @since v3.5.3
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_savoy()
        {
        }
        /**
         * Theme VG Vegawine: Remove double price in shop
         *
         * @since v3.5.3
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_vegawine()
        {
        }
        /**
         * Theme VG Mimosa: Remove double price in shop
         *
         * @since v3.8.2
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_mimosa()
        {
        }
        /**
         * Theme Woo Floating Cart: Qunatity in mini cart does not show up
         *
         * @since v3.5.3
         * @wp-hook german_market_after_frontend_init
         * @return void
         */
        function plugin_woo_floating_cart()
        {
        }
        /**
         * Theme Peddlar: Don't show any <a>-tags in product summary in loop
         *
         * @since v3.5.3
         * @wp-hook wgm_product_summary_html
         * @return void
         */
        function theme_support_peddlar($output_html, $output_parts, $product, $hook)
        {
        }
        /**
         * Plugin WPGlobus: Always set the option "Product Attributes in product name" to on
         *
         * @since v3.5.3
         * @wp-hook woocommerce_de_ui_options_products
         * @param Array $options
         * @return Array
         */
        function wpglobus_attribute_in_product_name($options)
        {
        }
        /**
         * Theme Envision: "Cart Estimate Notice" is shown twice, because the theme brings exactly the same notice
         *
         * @since v3.5.1
         * @wp-hook german_market_after_frontend_init
         * @return void
         */
        function theme_support_envision()
        {
        }
        /**
         * Plugin Klarna Support: Change behaviour how to send confirmation email
         *
         * @since v3.5.1
         * @wp-hook german_market_after_frontend_init
         * @return void
         */
        function plugin_support_klarna()
        {
        }
        /**
         * Plugin Klarna Support: Do not send order confirmation email at processed order
         *
         * @since v3.5.1
         * @wp-hook gm_email_confirm_order_send_it
         * @return void
         */
        function klarna_email_confirm_order_send_it($boolean, $order)
        {
        }
        /**
         * Plugin Klarna Support: Send order confirmation email on thankyou page
         *
         * @since v3.5.1
         * @wp-hook woocommerce_thankyou
         * @return void
         */
        function klarna_woocommerce_thankyou_send_email_confirm_order($order_id)
        {
        }
        /**
         * Theme Support woodance: Display prices correctly (not twice) on single products and variable product pages
         *
         * @wp-hook wp
         * @return void
         */
        function theme_support_woodance()
        {
        }
        /**
         * Theme Support fluent: Display prices correctly (not twice) on single products and variable product pages
         *
         * @wp-hook wp
         * @return void
         */
        function theme_support_fluent()
        {
        }
        /**
         * Theme Support woodance: Display prices correctly (not twice) on single products and variable product pages
         * Remove Price html for variable products
         *
         * @wp-hook woocommerce_before_add_to_cart_form
         * @return void
         */
        function theme_support_woodance_no_price()
        {
        }
        /**
         * Theme Support woodance: Display prices correctly (not twice) on single products and variable product pages
         * Add Price html filter for variable products again
         *
         * @wp-hook woocommerce_before_variations_form
         * @return void
         */
        function theme_support_woodance_no_price_add_again()
        {
        }
        /**
         * Theme Support woodance: Removes price html for variable product
         *
         * @wp-hook woocommerce_get_price_html
         * @return void
         */
        function theme_support_woodance_variable_price($price, $product)
        {
        }
        /**
         * Translateable Due Date Options
         *
         * @access public
         * @wp-hook init
         * @return void
         */
        function due_date()
        {
        }
        /**
         * Theme Superba Support: Double price in loop and single product pages
         *
         * @access public
         * @wp-hook after_setup_theme
         * @return void
         */
        function theme_support_superba()
        {
        }
        /**
         * Theme Superba Support: Double price in loop
         *
         * @access public
         * @wp-hook woocommerce_after_shop_loop_item
         * @return void
         */
        function superba_woocommerce_after_shop_loop_item()
        {
        }
        /**
         * Theme Superba Support: Double price on single product pages
         *
         * @access public
         * @wp-hook woocommerce_single_product_summary
         * @return void
         */
        function superba_woocommerce_single_product_summary()
        {
        }
        /**
         * Wenn new Order is created, New_order Parent_order_subscrition,
         * @since GM 3.4.3
         * @wp-hook woocommerce_countries_inc_tax_or_vat, woocommerce_countries_ex_tax_or_vat
         * @param String $return
         * @return String
         */
        public function dummy_remove_woo_vat_notice($return = "")
        {
        }
        /**
         * WPML Support: Switch language of invoice for online booking APIs
         *
         * @since 3.10.1
         * @access public
         * @wp-hook german_market_invoice_pdf_before_send_to_booking_accounts
         * @param Array $args
         * @return void
         */
        public static function wpml_invoice_pdf_switch_lang_for_online_booking($args)
        {
        }
        /**
         * WPML Support: Reswitch language of invoice pdf in backend downloads
         *
         * @since 3.10.1
         * @access public
         * @wp-hook german_market_invoice_pdf_after_send_to_booking_accounts
         * @return void
         */
        public static function wpml_invoice_pdf_reswitch_lang_for_online_booking()
        {
        }
        /**
         * Returns true if ajax is executed from frontend
         *
         * @since 3.8.1
         * @access public
         * @return Boolean
         */
        public static function is_frontend_ajax()
        {
        }
        /**
         * WooCommerce Subscriptions Support: Don't copy invoice number, invoice date, saved invoice pdf content or due date form first order to subscription object
         *
         * @access public
         * @last-updated: 3.10.6.0.1
         * @wp-hook wc_subscriptions_renewal_order_data
         * @param Array $meta
         * @param WC_Order $to_order
         * @param WC_Order $from_order
         * @return Array
         */
        function subscriptions_gm_dont_copy_meta($meta, $to_order, $from_order)
        {
        }
        /**
         * Get All Supported WooCommerce Subscriptions Emails
         *
         * @access public
         * @return Array
         */
        public static function get_subscriptions_emails()
        {
        }
        /**
         * WooCommerce Subscriptions Support: Email Attachments
         *
         * @access public
         * @wp-hook gm_invoice_pdf_email_settings
         * @wp-hook gm_invoice_pdf_email_settings_additonal_pdfs
         * @param Array $options
         * @return Array
         */
        function subscriptions_gm_invoice_pdf_email_settings($options)
        {
        }
        /**
         *  WooCommerce Subscriptions Support: Email Attachments for Retoure PDF
         *
         * @access public
         * @since 3.5.6
         * @wp-hook wcreapdf_email_options_after_sectioned
         * @param Array $options
         * @return Array
         */
        function subscriptions_gm_retoure_pdf_email_settings($options)
        {
        }
        /**
         * WooCommerce Subscriptions Support: Email Attachments
         *
         * @access public
         * @wp-hook wp_wc_inovice_pdf_allowed_stati
         * @wp-hook wp_wc_inovice_pdf_allowed_stati_additional_mals
         * @param Array allowed_stati
         * @return Array
         */
        function subscriptions_gm_allowed_stati_additional_mals($allowed_stati)
        {
        }
        /**
         * WooCommerce Subscriptions Support: BCC / CC 
         *
         * @since 3.10.4.1
         * @access public
         * @wp-hook german_market_options_bcc_emails
         * @param Array options
         * @return Array
         */
        public function subscriptions_gm_bbc_cc_emails($options)
        {
        }
        /**
         * WooCommerce Subscriptions Support: Email Attachments in Add-Ons
         *
         * @access public
         * @wp-hook gm_emails_in_add_ons
         * @param Array allowed_stati
         * @return Array
         */
        function subscriptions_gm_emails_in_add_ons($emails)
        {
        }
        /**
         * WooCommerce Subscriptions Support: Recurring Totals
         *
         * @access public
         * @wp-hook german_market_after_frontend_init
         */
        function subscriptions()
        {
        }
        /**
         * Custom Emails: Email Attachments
         *
         * @access public
         * @since 3.5.6
         * @wp-hook gm_invoice_pdf_email_settings
         * @wp-hook gm_invoice_pdf_email_settings_additonal_pdfs
         * @param Array $options
         * @return Array
         */
        function custom_email_status_gm_invoice_pdf_email_settings($options)
        {
        }
        /**
         * Custom Emails: Email Attachments for Retoure PDF
         *
         * @access public
         * @since 3.5.6
         * @wp-hook wcreapdf_email_options_after_sectioned
         * @param Array $options
         * @return Array
         */
        function custom_email_status_gm_retoure_pdf_email_settings($options)
        {
        }
        /**
         * Custom Emails - Attachments
         *
         * @access public
         * @since 3.5.6
         * @wp-hook wp_wc_inovice_pdf_allowed_stati
         * @wp-hook wp_wc_inovice_pdf_allowed_stati_additional_mals
         * @param Array allowed_stati
         * @return Array
         */
        function custom_email_status_gm_allowed_stati_additional_mals($allowed_stati)
        {
        }
        /**
         * Custom Emails: Email Attachments in Add-Ons
         *
         * @access public
         * @since 3.5.6
         * @wp-hook gm_emails_in_add_ons
         * @param Array allowed_stati
         * @return Array
         */
        function custom_email_status_gm_emails_in_add_ons($emails)
        {
        }
        /**
         * SiteOrigin Premium: Show German Market Data after single price
         *
         * @access public
         * @since 3.11.1.3
         * tested with plugin version 1.20.0
         * @wp-hook woocommerce_after_template_part
         * @param String template_name
         * @param String template_path
         * @param String located
         * @param Array args
         * @return void
         */
        public function site_origin_premium_gm_data_after_price($template_name, $template_path, $located, $args)
        {
        }
    }
    /**
     * Class WGM_Customizable_Output_Product_Data
     *
     * @author MarketPress
     */
    class WGM_Customizable_Output_Product_Data
    {
        public $default_includes = '';
        public $default_exludes = '';
        public $includes_option = '';
        public $excludes_option = '';
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Checkbox_Product_Depending
         */
        public static function get_instance()
        {
        }
        /**
         * Change prefix for tax (inlcudes / plus)
         * 
         * @param String $tax_output
         * @return String
         */
        public function change_tax_output_wording($tax_output)
        {
        }
        public function change_product_data_output($output_parts, $product, $hook)
        {
        }
        public function get_sorted_data_loop()
        {
        }
        public function get_sorted_data_single()
        {
        }
        /**
         * Get sorted data
         * 
         * @param WC_Product $product
         * @param String $loop_or_single
         * @return Array
         */
        public function get_sorted_data($loop_or_single = 'loop')
        {
        }
        /**
         * Get all possible German Market product data
         * 
         * @return Array
         */
        public function get_all_possible_data()
        {
        }
    }
    /**
     * Cash On Delivery Woocommerce_de Version
     * Removes the Builtin Version of Woocommerce COD Gateway
     * 
     * @author jj, ap
     */
    class WGM_Cash_On_Delivery
    {
        /**
         * Remove standard cash on delivery
         *
         * @uses globals $woocommerce
         * @access public
         */
        public static function remove_standard_cod($available_gateways)
        {
        }
        /**
         * add the german COD gateway
         *
         * 
         * @static	
         * @access	public
         * @uses		get_option
         * @param 	array $gateways
         * @return	array gateways
         */
        public static function add_cash_on_delivery_gateway($gateways)
        {
        }
    }
    /**
     * Class WGM_Add_Ons
     *
     * This class loads the Add Ons
     *
     * @author  ChriCo
     */
    class WGM_Add_Ons
    {
        /**
         * Include all activated modules
         *
         * @static
         * @return Array
         */
        public static function init()
        {
        }
        /**
         * Get array of all modules
         *
         * @static
         * @return Array
         */
        public static function get_all_add_ons($get_only_activated_add_ons = \false)
        {
        }
        /**
         * activate or deactivate add-on
         *
         * @static
         * @param $string $add_on_option_key
         * @param $new_activation
         * @return void
         */
        public static function activate_or_deactivate_new_add_on($add_on_option_key, $new_activation)
        {
        }
        /**
         * Get array of all activated modules
         *
         * @static
         * @return Array
         */
        public static function get_activated_add_ons()
        {
        }
        /**
         * Run uninstall.php of all add ons
         *
         * @static
         * @return void
         */
        public static function uninstall()
        {
        }
        /**
         * Build class name of add-on from add-on key ( id )
         *
         * @static
         * @param String $key
         * @return String
         */
        public static function get_class_name($key)
        {
        }
    }
    /**
     * Automatic class Loader
     * @author ap
     */
    class WGM_Loader
    {
        /**
         * Registers autoloader function to spl_autoload
         * @access public
         * @static
         * @author ap
         * @return void
         */
        public static function register()
        {
        }
        /**
         * Unregisters autoloader function with spl_autoload
         * @access public
         * @static
         * @author ap
         * @return void
         */
        public static function unregister()
        {
        }
        /**
         * Autloading function
         * @param string $classname
         * @access public
         * @static
         * @author ap
         * @return void
         */
        public static function load($classname)
        {
        }
    }
    /**
     * Class WGM_Manual_Order_Confirmation
     *
     * German Market Userinterface
     *
     * @author MarketPress
     */
    class WGM_Manual_Order_Confirmation
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Compatibilities
         */
        public static function get_instance()
        {
        }
        /**
         * Show info when no payment methods are available
         *
         * @since 3.20
         * @wp-hook woocommerce_review_order_before_payment
         * @return Since
         **/
        public function no_payment_info_checkout()
        {
        }
        /**
         * Dont show "Pay" and "Cancel on My-Account Page"
         *
         * @wp-hook woocommerce_my_account_my_orders_actions
         * @param Array $actions
         * @param WC_Order $order
         * @return Array
         **/
        function my_account_actions($actions, $order)
        {
        }
        /**
         * Dont show PDF Download Buttons if order ist not confirmed
         *
         * @wp-hook german_market_backend_show_pdf_download_button
         * @param Boolean $boolean
         * @param String $pdf_document
         * @param Integer $post_id
         * @return boolean
         **/
        function backend_show_pdf_download_button($boolean, $pdf_document, $order_id)
        {
        }
        /**
         * SEPA: do not send sepa mandate yet
         *
         * @wp-hook gm_sepa_send_sepa_email
         * @param Boolean $rtn
         * @return rtn
         **/
        function sepa_send_sepa_email($rtn)
        {
        }
        /**
         * SEPA: no sepa mandate checkbox in checkout
         *
         * @wp-hook gm_sepa_checkout_field_checkbox
         * @param Boolean $rtn
         * @return rtn
         **/
        function sepa_checkout_field_checkbox($rtn)
        {
        }
        /**
         * SEPA: Payment Method Descrition
         *
         * @wp-hook gm_sepa_description_in_checkout
         * @param String $description
         * @return String
         **/
        function sepa_description_in_checkout($description)
        {
        }
        /**
         * SEPA: No checkout fields in checkout
         *
         * @wp-hook gm_sepa_fields_in_checkout
         * @param Array $fields
         * @return Array
         **/
        function sepa_fields_in_checkout($fields)
        {
        }
        /**
         * Send Admin Email New Order
         *
         * @access public
         * @wp-hook woocommerce_checkout_order_created
         * @param WC_Order $order
         * @return void
         */
        public function send_admin_email($order)
        {
        }
        /**
         * Prevent that the admin email is send
         *
         * @access public
         * @wp-hook woocommerce_checkout_update_order_meta
         * @param Integer $order_id
         * @return Integer
         */
        function dont_send_admin_email_again($boolean, $order, $mail_object)
        {
        }
        /**
         * Order Status has to be 'on-hold'
         *
         * @access public
         * @wp-hook woocommerce_create_order
         * @param Integer $order_id
         * @return Integer
         */
        public function set_order_status($order_id, $instance)
        {
        }
        /**
         * Order Status has to be 'on-hold'
         *
         * @access public
         * @wp-hook woocommerce_default_order_status
         * @param String $status
         * @return String
         */
        public function return_order_status($status)
        {
        }
        /**
         * Do not show payment information to customer
         *
         * @access public
         * @wp-hook woocommerce_before_template_part
         * @param String $template_name
         * @param String $template_path
         * @param String $located
         * @param Array $args
         * @return void
         */
        public function disable_payment_info($template_name, $template_path, $located, $args)
        {
        }
        /**
         * Remove Redirecting for payment and set post_meta '_gm_needs_conirmation' to 'yes'
         *
         * wp-hook woocommerce_checkout_order_processed 
         * @param Integer $order_id
         * @param Array $posted_data
         * @param WC_Order $order
         * @return void
         */
        public function remove_redirect($order_id, $posted_data, $order)
        {
        }
        /**
         * No Payment
         *
         * @access public
         * wp-hook woocommerce_valid_order_statuses_for_payment_complete
         * @param Array $stati
         * @return Array
         */
        public function no_payment($stati)
        {
        }
        /**
         * Don'ty show any other information in order confirmation email
         *
         * @access public
         * wp-hook woocommerce_email_before_order_table
         * @param WC_Order $order
         * @param Boolean $sent_to_admin
         * @param Boolean $plain_text
         * @return void
         */
        public function woocommerce_email_before_order_table_confirm($order, $sent_to_admin, $plain_text)
        {
        }
        /**
         * Add a small confirmation notice to admin order table if order is not confirmed
         *
         * @access public
         * @wp-hook manage_shop_order_posts_custom_column
         * @param String Column
         * @return void
         */
        public function admin_confirmation_notice($column, $post_id_or_order_object)
        {
        }
        /**
         * Remove all payment gateways but that one that customer has chosen during checkout
         *
         * @access public
         * @wp-hook woocommerce_available_payment_gateways
         * @param Array gateways
         * @return Array
         */
        public function woocommerce_available_payment_gateways($gateways)
        {
        }
        /**
         * Admin Order Action (new icon to conirm order)
         *
         * @access public
         * @wp-hook woocommerce_admin_order_actions
         * @param Array $actions
         * @param WC_Order $order
         * @return Array
         */
        public function admin_icon_confirm($actions, $order)
        {
        }
        /**
         * Order Confirmation button next to "save" button
         *
         * @access public
         * @wp-hook woocommerce_order_actions_end
         * @param Integer $order_id
         * @return void
         */
        public function woocommerce_order_actions_end_confirm_button($order_id)
        {
        }
        /**
         * add bulk action
         *
         * @access public
         * @static 
         * @hook WGM_Hpos::get_hook_for_order_bulk_actions()
         * @param Array $actions
         * @return Array
         */
        public static function add_bulk_actions($actions)
        {
        }
        /**
         * do bulk action
         *
         * @access public
         * @static 
         * @hook WGM_Hpos::get_hook_for_order_handle_bulk_actions()
         * @param String $redirect_to
         * @param String $action
         * @param Array $order_ids
         * @return String
         */
        public static function bulk_action($redirect_to, $action, $order_ids)
        {
        }
        /**
         * Ajax Action to confirm order
         *
         * @access public
         * @static
         * @hook wp_ajax_german_market_manual_order_confirmation
         * @return void
         */
        public static function admin_icon_confirm_action()
        {
        }
        /**
         * Returns true if post meta '_gm_needs_conirmation' is set to 'yes'
         *
         * @access public
         * @static
         * @param WC_Order || Integer $order
         * @return Boolean
         */
        public static function confirmation_needed($post_id_or_order_object)
        {
        }
        /**
         * Ajax Action to confirm order
         *
         * @access public
         * @static
         * @hook wp_ajax_german_market_manual_order_confirmation
         * @return void
         */
        public static function confirm($order_id)
        {
        }
        /**
         * Enable "Customer On Hold Order" email if deactived, so that the email after manual confirmation is sent
         * Otherwise the customer won't get an email after manuel confirmation if "Customer On Hold Order" email is
         * deactivated in WooCommerce
         *
         * @access public
         * @static
         * @wp-hook woocommerce_email_enabled_customer_on_hold_order
         * @param String $enabled
         * @return String
         */
        public static function enable_customer_on_hold_order_mail($enabled)
        {
        }
        /**
         * Change text in order on hold mail for orders with status processing (cash on delivery and purchase on account)
         *
         * @access public
         * @static
         * @wp-hook gettext
         * @param String $translated
         * @param String $original
         * @param String $domain
         * @return String
         */
        public static function new_text_in_order_on_hold_mail_processing($translated, $original, $domain)
        {
        }
        /**
         * Change text in order on hold mail
         *
         * @access public
         * @static
         * @wp-hook gettext
         * @param String $translated
         * @param String $original
         * @param String $domain
         * @return String
         */
        public static function new_text_in_order_on_hold_mail($translated, $original, $domain)
        {
        }
        /**
         * Add payment instructions
         *
         * @access public
         * @static
         * @since 3.5.8
         * wp-hook woocommerce_email_before_order_table
         * @param WC_Order $order
         * @param Boolean $sent_to_admin
         * @param Boolean $plain_text
         * @return void
         */
        public static function add_payment_instructions_processing($order, $sent_to_admin, $plain_text)
        {
        }
        /**
         * Add payment instructions
         *
         * @access public
         * @static
         * @since 3.5.8
         * wp-hook woocommerce_email_before_order_table
         * @param WC_Order $order
         * @param Boolean $sent_to_admin
         * @param Boolean $plain_text
         * @return void
         */
        public static function add_payment_instructions($order, $sent_to_admin, $plain_text)
        {
        }
        /**
         * Show Payment link in new processing mail
         *
         * @access public
         * wp-hook woocommerce_email_before_order_table
         * @param WC_Order $order
         * @param Boolean $sent_to_admin
         * @param Boolean $plain_text
         * @return void
         */
        public static function woocommerce_email_before_order_table_process($order, $sent_to_admin, $plain_text)
        {
        }
        /**
         * Show info on my_account
         *
         * @access public
         * wp-hook woocommerce_view_order
         * @param Integer $order_id
         * @return void
         */
        public static function view_order_info($order_id)
        {
        }
        /**
         * Show info on Thank You Page
         *
         * @access public
         * wp-hook woocommerce_thankyou_order_received_text
         * @param String $text
         * @param WC_Order $order
         * @return void
         */
        public static function thankyou_order_received_text($text, $order)
        {
        }
    }
    /**
     * Installation
     *
     * @author jj,ap
     */
    class WGM_Installation
    {
        /**
         * Activation of the plugin, and create the default pages and Prefereces
         * @access	public
         * @static
         * @uses		version_compare, deactivate_plugins, wp_sprintf, update_option
         * @return	void
         */
        public static function on_activate()
        {
        }
        /**
         * Handle install notice
         *
         * @access	public
         * @static
         * @uses		is_plugin_inactive, deactivate_plugins, get_option, wp_verify_nonce, update_option
         * @return	void
         */
        public static function install_notice()
        {
        }
        /**
         * Install default options
         *
         * @uses update_option
         * @static
         * @author jj, ap
         * @return void
         */
        public static function install_default_options()
        {
        }
        /**
         * Install german specific options
         *
         * @access public
         * @author jj, ap
         * @static
         * @return void
         */
        public static function install_de_options()
        {
        }
        /**
         * Set the default tax rates for Woocommerce
         * Copied from Woocommerce2 Core file admin/includes/updates/woocommerce-update-2.0.php
         *
         * @access	public
         * @static
         * @global	$wpdb
         * @since	1.1.5
         * @param	$tax_rates
         * @return	array
         */
        public static function set_default_woocommerce2_tax_rates($tax_rates)
        {
        }
        /**
         * Import rates form CSV file.
         *
         * * WC_Tax_Rate_Importer::import uses WP_Importer as a hard
         *  dependency and does various outputs. This method prevents
         *  those circumstances.
         *
         * @author dw
         * @access public
         * @static
         * @param string $file
         * @return void
         */
        public static function import_csv($file)
        {
        }
        /**
         * install default product attributes
         *
         * @access public
         * @static
         * @return void
         */
        public static function install_default_attributes()
        {
        }
        /**
         * install default product attributes terms
         *
         * @access public
         * @static
         * @wp-hook german_market_install_default_attributes_terms
         * @return void
         */
        public static function install_default_attributes_terms()
        {
        }
        /**
         * insert the default pages, and overwrite existing pages, if wanted.
         *
         * @author jj, ap
         * @access public
         * @static
         * @uses globals $wpdb, apply_filters, wp_insert_post, wp_update_post, update_option
         * @param bool $overwrite overwrite existing pages
         * @return void
         */
        public static function install_default_pages($overwrite = \FALSE, $lang = 'de')
        {
        }
        /**
         * Update routine to imigrate old deliverytime to new format. Used for upgrade form version 2.2.3 to 2.2.4
         * @access public
         * @static
         * @author ap
         * @reutrn void
         */
        public static function upgrade_deliverytimes()
        {
        }
        /**
         * shows deliverytimes upgrade notice need for upgrade form 2.2.3 to 2.2.4
         * @access public
         * @static
         * @author ap
         * @return mixed
         */
        public static function upgrade_deliverytimes_notice()
        {
        }
        /**
         * upgrades for new v2.4
         */
        public static function upgrade_system()
        {
        }
        /**
         * Update notice for GM 3.2: legal texts changed
         *
         * @access public
         * @static
         * @wp-hook admin_notices
         * @return void
         */
        public static function legal_texts_version_three_two()
        {
        }
        /**
         * Dismiss Update Notice
         *
         * @access public
         * @static
         * @wp-hook wp_ajax_woocommerce_de_dismiss_update_notice_legal_texts
         * @return void
         */
        public static function legal_texts_version_dismiss()
        {
        }
        /**
         * WC 3.0.0+ Notice
         *
         * @access public
         * @static
         * @wp-hook admin_notices
         * @return void
         */
        public static function wc_3_0_0_notice()
        {
        }
        /**
         * PHP 5.6 Notice
         *
         * @access public
         * @static
         * @wp-hook admin_notices
         * @return void
         */
        public static function php_5_6_notice()
        {
        }
        public static function wc_3_4_info($translated_text, $text, $domain)
        {
        }
        /**
         * Run notices for other MarketPress products
         *
         * @since 		3.22
         * @return 		void
         */
        public static function marketpress_notices_other_products()
        {
        }
        /**
         * Add Admin notices German Market and B2B Market
         *
         * @since 		3.7.1
         * @wp-hook 	admin_notices
         * @return 		void
         */
        public static function marketpress_notices_b2b_and_atomion()
        {
        }
        /**
         * Load JavaScript so you can dismiss the MarketPress Plugin Notice
         *
         * @since 		3.7.1
         * @wp-hook 		admin_enqueue_scripts
         * @return 		void
         */
        public static function backend_script_market_press_notices()
        {
        }
        /**
         * Dismiss MarketPress Notice
         *
         * @since 		3.7.1
         * @wp-hook 		wp_ajax_gm_dismiss_marketprss_notice
         * @return 		void
         */
        public static function backend_script_marketpress_dismiss_notices()
        {
        }
    }
    /**
     * Helper Functions for High Performance Order Storage from WooCommerce
     *
     */
    class WGM_Hpos
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Compatibilities
         */
        public static function get_instance()
        {
        }
        /**
         * Get if hpos is enabled
         *
         * @return bollean
         */
        public static function is_hpos_enabled()
        {
        }
        /**
         * Get id of "edit-shop_order" screen
         *
         * @return String
         */
        public static function get_edit_shop_order_screen()
        {
        }
        /**
         * Get if current screen id is "edit-shop_order" screen
         *
         * @return Boolean
         */
        public static function is_edit_shop_order_screen()
        {
        }
        /**
         * Get hook for order bulk actions
         *
         * @return String
         */
        public static function get_hook_for_order_bulk_actions()
        {
        }
        /**
         * Get hook for order bulk actions
         *
         * @return String
         */
        public static function get_hook_for_order_handle_bulk_actions()
        {
        }
        /**
         * Get hook for "manage_shop_order_posts_custom_column"
         *
         * @return String
         */
        public static function get_hook_manage_shop_order_custom_column()
        {
        }
        /**
         * Get hook for "manage_shop_order_posts_columns"
         *
         * @return String
         */
        public static function get_hook_for_manage_shop_order_posts_columns()
        {
        }
        /**
         * Get hook for "manage_edit-shop_order_sortable_columns"
         * 
         * @return String
         */
        public static function get_hook_for_manage_edit_shop_order_sortable_columns()
        {
        }
        /**
         * Check if unkown object is an order object
         *
         * @return Bool
         */
        public static function is_order($maybe_order_object)
        {
        }
    }
    class WGM_Session
    {
        public static function add($key, $value, $namespace = \NULL)
        {
        }
        public static function get($key, $namespace = \NULL)
        {
        }
        public static function is_set($key, $namespace = \NULL)
        {
        }
        public static function remove($key, $namespace = \NULL)
        {
        }
    }
    /**
     * Email Functions
     */
    class WGM_Email
    {
        public static $wgm_order = \null;
        /**
         * init order confirmation mail
         *
         * @access public
         * @static
         * @wp-hook woocommerce_checkout_order_processed
         * @return void
         */
        public static function init_order_confirmation_mail()
        {
        }
        /**
         * send order confirmation mail on thank you page
         *
         * @access public
         * @static
         * @wp-hook woocommerce_thank_you
         * @param Integer $order_id
         * @return void
         */
        public static function send_order_confirmation_mail_on_thank_you_page($order_id)
        {
        }
        /**
         * send order confirmation mail
         *
         * @access public
         * @static
         * @wp-hook woocommerce_thank_you
         * @param Integer $order_id
         * @return void
         */
        public static function send_order_confirmation_mail($order_id)
        {
        }
        /**
         * Returns email_de_footer().
         *
         * Takes an optional $output param to be usable as a filter.
         *
         * @param string $output
         *
         * @return string
         */
        public static function get_email_de_footer($output = '')
        {
        }
        /**
         * Add legal Text to emails
         *
         * @author jj, et
         * @access public
         * @static
         * @uses get_option, get_post, do_shortcode
         * @return void
         *
         */
        public static function email_de_footer()
        {
        }
        /**
         * Print Mail Footer Section HTML
         * @param  string $title
         * @param  string $content
         * @return void
         */
        public static function the_mail_footer_section($title, $content, $post = \null)
        {
        }
        public static function the_mail_footer_sub_section($title, $content, $post)
        {
        }
        /**
         * Caches order variable to store in in global scrope to use it in hooks called later, using depcrecated session
         *
         * @wp-hook woocommerce_email_order_meta
         * @param WC_Order $order
         */
        public static function cache_order($order)
        {
        }
        /**
         * Caches order variable to store in in global scrope to use it in hooks called later
         *
         * @wp-hook woocommerce_email_order_details
         * @wp-hook wp_wc_invoice_pdf_before_fine_print
         * @param WC_Order $order
         * @return void
         */
        public static function cache_order_by_global_var($order)
        {
        }
        /**
         * Clear cache variabel
         *
         * @wp-hook wp_wc_invoice_pdf_start_template
         * @wp-hook woocommerce_email_header
         * @param WC_Order $order
         * @return void
         */
        public static function init_cache_order_by_global_var()
        {
        }
        /**
         * Disable email footer text for admins if option is set
         * Removes the Email Footer Text of the E-Mails "New order", "Cancelled order" and "Failed order" that are sent to the shop admin
         *
         * @access public
         * @static
         * @wp-hook woocommerce_email
         * @param $object
         * @return void
         */
        public static function disable_footer_text_for_admin_emails($email)
        {
        }
        /**
         * Add BCC / CC to Customer Emails
         *
         * @access public
         * @static
         * @wp-hook woocommerce_email_headers
         * @param String $headers
         * @param String $id
         * @param Object | bool $email
         * @return String
         */
        public static function woocommerce_email_headers_bcc_cc($headers, $id, $wc_object = \null, $email = \null)
        {
        }
        /**
         * adds static attachments to wc emails
         *
         * @since 3.2
         * @access public
         * @static
         * @hook woocommerce_email_attachments
         * @param Array $attachments
         * @param String $status
         * @param WC_Order $order
         * @return Array
         */
        public static function add_attachments($attachments, $status, $order)
        {
        }
        /**
         * Show notice in E-Mail: You have ticked "... digital notice"
         *
         * @since GM v3.2
         * @wp-hook woocommerce_email_order_meta
         * @param WC_Order $order
         * @param Boolean $sent_to_admin
         * @param Boolean $plain_text
         **/
        public static function repeat_digital_content_notice($order, $sent_to_admin, $plain_text = \false)
        {
        }
    }
    /**
     * Class WGM_Double_Opt_In_Customer_Registration
     *
     * Add Double Opt In Customer Registration
     *
     * @author  MarketPress
     */
    class WGM_Double_Opt_In_Customer_Registration
    {
        public static $send_pw_link = \false;
        /**
         * Init Hooks and filters
         *
         * @static
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Start Scheduler in Backend
         *
         * @since 3.9.2
         * @static
         * @wp-hook admin_init
         * @return void
         */
        public static function start_scheduler()
        {
        }
        /**
         * Auto Delete users that have not activate their account
         *
         * @since 3.9.2
         * @static
         * @wp-hook german_market_double_opt_in_auto_delete
         * @return void
         */
        public static function german_market_double_opt_in_auto_delete()
        {
        }
        /**
         * Auto Delete: Return Extra Text
         * Replace placeholder [days]
         *
         * @since 3.9.2
         * @static
         * @return String
         */
        public static function get_autodelete_extra_text()
        {
        }
        /**
         * Management: Make Notice in Backend for Resending Mails
         *
         * @since 3.9.2
         * @static
         * @wp-hook admin_notices-users
         * @return void
         */
        public static function bulk_admin_notice()
        {
        }
        /**
         * Management: Bulk Action: Resend Emails
         *
         * @since 3.9.2
         * @static
         * @wp-hook handle_bulk_actions-users
         * @param String redirect_to
         * @param String $doaction
         * @param Array $post_ids
         * @return String
         */
        public static function bulk_resend_email($redirect_to, $doaction, $post_ids)
        {
        }
        /**
         * Management: Bulk Action: Manual Activation
         *
         * @since 3.10.2
         * @static
         * @wp-hook handle_bulk_actions-users
         * @param String redirect_to
         * @param String $doaction
         * @param Array $post_ids
         * @return String
         */
        public static function bulk_manual_activation($redirect_to, $doaction, $post_ids)
        {
        }
        /**
         * Management: Add Bulk Action
         *
         * @since 3.9.2
         * @static
         * @wp-hook bulk_actions-users
         * @param Array $actions
         * @return Array
         */
        public static function bulk_resend_email_select($actions)
        {
        }
        /**
         * Management: Filter User in Backend
         *
         * @since 3.9.2
         * @static
         * @wp-hook pre_get_users
         * @param WP_Query $query
         * @return void
         */
        public static function filter_user($query)
        {
        }
        /**
         * Management: Show Select Box for Filtering and Submit Button in User Backend
         *
         * @since 3.9.2
         * @static
         * @wp-hook restrict_manage_users
         * @param String $top_or_bottom
         * @return void
         */
        public static function filter_user_table($top_or_bottom)
        {
        }
        /**
         * Management: Render User Column in Backend
         *
         * @since 3.9.2
         * @static
         * @wp-hook manage_users_custom_column
         * @param Array $columns
         * @param String $val
         * @param String $column_name
         * @param Integer $user_id
         * @return String
         */
        public static function render_user_tabe_column($val, $column_name, $user_id)
        {
        }
        /**
         * Management: Add User Column in Backend
         *
         * @since 3.9.2
         * @static
         * @wp-hook manage_users_columns
         * @param Array $columns
         * @return Array
         */
        public static function user_tabe_column($columns)
        {
        }
        /**
         * User is logged in after registration on my account page => logout user if activation status is not activated
         *
         * @since 3.5.1
         * @static
         * @wp-hook wp
         * @return void
         */
        public static function logout_user_my_account_page()
        {
        }
        /**
         * User is logged in after registration => logout user if activation status is not activated
         *
         * @static
         * @wp-hook woocommerce_thankyou
         * @return void
         */
        public static function logout_user()
        {
        }
        /**
         * Deactivate WooCommerce 'created customer notification' email
         *
         * @static
         * @hook woocommerce_email
         * @return void
         */
        public static function deactive_woocommerce_created_customer_notification($object)
        {
        }
        /**
         * Activate WGM 'created customer notification' email
         *
         * @static
         * @hook woocommerce_created_customer_notification
         * @return void
         */
        public static function woocommerce_created_customer_notification($customer_id, $new_customer_data = array(), $password_generated = \false, $resend = \false)
        {
        }
        /**
         * What happens if an user wants to activate the new user account
         *
         * @static
         * @hook woocommerce_created_customer_notification
         * @return void
         */
        public static function check_activation_action()
        {
        }
        /**
         * No user login for users without activation
         *
         * @static
         * @hook wp_authenticate_user
         * @param WP_User $user
         * @param String $password
         * @return WP_User (or throws an error)
         */
        public static function wp_authenticate_user($user, $password)
        {
        }
        /**
         * No user login for users without activation
         *
         * @static
         * @hook woocommerce_registration_auth_new_customer
         * @param do_autho_new_customer $Boolean
         * @param WP_User $user
         * @return Boolean
         */
        public static function auth_new_customer($do_autho_new_customer, $user)
        {
        }
    }
    class WGM_Price_Per_Unit
    {
        public static function init()
        {
        }
        /**
         * Deactivate Auto Calc if the option has never been set
         * and there are products that have ppu meta data
         *
         * @since 3.11
         * @return void
         */
        public static function install_and_set_automatic_calculation_ppu()
        {
        }
        public static function add_ppu_part($parts, $product)
        {
        }
        public static function get_price_per_unit_string($product)
        {
        }
        /**
         * Get Output format prefix
         *
         * @since 3.10.1
         * @param Array $price_per_unit_data
         * @return String
         */
        public static function get_prefix($price_per_unit_data)
        {
        }
        /**
         * Get Output format 
         * If not all 3 Placeholders are used in option, the default setting will be used to avoid errors with sprintf
         *
         * @since 3.6.4
         * @return String
         */
        public static function get_output_format()
        {
        }
        /**
         * Retrives price per unit data
         *
         * @param WC_Product $_product
         *
         * @access public
         * @static
         * @author ap
         * @return array
         */
        public static function get_price_per_unit_data($_product)
        {
        }
        /**
         * Calculate Price for automatic calculation
         *
         * @param 	Float complete_product_price
         * @param 	Float complete_product_quantity
         * @param 	Float mult
         * @static
         * @return Float
         */
        public static function automatic_calculation($complete_product_price, $complete_product_quantity, $mult)
        {
        }
        /**
         * Price Per Unit Product Tab Contents
         *
         * @access public
         * @static
         * @return void
         */
        public static function add_product_write_panel()
        {
        }
        /**
         * Price Per Unit Product Tab Contents for automatic calculation
         *
         * @access public
         * @static
         * @since 3.6.4
         * @return void
         */
        public static function add_product_write_panel_automatic_calculation()
        {
        }
        /**
         * Make a select field for scale_units
         *
         * @access      public
         *
         * @param    array $field
         *
         * @uses        get_post_meta, get_terms, selected
         * @global         $thepostid , $post, $woocommerce
         * @static
         * @return    string html
         */
        public static function select_scale_units($field)
        {
        }
        /**
         * Price Per Unit in Checkout: Show PPU in Cart and Checkout
         *
         * @wp-hook woocommerce_cart_item_price
         * @wp-hook woocommerce_cart_item_subtotal
         * @since GM v3.2
         * @static
         * @access public
         * @param String $price
         * @param Array $cart_item_session_data
         * @param String $cart_item_key
         * @return String
         **/
        public static function ppu_co_woocommerce_cart_item_price($price, $cart_item, $cart_item_key)
        {
        }
        /**
         * Store into order
         *
         * @wp-hook woocommerce_new_order_item
         * @since GM v3.2.2
         * @static
         * @access public
         * @param Integer $item_id
         * @param Object $item
         * @param Integer $order_id
         * @return void
         **/
        public static function ppu_co_woocommerce_add_order_item_meta_wc_3($item_id, $item, $order_id)
        {
        }
        /**
         * Price Per Unit in Checkout: Show PPU in Order
         *
         * @wp-hook woocommerce_order_formatted_line_subtotal
         * @since GM v3.2
         * @static
         * @access public
         * @param String $subtotal
         * @param WC_Order_item $item
         * @param WC_Order $order
         * @return String
         **/
        public static function ppu_co_woocommerce_order_formatted_line_subtotal($subtotal, $item, $order)
        {
        }
        /**
         * Get Extra PPU String
         *
         * @since GM v3.10.5.0.1
         * @static
         * @access public
         * @param WC_Order_item $item
         * @param WC_Order $order
         * @return String
         **/
        public static function ppu_co_woocommerce_order_formatted_line_subtotal_get_extra_ppu($item, $order)
        {
        }
        /**
         * repair_invoice_pdf
         *
         * @since GM v3.10.5.0.1
         * @static
         * @access public
         * @param String $subtotal
         * @param WC_Order_item $item
         * @param WC_Order $order
         * @return String
         **/
        public static function repair_invoice_pdf($subtotal, $item, $order)
        {
        }
        /**
         * Price Per Unit in Invoice PDFs
         * @removed IN 3.12.6
         * @wp-hook wp_wc_invoice_pdf_start_template
         * @since GM v7.1
         * @static
         * @access public
         * @return void
         **/
        public static function ppu_invoice_pdfs_remove_ppu()
        {
        }
        /**
         * Price Per Unit in Invoice PDFs
         * @removed IN 3.12.6
         * @wp-hook wp_wc_invoice_pdf_end_template
         * @since GM v7.1
         * @static
         * @access public
         * @return void
         **/
        public static function ppu_invoice_pdfs_remove_ppu_filter()
        {
        }
    }
    /**
     * Class WGM_Purchase_On_Demand
     *
     * German Market Gateway Puchase on Demand
     *
     * @author MarketPress
     */
    class WGM_Purchase_On_Demand
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Purchase_On_Demand
         */
        public static function get_instance()
        {
        }
        /**
         * if "Ship to different address" is disabled, show a message to cusomer when changing payment method
         *
         * @since GM 3.11
         * @wp-hook wp_enqueue_scripts
         * @return void
         **/
        public function localize_frontend_scripts()
        {
        }
        /**
         * No Pay Date for this gateway
         *
         * @since GM 3.8.1
         * @version 3.27
         * @wp-hook woocommerce_order_get_date_paid
         * @param WC_DateTime $value
         * @param WC_Order $order
         * @return Boolean
         **/
        public function dont_show_paid_for_admin($value, $order)
        {
        }
        /**
         * Add Gateway
         *
         * @since GM 3.2
         * @wp-hook woocommerce_payment_gateways
         * @param Array $gateway
         * @return Array
         **/
        public function german_market_add_purchase_on_account($gateways)
        {
        }
    }
    abstract class MarketPress_Improve_Plugin
    {
        protected $wp_version = \null;
        protected $php_version = \null;
        protected $mysql_version = \null;
        protected $wc_version = \null;
        protected $theme = \null;
        protected $plugin_version = \null;
        protected $plugin_slug = \null;
        protected $plugin_data = array();
        /**
         * Construct
         *
         * @since 	1.0
         * @final
         * @return 	void
         */
        public final function __construct()
        {
        }
        /**
         * Handle users reaction
         *
         * @since 	1.0
         * @final
         * @wp-hook admin-init
         * @return 	void
         */
        public final function user_reaction()
        {
        }
        /**
         * Display Admin Notice
         *
         * @since 	1.0
         * @final
         * @wp-hook admin_notices
         * @return 	void
         */
        public final function admin_notice()
        {
        }
        /**
         * Get Admin Notice Success Text
         *
         * @since 	1.0
         * @return 	String
         */
        protected function get_notice_success_text()
        {
        }
        /**
         * Get Admin Notice Text
         *
         * @since 	1.0
         * @return 	String
         */
        protected function get_notice_text()
        {
        }
        /**
         * Get "Agree Button" text
         *
         * @since 	1.0
         * @return 	String
         */
        protected function get_agree_button_text()
        {
        }
        /**
         * Get "Disagree Button" text
         *
         * @since 	1.0
         * @return 	String
         */
        protected function get_disagree_button_text()
        {
        }
        /**
         * Get Plugin Name
         *
         * @since 	1.0
         * @abstract
         * @return 	String
         */
        protected abstract function get_plugin_name();
        /**
         * Get Plugin Slug
         *
         * @since 	1.0
         * @abstract
         * @return 	String
         */
        protected abstract function get_plugin_slug();
        /**
         * Get Plugin Version
         *
         * @since 	1.0
         * @abstract
         * @return 	String
         */
        protected abstract function get_plugin_version();
        /**
         * Get Plugin Data
         *
         * @since 	1.0
         * @abstract
         * @return 	Array
         */
        protected abstract function get_plugin_data();
    }
    /**
     * MarketPress_Improve_GermanMarket
     * @version 1.0.1
     */
    class MarketPress_Improve_GermanMarket extends \MarketPress_Improve_Plugin
    {
        /**
         * Get Plugin Name
         *
         * @since 	1.0
         * @return 	String
         */
        protected final function get_plugin_name()
        {
        }
        /**
         * Get Plugin Slug
         *
         * @since 	1.0
         * @return 	String
         */
        protected final function get_plugin_slug()
        {
        }
        /**
         * Get Plugin Version
         *
         * @since 	1.0
         * @return 	String
         */
        protected final function get_plugin_version()
        {
        }
        /**
         * Get Plugin Data
         *
         * @since 	1.0
         * @return 	Array
         */
        protected final function get_plugin_data()
        {
        }
    }
    /**
     * Class WGM_Sortable_Products
     *
     * This class contains helper functions to order products in cart and checkout process.
     *
     * @author  Maik
     */
    class WGM_Sortable_Products
    {
        /**
         * This function is responsible for sorting order items
         *
         * @hook woocommerce_order_get_items
         *
         * @access public
         * @static
         *
         * @param array    $items Array of Items.
         * @param WC_Order $order Order Object.
         * @param array    $types Type of Item.
         *
         * @return mixed
         */
        public static function gm_sort_woocommerce_order_get_items($items, $order, $types)
        {
        }
        /**
         * This function is responsible for sorting cart items
         *
         * @hook woocommerce_cart_loaded_from_session
         *
         * @access public
         * @static
         *
         * @return void
         */
        public static function gm_sort_woocommerce_cart_items()
        {
        }
        /**
         * This helper function returns the item title.
         *
         * @access public
         * @static
         *
         * @param object $item_data
         *
         * @return string
         */
        public static function get_the_title($item_data)
        {
        }
        /**
         * This helper function returns the item sku.
         *
         * @access public
         * @static
         *
         * @param object $item_data
         *
         * @return string
         */
        public static function get_the_sku($item_data)
        {
        }
    }
    /**
     * Backend Functions
     *
     * @author MarketPress
     * @since WGM 3.0
     */
    class WGM_Backend
    {
        /**
         * Add support link to plugin row meta
         *
         * @access public
         * @static
         * @wphook plugin_row_meta
         * @param Array $links
         * @param String $file
         * @return void
         */
        public static function plugin_row_meta($links, $file)
        {
        }
        /**
         * Show action links on the plugin screen.
         *
         * @since 3.11
         * @access public
         * @static
         * @param mixed $links Plugin Action links.
         * @return array
         */
        public static function plugin_action_links($links)
        {
        }
        /**
         * Show WooCommerce Actions in Order Table List
         *
         * @access public
         * @static
         * @since 3.5.5
         * @wphook default_hidden_columns
         * @param Array $hidden
         * @param WP_Screen $screen
         * @param String $file
         * @return Array
         */
        public static function default_hidden_columns($hidden, $screen)
        {
        }
    }
    /**
     * Class WGM_Sortable_Products_Hooks
     *
     * This Class is loaded in the plugin file
     * Load WGM_Sortable_Products by autoloader
     */
    class WGM_Sortable_Products_Hooks
    {
        // Initialize the Hooks
        public static function init()
        {
        }
    }
    /**
     * Class WGM_Checkbox_Product_Depending
     *
     * @author MarketPress
     */
    class WGM_Checkbox_Product_Depending
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Checkbox_Product_Depending
         */
        public static function get_instance()
        {
        }
        /**
         * Repeat the checkbox separate option for invoic pdfs
         * 
         * @access public
         * wp-hook wp_wc_invoice_pdf_start_template
         * @param Array $args
         * @return void
         */
        public function repeat_notice_invoice_pdf($args)
        {
        }
        /**
         * Repeat the checkbox separate option for invoic pdfs
         * Remove all filters again
         * 
         * @access public
         * wp-hook wp_wc_invoice_pdf_end_template
         * @return void
         */
        public function repeat_notice_invoice_pdf_end()
        {
        }
        /**
         * Repeat the checkbox text after order table
         * 
         * @access public
         * wp-hook woocommerce_email_order_meta
         * @param WC_Order $order
         * @param Boolean $sent_to_admin
         * @param Boolean $plain_text
         * @return void
         */
        public function repeat_notice($order, $sent_to_admin, $plain_text = \false)
        {
        }
        /**
         * Checkbox Logging
         * 
         * @access public
         * wp-hook german_market_checkbox_logging_checbkox_texts_array
         * @param Array $checkboxes_texts
         * @param String $pre_symbol
         * @param Array $posted_data
         * @param WC_Order $order
         * @return Array
         */
        public function checkbox_logging($checkboxes_texts, $pre_symbol, $posted_data, $order)
        {
        }
        /**
         * Validate Checkbox
         * Second Checkout Page is enabled
         * And Pay Order Page
         * 
         * @access public
         * 
         * wp-hook gm_checkout_validation_fields_second_checkout
         * wp-hook gm_checkout_validation_fields_pay_for_order
         * 
         * @param Integer $error_count
         * @return Integer
         */
        public function validation_wit_second_checkout_page($error_count)
        {
        }
        /**
         * Validate Checkbox
         * Second Checkout Page is disabled
         *
         * @access public
         * @param Integer $more_errors
         * @param Object $errors
         * @return Integer
         */
        public function validation_without_second_checkout_page($more_errors, $errors, $posted_data)
        {
        }
        /**
         * Add required class to invalid checkbox
         *
         * @access public
         * wp-hook german_market_checkout_checkbox_is_required
         * @param Boolean $required
         * @param String $field_name
         * @param Boolean | String $checkout_validated
         * @param Array $post_data
         * @return Boolean
         */
        public function checkbox_is_required($required, $field_name, $checkout_validated, $post_data)
        {
        }
        /**
         * Checks whether cart or order needs checkbox $i
         *
         * @access public
         * @param Integer $nr_of_checkbox
         * @param WC_Order $order
         * @return Boolean
         */
        public function cart_or_order_needs_checkbox($nr_of_checkbox = 1, $order = \false)
        {
        }
        /**
         * Add Checkboxes to German Market Checkboxes (review order)
         *
         * @access public
         * @wp-hook woocommerce_de_review_order_after_submit
         * @param String $review
         * @return review_order
         */
        public function review_order($review_order)
        {
        }
        /**
         * Add Product Options in Backend
         *
         * @access public
         * @wp-hook woocommerce_product_options_general_product_data
         * @return void
         */
        public function product_options_simple()
        {
        }
        /**
         * Save Meta Data in Product
         *
         * @access public
         * @wp-hook german_market_add_process_product_meta_meta_keys
         * @param Array $meta_keys
         * @return Array
         */
        public function save_product_options($meta_keys)
        {
        }
        /**
         * Add Product Options in Backend
         *
         * @access public
         * @wp-hook woocommerce_product_after_variable_attributes
         * @param $integer $loop
         * @param Array $variation_data
         * @param Array $variation
         * @return void
         */
        public function product_options($loop = \NULL, $variation_data = \NULL, $variation = \NULL)
        {
        }
        /**
         * Get Number of Checkboxes
         *
         * @access public
         * @return Integer
         */
        public function get_nr_of_checkboxes()
        {
        }
        /**
         * Options in GM Ui
         *
         * @access public
         * @wp-hook woocommerce_de_ui_options_checkout_checkboxes_after_custom
         * 
         * @param Array $options
         * @param String $description_opt_in
         * @param String $description_text_error
         * @return Array
         */
        public function ui_options($options, $description_opt_in, $description_text_error)
        {
        }
    }
    /**
     * General Defaults
     *
     *  @author jj, ap
     */
    class WGM_Defaults
    {
        /**
         * holds key for $lieferzeit_string
         * default shipping of 48 if not defined
         *
         * @access	public
         * @static
         * @var		int
         */
        public static $default_lieferzeit_id = 3;
        /**
         * Currency
         *
         * @access	public
         * @static
         * @var string
         */
        public static $woocommerce_de_currency = 'EUR';
        /**
         * Default Country
         *
         * @access	public
         * @static
         * @var string
         */
        public static $woocommerce_de_default_country = 'DE';
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * General options
         *
         * @access	public
         * @static
         * @hook	woocommerce_de_options
         * @since	1.1.5
         * @return	array
         */
        public static function get_options()
        {
        }
        /**
         * General options
         *
         * @access	public
         * @static
         * @hook	woocommerce_de_options
         * @since	1.1.5
         * @return	array
         */
        public static function generate_options()
        {
        }
        /**
         * Default pages
         *
         * @access	public
         * @static
         * @hook	woocommerce_de_default_pages
         * @since	1.1.5
         * @return	array
         */
        public static function get_default_pages_with_option()
        {
        }
        public static function get_default_pages()
        {
        }
        /**
         * Get the default page objects
         *
         * @static
         * @access	public
         * @return	Object  default pages objects
         */
        public static function get_default_page_objects($lang = 'de')
        {
        }
        /**
         * Manual translate option names.
         * @param $option
         * @return mixed
         */
        public static function get_german_option_name($option)
        {
        }
        /**
         * Registers default delivery time strings
         *
         * @access	public
         * @static
         */
        public static function register_default_lieferzeiten_strings()
        {
        }
        /**
         * Registers default delivery time strings
         *
         * @access	public
         * @static
         */
        public static function register_default_sale_strings()
        {
        }
        /**
         * Lieferzeit strings
         *
         * @access	public
         * @static
         * @hook	woocommerce_de_lieferzeit_strings
         * @since	1.1.5
         * @return	array
         */
        public static function get_lieferzeit_strings()
        {
        }
        /**
         * @param $taxonomy
         *
         * @return array
         */
        public static function get_term_strings($taxonomy)
        {
        }
        /**
         * Function for array_map
         *
         * @access	public
         * @static
         * @param 	string $term
         * @since	2.1.2
         * @return	string
         */
        public static function wgm_return_translated_terms($term)
        {
        }
        /**
         * Get the default tax rates
         *
         * @access	public
         * @static
         * @hook	woocommerce_de_default_tax_rates
         * @since	1.1.5
         * @return	array
         */
        public static function get_default_tax_rates()
        {
        }
        /**
         * Get default product attributes
         *
         * @access	public
         * @static
         * @hook	woocommerce_de_default_procuct_attributes
         * @since	1.1.5
         * @return	array
         */
        public static function get_default_product_attributes()
        {
        }
    }
    /**
     * Class WGM_Ui
     *
     * German Market Userinterface
     *
     * @author MarketPress
     */
    class WGM_Ui
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Ui
         */
        public static function get_instance()
        {
        }
        /**
         * Ajax for showing pro version infos
         * 
         * @wp-hook wp_ajax_german_market_news
         * @access public
         * @return void
         */
        public function hide_news()
        {
        }
        /**
         * Reinstall Measuring Units
         *
         * @wp-hook woocommerce_de_ui_update_options
         * @access public
         * @param Array $options
         * @return void
         */
        public function reinstall_measuring_units($options)
        {
        }
        /**
         * Reinstall Required Pages
         *
         * @wp-hook woocommerce_de_ui_update_options
         * @access public
         * @param Array $options
         * @return void
         */
        public function reinstall_required_pages($options)
        {
        }
        /**
         * Add German Market Screens to WooCommerce Screens
         *
         * @wp-hook woocommerce_screen_ids
         * @access public
         * @param Array $screen_ids
         * @return Arrray
         */
        public function screen_ids($screen_ids)
        {
        }
        /**
         * Add submenu
         *
         * @wp-hook admin_enqueue_scripts
         * @access public
         * @return void
         */
        public function enqueue_scripts_and_styles()
        {
        }
        /**
         * Add submenu
         *
         * @wp-hook admin_menu
         * @access public
         */
        public function add_german_market_submenu()
        {
        }
        /**
         * Output type wgm_ui_checkbox
         *
         * @access public
         * @hook woocommerce_admin_field_wgm_ui_checkbox
         * @return void
         */
        public function wgm_ui_checkbox($value)
        {
        }
        /**
         * Save type wgm_ui_checkbox
         *
         * @access public
         * @hook woocommerce_admin_settings_sanitize_option
         * @param Mixed $value
         * @param Array $option
         * @param Mixed $raw_value
         * @return $value
         */
        public function woocommerce_admin_settings_sanitize_option($value, $option, $raw_value)
        {
        }
        /**
         * Add Submenu to WooCommerce Menu
         *
         * @add_submenu_page
         * @access public
         */
        public function render_german_market_menu()
        {
        }
        /**
         * Render Options for required pages
         *
         * @access public
         * @return void
         */
        public function required_pages()
        {
        }
        /**
         * Render Options for Legal Text Templates
         *
         * @access public
         * @since 3.9.1
         * @return void
         */
        public function legal_text_templates()
        {
        }
        /**
         * Render Options for revocation policy
         *
         * @access public
         * @return void
         */
        public function revocation_policy()
        {
        }
        /**
         * Render Options for small trading exemption
         *
         * @access public
         * @return void
         */
        public function small_trading_exemption()
        {
        }
        /**
         * Render Options for small delivery_times
         *
         * @access public
         * @return void
         */
        public function delivery_times()
        {
        }
        /**
         * Render Options for sale_labels
         *
         * @access public
         * @return void
         */
        public function sale_labels()
        {
        }
        /**
         * Render Options for products
         *
         * @access public
         * @return void
         */
        public function products()
        {
        }
        /**
         * Render Options for cart_and_checkout
         *
         * @access public
         * @return void
         */
        public function cart_and_checkout()
        {
        }
        /**
         * Render Options for checkout_checkboxes
         *
         * @access public
         * @return void
         */
        public function checkout_checkboxes()
        {
        }
        /**
         * Render Options for global
         *
         * @access public
         * @return void
         */
        public function global_tab()
        {
        }
        /**
         * Render Options for emails
         *
         * @access public
         * @return void
         */
        public function emails()
        {
        }
        /**
         * Render Add-On Tab
         *
         * @access public
         * @return array
         */
        public static function render_add_ons()
        {
        }
        /**
         * Get Video Div
         *
         * @access public
         * @static
         * @param String $text
         * @param String $url
         * @return String
         */
        public static function get_video_layer($url)
        {
        }
        /**
         * Output type wcreapdf_textarea
         *
         * @since 3.7.2
         * @static
         * @access public
         * @hook woocommerce_admin_german_market_textarea
         * @return void
         */
        public function output_textarea($value)
        {
        }
    }
    /**
     * Payment Gateways
     * 
     * @author jj, ap
     */
    class WGM_Gateways
    {
        public static $payment_gateway_fees = array();
        /**
         * Set the fee for a payment gateway to calculate the totals
         *
         * @param string $gateway_id
         * @param float $fee
         */
        public static function set_gateway_fee($gateway_id, $fee)
        {
        }
        /**
         * get the fee for a payment gateway to calculate the totals
         *
         * @access	public
         * @static
         * @param	string $gateway_id
         * @return	string gateway fee, or 0 if not exists
         */
        public static function get_gateway_fee($gateway_id)
        {
        }
        public static function get_gateway_fees()
        {
        }
        /**
         * Determines if the gateway fees should be displayed
         * true, if payment_method exists in session, $_POST or order
         *
         * @access public
         * @author jj
         * @static
         * @param string $fee_option
         * @param string $gateway_id
         * @return bool TRUE if gateway fee exists, else false
         */
        public static function gateway_fee_exists($fee_option, $gateway_id)
        {
        }
    }
    class WGM_Product
    {
        public static $options = array();
        public static function init()
        {
        }
        /**
         * Add GTIN to Frontend
         *
         * @since 3.8.2
         * @wp-hook wgm_product_summary_parts
         * @param Array $output_parts
         * @param WC_Product $product
         * @param String $hook
         * @return void
         */
        public static function add_gtin_frontend($output_parts, $product, $hook)
        {
        }
        /**
         * Add GTIN for simple Products
         *
         * @since 3.8.2
         * @wp-hook woocommerce_product_options_general_product_data
         * @return void
         */
        public static function add_gtin_options_simple()
        {
        }
        /**
         * Add GTIN for Variations (and simple products)
         *
         * @since 3.8.2
         * @wp-hook woocommerce_product_after_variable_attributes
         * @param Integer $loop
         * @param Array $variation_data
         * @param WC_Product_Variation $variation
         * @return void
         */
        public static function add_gtin_options($loop = \NULL, $variation_data = \NULL, $variation = \NULL)
        {
        }
        /**
         * Add GTIN to structured data
         *
         * @since 3.12.4
         * @wp-hook woocommerce_structured_data_product
         * @param Array $markup
         * @param WC_Product $product
         * @return Array
         */
        public static function structured_data($markup, $product)
        {
        }
        /**
         * Change "Add To Cart"-Button on Shop Pages
         *
         * @since 3.8.2
         * @return void
         */
        public static function add_to_cart_button_shop_pages()
        {
        }
        /**
         * Change "Add To Cart"-Button: Remove Ajax Functionality
         *
         * @since 3.8.2
         * @wp-hook woocommerce_product_supports
         * @param Boolean $boolean
         * @param String $feature
         * @param WC_Product $product
         * @return Boolean
         */
        public static function add_to_cart_button_shop_pages_avoid_ajax($boolean, $feature, $product)
        {
        }
        /**
         * Change "Add To Cart"-Button Text on Shop Pages
         *
         * @since 3.8.2
         * @wp-hook woocommerce_product_add_to_cart_text
         * @param String $text
         * @param WC_Product $product
         * @return String
         */
        public static function add_to_cart_button_shop_pages_text($text, $product)
        {
        }
        /**
         * Change "Add To Cart"-Button URL on Shop Pages
         *
         * @since 3.8.2
         * @wp-hook woocommerce_product_add_to_cart_url
         * @param String $url
         * @param WC_Product $product
         * @return String
         */
        public static function add_to_cart_button_shop_pages_link($url, $product)
        {
        }
        /**
         * Show Product Attributes that are not used for variations in cart, checkout and orders
         *
         * @since 3.7
         * @return void
         */
        public static function init_product_attributes()
        {
        }
        /**
         * Add Product Attributes to order Item
         *
         * @since 3.7
         * @wp-hook woocommerce_new_order_item
         * @param Integer $item_id
         * @param WC_Order_Item_Product $item
         * @param Integer $order_id
         * @return void
         */
        public static function new_order_item($item_id, $item, $order_id)
        {
        }
        /**
         * Add Product Attributes from session to cart item
         *
         * @wp-hook woocommerce_get_cart_item_from_session
         * @since 3.7
         * @param Array $cart_item_data
         * @param Array $cart_item_session_data
         * @param Integer $cart_item_key
         * @return Array
         */
        public static function get_cart_item_from_session($cart_item_data, $cart_item_session_data, $cart_item_key)
        {
        }
        /**
         * Add Product Attributes to cart item data
         *
         * @wp-hook woocommerce_add_cart_item_data
         * @since 3.7
         * @param Array $cart_item_data
         * @param Integer $product_id
         * @param Integer $variation_id
         * @param Integer $quantity
         * @return Array
         */
        public static function add_cart_item_data($cart_item_data, $product_id, $variation_id, $quantity = 1)
        {
        }
        /**
         * Get Product Attributes
         *
         * @wp-hook woocommerce_get_item_data
         * @since 3.7
         * @param Array $item_data
         * @param Array $cart_item
         * @return Array
         */
        public static function get_item_data($item_data, $cart_item)
        {
        }
        /**
         * Handle Product Images in Cart, Checkout, Orders, Emails
         *
         * @since 3.6.4
         * @return void
         */
        public static function init_product_images()
        {
        }
        /**
         * Avoid double images in invoice pdfs: remove filter
         *
         * @since 3.7.1
         * @wp-hook wp_wc_invoice_pdf_start_template
         * @return void
         */
        public static function remove_add_thumbnail_to_order_invoice_pdfs()
        {
        }
        /**
         * Avoid double images in invoice pdfs: add filter again
         *
         * @since 3.7.1
         * @wp-hook wp_wc_invoice_pdf_end_template
         * @return void
         */
        public static function undo_remove_add_thumbnail_to_order_invoice_pdfs()
        {
        }
        /**
         * Handle Product Images Emails, avoid item image in order item name
         *
         * @since 3.6.4
         * @wp-hook woocommerce_email_header
         * @param String $email_heading
         * @param WC_Email
         * @return void
         */
        public static function avoid_double_images_in_emails_header($email_heading, $email = \false)
        {
        }
        /**
         * Handle Product Images Emails, avoid item image in order item name
         *
         * @since 3.6.4
         * @wp-hook woocommerce_email_footer
         * @param WC_Email
         * @return void
         */
        public static function avoid_double_images_in_emails_footer($email)
        {
        }
        /**
         * Handle Product Images Emails
         *
         * @since 3.6.4
         * @wp-hook woocommerce_email_order_items_args
         * @param Array $args
         * @return Array
         */
        public static function add_thumbnail_to_emails($args)
        {
        }
        /**
         * Handle Product Images Checkout
         *
         * @since 3.6.4
         * @wp-hook woocommerce_order_item_name
         * @param String $product_name
         * @param WC_Order_Item_Product $item
         * @param Boolean is_visible
         * @return String
         */
        public static function add_thumbnail_to_order($product_name, $item, $is_visible = \true)
        {
        }
        /**
         * Handle Product Images Checkout
         *
         * @since 3.6.4
         * @wp-hook woocommerce_cart_item_name
         * @param String $product_name
         * @param Array $cart_item
         * @param String cart_item_key
         * @return String
         */
        public static function add_thumbnail_to_checkout($product_name, $cart_item, $cart_item_key)
        {
        }
        /**
         * Add some CSS to hide thumbnail column in cart
         *
         * @since 3.6.4
         * @wp-hook wp_head
         * @return void
         */
        public static function hide_thumbnail_column_in_cart_with_css()
        {
        }
        /**
         * @param array $types
         * @wp-hook product_type_options
         * @return array $tye
         */
        public static function register_product_type(array $types)
        {
        }
        /**
         * Adds Digital checkbox to variation meta box
         * @param $loop
         * @param $variation_data
         * @param $variation
         * @wp-hook woocommerce_variation_options
         */
        public static function add_variant_product_type($loop, $variation_data, $variation)
        {
        }
        /**
         *  Save the digital setting for variations
         * @param $var_id
         * @wp-hook woocommerce_update_product_variation
         * @wp-hook woocommerce_create_product_variation
         *
         */
        public static function save_variant_product_type($var_id)
        {
        }
    }
    /**
     * Class WGM_Sepa_Direct_Debit
     *
     * German Market Gateway SEPA Direct Debit
     *
     * @author MarketPress
     */
    class WGM_Sepa_Direct_Debit
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Sepa_Direct_Debit
         */
        public static function get_instance()
        {
        }
        /**
         * Check if sepa checkox has to be validated
         *
         * @return Boolean
         */
        public static function need_to_vaildate_sepa_checkbox()
        {
        }
        /**
         * Add SEPA Data to REST API
         *
         * @since 3.6.2
         * @wp-hook woocommerce_api_order_response
         * @param Array $order_data
         * @param WC_Order $order
         * @return Array
         **/
        function add_api_data($response, $order, $request)
        {
        }
        /**
         * Add SEPA Data to REST API
         *
         * @since 3.6.2
         * @wp-hook woocommerce_api_order_response
         * @param Array $order_data
         * @param WC_Order $order
         * @return Array
         **/
        function add_api_data_legacy($order_data, $order)
        {
        }
        /**
         * Load Gateway on shop order screen
         *
         * @wp-hook current_screen
         * @return void
         **/
        public function load_gateway_on_shop_order()
        {
        }
        /**
         * Ajax
         *
         * @since GM 3.3
         * @wp-hook wp_ajax_gm_sepa_direct_debit_mandate_preview
         * @return void
         **/
        public function ajax_mandate_preview()
        {
        }
        /**
         * Get Ajax preview
         *
         * @since GM 3.3
         * @param Array $args
         * @return String
         **/
        public static function generatre_mandate_preview($args, $mandate_id = \false, $date = \false)
        {
        }
        /**
         * Add Gateway
         *
         * @since GM 3.3
         * @wp-hook woocommerce_payment_gateways
         * @param Array $gateway
         * @return Array
         **/
        public function german_market_add_sepa_direct_debit($gateways)
        {
        }
        /**
         * ajax, manages what happen when the downloadbutton on admin order page is clicked
         *
         * @since WGM 3.0
         * @access public
         * @static
         * @hook wp_ajax_german_market_download_sepa_mandate
         * @arguments $_REQUEST[ 'order_id' ]
         * @return void, exit()
         */
        public static function admin_ajax_download_pdf()
        {
        }
        /**
         * template for sepa mandate in pdf
         *
         * @hook wp_wc_invoice_pdf_template_invoice_content
         * @param String $path
         * @return String
         */
        public static function pdf_content()
        {
        }
    }
    class WGM_Age_Rating
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Compatibilities
         */
        public static function get_instance()
        {
        }
        /**
         * Form Field (Checkbox) in shipping methods
         *
         * @since 	3.8.2
         * @wp-hook 	admin_init
         * @return 	void
         */
        public function form_field_in_shipping_mehtods()
        {
        }
        /**
         * Change available shipping classes in cart
         *
         * @wp-hook 	woocommerce_package_rates
         * @param 	Aray $rates
         * @return 	Array
         */
        public function available_shipping_rates($rates)
        {
        }
        /**
         * Add Setting to Shipping Classes
         *
         * @wp-hook 	woocommerce_shipping_instance_form_fields_{id}
         * @param 	Aray $settings
         * @return 	Array
         */
        public function shipping_setting($settings)
        {
        }
        /**
         * Add Product Data Tab
         *
         * @wp-hook 	woocommerce_product_data_tabs
         * @param 	Aray $tabs
         * @return 	Array
         */
        public function add_product_tab($tabs)
        {
        }
        /**
         * Render Product Data Tab
         *
         * @wp-hook 	woocommerce_product_data_panels
         * @return 	void
         */
        public function add_product_write_panel()
        {
        }
        public function variation_fields($loop, $variation_data, $variation)
        {
        }
        /**
         * Save Meta Data
         *
         * @wp-hook 	woocommerce_process_product_meta, woocommerce_ajax_save_product_variations
         * @param 	Integer $post_id
         * @param 	Post $post
         * @return 	void
         */
        public function save_meta($post_id, $post = \NULL)
        {
        }
        /**
         * Returns the age rating of a product
         * not regarding the general age rating
         *
         * @since 3.10.5.0.1
         * @static
         * @param WC_Product $product
         * @return Integer
         */
        public static function get_age_rating_or_product($product, $use_intval = \true)
        {
        }
        /**
         * Returns the age rating of a cart or an order
         * or return 0 if there are no age rating products
         *
         * @static
         * @return 	Integer
         */
        public static function get_age_rating_of_cart_or_order($order = \false)
        {
        }
    }
    /**
     * Shortcodes
     *
     * @author jj,ap
     */
    class WGM_Shortcodes
    {
        public static function register()
        {
        }
        /**
         * callback for shortcode [gm_product_review_info]
         *
         * @param Array $atts
         * @return String
         */
        public static function add_shortcode_product_review_info($atts = array())
        {
        }
        /**
         * callback for shortcode [gm_product_extra_costs_non_eu]
         *
         * @param Array $atts
         * @return String
         */
        public static function extra_costs_non_eu_callback($atts = array())
        {
        }
        /**
         * callback for shortcode [gm_product_age_rating]
         *
         * @param Array $atts
         * @return String
         */
        public static function age_rating_callback($atts = array())
        {
        }
        /**
         * Add GTIN Shortcode
         *
         * @since 3.8.2
         * @param Array $atts
         * @return String
         */
        public static function gtin_callback($atts = array())
        {
        }
        /**
         * callback for shortcode [gm_product_tax_info]
         *
         * @param Array $atts
         * @return String
         */
        public static function tax_callback($atts = array())
        {
        }
        /**
         * callback for shortcode [gm_product_shipping_info]
         *
         * @param Array $atts
         * @return String
         */
        public static function shipping_info_callback($atts = array())
        {
        }
        /**
         * callback for shortcode [gm_proudct_delivery_time]
         *
         * @param Array $atts
         * @return String
         */
        public static function delivery_time_callback($atts = array())
        {
        }
        /**
         * callback for shortcode [gm_product_ppu]
         *
         * @param Array $atts
         * @return String
         */
        public static function ppu_callback($atts = array())
        {
        }
        /**
         * get product bei attribute
         *
         * @param Array $atts
         * @param WC_Product $product
         * @return WC_Product || false
         */
        public static function get_product_by_shortcode_attribute($atts = array(), $product = \null)
        {
        }
        /**
         * maybe remove html markup
         *
         * @param String $return_string
         * @param Array $atts
         * @return String
         */
        public static function maybe_remove_markup_of_shortcode_return_value_by_attribute($return_string, $atts)
        {
        }
        /**
         * Shortcode for the amount of days to withdraw to include in Disclaimer page
         *
         * @access      public
         * @static
         * @uses        get_option
         * @return    string days and singular/plural of day
         */
        public static function add_shortcode_disclaimer_deadline()
        {
        }
        /**
         * withdraw address shortcode for the disclaimer page
         *
         * @access      public
         * @uses        get_option
         * @static
         * @return    string withdraw address
         */
        public static function add_shortcode_disclaimer_address_data()
        {
        }
        /**
         * Shortcode for the second checkout page in the german Version
         *
         * @access    public
         * @static
         * @return    string template conents
         */
        public static function add_shortcode_check()
        {
        }
        /**
         * callback for shortcode [gm_product_sale_label]
         *
         * @param Array $atts
         * @return String
         */
        public static function sale_label_callback($atts = array())
        {
        }
        /**
         * callback for shortcode [digital_prerequisits]
         *
         * @param Array $atts
         * @return String
         */
        public static function digital_prerequisits_callback($atts = array())
        {
        }
    }
    /**
     * Helper Functions
     *
     * @author jj, ap
     */
    class WGM_Helper
    {
        protected static $run_time_cache = array();
        /**
         * Returns the decimal length of any scalar value.
         *
         * @param   int|float|string|bool $value
         * @return  int
         */
        public static function get_decimal_length($value)
        {
        }
        /**
         * Tests against a specific version of Woocommerce
         *
         * @param string $min_version
         *
         * @return bool
         */
        public static function woocommerce_version_check($min_version = '2.5.0-beta')
        {
        }
        /**
         * Replaces umlauts etc.
         *
         * @param string $name
         * @return mixed
         */
        public static function get_page_slug($name)
        {
        }
        /**
         * get the page_id from db by name of page
         *
         * @access	public
         * @static
         * @param	string $page_name
         * @return	int page_id the page id
         */
        public static function get_page_id($page_name)
        {
        }
        /**
         * Gets the url to the check page and then to checkout form the core plugin
         *
         * @access	public
         * @uses		get_option, get_permalink, is_ssl
         * @static
         * @return	string link to checkout page
         */
        public static function get_check_url()
        {
        }
        /**
         * gets the checkout page_id
         *
         * @access	public
         * @uses		get_option
         * @static
         * @return 	int checkout poge id
         */
        public static function get_checkout_redirect_page_id()
        {
        }
        /**
         * get checkout page id via filter
         *
         * @param int $checkout_redirect_page_id checkout poge id
         * @return int checkout poge id
         */
        public static function change_checkout_redirect_page_id($checkout_redirect_page_id)
        {
        }
        /**
         * get the default pages
         *
         * @access public
         * @static
         * @author jj, ap
         * @return array default pages
         */
        public static function get_default_pages($lang = \null)
        {
        }
        /**
         * Determines wether to show shipping address or not
         * @author jj, ap
         * @static
         * @return bool should show seperate shipping address or not
         */
        public static function ship_to_billing()
        {
        }
        /**
         * Get an Option name for WooCommerce German Market
         *
         * @since	1.1.5
         * @static
         * @access	public
         * @param	string $option_index
         * @return	mixed string of option, when not exist FALSE
         */
        public static function get_wgm_option($option_index)
        {
        }
        /**
         * update option if not exists
         *
         * @access	public
         * @static
         * @uses		update_option, get_option
         * @param 	string $option
         * @param 	string $value
         * @return	void
         */
        public static function update_option_if_not_exist($option, $value)
        {
        }
        /**
         * Checks if the shop is configured to only ship to its base location
         *
         * ATTENTION: This is backported from WGM3 and is not currently in use.
         * It's here for safekeeping as me might need this check here as well
         *
         * @return bool
         */
        //public static function is_domestic_shop() {
        //
        //	if ( get_option( 'woocommerce_allowed_countries' ) !== 'specific' ) {
        //		return FALSE;
        //	}
        //	$base_location = get_option( 'woocommerce_default_country' );
        //
        //	$wc_countries = WC()->countries;
        //	if ( is_null( $wc_countries ) ) {
        //		$wc_countries = new WC_Countries();
        //	}
        //
        //	$allowed = $wc_countries->get_allowed_countries();
        //	if ( count( $allowed ) === 1 && isset( $allowed[ $base_location ] ) ) {
        //		return TRUE;
        //	}
        //
        //	return FALSE;
        //
        //}
        /**
         * inserts a given element before key into given array
         *
         * @access public
         * @author jj, ap
         * @param array $array
         * @param string $key
         * @param string $element
         * @return array items
         */
        public function insert_array_before_key($array, $key, $element)
        {
        }
        /**
         * Adds bodyclass to second checkout
         * @param array $classes
         * @return array
         * @author ap
         */
        public static function add_checkout_body_classes($classes)
        {
        }
        /**
         * Enforced certain settings for the small business regulation setting.
         * @author ap
         * @return void
         */
        public static function check_kleinunternehmerregelung()
        {
        }
        /**
         * Filters and replaces deliveryimes
         *
         * not in used since 3.8.1
         *
         * @param string $string
         * @param string $deliverytime
         * @author ap
         * @return string
         */
        public static function filter_deliverytimes($string, $deliverytime)
        {
        }
        /**
         * Removes postcount on deliverytimes backend page
         * @author ap
         * @param array $cols
         * @return array
         */
        public static function remove_deliverytime_postcount_columns($cols)
        {
        }
        /**
         * @since 3.0.2: filter does nothing if woocommerce-subscriptions is activated and we are in checkout or in cart 
         *
         *
         * @author unknown
         * @wp-hook woocommerce_countries_inc_tax_or_vat
         * @wp-hook woocommerce_countries_ex_tax_or_vat
         * @param String $return
         * @return return
         */
        public static function remove_woo_vat_notice($return)
        {
        }
        /**
         * Adds additional info to the variation data used by the add-to-cart form
         *
         * @wp_hook woocommerce_available_variation
         *
         * @param $data
         * @param $product
         * @param $variation
         *
         * @return array
         */
        public static function prepare_variation_data($data, $product, $variation)
        {
        }
        public static function is_digital($product_id = 0)
        {
        }
        public static function paypal_fix($args)
        {
        }
        /**
         * Change the checkout button of gateways to "next"
         *
         * @param $template_name
         * @param $template_path
         * @param $located
         * @param $args
         */
        public static function change_payment_gateway_order_button_text($template_name, $template_path, $located, $args)
        {
        }
        /**
         * Disable shipping for virtual products
         * @deprecated since 2.6.9
         * @param bool $need_shipping
         * @access public
         * @since 2.4.10
         * @author ap
         * @wp-hook woocommerce_cart_needs_shipping
         * @return bool $need_shipping
         */
        public static function virtual_needs_shipping($need_shipping)
        {
        }
        public static function get_default_tax_label()
        {
        }
        public static function only_digital($order)
        {
        }
        public static function order_has_digital_product($order)
        {
        }
        /**
         * Check if the current visit is a rest api call
         *
         * @since 3.8.2
         * @return boolean
         */
        public static function is_rest_api()
        {
        }
        /**
         * Get Translatable Options
         *
         * @since 3.9.2
         * @return Array
         */
        public static function get_translatable_options()
        {
        }
        /**
         * tests if $object is an object and the method exisits in this object
         *
         * @sice 3.11
         * @param mixed $object
         * @param String $method_name
         * @return bool
         */
        public static function method_exists($object, $method_name)
        {
        }
        /**
         * Do not save customer ip in order
         *
         * @since 3.12
         * @wp-hook woocommerce_checkout_create_order    
         * @param WC_Order $order
         * @param Array $data
         * @return void
         */
        public static function do_not_save_customer_ip_in_order($order, $data)
        {
        }
        /**
         * Get "tax exempt" status of an order as String
         *
         * @param	WC_Order $order
         * @return	String
         */
        public static function wcvat_woocommerce_order_details_status($order)
        {
        }
        /**
         * Returns whether the postocde of an given eu country is an exemption for eu vat
         *
         * @param String $country
         * @param String $postcode
         * @return Boolean
         */
        public static function is_vat_postcode_exemptions($country, $postcode)
        {
        }
        /**
         * get vat postcode exemptions for eu countries 
         * 
         * @return Array
         */
        public static function get_vat_postcode_exemptions()
        {
        }
        /**
         * get default text for option 'wp_wc_invoice_pdf_girocode_text'
         * 
         * @static
         * @return String
         */
        public static function get_default_text_next_to_qr_code()
        {
        }
        /**
         * get install language
         * 
         * @static
         * @return String
         */
        public static function get_installation_language()
        {
        }
        /**
         * load German Market textdomain of installing language
         * 
         * @static
         * @return void
         */
        public static function load_installation_language_textdomain()
        {
        }
        /**
         * re-load German Market textdomain after installation
         * 
         * @static
         * @return void
         */
        public static function reset_textdomain()
        {
        }
        /**
         * filter to change German Market locale 
         * 
         * @static
         * @wp-hook 
         * @return void
         */
        public static function plugin_locale($locale, $domain = '')
        {
        }
    }
    /**
     * Class WGM_Legal_Information_Product_Reviews
     *
     */
    class WGM_Legal_Information_Product_Reviews
    {
        public $star_ratings_option = \null;
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Legal_Information_Product_Reviews
         */
        public static function get_instance()
        {
        }
        /**
         * Don't change rating star output in product review template
         * 
         * @wp-hook woocommerce_review_before
         * @return void
         */
        public function review_before()
        {
        }
        /**
         * Don't change rating star output in product review template
         * 
         * @wp-hook woocommerce_review_meta
         * @return void
         */
        public function review_meta()
        {
        }
        /**
         * Change Rating HTML Output
         * 
         * @wp-hook woocommerce_product_get_rating_html
         * @param String $html
         * @param String $rating
         * @param String $count
         * 
         * @return String
         */
        public function rating_html($html, $rating, $count)
        {
        }
        /**
         * TO DO: Return Markup For Short Text Information
         * 
         * @return String
         */
        public function get_short_text_markup()
        {
        }
        /**
         * Get Default Text for Short Text Information
         * 
         * @static
         * @return String
         */
        public static function get_short_text_default()
        {
        }
        /**
         * Output Markup in AJAX Request
         * 
         * @wp-hook wp_ajax_product_review_info
         * @wp-hook wp_ajax_nopriv_product_review_info
         * 
         * @return void
         */
        public function before_review_ajax()
        {
        }
        /**
         * Get Markup Before Reviews
         * 
         * @return String
         */
        public function get_markup_before_review()
        {
        }
        /**
         * Get Markup After Star Ratings
         * 
         * @return String
         */
        public function get_markup_after_stars_rating()
        {
        }
        /**
         * Get Default Option Key
         * 
         * @static
         * @return String
         */
        public static function get_default_info_text_setting()
        {
        }
        /**
         * Get Text "verified"
         * 
         * @static
         * @return String
         */
        public static function get_verified_text()
        {
        }
        /**
         * Get Text "not verified"
         * 
         * @static
         * @return String
         */
        public static function get_not_verified_text()
        {
        }
        /**
         * Get Text
         * 
         * @return String
         */
        public function get_info_text()
        {
        }
    }
    /**
     * Class WGM_Due_date
     *
     */
    class WGM_Due_date
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Due_date
         */
        public static function get_instance()
        {
        }
        public static $complete_due_date_string = '';
        /**
         * Add Form Fields
         *
         * @wp-hook admin_init
         * @return void
         **/
        public function init_form_fields()
        {
        }
        /**
         * Save due date as meta
         *
         * @wp-hook woocommerce_checkout_update_order_meta
         * @param Integer $order_id
         * @param WC_Checkout $checkout
         * @return void
         **/
        public function save_due_date_in_order($order_id, $checkout = \false, $payment_method_id = \false)
        {
        }
        /**
         * Add "Due Date" to gateway settings
         *
         * wp-hook woocommerce_settings_api_form_fields_ . {gateway_id}
         * @param Array $settings
         * @return Array
         */
        public function settings_field($settings)
        {
        }
        /**
         * Add Order Date to Emails
         *
         * wp-hook woocommerce_get_order_item_totals
         * @param Array $total_rows
         * @param WC_Order $order
         * @return Array
         */
        public function order_items_totals($total_rows, $order)
        {
        }
        /**
         * Add Exception for calling esc_attr and output due date markup
         *	
         * @hook esc_html
         * @param String $save_text
         * @param String $text
         * @return String
         */
        public static function esc_html_exception($save_text, $text)
        {
        }
        /**
         * save meta data
         *	
         * @hook woocommerce_process_shop_order_meta
         * @param Integer $post_id
         * @param WP_Post $post
         * @return void
         */
        public function save_meta_data($order_id, $post_or_order_object)
        {
        }
        /**
         * Backend edit due date
         *	
         * @hook woocommerce_admin_order_data_after_order_details
         * @param WC_Order $order
         * @return void
         */
        public function backend_field_in_edit_order($order)
        {
        }
        /**
         * Cash On Delivery Default Text
         *	
         * @hook woocommerce_de_due_date_text_cash_on_delivery
         * @param String $text
         * @return String
         */
        function wgm_cash_on_delivery_text($text)
        {
        }
        /**
         * Purchase On Account Default Text
         *	
         * @hook woocommerce_de_due_date_text_german_market_purchase_on_account
         * @param String $text
         * @return String
         */
        function wgm_german_market_purchase_on_account($text)
        {
        }
    }
    /**
     * Class WGM_Fee
     *
     * This class will fix the taxes for fee "Nachnahme" in "review-order"
     * and after creating the order
     *
     * @author  ChriCo
     */
    class WGM_Fee
    {
        /**
         * Adding Fee to gateway-Page second-checkout to display the taxes
         *
         * @wp-hook woocommerce_cart_calculate_fees
         *
         * @param   WC_Cart $cart
         * @return  void
         */
        public static function add_fee_to_gateway_page(\WC_Cart $cart)
        {
        }
        /**
         * Adds the Fee with tax-string to review-order- and cart-totals-Template
         *
         * @wp-hook woocommerce_cart_totals_fee_html
         *
         * @param   string $fee_html
         * @param   stdClass $fee
         *
         * @return  string $fee_html
         */
        public static function show_gateway_fees_tax($fee_html, $fee)
        {
        }
        /**
         * Returns the highest tax rate of all cart items
         *
         * @return array
         */
        public static function get_highest_tax_rate()
        {
        }
        /**
         * Adding the correct split taxes to the fee-object.
         *
         * since 3.5
         * @wp-hook woocommerce_cart_totals_get_fees_from_cart_taxes
         * @param   Array $fee_taxes
         * @param 	Array $fee
         * @param   WC_Cart_totals $wc_cart_totals
         * @return  Array 
         */
        public static function cart_totals_get_fees_from_cart_taxes($fee_taxes, $fee, $wc_cart_totals)
        {
        }
        /**
         * Adding the split taxes to fee order_item which is called
         * in get_order_item_totals() for thankyou-page, email-template, ..
         *
         * @author  Chrico
         *
         * @wp-hook woocommerce_get_order_item_totals
         *
         * @param   array $items    contains all order items for display
         * @param   WC_Order $order contains the complete order-Object
         *
         * @return  array $items
         */
        public static function add_tax_string_to_fee_order_item($items, $order)
        {
        }
        /**
         * Adds the fee taxes to the tax_totals-array.
         * The key of $tax_totals is the unique WC_Tax::get_rate_code( $rate_id );
         *
         * @author  ChriCo
         *
         * @wp-hook woocommerce_order_tax_totals
         *
         * @param   array $tax_totals
         * @param   WC_Order $order
         *
         * @return  array $tax_totals
         */
        public static function add_fee_to_order_tax_totals($tax_totals, $order)
        {
        }
        public static function get_cod_fee_id()
        {
        }
    }
    /**
     * Class WGM_Refunds
     *
     * Refunds: Backend Menue, List, Downloads
     *
     * @author MarketPress
     */
    class WGM_Refunds
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Refunds
         */
        public static function get_instance()
        {
        }
        /**
         * Add submenu
         * 
         * @wp-hook admin_menu
         * @access public
         */
        public function add_refund_submenu()
        {
        }
        /**
         * Add submenu
         * 
         * @add_submenu_page
         * @access public
         */
        public function render_refund_menu()
        {
        }
        /**
         * Add Screen Options
         * 
         * @access public
         * @return Boolean
         */
        public function screen_options($bool, $screen)
        {
        }
        /**
         * Save Screen Options
         * 
         * @access public
         * @param $status
         * @param String $option
         * @param String $value
         * @return Integer
         */
        public function save_screen_options($status, $option, $value)
        {
        }
    }
    class German_Market_Theme_Compatibility_Ecode
    {
        /**
         * Theme Ecode: Doubled Price in loop
         *
         * @since v3.7.1
         * @tested with theme version 1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Peggi
    {
        /**
         * Theme peggi: 2x price in product
         *
         * @since v3.9.1.1
         * @tested with theme version 1.4
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Handlavet
    {
        /**
         * Theme Handlavet
         *
         * @since Version: 3.10.5.0.1
         * @wp-hook after_setup_theme
         * @tested with theme version 1.1
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Techmarket
    {
        /**
         * Theme techmarket
         *
         * @since v3.10.0.1
         * @tested with theme version 1.4.3
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Shopkeeper
    {
        /**
         * Theme Shopkeeper: Price and Bakery Builder
         *
         * @since v3.9.1
         * @tested with theme version 2.8.3
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Lotusgreen
    {
        /**
         * Theme Lotusgreen
         *
         * @since 3.11.0.1
         * @tested with theme version 1.7
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Gioia
    {
        /**
         * Theme gioia: 2xPrice in Loop
         *
         * @since v3.8.2
         * @tested with theme version 1.1
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Chromium
    {
        /**
         * Theme Chromium
         *
         * @since v3.9.2
         * @tested with theme version 1.2.1
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Furlen
    {
        /**
         * Theme Furlen
         *
         * @since Version: 3.10.6.0.1
         * @tested with theme version 1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Astra
    {
        /**
         * Theme Astra: Doubled Price in loop
         *
         * @since v3.7.1
         * @tested with theme version 1.4.10
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Zocker
    {
        /**
         * Theme Zocker
         *
         * @since v3.12.5
         * @wp-hook after_setup_theme
         * @tested with theme version 1.1
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Learts
    {
        /**
         * Theme Learts
         *
         * @since Version: 3.10.5.0.1
         * @tested with theme version 1.3.9
         * @wp-hook after_setup_theme
         * @tested with theme version 2.8
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Tonda
    {
        /**
         * Theme Tonda
         *
         * @since v3.10.2
         * @tested with theme version 1.6
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Gardening
    {
        /**
         * Theme Gardening
         *
         * @since v3.9.1.9
         * @tested with theme version 1.8
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Kitring
    {
        /**
         * Theme Kitring
         *
         * @since 3.10.6.0.6
         * @tested with theme version 2.4
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Woovina
    {
        /**
         * Theme Woovina
         *
         * @since v3.9.1.9
         * @tested with theme version 4.4
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Luciavineyards
    {
        /**
         * Theme Lucia Vineyards
         *
         * @since 3.11.1.4
         * @tested with theme version 1.3
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * Class German_Market_Neve_Compatibility
     */
    class German_Market_Neve_Compatibility
    {
        /**
         * Init function
         */
        public function init()
        {
        }
        /**
         * Remove German Market Price in Shop
         *
         * @param array $parts Parts.
         * @param \WC_Product $product Woo product.
         * @param string $hook Current hook.
         *
         * @return array
         **/
        public function hide_gm_price_in_loop($parts, $product, $hook)
        {
        }
        /**
         * Remove Price in Single Pages
         *
         * @param array $parts
         * @param \WC_Product $product
         * @param string $hook
         * @return array
         **/
        public function hide_gm_price_in_single($parts, $product, $hook)
        {
        }
        /**
         * Wrap price on single product.
         */
        public function wrap_price()
        {
        }
        /**
         * Add GM functionality.
         */
        public function add_gm_data()
        {
        }
        /**
         * Script for stepped layout.
         */
        public function enqueue_checkout_script()
        {
        }
    }
    class German_Market_Theme_Compatibility_Bacola
    {
        /**
         * Theme Bacola
         *
         * @since v3.13.2.0.1
         * @tested with theme version 1.1.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Add German Market Price Data in Loop
         *
         * @wp-hook woocommerce_get_price_html
         * @param String $price
         * @param WC_Product $product
         * @return String
         */
        public static function woocommerce_get_price_html($price, $product)
        {
        }
    }
    class German_Market_Theme_Compatibility_Rttheme20
    {
        /**
         * Theme RT-Theme-20
         *
         * @since Version: 3.15
         * @wp-hook after_setup_theme
         * @tested with theme version 2.4
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Lacomete
    {
        /**
         * Theme Lacomete
         *
         * @since Version: 3.22.0.1
         * @tested with theme version 1.3
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Sentinal
    {
        /**
         * Theme Sentinal
         *
         * @since Version: 3.12.0.3-Support
         * @wp-hook after_setup_theme
         * @tested with theme version 1.0
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Bikeway
    {
        /**
         * Theme BikeWay
         *
         * @since 3.11
         * @tested with theme version 1.0.12
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Chaai
    {
        /**
         * Theme Chaai
         *
         * @since v3.13.1
         * @tested with theme version 1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Storefront
    {
        /**
         * Theme Storefront
         *
         * @since 3.15
         * @tested with theme version 4.1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
        /**
         * add inline style to wp_head
         *
         * @wp-hook wp_head
         * @return void
         */
        public static function extra_css_short_product_review_info()
        {
        }
        /**
         * add inline style to wp_head
         *
         * @wp-hook wp_head
         * @return void
         */
        public static function extra_css_complete_product_review_info()
        {
        }
    }
    class German_Market_Theme_Compatibility_Technics
    {
        /**
         * Theme Technigs: Doubled Price in loop and product page
         *
         * @since v3.7.2
         * @tested with theme version 1.0.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Goya
    {
        /**
         * Theme Goya
         *
         * @since 3.10.6.0.6
         * @tested with theme version 1.0.4.4
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Alishop
    {
        /**
         * Theme Ecode: Doubled Price in loop and product page
         *
         * @since v3.7.1
         * @tested with theme version 1.1.4
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Sport
    {
        /**
         * Theme Sport
         *
         * @since Version: 3.10.5.0.1
         * @wp-hook after_setup_theme
         * @tested with theme version 2.8
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Panaderia
    {
        /**
         * Theme Panaderia
         *
         * @since v3.10.3.3
         * @tested with theme version 1.1
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Mrtailor
    {
        /**
         * Theme Mr. Tailor
         *
         * @since v3.10.1
         * @tested with theme version 2.9.15
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Crexis
    {
        /**
         * Theme Crexis
         *
         * @since v3.10.2
         * @tested with theme version 3.1.4
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Mybag
    {
        /**
         * Theme MyBag
         *
         * @since v3.10.2
         * @tested with theme version 1.2.6
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Ambient
    {
        /**
         * Theme Ambient
         *
         * @since v3.13.1
         * @tested with theme version 1.9.1
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Woostroid
    {
        /**
         * Theme Woodstroid: Remove double price in shop
         *
         * @since v3.5.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Urus
    {
        /**
         * Theme Ururs
         *
         * @since v3.10.3.3
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Bridge
    {
        /**
         * Theme Bridge
         *
         * @since v3.10.1
         * @tested with theme version 21.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Zigcylite
    {
        /**
         * Theme Zigcy Lite
         *
         * @since Version: 3.11.1.4
         * @wp-hook after_setup_theme
         * @tested with theme version 2.0.6
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Aurum
    {
        /**
         * Theme aurom Support: Double price in loop and single product pages
         *
         * Tested with Theme Version 3.0.1
         * @access public
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Pearl
    {
        /**
         * Theme Pearl
         *
         * @since v3.10.2
         * @tested with theme version 3.1.5
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Hongo
    {
        /**
         * Theme Hongo
         *
         * @since v3.10.3
         * @tested with theme version 1.1.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Elessitheme
    {
        /**
         * Theme Elessi: Price in Loop & Product Pages
         *
         * @since v3.6.2
         * @last updated v3.10.6.0.10
         * @tested with theme version 4.1.6.1
         * @wp-hook ini
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Movedo
    {
        /**
         * Theme Movedo
         *
         * @since 3.11.1.4
         * @tested with theme version 3.4.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Supro
    {
        /**
         * Theme Supro: Doubled Price on product page
         *
         * @since v3.9.2
         * @tested with theme version 1.4.6
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Rigid
    {
        /**
         * Theme Rigid
         *
         * @since Version: 3.10.5.0.1
         * @tested with theme version 5.6.6.1
         * @wp-hook after_setup_theme
         * @tested with theme version 2.8
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Pawfriends
    {
        /**
         * Theme Paw friends
         *
         * @since v3.10.1
         * @tested with theme version 1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Riode
    {
        /**
         * Theme Riode
         *
         * @since Version: 3.11.1.4
         * @wp-hook after_setup_theme
         * @tested with theme version 1.1.0
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Avada
    {
        /**
         * Theme Avada Support
         *
         * @access public
         * Tested with Theme Version 5.7.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Theme Avada Support: Checkboxes on pay for order page
         *
         * @access public
         * @wp-hook woocommerce_pay_order_button_html
         * @param String $markup
         * @return String
         */
        public static function pay_for_order_page_checkboxes($markup)
        {
        }
        /**
         * Theme Avada Support: Double "[Digital]" during checkout, very simple solution
         *
         * @access public
         * @wp-hook woocommerce_cart_item_name
         * @return void
         */
        public static function remove_double_digital($title, $cart_item, $cart_item_key)
        {
        }
    }
    class German_Market_Theme_Compatibility_Teepro
    {
        /**
         * Theme Teepro
         *
         * @since v3.10.2
         * @tested with theme version 3.3.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_June
    {
        /**
         * Theme June
         *
         * @since v3.10.1
         * @tested with theme version 1.8.1
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Themifyshoppe
    {
        /**
         * Theme Themify Shoppe
         *
         * @since Version: 3.10.4.1
         * @updated Version: 3.10.5.1
         * @updated Version: 3.11.0.1
         * @wp-hook after_setup_theme
         * @tested with theme version 5.2.2
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Drile
    {
        /**
         * Theme Drile
         *
         * @since Version: 3.10.4.1
         * @wp-hook after_setup_theme
         * @tested with theme version 1.0.7
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Kartpul
    {
        /**
         * Theme Kartpul
         *
         * @since v3.10.2
         * @tested with theme version 1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Emarket
    {
        /**
         * Theme Emarket
         *
         * @since Version: 3.10.4.1
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Kalium
    {
        /**
         * Theme Kalium: Price in Loop & Product Pages
         *
         * @since v3.6.3
         * @tested with theme version 2.5.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Theme Kalium: Price in Loop
         *
         * @since v3.6.3
         * @tested with theme version 2.5.0
         * @wp-hook woocommerce_after_template_part
         * @param String $template_name
         * @param String $template_path
         * @param String $located
         * @param Array $args
         * @return void
         */
        public static function theme_support_kalium_loop_price($template_name, $template_path, $located, $args)
        {
        }
    }
    class German_Market_Theme_Compatibility_Zonex
    {
        /**
         * Theme Zonex
         *
         * @since Version: 3.10.5.0.1
         * @wp-hook after_setup_theme
         * @tested with theme version 1.1.2
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Erado
    {
        /**
         * Theme Erado: Doubled Price on product page
         *
         * @since v3.7.2
         * @tested with theme version 1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Ciloe
    {
        /**
         * Theme Ciloe: In Loop: Change order of data
         *
         * @since v3.8.1
         * @tested with theme Version 1.5.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Eco
    {
        /**
         * Theme Eat Eco: 2x price
         *
         * @since v3.9.2
         * @tested with theme version 1.0.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Blaze
    {
        /**
         * Theme Blaze
         *
         * @since Version: 3.10.4.1
         * @wp-hook after_setup_theme
         * @tested with theme version 1.4
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Oceanwp
    {
        /**
         * Theme OceanWP: Doubled Price in loop and single
         *
         * @since v3.7.1
         * @tested with theme version 1.5.27
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Hyperon
    {
        /**
         * Theme Hyperon
         *
         * @since v3.9.2
         * @tested with theme version 1.3
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Dokan
    {
        /**
         * Theme Dokan
         *
         * @since Version: 3.11.0.1
         * @wp-hook after_setup_theme
         * @tested with theme version 2.3.6
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Worldmart
    {
        /**
         * Theme Worldmart: Price in Product Pages
         *
         * @since v3.5.7
         * @wp-hook wp
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Jupiterx
    {
        /**
         * Theme JupiterX
         *
         * @since v3.10.2
         * @tested with theme version 3.3.2
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Zamona
    {
        /**
         * Theme Zamona
         *
         * @since v3.14
         * @tested with theme version 1.2.1
         * @wp-hook german_market_after_frontend_init
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Atomion
    {
        /**
         * Theme Atomion
         *
         * @since 3.12.5
         * @tested with theme version 1.3.5
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Get Shortdescription made by German Market
         *
         * @since 3.12.5
         * @tested with theme version 1.3.5
         * @wp-hook atomion_wc_checkout_description_show_excerpt_get_excerpt
         * @param WP_Post $post_excerpt
         * @param mixed $other_data
         * @param mixed $cart_item 
         * @return String
         */
        public static function short_description($post_excerpt, $other_data, $cart_item)
        {
        }
    }
    class German_Market_Theme_Compatibility_Klippe
    {
        /**
         * Theme Klippe
         *
         * @since v3.9.2
         * @tested with theme version 1.4
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Theme Klippe: CSS for Loop Price
         *
         * @since v3.9.2
         * @tested with theme version 3.29.2
         * @wp-hook wp_head
         * @return void
         */
        public static function theme_support_css_for_theme_klippe()
        {
        }
    }
    class German_Market_Theme_Compatibility_Zass
    {
        /**
         * Theme Zass: Price in Loop & Product Pages
         *
         * @since v3.6.3
         * @tested with theme version 2.7.0
         * @wp-hook german_market_after_frontend_init
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Theme Zass: Price in Loop & Product Pages
         *
         * @since v3.6.3
         * @tested with theme version 2.7.0
         * @wp-hook woocommerce_after_template_part
         * @param String $template_name
         * @return void
         */
        public static function theme_support_zass_after_price_loop($template_name)
        {
        }
    }
    class German_Market_Theme_Compatibility_Bazien
    {
        /**
         * Theme Bazien: Doubled Price in loop and product page
         *
         * @since v3.7.2
         * @tested with theme version 2.5
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Brunn
    {
        /**
         * Theme Brunn
         *
         * @since v3.12.5
         * @tested with theme version 1.9
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Bazaar
    {
        /**
         * Theme Bazaar: Doubled Price
         *
         * @since v3.7.2
         * @tested with theme version 1.7
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Kanna
    {
        /**
         * Theme Kanna: Double Price
         *
         * @since v3.8.2
         * @tested with theme version 1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Vipex
    {
        /**
         * Theme Vipex
         *
         * @since v3.10.3.3
         * @tested with theme version 1.0
         * @wp-hook after_setup_theme
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Blocksy
    {
        /**
         * Theme Blocksy
         *
         * @since Version: 3.10.6.0.6
         * @wp-hook after_setup_theme
         * @tested with theme version 1.7.68
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Some additonal CSS for Floating Bar
         *
         * @since Version: 3.10.6.0.9
         * @wp-hook wp_head
         * @return void
         */
        public static function additional_css()
        {
        }
    }
    class German_Market_Theme_Compatibility_Waveride
    {
        /**
         * Theme Waveride
         *
         * @since Version: 3.15
         * @wp-hook after_setup_theme
         * @tested with theme version 1.3
         * @return void
         */
        public static function init()
        {
        }
    }
    class German_Market_Theme_Compatibility_Helloelementor
    {
        /**
         * Theme Hello Elementor
         *
         * @since Version: 3.10.6.0.6
         * @wp-hook after_setup_theme
         * @tested with theme version 2.3.1
         * @return void
         */
        public static function init()
        {
        }
    }
    /**
     * Class WGM_Theme_Compatibilities
     * @author MarketPress
     */
    class WGM_Theme_Compatibilities
    {
        static $instance = \NULL;
        public static $theme_compatibilities_path;
        /**
         * singleton getInstance
         *
         * @access public
         * @static
         * @return class WGM_Theme_Compatibilities
         */
        public static function get_instance()
        {
        }
        /**
         * Autoload Theme Compatibility Class
         *
         * @access public
         * @static
         * @return void
         */
        public static function theme_autoload($class)
        {
        }
        /**
         * Remove Price in Shop
         *
         * @since v3.5.4
         * wp-hook wgm_product_summary_parts
         * @param Array $parts
         * @param WC_Product $product
         * @param String $hook
         * @return String
         **/
        public static function theme_support_hide_gm_price_in_loop($parts, $product, $hook)
        {
        }
        /**
         * Remove Price in Single Pages
         *
         * @since v3.7
         * wp-hook wgm_product_summary_parts
         * @param Array $parts
         * @param WC_Product $product
         * @param String $hook
         * @return String
         **/
        public static function theme_support_hide_gm_price_in_single($parts, $product, $hook)
        {
        }
        /**
         * Theme Support: Remove GM Price in Shop
         *
         * @since v3.5.3
         * @wp-hook wgm_product_summary_parts
         * @param Array $output_parts
         * @param WC_Product $product
         * @param String $hook
         * @return Array
         */
        public static function theme_support_wgm_remove_price_in_summary_parts_in_shop($output_parts, $product, $hook)
        {
        }
    }
    /**
     * Class WGM_Plugin_Compatibility_WC_Payments
     * Compatibility functions for WooCommerce Payments plugin.
     *
     * @author MarketPress
     */
    class WGM_Plugin_Compatibility_WC_Payments
    {
        static $instance = \NULL;
        /**
         * singleton getInstance
         *
         * @access public
         * @static
         *
         * @return WGM_Plugin_Compatibility_WC_Payments
         */
        public static function get_instance()
        {
        }
        /**
         * Dont check chechboxes on product pages / cart / using "Express checkouts"
         *
         * @access public
         *
         * @param Boolean $boolean
         * @param Array $data
         * @param Array $errors
         * @param Array $request_array
         * 
         * @return Boolean
         */
        public function dont_check_checkboxes($boolean, $data, $errors, $request_array)
        {
        }
    }
    /**
     * Class WGM_Plugin_Compatibility_PayPal_Payments
     * Compatibility functions for WooCommerce Paypal Payments plugin.
     *
     * @author MarketPress
     */
    class WGM_Plugin_Compatibility_PayPal_Payments
    {
        static $instance = \NULL;
        /**
         * singleton getInstance
         *
         * @access public
         * @static
         *
         * @return WGM_Plugin_Compatibility_PayPal_Payments
         */
        public static function get_instance()
        {
        }
        /**
         * Deactivate 2nd CO page if plugin is active
         *
         * @since 3.21
         * @wp-hook init
         * @return void
         */
        public function deactivate_confirm_order_page()
        {
        }
        /**
         * Show admin notice that 2nd CO page has been turned off
         *
         * 
         * @since 3.21
         * @wp-hook admin_notices
         * @return void
         */
        public function admin_notice()
        {
        }
        /**
         * Make admin notice dismissible 
         *
         * 
         * @since 3.21
         * @wp-hook wp_ajax_german_market_dismiss_wc_paypal_notice
         * @return void
         */
        public function dismiss_notice()
        {
        }
    }
    /**
     * Class WGM_Plugin_Compatibility_WPML
     * @author MarketPress
     */
    class WGM_Plugin_Compatibility_WPML
    {
        static $instance = \NULL;
        /**
         * singleton getInstance
         *
         * @access public
         * @static
         * @return class WGM_Plugin_Compatibility_WPML
         */
        public static function get_instance()
        {
        }
        /**
         * this helps to translate the shipping method title in invoice pdf
         * it is not done by wpml
         * fix only for invoice pdf of german market (not WC E-Mails)
         * 
         * @since 3.21
         * @wp-hook woocommerce_get_order_item_totals
         * @param Array $total_rows
         * @param WC_Order $order
         * @param String $tax_display
         * @return Array
         */
        public function wpml_repair_shipping_method_title($total_rows, $order, $tax_display)
        {
        }
        /**
         * Add "WPML Support" Menu in German Market UI
         *
         * @since v3.9.2
         * @wp-hook woocommerce_de_ui_left_menu_items
         * @param Array $menu
         * @return Array
         */
        public function add_wpml_menu($menu)
        {
        }
        /**
         * Render "WPML Support" Menu in German Market UI
         *
         * @since v3.9.2
         * @return void
         */
        public function wpml_menu()
        {
        }
        /**
         * WPML Support: Translate WooCommerce Tax Rates for WPML
         *
         * @access public
         * @wp-hook woocommerce_find_rates
         * @param Array $matched_tax_rates
         * @return Array
         */
        public function translate_woocommerce_find_rates($matched_tax_rates)
        {
        }
        /**
         * WPMP Support: Translate Tax Labels for order items
         *
         * @access public
         * @wp-hook option_{wgm_translate_tax_label}
         * @param String $tax_label
         * @return String
         */
        public function translate_tax_label($tax_label)
        {
        }
        /**
         * WPML: Translate delivery times for order items
         *
         * @since v3.12.6
         * @wp-hook woocommerce_de_get_deliverytime_label_term_by_term
         * @param Object $label_term
         * @param WC_Order_Item $order_item
         * @return Object
         */
        public function wpml_translate_delivery_times_order_item($label_term, $order_item)
        {
        }
        /**
         * WPML: Translate delivery times
         *
         * @since v3.5.5
         * @wp-hook woocommerce_de_get_deliverytime_label_term
         * @param Object $label_term
         * @param WC_Product $product
         * @return void
         */
        public function wpml_translate_delivery_times($label_term, $product)
        {
        }
        /**
         * WPML: Translate delivery times in cart and checkout
         *
         * @since v3.16
         * @wp-hook gm_delivery_time_value_in_checkout
         * @param String $delivery_time
         * @param Array $cart_item
         * @return String
         */
        function wpml_delivery_time_value_in_checkout($delivery_time, $cart_item)
        {
        }
        /**
         * WPML: Translate Measuring Unit
         *
         * @since v3.11
         * @wp-hook german_market_measuring_unit
         * @param String $unit
         * @param Boolean|String $translation_lang
         * @return String
         */
        public function wpml_translate_measuring_unit($unit, $product, $translation_lang = \false)
        {
        }
        /**
         * WPML: Translate Measuring Unit
         *
         * @since v3.11
         * @wp-hook german_market_ppu_co_woocommerce_order_formatted_line_subtotal
         * @param String $unit_string
         * @param WC_Order_Item $item
         * @param WC_Order $order
         * @param Boolean|String $translation_lang
         * @return String
         */
        public function wpml_translate_measuring_unit_in_order($unit_string, $item, $order, $translation_lang = \false)
        {
        }
        /**
         * WPML: Save delivery time in order item meta, id of term in default wpml language
         *
         * @since v3.8.2
         * @wp-hook add_deliverytime_to_order_item
         * @param Integer $term_id
         * @param WC_Order_Product $product
         * @return Array
         */
        public function wpml_save_delivery_time_in_default_lang_in_order_items($term_id, $product)
        {
        }
        /**
         * WPML: Get translated product to get copied price per unit
         *
         * @since v3.9.2
         * @wp-hook wpml_used_product_for_price_per_unit
         * @param WC_Product $_product
         * @return WC_Product
         */
        public function wpml_used_product_for_price_per_unit($_product)
        {
        }
        /**
         * WPML: Translate Pages of Addional PDFs in Invoice PDF Add-On
         *
         * @since v3.8.2
         * @wp-hook wp_wc_invoice_pdf_additional_pdf_ecovation_pages_array
         * @wp-hook wp_wc_invoice_pdf_additional_pdf_tac_pages_array
         * @param Array $pages
         * @return Array
         */
        public function wpml_additional_pdf_pages($pages)
        {
        }
        /**
         * WPML Support: Switch language of doubple-opt-in resender
         *
         * @since 3.9.2
         * @wp-hook wgm_double_opt_in_customer_registration_before_bulk_resend_email
         * @param Integer $user_id
         * @return void
         */
        public function wpml_resend_double_opt_in_before($user_id)
        {
        }
        /**
         * WPML Support: Switch language of doubple-opt-in resender
         *
         * @since 3.9.2
         * @wp-hook wgm_double_opt_in_customer_registration_after_bulk_resend_email
         * @param Integer $user_id
         * @return void
         */
        public function wpml_resend_double_opt_in_after($user_id)
        {
        }
        /**
         * WPML Support: Translate product attribute names when attributes are saved when add to cart
         *
         * @since 3.10.2
         * @param String $attribute_name
         * @param WC_Product $product
         * @return String
         */
        public function wpml_german_market_attribute_name_add_to_cart($attribute_name, $product)
        {
        }
        /**
         * WPML Support: Translate Empty WooCommerce Checkout Strings
         *
         * @access public
         * @wp-hook option_{option}
         * @param String $value
         * @param String $option
         * @return String
         */
        public function translate_empty_translate_woocommerce_checkout_options($default, $option, $passed_default)
        {
        }
        /**
         * WPML Support: Translate WooCommerce Checkout Strings
         *
         * @access public
         * @wp-hook option_{option}
         * @param String $value
         * @param String $option
         * @return String
         */
        public function translate_woocommerce_checkout_options($value, $option, $translation_lang = \false)
        {
        }
        /**
         * WPML Support: Switch language of invoice in backend downloads
         *
         * @since 3.8.1
         * @access public
         * @wp-hook wcreapdf_pdf_before_create
         * @param Array $args
         * @return void
         */
        public function wpml_invoice_pdf_admin_download_switch_lang($args)
        {
        }
        /**
         * WPML Support: Reswitch language of invoice pdf in backend downloads
         *
         * @since 3.8.1
         * @access public
         * @wp-hook wp_wc_invoice_pdf_end_template
         * @return void
         */
        public function wpml_invoice_pdf_admin_download_reswitch_lang()
        {
        }
        /**
         * WPML Support: Switch language of retoure and delivery pdf in backend downloads
         *
         * @since 3.8.1
         * @access public
         * @wp-hook wcreapdf_pdf_before_create
         * @param Array $settings
         * @param WC_Order $order
         * @return void
         */
        public function wpml_retoure_pdf_admin_download_switch_lang($delivery_or_retoure, $order, $admin = \false)
        {
        }
        /**
         * WPML Support: Reswitch language of retoure and delivery pdf in backend downloads
         *
         * @since 3.8.1
         * @access public
         * @wp-hook wcreapdf_pdf_after_create
         * @param Array $settings
         * @param WC_Order $order
         * @return Array
         */
        public function wpml_retoure_pdf_admin_download_reswitch_lang($delivery_or_retoure, $order)
        {
        }
        /**
         * WPML Support: Gateway Instructions and Titles are not translated as they should
         *
         * @since 3.9.2
         * @param String $content
         * @param WC_Order $order
         * @return Sring
         */
        public static function wpml_repair_payment_methods($content, $order, $args)
        {
        }
        /**
         * When WPML is activated, get default installation language by WPML
         * instead of get_option( 'WPLANG' )
         *
         * @wp-hook german_market_get_installation_language
         * @since 3.16
         * @param String $language
         * @return Sring
         */
        public function wpml_german_market_get_installation_language($language)
        {
        }
        /**
         * Show an admin notice in backend of "nutritional values" taxonomy
         * that WPML String Translation has to be used 
         *
         * @wp-hook admin_notices
         * @since 3.16
         * @return void
         */
        public function admin_notice_translate_nutritional_values()
        {
        }
        /**
         * Show an admin notice in backend of German Market
         *
         * @wp-hook admin_notices
         * @since 3.16
         * @return void
         */
        public function admin_notice_general_admin_notice()
        {
        }
        /**
         * translate nutritional values term names
         *
         * @since v3.16
         * @wp-hook gm_fic_nutritional_values_term_name
         * @param String $term_name
         * @param WP_Term $term
         * @param Boolean $is_backend
         * @return String
         */
        public function fic_nutritional_values_term_name($term_name, $term, $is_backend = \false)
        {
        }
        /**
         * use original product to get german market settings / output (copy)
         *
         * @since v3.16
         * @wp-hook gm_product_used_product_to_get_translatable_settings
         * @param WC_Product $product
         * @return WC_Product
         */
        public function used_product_to_get_translatable_settings($product)
        {
        }
        /**
         * show correct measuring unit in ppu in translated products in backend
         *
         * @since v3.16
         * @wp-hook german_market_pa_measuring_terms_in_backend
         * @param Array $terms
         * @param Integer $thepostid
         * @param String $value
         * @return Array
         */
        public function pa_measuring_terms_in_backend($terms, $thepostid, $value)
        {
        }
        /**
         * copy post meta value from original product for translated product
         *
         * @since v3.16
         * @wp-hook german_market_get_post_meta_value_translatable
         * @param Mixed $meta_value
         * @param Integer $product_id
         * @param String $meta_key
         * @return Mixed
         */
        public function get_post_meta_value_translatable($meta_value, $product_id, $meta_key)
        {
        }
        /**
         * translate sale label in frontend
         *
         * @since v3.16
         * @wp-hook woocommerce_de_sale_label_term_id_for_frontend
         * @param Integer $term_id
         * @param WC_Product $product
         * @return Integer
         */
        public function sale_label_term_id_for_frontend($term_id, $product)
        {
        }
        /**
         * show correct terms translated products in backend
         *
         * @since v3.16
         * @wp-hook german_market_terms_in_backend
         * @param Array $terms
         * @param Integer $id
         * @param WP_Term $the_term
         * @return Array
         */
        public function terms_in_backend($terms, $id, $the_term)
        {
        }
        /**
         * show correct term value in translated products in backend
         *
         * @since v3.16
         * @wp-hook german_market_term_value_in_backend
         * @param WP_Term $value
         * @param Integer $id
         * @param String $meta_key
         * @param String $taxonomy_slug
         * @return WP_Term
         */
        public function term_value_in_backend($value, $id, $meta_key, $taxonomy_slug)
        {
        }
        /**
         * Requirements tab has to be visible in translations
         *
         * @since v3.16
         * @wp-hook german_market_requirements_panel_classes
         * @param Array $classes
         * @return Array
         */
        public function requirements_panel_classes($classes)
        {
        }
        /**
         * Lock Fields in Product Backend
         *
         * @since v3.16
         * @wp-hook wcml_js_lock_fields_ids
         * @param Array $ids
         * @return Array
         */
        public function wpml_js_lock_fields_ids($ids)
        {
        }
        /**
         * Lock Fields in Product Backend
         *
         * @since v3.16
         * @wp-hook wcml_js_lock_fields_input_names
         * @param Array $ids
         * @return Array
         */
        public function wpml_js_lock_fields_names($names)
        {
        }
        /**
         * Lock Fields in Product Backend - For Variations
         *
         * @since v3.16
         * @wp-hook woocommerce_product_after_variable_attributes
         * @return void
         */
        public function locking_fields_for_variations()
        {
        }
        /**
         * For "Select Fields of WordPress Pages"
         * Turn off WPML that exclude all pages of other languages
         *
         * @since v3.16
         * @wp-hook render_german_market_menu_save_options
         * @return void
         */
        public function page_options_in_backend()
        {
        }
        /**
         * Don't show language switcher in German Market Settings
         *
         * @since v3.16
         * @wp-hook current_screen
         * @return void
         */
        public function remove_language_switcher()
        {
        }
    }
    /**
     * Class WGM_Plugin_Compatibility_Polylang
     * @author MarketPress
     */
    class WGM_Plugin_Compatibility_Polylang
    {
        static $instance = \NULL;
        static $current_pdf_lang = '';
        /**
         * singleton getInstance
         *
         * @access public
         * @static
         * @return class WGM_Plugin_Compatibility_Polylang
         */
        public static function get_instance()
        {
        }
        /**
         * Try to translate saved shipping method title and payment method title in invoice pdf
         *
         * Save WC payment title / shipping method title in backend
         * Translate titles with string translations of polylang (using Polylang for WooCommerce)
         *
         * @since 3.11.1.8
         * @param String $html
         * @param WC_Order
         * @param Array $args
         * @return String
         */
        public function polylang_repair_payment_methods($html, $order, $args)
        {
        }
        /**
         * Add "Polylang Support" Menu in German Market UI
         *
         * @since 3.11.1.8
         * @wp-hook woocommerce_de_ui_left_menu_items
         * @param Array $menu
         * @return Array
         */
        public function add_polylang_menu($menu)
        {
        }
        /**
         * Render "Polylang Support" Menu in German Market UI
         *
         * @since 3.11.1.8
         * @return void
         */
        public function polylang_menu()
        {
        }
        /**
         * Polylang Support: Translate WooCommerce Checkout Strings
         *
         * @access public
         * @wp-hook option_{option}
         * @param String $value
         * @param String $option
         * @return String
         */
        public function translate_woocommerce_checkout_options_polylang($value, $option)
        {
        }
        /**
         * Polylang Support: Translate WooCommerce Tax Rates
         *
         * @since 3.11.1.8
         * @access public
         * @wp-hook woocommerce_find_rates
         * @param Array $matched_tax_rates
         * @return Array
         */
        public function polylang_translate_woocommerce_find_rates($matched_tax_rates)
        {
        }
        /**
         * Polylang Support: Translate Tax Labels for order items
         *
         * @since 3.11.1.8
         * @access public
         * @wp-hook wgm_translate_tax_label
         * @param String $tax_label
         * @return String
         */
        public function polylang_translate_tax_label($tax_label)
        {
        }
        /**
         * Plugin Polylang Support: Show delivery times in the correct way
         *
         * @since v3.5.1
         * @last update v3.8.2
         * @wp-hook woocommerce_de_get_deliverytime_string_label_string
         * @param String $string
         * @param WC_Product $product
         * @return String
         */
        public function polylang_woocommerce_de_get_deliverytime_string_label_string($string, $product)
        {
        }
        /**
         * Plugin Polylang Support: Switch PDF Language
         *
         * @since 3.11.1.8
         * @wp-hook wp_wc_invoice_pdf_start_template
         * @wp-hook wp_wc_invoice_pdf_email_additional_attachment_before
         * @wp-hook wp_wc_invoice_pdf_before_get_template_page_numbers
         * @wp-hook wp_wc_invoice_pdf_before_backend_download_switch
         * @param Array $args
         * @return void
         */
        public function polylang_invoice_pdf_admin_download_switch_lang($args)
        {
        }
        /**
         * Plugin Polylang Support: Re-Switch PDF Language
         *
         * @since 3.11.1.8
         * @wp-hook wp_wc_invoice_pdf_end_template
         * @wp-hook polylang_invoice_pdf_admin_download_reswitch_lang
         * @param Array $args
         * @return void
         */
        public function polylang_invoice_pdf_admin_download_reswitch_lang($args)
        {
        }
        /**
         * Plugin Polylang Support: Switch PDF Language
         *
         * @since 3.11.1.8
         * @wp-hook wp_wc_invoice_pdf_start_template
         * @wp-hook wp_wc_invoice_pdf_email_additional_attachment_before
         * @wp-hook polylang_invoice_pdf_admin_download_switch_lang
         * @wp-hook wp_wc_invoice_pdf_before_backend_download_switch
         * @param Array $args
         * @return void
         */
        public function polylang_retoure_pdf_admin_download_switch_lang($delivery_or_retoure, $order, $admin = \false)
        {
        }
        /**
         * Plugin Polylang Support: Re-Switch PDF Language
         *
         * @since 3.11.1.8
         * @wp-hook wcreapdf_pdf_after_create
         * @wp-hook wcreapdf_pdf_after_output
         * @param Array $args
         * @return void
         */
        public function polylang_retoure_pdf_admin_download_reswitch_lang($delivery_or_retoure, $order)
        {
        }
        /**
         * Polylang Support: Translate PDF files in backend in admin language
         *
         * @since 3.11.1.8
         * @access public
         * @wp-hook pll_is_ajax_on_front (called in this hook)
         * @param Boolean $is_ajax_on_front
         * @return Boolean
         */
        public static function polylang_is_ajax_on_front($pll_is_ajax_on_front)
        {
        }
        /**
         * Returns true if ajax is executed from frontend
         *
         * @since 3.8.1
         * @access public
         * @return Boolean
         */
        public static function is_frontend_ajax()
        {
        }
    }
    /**
     * Class WGM_Plugin_Compatibility_WC_Product_Bundles
     * Compatibility functions for WooCommerce Product Bundles plugin.
     *
     * @author MarketPress
     */
    class WGM_Plugin_Compatibility_WC_Product_Bundles
    {
        static $instance = \NULL;
        /**
         * singleton getInstance
         *
         * @access public
         * @static
         *
         * @return WGM_Plugin_Compatibility_WC_Product_Bundles WGM_Plugin_Compatibility_WC_Product_Bundles
         */
        public static function get_instance()
        {
        }
        /**
         *
         * @access public
         *
         * @param bool   $boolean
         * @param string $template_name
         *
         * @return bool|mixed
         */
        public function wc_bundles_add_woocommerce_de_templates_force_original($boolean, $template_name)
        {
        }
        /**
         *
         * @param string $template_name
         * @param string $template_path
         * @param $located
         * @param array  $args
         *
         * @return void
         */
        public function wc_bundles_woocommerce_after_template_part($template_name, $template_path, $located, $args)
        {
        }
        /**
         * This function is responsible for sorting the products on edit order page.
         *
         * @hook woocommerce_order_get_items
         *
         * @access public
         *
         * @param $array   $pproducts_result
         * @param array    $items Array of Items.
         * @param WC_Order $order Order Object.
         * @param array    $types Type of Item.
         *
         * @return mixed
         */
        public function wc_bundles_sort_woocommerce_order_get_items($products_result, $items, $order, $types)
        {
        }
        /**
         * This function is responsible for sorting the products on edit order page.
         *
         * @hook woocommerce_order_get_items
         *
         * @access public
         *
         * @param array    $products_result Array of Items.
         * @param WC_Cart  $cart_content Cart objects
         *
         * @return mixed
         */
        public function wc_bundles_sort_woocommerce_cart_items($products_result, $cart_content)
        {
        }
        /**
         * Plugin WooCommerce Product Bundles: No GM Data for Variations
         *
         * @since 3.8.2
         *
         * @wp-hook wp_head
         *
         * @access public
         *
         * @return void
         */
        function wc_bundles_styles()
        {
        }
        /**
         * Plugin WooCommerce Product Bundles: Add tr class to bundled items
         *
         * @since 3.10.4
         *
         * @wp-hook wp_wc_invoice_pdf_tr_class
         *
         * @access public
         *
         * @param string $tr_class
         * @param item   $args
         *
         * @return String
         */
        public function wc_bundles_invoice_pdf_tr_class($tr_class, $item)
        {
        }
        /**
         * Plugin WooCommerce Product Bundles: Order Item Names in Invoice PDFs
         *
         * @since 3.10.2
         *
         * @wp-hook wp_wc_invvoice_pdf_td_product_name_style
         *
         * @access public
         *
         * @param string $style
         * @param item   $args
         *
         * @return String
         */
        public function wc_bundles_invoice_pdf_padding_for_bundled_products($style, $item)
        {
        }
        /**
         * Plugin WooCommerce Product Bundles: Don't show taxes of bundled items
         *
         * @since 3.8.2
         *
         * @wp-hook gm_add_mwst_rate_to_product_item_return
         *
         * @access public
         *
         * @param Boolean    $booleand
         * @param WC_Prodcut $product
         * @param Array      $item
         *
         * @return Bollean
         */
        public function wc_bundles_gm_add_mwst_rate_to_product_item_return($boolean, $product, $cart_item)
        {
        }
        /**
         * Plugin WooCommerce Product Bundles: Don't add PPU to order item data
         *
         * @since v3.8.2
         *
         * @wp-hook german_market_ppu_co_woocommerce_add_order_item_meta_wc_3_return
         *
         * @access public
         *
         * @param boolean $boolean
         * @param integer $item_id
         * @param array   $item
         * @param integer $order_id
         *
         * @return boolean
         */
        public function wc_bundles_dont_add_ppu_to_order_item_meta($boolean, $item_id, $item, $order_id)
        {
        }
        /**
         * Plugin WooCommerce Product Bundles: Don't show delivery time in orders
         *
         * @since v3.8.2
         *
         * @wp-hook woocommerce_de_add_delivery_time_to_product_title
         *
         * @access public
         *
         * @param string $return
         * @param string $item_name
         * @param array  $item
         *
         * @return string
         */
        public function wc_bundles_dont_show_delivery_time_in_order($return, $item_name, $item)
        {
        }
        /**
         * Plugin WooCommerce Product Bundles: Don't add PPU to cart item data
         *
         * @since v3.8.2
         *
         * @wp-hook german_market_ppu_co_woocommerce_add_cart_item_data_return
         * @wp-hook german_market_delivery_time_co_woocommerce_add_cart_item_data_return
         *
         * @access public
         *
         * @param boolean $boolean
         * @param array $cart_item_data
         * @param integer $product_id
         * @param integer $variation_id
         *
         * @return string
         */
        public function wc_bundles_dont_add_ppu_to_cart_item_data($boolean, $cart_item_data, $product_id, $variation_id)
        {
        }
        /**
         * Plugin WooCommerce Product Bundles: Don't show taxes of bundled items
         *
         * @since v3.8.2
         *
         * @wp-hook gm_show_taxes_in_cart_theme_template_return_empty_string
         *
         * @access public
         *
         * @param boolean $string
         * @param array   $cart_item
         *
         * @return boolean
         */
        public function wc_bundles_gm_tax_rate_in_cart($boolean, $cart_item)
        {
        }
    }
    /**
     * Double Opt-in Customer Registration Email
     *
     * @class 		WGM_Email_Double_Opt_In_Customer_Registration
     * @version		2.1.0
     * @package		WooCommerce/Classes/Emails
     * @author 		MarketPress
     * @extends 	WC_Email
     */
    class WGM_Email_Double_Opt_In_Customer_Registration extends \WC_Email
    {
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         * get_type function.
         *
         * @return string
         */
        public function get_email_type()
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        function trigger($customer_id, $activation_link, $user_email, $user_login, $user_pass = '', $resend = \false)
        {
        }
        /**
         * get_content_html function.
         *
         * @access public
         * @return string
         */
        function get_content_html()
        {
        }
        /**
         * get_content_plain function.
         *
         * @access public
         * @return string
         */
        function get_content_plain()
        {
        }
    }
    class WGM_Embed
    {
        public static function init()
        {
        }
        /**
         * Create the title for embedded products - we want to add the price to it.
         *
         * @since 2.4.11
         *
         * @param string $title Embed title.
         *
         * @return string
         */
        public static function the_excerpt($title)
        {
        }
        /**
         * Basic styling.
         */
        public static function print_embed_styles()
        {
        }
    }
    /**
     * Class MarketPress_Auto_Update
     */
    class MarketPress_Auto_Update_German_Market
    {
        /**
         * The URL for the update check
         *
         * @since	0.1
         * @var		string
         */
        public $url_update_check = '';
        /**
         * The URL for the update package
         *
         * @since	0.1
         * @var		string
         */
        public $url_update_package = '';
        /**
         * The holder for all our licenses
         *
         * @since	0.1
         * @var		array
         */
        public $licenses = '';
        /**
         * The license key
         *
         * @since	0.1
         * @var		array
         */
        public $key = '';
        /**
         * The URL for the key check
         *
         * @since	0.1
         * @var		string
         */
        public $url_key_check = '';
        /**
         * Activation Error
         *
         * @var string
         */
        public $activation_error;
        public $page;
        public $menu_hook;
        public static $cache;
        /**
         * @return Woocommerce_German_Market_Auto_Update
         */
        public static function get_instance()
        {
        }
        /**
         * Load textdomain
         *
         * @var string
         */
        public static function load_textdomain()
        {
        }
        /**
         * Setting up some data, all vars and start the hooks
         * needs from main plugin: plugin_name, plugin_base_name, plugin_url
         *
         * @param   stdClass $plugindata
         *
         * @return  void
         */
        public function setup($plugindata)
        {
        }
        /**
         * Update Error Message When License Expired
         *
         * @wp-hook upgrader_pre_download
         * @param Mixed $reply
         * @param Mixed $package
         * @return Mixed
         */
        public function update_error_message_license_expired($reply, $package, $wp_upgrader, $hook_extra = array())
        {
        }
        /**
         * Save News
         *
         * @param String $response
         * @return void
         */
        public function update_news($response)
        {
        }
        /**
         * Get News and save news
         *
         * @param String $response
         * @return void
         */
        public function get_news_and_update_news()
        {
        }
        /**
         * Get "WC tested up to" by API
         *
         * @wp-hook woocommerce_get_plugins_with_header
         * @wp-hook woocommerce_get_plugins_for_woocommerce
         * @param Array $matches
         * @param String $header
         * @param Array $plugins
         * @return Array
         */
        function woocommerce_tested_up_to($matches)
        {
        }
        /**
         * Save WC Tested Up To Data from API
         *
         * @param String $response
         * @return void
         */
        function update_wc_tested_up_to($response)
        {
        }
        /**
         * add admin notices for license errors and warnings
         *
         * @wp-hook admin_notices
         * @return void
         */
        public function admin_notice()
        {
        }
        /**
         * license menu in plugin
         *
         * @wp-hook woocommerce_de_ui_left_menu_items
         * @param Array $menu
         * @return menu
         */
        public function add_menu($menu)
        {
        }
        /**
         * license menu in plugin - callback function
         *
         * @return void
         */
        public function license_menu()
        {
        }
        /**
         * get license error messages
         *
         * @param String $status
         * @param Array $args
         * @return String
         */
        public function get_error_message_for_license($status, $args = array())
        {
        }
        /**
         * add css for autoupdate
         *
         * @uses	wp_enqueue_style, plugin_dir_url, untrailingslashit
         */
        public function print_styles_and_scripts()
        {
        }
        /**
         * Setting up the key
         *
         * @since	0.1
         * @uses	get_site_option
         * @return	void
         */
        public function get_key()
        {
        }
        /**
         * Checks over the transient-update-check for plugins if new version of
         * this plugin os available and is it, shows a update-message into
         * the backend and register the update package in the transient object
         *
         * @since	0.1
         * @param	object $transient
         * @uses	wp_remote_get, wp_remote_retrieve_body, get_site_option,
         * 			get_site_transient, set_site_transient
         * @return	object $transient
         */
        public function check_plugin_version($transient)
        {
        }
        /**
         * Disables the checkup
         *
         * @since	0.1
         * @param	object $transient
         * @return	object $transient
         */
        public function dont_check_plugin_version($transient)
        {
        }
        /**
         * Things to do when license check does not return status true
         */
        public function license_key_checkup_before_return_false($status = '')
        {
        }
        /**
         * Reset Plugin Transients
         */
        public function reset_plugin_transient()
        {
        }
        /**
         * Set Access Expires Date
         *
         * @param String $access_expires_date
         * @return void
         */
        public function set_access_expires_date($access_expires_date)
        {
        }
        /**
         * Set Current Product Version from API
         *
         * @param String $version
         * @return void
         */
        public function set_current_product_version($version)
        {
        }
        /**
         * Check the license-key and cache the response
         *
         * @param 	String $key
         * @return	String
         */
        public function get_license_key_checkup($key = '')
        {
        }
        /**
         * Check the license-key 
         *
         * @param 	String $key
         * @return	String
         */
        public function license_key_checkup($key = '')
        {
        }
        /**
         * Checks the cached state of the license checkup
         *
         * @since	0.1
         * @uses	get_site_option
         * @return	boolean
         */
        public function license_check()
        {
        }
        /**
         * Removes the plugins key from the licenses
         *
         * @since	0.1
         * @uses	update_site_option, wp_safe_redirect, admin_url
         * @return	void
         */
        public function remove_license_key()
        {
        }
        /**
         * Display the upgrade notice in the plugin listing
         */
        public function license_update_notice($plugin_data, $response)
        {
        }
        /**
         * Show Update Details
         *
         * @wp-hook plugins_api
         * @param StdObject $data
         * @param String $action
         * @param Array $args
         * @return StdObject
         */
        public function provide_plugin_info($data, $action = \null, $args = \null)
        {
        }
    }
    /**
     * Backend Settings
     *
     * @author jj, ap
     */
    class WGM_Settings
    {
        /**
         * Register taxonomies
         *
         * @access public
         * @author dw
         * @static
         * @return void
         * @hook woocommerce_register_taxonomy
         *
         */
        public static function register_taxonomies()
        {
        }
        /**
         * let the user dertermine, if he wants to use the imprint from the
         * page or use the custom text
         *
         * @access public
         *
         * @param array
         */
        public static function imprint_email_settings($settings_array)
        {
        }
        /**
         * Save custom product meta.
         *
         * Attempts to unify saving for simple products and variable products
         *
         * @access public
         * @author jj, ap
         * @uses update_post_meta
         * @param int $post_id
         * @param array $post
         * @return void
         */
        public static function add_process_product_meta($post_id, $post = \NULL)
        {
        }
        /**
         * Grab a specific element from the $_POST array by key
         *
         * If a variation index is passed, the key will be changed to match the variable attributes.
         * Then, if an array is found under the new key, the element matching the variation index will be returned
         *
         * @param            $key
         * @param bool|FALSE $fallback
         * @param bool|FALSE $variation
         *
         * @return bool
         */
        public static function get_post_value($key, $fallback = \FALSE, $variation = \FALSE)
        {
        }
        /**
         * add delivery time link to products
         *
         * @access	public
         * @author	jj, ap
         * @uses		apply_filters
         * @static
         * @return	array
         */
        public static function add_product_write_panel_tabs($tabs)
        {
        }
        /**
         * add delivery time control and shipping control to products
         *
         * @access public
         * @author jj, ap
         * @uses maybe_unserialize, get_the_ID, get_post_meta, selected, woocommerce_wp_text_input, get_woocommerce_currency_symbol
         * @static
         * @return void
         */
        public static function add_product_write_panels()
        {
        }
        public static function add_deliverytime_options_simple()
        {
        }
        public static function add_deliverytime_options($loop = \NULL, $variation_data = \NULL, $variation = \NULL)
        {
        }
        /**
         * Textarea for requirements of variations
         *
         * @param   int $loop
         * @param 	array $variation_data
         * @param 	WP_Post $variation
         * @return  void
         */
        public static function add_requirements_options($loop = \NULL, $variation_data = \NULL, $variation = \NULL)
        {
        }
        public static function add_sale_label_options_simple()
        {
        }
        public static function add_sale_label_options($loop = \NULL, $variation_data = \NULL, $variation = \NULL)
        {
        }
        /**
         * Prints a woocommerce settigs html text field.
         * Copied from woocommerce core, extended to field after it (select box for scale units)
         *
         * @since	1.1.5beta
         * @static
         * @global	$thepostid, $post, $woocommerce
         * @access	public
         * @param 	array $field
         * @return	void
         */
        public static function extended_woocommerce_text_input($field)
        {
        }
        /**
         * If desired, force SSL for own checkout sites too
         *
         * @access	public
         * @global	$post
         * @static
         * @return	bool
         */
        public static function unforce_ssl_checkout()
        {
        }
        /**
         * Description for flat rate shipping costs in backend when gross prcies are activated
         *
         * @access	public
         * @since 	3.5
         * @wp-hook  woocommerce_shipping_instance_form_fields_flat_rate
         * @static
         * @param 	Array $form_fields
         * @return	Array
         */
        public static function change_flat_rate_cost_description($form_fields)
        {
        }
    }
    /**
     * Customer Processing Order Email
     *
     * An email sent to the customer when a new order is received/paid for.
     *
     * @class 		WGM_Email_Confirm_Order
     * @version		2.0.0
     * @package		WooCommerce/Classes/Emails
     * @author 		WooThemes
     * @extends 	WC_Email
     */
    class WGM_Email_Confirm_Order extends \WC_Email
    {
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         * get_type function.
         *
         * @return string
         */
        public function get_email_type()
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        function trigger($order_id)
        {
        }
        /**
         * get_content_html function.
         *
         * @access public
         * @return string
         */
        function get_content_html()
        {
        }
        /**
         * get_content_plain function.
         *
         * @access public
         * @return string
         */
        function get_content_plain()
        {
        }
    }
    class WGM_Refunds_List_Table extends \WP_List_Table
    {
        /**
         * Some additional arguments
         * 
         * @type	array
         */
        public $args = array();
        /**
         * Set the needed columns vor the views. Other plugins
         * are able to filter through this via 'mpl_topic_list_columns'
         * 
         * @return	array $columns the columns
         */
        public function get_columns()
        {
        }
        /**
         * Set the sortable columns vor the views. Other plugins
         * are able to filter through this via 'mpl_topic_sortable_columns'
         * 
         * @return	array $columns the columns
         */
        public function get_sortable_columns()
        {
        }
        /**
         * Displays the column content of a particular item
         * 
         * @param	array $item the current item
         * @param	string $column_name the current column
         * @return	string the column content of the given item
         */
        public function column_default($item, $column_name)
        {
        }
        /**
         * Prepares the items, setup the correct headers and place
         * the items
         * 
         * @param	array $args some arguments passed to prepare everything
         * @return	void
         */
        public function prepare_items()
        {
        }
        /**
         * Displays the message if no permissions has been found
         * 
         * @return	void
         */
        public function no_items()
        {
        }
        /**
         * Set query args if we sort by amound
         * 
         * @param WP_Query $query
         * @access public
         * @return void
         */
        public function pre_gets_posts($query)
        {
        }
    }
    /**
     * Feature Name: The Validator
     * Version:      1.0
     * Author:       MarketPress
     * Author URI:   http://marketpress.com
     */
    /**
     * This class calls the VAT validator at http://ec.europa.eu/taxation_customs/vies/vatRequest.html
     * and checks the given input against it. If the VAT Validator is not available there is
     * a RegEx Fallback.
     *
     * Example:
     *
     * 	if ( isset( $_POST[ 'country_code' ] ) && isset( $_POST[ 'uid' ] ) ) {
     * 		$validator = new WC_VAT_Validator( array ( $_POST[ 'country_code' ], $_POST[ 'uid' ] ) );
     * 		if ( $validator->is_valid() )
     * 			echo 'Valid VAT';
     * 		else
     * 			echo 'invalid VAT';
     * }
     *
     * $validator = new WC_VAT_Validator( array( 'DE', '123456789' ) );
     * $validator->is_valid();
     */
    class WC_VAT_Validator
    {
        public function __construct($input, $billing_country = '')
        {
        }
        /**
         *
         * @param mixed $input
         *
         * @return boolean
         */
        public function is_valid()
        {
        }
        /**
         * Sets a new input array, throwing errors along the way if anything's sketchy
         * TRUE if nothing's sketchy, otherwise FALSE
         *
         * @param mixed $input
         *
         * @return boolean
         */
        public function set_input($input)
        {
        }
        /**
         * Check if there are elements in the errors array
         *
         * @return boolean
         */
        public function has_errors()
        {
        }
        /**
         * Returns an array of all error messages occured during the last validation attempt
         *
         * @return string
         */
        public function get_error_messages()
        {
        }
        /**
         * Returns an array of all error codes occured during the last validation attempt
         *
         * @return string
         */
        public function get_error_codes()
        {
        }
        /**
         * Returns the description of the current error code
         *
         * @return string
         */
        public function get_last_error_message()
        {
        }
        /**
         * Returns the current error code
         *
         * @return type
         */
        public function get_last_error_code()
        {
        }
        /**
         * get api response
         *
         * @return String
         */
        public function get_api_response()
        {
        }
        /**
         * get api response formatted to save as order note
         *
         * @return String
         */
        public function get_api_response_formatted()
        {
        }
    }
    /**
     * Feature Name: Adding VAT field to Admin & My Account
     * Version:      1.0
     * Author:       MarketPress
     * Author URI:   http://marketpress.com
     */
    class WC_VAT_Field_Integration
    {
        /**
         * Updating custom VAT field.
         *
         * @wp-hook personal_options_update
         * @access public
         * @static
         *
         * @param int $user_id
         *
         * @return void
         */
        public static function update_profile_billing_vat_field($user_id)
        {
        }
        /**
         * Add fields to admin area.
         *
         * @wp-hook show_user_profile, edit_user_profile
         *
         * @access public
         * @static
         *
         * @param WP_User $user
         *
         * @return void
         */
        public static function add_vat_field_to_user_section($user)
        {
        }
        /**
         * Add fields to admin area.
         *
         * @hook woocommerce_account_edit-address_endpoint
         *
         * @access public
         * @static
         *
         * @return void
         */
        public static function add_vat_field_to_my_account_page()
        {
        }
        /**
         * Save vat number as user meta 
         *
         * @hook woocommerce_account_edit-wp
         *
         * @access public
         * @static
         *
         * @return void
         */
        public static function save_vat_field_on_my_account_page()
        {
        }
        /**
         * load billing vat in backend order from profile
         *
         * @hook wp_ajax_wcvat_admin_load_vat_from_profile-wp
         * @access public
         * @static
         * @return void
         */
        public static function load_billing_vat_from_profile_order_user_change()
        {
        }
    }
    class GM_IT_Recht_Kanzlei_Api
    {
        public $local_dir_for_pdf_storage = '';
        public $upload_dir = '';
        public $debugging = \false;
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         * Generate API token
         *
         * @access public
         * @return String
         */
        public function get_api_token()
        {
        }
        /**
         * Gets supported pages
         *
         * @access public
         * @return Array
         */
        public function get_documents()
        {
        }
        /**
         * Handling of API Request from IT-Recht Kanzlei
         *
         * @access public
         * @static
         * @wp-hook wp_loaded
         * @return void
         */
        public static function check_api_request()
        {
        }
        /**
         * Answer of API Request from IT-Recht Kanzlei
         *
         * @access public
         * @return void
         */
        public function answer_api_request($post_xml)
        {
        }
        /**
         * Return error and end script
         * @access private
         * @param String $errorcode
         * @return void
         **/
        function return_error($errorcode, $german_market_debugging = 0)
        {
        }
        /**
         * Return success and end script
         * @access private
         * @param String $errorcode
         * @return void
         **/
        function return_success()
        {
        }
    }
    class WGM_FIC_Shortcodes
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Compatibilities
         */
        public static function get_instance()
        {
        }
        /**
         * callback for shortcode [gm_product_alcohol]
         *
         * @param Array $atts
         * @return String
         */
        public static function alcohol_callback($atts)
        {
        }
        /**
         * callback for shortcode [gm_product_ingredients]
         *
         * @param Array $atts
         * @return String
         */
        public static function ingredients_callback($atts)
        {
        }
        /**
         * callback for shortcode [gm_product_nutritional_values]
         *
         * @param Array $atts
         * @return String
         */
        public static function nutritional_values_callback($atts)
        {
        }
        /**
         * callback for shortcode [gm_allergens]
         *
         * @param Array $atts
         * @return String
         */
        public static function allergens_callback($atts)
        {
        }
    }
    /**
     * main class for plugin
     *
     * @class Woocommerce_Invoice_Pdf
     * @version 1.0
     * @category Class
     */
    class Woocommerce_Invoice_Pdf
    {
        /**
         * singleton
         * @var object
         */
        static $instance = \null;
        /**
         * _e(* @var string
         */
        public static $plugin_filename = __FILE__;
        /**
         * singleton getInstance
         *
         * @hook plugins_loaded
         *
         * @since 0.0.1
         *
         * @access public
         * @static
         *
         * @return class Woocommerce_Invoice_Pdf
         */
        public static function get_instance()
        {
        }
        /**
         * autoload classes on demand
         *
         * @since 0.0.1
         *
         * @access public
         *
         * @arguments string $class (class name)
         *
         * @return void
         */
        public function autoload($class)
        {
        }
        /**
         * enqueue css file for download button design on shop order page
         *
         * @hook admin_enqueue_scripts
         *
         * @since 0.0.1
         *
         * @access public
         * @static
         *
         * @return void
         */
        public static function admin_styles()
        {
        }
        /**
         * plugin activation
         *
         * @hook register_activation_hook
         *
         * @since 0.0.1
         *
         * @access public
         * @static
         *
         * @return void
         */
        public static function activate()
        {
        }
        /**
         * plugin deactivation
         *
         * @hook register_deactivation_hook
         *
         * @since 1.0.4.1
         *
         * @access public
         * @static
         *
         * @return void
         */
        public static function deactivate()
        {
        }
        /**
         * enqueue scripts and styles to enable media uploader for image upload on the settings page
         *
         * @hook admin_enqueue_scripts
         *
         * @since 0.0.1
         *
         * @access public
         * @static
         *
         * @return void
         */
        public static function media_uploader_scripts()
        {
        }
        /**
         * In several PHP Versions > 7.3 emails are not sent when invoice pdfs are atteched
         * The following error can be logged: "invalid adress: setFrom()""
         * This Filter changes the validator of phpmailer to avoid this problem
         *
         * @hook wp_mail
         *
         * @since 3.10.1
         *
         * @access public
         * @static
         *
         * @param Array $mail_array
         *
         * @return Array
         */
        public static function phpmailer_validation($mail_array)
        {
        }
        /**
         * Checks if PHP versions > 7.4
         * Required for QR code libraries
         *
         * @since 3.14.0.1
         *
         * @access public
         * @static
         *
         * @return Boolean
         */
        public static function has_php_7_4_for_qr_codes()
        {
        }
    }
    class WP_WC_Invoice_Pdf_Order_Meta
    {
        /**
         * Order Object to handle saved contend
         *
         * @var WC_Order
         */
        protected $order;
        /**
         * Is db tabel installed
         *
         * @var Boolean
         */
        public static $db_is_installed = \null;
        /**
         * Simple construct
         * 
         * @return void
         */
        public function __construct($order)
        {
        }
        /**
         * Creates database table
         * 
         * @return void
         */
        public static function create_table()
        {
        }
        /**
         * Creates table if table does not exists
         * 
         * @return Boolean
         */
        public static function maybe_create_table()
        {
        }
        /**
         * Drop table
         *
         * @return void
         */
        public static function drop_table()
        {
        }
        /**
         * Add meta data to db table
         *
         * @param String $content
         * @return int|bool
         */
        public function add_meta($content)
        {
        }
        /**
         * Returns if meta data exists without getting it (much faster)
         *
         * @return Boolean
         */
        public function has_meta()
        {
        }
        /**
         * Get meta from db table and make a migration from post meta to custom db table
         *
         * @return String
         */
        public function get_meta()
        {
        }
        /**
         * Delete meta of this order from db table
         *
         * @return int|bool
         */
        public function delete_meta()
        {
        }
    }
    /**
     * adds the pdf as an attachment to e-mails
     *
     * @class WP_WC_Invoice_Pdf_Email_Attachment
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Invoice_Pdf_Email_Attachment
    {
        /**
         * Download the refunded invoice PDF via url.
         *
         * @Hook wp_ajax_nopriv_gm_email_refund_invoice_download
         *
         * @access public
         * @static
         *
         * @return mixed, die()
         */
        public static function download_email_refund_invoice_pdf()
        {
        }
        /**
         * Download the invoice PDF via url.
         *
         * @Hook wp_ajax_nopriv_gm_email_invoice_download
         *
         * @access public
         * @static
         *
         * @return mixed, die()
         */
        public static function download_email_invoice_pdf()
        {
        }
        /**
         * Add PDF download link to Costumer Email for higher safety.
         *
         * @Hook woocommerce_email_order_details
         * @Hook woocommerce_email_order_meta
         *
         * @access public
         * @static
         *
         * @param WC_Order $order
         * @param mixed    $sent_to_admin
         * @param string   $plain_text
         * @param string   $email
         *
         * @return void
         */
        public static function add_download_link($order, $sent_to_admin, $plain_text = \true, $email = \null)
        {
        }
        /**
         * Add Refund PDF download link to Costumer Email for higher safety.
         *
         * @Hook woocommerce_email_order_details
         * @Hook woocommerce_email_order_meta
         *
         * @access public
         * @static
         *
         * @param WC_Order $order
         * @param mixed    $sent_to_admin
         * @param string   $plain_text
         * @param string   $email
         *
         * @return void
         */
        public static function add_refund_download_link($order, $sent_to_admin, $plain_text = \true, $email = \null)
        {
        }
        /**
         * Adds the pdf as an attachement to chosen customer e-mails
         *
         * @since 0.0.1
         *
         * @access public
         * @static
         *
         * @hook woocommerce_email_attachments
         *
         * @param array    $attachments
         * @param string   $status
         * @param WC_Order $order
         *
         * @return array
         */
        public static function add_attachment($attachments, $status, $order)
        {
        }
        /**
         * triggers when order is refunded
         *
         * @since WGM 3.0
         * @access public
         * @static
         * @hook woocommerce_order_fully_refunded_notification
         * @hook woocommerce_order_partially_refunded_notification
         * @param int $order_id
         * @param int $refund_id
         * @return void
         */
        public static function refunded_trigger($order_id, $refund_id)
        {
        }
        /**
         * Do that trick for adding additional pdfs to customer refunded order
         *
         * @since WGM 3.0.2
         * @access public
         * @static
         * @hook woocommerce_email_attachments
         * @param Array $attachments
         * @param String $status
         * @param WC_Order $order
         * @return Array
         */
        public static function trigger_refund_for_additional_pdfs($attachments, $status, $order)
        {
        }
        /**
         * adds the refund pdf as an attachement
         *
         * @since WGM 3.0
         * @access public
         * @static
         * @hook woocommerce_email_attachments
         * @param Array $attachments
         * @param String $status
         * @param WC_Order $order
         * @return Array
         */
        public static function add_refund_attachment($attachments, $status, $order)
        {
        }
        /**
         * adds additonal pdfs as an attachement to chosen customer e-mails
         *
         * @hook woocommerce_email_attachments
         * @param Array $attachments
         * @param String $status
         * @param WC_Order $order
         * @return Array
         * @return array $attachments
         */
        public static function additional_email_attachments($attachments, $status, $order)
        {
        }
        /**
         * template for terms and conditions in pdf
         *
         * @hook wp_wc_invoice_pdf_template_invoice_content
         * @param String $path
         * @return String
         */
        public static function terms_and_conditions_content($path)
        {
        }
        /**
         * recovation policy in pdf
         *
         * @hook wp_wc_invoice_pdf_template_invoice_content
         * @param String $path
         * @return String
         */
        public static function revocation_policy_content($path)
        {
        }
        /**
         * Filename may not include '/'
         *
         * @since GM 3.5.4.
         * @param String $filename
         * @return String
         */
        public static function repair_filename($filename)
        {
        }
    }
    /**
     * inlcude swiss qr invoice in invoice pdf
     *
     * @WP_WC_Invoice_Pdf_Swiss_Qr_Invoice_Hooks
     * @version 1.0.0
     * @category	Class
     */
    class WP_WC_Invoice_Pdf_Swiss_Qr_Invoice_Hooks
    {
        static $instance = \NULL;
        static $orders_needs_swiss_qr_invoice = array();
        /**
         * singleton getInstance
         *
         * @access public
         * @static
         *
         * @return WP_WC_Invoice_Pdf_Swiss_Qr_Invoice_Hooks
         */
        public static function get_instance()
        {
        }
        /**
         * constuct
         * 
         * add girocde to invoice pdf
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * if we need a new page before swiss qr invoice
         * manipulate html, add page break, load html again and render dompdf again
         * 
         * @wp-hook wp_wc_invoice_pdf_before_pdf_generation_invoice_var
         * @param Ebs_Pdf_Wordpress $invoice
         * @param String $html
         * @param Array $args
         * @return Ebs_Pdf_Wordpress
         */
        public function rerender_pdf_with_new_page($invoice, $html, $args)
        {
        }
        /**
         * save position of last element before swiss qr invoice
         * to check later, if we need a page break
         * 
         * @wp-hook wp_wc_invoice_pdf_after_new_dompdf
         * @param Ebs_Pdf_Wordpress $invoice
         * @param Array $args
         * @return void
         */
        public function save_last_position_before_swiss_qr_invoice_in_pdf($invoice, $args)
        {
        }
        /**
         * insert swiss qc invoice
         * 
         * @param WC_Order $order 
         * @param Array $args // $args[ 'order' ] can be test, but $order is a real WC_Order test instance
         * @return void
         */
        public function insert_swiss_qr_invoice_in_pdf($order, $args)
        {
        }
        /**
         * check if invoice pdf need swiss qc invoice
         * 
         * @param WC_Order $order
         * @param Array $args
         * @return Boolean
         */
        public function order_needs_swiss_qr_invoice($order, $args)
        {
        }
        /**
         * if the option "enabled for billing countries" is used
         * check billing country of order
         * 
         * @param WC_Order $order
         * @return Boolean
         */
        public function is_enabled_for_billing_country($order)
        {
        }
    }
    /**
     * library of helper functions
     *
     * @WP_WC_Invoice_Pdf_Helper
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Invoice_Pdf_Helper
    {
        /**
         * get all core fonts, additional fonts and custom fonts (custom fonts are only avaiable if allow_url_fopen is enabled)
         *
         * @since 0.0.1
         * @access public
         * @static
         * @return array keys are font names, values are empty for core & additional fonts and link code for google fonts
         */
        public static function get_fonts()
        {
        }
    }
    class WP_WC_Invoice_Pdf_Order_Meta_Migrator
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Checkbox_Product_Depending
         */
        public static function get_instance()
        {
        }
        /**
         * This method migrate all orders
         * 
         * @return void
         */
        public function start_migrator()
        {
        }
        /**
         * This method migrates one order
         * 
         * @param Integer $order_id
         * @param Boolean $start_new
         * @return void
         */
        public function migrate_one_order($order_id, $start_new)
        {
        }
        /**
         * Check if there is still postmeta data, if not => start migration
         * 
         * @wp-hook german_market_migration_invoice_pdf_compress_check
         * @return void
         */
        public function daily_check_start_compressing()
        {
        }
        /**
         * Compress some saved content
         * 
         * @wp-hook german_market_migration_invoice_pdf_compress_check
         * @return void
         */
        public static function start_compressing()
        {
        }
    }
    /**
     * girocode creation
     *
     * @WP_WC_Invoice_Pdf_Girocode
     * @version 1.0.0
     * @category	Class
     */
    class WP_WC_Invoice_Pdf_Girocode
    {
        public $order;
        /**
         * construct
         * 
         * @access public
         * @param WC_Order | null $order
         * @return void
         */
        public function __construct($order = \null)
        {
        }
        /**
         * get payment data
         * 
         * @access public
         * @return Array / Object
         */
        public function get_payment_data()
        {
        }
        /**
         * get qr-code matrix
         * 
         * @access public
         * @return Array
         */
        public function get_matrix()
        {
        }
        /**
         * get ecc level by setting
         * 
         * @access public
         * @return String
         */
        public function get_ecc_level()
        {
        }
        /**
         * returns qr code as image
         * 
         * @access public
         * @param String $format
         * @return String
         */
        public function get_qr_code_image($format = 'svg')
        {
        }
        /**
         * returns qr code as html markup
         * 
         * @access public
         * @param String $format
         * @return String
         */
        public function get_matrix_markup()
        {
        }
        /**
         * get template file of girocode
         * 
         * @access public
         * @return String
         */
        public function get_template_file()
        {
        }
        /**
         * Replace Placholders
         * 
         * @access public
         * @param Strint $text
         * @param WC_Order $order
         * @return $text
         */
        public function replace_placeholders($text, $order)
        {
        }
        /**
         * get markup and include template file
         * 
         * @access public
         * @param WC_Order $order
         * @return void
         */
        public static function make_markup($order = \null)
        {
        }
    }
    /**
     * swiss qr invoice creation
     *
     * @WP_WC_Invoice_Pdf_Girocode
     * @version 1.0.0
     * @category	Class
     */
    class WP_WC_Invoice_Pdf_Swiss_Qr_Invoice
    {
        public $order;
        public $is_test = \false;
        /**
         * construct
         * 
         * @access public
         * @param WC_Order | null $order
         * @return void
         */
        public function __construct($order, $args)
        {
        }
        /**
         * get QrBill, using data from $this->order
         * 
         * @return QrBill\QrBill
         */
        public function get_qr_bill_object_by_order()
        {
        }
        /**
         * get language used for swiss qr invoice
         * supported languages: en, de, it, fr
         * 
         * @return String
         */
        public function get_language()
        {
        }
        /**
         * make markup for swiss qr code invoice
         * in invoice pdf
         * 
         * @return void
         */
        public function make_markup()
        {
        }
        /**
         * Replace Placholders
         * 
         * @access public
         * @param Strint $text
         * @param WC_Order $order
         * @return $text
         */
        public function replace_placeholders($text, $order)
        {
        }
    }
    /**
     * When plugin is activated
     *
     * @class WP_WC_Invoice_Pdf_Backend_Activation
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Invoice_Pdf_Backend_Activation
    {
        /**
         * when activated
         *
         * @since 0.0.1
         * @access public
         * @static
         * @return void
         */
        public static function activation()
        {
        }
        /**
         * set default values for some options that should be avaiable even if the user never visit the setting pages before
         * otherwise the class Ebs_Pdf_Wordpress would use default values set in abstract class Ebs_Pdf
         * try to check whether user would use A4 or letter, in or cm
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook admin_init
         * @return void
         */
        public static function load_defaults()
        {
        }
        /**
         * create cache folders for pdfs
         *
         * @since 0.0.1
         * @access public
         * @static
         * @return void
         */
        public static function setup_cache_dir()
        {
        }
    }
    /**
     * enables download buttons in backend
     *
     * @class WP_WC_Invoice_Pdf_Backend_Download
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Invoice_Pdf_Backend_Download
    {
        /**
         * adds 'download invoice pdf' to order
         *
         * @since 3.9.2
         * @access public
         * @static
         * @hook woocommerce_order_actions_end
         * @arguments $order_id
         * @return void
         */
        public static function order_download($order_id)
        {
        }
        /**
         * create the invoice pdf to shop user when choosing this option and force download
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook woocommerce_order_action_wp_wc_invoice_pdf_invoice
         * @arguments $order
         * @return void
         */
        public static function order_action($order)
        {
        }
        /**
         * adds a small download button to the admin page for orders
         *
         * @since 0.0.1
         * @access public
         * @static 
         * @hook woocommerce_admin_order_actions
         * @arguments $actions, $theOrder
         * @return $actions
         */
        public static function admin_icon_download($actions, $order)
        {
        }
        /**
         * adds a small download button to the admin page for refunds
         *
         * @since WGM 3.0
         * @access public
         * @static 
         * @hook wgm_refunds_actions
         * @param String $string
         * @param shop_order_refund $refund
         * @return String
         */
        public static function admin_refund_icon_download($actions, $refund)
        {
        }
        /**
         * ajax, manages what happen when the downloadbutton on admin order page is clicked
         *
         * @since WGM 3.0
         * @access public
         * @static 
         * @hook wp_ajax_woocommerce_wcreapdf_download
         * @arguments $_REQUEST[ 'order_id' ]
         * @return void, exit()
         */
        public static function admin_ajax_download_pdf()
        {
        }
        /**
         * ajax, manages what happen when the download button for a refund is clicked
         *
         * @since WGM 3.0
         * @access public
         * @static 
         * @arguments $_REQUEST[ 'order_id' ]
         * @return void, exit()
         */
        public static function admin_ajax_download_refund_pdf()
        {
        }
        /**
         * ajax, delete saved refund PDF content to allow regeneration of the refund PDF content
         *
         * @since WGM 3.0
         * @access public
         * @static 
         * @hook wp_ajax_woocommerce_wcreapdf_download
         * @arguments $_REQUEST[ 'order_id' ]
         * @return void, exit()
         */
        public static function admin_ajax_refund_delete_saved_content()
        {
        }
        /**
         * ajax, delete saved invoice PDF content to allow regeneration of the invoice PDF content
         *
         * @since WGM 3.1
         * @access public
         * @static 
         * @hook woocommerce_order_action_wp_wc_invoice_pdf_delete_content
         * @arguments $_REQUEST[ 'order_id' ]
         * @return void, exit()
         */
        public static function invoice_pdf_delete_saved_content()
        {
        }
        /**
         * load storno template instead of general template
         *
         * @param String $invoice_template_path
         * @hook wp_wc_invoice_pdf_template_invoice_content
         * @return String
         */
        public static function load_storno_template($template_path)
        {
        }
        /**
         * ajax, manages what happen when the test download button is clicked
         *
         * @since 0.0.1
         * @access public
         * @static 
         * @hook wp_ajax_woocommerce_wp_wc_invoice_pdf_test_invoice
         * @return void, exit()
         */
        public static function admin_ajax_test_invoice()
        {
        }
        /**
         * download not possible - admin notice
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook admin_notices
         * @return void
         */
        public static function output_notices()
        {
        }
        /**
         * show notice if invoice pdf content has been deleted
         *
         * @since 3.1
         * @access public
         * @static 
         * @hook admin_notices
         * @return void
         */
        public static function admin_notices()
        {
        }
        /**
         * add bulk action
         *
         * @access public
         * @static 
         * @hook WGM_Hpos::get_hook_for_order_bulk_actions()
         * @param Array $actions
         * @return Array
         */
        public static function add_bulk_actions($actions)
        {
        }
        /**
         * do bulk action download zip with invoice pdfs
         *
         * @since 3.1
         * @access public
         * @static 
         * @hook load-edit.php
         * @return void
         */
        public static function bulk_action($redirect_to, $action, $order_ids)
        {
        }
        /**
         * checkboxen for refunds
         *
         * @since 3.1
         * @access public
         * @static 
         * @hook refund_checkboxes
         * @param String $string
         * @param String raw_content
         * @return String
         */
        public static function refund_checkboxes($string, $raw_content)
        {
        }
        /**
         * submit button for refunds
         *
         * @since 3.1
         * @access public
         * @static 
         * @hook woocommerc_de_refund_after_list, woocommerc_de_refund_before_list
         * @return void
         */
        public static function submit_button()
        {
        }
        /**
         * checkbox for select all refunds
         *
         * @since 3.1
         * @access public
         * @static 
         * @hook wgm_refunds_render_refund_id_head
         * @param String $string
         * @return String
         */
        public static function refund_checkboxes_select_all($string)
        {
        }
        /**
         * bulk download for refunds
         *
         * @since 3.1
         * @access public
         * @static 
         * @hook admin_init
         * @return void
         */
        public static function bulk_action_refunds()
        {
        }
    }
    /**
     * admin setting page in backend wgm 3.1
     *
     * @class WP_WC_Invoice_Pdf_Backend_Options_WGM
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Invoice_Pdf_Backend_Options_WGM
    {
        /**
         * @var string
         * @static
         */
        public static $font_sizes = array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 24, 26, 28, 32, 36);
        /**
         * Backend Settings German Market 3.1
         *
         * wp-hook woocommerce_de_ui_options_global
         * @param Array $items
         * @return Array
         */
        public static function menu($items)
        {
        }
        /**
         * The following static functions call 'get_options_preferences'
         * To get the options as an array and render them
         */
        public static function render_menu_general_pdf_settings()
        {
        }
        public static function render_menu_invoice_content()
        {
        }
        public static function render_menu_refund_content()
        {
        }
        public static function render_menu_header()
        {
        }
        public static function render_menu_footer()
        {
        }
        public static function render_menu_images()
        {
        }
        public static function render_menu_girocode()
        {
        }
        public static function render_menu_swiss_qr_invoice()
        {
        }
        public static function render_menu_custom_fonts()
        {
        }
        public static function render_menu_custom_css_styles()
        {
        }
        public static function render_menu_emails()
        {
        }
        public static function render_menu_my_account_page()
        {
        }
        public static function render_menu_additional_pdfs()
        {
        }
        public static function render_menu_emails_additional_pdfs()
        {
        }
        /**
         * create admin fields in woocomerce
         *
         * @since 0.0.1
         * @access private
         * @return array $options
         */
        static function get_options_preferences($section = \NULL)
        {
        }
        /**
         * Output type wcreapdf_textarea
         *
         * @since 0.0.1
         * @static
         * @access public
         * @hook woocommerce_admin_field_wp_wc_invoice_pdf_textarea
         * @return void
         */
        public static function output_textarea($value)
        {
        }
        /**
         * Output test button
         *
         * @since 0.0.1
         * @static
         * @access public
         * @hook woocommerce_admin_field_wp_wc_invoice_pdf_test_download_button
         * @return void
         */
        public static function output_test_pdf_button($value)
        {
        }
        /**
         * Save type wcreapdf_textarea
         *
         * @since 1.0.3
         * @static
         * @access public
         * @hook woocommerce_admin_settings_sanitize_option
         * @return void
         */
        public static function save_wp_wc_invoice_pdf_textarea_textarea($value, $option, $raw_value)
        {
        }
        /**
         * Validation for saving file names
         *
         * @since 1.0.3
         * @static
         * @access public
         * @hook woocommerce_admin_settings_sanitize_option
         * @return void
         */
        public static function save($value, $option, $raw_value)
        {
        }
    }
    /**
     * pdf creation
     *
     * @WP_WC_Invoice_Pdf_Create_Pdf
     * @version 1.0.1
     * @category	Class
     */
    class WP_WC_Invoice_Pdf_Create_Pdf
    {
        /**
         * @var string
         */
        public $cache_dir = '';
        /**
         * @var string
         */
        public $filename = '';
        /**
         * constructor
         *
         * @since 0.0.1
         * @access public
         * @arguments array $args - array of settings
         * @return void
         */
        public function __construct($args = array())
        {
        }
        /**
         * get html as string for test html ( uesed in custom-css-styles to show it to user )
         *
         * @since 0.0.1
         * @access public
         * @static
         * @return string html
         */
        public static function get_test_html($remove_css_style = \false, $inline_style = \true)
        {
        }
        /**
         * add filters and hooks
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_get_option
         * @return void
         */
        public static function init()
        {
        }
        /**
         * returns header content
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_get_part_header
         * @arguments string $content, $args - we do not use it
         * @return string
         */
        public static function get_header($content, $args = array())
        {
        }
        /**
         * returns footer content
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_get_part_footer
         * @arguments string $content, $args - we do not use it
         * @return string
         */
        public static function get_footer($content, $args = array())
        {
        }
        /**
         * returns footer or header content, we use the same function to create the content
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments string $part ('header' or 'footer'), $args
         * @return string
         */
        public static function get_footer_or_header($part, $args = array())
        {
        }
        /**
         * creates the string that contains the background image that is positioned as entered in the settings
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments $part (header or footer), string $height, string $width, array $args
         * @return string
         */
        public static function include_background_image($part, $height = \NULL, $width = \NULL, $args = array())
        {
        }
        /**
         * returns background content
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_get_part_background
         * @arguments string $content - we do not use it, array $args
         * @return string
         */
        public static function get_background($content, $args = array())
        {
        }
        /**
         * returns font content
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_get_part_fonts
         * @arguments string $content- we do not use it, array $args
         * @return string
         */
        public static function get_fonts($content, $args = array())
        {
        }
        /**
         * returns invoice content
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_get_part_main
         * @arguments string $content- we do not use it, array $args
         * @return string
         */
        public static function get_main($content, $args = array())
        {
        }
        /**
         * returns default css styles
         *
         * @since 0.0.1
         * @access public
         * @static
         * @return string
         */
        public static function get_default_styles()
        {
        }
        /**
         * modify css property
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments $value ( checked to be numeric, maybe entered with , instead of . )
         * @return float
         */
        public static function convert_to_css_numeric($value)
        {
        }
        /**
         * get relative path from two absolute paths
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments string $from, $to (the absolute paths)
         * @return string
         */
        public static function get_relative_path($from, $to)
        {
        }
        /**
         * modify option before returned to caller function
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_get_option
         * @arguments $option_value, $option_name, $default
         * @return string
         */
        public static function modify_get_option($option_value, $option_name, $default)
        {
        }
        /**
         * we cannot delete our pdf immediately because the generation of pdf and sending it via mail don't happen
         * simultaneously because we are just hooked into the mail sending process
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public static function clear_cache()
        {
        }
        /**
         * Show delivery time in any case
         *
         * @since 3.8.2
         * @access public
         * @param Boolean $boolean
         * @param WC_Product $product
         * @return Boolean
         */
        public static function delivery_time_out_of_stock($boolean, $product)
        {
        }
        /**
         * Don't show delivery time in invoice pdfs
         *
         * @since 3.10.2
         * @access public
         * @static
         * @wp-hook wp_wc_invoice_pdf_start_template
         * @return void
         */
        public static function shipping_time_management_start()
        {
        }
        /**
         * Don't show delivery time in invoice pdfs
         *
         * @since 3.10.2
         * @access public
         * @static
         * @wp-hook shipping_time_management_end
         * @return void
         */
        public static function shipping_time_management_end()
        {
        }
        /**
         * Don't show delivery time in invoice pdfs
         *
         * @since 3.10.2
         * @access public
         * @static
         * @wp-hook wgm_shipping_time_product_string
         * @param String $shipping_time_output
         * @param String shipping_time
         * @param WC_Order_Item $item
         * @return String
         */
        public static function remove_delivery_time_in_pdf($shipping_time_output, $shipping_time, $item)
        {
        }
        /**
         * Check if we can output html or pdf
         *
         * @since 3.12.6
         * @access public
         * @static
         * @param Array $args
         * @return String
         */
        public static function use_html_output($args = array())
        {
        }
    }
    /**
     * frontend download on customer account, view-order
     *
     * @class WCREAPDF_View_Order_Download
     * @version    1.0
     * @category    Class
     */
    class WP_WC_Invoice_Pdf_View_Order_Download
    {
        /**
         * download button on view-order page
         *
         * @hook woocommerce_order_details_after_order_table
         *
         * @since 0.0.1
         *
         * @access public
         * @static
         *
         * @return void
         */
        public static function make_download_button($order)
        {
        }
        /**
         * download pdf frontend
         *
         * @hook wp_ajax_woocommerce_wcreapdf_view_order_download
         *
         * @since 0.0.1
         *
         * @access public
         * @static
         *
         * @return void
         */
        public static function download_pdf()
        {
        }
        /**
         * download refund pdf
         *
         * @access public
         * @static 
         * @return void
         */
        public static function download_refund_pdf()
        {
        }
    }
    /**
     * dummy email for invoice pdf to use actions:
     * woocommerce_email_before_order_table
     * woocommerce_email_after_order_table
     * woocommerce_email_order_meta
     *
     * @class 		WP_WC_Invoice_Pdf_Dummy_Mail
     * @version		1.0
     * @extends 	WC_Email
     */
    class WP_WC_Invoice_Pdf_Dummy_Mail extends \WC_Email
    {
        /**
         * Constructor
         */
        function __construct()
        {
        }
    }
    /**
     * inlcude girocode in invoice pdf
     *
     * @WP_WC_Invoice_Pdf_Girocode_Hooks
     * @version 1.0.0
     * @category	Class
     */
    class WP_WC_Invoice_Pdf_Girocode_Hooks
    {
        static $instance = \NULL;
        /**
         * singleton getInstance
         *
         * @access public
         * @static
         *
         * @return WP_WC_Invoice_Pdf_Girocode_Hooks
         */
        public static function get_instance()
        {
        }
        /**
         * constuct
         * 
         * add girocde to invoice pdf
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * check if girocode should be added
         * 
         * @wp-hook wp_wc_invoice_pdf_start_template
         * @param Array $args
         * @return void
         */
        public function maybe_add_hooks($args)
        {
        }
        /**
         * add hooks
         * 
         * @param WC_Order $order
         * @return void
         */
        public function add_hooks($order)
        {
        }
        /**
         * temporailly, set option to off
         * 
         * @wp-hook pre_option_wp_wc_invoice_pdf_avoid_payment_instructions
         * @param
         * @return String
         */
        public function pre_option_wp_wc_invoice_pdf_avoid_payment_instructions()
        {
        }
        /**
         * undo what happend in the method "add_hooks"
         * so that the qr-code is only activated for this pdf
         * and other hooks are restored
         * 
         * @wp-hook wp_wc_invoice_pdf_end_template
         * @param Array $args
         * @return void
         */
        public function remove_hooks($args)
        {
        }
        /**
         * if the option "enabled for billing countries" is used
         * check billing country of order
         * 
         * @param WC_Order $order
         * @return Boolean
         */
        public function is_enabled_for_billing_country($order)
        {
        }
    }
    /**
    * this abstract class uses DOMPDF class to render html to pdf files
    * abstract methods: get_template_dir, get_option, get_template_part_header, get_template_part_footer, get_template_part_main
    * maybe you need to overload: __construct, needs_user_unit
    *
    * @class 	Ebs_Pdf
    * @version	1.0
    * @category	Class
    * @requires class DOMPDF
    * @abstract
    */
    abstract class Ebs_Pdf
    {
        /**
         * @var string
         * units used in pdf, cm or in
         */
        public $user_unit;
        /**
         * @var string
         * paper size 'A4' or 'letter'
         */
        public $paper_size;
        /**
         * @var Class DOMPDF
         */
        public $pdf;
        /**
         * constructor, creates DOMPDF object, set prefix and user_unit, 
         * perhaps, you need to overload constructor
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * set user_unit
         *
         * @since 0.0.1
         * @access public
         * @arguments string $user_unit ('cm', 'in' - 'px' or sth else is possible, but in case of creating a pdf useless)
         * @return void
         */
        public function set_user_unit($user_unit)
        {
        }
        /**
         * get tamplate content with placeholders
         *
         * @since 0.0.1
         * @access public
         * @arguments string $template_path, array $args
         * @static
         * @return string
         */
        public static function get_template($template_path, $args = array())
        {
        }
        /**
         * get tamplate content with placeholders by template name
         *
         * @since 0.0.1
         * @access public
         * @arguments string $template_name, array $args
         * @return string
         */
        public function get_template_by_template_name($template_name = 'default', $args = array())
        {
        }
        /**
         * get tamplate dir (path)
         *
         * @since 0.0.1
         * @access public
         * @arguments string $template_name
         * @static
         * @abstract
         * @return string
         */
        public abstract function get_template_dir();
        /**
         * get placeholders
         *
         * @since 0.0.1
         * @access public
         * @static
         * @return array
         */
        public function get_template_placeholders_and_defaults()
        {
        }
        /**
         * true if option (a css property) needs user_unit
         * perhaps, you want to overload this method
         * not used in this abstract class, you should use it in your implementation of 'get_option'
         *
         * @since 0.0.1
         * @access public
         * @arguments string $search_array
         * @return boolean (true if css property needs user_unit)
         */
        public function needs_user_unit($option_name, $option_value)
        {
        }
        /**
         * get placeholders
         *
         * @since 0.0.1
         * @access public
         * @arguments string $search_array
         * @static
         * @return array
         */
        public function get_template_placeholders()
        {
        }
        /**
         * get the sanitized option_name
         *
         * @since 0.0.1
         * @access public
         * @arguments string $option_name
         * @static
         * @return string
         */
        public static function sanitize_option_name($option_name)
        {
        }
        /**
         * load an option by its key ($option_name)
         *
         * @since 0.0.1
         * @access public
         * @arguments string $option_name, string $default, array $args
         * @return void
         */
        public function load_option($option_name, $default = '', $args = array())
        {
        }
        /**
         * get options that are replaces by placeholders
         *
         * @since 0.0.1
         * @access public
         * @arguments array $args
         * @static
         * @return array
         */
        public function get_template_replace_array($args = array())
        {
        }
        /**
         * get pdf_content (template placeholders are replaced by saved options or defaults)
         *
         * @since 0.0.1
         * @access public
         * @arguments string $template_name, array $args
         * @static
         * @return string
         */
        public function get_pdf_content($template_name = 'default', $args = array())
        {
        }
        /**
         * get option
         * you should yous $this->user_unit for some options when implementing this method
         *
         * @since 0.0.1
         * @access public
         * @arguments string $option_name, $default
         * @abstract
         * @return string
         */
        public abstract function get_option($option_name, $default = '');
        /**
         * get template parts for header
         *
         * @since 0.0.1
         * @access public
         * @abstract
         * @arguments array $args
         * @return string
         */
        public abstract function get_template_part_header($args = array());
        /**
         * get template parts for footer
         *
         * @since 0.0.1
         * @access public
         * @abstract
         * @arguments array $args
         * @return string
         */
        public abstract function get_template_part_footer($args = array());
        /**
         * get template parts for main part
         *
         * @since 0.0.1
         * @access public
         * @abstract
         * @arguments array $args
         * @return string
         */
        public abstract function get_template_part_main($args = array());
        /**
         * get template parts for fonts
         *
         * @since 0.0.1
         * @access public
         * @abstract
         * @arguments array $args
         * @return string
         */
        public abstract function get_template_part_fonts($args = array());
        /**
         * get template parts for background
         *
         * @since 0.0.1
         * @access public
         * @abstract
         * @arguments array $args
         * @return string
         */
        public abstract function get_template_part_background($args = array());
    }
    /**
     * this class extends Ebs_Pdf to be used in wordpress
     *
     * @class 	Ebs_Pdf_Wordpress
     * @version	1.0
     * @category	Class
     * @requires class DOMPDF (abstract class Ebs_Pdf already included)
     */
    class Ebs_Pdf_Wordpress extends \Ebs_Pdf
    {
        /**
         * constructor, creates DOMPDF object, set prefix and user_unit
         *
         * @since 0.0.1
         * @access public
         * @arguments string $prefix
         * @overload
         * @return void
         */
        public function __construct($prefix = \NULL)
        {
        }
        /**
         * get option
         *
         * @since 0.0.1
         * @access public
         * @arguments string $option_name, $default
         * @abstract
         * @static
         * @return string
         */
        public function get_option($option_name, $default = '')
        {
        }
        /**
         * get template parts for header
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments array $args
         * @return string
         */
        public function get_template_part_header($args = array())
        {
        }
        /**
         * get template parts for footer
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments array $args
         * @return string
         */
        public function get_template_part_footer($args = array())
        {
        }
        /**
         * get template parts for main
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments array $args
         * @return string
         */
        public function get_template_part_main($args = array())
        {
        }
        /**
         * get template parts for fonts
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments array $args
         * @return string
         */
        public function get_template_part_fonts($args = array())
        {
        }
        /**
         * get template parts for background
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments array $args
         * @return string
         */
        public function get_template_part_background($args = array())
        {
        }
        /**
         * get tamplate dir (path)
         *
         * @since 0.0.1
         * @access public
         * @arguments string $template_name
         * @static
         * @abstract
         * @arguments array $args
         * @return string
         */
        public function get_template_dir()
        {
        }
    }
    /**
     * main class for plugin
     *
     * @class Woocommerce_Running_Invoice_Number
     * @version 1.0
     * @category	Class
     */
    class Woocommerce_Running_Invoice_Number
    {
        /**
         * singleton
         * @var object
         */
        static $instance = \NULL;
        /**
         * @var string
         */
        public static $plugin_filename = __FILE__;
        public static $compatibilities = array();
        /**
         * singleton getInstance
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook plugins_loaded
         * @return class Woocommerce_Running_Invoice_Number
         */
        public static function get_instance()
        {
        }
        /**
         * autoload classes on demand
         *
         * @since 0.0.1
         * @access public
         * @arguments string $class (class name)
         * @return void
         */
        public function autoload($class)
        {
        }
        /**
         * enqueue javascript for example text field, example running invoice number
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook admin_enqueue_scripts
         * @return void
         */
        public static function load_admin_js()
        {
        }
        /**
         * add wc option page
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook admin_enqueue_scripts
         * @return array settings
         */
        public static function get_settings_page($settings)
        {
        }
        /**
         * check if WooCommerce Invoice PDF is installed and activated
         *
         * @since 0.0.1
         * @access public
         * @static
         * @return boolean
         */
        public static function is_wp_wc_invoice_pdf_activated()
        {
        }
    }
    /**
     * Invoice PDF: Replace Filenames and Subjects
     *
     * @WP_WC_Running_Invoice_Number_Invoice_Pdf
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Running_Invoice_Number_Invoice_Pdf
    {
        /**
         * Welcome Text Refund
         *
         * @since 3.8.2
         * @arguments string $welcome_text, WC_Order $order
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_backend_filename
         * @return string
         */
        public static function extra_texts($welcome_text, $order)
        {
        }
        /**
         * get invoice pdf backend filename
         *
         * @since 0.0.1
         * @arguments string $filename, WC_Order $order
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_backend_filename
         * @return string
         */
        public static function get_backend_filename($filename, $order)
        {
        }
        /**
         * get invoice pdf frontend filename
         *
         * @since 0.0.1
         * @arguments string $filename, WC_Order $order
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_frontend_filename
         * @return string
         */
        public static function get_frontend_filename($filename, $order)
        {
        }
        /**
         * get invoice pdf subject
         *
         * @since 0.0.1
         * @arguments string $subject, WC_Order $order
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_subject
         * @return string
         */
        public static function get_subject($subject, $order)
        {
        }
        /**
         * get invoice date
         *
         * @since 0.0.1
         * @arguments string $subject, WC_Order $order
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_invoice_date
         * @return string
         */
        public static function get_invoice_date($invoice_date, $order)
        {
        }
        /**
         * get refund backend filename
         *
         * @since WGM 3.0
         * @param String $subject
         * @param WC_Order_Refund $refund
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_refund_backend_filename
         * @return string
         */
        public static function get_backend_filename_refund($filename, $refund)
        {
        }
        /**
         * get refund frontend filename
         *
         * @since WGM 3.0
         * @param String $subject
         * @param WC_Order_Refund $refund
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_refund_frontend_filename
         * @return string
         */
        public static function get_frontend_filename_refund($filename, $refund)
        {
        }
        /**
         * get refund frontend filename
         *
         * @since WGM 3.0
         * @param String $subject
         * @param WC_Order_Refund $refund
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_subject_line_1
         * @return string
         */
        public static function get_subject_refund_line_1($subject_line, $refund)
        {
        }
        /**
         * get refund frontend filename
         *
         * @since WGM 3.0
         * @param String $subject
         * @param WC_Order_Refund $refund
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_subject_line_2
         * @return string
         */
        public static function get_subject_refund_line_2($subject_line, $refund)
        {
        }
        /**
         * when this function is called by do_action the invoice will be attached to an email, so we have to be sure invoice number and date have been created
         *
         * @since 0.0.1
         * @arguments string $status, WC_Order $order
         * @access public
         * @hook wp_wc_invoice_before_adding_attachment
         * @static
         * @return string
         */
        public static function before_adding_attachment($status, $order)
        {
        }
    }
    class WP_WC_Running_Invoice_Number_Online_Bookkeeping
    {
        /**
         * lexoffice Support: Send invoice number as voucher number
         *
         * @since 3.5.2
         * @access public
         * wp-hook lexoffice_woocommerce_api_order_voucher_number
         * @param String $voucher_number
         * @param WC_Order $order_or_refund
         * @return String
         */
        public static function lexoffice_voucher_number($voucher_number, $order_or_refund)
        {
        }
        /**
         * lexoffice Support: Send invoice date as voucher date
         *
         * @since 3.6
         * @access public
         * wp-hook lexoffice_woocommerce_api_order_voucher_date, sevdesk_woocommerce_api_voucher_date
         * @param String $voucher_date
         * @param WC_Order $order_or_refund
         * @return String
         */
        public static function lexoffice_sevdesk_voucher_date($voucher_date, $order_or_refund)
        {
        }
        /**
         * sevDesk and 1&1 Online-Buchhaltung Support: Send invoice number as voucher number
         *
         * @since 3.5.2
         * @access public
         * wp-hook sevdesk_woocommerce_api_voucher_description
         * @param String $string
         * @param Array $args
         * @return String
         */
        public static function sevdesk_voucher_number($string, $args)
        {
        }
    }
    /**
     * Return Delivery PDF: Replace Small Headline
     *
     * @WP_WC_Running_Invoice_Number_Invoice_Pdf
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Running_Invoice_Number_Return_Delivery_Pdf
    {
        /**
         * Replace Small Headline - Backend Placeholders
         *
         * @wp-hook wcreapdf_pdf_placeholders_backend_string
         * @param String $string
         * @return $string
         **/
        public static function wcreapdf_pdf_placeholders_backend_string($string)
        {
        }
        /**
         * Replace Small Headline - Frontend Replace
         *
         * @wp-hook wcreapdf_pdf_placeholders_frontend_string
         * @param String $string
         * @return $string
         **/
        public static function wcreapdf_pdf_placeholders_frontend_string($string, $order = \NULL)
        {
        }
    }
    class WP_WC_Running_Invoice_Number_Semaphore
    {
        /**
         * @var Boolean
         * @access public
         * are sem-functions available
         */
        public static $use_sem = \false;
        /**
         * @var Boolean
         * @access public
         * can flock-function be used to create a lock file
         */
        public static $use_flock = \false;
        /**
         * @var null | String
         * @access public
         * path to lock file
         */
        public static $lock_file = \null;
        /**
         * @var Boolean
         * @access public
         * if we use the option-method
         */
        public static $use_option = \true;
        /**
         * @var Integer
         * @access public
         * id of semaphore if sem-functions are available
         */
        public static $semaphore = \null;
        /**
         * @var Ressource
         * @access public
         * ressource semaphore returned by sem_get or by fopen
         */
        public static $ressource = \null;
        /**
         * Semaphore / Mutex / Flock init
         *
         * @access public
         * @static
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Semaphore get (like sem_get)
         *
         * @access public
         * @static
         * @return Ressource | String
         */
        public static function sem_get()
        {
        }
        /**
         * Semaphore aquire (like sem_acquire)
         *
         * @access public
         * @static
         * @return Boolean
         */
        public static function sem_acquire()
        {
        }
        /**
         * Semaphore release (like sem_release)
         *
         * @access public
         * @static
         * @return Boolean
         */
        public static function sem_release()
        {
        }
        /**
         * If neither sem-functions nor flock is available, we set up an option
         *
         * @access public
         * @static
         * @return void
         */
        public static function init_option_lock()
        {
        }
    }
    /**
     * WoocCommerce Email Customer Invoice: Replace heading and subject
     *
     * @WP_WC_Invoice_Pdf_Helper
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Running_Invoice_Number_Email
    {
        /**
         * get email heading for customer invoice
         *
         * @since 0.0.1
         * @arguments string $heading, WC_Order $order
         * @access public
         * @static
         * @hook woocommerce_email_heading_customer_invoice
         * @return string
         */
        public static function get_heading($heading, $order)
        {
        }
        /**
         * get email subject for customer invoice
         *
         * @since 0.0.1
         * @arguments string $heading, WC_Order $order
         * @access public
         * @static
         * @hook woocommerce_email_subject_customer_invoice
         * @return string
         */
        public static function get_subject($subject, $order)
        {
        }
        /**
         * get email heading for completed order
         *
         * @since 1.0.1
         * @arguments string $heading, WC_Order $order
         * @access public
         * @static
         * @hook woocommerce_email_heading_customer_completed_order
         * @return string
         */
        public static function get_heading_completed_order($heading, $order)
        {
        }
        /**
         * get email subject for completed order
         *
         * @since 1.0.1
         * @arguments string $heading, WC_Order $order
         * @access public
         * @static
         * @hook woocommerce_email_subject_customer_completed_order
         * @return string
         */
        public static function get_subject_completed_order($subject, $order)
        {
        }
        /**
         * get email heading for customer invoice (paid)
         *
         * @since 0.0.1
         * @arguments string $heading, WC_Order $order
         * @access public
         * @static
         * @hook woocommerce_email_heading_customer_invoice_paid
         * @return string
         */
        public static function get_heading_paid($heading, $order)
        {
        }
        /**
         * get email subject for customer invoice (paid)
         *
         * @since 0.0.1
         * @arguments string $heading, WC_Order $order
         * @access public
         * @static
         * @hook woocommerce_email_subject_customer_invoice_paid
         * @return string
         */
        public static function get_subject_paid($subject, $order)
        {
        }
        /**
         * trigger refunded order to save refund id as temporally post meta in order
         *
         * @since WGM 3.0
         * @access public
         * @static
         * @hook woocommerce_order_fully_refunded_notification
         * @hook woocommerce_order_partially_refunded_notification
         * @param int $order_id
         * @param int $refund_id
         * @return void
         */
        public static function refunded_trigger($order_id, $refund_id)
        {
        }
        /**
         * get email heading for refunded order
         *
         * @since WGM 3.0
         * @arguments string $heading, WC_Order $order
         * @access public
         * @static
         * @hook woocommerce_email_heading_customer_refunded_order
         * @return string
         */
        public static function get_heading_refunded_order($heading, $order_object, $email)
        {
        }
        /**
         * get email subject for refunded order
         *
         * @since WGM 3.0
         * @arguments string $heading, WC_Order $order
         * @access public
         * @static
         * @hook woocommerce_email_subject_customer_refunded_order
         * @return string
         */
        public static function get_subject_refunded_order($subject, $order_object, $email)
        {
        }
    }
    class WP_WC_Running_Invoice_Number_Compatibilities_Plugin_B2B_Market
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Due_date
         */
        public static function get_instance()
        {
        }
        /**
         * add placeholder {{b2b-customer-group}} to option description
         *
         * @wp-hook wp_wc_running_invoice_number_placeholder_desc
         * @param String $desc
         * @return String
         */
        public function placeholder_desc($desc)
        {
        }
        /**
         * add placeholder {{b2b-customer-group}} to option description (with explanation)
         *
         * @wp-hook wp_wc_running_invoice_number_placeholder_invoice_pdf
         * @param String $desc
         * @return String
         */
        public function placeholder_desc_with_explanation($desc)
        {
        }
        /**
         * Replace Placeholder
         *
         * @wp-hook wp_wc_invoice_number_before_construct_suffix
         * @wp-hook wp_wc_invoice_number_before_construct_prefix
         * @param String $suffix_or_prefix
         * @param WC_Order $order
         * @param WP_WC_Running_Invoice_Number_Functions $running_invoice_number_object
         * @return String
         */
        public function replace_placeholder($suffix_or_prefix, $order)
        {
        }
        /**
         * get "B2B Market" group by $user_id
         * to do: replace against own B2B function if available
         *
         * @param Integer $user_id
         * @return String
         */
        public function get_customer_group_by_user_id($user_id)
        {
        }
    }
    /**
     * core functions
     *
     * @WP_WC_Running_Invoice_Number_Functions
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Running_Invoice_Number_Functions
    {
        public static $currently_used_orders = array();
        /**
         * constructor
         *
         * @since 0.0.1
         * @access public
         * @param WC_Order
         * @return void
         */
        public function __construct($order)
        {
        }
        /**
         * set invoice number property, this will not save meta data
         *
         * @since 3.11.0.1
         * @access public
         * @param String $invoice_number
         * @return String
         */
        public function set_invoice_number($invoice_number)
        {
        }
        /**
         * set invoice date property, this will not save meta data
         *
         * @since 3.11.0.1
         * @access public
         * @param Integer $invoice_date
         * @return Integer
         */
        public function set_invoice_date($timestamp)
        {
        }
        /**
         * get invoice number
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public function get_invoice_number()
        {
        }
        /**
         * get formated invoice date
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public function get_invoice_date()
        {
        }
        /**
         * get invoice timestamp
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public function get_invoice_timestamp()
        {
        }
        /**
         * constructor
         *
         * @since 0.0.1
         * @static
         * @access public
         * @return void
         */
        public static function static_construct($order)
        {
        }
        /**
         * constructor with $order_id
         *
         * @since 0.0.1
         * @static
         * @access public
         * @return void
         */
        public static function static_construct_by_order_id($order_id)
        {
        }
        /**
         * Reset Invoice Number monthly / annually
         *
         * @since GM 3.2
         * @static
         * @access public
         * @return void
         */
        public static function reset_number()
        {
        }
    }
    /**
     * adds admin notices to setting fields that are overridden by this plugin
     *
     * @class WP_WC_Running_Invoice_Number_Backend_Notices
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Running_Invoice_Number_Backend_Notices
    {
        /**
         * add notices to setting fields for customer invoice email
         *
         * @since 0.0.1
         * @arguments array $setting_fields
         * @access public
         * @static
         * @hook woocommerce_settings_api_form_fields_customer_invoice
         * @return array
         */
        public static function add_email_notices_to_woocommerce_setting_fields($setting_fields)
        {
        }
        /**
         * add notices to setting fields for wp_wc_invoice_pdf
         *
         * @since 0.0.1
         * @arguments array $setting_fields
         * @access public
         * @static
         * @hook wp_wc_invoice_pdf_options_section_general_pdf_settings
         * @hook wp_wc_invoice_pdf_options_section_invoice_content
         * @hook wp_wc_invoice_pdf_options_section_refund_content
         * @return array
         */
        public static function add_notices_to_wp_wc_invoice_pdf_setting_fields($setting_fields)
        {
        }
    }
    /**
     * output on shop_order
     *
     * @class WP_WC_Running_Invoice_Number_Backend_Output_Shop_Order
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Running_Invoice_Number_Backend_Output_Shop_Order
    {
        /**
         * add column 'Invoice Number' to table at screen shop_order
         *
         * @since 0.0.1
         * @access public
         * @arguments Array $columns
         * @hook manage_edit-shop_order_columns
         * @return Array
         */
        public static function shop_order_columns($columns)
        {
        }
        /**
         * make the column 'Invoice Number' sortable at screen shop_order
         *
         * @since 0.0.1
         * @access public
         * @arguments Array $columns
         * @hook manage_edit-shop_order_sortable_columns
         * @return Array
         */
        public static function shop_order_sortable_columns($columns)
        {
        }
        /**
         * render the content of column 'Invoice Number' at screen shop_order
         *
         * @since 0.0.1
         * @access public
         * @arguments Array $columns
         * @hook manage_shop_order_posts_custom_column
         * @return Array
         */
        public static function render_shop_order_columns($column, $post_id_or_order_object)
        {
        }
        /**
         * how to sort column invoice_number
         *
         * @since 0.0.1
         * @access public
         * @arguments $query
         * @hook pre_get_posts
         * @return void
         */
        public static function shop_order_sort($query)
        {
        }
        /**
         * how to sort column invoice_number using hpos
         *
         * @since 3.24
         * @param Array $order_query_args
         * @hook woocommerce_order_list_table_prepare_items_query_args
         * @return Array
         */
        public static function shop_order_sort_hpos($order_query_args)
        {
        }
        /**
         * show invoice number in "WooCommerce -> Orders" after invoice pdf donwnload has been clicked
         *
         * @since 0.0.1
         * @access public
         * @hook wp_ajax_wp_wc_running_invoice_number_show_after_invoice_pdf_clicked
         * @return void
         */
        public static function shop_order_ajax_after_invoice_pdf_clicked()
        {
        }
        /**
         * update invoice number in shop_order if there was no invoice number before
         *
         * @since 0.0.1
         * @access public
         * @hook wp_ajax_wp_wc_running_invoice_number_ajax_backend_shop_order
         * @return void
         */
        public static function shop_order_ajax()
        {
        }
        /**
         * Include invoice number to search query
         *
         * @since 0.0.1
         * @access public
         * @hook woocommerce_shop_order_search_fields
         * @hook woocommerce_order_table_search_query_meta_keys
         * @return void
         */
        public static function search_query($meta_keys)
        {
        }
        /**
         * add coloumn for WP_List refunds
         *
         * @since WGM 3.0
         * @access public
         * @hook wgm_refunds_backend_columns
         * @param Array $columns
         * @return Array
         */
        public static function refund_columns($columns)
        {
        }
        /**
         * add coloumn content for refund_number in WP_List refunds
         *
         * @since WGM 3.0
         * @access public
         * @hook wgm_refunds_array
         * @param Array $item
         * @return Array
         */
        public static function refund_item($item)
        {
        }
        /**
         * Show refund number in refund list after pdf has been downloaded
         *
         * @since WGM 3.0
         * @access public
         * @hook wp_ajax_wp_wc_running_invoice_number_ajax_backend_post
         * @return void (exit)
         */
        public static function ajax_show_refund_number()
        {
        }
        /**
         * Update refund number in refund list after save button has been pressed
         *
         * @since WGM 3.3.1
         * @access public
         * @hook wp_ajax_wp_wc_running_invoice_number_update_refund_number
         * @return void (exit)
         */
        public static function ajax_update_refund_number()
        {
        }
    }
    /**
     * output on post.php
     *
     * @class WP_WC_Running_Invoice_Number_Backend_Output_Post
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Running_Invoice_Number_Backend_Output_Post
    {
        /**
         * add 'Invoice Number' and 'Invoice Date' to order data
         *
         * @since 0.0.1
         * @access public
         * @static		
         * @arguments WC_Order $order
         * @hook woocommerce_admin_order_data_after_order_details
         * @return void
         */
        public static function order_data_after_order_details($order)
        {
        }
        /**
         * generate and save invoice number and invoice date when clicked on generate
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook wp_ajax_wp_wc_running_invoice_number_ajax_backend_post
         * @return void
         */
        public static function post_ajax()
        {
        }
        /**
         * delete invoice number when clicked
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook wp_ajax_wp_wc_running_invoice_number_delete
         * @return void
         */
        public static function delete_invoice_number()
        {
        }
        /**
         * save meta data
         *
         * @since 0.0.1
         * @access public
         * @static		
         * @hook woocommerce_process_shop_order_meta
         * @return void
         */
        public static function save_meta_data($order_id, $post_or_order_object)
        {
        }
        /**
         *
         * Show refund number in admin order
         *
         * @since 3.11.1.9
         * @wp-hook woocommerce_after_order_refund_item_name
         * @param WC_Order_Refund $refund
         * @return void
         */
        public static function show_refund_invoice_number_in_order_refunds($refund)
        {
        }
    }
    /**
     * admin setting page in backend wgm 3.1
     *
     * @class WP_WC_Invoice_Pdf_Backend_Options_WGM
     * @version 1.0
     * @category	Class
     */
    class WP_WC_Running_Invoice_Number_Backend_Options_WGM
    {
        /**
         * Backend Settings German Market 3.1
         *
         * wp-hook woocommerce_de_ui_options_global
         * @param Array $items
         * @return Array
         */
        public static function menu($items)
        {
        }
        /**
         * Render Options for invoice_pdf
         * 
         * @access public
         * @return void
         */
        public static function refund_pdf()
        {
        }
        /**
         * Render Options for invoice_pdf
         * 
         * @access public
         * @return void
         */
        public static function invoice_pdf()
        {
        }
        /**
         * Render Options for render_menu_emails
         * 
         * @access public
         * @return void
         */
        public static function render_menu_emails()
        {
        }
        /**
         * Render Options for automatic_generation
         * 
         * @access public
         * @return void
         */
        public static function render_menu_generation()
        {
        }
        /**
         * Render Options for e_mail
         * 
         * @access public
         * @return void
         */
        public static function render_menu_collocation()
        {
        }
        /**
         * Output textarea
         *
         * @since 0.0.1
         * @static
         * @access public
         * @hook woocommerce_admin_field_wp_wc_running_invoice_number_textarea
         * @return void
         */
        public static function output_textarea($value)
        {
        }
        /**
         * Validation for saving
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public static function save($value, $option, $raw_value)
        {
        }
        /**
         * lexoffice Support: Send invoice number as voucher number
         *
         * @since 3.5.2
         * @access public
         * @return void
         */
        public static function lexoffice_options($options)
        {
        }
        /**
         * sevDesk Support: Send invoice number as voucher number
         *
         * @since 3.5.2
         * @access public
         * @return void
         */
        public static function sevdesk_options($options)
        {
        }
        /**
         * sevDesk Support: placeholder to use invoice number in voucher description
         *
         * @since 3.9.2
         * @access public
         * @wp-hook sevdesk_woocommerce_de_ui_render_option_sevdesk_voucher_description_order
         * @return void
         */
        public static function sevdesk_voucher_description_order($option = array())
        {
        }
        /**
         * sevDesk Support: placeholders to use invoice number and refund number in voucher description
         *
         * @since 3.9.2
         * @access public
         * @wp-hook sevdesk_woocommerce_de_ui_render_option_sevdesk_voucher_description_refunds
         * @return void
         */
        public static function sevdesk_voucher_description_refund($option = array())
        {
        }
    }
    class Bulk_Transmission_sevDesk
    {
        static $instance_counter = 0;
        function __construct()
        {
        }
        /**
         * submit button for refunds
         *
         * @since 3.1
         * @access public
         * @static 
         * @hook woocommerc_de_refund_after_list, woocommerc_de_refund_before_list
         * @return void
         */
        public static function refund_button()
        {
        }
        /**
         * bulk download for refunds
         *
         * @access public
         * @static 
         * @hook admin_init
         * @return void
         */
        public static function bulk_action_refunds()
        {
        }
        /**
         * show info of background transmission for refunds
         *
         * @access public
         * @static 
         * @hook woocommerc_de_refund_before_list
         * @return void
         */
        public static function info_about_scheduled_transmissions_refunds()
        {
        }
        /**
         * show info of background transmission for orders
         *
         * @access public
         * @static 
         * @hook admin_notices
         * @return void
         */
        public static function info_about_scheduled_transmissions($which)
        {
        }
        /**
         * add bulk action
         *
         * @access public
         * @static 
         * @hook WGM_Hpos::get_hook_for_order_bulk_actions()
         * @param Array $actions
         * @return Array
         */
        public static function add_bulk_actions($actions)
        {
        }
        /**
         * do bulk action
         *
         * @access public
         * @static 
         * @hook WGM_Hpos::get_hook_for_order_handle_bulk_actions()
         * @param String $redirect_to
         * @param String $action
         * @param Array $order_ids
         * @return String
         */
        public static function bulk_action($redirect_to, $action, $order_ids)
        {
        }
        /**
         * transmit one order to sevDesk via bulk
         *
         * @access public
         * @static 
         * @hook german_market_sevdesk_bulk_transmission
         * @param Integer $order_id
         * @return void
         */
        public static function transmit_one_order_via_bulk($order_id)
        {
        }
        /**
         * transmit one refund to sevDesk via bulk
         *
         * @access public
         * @static 
         * @hook german_market_sevdesk_bulk_transmission_refund
         * @param Integer $refund_id
         * @return void
         */
        public static function transmit_one_refund_via_bulk($refund_id)
        {
        }
    }
    /**
     * Class WCEVC_Calculations
     */
    class WCEVC_Calculations
    {
        /**
         * @return WCEVC_Calculations
         */
        public static function get_instance()
        {
        }
        /**
         * Callback to calculate correct price for downloadable products for "billing address tax rates" !== "shop base tax rates".
         *
         * @wp-hook woocommerce_get_price_including_tax
         *
         * @param   int $price
         * @param   int $qty
         * @param   WC_Product $product
         *
         * @return  int $price
         */
        public function get_price_for_downloadable_products($price, $product)
        {
        }
        /**
         * Fixes the Prices in WooCommerce using the hook woocommerce_adjust_non_base_location_prices
         *
         * @wp-hook woocommerce_adjust_non_base_location_prices
         * @param Boolean $adjust_non_base_location_prices
         * @return Boolean 
         */
        public function adjust_non_base_location_prices($adjust_non_base_location_prices)
        {
        }
        /**
         * Returns if the given cart_items contain at least one product for vatmoss-calcualations.
         *
         * @param array $cart_items		the cart-items of $cart->get_cart().
         * @return boolean true|false   true, if the cart has at least one vatmoss-product, false if no vatmoss-product was found.
         */
        public function has_vatmoss_products($cart_items)
        {
        }
        /**
         *  Check if ...
         *      - the product is downloadable
         *      - the selected customer country is inside the EU.
         *      - the "shop base tax rate" !== "product tax rate"
         *
         * This method requires the option 'wcevc_enabled_wgm' set to 'downloadable'.
         *
         * @param WC_Product $product
         *
         * @return bool
         */
        public static function is_product_vatmoss_eligible($product)
        {
        }
    }
    class WGM_General_Tax_Output
    {
        /**
         * Singletone get_instance
         *
         * @static
         * @return WGM_Compatibilities
         */
        public static function get_instance()
        {
        }
        /**
         * Avoid multiple lines "inc. vat" in split tax html
         * @return void
         */
        public function avoid_same_tax_line_in_split_tax_html()
        {
        }
        /**
         * Callback for "Avoid multiple lines "inc. vat" in split tax html"
         * 
         * @wp-hook german_market_get_split_tax_html_add_tax_line
         * @static
         * @param Boolean $boolean
         * @param String $new_html
         * @param String $html
         * @return Boolean
         */
        public static function german_market_get_split_tax_html_add_tax_line($boolean, $new_html, $html)
        {
        }
        /**
         *  "Avoid multiple lines "inc. vat" in split tax html" only in cart
         * 
         * @wp-hook wp
         * @return void
         */
        public function avoid_same_tax_line_in_split_tax_html_in_cart()
        {
        }
        /**
         * add hooks to activate general tax output on product level
         * 
         * @return void
         */
        public function activate_general_tax_output_product_level()
        {
        }
        /**
         * removes hooks to deactivate general tax output on product level
         * 
         * @return void
         */
        public function deactivate_general_tax_output_product_level()
        {
        }
        /**
         * add hooks to activate general tax output for total tax
         * 
         * @return void
         */
        public function activate_general_tax_output_totals()
        {
        }
        /**
         * removes hooks to deactivate general tax output for total tax
         * 
         * @return void
         */
        public function deactivate_general_tax_output_totals()
        {
        }
        /**
         * if general output is activated everywhere: do not apply the hooks in invoice pdf
         * 
         * @return void
         */
        public function exception_for_invoice_pdf()
        {
        }
        /**
         * removes hook before invoice pdf contents starts and deactivate caching for tax string
         * 
         * @wp-hook wp_wc_invoice_pdf_start_template
         * @return void
         */
        public function invoice_pdf_start_template()
        {
        }
        /**
         * undo "invoice_pdf_start_template" add the end of invoice pdf template
         * 
         * @wp-hook wp_wc_invoice_pdf_end_template
         * @return void
         */
        public function invoice_pdf_end_template()
        {
        }
        /**
         * if general output is activated everywhere: do not apply the hooks in selected emails (exceptions)
         * 
         * @return void
         */
        public function exception_for_emails()
        {
        }
        /**
         * removes hook before emails contents starts and deactivate caching for tax string
         * 
         * @wp-hook woocommerce_email_header
         * @return void
         */
        public function email_header($email_heading, $email = \false)
        {
        }
        /**
         * undo "email_header" add the end of email template
         * 
         * @wp-hook wp_wc_invoice_pdf_end_template
         * @return void
         */
        public function email_footer($email = \false)
        {
        }
        /**
         * activate general tax output on cart
         * used if general tax output is enabled on product level and cart
         * @wp-hook wp
         * 
         * @return void
         */
        public function activate_general_taxoutput_on_cart()
        {
        }
        /**
         * General Tax output
         * 
         * @wp-hook wgm_get_totals_tax_string
         * @param String $tax_total_string
         * @param Array $tax_string_array
         * @param String $tax_totals
         * @param Mixed $tax_display
         * @return String
         */
        public static function get_totals_tax_string($tax_total_string, $tax_string_array, $tax_totals, $tax_display)
        {
        }
        /**
         * General Tax output
         * 
         * @wp-hook wgm_product_summary_parts_after
         * @param Array $output_parts
         * @param WC_Product $product
         * @param String $hook
         * @return Array
         */
        public static function product_summary_parts_after($output_parts, $product, $hook)
        {
        }
        /**
         * General Tax output
         * 
         * @wp-hook wgm_get_tax_line
         * @param String $tax_line
         * @param WC_Product $product
         * @return String
         */
        public static function get_tax_line($tax_line, $product)
        {
        }
        /**
         * General Tax output
         * 
         * @wp-hook wgm_get_excl_incl_tax_string
         * @param String $msg
         * @param String $type
         * @param String $rate
         * @param String $amount
         * @return String
         */
        public static function get_excl_incl_tax_string($msg, $type, $rate, $amount)
        {
        }
        /**
         * General Tax output, Mini cart
         * 
         * @wp-hook german_market_mini_cart_price_tax
         * @param String $string
         * @return String
         */
        public static function mini_cart_price_tax($string)
        {
        }
    }
    /**
     * Class WCEVC_Plugin
     */
    class WCEVC_Plugin
    {
        /**
         * @return WCEVC_Plugin
         */
        public static function get_instance()
        {
        }
        /**
         * Start the plugin on plugins_loaded hook.
         *
         * @return  void
         */
        public function run()
        {
        }
        /**
         * Install callback with check, if WooCommerce is installed.
         *
         * @return  void
         */
        public function activate()
        {
        }
    }
    /**
     * Class WCEVC_CN_Number_Importer
     */
    class WCEVC_CN_Number_Importer
    {
        /**
         * Simple Constructor
         *
         * @access private
         * @return void
         */
        public function __construct($cn_number, $categories)
        {
        }
        /**
         * Connect to eu server and get tax rates for a cn number
         *
         * @access public
         * @return Array
         */
        public function get_eu_api_respond_for_cn_number()
        {
        }
        /**
         * Import chosen tax rates
         *
         * @access public
         * @return void
         */
        public static function import_rates()
        {
        }
    }
    /**
     * Class WCEVC_Tax_Rate_Importer
     */
    class WCEVC_Tax_Rate_Importer
    {
        /**
         * Simple Constructor
         *
         * @access private
         * @return void
         */
        public function __construct($wc_tax_class = '', $tax_rate_to_import = 'standard', $delete_existing_rates = 'no')
        {
        }
        /**
         * Delete tax rates of the tax class $this->wc_tax_class()
         *
         * @access private
         * @return void
         */
        public function import()
        {
        }
    }
    /**
     * Class WCEVC_Settings
     */
    class WCEVC_Settings
    {
        /**
         * @return WCEVC_Settings
         */
        public static function get_instance()
        {
        }
        /**
         * Add German Market Submenu Menu
         *
         * @wp-hook woocommerce_de_ui_left_menu_items
         * @param Array $items
         * @return Array
         */
        public static function german_market_menu($items)
        {
        }
        /**
         * Render Options for general settings
         * 
         * @access public
         * @return Array
         */
        public static function general_settings()
        {
        }
        /**
         * Run "import eu tax rates"
         * 
         * @access public
         * @wp-hook woocommerce_de_ui_update_options
         * @return void
         */
        public static function import_tax_rates()
        {
        }
        /**
         * Render Options for "import eu tax rates"
         * 
         * @access public
         * @return Array
         */
        public static function import_eu_tax_rates()
        {
        }
        /**
         * Run "CN number check"
         * 
         * @access public
         * @wp-hook woocommerce_de_ui_update_options
         * @return void
         */
        public static function cn_number_handler()
        {
        }
        /**
         * Render Options for "Import EU Tax Rates by CN Number"
         * 
         * @access public
         * @return Array
         */
        public static function import_cn_number()
        {
        }
        /**
         * Renrurn all CN Categories
         * 
         * @access public
         * @return Array
         */
        public static function get_all_cn_categories()
        {
        }
        /**
         * Render Options for "Generalized tax output"
         * 
         * @access public
         * @return Array
         */
        public static function generalized_tax_output()
        {
        }
        /**
         * Set the default options of our Plugins on activation
         *
         * @return void
         */
        public function add_default_options()
        {
        }
    }
    class Bulk_Transmission_lexoffice
    {
        static $instance_counter = 0;
        function __construct()
        {
        }
        /**
         * submit button for refunds
         *
         * @since 3.1
         * @access public
         * @static 
         * @hook woocommerc_de_refund_after_list, woocommerc_de_refund_before_list
         * @return void
         */
        public static function refund_button()
        {
        }
        /**
         * bulk download for refunds
         *
         * @access public
         * @static 
         * @hook admin_init
         * @return void
         */
        public static function bulk_action_refunds()
        {
        }
        /**
         * show info of background transmission for refunds
         *
         * @access public
         * @static 
         * @hook woocommerc_de_refund_before_list
         * @return void
         */
        public static function info_about_scheduled_transmissions_refunds()
        {
        }
        /**
         * show info of background transmission for orders
         *
         * @access public
         * @static 
         * @hook admin_notices
         * @return void
         */
        public static function info_about_scheduled_transmissions()
        {
        }
        /**
         * add bulk action
         *
         * @access public
         * @static 
         * @hook WGM_Hpos::get_hook_for_order_bulk_actions()
         * @param Array $actions
         * @return Array
         */
        public static function add_bulk_actions($actions)
        {
        }
        /**
         * do bulk action
         *
         * @access public
         * @static 
         * @hook WGM_Hpos::get_hook_for_order_handle_bulk_actions()
         * @param String $redirect_to
         * @param String $action
         * @param Array $order_ids
         * @return String
         */
        public static function bulk_action($redirect_to, $action, $order_ids)
        {
        }
        /**
         * transmit one order to lexoffice via bulk
         *
         * @access public
         * @static 
         * @hook german_market_lexoffice_bulk_transmission
         * @param Integer $order_id
         * @return void
         */
        public static function transmit_one_order_via_bulk($order_id)
        {
        }
        /**
         * transmit one refund to lexoffice via bulk
         *
         * @access public
         * @static 
         * @hook german_market_lexoffice_bulk_transmission_refund
         * @param Integer $refund_id
         * @return void
         */
        public static function transmit_one_refund_via_bulk($refund_id)
        {
        }
    }
    class German_Market_Lexoffice_Semaphore
    {
        /**
         * @var null | String
         * @access public
         * path to lock file
         */
        public static $lock_file = \null;
        /**
         * @var Ressource
         * @access public
         * ressource semaphore returned by by fopen
         */
        public static $ressource = \null;
        /**
         * Flock init
         *
         * @access public
         * @static
         * @return void
         */
        public static function init()
        {
        }
        /**
         * Semaphore get (like sem_get)
         *
         * @access public
         * @static
         * @return Ressource | String
         */
        public static function sem_get()
        {
        }
        /**
         * Semaphore aquire (like sem_acquire)
         *
         * @access public
         * @static
         * @return Boolean
         */
        public static function sem_acquire()
        {
        }
        /**
         * Semaphore release (like sem_release)
         *
         * @access public
         * @static
         * @return Boolean
         */
        public static function sem_release()
        {
        }
    }
    /**
     * frontend download on customer account, view-order
     *
     * @class WCREAPDF_View_Order_Download
     * @version	1.0.7
     * @category	Class
     */
    class WCREAPDF_View_Order_Download
    {
        /**
         * download button on view-order page
         *
         * @since 0.0.1
         * @access public
         * @hook woocommerce_order_details_after_order_table
         * @return void
         */
        public static function make_download_button($order)
        {
        }
        /**
         * download pdf frontend
         *
         * @since 0.0.1
         * @access public
         * @hook wp_ajax_woocommerce_wcreapdf_view_order_download
         * @return void
         */
        public static function download_pdf()
        {
        }
    }
    /**
     * some functions that helps handling temp files, option names and if an order needs the pdf as attachment
     *
     * @class WCREAPDF_Helper
     * @version 1.0
     * @category	Class
     */
    class WCREAPDF_Helper
    {
        /**
         * get option value by my option name
         *
         * @since 0.0.1
         * @access public
         * @arguments string $option (my option name)	
         * @return mixed: boolean false or string
         */
        public static function get_wcreapdf_optionname($option)
        {
        }
        /**
         * checks whether $order needs the retoure pdf (equiv. to needs shipping)
         *
         * @since 0.0.1
         * @access public
         * @arguments WC_Order $order
         * @return boolean
         */
        public static function check_if_needs_attachement($order)
        {
        }
        /**
         * Remove Prices in PDF
         *
         * @since 3.6.3
         * @access public
         * @param String $retoure_or_delivery
         * @return void
         */
        public static function remove_each_price($retoure_or_delivery)
        {
        }
        /**
         * Remove Prices in PDF
         *
         * @since 3.6.3
         * @access public
         * @param String $retoure_or_delivery
         * @return void
         */
        public static function add_each_price($retoure_or_delivery)
        {
        }
        /**
         * Don't show delivery time in pdfs
         *
         * @since 3.10.2
         * @access public
         * @static
         * @wp-hook wcreapdf_pdf_before_create
         * @return void
         */
        public static function shipping_time_management_start($retoure_or_delivery)
        {
        }
        /**
         * Don't show delivery time in pdfs
         *
         * @since 3.10.2
         * @access public
         * @static
         * @wp-hook wcreapdf_pdf_after_create
         * @return void
         */
        public static function shipping_time_management_end($retoure_or_delivery)
        {
        }
        /**
         * Don't show delivery time in pdfs
         *
         * @since 3.10.2
         * @access public
         * @static
         * @wp-hook wgm_shipping_time_product_string
         * @param String $shipping_time_output
         * @param String shipping_time
         * @param WC_Order_Item $item
         * @return String
         */
        public static function remove_delivery_time_in_pdf($shipping_time_output, $shipping_time, $item)
        {
        }
    }
    class FPDF
    {
        protected $page;
        // current page number
        protected $n;
        // current object number
        protected $offsets;
        // array of object offsets
        protected $buffer;
        // buffer holding in-memory PDF
        protected $pages;
        // array containing pages
        protected $state;
        // current document state
        protected $compress;
        // compression flag
        protected $k;
        // scale factor (number of points in user unit)
        protected $DefOrientation;
        // default orientation
        protected $CurOrientation;
        // current orientation
        protected $StdPageSizes;
        // standard page sizes
        protected $DefPageSize;
        // default page size
        protected $CurPageSize;
        // current page size
        protected $CurRotation;
        // current page rotation
        protected $PageInfo;
        // page-related data
        protected $wPt, $hPt;
        // dimensions of current page in points
        protected $w, $h;
        // dimensions of current page in user unit
        protected $lMargin;
        // left margin
        protected $tMargin;
        // top margin
        protected $rMargin;
        // right margin
        protected $bMargin;
        // page break margin
        protected $cMargin;
        // cell margin
        protected $x, $y;
        // current position in user unit
        protected $lasth;
        // height of last printed cell
        protected $LineWidth;
        // line width in user unit
        protected $fontpath;
        // path containing fonts
        protected $CoreFonts;
        // array of core font names
        protected $fonts;
        // array of used fonts
        protected $FontFiles;
        // array of font files
        protected $encodings;
        // array of encodings
        protected $cmaps;
        // array of ToUnicode CMaps
        protected $FontFamily;
        // current font family
        protected $FontStyle;
        // current font style
        protected $underline;
        // underlining flag
        protected $CurrentFont;
        // current font info
        protected $FontSizePt;
        // current font size in points
        protected $FontSize;
        // current font size in user unit
        protected $DrawColor;
        // commands for drawing color
        protected $FillColor;
        // commands for filling color
        protected $TextColor;
        // commands for text color
        protected $ColorFlag;
        // indicates whether fill and text colors are different
        protected $WithAlpha;
        // indicates whether alpha channel is used
        protected $ws;
        // word spacing
        protected $images;
        // array of used images
        protected $PageLinks;
        // array of links in pages
        protected $links;
        // array of internal links
        protected $AutoPageBreak;
        // automatic page breaking
        protected $PageBreakTrigger;
        // threshold used to trigger page breaks
        protected $InHeader;
        // flag set when processing header
        protected $InFooter;
        // flag set when processing footer
        protected $AliasNbPages;
        // alias for total number of pages
        protected $ZoomMode;
        // zoom display mode
        protected $LayoutMode;
        // layout display mode
        protected $metadata;
        // document properties
        protected $PDFVersion;
        // PDF version number
        /*******************************************************************************
        *                               Public methods                                 *
        *******************************************************************************/
        function __construct($orientation = 'P', $unit = 'mm', $size = 'A4')
        {
        }
        function SetMargins($left, $top, $right = \null)
        {
        }
        function SetLeftMargin($margin)
        {
        }
        function SetTopMargin($margin)
        {
        }
        function SetRightMargin($margin)
        {
        }
        function SetAutoPageBreak($auto, $margin = 0)
        {
        }
        function SetDisplayMode($zoom, $layout = 'default')
        {
        }
        function SetCompression($compress)
        {
        }
        function SetTitle($title, $isUTF8 = \false)
        {
        }
        function SetAuthor($author, $isUTF8 = \false)
        {
        }
        function SetSubject($subject, $isUTF8 = \false)
        {
        }
        function SetKeywords($keywords, $isUTF8 = \false)
        {
        }
        function SetCreator($creator, $isUTF8 = \false)
        {
        }
        function AliasNbPages($alias = '{nb}')
        {
        }
        function Error($msg)
        {
        }
        function Close()
        {
        }
        function AddPage($orientation = '', $size = '', $rotation = 0)
        {
        }
        function Header()
        {
        }
        function Footer()
        {
        }
        function PageNo()
        {
        }
        function SetDrawColor($r, $g = \null, $b = \null)
        {
        }
        function SetFillColor($r, $g = \null, $b = \null)
        {
        }
        function SetTextColor($r, $g = \null, $b = \null)
        {
        }
        function GetStringWidth($s)
        {
        }
        function SetLineWidth($width)
        {
        }
        function Line($x1, $y1, $x2, $y2)
        {
        }
        function Rect($x, $y, $w, $h, $style = '')
        {
        }
        function AddFont($family, $style = '', $file = '')
        {
        }
        function SetFont($family, $style = '', $size = 0)
        {
        }
        function SetFontSize($size)
        {
        }
        function AddLink()
        {
        }
        function SetLink($link, $y = 0, $page = -1)
        {
        }
        function Link($x, $y, $w, $h, $link)
        {
        }
        function Text($x, $y, $txt)
        {
        }
        function AcceptPageBreak()
        {
        }
        function Cell($w, $h = 0, $txt = '', $border = 0, $ln = 0, $align = '', $fill = \false, $link = '')
        {
        }
        function MultiCell($w, $h, $txt, $border = 0, $align = 'J', $fill = \false)
        {
        }
        function Write($h, $txt, $link = '')
        {
        }
        function Ln($h = \null)
        {
        }
        function Image($file, $x = \null, $y = \null, $w = 0, $h = 0, $type = '', $link = '')
        {
        }
        function GetPageWidth()
        {
        }
        function GetPageHeight()
        {
        }
        function GetX()
        {
        }
        function SetX($x)
        {
        }
        function GetY()
        {
        }
        function SetY($y, $resetX = \true)
        {
        }
        function SetXY($x, $y)
        {
        }
        function Output($dest = '', $name = '', $isUTF8 = \false)
        {
        }
        /*******************************************************************************
        *                              Protected methods                               *
        *******************************************************************************/
        protected function _dochecks()
        {
        }
        protected function _checkoutput()
        {
        }
        protected function _getpagesize($size)
        {
        }
        protected function _beginpage($orientation, $size, $rotation)
        {
        }
        protected function _endpage()
        {
        }
        protected function _loadfont($font)
        {
        }
        protected function _isascii($s)
        {
        }
        protected function _httpencode($param, $value, $isUTF8)
        {
        }
        protected function _UTF8toUTF16($s)
        {
        }
        protected function _escape($s)
        {
        }
        protected function _textstring($s)
        {
        }
        protected function _dounderline($x, $y, $txt)
        {
        }
        protected function _parsejpg($file)
        {
        }
        protected function _parsepng($file)
        {
        }
        protected function _parsepngstream($f, $file)
        {
        }
        protected function _readstream($f, $n)
        {
        }
        protected function _readint($f)
        {
        }
        protected function _parsegif($file)
        {
        }
        protected function _out($s)
        {
        }
        protected function _put($s)
        {
        }
        protected function _getoffset()
        {
        }
        protected function _newobj($n = \null)
        {
        }
        protected function _putstream($data)
        {
        }
        protected function _putstreamobject($data)
        {
        }
        protected function _putpage($n)
        {
        }
        protected function _putpages()
        {
        }
        protected function _putfonts()
        {
        }
        protected function _tounicodecmap($uv)
        {
        }
        protected function _putimages()
        {
        }
        protected function _putimage(&$info)
        {
        }
        protected function _putxobjectdict()
        {
        }
        protected function _putresourcedict()
        {
        }
        protected function _putresources()
        {
        }
        protected function _putinfo()
        {
        }
        protected function _putcatalog()
        {
        }
        protected function _putheader()
        {
        }
        protected function _puttrailer()
        {
        }
        protected function _enddoc()
        {
        }
    }
    /**
     * pdf creation
     *
     * @class WCREAPDF_Pdf
     * @version 1.0.1
     * @category	Class
     */
    class WCREAPDF_Pdf extends \FPDF
    {
        /**
         * create header, overrides FPDF method
         *
         * @since 0.0.1
         * @access public
         * @override
         * @return void
         */
        function Header()
        {
        }
        /**
         * create footer, overrides FPDF method
         *
         * @since 0.0.1
         * @access public
         * @override
         * @return void
         */
        function Footer()
        {
        }
        /**
         * returns an array of layout variables used to create the pdf
         * array will be extracted using extract( $return, EXTR_IF_EXISTS ) in the method create_pdf
         * so the key is the name of the variable
         *
         * @since 0.0.1
         * @access public
         * @return array key will be uses as variable name
         */
        public static function get_layout_variables()
        {
        }
        /**
         * creates the pdf file using FPDF library
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments WC_Order $order, boolean $test (if true test pdf is generated and $order is ignored), mixed $download (if 'I' send inline to browser, if false save tmp pdf, else force file download)
         * @return string $directory_name (name of the directory where the pdf is saved)
         */
        public static function create_pdf($order = \NULL, $test = \false, $download = \false, $for_zip = \false, $admin = \false)
        {
        }
        /**
         * set pdf data
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public function set_pdf_author_title()
        {
        }
        /**
         * get dummy customer adress
         *
         * @since 0.0.1
         * @static
         * @access public
         * @return string
         */
        public static function get_test_address()
        {
        }
        /**
         * get dummy products
         *
         * @since 0.0.1
         * @access public
         * @return array
         */
        public static function get_test_products()
        {
        }
        /**
         * add the image in pdf
         *
         * @since 0.0.1
         * @access public
         * @return boolodan, true if image was added
         */
        public function add_header_image($img)
        {
        }
        /**
         * get amount of lines of a text that is seperated by '\n's
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments string $footer_text (a text seperated (or not) by text line breaks)
         * @return integer
         */
        public static function count_lines_of_footer($footer_text)
        {
        }
        /**
         * get string that contains all meta data for output in pdf
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments string $metaArray (you get it from the method 'get_formatted' of class WC_Order_Item_Meta
         * @return string
         */
        public static function get_item_meta_display_string($meta_array)
        {
        }
        /**
         * manages pdf output
         *
         * @since 0.0.1
         * @access public
         * @arguments WC_Order $order, mixed $download, boolean $test
         * possible balues for $download: false (create temp pdf), 'I' (send pdf inline to browser), everything else forces file download
         * @return mixed ($directory_name if download is false, else void )
         */
        public function wc_output($order, $download, $test, $for_zip = \false, $admin = \false)
        {
        }
        /**
         * we cannot delete our pdf immediately because the generation of pdf and sending it via mail don't happen
         * simultaneously because we are just hooked into the mail sending process
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public static function clear_temp_pdf()
        {
        }
    }
    /**
     * pdf creation
     *
     * @class WCREAPDF_Pdf
     * @version 1.0.1
     * @category	Class
     */
    class WCREAPDF_Pdf_Delivery extends \FPDF
    {
        /**
         * create header, overrides FPDF method
         *
         * @since 0.0.1
         * @access public
         * @override
         * @return void
         */
        function Header()
        {
        }
        /**
         * create footer, overrides FPDF method
         *
         * @since 0.0.1
         * @access public
         * @override
         * @return void
         */
        function Footer()
        {
        }
        /**
         * returns an array of layout variables used to create the pdf
         * array will be extracted using extract( $return, EXTR_IF_EXISTS ) in the method create_pdf
         * so the key is the name of the variable
         *
         * @since 0.0.1
         * @access public
         * @return array key will be uses as variable name
         */
        public static function get_layout_variables()
        {
        }
        /**
         * creates the pdf file using FPDF library
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments WC_Order $order, boolean $test (if true test pdf is generated and $order is ignored), mixed $download (if 'I' send inline to browser, if false save tmp pdf, else force file download)
         * @return string $directory_name (name of the directory where the pdf is saved)
         */
        public static function create_pdf($order = \NULL, $test = \false, $download = \false, $for_zip = \false, $admin = \false)
        {
        }
        /**
         * set pdf data
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public function set_pdf_author_title()
        {
        }
        /**
         * get dummy customer adress
         *
         * @since 0.0.1
         * @static
         * @access public
         * @return string
         */
        public static function get_test_address()
        {
        }
        /**
         * get dummy products
         *
         * @since 0.0.1
         * @access public
         * @return array
         */
        public static function get_test_products()
        {
        }
        /**
         * add the image in pdf
         *
         * @since 0.0.1
         * @access public
         * @return boolodan, true if image was added
         */
        public function add_header_image($img)
        {
        }
        /**
         * get amount of lines of a text that is seperated by '\n's
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments string $footer_text (a text seperated (or not) by text line breaks)
         * @return integer
         */
        public static function count_lines_of_footer($footer_text)
        {
        }
        /**
         * get string that contains all meta data for output in pdf
         *
         * @since 0.0.1
         * @access public
         * @static
         * @arguments string $metaArray (you get it from the method 'get_formatted' of class WC_Order_Item_Meta
         * @return string
         */
        public static function get_item_meta_display_string($meta_array)
        {
        }
        /**
         * manages pdf output
         *
         * @since 0.0.1
         * @access public
         * @arguments WC_Order $order, mixed $download, boolean $test
         * possible balues for $download: false (create temp pdf), 'I' (send pdf inline to browser), everything else forces file download
         * @return mixed ($directory_name if download is false, else void )
         */
        public function wc_output($order, $download, $test, $for_zip = \false, $admin = \false)
        {
        }
        /**
         * we cannot delete our pdf immediately because the generation of pdf and sending it via mail don't happen
         * simultaneously because we are just hooked into the mail sending process
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public static function clear_temp_pdf()
        {
        }
    }
    /**
     * adds the pdf as an attachment to e-mails
     *
     * @class WCREAPDF_Email_Attachment
     * @version 1.0
     * @category	Class
     */
    class WCREAPDF_Email_Attachment
    {
        /**
         * adds the pdf as an attachement to chosen customer e-mails
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook woocommerce_email_attachments
         * @return array $attachments
         */
        public static function add_attachment($attachments, $status, $order)
        {
        }
    }
    /**
     * enables download buttons in backend
     *
     * @class WCREAPDF_Backend_Download
     * @version 1.0
     * @category	Class
     */
    class WCREAPDF_Backend_Download
    {
        /**
         * adds 'create retoure pdf' to order actions options
         *
         * @since 3.9.2
         * @access public
         * @static
         * @hook woocommerce_order_actions
         * @arguments $array
         * @return $array ($actions => $optionname)
         * @hook woocommerce_order_actions_end
         * @arguments $order_id
         * @return void
         */
        public static function order_download($order_id)
        {
        }
        /**
         * adds 'create delivery pdf' to order actions options
         *
         * @since 3.9.2
         * @access public
         * @static
         * @hook woocommerce_order_actions
         * @arguments $array
         * @return $array ($actions => $optionname)
         * @hook woocommerce_order_actions_end
         * @arguments $order_id
         * @return void
         */
        public static function order_download_delivery($order_id)
        {
        }
        /**
         * create the retoure pdf to shop user when choosing this option and force download
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook woocommerce_order_action_woocomerce_wcreapdf_sendretoure
         * @arguments $order
         * @return void
         */
        public static function order_action($order)
        {
        }
        /**
         * create the delivery pdf to shop user when choosing this option and force download
         *
         * @since GM v3.2
         * @access public
         * @static
         * @arguments $order
         * @return void
         */
        public static function order_action_delivery($order)
        {
        }
        /**
         * adds a small download button to the admin page for orders
         *
         * @since 0.0.1
         * @access public
         * @static 
         * @hook woocommerce_admin_order_actions
         * @arguments $actions, $theOrder
         * @return $actions
         */
        public static function admin_icon_download($actions, $order)
        {
        }
        /**
         * adds a small download button for delivery pdf to the admin page for orders
         *
         * @since GM v3.2
         * @access public
         * @static 
         * @hook woocommerce_admin_order_actions
         * @arguments $actions, $theOrder
         * @return $actions
         */
        public static function admin_icon_download_delivery($actions, $order)
        {
        }
        /**
         * ajax, manages what happen when the downloadbutton on admin order page is clicked
         *
         * @since 0.0.1
         * @access public
         * @static 
         * @hook wp_ajax_woocommerce_wcreapdf_download
         * @arguments $_REQUEST[ 'order_id' ]
         * @return void, exit()
         */
        public static function admin_ajax_download_pdf()
        {
        }
        /**
         * ajax, manages what happen when the downloadbutton on admin order page is clicked
         *
         * @since GM v3.2
         * @access public
         * @static 
         * @hook wp_ajax_woocommerce_wcreapdf_download
         * @arguments $_REQUEST[ 'order_id' ]
         * @return void, exit()
         */
        public static function admin_ajax_download_pdf_delivery()
        {
        }
        /**
         * ajax, manages test pdf download
         *
         * @since 0.0.1
         * @access public
         * @static 
         * @hook wp_ajax_woocommerce_wcreapdf_download_test_pdf
         * @return void, exit()
         */
        public static function download_test_pdf()
        {
        }
        /**
         * ajax, manages test pdf download PDF Delivery
         *
         * @since GM v3.2
         * @access public
         * @static 
         * @hook wp_ajax_woocommerce_wcreapdf_download_test_pdf_delivery
         * @return void, exit()
         */
        public static function download_test_pdf_delivery()
        {
        }
        /**
         * add bulk action download zip with pdfs
         *
         * @since 3.5
         * @version 3.22.1.3
         * @access public
         * @static 
         * @hook WGM_Hpos::get_hook_for_order_bulk_actions()
         * @param Array $actions
         * @return Array
         */
        public static function add_bulk_actions($actions)
        {
        }
        /**
         * handle bulk action download zip with pdfs
         *
         * @since 3.5
         * @version 3.22.1.3
         * @access public
         * @static 
         * @hook WGM_Hpos::get_hook_for_order_handle_bulk_actions()
         * @param String $redirect_to
         * @param String $action
         * @param Array $order_ids
         * @return String
         */
        public static function bulk_action($redirect_to, $action, $order_ids)
        {
        }
        /**
         * Show error messages that accure when trying to create pdf
         *
         * @since 3.5.1
         * @access public
         * @static 
         * @hook admin_notices
         * @return void
         */
        public static function show_error_message()
        {
        }
    }
    /**
     * admin setting page in backend wgm 3.1
     *
     * @class WP_WC_Invoice_Pdf_Backend_Options_WGM
     * @version 1.0
     * @category	Class
     */
    class WCREAPDF_Backend_Options_WGM
    {
        /**
         * Backend Settings German Market 3.1
         *
         * wp-hook woocommerce_de_ui_options_global
         * @param Array $items
         * @return Array
         */
        public static function menu($items)
        {
        }
        /**
         * Render Options for pdf settings - Return note
         * 
         * @access public
         * @return void
         */
        public static function render_menu_pdf_settings()
        {
        }
        /**
         * Render Options for pdf settings - Delivery note
         * 
         * @access public
         * @return void
         */
        public static function render_menu_pdf_settings_delivery_note()
        {
        }
        /**
         * Render Options for e_mail
         * 
         * @access public
         * @return void
         */
        public static function render_menu_email_settings()
        {
        }
        /**
         * Render Options for test_pdf
         * 
         * @access public
         * @return void
         */
        public static function render_menu_test_pdf()
        {
        }
        /**
         * Render Options for my_account_page
         * 
         * @access public
         * @return void
         */
        public static function render_menu_my_account_page()
        {
        }
        /**
         * Output type wcreapdf_textarea
         *
         * @since 0.0.1
         * @static
         * @access public
         * @hook woocommerce_admin_field_wcreapdf_textarea
         * @return void
         */
        public static function output_textarea($value)
        {
        }
        /**
         * Save type wcreapdf_textarea
         *
         * @since 1.0.6
         * @static
         * @access public
         * @hook woocommerce_admin_settings_sanitize_option
         * @return void
         */
        public static function save_wcreapdf_textarea($value, $option, $raw_value)
        {
        }
        /**
         * Validation before saving
         *
         * @since 0.0.1
         * @access public
         * @return void
         */
        public static function save($value, $option, $raw_value)
        {
        }
    }
    /**
     * When plugin is activated
     *
     * @class WCREAPDF_Backend_Activation
     * @version 1.0
     * @category	Class
     */
    class WCREAPDF_Backend_Activation
    {
        /**
         * when activated
         *
         * @since 0.0.1
         * @access public
         * @static
         * @return void
         */
        public static function activation()
        {
        }
        /**
         * create cache folders for pdfs and images
         *
         * @since 0.0.1
         * @access public
         * @static
         * @return void
         */
        public static function create_temp_directories()
        {
        }
    }
    /**
     * main class for plugin
     *
     * @class 		Woocommerce_Return_Delivery_Pdf
     * @version		1.0
     * @category	Class
     */
    class Woocommerce_Return_Delivery_Pdf
    {
        /**
         * singleton, almost every method is static
         * @var object
         */
        static $instance = \NULL;
        /**
         * @var string
         */
        public static $plugin_filename = __FILE__;
        /**
         * singleton getInstance
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook plugins_loaded
         * @return class Woocommerce_Return_Delivery_Pdf
         */
        public static function get_instance()
        {
        }
        /**
         * autoload classes on demand
         *
         * @since 0.0.1
         * @access public
         * @arguments string $class (class name)
         * @return void
         */
        public function autoload($class)
        {
        }
        /**
         * enqueue scripts and styles to enable media uploader for image upload on the settings page
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook admin_enqueue_scripts
         * @return void
         */
        public static function media_uploader_scripts()
        {
        }
        /**
         * enqueue css file for download button design on shop order page
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook admin_enqueue_scripts
         * @return void
         */
        public static function admin_styles()
        {
        }
        /**
         * plugin activation
         *
         * @since 0.0.1
         * @access public
         * @static
         * @hook register_activation_hook
         * @return void
         */
        public static function activate()
        {
        }
        /**
         * plugin deactivation
         *
         * @since 1.0.0.9
         * @access public
         * @static
         * @hook register_deactivation_hook
         * @return void
         */
        public static function deactivate()
        {
        }
    }
    class GM_Protected_Shops_Api
    {
        static $api_url_locale = 'de';
        static $api_url_format = 'json';
        /**
         * Constructor
         */
        function __construct()
        {
        }
        /**
         * Checks client_id, client_secred, client_shohp to be entered by user
         * Checks bearer and try to create a new one
         *
         * @throws Exception
         * @return bool
         */
        public function can_use_api()
        {
        }
        /**
         * Get Build URL for js in ps library
         *
         * @return String
         */
        public function get_build_url()
        {
        }
        /**
         * Get Save URL for js in ps library
         *
         * @return String
         */
        public function get_save_url()
        {
        }
        /**
         * Get template path (url) for js in ps library
         *
         * @return String
         */
        public function get_template_path()
        {
        }
        /**
         * Get translation  path (url) for js in ps library
         *
         * @return String
         */
        public function get_translation_path()
        {
        }
        /**
         * Get questionary as echo output for ajax, used in ps js library
         *
         * @access public
         * @throws Exception
         * @return void
         **/
        public function get_questionary($output = \true)
        {
        }
        /**
         * Save questionary, used in ps js library
         *
         * @access public
         * @return void
         **/
        public function save_questionary()
        {
        }
        /**
         * Get all available documents
         *
         * @access public
         * @throws Exception
         * @return Array
         **/
        public function get_documents()
        {
        }
        /**
         * Get content of a specific document
         *
         * @access public
         * @param String $type
         * @return String
         **/
        public function get_document($type)
        {
        }
        /**
         * Save documents on server, do override
         *
         * @access public
         * @param String $type
         * @param String content_format
         * @return void
         **/
        public function save_document_on_server($type, $content_format)
        {
        }
        /**
         * Checks if docx and pdf exists on server
         *
         * @access public
         * @param String $name
         * @param String type
         * @return Boolean
         **/
        public function check_document_on_server($name, $content_format)
        {
        }
        /**
         * Checks if docx and pdf exists on server, if not: create them
         *
         * @access public
         * @param String $name
         * @param String type
         * @return void
         **/
        public function check_files_and_maybe_create($name, $type)
        {
        }
        /**
         * Get file url
         *
         * @access public
         * @param String $name
         * @param String content_format
         * @return String
         **/
        public function get_file_url($name, $content_format)
        {
        }
        /**
         * Get upload path
         *
         * @access public
         * @return String
         **/
        public function get_upload_path()
        {
        }
        /**
         * Get content of a specific document to be downloaded (pdf and doxc documents)
         *
         * @access public
         * @param String $type
         * @param String content_format
         * @return Array
         **/
        public function download_document($type, $content_format)
        {
        }
    }
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInit741b778ae69e41b9f121ff1e2ac8f6d0
    {
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInit741b778ae69e41b9f121ff1e2ac8f6d0
    {
        public static $prefixLengthsPsr4 = array('S' => array('SepaQr\\' => 7));
        public static $prefixDirsPsr4 = array('SepaQr\\' => array(0 => __DIR__ . '/..' . '/smhg/sepa-qr-data/src'));
        public static $classMap = array('Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace SepaQr {
    class Data
    {
        const UTF_8 = 1;
        const ISO8859_1 = 2;
        const ISO8859_2 = 3;
        const ISO8859_4 = 4;
        const ISO8859_5 = 5;
        const ISO8859_7 = 6;
        const ISO8859_10 = 7;
        const ISO8859_15 = 8;
        public static function formatMoney($currency = 'EUR', $value = 0)
        {
        }
        public static function create()
        {
        }
        public function setServiceTag(string $serviceTag = 'BCD')
        {
        }
        public function setVersion(int $version = 2)
        {
        }
        public function setCharacterSet(int $characterSet = self::UTF_8)
        {
        }
        public function setIdentification($identification = 'SCT')
        {
        }
        public function setBic($bic)
        {
        }
        public function setName($name)
        {
        }
        public function setIban($iban)
        {
        }
        public function setCurrency($currency)
        {
        }
        public function setAmount($amount)
        {
        }
        public function setPurpose($purpose)
        {
        }
        public function setRemittanceReference($remittanceReference)
        {
        }
        public function setRemittanceText($remittanceText)
        {
        }
        public function setInformation($information)
        {
        }
        public function __toString() : string
        {
        }
    }
    class Exception extends \Exception
    {
    }
}
namespace AbcAeffchen\Sephpa {
    /**
     * Base class for both credit transfer and direct debit
     */
    class SephpaMultiFile
    {
        /**
         * @param string   $initgPty
         * @param string   $msgId
         * @param int      $version Use SephpCreditTransfer::SEPA_PAIN_* constants
         * @param string[] $transferInfo
         * @param bool     $checkAndSanitize
         * @return SephpaCreditTransfer
         * @throws SephpaInputException
         */
        public function &addCreditTransferFile($initgPty, $msgId, $version, array $transferInfo, $checkAndSanitize = true)
        {
        }
        /**
         * @param string   $initgPty
         * @param string   $msgId
         * @param int      $version Use SephpDirectDebit::SEPA_PAIN_* constants
         * @param string[] $debitInfo
         * @param bool     $checkAndSanitize
         * @return SephpaDirectDebit
         * @throws SephpaInputException
         */
        public function &addDirectDebitFile($initgPty, $msgId, $version, array $debitInfo, $checkAndSanitize = true)
        {
        }
        /**
         * @param array $options @see Sephpa::generateOutput() for details.
         * @throws SephpaInputException
         * @throws \Mpdf\MpdfException
         */
        public function download(array $options = [])
        {
        }
        /**
         * @param string $path
         * @param array  $options @see Sephpa::generateOutput() for details.
         * @throws SephpaInputException
         * @throws \Mpdf\MpdfException
         */
        public function store($path, array $options = [])
        {
        }
    }
}
namespace AbcAeffchen\Sephpa\PaymentCollections {
    /**
     * Abstract class for credit transfer and debit
     */
    interface SepaPaymentCollection
    {
        /**
         * @param mixed[] $info         The input data defining the collection
         * @param bool    $check        All inputs will be checked and sanitized before creating
         *                              the collection. If you check the inputs yourself you can
         *                              set this to false.
         * @param int     $flags        The flags used for sanitizing
         */
        public function __construct(array $info, $check = true, $flags = 0);
        /**
         * Adds a new payment to the collection.
         * @see SepaCreditTransfer00100103::addPayment()
         * @see SepaCreditTransfer00100203::addPayment()
         * @see SepaCreditTransfer00100303::addPayment()
         * @see SepaDirectDebit00800102::addPayment()
         * @see SepaDirectDebit00800102Austrian003::addPayment()
         * @see SepaDirectDebit00800202::addPayment()
         * @see SepaDirectDebit00800302::addPayment()
         * @param mixed[] $paymentInfo
         * @return boolean
         */
        public function addPayment(array $paymentInfo);
        /**
         * Calculates the sum of all payments in this collection
         * @return float
         */
        public function getCtrlSum();
        /**
         * Counts the payments in this collection
         * @return int
         */
        public function getNumberOfTransactions();
        /**
         * Generates the xml for the collection using generatePaymentXml
         * @param \SimpleXMLElement $pmtInf The PmtInf-Child of the xml object
         * @return void
         */
        public function generateCollectionXml(\SimpleXMLElement $pmtInf);
        /**
         * Generate an array containing all data relevant to the file routing slip and control list.
         *
         * @param string $dateFormat @see date() for details.
         * @return string[]
         */
        public function getCollectionData($dateFormat);
        /**
         * Generate an array of arrays containing all transaction data relevant to the control list.
         *
         * @param string[] $moneyFormat Array containing the keys `currency`, `dec_point` and `thousands_sep`.
         * @return string[][]
         */
        public function getTransactionData(array $moneyFormat);
    }
    abstract class SepaDirectDebitCollection implements \AbcAeffchen\Sephpa\PaymentCollections\SepaPaymentCollection
    {
        /**
         * @var string CCY Default currency
         */
        const CCY = 'EUR';
        /**
         * @type bool $sanitizeFlags
         */
        protected $checkAndSanitize = true;
        /**
         * @type int $sanitizeFlags
         */
        protected $sanitizeFlags = 0;
        /**
         * @var mixed[] $payments Saves all payments
         */
        protected $payments = [];
        /**
         * @var mixed[] $debitInfo Saves the transfer information for the collection.
         */
        protected $debitInfo;
        /**
         * @type string $dbtrIban The IBAN of the creditor
         */
        protected $cdtrIban;
        protected $today;
        /**
         * @param mixed[] $info         The input data defining the collection
         * @param bool    $check        All inputs will be checked and sanitized before creating
         *                              the collection. If you check the inputs yourself you can
         *                              set this to false.
         * @param int     $flags        The flags used for sanitizing
         */
        public abstract function __construct(array $info, $check = true, $flags = 0);
        /**
         * Adds a new payment to the collection.
         *
         * @see SepaDirectDebit00800102::addPayment()
         * @see SepaDirectDebit00800102Austrian003::addPayment()
         * @see SepaDirectDebit00800202::addPayment()
         * @see SepaDirectDebit00800302::addPayment()
         * @param mixed[] $paymentInfo
         * @return boolean
         */
        public abstract function addPayment(array $paymentInfo);
        /**
         * Calculates the sum of all payments in this collection
         *
         * @return float
         */
        public function getCtrlSum()
        {
        }
        /**
         * Counts the payments in this collection
         * @return int
         */
        public function getNumberOfTransactions()
        {
        }
        /**
         * Generates the xml for the collection using generatePaymentXml
         *
         * @param \SimpleXMLElement $pmtInf The PmtInf-Child of the xml object
         * @return void
         */
        public abstract function generateCollectionXml(\SimpleXMLElement $pmtInf);
        /**
         * Generate an array of arrays containing all data relevant to the file routing slip and control list.
         *
         * @param string $dateFormat @see date() for details.
         * @return string[]
         */
        public function getCollectionData($dateFormat)
        {
        }
        /**
         * Generate an array of arrays containing all transaction data relevant to the control list.
         *
         * @param string[] $moneyFormat Array containing the keys `currency`, `dec_point` and `thousands_sep`.
         * @return string[][]
         */
        public function getTransactionData(array $moneyFormat)
        {
        }
    }
    /**
     * Manages direct debits
     */
    class SepaDirectDebit00800302 extends \AbcAeffchen\Sephpa\PaymentCollections\SepaDirectDebitCollection
    {
        /**
         * @type int VERSION The SEPA file version of this collection
         */
        const VERSION = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_008_003_02;
        /**
         * @param mixed[] $debitInfo        Needed keys: 'pmtInfId', 'lclInstrm', 'seqTp', 'cdtr',
         *                                  'iban', 'bic', 'ci'; optional keys: 'ccy', 'btchBookg',
         *                                  'ctgyPurp', 'ultmtCdtr', 'reqdColltnDt'
         * @param bool    $checkAndSanitize All inputs will be checked and sanitized before creating
         *                                  the collection. If you check the inputs yourself you can
         *                                  set this to false.
         * @param int     $flags            The flags used for sanitizing
         * @throws SephpaInputException
         */
        public function __construct(array $debitInfo, $checkAndSanitize = true, $flags = 0)
        {
        }
        /**
         * calculates the sum of all payments in this collection
         *
         * @param mixed[] $paymentInfo needed keys: 'pmtId', 'instdAmt', 'mndtId', 'dtOfSgntr', 'bic',
         *                             'dbtr', 'iban';
         *                             optional keys: 'amdmntInd', 'orgnlMndtId', 'orgnlCdtrSchmeId_nm',
         *                             'orgnlCdtrSchmeId_id', 'orgnlDbtrAcct_iban', 'orgnlDbtrAgt',
         *                             'elctrncSgntr', 'ultmtDbtr', 'purp', 'rmtInf'
         * @throws SephpaInputException
         * @return void
         */
        public function addPayment(array $paymentInfo)
        {
        }
        /**
         * Generates the xml for the collection using generatePaymentXml
         *
         * @param \SimpleXMLElement $pmtInf The PmtInf-Child of the xml object
         * @return void
         */
        public function generateCollectionXml(\SimpleXMLElement $pmtInf)
        {
        }
    }
    abstract class SepaCreditTransferCollection implements \AbcAeffchen\Sephpa\PaymentCollections\SepaPaymentCollection
    {
        /**
         * @var string CCY Default currency
         */
        const CCY = 'EUR';
        /**
         * @type bool $sanitizeFlags
         */
        protected $checkAndSanitize = true;
        /**
         * @type int $sanitizeFlags
         */
        protected $sanitizeFlags = 0;
        /**
         * @var mixed[] $payments Saves all payments
         */
        protected $payments = [];
        /**
         * @var mixed[] $transferInfo Saves the transfer information for the collection.
         */
        protected $transferInfo;
        /**
         * @type string $dbtrIban The IBAN of the debtor
         */
        protected $dbtrIban;
        protected $today;
        /**
         * @param mixed[] $info         The input data defining the collection
         * @param bool    $check        All inputs will be checked and sanitized before creating
         *                              the collection. If you check the inputs yourself you can
         *                              set this to false.
         * @param int     $flags        The flags used for sanitizing
         */
        public abstract function __construct(array $info, $check = true, $flags = 0);
        /**
         * Adds a new payment to the collection.
         *
         * @see SepaCreditTransfer00100103::addPayment()
         * @see SepaCreditTransfer00100203::addPayment()
         * @see SepaCreditTransfer00100303::addPayment()
         * @param mixed[] $paymentInfo
         * @return boolean
         */
        public abstract function addPayment(array $paymentInfo);
        /**
         * Calculates the sum of all payments in this collection
         *
         * @return float
         */
        public function getCtrlSum()
        {
        }
        /**
         * Counts the payments in this collection
         *
         * @return int
         */
        public function getNumberOfTransactions()
        {
        }
        /**
         * Generates the xml for the collection using generatePaymentXml
         *
         * @param \SimpleXMLElement $pmtInf The PmtInf-Child of the xml object
         * @return void
         */
        public abstract function generateCollectionXml(\SimpleXMLElement $pmtInf);
        /**
         * Generate an array of arrays containing all data relevant to the file routing slip and control list.
         *
         * @param string $dateFormat @see date() for details.
         * @return string[]
         */
        public function getCollectionData($dateFormat)
        {
        }
        /**
         * Generate an array of arrays containing all transaction data relevant to the control list.
         *
         * @param string[] $moneyFormat Array containing the keys `currency`, `dec_point` and `thousands_sep`.
         * @return \string[][]
         */
        public function getTransactionData(array $moneyFormat)
        {
        }
    }
    /**
     * Manages credit transfers
     */
    class SepaCreditTransfer00100303 extends \AbcAeffchen\Sephpa\PaymentCollections\SepaCreditTransferCollection
    {
        /**
         * @type int VERSION The SEPA file version of this collection
         */
        const VERSION = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_001_003_03;
        /**
         * @param mixed[] $transferInfo needed keys: 'pmtInfId', 'dbtr', 'iban';
         *                              optional keys: 'ccy', 'btchBookg', 'ctgyPurp', 'reqdExctnDt', 'ultmtDebtr', 'bic'
         * @param bool $checkAndSanitize           All inputs will be checked and sanitized before creating the
         *                              collection. If you check the inputs yourself you can set this
         *                              to false.
         * @param int     $flags        The flags used for sanitizing
         * @throws SephpaInputException
         */
        public function __construct(array $transferInfo, $checkAndSanitize = true, $flags = 0)
        {
        }
        /**
         * Adds a payment to the payment collection
         *
         * @param mixed[] $paymentInfo needed keys: 'pmtId', 'instdAmt', 'iban', 'bic', 'cdtr';
         *                             optional keys: 'ultmtCdrt', 'purp', 'rmtInf'
         * @throws SephpaInputException
         * @return void
         */
        public function addPayment(array $paymentInfo)
        {
        }
        /**
         * Generates the xml for the collection using generatePaymentXml
         * @param \SimpleXMLElement $pmtInf The PmtInf-Child of the xml object
         * @return void
         */
        public function generateCollectionXml(\SimpleXMLElement $pmtInf)
        {
        }
    }
    /**
     * Manages credit transfers
     */
    class SepaCreditTransfer00100203 extends \AbcAeffchen\Sephpa\PaymentCollections\SepaCreditTransferCollection
    {
        /**
         * @type int VERSION The SEPA file version of this collection
         */
        const VERSION = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_001_002_03;
        /**
         * @param mixed[] $transferInfo needed keys: 'pmtInfId', 'dbtr', 'iban', 'bic';
         *                              optional keys: 'ccy', 'btchBookg', 'ctgyPurp',
         *                              'reqdExctnDt', 'ultmtDebtr'
         * @param bool    $checkAndSanitize        All inputs will be checked and sanitized before creating
         *                              the collection. If you check the inputs yourself you can
         *                              set this to false.
         * @param int     $flags        The flags used for sanitizing
         * @throws SephpaInputException
         */
        public function __construct(array $transferInfo, $checkAndSanitize = true, $flags = 0)
        {
        }
        /**
         * Adds a payment to the payment collection
         *
         * @param mixed[] $paymentInfo needed keys: 'pmtId', 'instdAmt', 'iban', 'bic', 'cdtr';
         *                             optional keys: 'ultmtCdrt', 'purp', 'rmtInf'
         * @throws SephpaInputException
         * @return void
         */
        public function addPayment(array $paymentInfo)
        {
        }
        /**
         * Generates the xml for the collection using generatePaymentXml
         *
         * @param \SimpleXMLElement $pmtInf The PmtInf-Child of the xml object
         * @return void
         */
        public function generateCollectionXml(\SimpleXMLElement $pmtInf)
        {
        }
    }
    /**
     * Manages credit transfers
     */
    class SepaCreditTransfer00100103 extends \AbcAeffchen\Sephpa\PaymentCollections\SepaCreditTransferCollection
    {
        /**
         * @type int VERSION The SEPA file version of this collection
         */
        const VERSION = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_001_001_03;
        /**
         * @param mixed[] $transferInfo needed keys: 'pmtInfId', 'dbtr', 'iban';
         *                              optional keys: 'ccy', 'btchBookg', 'ctgyPurp', 'reqdExctnDt', 'ultmtDebtr', 'bic'
         * @param bool $checkAndSanitize           All inputs will be checked and sanitized before creating the
         *                              collection. If you check the inputs yourself you can set this
         *                              to false.
         * @param int     $flags        The flags used for sanitizing
         * @throws SephpaInputException
         */
        public function __construct(array $transferInfo, $checkAndSanitize = true, $flags = 0)
        {
        }
        /**
         * Adds a payment to the payment collection
         *
         * @param mixed[] $paymentInfo needed keys: 'pmtId', 'instdAmt', 'iban', 'bic', 'cdtr';
         *                             optional keys: 'ultmtCdrt', 'purp', 'rmtInf'
         * @throws SephpaInputException
         * @return void
         */
        public function addPayment(array $paymentInfo)
        {
        }
        /**
         * Generates the xml for the collection using generatePaymentXml
         * @param \SimpleXMLElement $pmtInf The PmtInf-Child of the xml object
         * @return void
         */
        public function generateCollectionXml(\SimpleXMLElement $pmtInf)
        {
        }
    }
    /**
     * Manages direct debits
     */
    class SepaDirectDebit00800202 extends \AbcAeffchen\Sephpa\PaymentCollections\SepaDirectDebitCollection
    {
        /**
         * @type int VERSION The SEPA file version of this collection
         */
        const VERSION = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_008_002_02;
        /**
         * @param mixed[] $debitInfo        Needed keys: 'pmtInfId', 'lclInstrm', 'seqTp', 'cdtr',
         *                                  'iban', 'bic', 'ci'; optional keys: 'ccy', 'btchBookg',
         *                                  'ctgyPurp', 'ultmtCdtr', 'reqdColltnDt'
         * @param bool    $checkAndSanitize All inputs will be checked and sanitized before creating
         *                                  the collection. If you check the inputs yourself you can
         *                                  set this to false.
         * @param int     $flags            The flags used for sanitizing
         * @throws SephpaInputException
         */
        public function __construct(array $debitInfo, $checkAndSanitize = true, $flags = 0)
        {
        }
        /**
         * calculates the sum of all payments in this collection
         *
         * @param mixed[] $paymentInfo needed keys: 'pmtId', 'instdAmt', 'mndtId', 'dtOfSgntr', 'bic',
         *                             'dbtr', 'iban';
         *                             optional keys: 'amdmntInd', 'orgnlMndtId', 'orgnlCdtrSchmeId_nm',
         *                             'orgnlCdtrSchmeId_id', 'orgnlDbtrAcct_iban', 'orgnlDbtrAgt',
         *                             'elctrncSgntr', 'ultmtDbtr', 'purp', 'rmtInf'
         * @throws SephpaInputException
         * @return void
         */
        public function addPayment(array $paymentInfo)
        {
        }
        /**
         * Generates the xml for the collection using generatePaymentXml
         *
         * @param \SimpleXMLElement $pmtInf The PmtInf-Child of the xml object
         * @return void
         */
        public function generateCollectionXml(\SimpleXMLElement $pmtInf)
        {
        }
    }
    /**
     * Manages direct debits
     */
    class SepaDirectDebit00800102 extends \AbcAeffchen\Sephpa\PaymentCollections\SepaDirectDebitCollection
    {
        /**
         * @type int VERSION The SEPA file version of this collection
         */
        const VERSION = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_008_001_02;
        /**
         * @param mixed[] $debitInfo        Needed keys: 'pmtInfId', 'lclInstrm', 'seqTp', 'cdtr',
         *                                  'iban', 'bic', 'ci'; optional keys: 'ccy', 'btchBookg',
         *                                  'ctgyPurp', 'ultmtCdtr', 'reqdColltnDt'
         * @param bool    $checkAndSanitize All inputs will be checked and sanitized before creating
         *                                  the collection. If you check the inputs yourself you can
         *                                  set this to false.
         * @param int     $flags            The flags used for sanitizing
         * @throws SephpaInputException
         */
        public function __construct(array $debitInfo, $checkAndSanitize = true, $flags = 0)
        {
        }
        /**
         * calculates the sum of all payments in this collection
         *
         * @param mixed[] $paymentInfo needed keys: 'pmtId', 'instdAmt', 'mndtId', 'dtOfSgntr', 'bic',
         *                             'dbtr', 'iban';
         *                             optional keys: 'amdmntInd', 'orgnlMndtId', 'orgnlCdtrSchmeId_nm',
         *                             'orgnlCdtrSchmeId_id', 'orgnlDbtrAcct_iban', 'orgnlDbtrAgt',
         *                             'elctrncSgntr', 'ultmtDbtr', 'purp', 'rmtInf'
         * @throws SephpaInputException
         * @return void
         */
        public function addPayment(array $paymentInfo)
        {
        }
        /**
         * Generates the xml for the collection using generatePaymentXml
         *
         * @param \SimpleXMLElement $pmtInf The PmtInf-Child of the xml object
         * @return void
         */
        public function generateCollectionXml(\SimpleXMLElement $pmtInf)
        {
        }
    }
    class SepaDirectDebit00800102Austrian003 extends \AbcAeffchen\Sephpa\PaymentCollections\SepaDirectDebit00800102
    {
        /**
         * @type int VERSION The SEPA file version of this collection
         */
        const VERSION = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_008_001_02_AUSTRIAN_003;
        const NO_BIC_PROVIDED = 'NOTAVAIL';
        public function __construct(array $debitInfo, $checkAndSanitize = true, $flags = 0)
        {
        }
        public function addPayment(array $paymentInfo)
        {
        }
    }
}
namespace AbcAeffchen\Sephpa {
    /**
     * Base class for both credit transfer and direct debit
     */
    abstract class Sephpa
    {
        /**
         * @type string $xmlInitString stores the initialization string of the xml file
         */
        protected $xmlInitString;
        /**
         * @type int $version Saves the type of the object SEPA_PAIN_*
         */
        protected $version;
        /**
         * @type string $paymentType Either 'CstmrCdtTrfInitn' or 'CstmrDrctDbtInitn'
         */
        protected $paymentType;
        /**
         * @type string $initgPty Name of the party that initiates the transfer
         */
        protected $initgPty;
        /**
         * @type string $msgId identify the Sepa file (unique id for all files)
         */
        protected $msgId;
        /**
         * @type string $creationDateTime The date time string of the creation date.
         */
        protected $creationDateTime;
        /**
         * @type PaymentCollections\SepaPaymentCollection $paymentCollection Stores all payment objects
         */
        protected $paymentCollection;
        /**
         * @type bool $checkAndSanitize
         */
        protected $checkAndSanitize;
        /**
         * @type int $sanitizeFlags
         */
        protected $sanitizeFlags = 0;
        /**
         * Creates a SepaXmlFile object and sets the head data.
         *
         * @param string   $initgPty The name of the initiating party (max. 70 characters)
         * @param string   $msgId    The unique id of the file
         * @param int      $type     Sets the type and version of the SEPA file. Use the
         *                           SEPA_PAIN_* constants
         * @param string[] $orgId    It is not recommended to use this at all. If you have to use
         *                           this, the standard only allows one of the two. If you provide
         *                           both, options, both will be included in the SEPA file. So
         *                           only use this if you know what you do. Available keys:
         *                           - `id`: An Identifier of the organisation.
         *                           - `bob`: A BIC or BEI that identifies the organisation.
         * @param bool     $checkAndSanitize
         * @throws SephpaInputException
         */
        public function __construct($initgPty, $msgId, $type, array $orgId = [], $checkAndSanitize = true)
        {
        }
        /**
         * This flags will only be used if checkAndSanitize is set to true.
         * @param int $flags Use the SepaUtilities Flags
         */
        public function setSanitizeFlags($flags)
        {
        }
        /**
         * Adds a new payment to the SEPA file.
         *
         * @param mixed[] $information An array with information about the payment.
         * @throws SephpaInputException
         */
        protected abstract function addPayment(array $information);
        /**
         * Generates the XML file from the given data. All empty collections are skipped.
         *
         * @throws SephpaInputException
         * @return string Just the xml code of the file
         */
        protected function generateXml()
        {
        }
        /**
         * This function sets the default values for the option fields if not set already and checks the
         * resulting dependencies if any. If a dependency is missing a SephpaInputException is thrown.
         *
         * @param array $options @see generateOutput() for details.
         * @return bool[] The $options array with all three fields set.
         * @throws SephpaInputException
         */
        protected function sanitizeOutputOptions(array $options)
        {
        }
        /**
         * @param array $options       possible fields:
         *                             - (bool) `addFileRoutingSlip`: If true, a file routing slip will be
         *                             added. Default ist false.
         *                             - (string) `FRSTemplate`: The path to the template for the file routing
         *                             slip. Default is the bundled file routing slip (german version).
         *                             - (bool) `addControlList`: If true, a control list will be added.
         *                             Default is false.
         *                             - (string) `CLTemplate`: The path to the template for this control
         *                             list. Default is the bundled control list template for either credit
         *                             transfer of direct debit (german version).
         *                             - (string[]) `moneyFormat`: Used to format amounts of money using
         *                             sprintf() and number_format(). The array needs to have the following keys:
         *                             `dec_point` (default is ','), `thousands_sep` (default is '.') and
         *                             `currency` (default is '%s €')
         *                             - (string) `dateFormat`: The format a date is represented in the PDF
         *                             files. Default is 'd.m.Y'. See date() documentation for details.
         * @param bool  $zipToOneFile  If true, multiple files get zipped to one file.
         * @return string[]|string[][] Returns a file as a pair [name, data], if $zipToOneFile is true,
         *                             else it is an array of such pairs.
         * @throws SephpaInputException
         * @throws \Mpdf\MpdfException
         */
        public function generateOutput(array $options, $zipToOneFile = true)
        {
        }
        /**
         * Generates a File Routing Slip and returns it as [name, data] array. Requires mPDF.
         *
         * @param array $options @see generateOutput() for details.
         * @return array A File Routing Slip and returns it as [name, data] array.
         * @throws \Mpdf\MpdfException
         */
        protected abstract function getFileRoutingSlip(array $options);
        /**
         * Generates a Control List and returns it as [name, data] array. Requires mPDF.
         *
         * @param array $options @see generateOutput() for details.
         * @return array A Control List and returns it as [name, data] array.
         * @throws \Mpdf\MpdfException
         */
        protected abstract function getControlList(array $options);
        /**
         * Returns the name prefix of the generated files.
         * @return string The name prefix of the generated files.
         */
        protected abstract function getFileName();
        /**
         * Generates the SEPA file and starts a download using the header 'Content-Disposition: attachment;'
         * The file will not stored on the server.
         *
         * @param array $options @see generateOutput() for details.
         * @throws SephpaInputException
         * @throws \Mpdf\MpdfException
         */
        public function download($options = [])
        {
        }
        /**
         * Generates the SEPA file and stores it on the server.
         *
         * @param string $path    The path where the file gets stored without trailing DIRECTORY_SEPARATOR.
         * @param array  $options @see generateOutput() for details.
         * @throws SephpaInputException
         * @throws \Mpdf\MpdfException
         */
        public function store($path, $options = [])
        {
        }
    }
    /**
     * Base class for both credit transfer and direct debit
     */
    class SephpaDirectDebit extends \AbcAeffchen\Sephpa\Sephpa
    {
        // direct debits versions
        const SEPA_PAIN_008_001_02 = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_008_001_02;
        const SEPA_PAIN_008_001_02_AUSTRIAN_003 = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_008_001_02_AUSTRIAN_003;
        const SEPA_PAIN_008_002_02 = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_008_002_02;
        const SEPA_PAIN_008_003_02 = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_008_003_02;
        /**
         * @type string INITIAL_STRING_DD Initial sting for direct debit pain.008.001.02
         */
        const INITIAL_STRING_PAIN_008_001_02 = '<?xml version="1.0" encoding="UTF-8"?><Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.008.001.02" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:iso:std:iso:20022:tech:xsd:pain.008.001.02 pain.008.001.02.xsd"></Document>';
        /**
         * @type string INITIAL_STRING_DD Initial sting for direct debit pain.008.001.02.austrian.003
         */
        const INITIAL_STRING_PAIN_008_001_02_AUSTRIAN_003 = '<?xml version="1.0" encoding="UTF-8"?><Document xmlns="ISO:pain.008.001.02:APC:STUZZA:payments:003" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"></Document>';
        /**
         * @type string INITIAL_STRING_DD Initial sting for direct debit pain.008.002.02
         */
        const INITIAL_STRING_PAIN_008_002_02 = '<?xml version="1.0" encoding="UTF-8"?><Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.008.002.02" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:iso:std:iso:20022:tech:xsd:pain.008.002.02 pain.008.002.02.xsd"></Document>';
        /**
         * @type string INITIAL_STRING_DD Initial sting for direct debit pain.008.003.02
         */
        const INITIAL_STRING_PAIN_008_003_02 = '<?xml version="1.0" encoding="UTF-8"?><Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.008.003.02" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:iso:std:iso:20022:tech:xsd:pain.008.003.02 pain.008.003.02.xsd"></Document>';
        /**
         * Creates a SepaXmlFile object and sets the head data
         *
         * @param string   $initgPty  The name of the initiating party (max. 70 characters)
         * @param string   $msgId     The unique id of the file
         * @param int      $version   Sets the type and version of the sepa file. Use the SEPA_PAIN_*
         *                            constants
         * @param array    $debitInfo Required keys: 'pmtInfId', 'lclInstrm', 'seqTp', 'reqdColltnDt', 'cdtr', 'iban', 'bic', 'ci';
         *                            optional keys: 'ccy', 'btchBookg', 'ctgyPurp', 'ultmtCdtr', 'reqdColltnDt'
         * @param string[] $orgId     It is not recommended to use this at all. If you have to use
         *                            this, the standard only allows one of the two. If you provide
         *                            both, options, both will be included in the SEPA file. So
         *                            only use this if you know what you do. Available keys:
         *                            - `id`: An Identifier of the organisation.
         *                            - `bob`: A BIC or BEI that identifies the organisation.
         * @param bool     $checkAndSanitize
         * @throws SephpaInputException
         */
        public function __construct($initgPty, $msgId, $version, array $debitInfo, array $orgId = [], $checkAndSanitize = true)
        {
        }
        /**
         * Adds a new collection of direct debits and sets main data
         *
         * @param array $paymentInfo @see \Sephpa\SepaDirectDebit*::addPayment() for details.
         * @throws SephpaInputException
         */
        public function addPayment(array $paymentInfo)
        {
        }
        /**
         * Generates a File Routing Slip and returns it as [name, data] array. Requires mPDF.
         *
         * @param array $options @see generateOutput() for details.
         * @return array A File Routing Slip and returns it as [name, data] array.
         * @throws \Mpdf\MpdfException
         */
        protected function getFileRoutingSlip(array $options)
        {
        }
        /**
         * Generates a Control List and returns it as [name, data] array. Requires mPDF.
         *
         * @param array $options @see generateOutput() for details.
         * @return array A Control List and returns it as [name, data] array.
         * @throws \Mpdf\MpdfException
         */
        protected function getControlList(array $options)
        {
        }
        /**
         * Returns the prefix of the names of the generated files.
         * @return string The prefix of the names of the generated files.
         */
        protected function getFileName()
        {
        }
    }
    /**
     * Class SephpaInputException thrown if an invalid input is detected
     */
    class SephpaInputException extends \Exception
    {
    }
    /**
     * Base class for both credit transfer and direct debit
     */
    class SephpaCreditTransfer extends \AbcAeffchen\Sephpa\Sephpa
    {
        // credit transfers versions
        const SEPA_PAIN_001_001_03 = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_001_001_03;
        const SEPA_PAIN_001_002_03 = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_001_002_03;
        const SEPA_PAIN_001_003_03 = \AbcAeffchen\SepaUtilities\SepaUtilities::SEPA_PAIN_001_003_03;
        /**
         * @type string INITIAL_STRING_CT Initial sting for credit transfer pain.001.001.03
         */
        const INITIAL_STRING_PAIN_001_001_03 = '<?xml version="1.0" encoding="UTF-8"?><Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.001.03" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:iso:std:iso:20022:tech:xsd:pain.001.001.03 pain.001.001.03.xsd"></Document>';
        /**
         * @type string INITIAL_STRING_CT Initial sting for credit transfer pain.001.002.03
         */
        const INITIAL_STRING_PAIN_001_002_03 = '<?xml version="1.0" encoding="UTF-8"?><Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.002.03" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:iso:std:iso:20022:tech:xsd:pain.001.002.03 pain.001.002.03.xsd"></Document>';
        /**
         * @type string INITIAL_STRING_CT Initial sting for credit transfer pain.001.003.03
         */
        const INITIAL_STRING_PAIN_001_003_03 = '<?xml version="1.0" encoding="UTF-8"?><Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.003.03" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:iso:std:iso:20022:tech:xsd:pain.001.003.03 pain.001.003.03.xsd"></Document>';
        /**
         * Creates a SepaXmlFile object and sets the head data
         *
         * @param string $initgPty      The name of the initiating party
         * @param string $msgId         The unique id of the file
         * @param int    $version       Sets the type and version of the sepa file. Use the SEPA_PAIN_*
         *                              constants
         * @param array  $transferInfo  Required keys: 'pmtInfId', 'dbtr', 'iban', ('bic' only pain.001.002.03
         *                              optional for all other versions);
         *                              optional keys: 'ccy', 'btchBookg', 'ctgyPurp', 'reqdExctnDt', 'ultmtDbtr'
         * @param string[] $orgId       It is not recommended to use this at all. If you have to use
         *                              this, the standard only allows one of the two. If you provide
         *                              both, options, both will be included in the SEPA file. So
         *                              only use this if you know what you do. Available keys:
         *                              - `id`: An Identifier of the organisation.
         *                              - `bob`: A BIC or BEI that identifies the organisation.
         * @param bool   $checkAndSanitize
         * @throws SephpaInputException
         */
        public function __construct($initgPty, $msgId, $version, array $transferInfo, array $orgId = [], $checkAndSanitize = true)
        {
        }
        /**
         * Adds a new payment to the SEPA file.
         *
         * @param array $paymentInfo @see \Sephpa\SepaCreditTransfer*::addPayment() for details.
         * @throws SephpaInputException
         */
        public function addPayment(array $paymentInfo)
        {
        }
        /**
         * Generates a File Routing Slip and returns it as [name, data] array. Requires mPDF.
         *
         * @param array $options @see generateOutput() for details.
         * @return array A File Routing Slip and returns it as [name, data] array.
         * @throws \Mpdf\MpdfException
         */
        protected function getFileRoutingSlip(array $options)
        {
        }
        /**
         * Generates a Control List and returns it as [name, data] array. Requires mPDF.
         *
         * @param array $options @see generateOutput() for details.
         * @return array A Control List and returns it as [name, data] array.
         * @throws \Mpdf\MpdfException
         */
        protected function getControlList(array $options)
        {
        }
        /**
         * Returns the prefix of the names of the generated files.
         * @return string The prefix of the names of the generated files.
         */
        protected function getFileName()
        {
        }
    }
}
namespace {
    class TestClass
    {
        public $testArray = [];
        /**
         * TestClass constructor.
         * This class is for testing the return method.
         */
        public function __construct()
        {
        }
        public function &getEnd()
        {
        }
    }
    class SephpaTest extends \PHPUnit\Framework\TestCase
    {
        public function testOrgId()
        {
        }
        public function testCreditTransfer00100203()
        {
        }
        public function testCreditTransfer00100303()
        {
        }
        public function testCreditTransfer00100103()
        {
        }
        public function testDirectDebit00800202()
        {
        }
        public function testDirectDebit00800302()
        {
        }
        public function testDirectDebit00800102()
        {
        }
        public function testDirectDebit00800102Austrian003()
        {
        }
        public function testEndReference()
        {
        }
    }
}
namespace kmukku\phpIso11649 {
    class phpIso11649
    {
        var $charTable = array("A" => 10, "B" => 11, "C" => 12, "D" => 13, "E" => 14, "F" => 15, "G" => 16, "H" => 17, "I" => 18, "J" => 19, "K" => 20, "L" => 21, "M" => 22, "N" => 23, "O" => 24, "P" => 25, "Q" => 26, "R" => 27, "S" => 28, "T" => 29, "U" => 30, "V" => 31, "W" => 32, "X" => 33, "Y" => 34, "Z" => 35);
        public function calculateRfChecksum($ref)
        {
        }
        public function generateRfReference($input, $chunksplit = true)
        {
        }
        public function validateRfReference($ref)
        {
        }
    }
}
namespace MyCLabs\Enum\PHPUnit {
    /**
     * Use this Comparator to get nice output when using PHPUnit assertEquals() with Enums.
     *
     * Add this to your PHPUnit bootstrap PHP file:
     *
     * \SebastianBergmann\Comparator\Factory::getInstance()->register(new \MyCLabs\Enum\PHPUnit\Comparator());
     */
    final class Comparator extends \SebastianBergmann\Comparator\Comparator
    {
        public function accepts($expected, $actual)
        {
        }
        /**
         * @param Enum $expected
         * @param Enum|null $actual
         *
         * @return void
         */
        public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = false, $ignoreCase = false)
        {
        }
    }
}
namespace MyCLabs\Enum {
    /**
     * Base Enum class
     *
     * Create an enum by implementing this class and adding class constants.
     *
     * @author Matthieu Napoli <matthieu@mnapoli.fr>
     * @author Daniel Costa <danielcosta@gmail.com>
     * @author Mirosław Filip <mirfilip@gmail.com>
     *
     * @psalm-template T
     * @psalm-immutable
     * @psalm-consistent-constructor
     */
    abstract class Enum implements \JsonSerializable
    {
        /**
         * Enum value
         *
         * @var mixed
         * @psalm-var T
         */
        protected $value;
        /**
         * Store existing constants in a static cache per object.
         *
         *
         * @var array
         * @psalm-var array<class-string, array<string, mixed>>
         */
        protected static $cache = [];
        /**
         * Cache of instances of the Enum class
         *
         * @var array
         * @psalm-var array<class-string, array<string, static>>
         */
        protected static $instances = [];
        /**
         * Creates a new value of some type
         *
         * @psalm-pure
         * @param mixed $value
         *
         * @psalm-param T $value
         * @throws \UnexpectedValueException if incompatible type is given.
         */
        public function __construct($value)
        {
        }
        /**
         * This method exists only for the compatibility reason when deserializing a previously serialized version
         * that didn't had the key property
         */
        public function __wakeup()
        {
        }
        /**
         * @param mixed $value
         * @return static
         */
        public static function from($value) : self
        {
        }
        /**
         * @psalm-pure
         * @return mixed
         * @psalm-return T
         */
        public function getValue()
        {
        }
        /**
         * Returns the enum key (i.e. the constant name).
         *
         * @psalm-pure
         * @return string
         */
        public function getKey()
        {
        }
        /**
         * @psalm-pure
         * @psalm-suppress InvalidCast
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Determines if Enum should be considered equal with the variable passed as a parameter.
         * Returns false if an argument is an object of different class or not an object.
         *
         * This method is final, for more information read https://github.com/myclabs/php-enum/issues/4
         *
         * @psalm-pure
         * @psalm-param mixed $variable
         * @return bool
         */
        public final function equals($variable = null) : bool
        {
        }
        /**
         * Returns the names (keys) of all constants in the Enum class
         *
         * @psalm-pure
         * @psalm-return list<string>
         * @return array
         */
        public static function keys()
        {
        }
        /**
         * Returns instances of the Enum class of all Enum constants
         *
         * @psalm-pure
         * @psalm-return array<string, static>
         * @return static[] Constant name in key, Enum instance in value
         */
        public static function values()
        {
        }
        /**
         * Returns all possible values as an array
         *
         * @psalm-pure
         * @psalm-suppress ImpureStaticProperty
         *
         * @psalm-return array<string, mixed>
         * @return array Constant name in key, constant value in value
         */
        public static function toArray()
        {
        }
        /**
         * Check if is valid enum value
         *
         * @param $value
         * @psalm-param mixed $value
         * @psalm-pure
         * @psalm-assert-if-true T $value
         * @return bool
         */
        public static function isValid($value)
        {
        }
        /**
         * Asserts valid enum value
         *
         * @psalm-pure
         * @psalm-assert T $value
         * @param mixed $value
         */
        public static function assertValidValue($value) : void
        {
        }
        /**
         * Check if is valid enum key
         *
         * @param $key
         * @psalm-param string $key
         * @psalm-pure
         * @return bool
         */
        public static function isValidKey($key)
        {
        }
        /**
         * Return key for value
         *
         * @param mixed $value
         *
         * @psalm-param mixed $value
         * @psalm-pure
         * @return string|false
         */
        public static function search($value)
        {
        }
        /**
         * Returns a value when called statically like so: MyEnum::SOME_VALUE() given SOME_VALUE is a class constant
         *
         * @param string $name
         * @param array  $arguments
         *
         * @return static
         * @throws \BadMethodCallException
         *
         * @psalm-pure
         */
        public static function __callStatic($name, $arguments)
        {
        }
        /**
         * Specify data which should be serialized to JSON. This method returns data that can be serialized by json_encode()
         * natively.
         *
         * @return mixed
         * @link http://php.net/manual/en/jsonserializable.jsonserialize.php
         * @psalm-pure
         */
        #[\ReturnTypeWillChange]
        public function jsonSerialize()
        {
        }
    }
}
namespace Zxing {
    interface Reader
    {
        public function decode(\Zxing\BinaryBitmap $image);
        public function reset();
    }
    /**
     * The purpose of this class hierarchy is to abstract different bitmap implementations across
     * platforms into a standard interface for requesting greyscale luminance values. The interface
     * only provides immutable methods; therefore crop and rotation create copies. This is to ensure
     * that one Reader does not modify the original luminance source and leave it in an unknown state
     * for other Readers in the chain.
     *
     * @author dswitkin@google.com (Daniel Switkin)
     */
    abstract class LuminanceSource
    {
        public function __construct($width, $height)
        {
        }
        /**
         * Fetches luminance data for the underlying bitmap. Values should be fetched using:
         * {@code int luminance = array[y * width + x] & 0xff}
         *
         * @return A row-major 2D array of luminance values. Do not use result.length as it may be
         *         larger than width * height bytes on some platforms. Do not modify the contents
         *         of the result.
         */
        public abstract function getMatrix();
        /**
         * @return The width of the bitmap.
         */
        public final function getWidth()
        {
        }
        /**
         * @return The height of the bitmap.
         */
        public final function getHeight()
        {
        }
        /**
         * @return bool Whether this subclass supports cropping.
         */
        public function isCropSupported()
        {
        }
        /**
         * Returns a new object with cropped image data. Implementations may keep a reference to the
         * original data rather than a copy. Only callable if isCropSupported() is true.
         *
         * @param left   The left coordinate, which must be in [0,getWidth())
         * @param top    The top coordinate, which must be in [0,getHeight())
         * @param width  The width of the rectangle to crop.
         * @param height The height of the rectangle to crop.
         *
         * @return A cropped version of this object.
         */
        public function crop($left, $top, $width, $height)
        {
        }
        /**
         * @return Whether this subclass supports counter-clockwise rotation.
         */
        public function isRotateSupported()
        {
        }
        /**
         * @return a wrapper of this {@code LuminanceSource} which inverts the luminances it returns -- black becomes
         *  white and vice versa, and each value becomes (255-value).
         */
        public function invert()
        {
        }
        /**
         * Returns a new object with rotated image data by 90 degrees counterclockwise.
         * Only callable if {@link #isRotateSupported()} is true.
         *
         * @return A rotated version of this object.
         */
        public function rotateCounterClockwise()
        {
        }
        /**
         * Returns a new object with rotated image data by 45 degrees counterclockwise.
         * Only callable if {@link #isRotateSupported()} is true.
         *
         * @return A rotated version of this object.
         */
        public function rotateCounterClockwise45()
        {
        }
        public final function toString()
        {
        }
        /**
         * Fetches one row of luminance data from the underlying platform's bitmap. Values range from
         * 0 (black) to 255 (white). Because Java does not have an unsigned byte type, callers will have
         * to bitwise and with 0xff for each value. It is preferable for implementations of this method
         * to only fetch this row rather than the whole image, since no 2D Readers may be installed and
         * getMatrix() may never be called.
         *
         * @param $y   ; The row to fetch, which must be in [0,getHeight())
         * @param $row ; An optional preallocated array. If null or too small, it will be ignored.
         *             Always use the returned object, and ignore the .length of the array.
         *
         * @return array
         * An array containing the luminance data.
         */
        public abstract function getRow($y, $row);
    }
    /**
     * This object extends LuminanceSource around an array of YUV data returned from the camera driver,
     * with the option to crop to a rectangle within the full data. This can be used to exclude
     * superfluous pixels around the perimeter and speed up decoding.
     *
     * It works for any pixel format where the Y channel is planar and appears first, including
     * YCbCr_420_SP and YCbCr_422_SP.
     *
     * @author dswitkin@google.com (Daniel Switkin)
     */
    final class PlanarYUVLuminanceSource extends \Zxing\LuminanceSource
    {
        public function __construct($yuvData, $dataWidth, $dataHeight, $left, $top, $width, $height, $reverseHorizontal)
        {
        }
        //@Override
        public function getRow($y, $row = null)
        {
        }
        //@Override
        public function getMatrix()
        {
        }
        // @Override
        public function isCropSupported()
        {
        }
        // @Override
        public function crop($left, $top, $width, $height)
        {
        }
        public function renderThumbnail()
        {
        }
        /**
         * @return width of image from {@link #renderThumbnail()}
         */
        /*
          public int getThumbnailWidth() {
            return getWidth() / THUMBNAIL_SCALE_FACTOR;
          }*/
        /**
         * @return height of image from {@link #renderThumbnail()}
         */
        /*
          public int getThumbnailHeight() {
            return getHeight() / THUMBNAIL_SCALE_FACTOR;
          }
        
          private void reverseHorizontal(int width, int height) {
            byte[] yuvData = this.yuvData;
            for (int y = 0, rowStart = top * dataWidth + left; y < height; y++, rowStart += dataWidth) {
                int middle = rowStart + width / 2;
              for (int x1 = rowStart, x2 = rowStart + width - 1; x1 < middle; x1++, x2--) {
                    byte temp = yuvData[x1];
                yuvData[x1] = yuvData[x2];
                yuvData[x2] = temp;
              }
            }
          }
        */
    }
    final class QrReader
    {
        const SOURCE_TYPE_FILE = 'file';
        const SOURCE_TYPE_BLOB = 'blob';
        const SOURCE_TYPE_RESOURCE = 'resource';
        public function __construct($imgSource, $sourceType = \Zxing\QrReader::SOURCE_TYPE_FILE, $useImagickIfAvailable = true)
        {
        }
        public function decode()
        {
        }
        public function text()
        {
        }
        public function getResult()
        {
        }
    }
    /**
     * This class is the core bitmap class used by ZXing to represent 1 bit data. Reader objects
     * accept a BinaryBitmap and attempt to decode it.
     *
     * @author dswitkin@google.com (Daniel Switkin)
     */
    final class BinaryBitmap
    {
        public function __construct(\Zxing\Binarizer $binarizer)
        {
        }
        /**
         * @return int The width of the bitmap.
         */
        public function getWidth()
        {
        }
        /**
         * @return int The height of the bitmap.
         */
        public function getHeight()
        {
        }
        /**
         * Converts one row of luminance data to 1 bit data. May actually do the conversion, or return
         * cached data. Callers should assume this method is expensive and call it as seldom as possible.
         * This method is intended for decoding 1D barcodes and may choose to apply sharpening.
         *
         * @param y   The row to fetch, which must be in [0, bitmap height)
         * @param row An optional preallocated array. If null or too small, it will be ignored.
         *            If used, the Binarizer will call BitArray.clear(). Always use the returned object.
         *
         * @return array The array of bits for this row (true means black).
         * @throws NotFoundException if row can't be binarized
         */
        public function getBlackRow($y, $row)
        {
        }
        /**
         * @return bool Whether this bitmap can be cropped.
         */
        public function isCropSupported()
        {
        }
        /**
         * Returns a new object with cropped image data. Implementations may keep a reference to the
         * original data rather than a copy. Only callable if isCropSupported() is true.
         *
         * @param left   The left coordinate, which must be in [0,getWidth())
         * @param top    The top coordinate, which must be in [0,getHeight())
         * @param width  The width of the rectangle to crop.
         * @param height The height of the rectangle to crop.
         *
         * @return BinaryBitmap A cropped version of this object.
         */
        public function crop($left, $top, $width, $height)
        {
        }
        /**
         * @return Whether this bitmap supports counter-clockwise rotation.
         */
        public function isRotateSupported()
        {
        }
        /**
         * Returns a new object with rotated image data by 90 degrees counterclockwise.
         * Only callable if {@link #isRotateSupported()} is true.
         *
         * @return BinaryBitmap A rotated version of this object.
         */
        public function rotateCounterClockwise()
        {
        }
        /**
         * Returns a new object with rotated image data by 45 degrees counterclockwise.
         * Only callable if {@link #isRotateSupported()} is true.
         *
         * @return BinaryBitmap A rotated version of this object.
         */
        public function rotateCounterClockwise45()
        {
        }
        public function toString()
        {
        }
        /**
         * Converts a 2D array of luminance data to 1 bit. As above, assume this method is expensive
         * and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or
         * may not apply sharpening. Therefore, a row from this matrix may not be identical to one
         * fetched using getBlackRow(), so don't mix and match between them.
         *
         * @return BitMatrix The 2D array of bits for the image (true means black).
         * @throws NotFoundException if image can't be binarized to make a matrix
         */
        public function getBlackMatrix()
        {
        }
    }
    /**
     * This class is used to help decode images from files which arrive as GD Resource
     * It does not support rotation.
     */
    final class IMagickLuminanceSource extends \Zxing\LuminanceSource
    {
        public $luminances;
        public function __construct(\Imagick $image, $dataWidth, $dataHeight, $left = null, $top = null, $width = null, $height = null)
        {
        }
        public function _IMagickLuminanceSource(\Imagick $image, $width, $height)
        {
        }
        //@Override
        public function getRow($y, $row = null)
        {
        }
        //@Override
        public function getMatrix()
        {
        }
        //@Override
        public function isCropSupported()
        {
        }
        //@Override
        public function crop($left, $top, $width, $height)
        {
        }
    }
    /**
     * The general exception class throw when something goes wrong during decoding of a barcode.
     * This includes, but is not limited to, failing checksums / error correction algorithms, being
     * unable to locate finder timing patterns, and so on.
     *
     * @author Sean Owen
     */
    abstract class ReaderException extends \Exception
    {
        // disable stack traces when not running inside test units
        //protected static  $isStackTrace = System.getProperty("surefire.test.class.path") != null;
        protected static $isStackTrace = false;
        function ReaderException($cause = null)
        {
        }
        // Prevent stack traces from being taken
        // srowen says: huh, my IDE is saying this is not an override. native methods can't be overridden?
        // This, at least, does not hurt. Because we use a singleton pattern here, it doesn't matter anyhow.
        //@Override
        public final function fillInStackTrace()
        {
        }
    }
    /**
     * Thrown when a barcode was not found in the image. It might have been
     * partially detected but could not be confirmed.
     *
     * @author Sean Owen
     */
    final class NotFoundException extends \Zxing\ReaderException
    {
        public static function getNotFoundInstance()
        {
        }
    }
    /**
     * <p>Encapsulates a point of interest in an image containing a barcode. Typically, this
     * would be the location of a finder pattern or the corner of the barcode, for example.</p>
     *
     * @author Sean Owen
     */
    class ResultPoint
    {
        public function __construct($x, $y)
        {
        }
        /**
         * Orders an array of three ResultPoints in an order [A,B,C] such that AB is less than AC
         * and BC is less than AC, and the angle between BC and BA is less than 180 degrees.
         *
         * @param patterns array of three {@code ResultPoint} to order
         */
        public static function orderBestPatterns($patterns)
        {
        }
        /**
         * @param pattern1 first pattern
         * @param pattern2 second pattern
         *
         * @return distance between two points
         */
        public static function distance($pattern1, $pattern2)
        {
        }
        //@Override
        public final function getX()
        {
        }
        //@Override
        public final function getY()
        {
        }
        public final function equals($other)
        {
        }
        public final function hashCode()
        {
        }
        public final function toString()
        {
        }
    }
    /**
     * This class is used to help decode images from files which arrive as GD Resource
     * It does not support rotation.
     *
     *
     *
     */
    final class GDLuminanceSource extends \Zxing\LuminanceSource
    {
        public $luminances;
        public function __construct($gdImage, $dataWidth, $dataHeight, $left = null, $top = null, $width = null, $height = null)
        {
        }
        public function GDLuminanceSource($gdImage, $width, $height)
        {
        }
        //@Override
        public function getRow($y, $row = null)
        {
        }
        //@Override
        public function getMatrix()
        {
        }
        //@Override
        public function isCropSupported()
        {
        }
        //@Override
        public function crop($left, $top, $width, $height)
        {
        }
    }
    /**
     * This class hierarchy provides a set of methods to convert luminance data to 1 bit data.
     * It allows the algorithm to vary polymorphically, for example allowing a very expensive
     * thresholding technique for servers and a fast one for mobile. It also permits the implementation
     * to vary, e.g. a JNI version for Android and a Java fallback version for other platforms.
     *
     * @author dswitkin@google.com (Daniel Switkin)
     */
    abstract class Binarizer
    {
        protected function __construct($source)
        {
        }
        /**
         * @return LuminanceSource
         */
        public final function getLuminanceSource()
        {
        }
        /**
         * Converts one row of luminance data to 1 bit data. May actually do the conversion, or return
         * cached data. Callers should assume this method is expensive and call it as seldom as possible.
         * This method is intended for decoding 1D barcodes and may choose to apply sharpening.
         * For callers which only examine one row of pixels at a time, the same BitArray should be reused
         * and passed in with each call for performance. However it is legal to keep more than one row
         * at a time if needed.
         *
         * @param y   The row to fetch, which must be in [0, bitmap height)
         * @param row An optional preallocated array. If null or too small, it will be ignored.
         *            If used, the Binarizer will call BitArray.clear(). Always use the returned object.
         *
         * @return array The array of bits for this row (true means black).
         * @throws NotFoundException if row can't be binarized
         */
        public abstract function getBlackRow($y, $row);
        /**
         * Converts a 2D array of luminance data to 1 bit data. As above, assume this method is expensive
         * and do not call it repeatedly. This method is intended for decoding 2D barcodes and may or
         * may not apply sharpening. Therefore, a row from this matrix may not be identical to one
         * fetched using getBlackRow(), so don't mix and match between them.
         *
         * @return BitMatrix The 2D array of bits for the image (true means black).
         * @throws NotFoundException if image can't be binarized to make a matrix
         */
        public abstract function getBlackMatrix();
        /**
         * Creates a new object with the same type as this Binarizer implementation, but with pristine
         * state. This is needed because Binarizer implementations may be stateful, e.g. keeping a cache
         * of 1 bit data. See Effective Java for why we can't use Java's clone() method.
         *
         * @param source The LuminanceSource this Binarizer will operate on.
         *
         * @return Binarizer A new concrete Binarizer implementation object.
         */
        public abstract function createBinarizer($source);
        public final function getWidth()
        {
        }
        public final function getHeight()
        {
        }
    }
    /**
     * This class is used to help decode images from files which arrive as RGB data from
     * an ARGB pixel array. It does not support rotation.
     *
     * @author dswitkin@google.com (Daniel Switkin)
     * @author Betaminos
     */
    final class RGBLuminanceSource extends \Zxing\LuminanceSource
    {
        public $luminances;
        public function __construct($pixels, $dataWidth, $dataHeight, $left = null, $top = null, $width = null, $height = null)
        {
        }
        public function RGBLuminanceSource_($width, $height, $pixels)
        {
        }
        public function grayscale()
        {
        }
        public function getPixel($x, $y, $width, $height)
        {
        }
        public function grayScaleToBitmap($grayScale)
        {
        }
        public function getMiddleBrightnessPerArea($image)
        {
        }
        //@Override
        public function getRow($y, $row = null)
        {
        }
        //@Override
        public function getMatrix()
        {
        }
        //@Override
        public function isCropSupported()
        {
        }
        //@Override
        public function crop($left, $top, $width, $height)
        {
        }
    }
    /**
     * <p>Encapsulates the result of decoding a barcode within an image.</p>
     *
     * @author Sean Owen
     */
    final class Result
    {
        public function __construct($text, $rawBytes, $resultPoints, $format, $timestamp = '')
        {
        }
        /**
         * @return raw text encoded by the barcode
         */
        public function getText()
        {
        }
        /**
         * @return raw bytes encoded by the barcode, if applicable, otherwise {@code null}
         */
        public function getRawBytes()
        {
        }
        /**
         * @return points related to the barcode in the image. These are typically points
         *         identifying finder patterns or the corners of the barcode. The exact meaning is
         *         specific to the type of barcode that was decoded.
         */
        public function getResultPoints()
        {
        }
        /**
         * @return {@link BarcodeFormat} representing the format of the barcode that was decoded
         */
        public function getBarcodeFormat()
        {
        }
        /**
         * @return {@link Map} mapping {@link ResultMetadataType} keys to values. May be
         *   {@code null}. This contains optional metadata about what was detected about the barcode,
         *   like orientation.
         */
        public function getResultMetadata()
        {
        }
        public function putMetadata($type, $value)
        {
        }
        public function putAllMetadata($metadata)
        {
        }
        public function addResultPoints($newPoints)
        {
        }
        public function getTimestamp()
        {
        }
        public function toString()
        {
        }
    }
    /**
     * Thrown when a barcode was successfully detected and decoded, but
     * was not returned because its checksum feature failed.
     *
     * @author Sean Owen
     */
    final class ChecksumException extends \Zxing\ReaderException
    {
        public static function getChecksumInstance($cause = null)
        {
        }
    }
    /**
     * Thrown when a barcode was successfully detected, but some aspect of
     * the content did not conform to the barcode's format rules. This could have
     * been due to a mis-detection.
     *
     * @author Sean Owen
     */
    final class FormatException extends \Zxing\ReaderException
    {
        public function __construct($cause = null)
        {
        }
        public static function getFormatInstance($cause = null)
        {
        }
    }
}
namespace Zxing\Qrcode {
    /**
     * This implementation can detect and decode QR Codes in an image.
     *
     * @author Sean Owen
     */
    class QRCodeReader implements \Zxing\Reader
    {
        public function __construct()
        {
        }
        /**
         * @param BinaryBitmap $image
         * @param null         $hints
         *
         * @return Result
         * @throws \Zxing\FormatException
         * @throws \Zxing\NotFoundException
         */
        public function decode(\Zxing\BinaryBitmap $image, $hints = null)
        {
        }
        public function reset()
        {
        }
        protected final function getDecoder()
        {
        }
    }
}
namespace Zxing\Qrcode\Detector {
    /**
     * <p>This class attempts to find alignment patterns in a QR Code. Alignment patterns look like finder
     * patterns but are smaller and appear at regular intervals throughout the image.</p>
     *
     * <p>At the moment this only looks for the bottom-right alignment pattern.</p>
     *
     * <p>This is mostly a simplified copy of {@link FinderPatternFinder}. It is copied,
     * pasted and stripped down here for maximum performance but does unfortunately duplicate
     * some code.</p>
     *
     * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.</p>
     *
     * @author Sean Owen
     */
    final class AlignmentPatternFinder
    {
        /**
         * <p>Creates a finder that will look in a portion of the whole image.</p>
         *
         * @param image      image to search
         * @param startX     left column from which to start searching
         * @param startY     top row from which to start searching
         * @param width      width of region to search
         * @param height     height of region to search
         * @param moduleSize estimated module size so far
         */
        public function __construct($image, $startX, $startY, $width, $height, $moduleSize, $resultPointCallback)
        {
        }
        /**
         * <p>This method attempts to find the bottom-right alignment pattern in the image. It is a bit messy since
         * it's pretty performance-critical and so is written to be fast foremost.</p>
         *
         * @return {@link AlignmentPattern} if found
         * @throws NotFoundException if not found
         */
        public function find()
        {
        }
    }
    /**
     * <p>Encapsulates information about finder patterns in an image, including the location of
     * the three finder patterns, and their estimated module size.</p>
     *
     * @author Sean Owen
     */
    final class FinderPatternInfo
    {
        public function __construct($patternCenters)
        {
        }
        public function getBottomLeft()
        {
        }
        public function getTopLeft()
        {
        }
        public function getTopRight()
        {
        }
    }
    /**
     * <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code
     * is rotated or skewed, or partially obscured.</p>
     *
     * @author Sean Owen
     */
    class Detector
    {
        public function __construct($image)
        {
        }
        /**
         * <p>Detects a QR Code in an image.</p>
         *
         * @param hints optional hints to detector
         *
         * @return {@link DetectorResult} encapsulating results of detecting a QR Code
         * @throws NotFoundException if QR Code cannot be found
         * @throws FormatException if a QR Code cannot be decoded
         */
        public final function detect($hints = null)
        {
        }
        protected final function processFinderPatternInfo($info)
        {
        }
        /**
         * <p>Detects a QR Code in an image.</p>
         *
         * @return {@link DetectorResult} encapsulating results of detecting a QR Code
         * @throws NotFoundException if QR Code cannot be found
         * @throws FormatException if a QR Code cannot be decoded
         */
        /**
         * <p>Computes an average estimated module size based on estimated derived from the positions
         * of the three finder patterns.</p>
         *
         * @param topLeft    detected top-left finder pattern center
         * @param topRight   detected top-right finder pattern center
         * @param bottomLeft detected bottom-left finder pattern center
         *
         * @return estimated module size
         */
        protected final function calculateModuleSize($topLeft, $topRight, $bottomLeft)
        {
        }
        /**
         * <p>Attempts to locate an alignment pattern in a limited region of the image, which is
         * guessed to contain it. This method uses {@link AlignmentPattern}.</p>
         *
         * @param overallEstModuleSize estimated module size so far
         * @param estAlignmentX        x coordinate of center of area probably containing alignment pattern
         * @param estAlignmentY        y coordinate of above
         * @param allowanceFactor      number of pixels in all directions to search from the center
         *
         * @return {@link AlignmentPattern} if found, or null otherwise
         * @throws NotFoundException if an unexpected error occurs during detection
         */
        protected final function findAlignmentInRegion($overallEstModuleSize, $estAlignmentX, $estAlignmentY, $allowanceFactor)
        {
        }
        protected final function getImage()
        {
        }
        protected final function getResultPointCallback()
        {
        }
    }
    /**
     * <p>Encapsulates an alignment pattern, which are the smaller square patterns found in
     * all but the simplest QR Codes.</p>
     *
     * @author Sean Owen
     */
    final class AlignmentPattern extends \Zxing\ResultPoint
    {
        public function __construct($posX, $posY, $estimatedModuleSize)
        {
        }
        /**
         * <p>Determines if this alignment pattern "about equals" an alignment pattern at the stated
         * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>
         */
        public function aboutEquals($moduleSize, $i, $j)
        {
        }
        /**
         * Combines this object's current estimate of a finder pattern position and module size
         * with a new estimate. It returns a new {@code FinderPattern} containing an average of the two.
         */
        public function combineEstimate($i, $j, $newModuleSize)
        {
        }
    }
    /**
     * <p>This class attempts to find finder patterns in a QR Code. Finder patterns are the square
     * markers at three corners of a QR Code.</p>
     *
     * <p>This class is thread-safe but not reentrant. Each thread must allocate its own object.
     *
     * @author Sean Owen
     */
    class FinderPatternFinder
    {
        protected static $MIN_SKIP = 3;
        protected static $MAX_MODULES = 57;
        /**
         * <p>Creates a finder that will search the image for three finder patterns.</p>
         *
         * @param BitMatrix $image image to search
         */
        public function __construct($image, $resultPointCallback = null)
        {
        }
        public final function find($hints)
        {
        }
        /**
         * @param $stateCount ; count of black/white/black/white/black pixels just read
         *
         * @return true iff the proportions of the counts is close enough to the 1/1/3/1/1 ratios
         *         used by finder patterns to be considered a match
         */
        protected static function foundPatternCross($stateCount)
        {
        }
        /**
         * <p>This is called when a horizontal scan finds a possible alignment pattern. It will
         * cross check with a vertical scan, and if successful, will, ah, cross-cross-check
         * with another horizontal scan. This is needed primarily to locate the real horizontal
         * center of the pattern in cases of extreme skew.
         * And then we cross-cross-cross check with another diagonal scan.</p>
         *
         * <p>If that succeeds the finder pattern location is added to a list that tracks
         * the number of times each location has been nearly-matched as a finder pattern.
         * Each additional find is more evidence that the location is in fact a finder
         * pattern center
         *
         * @param $stateCount reading state module counts from horizontal scan
         * @param i           row where finder pattern may be found
         * @param j           end of possible finder pattern in row
         * @param pureBarcode true if in "pure barcode" mode
         *
         * @return true if a finder pattern candidate was found this time
         */
        protected final function handlePossibleCenter($stateCount, $i, $j, $pureBarcode)
        {
        }
        /**
         * <p>Orders by furthest from average</p>
         */
        public function FurthestFromAverageComparator($center1, $center2)
        {
        }
        public function CenterComparator($center1, $center2)
        {
        }
        protected final function getImage()
        {
        }
        /**
         * <p>Orders by {@link FinderPattern#getCount()}, descending.</p>
         */
        //@Override
        protected final function getPossibleCenters()
        {
        }
    }
    /**
     * <p>Encapsulates a finder pattern, which are the three square patterns found in
     * the corners of QR Codes. It also encapsulates a count of similar finder patterns,
     * as a convenience to the finder's bookkeeping.</p>
     *
     * @author Sean Owen
     */
    final class FinderPattern extends \Zxing\ResultPoint
    {
        public function __construct($posX, $posY, $estimatedModuleSize, $count = 1)
        {
        }
        public function getEstimatedModuleSize()
        {
        }
        public function getCount()
        {
        }
        /*
            void incrementCount() {
         this.count++;
            }
        */
        /**
         * <p>Determines if this finder pattern "about equals" a finder pattern at the stated
         * position and size -- meaning, it is at nearly the same center with nearly the same size.</p>
         */
        public function aboutEquals($moduleSize, $i, $j)
        {
        }
        /**
         * Combines this object's current estimate of a finder pattern position and module size
         * with a new estimate. It returns a new {@code FinderPattern} containing a weighted average
         * based on count.
         */
        public function combineEstimate($i, $j, $newModuleSize)
        {
        }
    }
}
namespace Zxing\Qrcode\Decoder {
    /**
     * <p>Encapsulates a block of data within a QR Code. QR Codes may split their data into
     * multiple blocks, each of which is a unit of data and error-correction codewords. Each
     * is represented by an instance of this class.</p>
     *
     * @author Sean Owen
     */
    final class DataBlock
    {
        /**
         * <p>When QR Codes use multiple data blocks, they are actually interleaved.
         * That is, the first byte of data block 1 to n is written, then the second bytes, and so on. This
         * method will separate the data into original blocks.</p>
         *
         * @param rawCodewords bytes as read directly from the QR Code
         * @param version      version of the QR Code
         * @param ecLevel      error-correction level of the QR Code
         *
         * @return array DataBlocks containing original bytes, "de-interleaved" from representation in the
         *         QR Code
         */
        public static function getDataBlocks($rawCodewords, $version, $ecLevel)
        {
        }
        public function getNumDataCodewords()
        {
        }
        public function getCodewords()
        {
        }
    }
    /**
     * <p>See ISO 18004:2006, 6.4.1, Tables 2 and 3. This enum encapsulates the various modes in which
     * data can be encoded to bits in the QR code standard.</p>
     *
     * @author Sean Owen
     */
    class Mode
    {
        public static $TERMINATOR;
        public static $NUMERIC;
        public static $ALPHANUMERIC;
        public static $STRUCTURED_APPEND;
        public static $BYTE;
        public static $ECI;
        public static $KANJI;
        public static $FNC1_FIRST_POSITION;
        public static $FNC1_SECOND_POSITION;
        public static $HANZI;
        public function __construct($characterCountBitsForVersions, $bits)
        {
        }
        public static function Init()
        {
        }
        /**
         * @param bits four bits encoding a QR Code data mode
         *
         * @return Mode encoded by these bits
         * @throws InvalidArgumentException if bits do not correspond to a known mode
         */
        public static function forBits($bits)
        {
        }
        /**
         * @param version version in question
         *
         * @return number of bits used, in this QR Code symbol {@link Version}, to encode the
         *         count of characters that will follow encoded in this Mode
         */
        public function getCharacterCountBits($version)
        {
        }
        public function getBits()
        {
        }
    }
    /**
     * <p>The main class which implements QR Code decoding -- as opposed to locating and extracting
     * the QR Code from an image.</p>
     *
     * @author Sean Owen
     */
    final class Decoder
    {
        public function __construct()
        {
        }
        public function decode($variable, $hints = null)
        {
        }
        /**
         * <p>Convenience method that can decode a QR Code represented as a 2D array of booleans.
         * "true" is taken to mean a black module.</p>
         *
         * @param array $image booleans representing white/black QR Code modules
         * @param       hints  decoding hints that should be used to influence decoding
         *
         * @return text and bytes encoded within the QR Code
         * @throws FormatException if the QR Code cannot be decoded
         * @throws ChecksumException if error correction fails
         */
        public function decodeImage($image, $hints = null)
        {
        }
        /**
         * <p>Decodes a QR Code represented as a {@link BitMatrix}. A 1 or "true" is taken to mean a black module.</p>
         *
         * @param BitMatrix $bits booleans representing white/black QR Code modules
         * @param           hints decoding hints that should be used to influence decoding
         *
         * @return text and bytes encoded within the QR Code
         * @throws FormatException if the QR Code cannot be decoded
         * @throws ChecksumException if error correction fails
         */
        public function decodeBits($bits, $hints = null)
        {
        }
    }
    class QRCodeDecoderMetaData
    {
        /**
         * QRCodeDecoderMetaData constructor.
         * @param bool $mirrored
         */
        public function __construct($mirrored)
        {
        }
        public function isMirrored()
        {
        }
    }
    /**
     * <p>See ISO 18004:2006, 6.5.1. This enum encapsulates the four error correction levels
     * defined by the QR code standard.</p>
     *
     * @author Sean Owen
     */
    class ErrorCorrectionLevel
    {
        public function __construct($bits, $ordinal = 0)
        {
        }
        public static function Init()
        {
        }
        /** L = ~7% correction */
        //  self::$L = new ErrorCorrectionLevel(0x01);
        /** M = ~15% correction */
        //self::$M = new ErrorCorrectionLevel(0x00);
        /** Q = ~25% correction */
        //self::$Q = new ErrorCorrectionLevel(0x03);
        /** H = ~30% correction */
        //self::$H = new ErrorCorrectionLevel(0x02);
        /**
         * @param bits int containing the two bits encoding a QR Code's error correction level
         *
         * @return ErrorCorrectionLevel representing the encoded error correction level
         */
        public static function forBits($bits)
        {
        }
        public function getBits()
        {
        }
        public function toString()
        {
        }
        public function getOrdinal()
        {
        }
    }
    /**
     * <p>QR Codes can encode text as bits in one of several modes, and can use multiple modes
     * in one QR Code. This class decodes the bits back into text.</p>
     *
     * <p>See ISO 18004:2006, 6.4.3 - 6.4.7</p>
     *
     * @author Sean Owen
     */
    final class DecodedBitStreamParser
    {
        public static function decode($bytes, $version, $ecLevel, $hints)
        {
        }
    }
    /**
     * See ISO 18004:2006 Annex D
     *
     * @author Sean Owen
     */
    class Version
    {
        public function __construct($versionNumber, $alignmentPatternCenters, $ecBlocks)
        {
        }
        public function getVersionNumber()
        {
        }
        public function getAlignmentPatternCenters()
        {
        }
        public function getTotalCodewords()
        {
        }
        public function getDimensionForVersion()
        {
        }
        public function getECBlocksForLevel($ecLevel)
        {
        }
        /**
         * <p>Deduces version information purely from QR Code dimensions.</p>
         *
         * @param dimension dimension in modules
         * @return Version for a QR Code of that dimension
         * @throws FormatException if dimension is not 1 mod 4
         */
        public static function getProvisionalVersionForDimension($dimension)
        {
        }
        public static function getVersionForNumber($versionNumber)
        {
        }
        static function decodeVersionInformation($versionBits)
        {
        }
        /**
         * See ISO 18004:2006 Annex E
         */
        function buildFunctionPattern()
        {
        }
    }
    /**
     * <p>Encapsulates a set of error-correction blocks in one symbol version. Most versions will
     * use blocks of differing sizes within one version, so, this encapsulates the parameters for
     * each set of blocks. It also holds the number of error-correction codewords per block since it
     * will be the same across all blocks within one version.</p>
     */
    final class ECBlocks
    {
        function __construct($ecCodewordsPerBlock, $ecBlocks)
        {
        }
        public function getECCodewordsPerBlock()
        {
        }
        public function getNumBlocks()
        {
        }
        public function getTotalECCodewords()
        {
        }
        public function getECBlocks()
        {
        }
    }
    /**
     * <p>Encapsualtes the parameters for one error-correction block in one symbol version.
     * This includes the number of data codewords, and the number of times a block with these
     * parameters is used consecutively in the QR code version's format.</p>
     */
    final class ECB
    {
        function __construct($count, $dataCodewords)
        {
        }
        public function getCount()
        {
        }
        public function getDataCodewords()
        {
        }
        //@Override
        public function toString()
        {
        }
    }
    /**
     * <p>Encapsulates a QR Code's format information, including the data mask used and
     * error correction level.</p>
     *
     * @author Sean Owen
     * @see    DataMask
     * @see    ErrorCorrectionLevel
     */
    final class FormatInformation
    {
        public static $FORMAT_INFO_MASK_QR;
        /**
         * See ISO 18004:2006, Annex C, Table C.1
         */
        public static $FORMAT_INFO_DECODE_LOOKUP;
        public static function Init()
        {
        }
        /**
         * @param maskedFormatInfo1 ; format info indicator, with mask still applied
         * @param maskedFormatInfo2 ; second copy of same info; both are checked at the same time
         *                          to establish best match
         *
         * @return information about the format it specifies, or {@code null}
         *  if doesn't seem to match any known pattern
         */
        public static function decodeFormatInformation($maskedFormatInfo1, $maskedFormatInfo2)
        {
        }
        public static function numBitsDiffering($a, $b)
        {
        }
        public function getErrorCorrectionLevel()
        {
        }
        public function getDataMask()
        {
        }
        //@Override
        public function hashCode()
        {
        }
        //@Override
        public function equals($o)
        {
        }
    }
    /**
     * <p>Encapsulates data masks for the data bits in a QR code, per ISO 18004:2006 6.8. Implementations
     * of this class can un-mask a raw BitMatrix. For simplicity, they will unmask the entire BitMatrix,
     * including areas used for finder patterns, timing patterns, etc. These areas should be unused
     * after the point they are unmasked anyway.</p>
     *
     * <p>Note that the diagram in section 6.8.1 is misleading since it indicates that i is column position
     * and j is row position. In fact, as the text says, i is row position and j is column position.</p>
     *
     * @author Sean Owen
     */
    abstract class DataMask
    {
        public function __construct()
        {
        }
        public static function Init()
        {
        }
        /**
         * @param reference a value between 0 and 7 indicating one of the eight possible
         *                  data mask patterns a QR Code may use
         *
         * @return DataMask encapsulating the data mask pattern
         */
        public static function forReference($reference)
        {
        }
        /**
         * <p>Implementations of this method reverse the data masking process applied to a QR Code and
         * make its bits ready to read.</p>
         *
         * @param bits      representation of QR Code bits
         * @param dimension dimension of QR Code, represented by bits, being unmasked
         */
        public final function unmaskBitMatrix($bits, $dimension)
        {
        }
        public abstract function isMasked($i, $j);
    }
    /**
     * 000: mask bits for which (x + y) mod 2 == 0
     */
    final class DataMask000 extends \Zxing\Qrcode\Decoder\DataMask
    {
        // @Override
        public function isMasked($i, $j)
        {
        }
    }
    /**
     * 001: mask bits for which x mod 2 == 0
     */
    final class DataMask001 extends \Zxing\Qrcode\Decoder\DataMask
    {
        //@Override
        public function isMasked($i, $j)
        {
        }
    }
    /**
     * 010: mask bits for which y mod 3 == 0
     */
    final class DataMask010 extends \Zxing\Qrcode\Decoder\DataMask
    {
        //@Override
        public function isMasked($i, $j)
        {
        }
    }
    /**
     * 011: mask bits for which (x + y) mod 3 == 0
     */
    final class DataMask011 extends \Zxing\Qrcode\Decoder\DataMask
    {
        //@Override
        public function isMasked($i, $j)
        {
        }
    }
    /**
     * 100: mask bits for which (x/2 + y/3) mod 2 == 0
     */
    final class DataMask100 extends \Zxing\Qrcode\Decoder\DataMask
    {
        //@Override
        public function isMasked($i, $j)
        {
        }
    }
    /**
     * 101: mask bits for which xy mod 2 + xy mod 3 == 0
     */
    final class DataMask101 extends \Zxing\Qrcode\Decoder\DataMask
    {
        //@Override
        public function isMasked($i, $j)
        {
        }
    }
    /**
     * 110: mask bits for which (xy mod 2 + xy mod 3) mod 2 == 0
     */
    final class DataMask110 extends \Zxing\Qrcode\Decoder\DataMask
    {
        //@Override
        public function isMasked($i, $j)
        {
        }
    }
    /**
     * 111: mask bits for which ((x+y)mod 2 + xy mod 3) mod 2 == 0
     */
    final class DataMask111 extends \Zxing\Qrcode\Decoder\DataMask
    {
        //@Override
        public function isMasked($i, $j)
        {
        }
    }
    /**
     * @author Sean Owen
     */
    final class BitMatrixParser
    {
        /**
         * @param bitMatrix {@link BitMatrix} to parse
         *
         * @throws FormatException if dimension is not >= 21 and 1 mod 4
         */
        public function __construct($bitMatrix)
        {
        }
        /**
         * <p>Reads the bits in the {@link BitMatrix} representing the finder pattern in the
         * correct order in order to reconstruct the codewords bytes contained within the
         * QR Code.</p>
         *
         * @return bytes encoded within the QR Code
         * @throws FormatException if the exact number of bytes expected is not read
         */
        public function readCodewords()
        {
        }
        /**
         * <p>Reads format information from one of its two locations within the QR Code.</p>
         *
         * @return {@link FormatInformation} encapsulating the QR Code's format info
         * @throws FormatException if both format information locations cannot be parsed as
         * the valid encoding of format information
         */
        public function readFormatInformation()
        {
        }
        /**
         * <p>Reads version information from one of its two locations within the QR Code.</p>
         *
         * @return {@link Version} encapsulating the QR Code's version
         * @throws FormatException if both version information locations cannot be parsed as
         * the valid encoding of version information
         */
        public function readVersion()
        {
        }
        /**
         * Revert the mask removal done while reading the code words. The bit matrix should revert to its original state.
         */
        public function remask()
        {
        }
        /**
         * Prepare the parser for a mirrored operation.
         * This flag has effect only on the {@link #readFormatInformation()} and the
         * {@link #readVersion()}. Before proceeding with {@link #readCodewords()} the
         * {@link #mirror()} method should be called.
         *
         * @param mirror Whether to read version and format information mirrored.
         */
        public function setMirror($mirror)
        {
        }
        /** Mirror the bit matrix in order to attempt a second reading. */
        public function mirror()
        {
        }
    }
}
namespace Zxing\Common {
    /**
     * <p>Encapsulates the result of detecting a barcode in an image. This includes the raw
     * matrix of black/white pixels corresponding to the barcode, and possibly points of interest
     * in the image, like the location of finder patterns or corners of the barcode in the image.</p>
     *
     * @author Sean Owen
     */
    class DetectorResult
    {
        public function __construct($bits, $points)
        {
        }
        public final function getBits()
        {
        }
        public final function getPoints()
        {
        }
    }
    /**
     * This Binarizer implementation uses the old ZXing global histogram approach. It is suitable
     * for low-end mobile devices which don't have enough CPU or memory to use a local thresholding
     * algorithm. However, because it picks a global black point, it cannot handle difficult shadows
     * and gradients.
     *
     * Faster mobile devices and all desktop applications should probably use HybridBinarizer instead.
     *
     * @author dswitkin@google.com (Daniel Switkin)
     * @author Sean Owen
     */
    class GlobalHistogramBinarizer extends \Zxing\Binarizer
    {
        public function __construct($source)
        {
        }
        // Applies simple sharpening to the row data to improve performance of the 1D Readers.
        public function getBlackRow($y, $row = null)
        {
        }
        public function getBlackMatrix()
        {
        }
        public function createBinarizer($source)
        {
        }
    }
    /**
     * Implementations of this class can, given locations of finder patterns for a QR code in an
     * image, sample the right points in the image to reconstruct the QR code, accounting for
     * perspective distortion. It is abstracted since it is relatively expensive and should be allowed
     * to take advantage of platform-specific optimized implementations, like Sun's Java Advanced
     * Imaging library, but which may not be available in other environments such as J2ME, and vice
     * versa.
     *
     * The implementation used can be controlled by calling {@link #setGridSampler(GridSampler)}
     * with an instance of a class which implements this interface.
     *
     * @author Sean Owen
     */
    abstract class GridSampler
    {
        /**
         * Sets the implementation of GridSampler used by the library. One global
         * instance is stored, which may sound problematic. But, the implementation provided
         * ought to be appropriate for the entire platform, and all uses of this library
         * in the whole lifetime of the JVM. For instance, an Android activity can swap in
         * an implementation that takes advantage of native platform libraries.
         *
         * @param newGridSampler The platform-specific object to install.
         */
        public static function setGridSampler($newGridSampler)
        {
        }
        /**
         * @return the current implementation of GridSampler
         */
        public static function getInstance()
        {
        }
        /**
         * <p>Checks a set of points that have been transformed to sample points on an image against
         * the image's dimensions to see if the point are even within the image.</p>
         *
         * <p>This method will actually "nudge" the endpoints back onto the image if they are found to be
         * barely (less than 1 pixel) off the image. This accounts for imperfect detection of finder
         * patterns in an image where the QR Code runs all the way to the image border.</p>
         *
         * <p>For efficiency, the method will check points from either end of the line until one is found
         * to be within the image. Because the set of points are assumed to be linear, this is valid.</p>
         *
         * @param image  image into which the points should map
         * @param points actual points in x1,y1,...,xn,yn form
         *
         * @throws NotFoundException if an endpoint is lies outside the image boundaries
         */
        protected static function checkAndNudgePoints($image, $points)
        {
        }
        /**
         * Samples an image for a rectangular matrix of bits of the given dimension. The sampling
         * transformation is determined by the coordinates of 4 points, in the original and transformed
         * image space.
         *
         * @param image      image to sample
         * @param dimensionX width of {@link BitMatrix} to sample from image
         * @param dimensionY height of {@link BitMatrix} to sample from image
         * @param p1ToX      point 1 preimage X
         * @param p1ToY      point 1 preimage Y
         * @param p2ToX      point 2 preimage X
         * @param p2ToY      point 2 preimage Y
         * @param p3ToX      point 3 preimage X
         * @param p3ToY      point 3 preimage Y
         * @param p4ToX      point 4 preimage X
         * @param p4ToY      point 4 preimage Y
         * @param p1FromX    point 1 image X
         * @param p1FromY    point 1 image Y
         * @param p2FromX    point 2 image X
         * @param p2FromY    point 2 image Y
         * @param p3FromX    point 3 image X
         * @param p3FromY    point 3 image Y
         * @param p4FromX    point 4 image X
         * @param p4FromY    point 4 image Y
         *
         * @return {@link BitMatrix} representing a grid of points sampled from the image within a region
         *   defined by the "from" parameters
         * @throws NotFoundException if image can't be sampled, for example, if the transformation defined
         *   by the given points is invalid or results in sampling outside the image boundaries
         */
        public abstract function sampleGrid($image, $dimensionX, $dimensionY, $p1ToX, $p1ToY, $p2ToX, $p2ToY, $p3ToX, $p3ToY, $p4ToX, $p4ToY, $p1FromX, $p1FromY, $p2FromX, $p2FromY, $p3FromX, $p3FromY, $p4FromX, $p4FromY);
        public abstract function sampleGrid_($image, $dimensionX, $dimensionY, $transform);
    }
    /**
     * @author Sean Owen
     */
    final class DefaultGridSampler extends \Zxing\Common\GridSampler
    {
        //@Override
        public function sampleGrid($image, $dimensionX, $dimensionY, $p1ToX, $p1ToY, $p2ToX, $p2ToY, $p3ToX, $p3ToY, $p4ToX, $p4ToY, $p1FromX, $p1FromY, $p2FromX, $p2FromY, $p3FromX, $p3FromY, $p4FromX, $p4FromY)
        {
        }
        //@Override
        public function sampleGrid_($image, $dimensionX, $dimensionY, $transform)
        {
        }
    }
    /**
     * <p>A simple, fast array of bits, represented compactly by an array of ints internally.</p>
     *
     * @author Sean Owen
     */
    final class BitArray
    {
        public function __construct($bits = [], $size = 0)
        {
        }
        public function getSize()
        {
        }
        public function getSizeInBytes()
        {
        }
        /**
         * Sets bit i.
         *
         * @param i bit to set
         */
        public function set($i)
        {
        }
        /**
         * Flips bit i.
         *
         * @param i bit to set
         */
        public function flip($i)
        {
        }
        /**
         * @param from first bit to check
         *
         * @return index of first bit that is set, starting from the given index, or size if none are set
         *  at or beyond this given index
         * @see #getNextUnset(int)
         */
        public function getNextSet($from)
        {
        }
        /**
         * @param from index to start looking for unset bit
         *
         * @return index of next unset bit, or {@code size} if none are unset until the end
         * @see #getNextSet(int)
         */
        public function getNextUnset($from)
        {
        }
        /**
         * Sets a block of 32 bits, starting at bit i.
         *
         * @param i       first bit to set
         * @param newBits the new value of the next 32 bits. Note again that the least-significant bit
         *                corresponds to bit i, the next-least-significant to i+1, and so on.
         */
        public function setBulk($i, $newBits)
        {
        }
        /**
         * Sets a range of bits.
         *
         * @param start start of range, inclusive.
         * @param end   end of range, exclusive
         */
        public function setRange($start, $end)
        {
        }
        /**
         * Clears all bits (sets to false).
         */
        public function clear()
        {
        }
        /**
         * Efficient method to check if a range of bits is set, or not set.
         *
         * @param start start of range, inclusive.
         * @param end   end of range, exclusive
         * @param value if true, checks that bits in range are set, otherwise checks that they are not set
         *
         * @return true iff all bits are set or not set in range, according to value argument
         * @throws InvalidArgumentException if end is less than or equal to start
         */
        public function isRange($start, $end, $value)
        {
        }
        /**
         * Appends the least-significant bits, from value, in order from most-significant to
         * least-significant. For example, appending 6 bits from 0x000001E will append the bits
         * 0, 1, 1, 1, 1, 0 in that order.
         *
         * @param value   {@code int} containing bits to append
         * @param numBits bits from value to append
         */
        public function appendBits($value, $numBits)
        {
        }
        public function appendBit($bit)
        {
        }
        public function appendBitArray($other)
        {
        }
        public function _xor($other)
        {
        }
        /**
         *
         * @param bitOffset first bit to start writing
         * @param array     array to write into. Bytes are written most-significant byte first. This is the opposite
         *                  of the internal representation, which is exposed by {@link #getBitArray()}
         * @param offset    position in array to start writing
         * @param numBytes  how many bytes to write
         */
        public function toBytes($bitOffset, &$array, $offset, $numBytes)
        {
        }
        /**
         * @param $i ; bit to get
         *
         * @return true iff bit i is set
         */
        public function get($i)
        {
        }
        /**
         * @return array underlying array of ints. The first element holds the first 32 bits, and the least
         *         significant bit is bit 0.
         */
        public function getBitArray()
        {
        }
        /**
         * Reverses all bits in the array.
         */
        public function reverse()
        {
        }
        public function equals($o)
        {
        }
        public function hashCode()
        {
        }
        public function toString()
        {
        }
        public function _clone()
        {
        }
    }
    /**
     * This class implements a local thresholding algorithm, which while slower than the
     * GlobalHistogramBinarizer, is fairly efficient for what it does. It is designed for
     * high frequency images of barcodes with black data on white backgrounds. For this application,
     * it does a much better job than a global blackpoint with severe shadows and gradients.
     * However it tends to produce artifacts on lower frequency images and is therefore not
     * a good general purpose binarizer for uses outside ZXing.
     *
     * This class extends GlobalHistogramBinarizer, using the older histogram approach for 1D readers,
     * and the newer local approach for 2D readers. 1D decoding using a per-row histogram is already
     * inherently local, and only fails for horizontal gradients. We can revisit that problem later,
     * but for now it was not a win to use local blocks for 1D.
     *
     * This Binarizer is the default for the unit tests and the recommended class for library users.
     *
     * @author dswitkin@google.com (Daniel Switkin)
     */
    final class HybridBinarizer extends \Zxing\Common\GlobalHistogramBinarizer
    {
        public function __construct($source)
        {
        }
        /**
         * Calculates the final BitMatrix once for all requests. This could be called once from the
         * constructor instead, but there are some advantages to doing it lazily, such as making
         * profiling easier, and not doing heavy lifting when callers don't expect it.
         */
        public function getBlackMatrix()
        {
        }
        public function createBinarizer($source)
        {
        }
    }
    /**
     * A general enum implementation until we got SplEnum.
     */
    final class AbstractEnum
    {
        /**
         * Default value.
         */
        const __default = null;
        /**
         * Creates a new enum.
         *
         * @param mixed   $initialValue
         * @param boolean $strict
         */
        public function __construct($initialValue = null, $strict = false)
        {
        }
        /**
         * Changes the value of the enum.
         *
         * @param  mixed $value
         *
         * @return void
         */
        public function change($value)
        {
        }
        /**
         * Gets all constants (possible values) as an array.
         *
         * @param  boolean $includeDefault
         *
         * @return array
         */
        public function getConstList($includeDefault = true)
        {
        }
        /**
         * Gets current value.
         *
         * @return mixed
         */
        public function get()
        {
        }
        /**
         * Gets the name of the enum.
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
}
namespace Zxing\Common\Reedsolomon {
    /**
     * <p>Implements Reed-Solomon decoding, as the name implies.</p>
     *
     * <p>The algorithm will not be explained here, but the following references were helpful
     * in creating this implementation:</p>
     *
     * <ul>
     * <li>Bruce Maggs.
     * <a href="http://www.cs.cmu.edu/afs/cs.cmu.edu/project/pscico-guyb/realworld/www/rs_decode.ps">
     * "Decoding Reed-Solomon Codes"</a> (see discussion of Forney's Formula)</li>
     * <li>J.I. Hall. <a href="www.mth.msu.edu/~jhall/classes/codenotes/GRS.pdf">
     * "Chapter 5. Generalized Reed-Solomon Codes"</a>
     * (see discussion of Euclidean algorithm)</li>
     * </ul>
     *
     * <p>Much credit is due to William Rucklidge since portions of this code are an indirect
     * port of his C++ Reed-Solomon implementation.</p>
     *
     * @author Sean Owen
     * @author William Rucklidge
     * @author sanfordsquires
     */
    final class ReedSolomonDecoder
    {
        public function __construct($field)
        {
        }
        /**
         * <p>Decodes given set of received codewords, which include both data and error-correction
         * codewords. Really, this means it uses Reed-Solomon to detect and correct errors, in-place,
         * in the input.</p>
         *
         * @param received data and error-correction codewords
         * @param twoS     number of error-correction codewords available
         *
         * @throws ReedSolomonException if decoding fails for any reason
         */
        public function decode(&$received, $twoS)
        {
        }
    }
    /**
     * <p>This class contains utility methods for performing mathematical operations over
     * the Galois Fields. Operations use a given primitive polynomial in calculations.</p>
     *
     * <p>Throughout this package, elements of the GF are represented as an {@code int}
     * for convenience and speed (but at the cost of memory).
     * </p>
     *
     * @author Sean Owen
     * @author David Olivier
     */
    final class GenericGF
    {
        public static $AZTEC_DATA_12;
        public static $AZTEC_DATA_10;
        public static $AZTEC_DATA_6;
        public static $AZTEC_PARAM;
        public static $QR_CODE_FIELD_256;
        public static $DATA_MATRIX_FIELD_256;
        public static $AZTEC_DATA_8;
        public static $MAXICODE_FIELD_64;
        /**
         * Create a representation of GF(size) using the given primitive polynomial.
         *
         * @param primitive irreducible polynomial whose coefficients are represented by
         *                  the bits of an int, where the least-significant bit represents the constant
         *                  coefficient
         * @param size      the size of the field
         * @param b         the factor b in the generator polynomial can be 0- or 1-based
         *                  (g(x) = (x+a^b)(x+a^(b+1))...(x+a^(b+2t-1))).
         *                  In most cases it should be 1, but for QR code it is 0.
         */
        public function __construct($primitive, $size, $b)
        {
        }
        public static function Init()
        {
        }
        /**
         * Implements both addition and subtraction -- they are the same in GF(size).
         *
         * @return sum/difference of a and b
         */
        public static function addOrSubtract($a, $b)
        {
        }
        public function getZero()
        {
        }
        public function getOne()
        {
        }
        /**
         * @return the monomial representing coefficient * x^degree
         */
        public function buildMonomial($degree, $coefficient)
        {
        }
        /**
         * @return 2 to the power of a in GF(size)
         */
        public function exp($a)
        {
        }
        /**
         * @return base 2 log of a in GF(size)
         */
        public function log($a)
        {
        }
        /**
         * @return multiplicative inverse of a
         */
        public function inverse($a)
        {
        }
        /**
         * @return int product of a and b in GF(size)
         */
        public function multiply($a, $b)
        {
        }
        public function getSize()
        {
        }
        public function getGeneratorBase()
        {
        }
        // @Override
        public function toString()
        {
        }
    }
    /**
     * <p>Thrown when an exception occurs during Reed-Solomon decoding, such as when
     * there are too many errors to correct.</p>
     *
     * @author Sean Owen
     */
    final class ReedSolomonException extends \Exception
    {
    }
    /**
     * <p>Represents a polynomial whose coefficients are elements of a GF.
     * Instances of this class are immutable.</p>
     *
     * <p>Much credit is due to William Rucklidge since portions of this code are an indirect
     * port of his C++ Reed-Solomon implementation.</p>
     *
     * @author Sean Owen
     */
    final class GenericGFPoly
    {
        /**
         * @param field        the {@link GenericGF} instance representing the field to use
         * to perform computations
         * @param coefficients array coefficients as ints representing elements of GF(size), arranged
         *                     from most significant (highest-power term) coefficient to least significant
         *
         * @throws InvalidArgumentException if argument is null or empty,
         * or if leading coefficient is 0 and this is not a
         * constant polynomial (that is, it is not the monomial "0")
         */
        public function __construct($field, $coefficients)
        {
        }
        public function getCoefficients()
        {
        }
        /**
         * @return evaluation of this polynomial at a given point
         */
        public function evaluateAt($a)
        {
        }
        /**
         * @return coefficient of x^degree term in this polynomial
         */
        public function getCoefficient($degree)
        {
        }
        public function multiply($other)
        {
        }
        public function multiply_($scalar)
        {
        }
        /**
         * @return true iff this polynomial is the monomial "0"
         */
        public function isZero()
        {
        }
        public function multiplyByMonomial($degree, $coefficient)
        {
        }
        public function divide($other)
        {
        }
        /**
         * @return degree of this polynomial
         */
        public function getDegree()
        {
        }
        public function addOrSubtract($other)
        {
        }
        //@Override
        public function toString()
        {
        }
    }
}
namespace Zxing\Common {
    /**
     * <p>This class implements a perspective transform in two dimensions. Given four source and four
     * destination points, it will compute the transformation implied between them. The code is based
     * directly upon section 3.4.2 of George Wolberg's "Digital Image Warping"; see pages 54-56.</p>
     *
     * @author Sean Owen
     */
    final class PerspectiveTransform
    {
        public static function quadrilateralToQuadrilateral($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3, $x0p, $y0p, $x1p, $y1p, $x2p, $y2p, $x3p, $y3p)
        {
        }
        public static function quadrilateralToSquare($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3)
        {
        }
        public function buildAdjoint()
        {
        }
        public static function squareToQuadrilateral($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3)
        {
        }
        public function times($other)
        {
        }
        public function transformPoints(&$points, &$yValues = 0)
        {
        }
        public function transformPoints_(&$xValues, &$yValues)
        {
        }
    }
    /**
     * Encapsulates a Character Set ECI, according to "Extended Channel
     * Interpretations" 5.3.1.1 of ISO 18004.
     */
    final class CharacterSetECI
    {
        /**#@+
         * Character set constants.
         */
        const CP437 = 0;
        const ISO8859_1 = 1;
        const ISO8859_2 = 4;
        const ISO8859_3 = 5;
        const ISO8859_4 = 6;
        const ISO8859_5 = 7;
        const ISO8859_6 = 8;
        const ISO8859_7 = 9;
        const ISO8859_8 = 10;
        const ISO8859_9 = 11;
        const ISO8859_10 = 12;
        const ISO8859_11 = 13;
        const ISO8859_12 = 14;
        const ISO8859_13 = 15;
        const ISO8859_14 = 16;
        const ISO8859_15 = 17;
        const ISO8859_16 = 18;
        const SJIS = 20;
        const CP1250 = 21;
        const CP1251 = 22;
        const CP1252 = 23;
        const CP1256 = 24;
        const UNICODE_BIG_UNMARKED = 25;
        const UTF8 = 26;
        const ASCII = 27;
        const BIG5 = 28;
        const GB18030 = 29;
        const EUC_KR = 30;
        /**
         * Gets character set ECI by value.
         *
         * @param  string $name
         *
         * @return CharacterSetEci|null
         */
        public static function getCharacterSetECIByValue($value)
        {
        }
        /**
         * Gets character set ECI name.
         *
         * @return character set ECI name|null
         */
        public static function name()
        {
        }
        /**
         * Gets character set ECI by name.
         *
         * @param  string $name
         *
         * @return CharacterSetEci|null
         */
        public static function getCharacterSetECIByName($name)
        {
        }
    }
}
namespace Zxing\Common\Detector {
    final class MathUtils
    {
        /**
         * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its
         * argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut
         * differ slightly from {@link Math#round(float)} in that half rounds down for negative
         * values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.
         *
         * @param float $d real value to round
         *
         * @return int $nearest {@code int}
         */
        public static function round($d)
        {
        }
        public static function distance($aX, $aY, $bX, $bY)
        {
        }
    }
    /*
     *
     *
    import com.google.zxing.NotFoundException;
    import com.google.zxing.ResultPoint;
    import com.google.zxing.common.BitMatrix;
    */
    //require_once('./lib/NotFoundException.php');
    //require_once('./lib/ResultPoint.php');
    //require_once('./lib/common/BitMatrix.php');
    /**
     * <p>A somewhat generic detector that looks for a barcode-like rectangular region within an image.
     * It looks within a mostly white region of an image for a region of black and white, but mostly
     * black. It returns the four corners of the region, as best it can determine.</p>
     *
     * @author Sean Owen
     * @port   Ashot Khanamiryan
     */
    class MonochromeRectangleDetector
    {
        public function __construct(\Zxing\BinaryBitmap $image)
        {
        }
        /**
         * <p>Detects a rectangular region of black and white -- mostly black -- with a region of mostly
         * white, in an image.</p>
         *
         * @return {@link ResultPoint}[] describing the corners of the rectangular region. The first and
         *  last points are opposed on the diagonal, as are the second and third. The first point will be
         *  the topmost point and the last, the bottommost. The second point will be leftmost and the
         *  third, the rightmost
         * @throws NotFoundException if no Data Matrix Code can be found
         */
        public function detect()
        {
        }
    }
}
namespace Zxing\Common {
    /**
     * <p>This provides an easy abstraction to read bits at a time from a sequence of bytes, where the
     * number of bits read is not often a multiple of 8.</p>
     *
     * <p>This class is thread-safe but not reentrant -- unless the caller modifies the bytes array
     * it passed in, in which case all bets are off.</p>
     *
     * @author Sean Owen
     */
    final class BitSource
    {
        /**
         * @param bytes bytes from which this will read bits. Bits will be read from the first byte first.
         *              Bits are read within a byte from most-significant to least-significant bit.
         */
        public function __construct($bytes)
        {
        }
        /**
         * @return index of next bit in current byte which would be read by the next call to {@link #readBits(int)}.
         */
        public function getBitOffset()
        {
        }
        /**
         * @return index of next byte in input byte array which would be read by the next call to {@link #readBits(int)}.
         */
        public function getByteOffset()
        {
        }
        /**
         * @param numBits number of bits to read
         *
         * @return int representing the bits read. The bits will appear as the least-significant
         *         bits of the int
         * @throws InvalidArgumentException if numBits isn't in [1,32] or more than is available
         */
        public function readBits($numBits)
        {
        }
        /**
         * @return number of bits that can be read successfully
         */
        public function available()
        {
        }
    }
    /**
     * <p>Encapsulates the result of decoding a matrix of bits. This typically
     * applies to 2D barcode formats. For now it contains the raw bytes obtained,
     * as well as a String interpretation of those bytes, if applicable.</p>
     *
     * @author Sean Owen
     */
    final class DecoderResult
    {
        public function __construct($rawBytes, $text, $byteSegments, $ecLevel, $saSequence = -1, $saParity = -1)
        {
        }
        public function getRawBytes()
        {
        }
        public function getText()
        {
        }
        public function getByteSegments()
        {
        }
        public function getECLevel()
        {
        }
        public function getErrorsCorrected()
        {
        }
        public function setErrorsCorrected($errorsCorrected)
        {
        }
        public function getErasures()
        {
        }
        public function setErasures($erasures)
        {
        }
        public function getOther()
        {
        }
        public function setOther($other)
        {
        }
        public function hasStructuredAppend()
        {
        }
        public function getStructuredAppendParity()
        {
        }
        public function getStructuredAppendSequenceNumber()
        {
        }
    }
    final class BitMatrix
    {
        public function __construct($width, $height = false, $rowSize = false, $bits = false)
        {
        }
        public static function parse($stringRepresentation, $setString, $unsetString)
        {
        }
        /**
         * <p>Sets the given bit to true.</p>
         *
         * @param $x ;  The horizontal component (i.e. which column)
         * @param $y ;   The vertical component (i.e. which row)
         */
        public function set($x, $y)
        {
        }
        public function _unset($x, $y)
        {
        }
        /**1 << (249 & 0x1f)
         * <p>Flips the given bit.</p>
         *
         * @param $x ;  The horizontal component (i.e. which column)
         * @param $y ;  The vertical component (i.e. which row)
         */
        public function flip($x, $y)
        {
        }
        /**
         * Exclusive-or (XOR): Flip the bit in this {@code BitMatrix} if the corresponding
         * mask bit is set.
         *
         * @param $mask ;  XOR mask
         */
        public function _xor($mask)
        {
        }
        /**
         * Clears all bits (sets to false).
         */
        public function clear()
        {
        }
        /**
         * <p>Sets a square region of the bit matrix to true.</p>
         *
         * @param $left   ;  The horizontal position to begin at (inclusive)
         * @param $top    ;  The vertical position to begin at (inclusive)
         * @param $width  ;  The width of the region
         * @param $height ;  The height of the region
         */
        public function setRegion($left, $top, $width, $height)
        {
        }
        /**
         * Modifies this {@code BitMatrix} to represent the same but rotated 180 degrees
         */
        public function rotate180()
        {
        }
        /**
         * @return The width of the matrix
         */
        public function getWidth()
        {
        }
        /**
         * A fast method to retrieve one row of data from the matrix as a BitArray.
         *
         * @param $y   ;  The row to retrieve
         * @param $row ;  An optional caller-allocated BitArray, will be allocated if null or too small
         *
         * @return The resulting BitArray - this reference should always be used even when passing
         *         your own row
         */
        public function getRow($y, $row)
        {
        }
        /**
         * @param $y   ;  row to set
         * @param $row ;  {@link BitArray} to copy from
         */
        public function setRow($y, $row)
        {
        }
        /**
         * This is useful in detecting the enclosing rectangle of a 'pure' barcode.
         *
         * @return {@code left,top,width,height} enclosing rectangle of all 1 bits, or null if it is all white
         */
        public function getEnclosingRectangle()
        {
        }
        /**
         * This is useful in detecting a corner of a 'pure' barcode.
         *
         * @return {@code x,y} coordinate of top-left-most 1 bit, or null if it is all white
         */
        public function getTopLeftOnBit()
        {
        }
        public function getBottomRightOnBit()
        {
        }
        /**
         * @return The height of the matrix
         */
        public function getHeight()
        {
        }
        /**
         * @return The row size of the matrix
         */
        public function getRowSize()
        {
        }
        public function equals($o)
        {
        }
        //@Override
        public function hashCode()
        {
        }
        //@Override
        public function toString($setString = '', $unsetString = '', $lineSeparator = '')
        {
        }
        public function toString_($setString, $unsetString, $lineSeparator)
        {
        }
        /**
         * @deprecated call {@link #toString(String,String)} only, which uses \n line separator always
         */
        // @Deprecated
        /**
         * <p>Gets the requested bit, where true means black.</p>
         *
         * @param $x ;  The horizontal component (i.e. which column)
         * @param $y ;  The vertical component (i.e. which row)
         *
         * @return value of given bit in matrix
         */
        public function get($x, $y)
        {
        }
        //  @Override
        public function _clone()
        {
        }
    }
}
namespace DASPRiD\Enum\Exception {
    interface ExceptionInterface extends \Throwable
    {
    }
    final class MismatchException extends \Exception implements \DASPRiD\Enum\Exception\ExceptionInterface
    {
    }
    final class ExpectationException extends \Exception implements \DASPRiD\Enum\Exception\ExceptionInterface
    {
    }
    final class CloneNotSupportedException extends \Exception implements \DASPRiD\Enum\Exception\ExceptionInterface
    {
    }
    final class UnserializeNotSupportedException extends \Exception implements \DASPRiD\Enum\Exception\ExceptionInterface
    {
    }
    final class IllegalArgumentException extends \Exception implements \DASPRiD\Enum\Exception\ExceptionInterface
    {
    }
    final class SerializeNotSupportedException extends \Exception implements \DASPRiD\Enum\Exception\ExceptionInterface
    {
    }
}
namespace DASPRiD\Enum {
    final class NullValue
    {
        public static function instance() : self
        {
        }
        /**
         * Forbid cloning enums.
         *
         * @throws CloneNotSupportedException
         */
        public final function __clone()
        {
        }
        /**
         * Forbid serializing enums.
         *
         * @throws SerializeNotSupportedException
         */
        public final function __sleep() : array
        {
        }
        /**
         * Forbid unserializing enums.
         *
         * @throws UnserializeNotSupportedException
         */
        public final function __wakeup() : void
        {
        }
    }
    abstract class AbstractEnum
    {
        /**
         * Magic getter which forwards all calls to {@see self::valueOf()}.
         *
         * @return static
         */
        public static final function __callStatic(string $name, array $arguments) : self
        {
        }
        /**
         * Returns an enum with the specified name.
         *
         * The name must match exactly an identifier used to declare an enum in this type (extraneous whitespace characters
         * are not permitted).
         *
         * @return static
         * @throws IllegalArgumentException if the enum has no constant with the specified name
         */
        public static final function valueOf(string $name) : self
        {
        }
        /**
         * Obtains all possible types defined by this enum.
         *
         * @return static[]
         */
        public static final function values() : array
        {
        }
        /**
         * Returns the name of this enum constant, exactly as declared in its enum declaration.
         *
         * Most programmers should use the {@see self::__toString()} method in preference to this one, as the toString
         * method may return a more user-friendly name. This method is designed primarily for use in specialized situations
         * where correctness depends on getting the exact name, which will not vary from release to release.
         */
        public final function name() : string
        {
        }
        /**
         * Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial
         * constant is assigned an ordinal of zero).
         *
         * Most programmers will have no use for this method. It is designed for use by sophisticated enum-based data
         * structures.
         */
        public final function ordinal() : int
        {
        }
        /**
         * Compares this enum with the specified object for order.
         *
         * Returns negative integer, zero or positive integer as this object is less than, equal to or greater than the
         * specified object.
         *
         * Enums are only comparable to other enums of the same type. The natural order implemented by this method is the
         * order in which the constants are declared.
         *
         * @throws MismatchException if the passed enum is not of the same type
         */
        public final function compareTo(self $other) : int
        {
        }
        /**
         * Forbid cloning enums.
         *
         * @throws CloneNotSupportedException
         */
        public final function __clone()
        {
        }
        /**
         * Forbid serializing enums.
         *
         * @throws SerializeNotSupportedException
         */
        public final function __sleep() : array
        {
        }
        /**
         * Forbid unserializing enums.
         *
         * @throws UnserializeNotSupportedException
         */
        public final function __wakeup() : void
        {
        }
        /**
         * Turns the enum into a string representation.
         *
         * You may override this method to give a more user-friendly version.
         */
        public function __toString() : string
        {
        }
    }
    /**
     * A specialized map implementation for use with enum type keys.
     *
     * All of the keys in an enum map must come from a single enum type that is specified, when the map is created. Enum
     * maps are represented internally as arrays. This representation is extremely compact and efficient.
     *
     * Enum maps are maintained in the natural order of their keys (the order in which the enum constants are declared).
     * This is reflected in the iterators returned by the collection views {@see self::getIterator()} and
     * {@see self::values()}.
     *
     * Iterators returned by the collection views are not consistent: They may or may not show the effects of modifications
     * to the map that occur while the iteration is in progress.
     */
    final class EnumMap implements \Serializable, \IteratorAggregate
    {
        /**
         * Creates a new enum map.
         *
         * @param string $keyType the type of the keys, must extend AbstractEnum
         * @param string $valueType the type of the values
         * @param bool $allowNullValues whether to allow null values
         * @throws IllegalArgumentException when key type does not extend AbstractEnum
         */
        public function __construct(string $keyType, string $valueType, bool $allowNullValues)
        {
        }
        /**
         * Checks whether the map types match the supplied ones.
         *
         * You should call this method when an EnumMap is passed to you and you want to ensure that it's made up of the
         * correct types.
         *
         * @throws ExpectationException when supplied key type mismatches local key type
         * @throws ExpectationException when supplied value type mismatches local value type
         * @throws ExpectationException when the supplied map allows null values, abut should not
         */
        public function expect(string $keyType, string $valueType, bool $allowNullValues) : void
        {
        }
        /**
         * Returns the number of key-value mappings in this map.
         */
        public function size() : int
        {
        }
        /**
         * Returns true if this map maps one or more keys to the specified value.
         */
        public function containsValue($value) : bool
        {
        }
        /**
         * Returns true if this map contains a mapping for the specified key.
         */
        public function containsKey(\DASPRiD\Enum\AbstractEnum $key) : bool
        {
        }
        /**
         * Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.
         *
         * More formally, if this map contains a mapping from a key to a value, then this method returns the value;
         * otherwise it returns null (there can be at most one such mapping).
         *
         * A return value of null does not necessarily indicate that the map contains no mapping for the key; it's also
         * possible that hte map explicitly maps the key to null. The {@see self::containsKey()} operation may be used to
         * distinguish these two cases.
         *
         * @return mixed
         */
        public function get(\DASPRiD\Enum\AbstractEnum $key)
        {
        }
        /**
         * Associates the specified value with the specified key in this map.
         *
         * If the map previously contained a mapping for this key, the old value is replaced.
         *
         * @return mixed the previous value associated with the specified key, or null if there was no mapping for the key.
         *               (a null return can also indicate that the map previously associated null with the specified key.)
         * @throws IllegalArgumentException when the passed values does not match the internal value type
         */
        public function put(\DASPRiD\Enum\AbstractEnum $key, $value)
        {
        }
        /**
         * Removes the mapping for this key frm this map if present.
         *
         * @return mixed the previous value associated with the specified key, or null if there was no mapping for the key.
         *               (a null return can also indicate that the map previously associated null with the specified key.)
         */
        public function remove(\DASPRiD\Enum\AbstractEnum $key)
        {
        }
        /**
         * Removes all mappings from this map.
         */
        public function clear() : void
        {
        }
        /**
         * Compares the specified map with this map for quality.
         *
         * Returns true if the two maps represent the same mappings.
         */
        public function equals(self $other) : bool
        {
        }
        /**
         * Returns the values contained in this map.
         *
         * The array will contain the values in the order their corresponding keys appear in the map, which is their natural
         * order (the order in which the num constants are declared).
         */
        public function values() : array
        {
        }
        public function serialize() : string
        {
        }
        public function unserialize($serialized) : void
        {
        }
        public function getIterator() : \Traversable
        {
        }
    }
}
namespace Endroid\QrCode\Writer {
    interface WriterInterface
    {
        public function writeString(\Endroid\QrCode\QrCodeInterface $qrCode) : string;
        public function writeDataUri(\Endroid\QrCode\QrCodeInterface $qrCode) : string;
        public function writeFile(\Endroid\QrCode\QrCodeInterface $qrCode, string $path) : void;
        public static function getContentType() : string;
        public static function supportsExtension(string $extension) : bool;
        /** @return array<string> */
        public static function getSupportedExtensions() : array;
        public function getName() : string;
    }
    abstract class AbstractWriter implements \Endroid\QrCode\Writer\WriterInterface
    {
        protected function getMimeType(string $path) : string
        {
        }
        public function writeDataUri(\Endroid\QrCode\QrCodeInterface $qrCode) : string
        {
        }
        public function writeFile(\Endroid\QrCode\QrCodeInterface $qrCode, string $path) : void
        {
        }
        public static function supportsExtension(string $extension) : bool
        {
        }
        public static function getSupportedExtensions() : array
        {
        }
        public abstract function getName() : string;
    }
    class FpdfWriter extends \Endroid\QrCode\Writer\AbstractWriter
    {
        /**
         * Defines as which unit the size is handled. Default is: "mm".
         *
         * Allowed values: 'mm', 'pt', 'cm', 'in'
         */
        public const WRITER_OPTION_MEASURE_UNIT = 'fpdf_measure_unit';
        public function writeString(\Endroid\QrCode\QrCodeInterface $qrCode) : string
        {
        }
        protected function addLogo(\FPDF $fpdf, string $logoPath, ?int $logoWidth, ?int $logoHeight, int $imageWidth, int $imageHeight) : void
        {
        }
        public static function getContentType() : string
        {
        }
        public static function getSupportedExtensions() : array
        {
        }
        public function getName() : string
        {
        }
    }
    class BinaryWriter extends \Endroid\QrCode\Writer\AbstractWriter
    {
        public function writeString(\Endroid\QrCode\QrCodeInterface $qrCode) : string
        {
        }
        public static function getContentType() : string
        {
        }
        public static function getSupportedExtensions() : array
        {
        }
        public function getName() : string
        {
        }
    }
    class DebugWriter extends \Endroid\QrCode\Writer\AbstractWriter
    {
        public function writeString(\Endroid\QrCode\QrCodeInterface $qrCode) : string
        {
        }
        public static function getContentType() : string
        {
        }
        public function getName() : string
        {
        }
    }
    class EpsWriter extends \Endroid\QrCode\Writer\AbstractWriter
    {
        public function writeString(\Endroid\QrCode\QrCodeInterface $qrCode) : string
        {
        }
        public static function getContentType() : string
        {
        }
        public static function getSupportedExtensions() : array
        {
        }
        public function getName() : string
        {
        }
    }
    class SvgWriter extends \Endroid\QrCode\Writer\AbstractWriter
    {
        public function writeString(\Endroid\QrCode\QrCodeInterface $qrCode) : string
        {
        }
        public static function getContentType() : string
        {
        }
        public static function getSupportedExtensions() : array
        {
        }
        public function getName() : string
        {
        }
    }
    class PngWriter extends \Endroid\QrCode\Writer\AbstractWriter
    {
        public function writeString(\Endroid\QrCode\QrCodeInterface $qrCode) : string
        {
        }
        public static function getContentType() : string
        {
        }
        public static function getSupportedExtensions() : array
        {
        }
        public function getName() : string
        {
        }
    }
}
namespace Endroid\QrCode {
    interface QrCodeInterface
    {
        public function getText() : string;
        public function getSize() : int;
        public function getMargin() : int;
        /** @return array<int> */
        public function getForegroundColor() : array;
        /** @return array<int> */
        public function getBackgroundColor() : array;
        public function getEncoding() : string;
        public function getRoundBlockSize() : bool;
        public function getErrorCorrectionLevel() : \Endroid\QrCode\ErrorCorrectionLevel;
        public function getLogoPath() : ?string;
        public function getLogoWidth() : ?int;
        public function getLogoHeight() : ?int;
        public function getLabel() : ?string;
        public function getLabelFontPath() : string;
        public function getLabelFontSize() : int;
        public function getLabelAlignment() : string;
        /** @return array<int> */
        public function getLabelMargin() : array;
        public function getValidateResult() : bool;
        /** @return array<mixed> */
        public function getWriterOptions() : array;
        public function getContentType() : string;
        public function setWriterRegistry(\Endroid\QrCode\WriterRegistryInterface $writerRegistry) : void;
        public function writeString() : string;
        public function writeDataUri() : string;
        public function writeFile(string $path) : void;
        /** @return array<mixed> */
        public function getData() : array;
    }
    class QrCode implements \Endroid\QrCode\QrCodeInterface
    {
        const LABEL_FONT_PATH_DEFAULT = __DIR__ . '/../assets/fonts/noto_sans.otf';
        const ROUND_BLOCK_SIZE_MODE_MARGIN = 'margin';
        const ROUND_BLOCK_SIZE_MODE_SHRINK = 'shrink';
        const ROUND_BLOCK_SIZE_MODE_ENLARGE = 'enlarge';
        public function __construct(string $text = '')
        {
        }
        public function setText(string $text) : void
        {
        }
        public function getText() : string
        {
        }
        public function setSize(int $size) : void
        {
        }
        public function getSize() : int
        {
        }
        public function setMargin(int $margin) : void
        {
        }
        public function getMargin() : int
        {
        }
        /** @param array<int> $foregroundColor */
        public function setForegroundColor(array $foregroundColor) : void
        {
        }
        public function getForegroundColor() : array
        {
        }
        /** @param array<int> $backgroundColor */
        public function setBackgroundColor(array $backgroundColor) : void
        {
        }
        public function getBackgroundColor() : array
        {
        }
        public function setEncoding(string $encoding) : void
        {
        }
        public function getEncoding() : string
        {
        }
        public function setRoundBlockSize(bool $roundBlockSize, string $roundBlockSizeMode = self::ROUND_BLOCK_SIZE_MODE_MARGIN) : void
        {
        }
        public function getRoundBlockSize() : bool
        {
        }
        public function setRoundBlockSizeMode(string $roundBlockSizeMode) : void
        {
        }
        public function setErrorCorrectionLevel(\Endroid\QrCode\ErrorCorrectionLevel $errorCorrectionLevel) : void
        {
        }
        public function getErrorCorrectionLevel() : \Endroid\QrCode\ErrorCorrectionLevel
        {
        }
        public function setLogoPath(string $logoPath) : void
        {
        }
        public function getLogoPath() : ?string
        {
        }
        public function setLogoSize(int $logoWidth, int $logoHeight = null) : void
        {
        }
        public function setLogoWidth(int $logoWidth) : void
        {
        }
        public function getLogoWidth() : ?int
        {
        }
        public function setLogoHeight(int $logoHeight) : void
        {
        }
        public function getLogoHeight() : ?int
        {
        }
        /** @param array<string, int> $labelMargin */
        public function setLabel(string $label, int $labelFontSize = null, string $labelFontPath = null, string $labelAlignment = null, array $labelMargin = null) : void
        {
        }
        public function getLabel() : ?string
        {
        }
        public function setLabelFontSize(int $labelFontSize) : void
        {
        }
        public function getLabelFontSize() : int
        {
        }
        public function setLabelFontPath(string $labelFontPath) : void
        {
        }
        public function getLabelFontPath() : string
        {
        }
        public function setLabelAlignment(string $labelAlignment) : void
        {
        }
        public function getLabelAlignment() : string
        {
        }
        /** @param array<string, int> $labelMargin */
        public function setLabelMargin(array $labelMargin) : void
        {
        }
        public function getLabelMargin() : array
        {
        }
        public function setWriterRegistry(\Endroid\QrCode\WriterRegistryInterface $writerRegistry) : void
        {
        }
        public function setWriter(\Endroid\QrCode\Writer\WriterInterface $writer) : void
        {
        }
        public function getWriter(string $name = null) : \Endroid\QrCode\Writer\WriterInterface
        {
        }
        /** @param array<string, mixed> $writerOptions */
        public function setWriterOptions(array $writerOptions) : void
        {
        }
        public function getWriterOptions() : array
        {
        }
        public function setWriterByName(string $name) : void
        {
        }
        public function setWriterByPath(string $path) : void
        {
        }
        public function setWriterByExtension(string $extension) : void
        {
        }
        public function writeString() : string
        {
        }
        public function writeDataUri() : string
        {
        }
        public function writeFile(string $path) : void
        {
        }
        public function getContentType() : string
        {
        }
        public function setValidateResult(bool $validateResult) : void
        {
        }
        public function getValidateResult() : bool
        {
        }
        public function getData() : array
        {
        }
    }
}
namespace Endroid\QrCode\Exception {
    abstract class QrCodeException extends \Exception
    {
    }
    class ValidationException extends \Endroid\QrCode\Exception\QrCodeException
    {
    }
    class InvalidWriterException extends \Endroid\QrCode\Exception\QrCodeException
    {
    }
    class UnsupportedExtensionException extends \Endroid\QrCode\Exception\QrCodeException
    {
    }
    class MissingLogoHeightException extends \Endroid\QrCode\Exception\QrCodeException
    {
    }
    class GenerateImageException extends \Endroid\QrCode\Exception\QrCodeException
    {
    }
    class MissingFunctionException extends \Endroid\QrCode\Exception\QrCodeException
    {
    }
    class InvalidFontException extends \Endroid\QrCode\Exception\QrCodeException
    {
    }
    class MissingExtensionException extends \Endroid\QrCode\Exception\QrCodeException
    {
    }
    class InvalidLogoException extends \Endroid\QrCode\Exception\QrCodeException
    {
    }
}
namespace Endroid\QrCode\Factory {
    interface QrCodeFactoryInterface
    {
        /** @param array<string, mixed> $options */
        public function create(string $text = '', array $options = []) : \Endroid\QrCode\QrCodeInterface;
    }
    class QrCodeFactory implements \Endroid\QrCode\Factory\QrCodeFactoryInterface
    {
        /** @param array<string, mixed> $defaultOptions */
        public function __construct(array $defaultOptions = [], \Endroid\QrCode\WriterRegistryInterface $writerRegistry = null)
        {
        }
        public function create(string $text = '', array $options = []) : \Endroid\QrCode\QrCodeInterface
        {
        }
    }
}
namespace Endroid\QrCode {
    interface WriterRegistryInterface
    {
        /** @param WriterInterface[] $writers */
        public function addWriters(iterable $writers) : void;
        public function addWriter(\Endroid\QrCode\Writer\WriterInterface $writer) : void;
        public function getWriter(string $name) : \Endroid\QrCode\Writer\WriterInterface;
        public function getDefaultWriter() : \Endroid\QrCode\Writer\WriterInterface;
        /** @return WriterInterface[] */
        public function getWriters() : array;
    }
    class WriterRegistry implements \Endroid\QrCode\WriterRegistryInterface
    {
        public function loadDefaultWriters() : void
        {
        }
        public function addWriters(iterable $writers) : void
        {
        }
        public function addWriter(\Endroid\QrCode\Writer\WriterInterface $writer) : void
        {
        }
        public function getWriter(string $name) : \Endroid\QrCode\Writer\WriterInterface
        {
        }
        public function getDefaultWriter() : \Endroid\QrCode\Writer\WriterInterface
        {
        }
        public function setDefaultWriter(string $name) : void
        {
        }
        public function getWriters() : array
        {
        }
    }
    /**
     * @method static ErrorCorrectionLevel LOW()
     * @method static ErrorCorrectionLevel MEDIUM()
     * @method static ErrorCorrectionLevel QUARTILE()
     * @method static ErrorCorrectionLevel HIGH()
     *
     * @extends Enum<string>
     * @psalm-immutable
     */
    class ErrorCorrectionLevel extends \MyCLabs\Enum\Enum
    {
        const LOW = 'low';
        const MEDIUM = 'medium';
        const QUARTILE = 'quartile';
        const HIGH = 'high';
        /**
         * @psalm-suppress ImpureMethodCall
         */
        public function toBaconErrorCorrectionLevel() : \BaconQrCode\Common\ErrorCorrectionLevel
        {
        }
    }
    /**
     * @method static LabelAlignment LEFT()
     * @method static LabelAlignment CENTER()
     * @method static LabelAlignment RIGHT()
     *
     * @extends Enum<string>
     * @psalm-immutable
     */
    class LabelAlignment extends \MyCLabs\Enum\Enum
    {
        const LEFT = 'left';
        const CENTER = 'center';
        const RIGHT = 'right';
    }
}
namespace {
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInit8d11275db931fd436ade8efabs1bf1079
    {
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInit8d11275db931fd436ade8efabs1bf1079
    {
        public static $files = array('0e6d7bf4a5811bfa5cf40c5ccd6fae6a' => __DIR__ . '/..' . '/symfony/polyfill-mbstring/bootstrap.php', 'e69f7f6ee287b969198c3c9d6777bd38' => __DIR__ . '/..' . '/symfony/polyfill-intl-normalizer/bootstrap.php', '8825ede83f2f289127722d4e842cf7e8' => __DIR__ . '/..' . '/symfony/polyfill-intl-grapheme/bootstrap.php', '320cde22f66dd4f5d3fd621d3e88b98f' => __DIR__ . '/..' . '/symfony/polyfill-ctype/bootstrap.php', 'a4a119a56e50fbb293281d9a48007e0e' => __DIR__ . '/..' . '/symfony/polyfill-php80/bootstrap.php', '6e3fae29631ef280660b3cdad06f25a8' => __DIR__ . '/..' . '/symfony/deprecation-contracts/function.php', 'b6b991a57620e2fb6b2f66f03fe9ddc2' => __DIR__ . '/..' . '/symfony/string/Resources/functions.php', '0d59ee240a4cd96ddbb4ff164fccea4d' => __DIR__ . '/..' . '/symfony/polyfill-php73/bootstrap.php', 'a9ed0d27b5a698798a89181429f162c5' => __DIR__ . '/..' . '/khanamiryan/qrcode-detector-decoder/lib/Common/customFunctions.php');
        public static $prefixLengthsPsr4 = array('k' => array('kmukku\\phpIso11649\\' => 19), 'Z' => array('Zxing\\' => 6), 'S' => array('Symfony\\Polyfill\\Php80\\' => 23, 'Symfony\\Polyfill\\Php73\\' => 23, 'Symfony\\Polyfill\\Mbstring\\' => 26, 'Symfony\\Polyfill\\Intl\\Normalizer\\' => 33, 'Symfony\\Polyfill\\Intl\\Grapheme\\' => 31, 'Symfony\\Polyfill\\Ctype\\' => 23, 'Symfony\\Component\\String\\' => 25, 'Symfony\\Component\\PropertyInfo\\' => 31, 'Symfony\\Component\\PropertyAccess\\' => 33, 'Symfony\\Component\\OptionsResolver\\' => 34, 'Sprain\\Tests\\SwissQrBill\\' => 25, 'Sprain\\SwissQrBill\\' => 19), 'M' => array('MyCLabs\\Enum\\' => 13), 'E' => array('Endroid\\QrCode\\' => 15), 'D' => array('DASPRiD\\Enum\\' => 13), 'B' => array('BaconQrCode\\' => 12));
        public static $prefixDirsPsr4 = array('kmukku\\phpIso11649\\' => array(0 => __DIR__ . '/..' . '/kmukku/php-iso11649/src'), 'Zxing\\' => array(0 => __DIR__ . '/..' . '/khanamiryan/qrcode-detector-decoder/lib'), 'Symfony\\Polyfill\\Php80\\' => array(0 => __DIR__ . '/..' . '/symfony/polyfill-php80'), 'Symfony\\Polyfill\\Php73\\' => array(0 => __DIR__ . '/..' . '/symfony/polyfill-php73'), 'Symfony\\Polyfill\\Mbstring\\' => array(0 => __DIR__ . '/..' . '/symfony/polyfill-mbstring'), 'Symfony\\Polyfill\\Intl\\Normalizer\\' => array(0 => __DIR__ . '/..' . '/symfony/polyfill-intl-normalizer'), 'Symfony\\Polyfill\\Intl\\Grapheme\\' => array(0 => __DIR__ . '/..' . '/symfony/polyfill-intl-grapheme'), 'Symfony\\Polyfill\\Ctype\\' => array(0 => __DIR__ . '/..' . '/symfony/polyfill-ctype'), 'Symfony\\Component\\String\\' => array(0 => __DIR__ . '/..' . '/symfony/string'), 'Symfony\\Component\\PropertyInfo\\' => array(0 => __DIR__ . '/..' . '/symfony/property-info'), 'Symfony\\Component\\PropertyAccess\\' => array(0 => __DIR__ . '/..' . '/symfony/property-access'), 'Symfony\\Component\\OptionsResolver\\' => array(0 => __DIR__ . '/..' . '/symfony/options-resolver'), 'Sprain\\Tests\\SwissQrBill\\' => array(0 => __DIR__ . '/../..' . '/tests'), 'Sprain\\SwissQrBill\\' => array(0 => __DIR__ . '/../..' . '/src'), 'MyCLabs\\Enum\\' => array(0 => __DIR__ . '/..' . '/myclabs/php-enum/src'), 'Endroid\\QrCode\\' => array(0 => __DIR__ . '/..' . '/endroid/qr-code/src'), 'DASPRiD\\Enum\\' => array(0 => __DIR__ . '/..' . '/dasprid/enum/src'), 'BaconQrCode\\' => array(0 => __DIR__ . '/..' . '/bacon/bacon-qr-code/src'));
        public static $classMap = array('Attribute' => __DIR__ . '/..' . '/symfony/polyfill-php80/Resources/stubs/Attribute.php', 'Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php', 'JsonException' => __DIR__ . '/..' . '/symfony/polyfill-php73/Resources/stubs/JsonException.php', 'Normalizer' => __DIR__ . '/..' . '/symfony/polyfill-intl-normalizer/Resources/stubs/Normalizer.php', 'Stringable' => __DIR__ . '/..' . '/symfony/polyfill-php80/Resources/stubs/Stringable.php', 'UnhandledMatchError' => __DIR__ . '/..' . '/symfony/polyfill-php80/Resources/stubs/UnhandledMatchError.php', 'ValueError' => __DIR__ . '/..' . '/symfony/polyfill-php80/Resources/stubs/ValueError.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace BaconQrCode\Exception {
    interface ExceptionInterface extends \Throwable
    {
    }
    final class InvalidArgumentException extends \InvalidArgumentException implements \BaconQrCode\Exception\ExceptionInterface
    {
    }
    final class WriterException extends \RuntimeException implements \BaconQrCode\Exception\ExceptionInterface
    {
    }
    final class OutOfBoundsException extends \OutOfBoundsException implements \BaconQrCode\Exception\ExceptionInterface
    {
    }
    final class UnexpectedValueException extends \UnexpectedValueException implements \BaconQrCode\Exception\ExceptionInterface
    {
    }
    final class RuntimeException extends \RuntimeException implements \BaconQrCode\Exception\ExceptionInterface
    {
    }
}
namespace BaconQrCode\Renderer\Color {
    interface ColorInterface
    {
        /**
         * Converts the color to RGB.
         */
        public function toRgb() : \BaconQrCode\Renderer\Color\Rgb;
        /**
         * Converts the color to CMYK.
         */
        public function toCmyk() : \BaconQrCode\Renderer\Color\Cmyk;
        /**
         * Converts the color to gray.
         */
        public function toGray() : \BaconQrCode\Renderer\Color\Gray;
    }
    final class Cmyk implements \BaconQrCode\Renderer\Color\ColorInterface
    {
        /**
         * @param int $cyan the cyan amount, 0 to 100
         * @param int $magenta the magenta amount, 0 to 100
         * @param int $yellow the yellow amount, 0 to 100
         * @param int $black the black amount, 0 to 100
         */
        public function __construct(int $cyan, int $magenta, int $yellow, int $black)
        {
        }
        public function getCyan() : int
        {
        }
        public function getMagenta() : int
        {
        }
        public function getYellow() : int
        {
        }
        public function getBlack() : int
        {
        }
        public function toRgb() : \BaconQrCode\Renderer\Color\Rgb
        {
        }
        public function toCmyk() : \BaconQrCode\Renderer\Color\Cmyk
        {
        }
        public function toGray() : \BaconQrCode\Renderer\Color\Gray
        {
        }
    }
    final class Gray implements \BaconQrCode\Renderer\Color\ColorInterface
    {
        /**
         * @param int $gray the gray value between 0 (black) and 100 (white)
         */
        public function __construct(int $gray)
        {
        }
        public function getGray() : int
        {
        }
        public function toRgb() : \BaconQrCode\Renderer\Color\Rgb
        {
        }
        public function toCmyk() : \BaconQrCode\Renderer\Color\Cmyk
        {
        }
        public function toGray() : \BaconQrCode\Renderer\Color\Gray
        {
        }
    }
    final class Alpha implements \BaconQrCode\Renderer\Color\ColorInterface
    {
        /**
         * @param int $alpha the alpha value, 0 to 100
         */
        public function __construct(int $alpha, \BaconQrCode\Renderer\Color\ColorInterface $baseColor)
        {
        }
        public function getAlpha() : int
        {
        }
        public function getBaseColor() : \BaconQrCode\Renderer\Color\ColorInterface
        {
        }
        public function toRgb() : \BaconQrCode\Renderer\Color\Rgb
        {
        }
        public function toCmyk() : \BaconQrCode\Renderer\Color\Cmyk
        {
        }
        public function toGray() : \BaconQrCode\Renderer\Color\Gray
        {
        }
    }
    final class Rgb implements \BaconQrCode\Renderer\Color\ColorInterface
    {
        /**
         * @param int $red the red amount of the color, 0 to 255
         * @param int $green the green amount of the color, 0 to 255
         * @param int $blue the blue amount of the color, 0 to 255
         */
        public function __construct(int $red, int $green, int $blue)
        {
        }
        public function getRed() : int
        {
        }
        public function getGreen() : int
        {
        }
        public function getBlue() : int
        {
        }
        public function toRgb() : \BaconQrCode\Renderer\Color\Rgb
        {
        }
        public function toCmyk() : \BaconQrCode\Renderer\Color\Cmyk
        {
        }
        public function toGray() : \BaconQrCode\Renderer\Color\Gray
        {
        }
    }
}
namespace BaconQrCode\Renderer\Eye {
    /**
     * Interface for describing the look of an eye.
     */
    interface EyeInterface
    {
        /**
         * Returns the path of the external eye element.
         *
         * The path origin point (0, 0) must be anchored at the middle of the path.
         */
        public function getExternalPath() : \BaconQrCode\Renderer\Path\Path;
        /**
         * Returns the path of the internal eye element.
         *
         * The path origin point (0, 0) must be anchored at the middle of the path.
         */
        public function getInternalPath() : \BaconQrCode\Renderer\Path\Path;
    }
    /**
     * Renders the inner eye as a circle.
     */
    final class SimpleCircleEye implements \BaconQrCode\Renderer\Eye\EyeInterface
    {
        public static function instance() : self
        {
        }
        public function getExternalPath() : \BaconQrCode\Renderer\Path\Path
        {
        }
        public function getInternalPath() : \BaconQrCode\Renderer\Path\Path
        {
        }
    }
    /**
     * Combines the style of two different eyes.
     */
    final class CompositeEye implements \BaconQrCode\Renderer\Eye\EyeInterface
    {
        public function __construct(\BaconQrCode\Renderer\Eye\EyeInterface $externalEye, \BaconQrCode\Renderer\Eye\EyeInterface $internalEye)
        {
        }
        public function getExternalPath() : \BaconQrCode\Renderer\Path\Path
        {
        }
        public function getInternalPath() : \BaconQrCode\Renderer\Path\Path
        {
        }
    }
    /**
     * Renders an eye based on a module renderer.
     */
    final class ModuleEye implements \BaconQrCode\Renderer\Eye\EyeInterface
    {
        public function __construct(\BaconQrCode\Renderer\Module\ModuleInterface $module)
        {
        }
        public function getExternalPath() : \BaconQrCode\Renderer\Path\Path
        {
        }
        public function getInternalPath() : \BaconQrCode\Renderer\Path\Path
        {
        }
    }
    /**
     * Renders the eyes in their default square shape.
     */
    final class SquareEye implements \BaconQrCode\Renderer\Eye\EyeInterface
    {
        public static function instance() : self
        {
        }
        public function getExternalPath() : \BaconQrCode\Renderer\Path\Path
        {
        }
        public function getInternalPath() : \BaconQrCode\Renderer\Path\Path
        {
        }
    }
}
namespace BaconQrCode\Renderer\Image {
    final class TransformationMatrix
    {
        public function __construct()
        {
        }
        public function multiply(self $other) : self
        {
        }
        public static function scale(float $size) : self
        {
        }
        public static function translate(float $x, float $y) : self
        {
        }
        public static function rotate(int $degrees) : self
        {
        }
        /**
         * Applies this matrix onto a point and returns the resulting viewport point.
         *
         * @return float[]
         */
        public function apply(float $x, float $y) : array
        {
        }
    }
    /**
     * Interface for back ends able to to produce path based images.
     */
    interface ImageBackEndInterface
    {
        /**
         * Starts a new image.
         *
         * If a previous image was already started, previous data get erased.
         */
        public function new(int $size, \BaconQrCode\Renderer\Color\ColorInterface $backgroundColor) : void;
        /**
         * Transforms all following drawing operation coordinates by scaling them by a given factor.
         *
         * @throws RuntimeException if no image was started yet.
         */
        public function scale(float $size) : void;
        /**
         * Transforms all following drawing operation coordinates by translating them by a given amount.
         *
         * @throws RuntimeException if no image was started yet.
         */
        public function translate(float $x, float $y) : void;
        /**
         * Transforms all following drawing operation coordinates by rotating them by a given amount.
         *
         * @throws RuntimeException if no image was started yet.
         */
        public function rotate(int $degrees) : void;
        /**
         * Pushes the current coordinate transformation onto a stack.
         *
         * @throws RuntimeException if no image was started yet.
         */
        public function push() : void;
        /**
         * Pops the last coordinate transformation from a stack.
         *
         * @throws RuntimeException if no image was started yet.
         */
        public function pop() : void;
        /**
         * Draws a path with a given color.
         *
         * @throws RuntimeException if no image was started yet.
         */
        public function drawPathWithColor(\BaconQrCode\Renderer\Path\Path $path, \BaconQrCode\Renderer\Color\ColorInterface $color) : void;
        /**
         * Draws a path with a given gradient which spans the box described by the position and size.
         *
         * @throws RuntimeException if no image was started yet.
         */
        public function drawPathWithGradient(\BaconQrCode\Renderer\Path\Path $path, \BaconQrCode\Renderer\RendererStyle\Gradient $gradient, float $x, float $y, float $width, float $height) : void;
        /**
         * Ends the image drawing operation and returns the resulting blob.
         *
         * This should reset the state of the back end and thus this method should only be callable once per image.
         *
         * @throws RuntimeException if no image was started yet.
         */
        public function done() : string;
    }
    final class EpsImageBackEnd implements \BaconQrCode\Renderer\Image\ImageBackEndInterface
    {
        public function new(int $size, \BaconQrCode\Renderer\Color\ColorInterface $backgroundColor) : void
        {
        }
        public function scale(float $size) : void
        {
        }
        public function translate(float $x, float $y) : void
        {
        }
        public function rotate(int $degrees) : void
        {
        }
        public function push() : void
        {
        }
        public function pop() : void
        {
        }
        public function drawPathWithColor(\BaconQrCode\Renderer\Path\Path $path, \BaconQrCode\Renderer\Color\ColorInterface $color) : void
        {
        }
        public function drawPathWithGradient(\BaconQrCode\Renderer\Path\Path $path, \BaconQrCode\Renderer\RendererStyle\Gradient $gradient, float $x, float $y, float $width, float $height) : void
        {
        }
        public function done() : string
        {
        }
    }
    final class SvgImageBackEnd implements \BaconQrCode\Renderer\Image\ImageBackEndInterface
    {
        public function __construct()
        {
        }
        public function new(int $size, \BaconQrCode\Renderer\Color\ColorInterface $backgroundColor) : void
        {
        }
        public function scale(float $size) : void
        {
        }
        public function translate(float $x, float $y) : void
        {
        }
        public function rotate(int $degrees) : void
        {
        }
        public function push() : void
        {
        }
        public function pop() : void
        {
        }
        public function drawPathWithColor(\BaconQrCode\Renderer\Path\Path $path, \BaconQrCode\Renderer\Color\ColorInterface $color) : void
        {
        }
        public function drawPathWithGradient(\BaconQrCode\Renderer\Path\Path $path, \BaconQrCode\Renderer\RendererStyle\Gradient $gradient, float $x, float $y, float $width, float $height) : void
        {
        }
        public function done() : string
        {
        }
    }
    final class ImagickImageBackEnd implements \BaconQrCode\Renderer\Image\ImageBackEndInterface
    {
        public function __construct(string $imageFormat = 'png', int $compressionQuality = 100)
        {
        }
        public function new(int $size, \BaconQrCode\Renderer\Color\ColorInterface $backgroundColor) : void
        {
        }
        public function scale(float $size) : void
        {
        }
        public function translate(float $x, float $y) : void
        {
        }
        public function rotate(int $degrees) : void
        {
        }
        public function push() : void
        {
        }
        public function pop() : void
        {
        }
        public function drawPathWithColor(\BaconQrCode\Renderer\Path\Path $path, \BaconQrCode\Renderer\Color\ColorInterface $color) : void
        {
        }
        public function drawPathWithGradient(\BaconQrCode\Renderer\Path\Path $path, \BaconQrCode\Renderer\RendererStyle\Gradient $gradient, float $x, float $y, float $width, float $height) : void
        {
        }
        public function done() : string
        {
        }
    }
}
namespace BaconQrCode\Renderer {
    interface RendererInterface
    {
        public function render(\BaconQrCode\Encoder\QrCode $qrCode) : string;
    }
    final class ImageRenderer implements \BaconQrCode\Renderer\RendererInterface
    {
        public function __construct(\BaconQrCode\Renderer\RendererStyle\RendererStyle $rendererStyle, \BaconQrCode\Renderer\Image\ImageBackEndInterface $imageBackEnd)
        {
        }
        /**
         * @throws InvalidArgumentException if matrix width doesn't match height
         */
        public function render(\BaconQrCode\Encoder\QrCode $qrCode) : string
        {
        }
    }
    final class PlainTextRenderer implements \BaconQrCode\Renderer\RendererInterface
    {
        public function __construct(int $margin = 2)
        {
        }
        /**
         * @throws InvalidArgumentException if matrix width doesn't match height
         */
        public function render(\BaconQrCode\Encoder\QrCode $qrCode) : string
        {
        }
    }
}
namespace BaconQrCode\Renderer\RendererStyle {
    final class Fill
    {
        public static function default() : self
        {
        }
        public static function withForegroundColor(\BaconQrCode\Renderer\Color\ColorInterface $backgroundColor, \BaconQrCode\Renderer\Color\ColorInterface $foregroundColor, \BaconQrCode\Renderer\RendererStyle\EyeFill $topLeftEyeFill, \BaconQrCode\Renderer\RendererStyle\EyeFill $topRightEyeFill, \BaconQrCode\Renderer\RendererStyle\EyeFill $bottomLeftEyeFill) : self
        {
        }
        public static function withForegroundGradient(\BaconQrCode\Renderer\Color\ColorInterface $backgroundColor, \BaconQrCode\Renderer\RendererStyle\Gradient $foregroundGradient, \BaconQrCode\Renderer\RendererStyle\EyeFill $topLeftEyeFill, \BaconQrCode\Renderer\RendererStyle\EyeFill $topRightEyeFill, \BaconQrCode\Renderer\RendererStyle\EyeFill $bottomLeftEyeFill) : self
        {
        }
        public static function uniformColor(\BaconQrCode\Renderer\Color\ColorInterface $backgroundColor, \BaconQrCode\Renderer\Color\ColorInterface $foregroundColor) : self
        {
        }
        public static function uniformGradient(\BaconQrCode\Renderer\Color\ColorInterface $backgroundColor, \BaconQrCode\Renderer\RendererStyle\Gradient $foregroundGradient) : self
        {
        }
        public function hasGradientFill() : bool
        {
        }
        public function getBackgroundColor() : \BaconQrCode\Renderer\Color\ColorInterface
        {
        }
        public function getForegroundColor() : \BaconQrCode\Renderer\Color\ColorInterface
        {
        }
        public function getForegroundGradient() : \BaconQrCode\Renderer\RendererStyle\Gradient
        {
        }
        public function getTopLeftEyeFill() : \BaconQrCode\Renderer\RendererStyle\EyeFill
        {
        }
        public function getTopRightEyeFill() : \BaconQrCode\Renderer\RendererStyle\EyeFill
        {
        }
        public function getBottomLeftEyeFill() : \BaconQrCode\Renderer\RendererStyle\EyeFill
        {
        }
    }
    final class Gradient
    {
        public function __construct(\BaconQrCode\Renderer\Color\ColorInterface $startColor, \BaconQrCode\Renderer\Color\ColorInterface $endColor, \BaconQrCode\Renderer\RendererStyle\GradientType $type)
        {
        }
        public function getStartColor() : \BaconQrCode\Renderer\Color\ColorInterface
        {
        }
        public function getEndColor() : \BaconQrCode\Renderer\Color\ColorInterface
        {
        }
        public function getType() : \BaconQrCode\Renderer\RendererStyle\GradientType
        {
        }
    }
    final class RendererStyle
    {
        public function __construct(int $size, int $margin = 4, ?\BaconQrCode\Renderer\Module\ModuleInterface $module = null, ?\BaconQrCode\Renderer\Eye\EyeInterface $eye = null, ?\BaconQrCode\Renderer\RendererStyle\Fill $fill = null)
        {
        }
        public function withSize(int $size) : self
        {
        }
        public function withMargin(int $margin) : self
        {
        }
        public function getSize() : int
        {
        }
        public function getMargin() : int
        {
        }
        public function getModule() : \BaconQrCode\Renderer\Module\ModuleInterface
        {
        }
        public function getEye() : \BaconQrCode\Renderer\Eye\EyeInterface
        {
        }
        public function getFill() : \BaconQrCode\Renderer\RendererStyle\Fill
        {
        }
    }
    final class EyeFill
    {
        public function __construct(?\BaconQrCode\Renderer\Color\ColorInterface $externalColor, ?\BaconQrCode\Renderer\Color\ColorInterface $internalColor)
        {
        }
        public static function uniform(\BaconQrCode\Renderer\Color\ColorInterface $color) : self
        {
        }
        public static function inherit() : self
        {
        }
        public function inheritsBothColors() : bool
        {
        }
        public function inheritsExternalColor() : bool
        {
        }
        public function inheritsInternalColor() : bool
        {
        }
        public function getExternalColor() : \BaconQrCode\Renderer\Color\ColorInterface
        {
        }
        public function getInternalColor() : \BaconQrCode\Renderer\Color\ColorInterface
        {
        }
    }
    /**
     * @method static self VERTICAL()
     * @method static self HORIZONTAL()
     * @method static self DIAGONAL()
     * @method static self INVERSE_DIAGONAL()
     * @method static self RADIAL()
     */
    final class GradientType extends \DASPRiD\Enum\AbstractEnum
    {
    }
}
namespace BaconQrCode\Renderer\Module {
    /**
     * Interface describing how modules should be rendered.
     *
     * A module always receives a byte matrix (with values either being 1 or 0). It returns a path, where the origin
     * coordinate (0, 0) equals the top left corner of the first matrix value.
     */
    interface ModuleInterface
    {
        public function createPath(\BaconQrCode\Encoder\ByteMatrix $matrix) : \BaconQrCode\Renderer\Path\Path;
    }
}
namespace BaconQrCode\Renderer\Module\EdgeIterator {
    /**
     * Edge iterator based on potrace.
     */
    final class EdgeIterator implements \IteratorAggregate
    {
        public function __construct(\BaconQrCode\Encoder\ByteMatrix $matrix)
        {
        }
        /**
         * @return Edge[]
         */
        public function getIterator() : \Traversable
        {
        }
    }
    final class Edge
    {
        public function __construct(bool $positive)
        {
        }
        public function addPoint(int $x, int $y) : void
        {
        }
        public function isPositive() : bool
        {
        }
        /**
         * @return array<int[]>
         */
        public function getPoints() : array
        {
        }
        public function getMaxX() : int
        {
        }
        public function getSimplifiedPoints() : array
        {
        }
    }
}
namespace BaconQrCode\Renderer\Module {
    /**
     * Renders individual modules as dots.
     */
    final class DotsModule implements \BaconQrCode\Renderer\Module\ModuleInterface
    {
        public const LARGE = 1;
        public const MEDIUM = 0.8;
        public const SMALL = 0.6;
        public function __construct(float $size)
        {
        }
        public function createPath(\BaconQrCode\Encoder\ByteMatrix $matrix) : \BaconQrCode\Renderer\Path\Path
        {
        }
    }
    /**
     * Rounds the corners of module groups.
     */
    final class RoundnessModule implements \BaconQrCode\Renderer\Module\ModuleInterface
    {
        public const STRONG = 1;
        public const MEDIUM = 0.5;
        public const SOFT = 0.25;
        public function __construct(float $intensity)
        {
        }
        public function createPath(\BaconQrCode\Encoder\ByteMatrix $matrix) : \BaconQrCode\Renderer\Path\Path
        {
        }
    }
    /**
     * Groups modules together to a single path.
     */
    final class SquareModule implements \BaconQrCode\Renderer\Module\ModuleInterface
    {
        public static function instance() : self
        {
        }
        public function createPath(\BaconQrCode\Encoder\ByteMatrix $matrix) : \BaconQrCode\Renderer\Path\Path
        {
        }
    }
}
namespace BaconQrCode\Renderer\Path {
    interface OperationInterface
    {
        /**
         * Translates the operation's coordinates.
         */
        public function translate(float $x, float $y) : self;
    }
    final class Curve implements \BaconQrCode\Renderer\Path\OperationInterface
    {
        public function __construct(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3)
        {
        }
        public function getX1() : float
        {
        }
        public function getY1() : float
        {
        }
        public function getX2() : float
        {
        }
        public function getY2() : float
        {
        }
        public function getX3() : float
        {
        }
        public function getY3() : float
        {
        }
        /**
         * @return self
         */
        public function translate(float $x, float $y) : \BaconQrCode\Renderer\Path\OperationInterface
        {
        }
    }
    final class Move implements \BaconQrCode\Renderer\Path\OperationInterface
    {
        public function __construct(float $x, float $y)
        {
        }
        public function getX() : float
        {
        }
        public function getY() : float
        {
        }
        /**
         * @return self
         */
        public function translate(float $x, float $y) : \BaconQrCode\Renderer\Path\OperationInterface
        {
        }
    }
    /**
     * Internal Representation of a vector path.
     */
    final class Path implements \IteratorAggregate
    {
        /**
         * Moves the drawing operation to a certain position.
         */
        public function move(float $x, float $y) : self
        {
        }
        /**
         * Draws a line from the current position to another position.
         */
        public function line(float $x, float $y) : self
        {
        }
        /**
         * Draws an elliptic arc from the current position to another position.
         */
        public function ellipticArc(float $xRadius, float $yRadius, float $xAxisRotation, bool $largeArc, bool $sweep, float $x, float $y) : self
        {
        }
        /**
         * Draws a curve from the current position to another position.
         */
        public function curve(float $x1, float $y1, float $x2, float $y2, float $x3, float $y3) : self
        {
        }
        /**
         * Closes a sub-path.
         */
        public function close() : self
        {
        }
        /**
         * Appends another path to this one.
         */
        public function append(self $other) : self
        {
        }
        public function translate(float $x, float $y) : self
        {
        }
        /**
         * @return OperationInterface[]|Traversable
         */
        public function getIterator() : \Traversable
        {
        }
    }
    final class Line implements \BaconQrCode\Renderer\Path\OperationInterface
    {
        public function __construct(float $x, float $y)
        {
        }
        public function getX() : float
        {
        }
        public function getY() : float
        {
        }
        /**
         * @return self
         */
        public function translate(float $x, float $y) : \BaconQrCode\Renderer\Path\OperationInterface
        {
        }
    }
    final class EllipticArc implements \BaconQrCode\Renderer\Path\OperationInterface
    {
        public function __construct(float $xRadius, float $yRadius, float $xAxisAngle, bool $largeArc, bool $sweep, float $x, float $y)
        {
        }
        public function getXRadius() : float
        {
        }
        public function getYRadius() : float
        {
        }
        public function getXAxisAngle() : float
        {
        }
        public function isLargeArc() : bool
        {
        }
        public function isSweep() : bool
        {
        }
        public function getX() : float
        {
        }
        public function getY() : float
        {
        }
        /**
         * @return self
         */
        public function translate(float $x, float $y) : \BaconQrCode\Renderer\Path\OperationInterface
        {
        }
        /**
         * Converts the elliptic arc to multiple curves.
         *
         * Since not all image back ends support elliptic arcs, this method allows to convert the arc into multiple curves
         * resembling the same result.
         *
         * @see https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/
         * @return array<Curve|Line>
         */
        public function toCurves(float $fromX, float $fromY) : array
        {
        }
    }
    final class Close implements \BaconQrCode\Renderer\Path\OperationInterface
    {
        public static function instance() : self
        {
        }
        /**
         * @return self
         */
        public function translate(float $x, float $y) : \BaconQrCode\Renderer\Path\OperationInterface
        {
        }
    }
}
namespace BaconQrCode\Encoder {
    /**
     * QR code.
     */
    final class QrCode
    {
        /**
         * Number of possible mask patterns.
         */
        public const NUM_MASK_PATTERNS = 8;
        public function __construct(\BaconQrCode\Common\Mode $mode, \BaconQrCode\Common\ErrorCorrectionLevel $errorCorrectionLevel, \BaconQrCode\Common\Version $version, int $maskPattern, \BaconQrCode\Encoder\ByteMatrix $matrix)
        {
        }
        /**
         * Gets the mode.
         */
        public function getMode() : \BaconQrCode\Common\Mode
        {
        }
        /**
         * Gets the EC level.
         */
        public function getErrorCorrectionLevel() : \BaconQrCode\Common\ErrorCorrectionLevel
        {
        }
        /**
         * Gets the version.
         */
        public function getVersion() : \BaconQrCode\Common\Version
        {
        }
        /**
         * Gets the mask pattern.
         */
        public function getMaskPattern() : int
        {
        }
        /**
         * Gets the matrix.
         *
         * @return ByteMatrix
         */
        public function getMatrix()
        {
        }
        /**
         * Validates whether a mask pattern is valid.
         */
        public static function isValidMaskPattern(int $maskPattern) : bool
        {
        }
        /**
         * Returns a string representation of the QR code.
         */
        public function __toString() : string
        {
        }
    }
    /**
     * Mask utility.
     */
    final class MaskUtil
    {
        /**#@+
         * Penalty weights from section 6.8.2.1
         */
        const N1 = 3;
        const N2 = 3;
        const N3 = 40;
        const N4 = 10;
        /**
         * Applies mask penalty rule 1 and returns the penalty.
         *
         * Finds repetitive cells with the same color and gives penalty to them.
         * Example: 00000 or 11111.
         */
        public static function applyMaskPenaltyRule1(\BaconQrCode\Encoder\ByteMatrix $matrix) : int
        {
        }
        /**
         * Applies mask penalty rule 2 and returns the penalty.
         *
         * Finds 2x2 blocks with the same color and gives penalty to them. This is
         * actually equivalent to the spec's rule, which is to find MxN blocks and
         * give a penalty proportional to (M-1)x(N-1), because this is the number of
         * 2x2 blocks inside such a block.
         */
        public static function applyMaskPenaltyRule2(\BaconQrCode\Encoder\ByteMatrix $matrix) : int
        {
        }
        /**
         * Applies mask penalty rule 3 and returns the penalty.
         *
         * Finds consecutive cells of 00001011101 or 10111010000, and gives penalty
         * to them. If we find patterns like 000010111010000, we give penalties
         * twice (i.e. 40 * 2).
         */
        public static function applyMaskPenaltyRule3(\BaconQrCode\Encoder\ByteMatrix $matrix) : int
        {
        }
        /**
         * Applies mask penalty rule 4 and returns the penalty.
         *
         * Calculates the ratio of dark cells and gives penalty if the ratio is far
         * from 50%. It gives 10 penalty for 5% distance.
         */
        public static function applyMaskPenaltyRule4(\BaconQrCode\Encoder\ByteMatrix $matrix) : int
        {
        }
        /**
         * Returns the mask bit for "getMaskPattern" at "x" and "y".
         *
         * See 8.8 of JISX0510:2004 for mask pattern conditions.
         *
         * @throws InvalidArgumentException if an invalid mask pattern was supplied
         */
        public static function getDataMaskBit(int $maskPattern, int $x, int $y) : bool
        {
        }
    }
    /**
     * Byte matrix.
     */
    final class ByteMatrix
    {
        public function __construct(int $width, int $height)
        {
        }
        /**
         * Gets the width of the matrix.
         */
        public function getWidth() : int
        {
        }
        /**
         * Gets the height of the matrix.
         */
        public function getHeight() : int
        {
        }
        /**
         * Gets the internal representation of the matrix.
         *
         * @return SplFixedArray<SplFixedArray<int>>
         */
        public function getArray() : \SplFixedArray
        {
        }
        /**
         * @return Traversable<int>
         */
        public function getBytes() : \Traversable
        {
        }
        /**
         * Gets the byte for a specific position.
         */
        public function get(int $x, int $y) : int
        {
        }
        /**
         * Sets the byte for a specific position.
         */
        public function set(int $x, int $y, int $value) : void
        {
        }
        /**
         * Clears the matrix with a specific value.
         */
        public function clear(int $value) : void
        {
        }
        public function __clone()
        {
        }
        /**
         * Returns a string representation of the matrix.
         */
        public function __toString() : string
        {
        }
    }
    /**
     * Matrix utility.
     */
    final class MatrixUtil
    {
        /**
         * Clears a given matrix.
         */
        public static function clearMatrix(\BaconQrCode\Encoder\ByteMatrix $matrix) : void
        {
        }
        /**
         * Builds a complete matrix.
         */
        public static function buildMatrix(\BaconQrCode\Common\BitArray $dataBits, \BaconQrCode\Common\ErrorCorrectionLevel $level, \BaconQrCode\Common\Version $version, int $maskPattern, \BaconQrCode\Encoder\ByteMatrix $matrix) : void
        {
        }
        /**
         * Removes the position detection patterns from a matrix.
         *
         * This can be useful if you need to render those patterns separately.
         */
        public static function removePositionDetectionPatterns(\BaconQrCode\Encoder\ByteMatrix $matrix) : void
        {
        }
    }
    /**
     * Block pair.
     */
    final class BlockPair
    {
        /**
         * Creates a new block pair.
         *
         * @param SplFixedArray<int> $data
         * @param SplFixedArray<int> $errorCorrection
         */
        public function __construct(\SplFixedArray $data, \SplFixedArray $errorCorrection)
        {
        }
        /**
         * Gets the data bytes.
         *
         * @return SplFixedArray<int>
         */
        public function getDataBytes() : \SplFixedArray
        {
        }
        /**
         * Gets the error correction bytes.
         *
         * @return SplFixedArray<int>
         */
        public function getErrorCorrectionBytes() : \SplFixedArray
        {
        }
    }
    /**
     * Encoder.
     */
    final class Encoder
    {
        /**
         * Default byte encoding.
         */
        public const DEFAULT_BYTE_MODE_ECODING = 'ISO-8859-1';
        /**
         * Encodes "content" with the error correction level "ecLevel".
         */
        public static function encode(string $content, \BaconQrCode\Common\ErrorCorrectionLevel $ecLevel, string $encoding = self::DEFAULT_BYTE_MODE_ECODING) : \BaconQrCode\Encoder\QrCode
        {
        }
    }
}
namespace BaconQrCode {
    /**
     * QR code writer.
     */
    final class Writer
    {
        /**
         * Creates a new writer with a specific renderer.
         */
        public function __construct(\BaconQrCode\Renderer\RendererInterface $renderer)
        {
        }
        /**
         * Writes QR code and returns it as string.
         *
         * Content is a string which *should* be encoded in UTF-8, in case there are
         * non ASCII-characters present.
         *
         * @throws InvalidArgumentException if the content is empty
         */
        public function writeString(string $content, string $encoding = \BaconQrCode\Encoder\Encoder::DEFAULT_BYTE_MODE_ECODING, ?\BaconQrCode\Common\ErrorCorrectionLevel $ecLevel = null) : string
        {
        }
        /**
         * Writes QR code to a file.
         *
         * @see Writer::writeString()
         */
        public function writeFile(string $content, string $filename, string $encoding = \BaconQrCode\Encoder\Encoder::DEFAULT_BYTE_MODE_ECODING, ?\BaconQrCode\Common\ErrorCorrectionLevel $ecLevel = null) : void
        {
        }
    }
}
namespace BaconQrCode\Common {
    /**
     * General bit utilities.
     *
     * All utility methods are based on 32-bit integers and also work on 64-bit
     * systems.
     */
    final class BitUtils
    {
        /**
         * Performs an unsigned right shift.
         *
         * This is the same as the unsigned right shift operator ">>>" in other
         * languages.
         */
        public static function unsignedRightShift(int $a, int $b) : int
        {
        }
        /**
         * Gets the number of trailing zeros.
         */
        public static function numberOfTrailingZeros(int $i) : int
        {
        }
    }
    /**
     * Enum representing various modes in which data can be encoded to bits.
     *
     * @method static self TERMINATOR()
     * @method static self NUMERIC()
     * @method static self ALPHANUMERIC()
     * @method static self STRUCTURED_APPEND()
     * @method static self BYTE()
     * @method static self ECI()
     * @method static self KANJI()
     * @method static self FNC1_FIRST_POSITION()
     * @method static self FNC1_SECOND_POSITION()
     * @method static self HANZI()
     */
    final class Mode extends \DASPRiD\Enum\AbstractEnum
    {
        /**
         * Returns the number of bits used in a specific QR code version.
         */
        public function getCharacterCountBits(\BaconQrCode\Common\Version $version) : int
        {
        }
        /**
         * Returns the four bits used to encode this mode.
         */
        public function getBits() : int
        {
        }
    }
    /**
     * A simple, fast array of bits.
     */
    final class BitArray
    {
        /**
         * Creates a new bit array with a given size.
         */
        public function __construct(int $size = 0)
        {
        }
        /**
         * Gets the size in bits.
         */
        public function getSize() : int
        {
        }
        /**
         * Gets the size in bytes.
         */
        public function getSizeInBytes() : int
        {
        }
        /**
         * Ensures that the array has a minimum capacity.
         */
        public function ensureCapacity(int $size) : void
        {
        }
        /**
         * Gets a specific bit.
         */
        public function get(int $i) : bool
        {
        }
        /**
         * Sets a specific bit.
         */
        public function set(int $i) : void
        {
        }
        /**
         * Flips a specific bit.
         */
        public function flip(int $i) : void
        {
        }
        /**
         * Gets the next set bit position from a given position.
         */
        public function getNextSet(int $from) : int
        {
        }
        /**
         * Gets the next unset bit position from a given position.
         */
        public function getNextUnset(int $from) : int
        {
        }
        /**
         * Sets a bulk of bits.
         */
        public function setBulk(int $i, int $newBits) : void
        {
        }
        /**
         * Sets a range of bits.
         *
         * @throws InvalidArgumentException if end is smaller than start
         */
        public function setRange(int $start, int $end) : void
        {
        }
        /**
         * Clears the bit array, unsetting every bit.
         */
        public function clear() : void
        {
        }
        /**
         * Checks if a range of bits is set or not set.
         * @throws InvalidArgumentException if end is smaller than start
         */
        public function isRange(int $start, int $end, bool $value) : bool
        {
        }
        /**
         * Appends a bit to the array.
         */
        public function appendBit(bool $bit) : void
        {
        }
        /**
         * Appends a number of bits (up to 32) to the array.
         * @throws InvalidArgumentException if num bits is not between 0 and 32
         */
        public function appendBits(int $value, int $numBits) : void
        {
        }
        /**
         * Appends another bit array to this array.
         */
        public function appendBitArray(self $other) : void
        {
        }
        /**
         * Makes an exclusive-or comparision on the current bit array.
         *
         * @throws InvalidArgumentException if sizes don't match
         */
        public function xorBits(self $other) : void
        {
        }
        /**
         * Converts the bit array to a byte array.
         *
         * @return SplFixedArray<int>
         */
        public function toBytes(int $bitOffset, int $numBytes) : \SplFixedArray
        {
        }
        /**
         * Gets the internal bit array.
         *
         * @return SplFixedArray<int>
         */
        public function getBitArray() : \SplFixedArray
        {
        }
        /**
         * Reverses the array.
         */
        public function reverse() : void
        {
        }
        /**
         * Returns a string representation of the bit array.
         */
        public function __toString() : string
        {
        }
    }
    /**
     * Enum representing the four error correction levels.
     *
     * @method static self L() ~7% correction
     * @method static self M() ~15% correction
     * @method static self Q() ~25% correction
     * @method static self H() ~30% correction
     */
    final class ErrorCorrectionLevel extends \DASPRiD\Enum\AbstractEnum
    {
        /**
         * @throws OutOfBoundsException if number of bits is invalid
         */
        public static function forBits(int $bits) : self
        {
        }
        /**
         * Returns the two bits used to encode this error correction level.
         */
        public function getBits() : int
        {
        }
    }
    /**
     * Reed-Solomon codec for 8-bit characters.
     *
     * Based on libfec by Phil Karn, KA9Q.
     */
    final class ReedSolomonCodec
    {
        /**
         * @throws InvalidArgumentException if symbol size ist not between 0 and 8
         * @throws InvalidArgumentException if first root is invalid
         * @throws InvalidArgumentException if num roots is invalid
         * @throws InvalidArgumentException if padding is invalid
         * @throws RuntimeException if field generator polynomial is not primitive
         */
        public function __construct(int $symbolSize, int $gfPoly, int $firstRoot, int $primitive, int $numRoots, int $padding)
        {
        }
        /**
         * Encodes data and writes result back into parity array.
         */
        public function encode(\SplFixedArray $data, \SplFixedArray $parity) : void
        {
        }
        /**
         * Decodes received data.
         */
        public function decode(\SplFixedArray $data, \SplFixedArray $erasures = null) : ?int
        {
        }
    }
    /**
     * Version representation.
     */
    final class Version
    {
        /**
         * Returns the version number.
         */
        public function getVersionNumber() : int
        {
        }
        /**
         * Returns the alignment pattern centers.
         *
         * @return int[]
         */
        public function getAlignmentPatternCenters() : array
        {
        }
        /**
         * Returns the total number of codewords.
         */
        public function getTotalCodewords() : int
        {
        }
        /**
         * Calculates the dimension for the current version.
         */
        public function getDimensionForVersion() : int
        {
        }
        /**
         * Returns the number of EC blocks for a specific EC level.
         */
        public function getEcBlocksForLevel(\BaconQrCode\Common\ErrorCorrectionLevel $ecLevel) : \BaconQrCode\Common\EcBlocks
        {
        }
        /**
         * Gets a provisional version number for a specific dimension.
         *
         * @throws InvalidArgumentException if dimension is not 1 mod 4
         */
        public static function getProvisionalVersionForDimension(int $dimension) : self
        {
        }
        /**
         * Gets a version instance for a specific version number.
         *
         * @throws InvalidArgumentException if version number is out of range
         */
        public static function getVersionForNumber(int $versionNumber) : self
        {
        }
        /**
         * Decodes version information from an integer and returns the version.
         */
        public static function decodeVersionInformation(int $versionBits) : ?self
        {
        }
        /**
         * Builds the function pattern for the current version.
         */
        public function buildFunctionPattern() : \BaconQrCode\Common\BitMatrix
        {
        }
        /**
         * Returns a string representation for the version.
         */
        public function __toString() : string
        {
        }
    }
    /**
     * Encapsulates a QR Code's format information, including the data mask used and error correction level.
     */
    class FormatInformation
    {
        protected function __construct(int $formatInfo)
        {
        }
        /**
         * Checks how many bits are different between two integers.
         */
        public static function numBitsDiffering(int $a, int $b) : int
        {
        }
        /**
         * Decodes format information.
         */
        public static function decodeFormatInformation(int $maskedFormatInfo1, int $maskedFormatInfo2) : ?self
        {
        }
        /**
         * Returns the error correction level.
         */
        public function getErrorCorrectionLevel() : \BaconQrCode\Common\ErrorCorrectionLevel
        {
        }
        /**
         * Returns the data mask.
         */
        public function getDataMask() : int
        {
        }
        /**
         * Hashes the code of the EC level.
         */
        public function hashCode() : int
        {
        }
        /**
         * Verifies if this instance equals another one.
         */
        public function equals(self $other) : bool
        {
        }
    }
    /**
     * Encapsulates the parameters for one error-correction block in one symbol version.
     *
     * This includes the number of data codewords, and the number of times a block with these parameters is used
     * consecutively in the QR code version's format.
     */
    final class EcBlock
    {
        public function __construct(int $count, int $dataCodewords)
        {
        }
        /**
         * Returns how many times the block is used.
         */
        public function getCount() : int
        {
        }
        /**
         * Returns the number of data codewords.
         */
        public function getDataCodewords() : int
        {
        }
    }
    /**
     * Encapsulates a set of error-correction blocks in one symbol version.
     *
     * Most versions will use blocks of differing sizes within one version, so, this encapsulates the parameters for each
     * set of blocks. It also holds the number of error-correction codewords per block since it will be the same across all
     * blocks within one version.
     */
    final class EcBlocks
    {
        public function __construct(int $ecCodewordsPerBlock, \BaconQrCode\Common\EcBlock ...$ecBlocks)
        {
        }
        /**
         * Returns the number of EC codewords per block.
         */
        public function getEcCodewordsPerBlock() : int
        {
        }
        /**
         * Returns the total number of EC block appearances.
         */
        public function getNumBlocks() : int
        {
        }
        /**
         * Returns the total count of EC codewords.
         */
        public function getTotalEcCodewords() : int
        {
        }
        /**
         * Returns the EC blocks included in this collection.
         *
         * @return EcBlock[]
         */
        public function getEcBlocks() : array
        {
        }
    }
    /**
     * Encapsulates a Character Set ECI, according to "Extended Channel Interpretations" 5.3.1.1 of ISO 18004.
     *
     * @method static self CP437()
     * @method static self ISO8859_1()
     * @method static self ISO8859_2()
     * @method static self ISO8859_3()
     * @method static self ISO8859_4()
     * @method static self ISO8859_5()
     * @method static self ISO8859_6()
     * @method static self ISO8859_7()
     * @method static self ISO8859_8()
     * @method static self ISO8859_9()
     * @method static self ISO8859_10()
     * @method static self ISO8859_11()
     * @method static self ISO8859_12()
     * @method static self ISO8859_13()
     * @method static self ISO8859_14()
     * @method static self ISO8859_15()
     * @method static self ISO8859_16()
     * @method static self SJIS()
     * @method static self CP1250()
     * @method static self CP1251()
     * @method static self CP1252()
     * @method static self CP1256()
     * @method static self UNICODE_BIG_UNMARKED()
     * @method static self UTF8()
     * @method static self ASCII()
     * @method static self BIG5()
     * @method static self GB18030()
     * @method static self EUC_KR()
     */
    final class CharacterSetEci extends \DASPRiD\Enum\AbstractEnum
    {
        public function __construct(array $values, string ...$otherEncodingNames)
        {
        }
        /**
         * Returns the primary value.
         */
        public function getValue() : int
        {
        }
        /**
         * Gets character set ECI by value.
         *
         * Returns the representing ECI of a given value, or null if it is legal but unsupported.
         *
         * @throws InvalidArgumentException if value is not between 0 and 900
         */
        public static function getCharacterSetEciByValue(int $value) : ?self
        {
        }
        /**
         * Returns character set ECI by name.
         *
         * Returns the representing ECI of a given name, or null if it is legal but unsupported
         */
        public static function getCharacterSetEciByName(string $name) : ?self
        {
        }
    }
    /**
     * Bit matrix.
     *
     * Represents a 2D matrix of bits. In function arguments below, and throughout
     * the common module, x is the column position, and y is the row position. The
     * ordering is always x, y. The origin is at the top-left.
     */
    class BitMatrix
    {
        /**
         * @throws InvalidArgumentException if a dimension is smaller than zero
         */
        public function __construct(int $width, int $height = null)
        {
        }
        /**
         * Gets the requested bit, where true means black.
         */
        public function get(int $x, int $y) : bool
        {
        }
        /**
         * Sets the given bit to true.
         */
        public function set(int $x, int $y) : void
        {
        }
        /**
         * Flips the given bit.
         */
        public function flip(int $x, int $y) : void
        {
        }
        /**
         * Clears all bits (set to false).
         */
        public function clear() : void
        {
        }
        /**
         * Sets a square region of the bit matrix to true.
         *
         * @throws InvalidArgumentException if left or top are negative
         * @throws InvalidArgumentException if width or height are smaller than 1
         * @throws InvalidArgumentException if region does not fit into the matix
         */
        public function setRegion(int $left, int $top, int $width, int $height) : void
        {
        }
        /**
         * A fast method to retrieve one row of data from the matrix as a BitArray.
         */
        public function getRow(int $y, \BaconQrCode\Common\BitArray $row = null) : \BaconQrCode\Common\BitArray
        {
        }
        /**
         * Sets a row of data from a BitArray.
         */
        public function setRow(int $y, \BaconQrCode\Common\BitArray $row) : void
        {
        }
        /**
         * This is useful in detecting the enclosing rectangle of a 'pure' barcode.
         *
         * @return int[]|null
         */
        public function getEnclosingRectangle() : ?array
        {
        }
        /**
         * Gets the most top left set bit.
         *
         * This is useful in detecting a corner of a 'pure' barcode.
         *
         * @return int[]|null
         */
        public function getTopLeftOnBit() : ?array
        {
        }
        /**
         * Gets the most bottom right set bit.
         *
         * This is useful in detecting a corner of a 'pure' barcode.
         *
         * @return int[]|null
         */
        public function getBottomRightOnBit() : ?array
        {
        }
        /**
         * Gets the width of the matrix,
         */
        public function getWidth() : int
        {
        }
        /**
         * Gets the height of the matrix.
         */
        public function getHeight() : int
        {
        }
    }
}
namespace Symfony\Polyfill\Php73 {
    /**
     * @author Gabriel Caruso <carusogabriel34@gmail.com>
     * @author Ion Bazan <ion.bazan@gmail.com>
     *
     * @internal
     */
    final class Php73
    {
        public static $startAt = 1533462603;
        /**
         * @param bool $asNum
         *
         * @return array|float|int
         */
        public static function hrtime($asNum = false)
        {
        }
    }
}
namespace Symfony\Component\OptionsResolver {
    final class OptionConfigurator
    {
        public function __construct(string $name, \Symfony\Component\OptionsResolver\OptionsResolver $resolver)
        {
        }
        /**
         * Adds allowed types for this option.
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function allowedTypes(string ...$types) : self
        {
        }
        /**
         * Sets allowed values for this option.
         *
         * @param mixed ...$values One or more acceptable values/closures
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function allowedValues(...$values) : self
        {
        }
        /**
         * Sets the default value for this option.
         *
         * @param mixed $value The default value of the option
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function default($value) : self
        {
        }
        /**
         * Defines an option configurator with the given name.
         */
        public function define(string $option) : self
        {
        }
        /**
         * Marks this option as deprecated.
         *
         * @param string          $package The name of the composer package that is triggering the deprecation
         * @param string          $version The version of the package that introduced the deprecation
         * @param string|\Closure $message The deprecation message to use
         *
         * @return $this
         */
        public function deprecated(string $package, string $version, $message = 'The option "%name%" is deprecated.') : self
        {
        }
        /**
         * Sets the normalizer for this option.
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function normalize(\Closure $normalizer) : self
        {
        }
        /**
         * Marks this option as required.
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function required() : self
        {
        }
        /**
         * Sets an info message for an option.
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function info(string $info) : self
        {
        }
    }
}
namespace Symfony\Component\OptionsResolver\Exception {
    /**
     * Marker interface for all exceptions thrown by the OptionsResolver component.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    interface ExceptionInterface extends \Throwable
    {
    }
    /**
     * Thrown when trying to read an option outside of or write it inside of
     * {@link \Symfony\Component\OptionsResolver\Options::resolve()}.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class AccessException extends \LogicException implements \Symfony\Component\OptionsResolver\Exception\ExceptionInterface
    {
    }
    /**
     * Thrown when an argument is invalid.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class InvalidArgumentException extends \InvalidArgumentException implements \Symfony\Component\OptionsResolver\Exception\ExceptionInterface
    {
    }
    /**
     * Exception thrown when a required option is missing.
     *
     * Add the option to the passed options array.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class MissingOptionsException extends \Symfony\Component\OptionsResolver\Exception\InvalidArgumentException
    {
    }
    /**
     * Thrown when the value of an option does not match its validation rules.
     *
     * You should make sure a valid value is passed to the option.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class InvalidOptionsException extends \Symfony\Component\OptionsResolver\Exception\InvalidArgumentException
    {
    }
    /**
     * Exception thrown when an undefined option is passed.
     *
     * You should remove the options in question from your code or define them
     * beforehand.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class UndefinedOptionsException extends \Symfony\Component\OptionsResolver\Exception\InvalidArgumentException
    {
    }
    /**
     * Thrown when two lazy options have a cyclic dependency.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class OptionDefinitionException extends \LogicException implements \Symfony\Component\OptionsResolver\Exception\ExceptionInterface
    {
    }
    /**
     * Thrown when trying to introspect an option definition property
     * for which no value was configured inside the OptionsResolver instance.
     *
     * @see OptionsResolverIntrospector
     *
     * @author Maxime Steinhausser <maxime.steinhausser@gmail.com>
     */
    class NoConfigurationException extends \RuntimeException implements \Symfony\Component\OptionsResolver\Exception\ExceptionInterface
    {
    }
    /**
     * Thrown when trying to read an option that has no value set.
     *
     * When accessing optional options from within a lazy option or normalizer you should first
     * check whether the optional option is set. You can do this with `isset($options['optional'])`.
     * In contrast to the {@link UndefinedOptionsException}, this is a runtime exception that can
     * occur when evaluating lazy options.
     *
     * @author Tobias Schultze <http://tobion.de>
     */
    class NoSuchOptionException extends \OutOfBoundsException implements \Symfony\Component\OptionsResolver\Exception\ExceptionInterface
    {
    }
}
namespace Symfony\Component\OptionsResolver\Debug {
    /**
     * @author Maxime Steinhausser <maxime.steinhausser@gmail.com>
     *
     * @final
     */
    class OptionsResolverIntrospector
    {
        public function __construct(\Symfony\Component\OptionsResolver\OptionsResolver $optionsResolver)
        {
        }
        /**
         * @return mixed
         *
         * @throws NoConfigurationException on no configured value
         */
        public function getDefault(string $option)
        {
        }
        /**
         * @return \Closure[]
         *
         * @throws NoConfigurationException on no configured closures
         */
        public function getLazyClosures(string $option) : array
        {
        }
        /**
         * @return string[]
         *
         * @throws NoConfigurationException on no configured types
         */
        public function getAllowedTypes(string $option) : array
        {
        }
        /**
         * @return mixed[]
         *
         * @throws NoConfigurationException on no configured values
         */
        public function getAllowedValues(string $option) : array
        {
        }
        /**
         * @throws NoConfigurationException on no configured normalizer
         */
        public function getNormalizer(string $option) : \Closure
        {
        }
        /**
         * @throws NoConfigurationException when no normalizer is configured
         */
        public function getNormalizers(string $option) : array
        {
        }
        /**
         * @return string|\Closure
         *
         * @throws NoConfigurationException on no configured deprecation
         *
         * @deprecated since Symfony 5.1, use "getDeprecation()" instead.
         */
        public function getDeprecationMessage(string $option)
        {
        }
        /**
         * @throws NoConfigurationException on no configured deprecation
         */
        public function getDeprecation(string $option) : array
        {
        }
    }
}
namespace Symfony\Component\OptionsResolver {
    /**
     * Contains resolved option values.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     * @author Tobias Schultze <http://tobion.de>
     */
    interface Options extends \ArrayAccess, \Countable
    {
    }
    /**
     * Validates options and merges them with default values.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     * @author Tobias Schultze <http://tobion.de>
     */
    class OptionsResolver implements \Symfony\Component\OptionsResolver\Options
    {
        /**
         * Sets the default value of a given option.
         *
         * If the default value should be set based on other options, you can pass
         * a closure with the following signature:
         *
         *     function (Options $options) {
         *         // ...
         *     }
         *
         * The closure will be evaluated when {@link resolve()} is called. The
         * closure has access to the resolved values of other options through the
         * passed {@link Options} instance:
         *
         *     function (Options $options) {
         *         if (isset($options['port'])) {
         *             // ...
         *         }
         *     }
         *
         * If you want to access the previously set default value, add a second
         * argument to the closure's signature:
         *
         *     $options->setDefault('name', 'Default Name');
         *
         *     $options->setDefault('name', function (Options $options, $previousValue) {
         *         // 'Default Name' === $previousValue
         *     });
         *
         * This is mostly useful if the configuration of the {@link Options} object
         * is spread across different locations of your code, such as base and
         * sub-classes.
         *
         * If you want to define nested options, you can pass a closure with the
         * following signature:
         *
         *     $options->setDefault('database', function (OptionsResolver $resolver) {
         *         $resolver->setDefined(['dbname', 'host', 'port', 'user', 'pass']);
         *     }
         *
         * To get access to the parent options, add a second argument to the closure's
         * signature:
         *
         *     function (OptionsResolver $resolver, Options $parent) {
         *         // 'default' === $parent['connection']
         *     }
         *
         * @param string $option The name of the option
         * @param mixed  $value  The default value of the option
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function setDefault(string $option, $value)
        {
        }
        /**
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function setDefaults(array $defaults)
        {
        }
        /**
         * Returns whether a default value is set for an option.
         *
         * Returns true if {@link setDefault()} was called for this option.
         * An option is also considered set if it was set to null.
         *
         * @return bool
         */
        public function hasDefault(string $option)
        {
        }
        /**
         * Marks one or more options as required.
         *
         * @param string|string[] $optionNames One or more option names
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function setRequired($optionNames)
        {
        }
        /**
         * Returns whether an option is required.
         *
         * An option is required if it was passed to {@link setRequired()}.
         *
         * @return bool
         */
        public function isRequired(string $option)
        {
        }
        /**
         * Returns the names of all required options.
         *
         * @return string[]
         *
         * @see isRequired()
         */
        public function getRequiredOptions()
        {
        }
        /**
         * Returns whether an option is missing a default value.
         *
         * An option is missing if it was passed to {@link setRequired()}, but not
         * to {@link setDefault()}. This option must be passed explicitly to
         * {@link resolve()}, otherwise an exception will be thrown.
         *
         * @return bool
         */
        public function isMissing(string $option)
        {
        }
        /**
         * Returns the names of all options missing a default value.
         *
         * @return string[]
         */
        public function getMissingOptions()
        {
        }
        /**
         * Defines a valid option name.
         *
         * Defines an option name without setting a default value. The option will
         * be accepted when passed to {@link resolve()}. When not passed, the
         * option will not be included in the resolved options.
         *
         * @param string|string[] $optionNames One or more option names
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function setDefined($optionNames)
        {
        }
        /**
         * Returns whether an option is defined.
         *
         * Returns true for any option passed to {@link setDefault()},
         * {@link setRequired()} or {@link setDefined()}.
         *
         * @return bool
         */
        public function isDefined(string $option)
        {
        }
        /**
         * Returns the names of all defined options.
         *
         * @return string[]
         *
         * @see isDefined()
         */
        public function getDefinedOptions()
        {
        }
        public function isNested(string $option) : bool
        {
        }
        /**
         * Deprecates an option, allowed types or values.
         *
         * Instead of passing the message, you may also pass a closure with the
         * following signature:
         *
         *     function (Options $options, $value): string {
         *         // ...
         *     }
         *
         * The closure receives the value as argument and should return a string.
         * Return an empty string to ignore the option deprecation.
         *
         * The closure is invoked when {@link resolve()} is called. The parameter
         * passed to the closure is the value of the option after validating it
         * and before normalizing it.
         *
         * @param string          $package The name of the composer package that is triggering the deprecation
         * @param string          $version The version of the package that introduced the deprecation
         * @param string|\Closure $message The deprecation message to use
         *
         * @return $this
         */
        public function setDeprecated(string $option) : self
        {
        }
        public function isDeprecated(string $option) : bool
        {
        }
        /**
         * Sets the normalizer for an option.
         *
         * The normalizer should be a closure with the following signature:
         *
         *     function (Options $options, $value) {
         *         // ...
         *     }
         *
         * The closure is invoked when {@link resolve()} is called. The closure
         * has access to the resolved values of other options through the passed
         * {@link Options} instance.
         *
         * The second parameter passed to the closure is the value of
         * the option.
         *
         * The resolved option value is set to the return value of the closure.
         *
         * @return $this
         *
         * @throws UndefinedOptionsException If the option is undefined
         * @throws AccessException           If called from a lazy option or normalizer
         */
        public function setNormalizer(string $option, \Closure $normalizer)
        {
        }
        /**
         * Adds a normalizer for an option.
         *
         * The normalizer should be a closure with the following signature:
         *
         *     function (Options $options, $value): mixed {
         *         // ...
         *     }
         *
         * The closure is invoked when {@link resolve()} is called. The closure
         * has access to the resolved values of other options through the passed
         * {@link Options} instance.
         *
         * The second parameter passed to the closure is the value of
         * the option.
         *
         * The resolved option value is set to the return value of the closure.
         *
         * @return $this
         *
         * @throws UndefinedOptionsException If the option is undefined
         * @throws AccessException           If called from a lazy option or normalizer
         */
        public function addNormalizer(string $option, \Closure $normalizer, bool $forcePrepend = false) : self
        {
        }
        /**
         * Sets allowed values for an option.
         *
         * Instead of passing values, you may also pass a closures with the
         * following signature:
         *
         *     function ($value) {
         *         // return true or false
         *     }
         *
         * The closure receives the value as argument and should return true to
         * accept the value and false to reject the value.
         *
         * @param string $option        The option name
         * @param mixed  $allowedValues One or more acceptable values/closures
         *
         * @return $this
         *
         * @throws UndefinedOptionsException If the option is undefined
         * @throws AccessException           If called from a lazy option or normalizer
         */
        public function setAllowedValues(string $option, $allowedValues)
        {
        }
        /**
         * Adds allowed values for an option.
         *
         * The values are merged with the allowed values defined previously.
         *
         * Instead of passing values, you may also pass a closures with the
         * following signature:
         *
         *     function ($value) {
         *         // return true or false
         *     }
         *
         * The closure receives the value as argument and should return true to
         * accept the value and false to reject the value.
         *
         * @param string $option        The option name
         * @param mixed  $allowedValues One or more acceptable values/closures
         *
         * @return $this
         *
         * @throws UndefinedOptionsException If the option is undefined
         * @throws AccessException           If called from a lazy option or normalizer
         */
        public function addAllowedValues(string $option, $allowedValues)
        {
        }
        /**
         * Sets allowed types for an option.
         *
         * Any type for which a corresponding is_<type>() function exists is
         * acceptable. Additionally, fully-qualified class or interface names may
         * be passed.
         *
         * @param string|string[] $allowedTypes One or more accepted types
         *
         * @return $this
         *
         * @throws UndefinedOptionsException If the option is undefined
         * @throws AccessException           If called from a lazy option or normalizer
         */
        public function setAllowedTypes(string $option, $allowedTypes)
        {
        }
        /**
         * Adds allowed types for an option.
         *
         * The types are merged with the allowed types defined previously.
         *
         * Any type for which a corresponding is_<type>() function exists is
         * acceptable. Additionally, fully-qualified class or interface names may
         * be passed.
         *
         * @param string|string[] $allowedTypes One or more accepted types
         *
         * @return $this
         *
         * @throws UndefinedOptionsException If the option is undefined
         * @throws AccessException           If called from a lazy option or normalizer
         */
        public function addAllowedTypes(string $option, $allowedTypes)
        {
        }
        /**
         * Defines an option configurator with the given name.
         */
        public function define(string $option) : \Symfony\Component\OptionsResolver\OptionConfigurator
        {
        }
        /**
         * Sets an info message for an option.
         *
         * @return $this
         *
         * @throws UndefinedOptionsException If the option is undefined
         * @throws AccessException           If called from a lazy option or normalizer
         */
        public function setInfo(string $option, string $info) : self
        {
        }
        /**
         * Gets the info message for an option.
         */
        public function getInfo(string $option) : ?string
        {
        }
        /**
         * Marks the whole options definition as array prototype.
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option, a normalizer or a root definition
         */
        public function setPrototype(bool $prototype) : self
        {
        }
        public function isPrototype() : bool
        {
        }
        /**
         * Removes the option with the given name.
         *
         * Undefined options are ignored.
         *
         * @param string|string[] $optionNames One or more option names
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function remove($optionNames)
        {
        }
        /**
         * Removes all options.
         *
         * @return $this
         *
         * @throws AccessException If called from a lazy option or normalizer
         */
        public function clear()
        {
        }
        /**
         * Merges options with the default values stored in the container and
         * validates them.
         *
         * Exceptions are thrown if:
         *
         *  - Undefined options are passed;
         *  - Required options are missing;
         *  - Options have invalid types;
         *  - Options have invalid values.
         *
         * @return array
         *
         * @throws UndefinedOptionsException If an option name is undefined
         * @throws InvalidOptionsException   If an option doesn't fulfill the
         *                                   specified validation rules
         * @throws MissingOptionsException   If a required option is missing
         * @throws OptionDefinitionException If there is a cyclic dependency between
         *                                   lazy options and/or normalizers
         * @throws NoSuchOptionException     If a lazy option reads an unavailable option
         * @throws AccessException           If called from a lazy option or normalizer
         */
        public function resolve(array $options = [])
        {
        }
        /**
         * Returns the resolved value of an option.
         *
         * @param bool $triggerDeprecation Whether to trigger the deprecation or not (true by default)
         *
         * @return mixed
         *
         * @throws AccessException           If accessing this method outside of
         *                                   {@link resolve()}
         * @throws NoSuchOptionException     If the option is not set
         * @throws InvalidOptionsException   If the option doesn't fulfill the
         *                                   specified validation rules
         * @throws OptionDefinitionException If there is a cyclic dependency between
         *                                   lazy options and/or normalizers
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($option, bool $triggerDeprecation = true)
        {
        }
        /**
         * Returns whether a resolved option with the given name exists.
         *
         * @param string $option The option name
         *
         * @return bool
         *
         * @throws AccessException If accessing this method outside of {@link resolve()}
         *
         * @see \ArrayAccess::offsetExists()
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($option)
        {
        }
        /**
         * Not supported.
         *
         * @return void
         *
         * @throws AccessException
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($option, $value)
        {
        }
        /**
         * Not supported.
         *
         * @return void
         *
         * @throws AccessException
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($option)
        {
        }
        /**
         * Returns the number of set options.
         *
         * This may be only a subset of the defined options.
         *
         * @return int
         *
         * @throws AccessException If accessing this method outside of {@link resolve()}
         *
         * @see \Countable::count()
         */
        #[\ReturnTypeWillChange]
        public function count()
        {
        }
    }
}
namespace Symfony\Component\PropertyAccess\Exception {
    /**
     * Marker interface for the PropertyAccess component.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    interface ExceptionInterface extends \Throwable
    {
    }
    /**
     * Base RuntimeException for the PropertyAccess component.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class RuntimeException extends \RuntimeException implements \Symfony\Component\PropertyAccess\Exception\ExceptionInterface
    {
    }
    /**
     * Thrown when a property path is not available.
     *
     * @author Stéphane Escandell <stephane.escandell@gmail.com>
     */
    class AccessException extends \Symfony\Component\PropertyAccess\Exception\RuntimeException
    {
    }
    /**
     * Base InvalidArgumentException for the PropertyAccess component.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class InvalidArgumentException extends \InvalidArgumentException implements \Symfony\Component\PropertyAccess\Exception\ExceptionInterface
    {
    }
    /**
     * Base OutOfBoundsException for the PropertyAccess component.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class OutOfBoundsException extends \OutOfBoundsException implements \Symfony\Component\PropertyAccess\Exception\ExceptionInterface
    {
    }
    /**
     * Thrown when an index cannot be found.
     *
     * @author Stéphane Escandell <stephane.escandell@gmail.com>
     */
    class NoSuchIndexException extends \Symfony\Component\PropertyAccess\Exception\AccessException
    {
    }
    /**
     * Thrown when a property path is malformed.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class InvalidPropertyPathException extends \Symfony\Component\PropertyAccess\Exception\RuntimeException
    {
    }
    /**
     * Thrown when a property is not initialized.
     *
     * @author Jules Pietri <jules@heahprod.com>
     */
    class UninitializedPropertyException extends \Symfony\Component\PropertyAccess\Exception\AccessException
    {
    }
    /**
     * Thrown when a value does not match an expected type.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class UnexpectedTypeException extends \Symfony\Component\PropertyAccess\Exception\RuntimeException
    {
        /**
         * @param mixed $value     The unexpected value found while traversing property path
         * @param int   $pathIndex The property path index when the unexpected value was found
         */
        public function __construct($value, \Symfony\Component\PropertyAccess\PropertyPathInterface $path, int $pathIndex)
        {
        }
    }
    /**
     * Thrown when a property cannot be found.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class NoSuchPropertyException extends \Symfony\Component\PropertyAccess\Exception\AccessException
    {
    }
}
namespace Symfony\Component\PropertyAccess {
    /**
     * A configurable builder to create a PropertyAccessor.
     *
     * @author Jérémie Augustin <jeremie.augustin@pixel-cookers.com>
     */
    class PropertyAccessorBuilder
    {
        /**
         * Enables the use of all magic methods by the PropertyAccessor.
         *
         * @return $this
         */
        public function enableMagicMethods() : self
        {
        }
        /**
         * Disable the use of all magic methods by the PropertyAccessor.
         *
         * @return $this
         */
        public function disableMagicMethods() : self
        {
        }
        /**
         * Enables the use of "__call" by the PropertyAccessor.
         *
         * @return $this
         */
        public function enableMagicCall()
        {
        }
        /**
         * Enables the use of "__get" by the PropertyAccessor.
         */
        public function enableMagicGet() : self
        {
        }
        /**
         * Enables the use of "__set" by the PropertyAccessor.
         *
         * @return $this
         */
        public function enableMagicSet() : self
        {
        }
        /**
         * Disables the use of "__call" by the PropertyAccessor.
         *
         * @return $this
         */
        public function disableMagicCall()
        {
        }
        /**
         * Disables the use of "__get" by the PropertyAccessor.
         *
         * @return $this
         */
        public function disableMagicGet() : self
        {
        }
        /**
         * Disables the use of "__set" by the PropertyAccessor.
         *
         * @return $this
         */
        public function disableMagicSet() : self
        {
        }
        /**
         * @return bool whether the use of "__call" by the PropertyAccessor is enabled
         */
        public function isMagicCallEnabled()
        {
        }
        /**
         * @return bool whether the use of "__get" by the PropertyAccessor is enabled
         */
        public function isMagicGetEnabled() : bool
        {
        }
        /**
         * @return bool whether the use of "__set" by the PropertyAccessor is enabled
         */
        public function isMagicSetEnabled() : bool
        {
        }
        /**
         * Enables exceptions when reading a non-existing index.
         *
         * This has no influence on writing non-existing indices with PropertyAccessorInterface::setValue()
         * which are always created on-the-fly.
         *
         * @return $this
         */
        public function enableExceptionOnInvalidIndex()
        {
        }
        /**
         * Disables exceptions when reading a non-existing index.
         *
         * Instead, null is returned when calling PropertyAccessorInterface::getValue() on a non-existing index.
         *
         * @return $this
         */
        public function disableExceptionOnInvalidIndex()
        {
        }
        /**
         * @return bool whether an exception is thrown or null is returned when reading a non-existing index
         */
        public function isExceptionOnInvalidIndexEnabled()
        {
        }
        /**
         * Enables exceptions when reading a non-existing property.
         *
         * This has no influence on writing non-existing indices with PropertyAccessorInterface::setValue()
         * which are always created on-the-fly.
         *
         * @return $this
         */
        public function enableExceptionOnInvalidPropertyPath()
        {
        }
        /**
         * Disables exceptions when reading a non-existing index.
         *
         * Instead, null is returned when calling PropertyAccessorInterface::getValue() on a non-existing index.
         *
         * @return $this
         */
        public function disableExceptionOnInvalidPropertyPath()
        {
        }
        /**
         * @return bool whether an exception is thrown or null is returned when reading a non-existing property
         */
        public function isExceptionOnInvalidPropertyPath()
        {
        }
        /**
         * Sets a cache system.
         *
         * @return $this
         */
        public function setCacheItemPool(\Psr\Cache\CacheItemPoolInterface $cacheItemPool = null)
        {
        }
        /**
         * Gets the used cache system.
         *
         * @return CacheItemPoolInterface|null
         */
        public function getCacheItemPool()
        {
        }
        /**
         * @return $this
         */
        public function setReadInfoExtractor(?\Symfony\Component\PropertyInfo\PropertyReadInfoExtractorInterface $readInfoExtractor)
        {
        }
        public function getReadInfoExtractor() : ?\Symfony\Component\PropertyInfo\PropertyReadInfoExtractorInterface
        {
        }
        /**
         * @return $this
         */
        public function setWriteInfoExtractor(?\Symfony\Component\PropertyInfo\PropertyWriteInfoExtractorInterface $writeInfoExtractor)
        {
        }
        public function getWriteInfoExtractor() : ?\Symfony\Component\PropertyInfo\PropertyWriteInfoExtractorInterface
        {
        }
        /**
         * Builds and returns a new PropertyAccessor object.
         *
         * @return PropertyAccessorInterface
         */
        public function getPropertyAccessor()
        {
        }
    }
    /**
     * Entry point of the PropertyAccess component.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    final class PropertyAccess
    {
        /**
         * Creates a property accessor with the default configuration.
         */
        public static function createPropertyAccessor() : \Symfony\Component\PropertyAccess\PropertyAccessor
        {
        }
        public static function createPropertyAccessorBuilder() : \Symfony\Component\PropertyAccess\PropertyAccessorBuilder
        {
        }
    }
    /**
     * Writes and reads values to/from an object/array graph.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    interface PropertyAccessorInterface
    {
        /**
         * Sets the value at the end of the property path of the object graph.
         *
         * Example:
         *
         *     use Symfony\Component\PropertyAccess\PropertyAccess;
         *
         *     $propertyAccessor = PropertyAccess::createPropertyAccessor();
         *
         *     echo $propertyAccessor->setValue($object, 'child.name', 'Fabien');
         *     // equals echo $object->getChild()->setName('Fabien');
         *
         * This method first tries to find a public setter for each property in the
         * path. The name of the setter must be the camel-cased property name
         * prefixed with "set".
         *
         * If the setter does not exist, this method tries to find a public
         * property. The value of the property is then changed.
         *
         * If neither is found, an exception is thrown.
         *
         * @param object|array                 $objectOrArray The object or array to modify
         * @param string|PropertyPathInterface $propertyPath  The property path to modify
         * @param mixed                        $value         The value to set at the end of the property path
         *
         * @throws Exception\InvalidArgumentException If the property path is invalid
         * @throws Exception\AccessException          If a property/index does not exist or is not public
         * @throws Exception\UnexpectedTypeException  If a value within the path is neither object nor array
         */
        public function setValue(&$objectOrArray, $propertyPath, $value);
        /**
         * Returns the value at the end of the property path of the object graph.
         *
         * Example:
         *
         *     use Symfony\Component\PropertyAccess\PropertyAccess;
         *
         *     $propertyAccessor = PropertyAccess::createPropertyAccessor();
         *
         *     echo $propertyAccessor->getValue($object, 'child.name');
         *     // equals echo $object->getChild()->getName();
         *
         * This method first tries to find a public getter for each property in the
         * path. The name of the getter must be the camel-cased property name
         * prefixed with "get", "is", or "has".
         *
         * If the getter does not exist, this method tries to find a public
         * property. The value of the property is then returned.
         *
         * If none of them are found, an exception is thrown.
         *
         * @param object|array                 $objectOrArray The object or array to traverse
         * @param string|PropertyPathInterface $propertyPath  The property path to read
         *
         * @return mixed
         *
         * @throws Exception\InvalidArgumentException If the property path is invalid
         * @throws Exception\AccessException          If a property/index does not exist or is not public
         * @throws Exception\UnexpectedTypeException  If a value within the path is neither object
         *                                            nor array
         */
        public function getValue($objectOrArray, $propertyPath);
        /**
         * Returns whether a value can be written at a given property path.
         *
         * Whenever this method returns true, {@link setValue()} is guaranteed not
         * to throw an exception when called with the same arguments.
         *
         * @param object|array                 $objectOrArray The object or array to check
         * @param string|PropertyPathInterface $propertyPath  The property path to check
         *
         * @return bool
         *
         * @throws Exception\InvalidArgumentException If the property path is invalid
         */
        public function isWritable($objectOrArray, $propertyPath);
        /**
         * Returns whether a property path can be read from an object graph.
         *
         * Whenever this method returns true, {@link getValue()} is guaranteed not
         * to throw an exception when called with the same arguments.
         *
         * @param object|array                 $objectOrArray The object or array to check
         * @param string|PropertyPathInterface $propertyPath  The property path to check
         *
         * @return bool
         *
         * @throws Exception\InvalidArgumentException If the property path is invalid
         */
        public function isReadable($objectOrArray, $propertyPath);
    }
    /**
     * Default implementation of {@link PropertyAccessorInterface}.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     * @author Kévin Dunglas <dunglas@gmail.com>
     * @author Nicolas Grekas <p@tchwork.com>
     */
    class PropertyAccessor implements \Symfony\Component\PropertyAccess\PropertyAccessorInterface
    {
        /** @var int Allow none of the magic methods */
        public const DISALLOW_MAGIC_METHODS = \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor::DISALLOW_MAGIC_METHODS;
        /** @var int Allow magic __get methods */
        public const MAGIC_GET = \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor::ALLOW_MAGIC_GET;
        /** @var int Allow magic __set methods */
        public const MAGIC_SET = \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor::ALLOW_MAGIC_SET;
        /** @var int Allow magic __call methods */
        public const MAGIC_CALL = \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor::ALLOW_MAGIC_CALL;
        public const DO_NOT_THROW = 0;
        public const THROW_ON_INVALID_INDEX = 1;
        public const THROW_ON_INVALID_PROPERTY_PATH = 2;
        /**
         * Should not be used by application code. Use
         * {@link PropertyAccess::createPropertyAccessor()} instead.
         *
         * @param int                                 $magicMethods       A bitwise combination of the MAGIC_* constants
         *                                                                to specify the allowed magic methods (__get, __set, __call)
         *                                                                or self::DISALLOW_MAGIC_METHODS for none
         * @param int                                 $throw              A bitwise combination of the THROW_* constants
         *                                                                to specify when exceptions should be thrown
         * @param PropertyReadInfoExtractorInterface  $readInfoExtractor
         * @param PropertyWriteInfoExtractorInterface $writeInfoExtractor
         */
        public function __construct($magicMethods = self::MAGIC_GET | self::MAGIC_SET, $throw = self::THROW_ON_INVALID_PROPERTY_PATH, \Psr\Cache\CacheItemPoolInterface $cacheItemPool = null, $readInfoExtractor = null, $writeInfoExtractor = null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getValue($objectOrArray, $propertyPath)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function setValue(&$objectOrArray, $propertyPath, $value)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isReadable($objectOrArray, $propertyPath)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isWritable($objectOrArray, $propertyPath)
        {
        }
        /**
         * Creates the APCu adapter if applicable.
         *
         * @return AdapterInterface
         *
         * @throws \LogicException When the Cache Component isn't available
         */
        public static function createCache(string $namespace, int $defaultLifetime, string $version, \Psr\Log\LoggerInterface $logger = null)
        {
        }
    }
    /**
     * @author Bernhard Schussek <bschussek@gmail.com>
     *
     * @extends \SeekableIterator<int, string>
     */
    interface PropertyPathIteratorInterface extends \SeekableIterator
    {
        /**
         * Returns whether the current element in the property path is an array
         * index.
         *
         * @return bool
         */
        public function isIndex();
        /**
         * Returns whether the current element in the property path is a property
         * name.
         *
         * @return bool
         */
        public function isProperty();
    }
    /**
     * @author Bernhard Schussek <bschussek@gmail.com>
     */
    class PropertyPathBuilder
    {
        /**
         * Creates a new property path builder.
         *
         * @param PropertyPathInterface|string|null $path The path to initially store
         *                                                in the builder. Optional.
         */
        public function __construct($path = null)
        {
        }
        /**
         * Appends a (sub-) path to the current path.
         *
         * @param PropertyPathInterface|string $path   The path to append
         * @param int                          $offset The offset where the appended
         *                                             piece starts in $path
         * @param int                          $length The length of the appended piece
         *                                             If 0, the full path is appended
         */
        public function append($path, int $offset = 0, int $length = 0)
        {
        }
        /**
         * Appends an index element to the current path.
         */
        public function appendIndex(string $name)
        {
        }
        /**
         * Appends a property element to the current path.
         */
        public function appendProperty(string $name)
        {
        }
        /**
         * Removes elements from the current path.
         *
         * @throws OutOfBoundsException if offset is invalid
         */
        public function remove(int $offset, int $length = 1)
        {
        }
        /**
         * Replaces a sub-path by a different (sub-) path.
         *
         * @param int                          $offset     The offset at which to replace
         * @param int                          $length     The length of the piece to replace
         * @param PropertyPathInterface|string $path       The path to insert
         * @param int                          $pathOffset The offset where the inserted piece
         *                                                 starts in $path
         * @param int                          $pathLength The length of the inserted piece
         *                                                 If 0, the full path is inserted
         *
         * @throws OutOfBoundsException If the offset is invalid
         */
        public function replace(int $offset, int $length, $path, int $pathOffset = 0, int $pathLength = 0)
        {
        }
        /**
         * Replaces a property element by an index element.
         *
         * @throws OutOfBoundsException If the offset is invalid
         */
        public function replaceByIndex(int $offset, string $name = null)
        {
        }
        /**
         * Replaces an index element by a property element.
         *
         * @throws OutOfBoundsException If the offset is invalid
         */
        public function replaceByProperty(int $offset, string $name = null)
        {
        }
        /**
         * Returns the length of the current path.
         *
         * @return int
         */
        public function getLength()
        {
        }
        /**
         * Returns the current property path.
         *
         * @return PropertyPathInterface|null
         */
        public function getPropertyPath()
        {
        }
        /**
         * Returns the current property path as string.
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
    /**
     * A sequence of property names or array indices.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     *
     * @extends \Traversable<int, string>
     */
    interface PropertyPathInterface extends \Traversable
    {
        /**
         * Returns the string representation of the property path.
         *
         * @return string
         */
        public function __toString();
        /**
         * Returns the length of the property path, i.e. the number of elements.
         *
         * @return int
         */
        public function getLength();
        /**
         * Returns the parent property path.
         *
         * The parent property path is the one that contains the same items as
         * this one except for the last one.
         *
         * If this property path only contains one item, null is returned.
         *
         * @return self|null
         */
        public function getParent();
        /**
         * Returns the elements of the property path as array.
         *
         * @return list<string>
         */
        public function getElements();
        /**
         * Returns the element at the given index in the property path.
         *
         * @param int $index The index key
         *
         * @return string
         *
         * @throws Exception\OutOfBoundsException If the offset is invalid
         */
        public function getElement(int $index);
        /**
         * Returns whether the element at the given index is a property.
         *
         * @param int $index The index in the property path
         *
         * @return bool
         *
         * @throws Exception\OutOfBoundsException If the offset is invalid
         */
        public function isProperty(int $index);
        /**
         * Returns whether the element at the given index is an array index.
         *
         * @param int $index The index in the property path
         *
         * @return bool
         *
         * @throws Exception\OutOfBoundsException If the offset is invalid
         */
        public function isIndex(int $index);
    }
    /**
     * Default implementation of {@link PropertyPathInterface}.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     *
     * @implements \IteratorAggregate<int, string>
     */
    class PropertyPath implements \IteratorAggregate, \Symfony\Component\PropertyAccess\PropertyPathInterface
    {
        /**
         * Character used for separating between plural and singular of an element.
         */
        public const SINGULAR_SEPARATOR = '|';
        /**
         * Constructs a property path from a string.
         *
         * @param PropertyPath|string $propertyPath The property path as string or instance
         *
         * @throws InvalidArgumentException     If the given path is not a string
         * @throws InvalidPropertyPathException If the syntax of the property path is not valid
         */
        public function __construct($propertyPath)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function __toString()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getLength()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getParent()
        {
        }
        /**
         * Returns a new iterator for this path.
         *
         * @return PropertyPathIteratorInterface
         */
        #[\ReturnTypeWillChange]
        public function getIterator()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getElements()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getElement(int $index)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isProperty(int $index)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isIndex(int $index)
        {
        }
    }
    /**
     * Traverses a property path and provides additional methods to find out
     * information about the current element.
     *
     * @author Bernhard Schussek <bschussek@gmail.com>
     *
     * @extends \ArrayIterator<int, string>
     */
    class PropertyPathIterator extends \ArrayIterator implements \Symfony\Component\PropertyAccess\PropertyPathIteratorInterface
    {
        protected $path;
        public function __construct(\Symfony\Component\PropertyAccess\PropertyPathInterface $path)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isIndex()
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isProperty()
        {
        }
    }
}
namespace Symfony\Component\PropertyInfo {
    /**
     * The write mutator defines how a property can be written.
     *
     * @author Joel Wurtz <jwurtz@jolicode.com>
     *
     * @internal
     */
    final class PropertyWriteInfo
    {
        public const TYPE_NONE = 'none';
        public const TYPE_METHOD = 'method';
        public const TYPE_PROPERTY = 'property';
        public const TYPE_ADDER_AND_REMOVER = 'adder_and_remover';
        public const TYPE_CONSTRUCTOR = 'constructor';
        public const VISIBILITY_PUBLIC = 'public';
        public const VISIBILITY_PROTECTED = 'protected';
        public const VISIBILITY_PRIVATE = 'private';
        public function __construct(string $type = self::TYPE_NONE, string $name = null, string $visibility = null, bool $static = null)
        {
        }
        public function getType() : string
        {
        }
        public function getName() : string
        {
        }
        public function setAdderInfo(self $adderInfo) : void
        {
        }
        public function getAdderInfo() : self
        {
        }
        public function setRemoverInfo(self $removerInfo) : void
        {
        }
        public function getRemoverInfo() : self
        {
        }
        public function getVisibility() : string
        {
        }
        public function isStatic() : bool
        {
        }
        public function setErrors(array $errors) : void
        {
        }
        public function getErrors() : array
        {
        }
        public function hasErrors() : bool
        {
        }
    }
}
namespace Symfony\Component\PropertyInfo\DependencyInjection {
    /**
     * Adds extractors to the property_info service.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     */
    class PropertyInfoPass implements \Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface
    {
        use \Symfony\Component\DependencyInjection\Compiler\PriorityTaggedServiceTrait;
        /**
         * {@inheritdoc}
         */
        public function process(\Symfony\Component\DependencyInjection\ContainerBuilder $container)
        {
        }
    }
    /**
     * Adds extractors to the property_info.constructor_extractor service.
     *
     * @author Dmitrii Poddubnyi <dpoddubny@gmail.com>
     */
    final class PropertyInfoConstructorPass implements \Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface
    {
        use \Symfony\Component\DependencyInjection\Compiler\PriorityTaggedServiceTrait;
        /**
         * {@inheritdoc}
         */
        public function process(\Symfony\Component\DependencyInjection\ContainerBuilder $container)
        {
        }
    }
}
namespace Symfony\Component\PropertyInfo {
    /**
     * Extracts the list of properties available for the given class.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     */
    interface PropertyListExtractorInterface
    {
        /**
         * Gets the list of properties available for the given class.
         *
         * @return string[]|null
         */
        public function getProperties(string $class, array $context = []);
    }
    /**
     * Type Extractor Interface.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     */
    interface PropertyTypeExtractorInterface
    {
        /**
         * Gets types of a property.
         *
         * @return Type[]|null
         */
        public function getTypes(string $class, string $property, array $context = []);
    }
    /**
     * Guesses the property's human readable description.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     */
    interface PropertyDescriptionExtractorInterface
    {
        /**
         * Gets the short description of the property.
         */
        public function getShortDescription(string $class, string $property, array $context = []) : ?string;
        /**
         * Gets the long description of the property.
         */
        public function getLongDescription(string $class, string $property, array $context = []) : ?string;
    }
    /**
     * Guesses if the property can be accessed or mutated.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     */
    interface PropertyAccessExtractorInterface
    {
        /**
         * Is the property readable?
         *
         * @return bool|null
         */
        public function isReadable(string $class, string $property, array $context = []);
        /**
         * Is the property writable?
         *
         * @return bool|null
         */
        public function isWritable(string $class, string $property, array $context = []);
    }
    /**
     * Gets info about PHP class properties.
     *
     * A convenient interface inheriting all specific info interfaces.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     */
    interface PropertyInfoExtractorInterface extends \Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface, \Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface, \Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface, \Symfony\Component\PropertyInfo\PropertyListExtractorInterface
    {
    }
    /**
     * Guesses if the property can be initialized through the constructor.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     */
    interface PropertyInitializableExtractorInterface
    {
        /**
         * Is the property initializable? Returns true if a constructor's parameter matches the given property name.
         */
        public function isInitializable(string $class, string $property, array $context = []) : ?bool;
    }
    /**
     * Default {@see PropertyInfoExtractorInterface} implementation.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     *
     * @final
     */
    class PropertyInfoExtractor implements \Symfony\Component\PropertyInfo\PropertyInfoExtractorInterface, \Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface
    {
        /**
         * @param iterable<mixed, PropertyListExtractorInterface>          $listExtractors
         * @param iterable<mixed, PropertyTypeExtractorInterface>          $typeExtractors
         * @param iterable<mixed, PropertyDescriptionExtractorInterface>   $descriptionExtractors
         * @param iterable<mixed, PropertyAccessExtractorInterface>        $accessExtractors
         * @param iterable<mixed, PropertyInitializableExtractorInterface> $initializableExtractors
         */
        public function __construct(iterable $listExtractors = [], iterable $typeExtractors = [], iterable $descriptionExtractors = [], iterable $accessExtractors = [], iterable $initializableExtractors = [])
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getProperties(string $class, array $context = []) : ?array
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getShortDescription(string $class, string $property, array $context = []) : ?string
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getLongDescription(string $class, string $property, array $context = []) : ?string
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getTypes(string $class, string $property, array $context = []) : ?array
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isReadable(string $class, string $property, array $context = []) : ?bool
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isWritable(string $class, string $property, array $context = []) : ?bool
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isInitializable(string $class, string $property, array $context = []) : ?bool
        {
        }
    }
}
namespace Symfony\Component\PropertyInfo\PhpStan {
    /**
     * NameScope class adapted from PHPStan code.
     *
     * @copyright Copyright (c) 2016, PHPStan https://github.com/phpstan/phpstan-src
     * @copyright Copyright (c) 2016, Ondřej Mirtes
     * @author Baptiste Leduc <baptiste.leduc@gmail.com>
     *
     * @internal
     */
    final class NameScope
    {
        public function __construct(string $className, string $namespace, array $uses = [])
        {
        }
        public function resolveStringName(string $name) : string
        {
        }
        public function resolveRootClass() : string
        {
        }
    }
    /**
     * @author Baptiste Leduc <baptiste.leduc@gmail.com>
     *
     * @internal
     */
    final class NameScopeFactory
    {
        public function create(string $fullClassName) : \Symfony\Component\PropertyInfo\PhpStan\NameScope
        {
        }
    }
}
namespace Symfony\Component\PropertyInfo\Util {
    /**
     * Transforms a php doc type to a {@link Type} instance.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     * @author Guilhem N. <egetick@gmail.com>
     */
    final class PhpDocTypeHelper
    {
        /**
         * Creates a {@see Type} from a PHPDoc type.
         *
         * @return Type[]
         */
        public function getTypes(\phpDocumentor\Reflection\Type $varType) : array
        {
        }
    }
    /**
     * Transforms a php doc tag value to a {@link Type} instance.
     *
     * @author Baptiste Leduc <baptiste.leduc@gmail.com>
     *
     * @internal
     */
    final class PhpStanTypeHelper
    {
        /**
         * Creates a {@see Type} from a PhpDocTagValueNode type.
         *
         * @return Type[]
         */
        public function getTypes(\PHPStan\PhpDocParser\Ast\PhpDoc\PhpDocTagValueNode $node, \Symfony\Component\PropertyInfo\PhpStan\NameScope $nameScope) : array
        {
        }
    }
}
namespace Symfony\Component\PropertyInfo {
    /**
     * The property read info tells how a property can be read.
     *
     * @author Joel Wurtz <jwurtz@jolicode.com>
     *
     * @internal
     */
    final class PropertyReadInfo
    {
        public const TYPE_METHOD = 'method';
        public const TYPE_PROPERTY = 'property';
        public const VISIBILITY_PUBLIC = 'public';
        public const VISIBILITY_PROTECTED = 'protected';
        public const VISIBILITY_PRIVATE = 'private';
        public function __construct(string $type, string $name, string $visibility, bool $static, bool $byRef)
        {
        }
        /**
         * Get type of access.
         */
        public function getType() : string
        {
        }
        /**
         * Get name of the access, which can be a method name or a property name, depending on the type.
         */
        public function getName() : string
        {
        }
        public function getVisibility() : string
        {
        }
        public function isStatic() : bool
        {
        }
        /**
         * Whether this accessor can be accessed by reference.
         */
        public function canBeReference() : bool
        {
        }
    }
}
namespace Symfony\Component\PropertyInfo\Extractor {
    /**
     * Infers the constructor argument type.
     *
     * @author Dmitrii Poddubnyi <dpoddubny@gmail.com>
     *
     * @internal
     */
    interface ConstructorArgumentTypeExtractorInterface
    {
        /**
         * Gets types of an argument from constructor.
         *
         * @return Type[]|null
         *
         * @internal
         */
        public function getTypesFromConstructor(string $class, string $property) : ?array;
    }
    /**
     * Extracts data using a PHPDoc parser.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     *
     * @final
     */
    class PhpDocExtractor implements \Symfony\Component\PropertyInfo\PropertyDescriptionExtractorInterface, \Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface, \Symfony\Component\PropertyInfo\Extractor\ConstructorArgumentTypeExtractorInterface
    {
        public const PROPERTY = 0;
        public const ACCESSOR = 1;
        public const MUTATOR = 2;
        /**
         * @param string[]|null $mutatorPrefixes
         * @param string[]|null $accessorPrefixes
         * @param string[]|null $arrayMutatorPrefixes
         */
        public function __construct(\phpDocumentor\Reflection\DocBlockFactoryInterface $docBlockFactory = null, array $mutatorPrefixes = null, array $accessorPrefixes = null, array $arrayMutatorPrefixes = null)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getShortDescription(string $class, string $property, array $context = []) : ?string
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getLongDescription(string $class, string $property, array $context = []) : ?string
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getTypes(string $class, string $property, array $context = []) : ?array
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getTypesFromConstructor(string $class, string $property) : ?array
        {
        }
    }
}
namespace Symfony\Component\PropertyInfo {
    /**
     * Extract read information for the property of a class.
     *
     * @author Joel Wurtz <jwurtz@jolicode.com>
     */
    interface PropertyReadInfoExtractorInterface
    {
        /**
         * Get read information object for a given property of a class.
         */
        public function getReadInfo(string $class, string $property, array $context = []) : ?\Symfony\Component\PropertyInfo\PropertyReadInfo;
    }
    /**
     * Extract write information for the property of a class.
     *
     * @author Joel Wurtz <jwurtz@jolicode.com>
     */
    interface PropertyWriteInfoExtractorInterface
    {
        /**
         * Get write information object for a given property of a class.
         */
        public function getWriteInfo(string $class, string $property, array $context = []) : ?\Symfony\Component\PropertyInfo\PropertyWriteInfo;
    }
}
namespace Symfony\Component\PropertyInfo\Extractor {
    /**
     * Extracts data using the reflection API.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     *
     * @final
     */
    class ReflectionExtractor implements \Symfony\Component\PropertyInfo\PropertyListExtractorInterface, \Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface, \Symfony\Component\PropertyInfo\PropertyAccessExtractorInterface, \Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface, \Symfony\Component\PropertyInfo\PropertyReadInfoExtractorInterface, \Symfony\Component\PropertyInfo\PropertyWriteInfoExtractorInterface, \Symfony\Component\PropertyInfo\Extractor\ConstructorArgumentTypeExtractorInterface
    {
        /**
         * @internal
         */
        public static array $defaultMutatorPrefixes = ['add', 'remove', 'set'];
        /**
         * @internal
         */
        public static array $defaultAccessorPrefixes = ['get', 'is', 'has', 'can'];
        /**
         * @internal
         */
        public static array $defaultArrayMutatorPrefixes = ['add', 'remove'];
        public const ALLOW_PRIVATE = 1;
        public const ALLOW_PROTECTED = 2;
        public const ALLOW_PUBLIC = 4;
        /** @var int Allow none of the magic methods */
        public const DISALLOW_MAGIC_METHODS = 0;
        /** @var int Allow magic __get methods */
        public const ALLOW_MAGIC_GET = 1 << 0;
        /** @var int Allow magic __set methods */
        public const ALLOW_MAGIC_SET = 1 << 1;
        /** @var int Allow magic __call methods */
        public const ALLOW_MAGIC_CALL = 1 << 2;
        /**
         * @param string[]|null $mutatorPrefixes
         * @param string[]|null $accessorPrefixes
         * @param string[]|null $arrayMutatorPrefixes
         */
        public function __construct(array $mutatorPrefixes = null, array $accessorPrefixes = null, array $arrayMutatorPrefixes = null, bool $enableConstructorExtraction = true, int $accessFlags = self::ALLOW_PUBLIC, \Symfony\Component\String\Inflector\InflectorInterface $inflector = null, int $magicMethodsFlags = self::ALLOW_MAGIC_GET | self::ALLOW_MAGIC_SET)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getProperties(string $class, array $context = []) : ?array
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getTypes(string $class, string $property, array $context = []) : ?array
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getTypesFromConstructor(string $class, string $property) : ?array
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isReadable(string $class, string $property, array $context = []) : ?bool
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isWritable(string $class, string $property, array $context = []) : ?bool
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isInitializable(string $class, string $property, array $context = []) : ?bool
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getReadInfo(string $class, string $property, array $context = []) : ?\Symfony\Component\PropertyInfo\PropertyReadInfo
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getWriteInfo(string $class, string $property, array $context = []) : ?\Symfony\Component\PropertyInfo\PropertyWriteInfo
        {
        }
    }
    /**
     * Lists available properties using Symfony Serializer Component metadata.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     *
     * @final
     */
    class SerializerExtractor implements \Symfony\Component\PropertyInfo\PropertyListExtractorInterface
    {
        public function __construct(\Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactoryInterface $classMetadataFactory)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getProperties(string $class, array $context = []) : ?array
        {
        }
    }
    /**
     * Extracts the constructor argument type using ConstructorArgumentTypeExtractorInterface implementations.
     *
     * @author Dmitrii Poddubnyi <dpoddubny@gmail.com>
     */
    final class ConstructorExtractor implements \Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface
    {
        /**
         * @param iterable<int, ConstructorArgumentTypeExtractorInterface> $extractors
         */
        public function __construct(iterable $extractors = [])
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getTypes(string $class, string $property, array $context = []) : ?array
        {
        }
    }
    /**
     * Extracts data using PHPStan parser.
     *
     * @author Baptiste Leduc <baptiste.leduc@gmail.com>
     */
    final class PhpStanExtractor implements \Symfony\Component\PropertyInfo\PropertyTypeExtractorInterface, \Symfony\Component\PropertyInfo\Extractor\ConstructorArgumentTypeExtractorInterface
    {
        /**
         * @param list<string>|null $mutatorPrefixes
         * @param list<string>|null $accessorPrefixes
         * @param list<string>|null $arrayMutatorPrefixes
         */
        public function __construct(array $mutatorPrefixes = null, array $accessorPrefixes = null, array $arrayMutatorPrefixes = null)
        {
        }
        public function getTypes(string $class, string $property, array $context = []) : ?array
        {
        }
        public function getTypesFromConstructor(string $class, string $property) : ?array
        {
        }
    }
}
namespace Symfony\Component\PropertyInfo {
    /**
     * Adds a PSR-6 cache layer on top of an extractor.
     *
     * @author Kévin Dunglas <dunglas@gmail.com>
     *
     * @final
     */
    class PropertyInfoCacheExtractor implements \Symfony\Component\PropertyInfo\PropertyInfoExtractorInterface, \Symfony\Component\PropertyInfo\PropertyInitializableExtractorInterface
    {
        public function __construct(\Symfony\Component\PropertyInfo\PropertyInfoExtractorInterface $propertyInfoExtractor, \Psr\Cache\CacheItemPoolInterface $cacheItemPool)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isReadable(string $class, string $property, array $context = []) : ?bool
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isWritable(string $class, string $property, array $context = []) : ?bool
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getShortDescription(string $class, string $property, array $context = []) : ?string
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getLongDescription(string $class, string $property, array $context = []) : ?string
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getProperties(string $class, array $context = []) : ?array
        {
        }
        /**
         * {@inheritdoc}
         */
        public function getTypes(string $class, string $property, array $context = []) : ?array
        {
        }
        /**
         * {@inheritdoc}
         */
        public function isInitializable(string $class, string $property, array $context = []) : ?bool
        {
        }
    }
}
namespace Symfony\Polyfill\Php80 {
    /**
     * @author Ion Bazan <ion.bazan@gmail.com>
     * @author Nico Oelgart <nicoswd@gmail.com>
     * @author Nicolas Grekas <p@tchwork.com>
     *
     * @internal
     */
    final class Php80
    {
        public static function fdiv(float $dividend, float $divisor) : float
        {
        }
        public static function get_debug_type($value) : string
        {
        }
        public static function get_resource_id($res) : int
        {
        }
        public static function preg_last_error_msg() : string
        {
        }
        public static function str_contains(string $haystack, string $needle) : bool
        {
        }
        public static function str_starts_with(string $haystack, string $needle) : bool
        {
        }
        public static function str_ends_with(string $haystack, string $needle) : bool
        {
        }
    }
}
namespace Sprain\SwissQrBill\DataGroup {
    /**
     * @internal
     */
    interface QrCodeableInterface
    {
        public function getQrCodeData() : array;
    }
}
namespace Sprain\SwissQrBill\DataGroup\EmptyElement {
    /**
     * @internal
     */
    final class EmptyAddress implements \Sprain\SwissQrBill\DataGroup\QrCodeableInterface
    {
        public const ADDRESS_TYPE = '';
        public function getQrCodeData() : array
        {
        }
    }
    /**
     * @internal
     */
    final class EmptyAdditionalInformation implements \Sprain\SwissQrBill\DataGroup\QrCodeableInterface
    {
        public const TRAILER_EPD = 'EPD';
        public function getQrCodeData() : array
        {
        }
    }
}
namespace Sprain\SwissQrBill\DataGroup {
    /**
     * @internal
     */
    interface AddressInterface
    {
        public function getName() : ?string;
        public function getCountry() : ?string;
        public function getFullAddress() : string;
    }
}
namespace Sprain\SwissQrBill\DataGroup\Element {
    final class PaymentReference implements \Sprain\SwissQrBill\DataGroup\QrCodeableInterface
    {
        public const TYPE_QR = 'QRR';
        public const TYPE_SCOR = 'SCOR';
        public const TYPE_NON = 'NON';
        public static function create(string $type, ?string $reference = null) : self
        {
        }
        public function getType() : string
        {
        }
        public function getReference() : ?string
        {
        }
        public function getFormattedReference() : ?string
        {
        }
        public function getQrCodeData() : array
        {
        }
        public function getGroupSequence()
        {
        }
    }
    final class PaymentAmountInformation implements \Sprain\SwissQrBill\DataGroup\QrCodeableInterface
    {
        public const CURRENCY_CHF = 'CHF';
        public const CURRENCY_EUR = 'EUR';
        public static function create(string $currency, ?float $amount = null) : self
        {
        }
        public function getAmount() : ?float
        {
        }
        public function getFormattedAmount() : ?string
        {
        }
        public function getCurrency() : string
        {
        }
        public function getQrCodeData() : array
        {
        }
    }
    class CombinedAddress implements \Sprain\SwissQrBill\DataGroup\AddressInterface, \Sprain\SwissQrBill\DataGroup\QrCodeableInterface
    {
        public const ADDRESS_TYPE = 'K';
        public static function create(string $name, ?string $addressLine1, string $addressLine2, string $country) : self
        {
        }
        public function getName() : string
        {
        }
        public function getAddressLine1() : ?string
        {
        }
        public function getAddressLine2() : string
        {
        }
        public function getCountry() : string
        {
        }
        public function getFullAddress() : string
        {
        }
        public function getQrCodeData() : array
        {
        }
    }
    final class CreditorInformation implements \Sprain\SwissQrBill\DataGroup\QrCodeableInterface
    {
        public static function create(string $iban) : self
        {
        }
        public function getIban() : string
        {
        }
        public function getFormattedIban() : string
        {
        }
        public function containsQrIban() : bool
        {
        }
        public function getQrCodeData() : array
        {
        }
    }
    final class AdditionalInformation implements \Sprain\SwissQrBill\DataGroup\QrCodeableInterface
    {
        public const TRAILER_EPD = 'EPD';
        public static function create(?string $message, ?string $billInformation = null) : self
        {
        }
        public function getMessage() : ?string
        {
        }
        public function getBillInformation() : ?string
        {
        }
        public function getFormattedString() : ?string
        {
        }
        public function getQrCodeData() : array
        {
        }
    }
    final class Header implements \Sprain\SwissQrBill\DataGroup\QrCodeableInterface
    {
        public const QRTYPE_SPC = 'SPC';
        public const VERSION_0200 = '0200';
        public const CODING_LATIN = 1;
        public static function create(string $qrType, string $version, int $coding) : self
        {
        }
        public function getQrType() : string
        {
        }
        public function getVersion() : string
        {
        }
        public function getCoding() : int
        {
        }
        public function getQrCodeData() : array
        {
        }
    }
    final class StructuredAddress implements \Sprain\SwissQrBill\DataGroup\AddressInterface, \Sprain\SwissQrBill\DataGroup\QrCodeableInterface
    {
        public const ADDRESS_TYPE = 'S';
        public static function createWithoutStreet(string $name, string $postalCode, string $city, string $country) : self
        {
        }
        public static function createWithStreet(string $name, string $street, ?string $buildingNumber, string $postalCode, string $city, string $country) : self
        {
        }
        public function getName() : string
        {
        }
        public function getStreet() : ?string
        {
        }
        public function getBuildingNumber() : ?string
        {
        }
        public function getPostalCode() : string
        {
        }
        public function getCity() : string
        {
        }
        public function getCountry() : string
        {
        }
        public function getFullAddress() : string
        {
        }
        public function getQrCodeData() : array
        {
        }
    }
    final class AlternativeScheme implements \Sprain\SwissQrBill\DataGroup\QrCodeableInterface
    {
        public static function create(string $parameter) : self
        {
        }
        public function getParameter() : string
        {
        }
        public function getQrCodeData() : array
        {
        }
    }
}
namespace Sprain\SwissQrBill\Exception {
    final class InvalidFpdfImageFormat extends \Exception
    {
    }
    final class InvalidQrBillDataException extends \Exception
    {
    }
}
namespace Sprain\SwissQrBill\QrCode {
    final class QrCode extends \Endroid\QrCode\QrCode implements \Endroid\QrCode\QrCodeInterface
    {
        public const FILE_FORMAT_PNG = 'png';
        public const FILE_FORMAT_SVG = 'svg';
        public function writeFile(string $path) : void
        {
        }
        public function writeDataUri() : string
        {
        }
        public function setWriterByExtension(string $extension) : void
        {
        }
    }
}
namespace Sprain\SwissQrBill\QrCode\Exception {
    class UnsupportedFileExtensionException extends \Exception
    {
    }
}
namespace Sprain\SwissQrBill\Reference {
    final class RfCreditorReferenceGenerator
    {
        public static function generate(string $reference) : string
        {
        }
        public function __construct(string $reference)
        {
        }
        public function doGenerate() : string
        {
        }
    }
    final class QrPaymentReferenceGenerator
    {
        public static function generate(?string $customerIdentificationNumber, string $referenceNumber) : string
        {
        }
        public function __construct(?string $customerIdentificationNumber, string $referenceNumber)
        {
        }
        public function getCustomerIdentificationNumber() : ?string
        {
        }
        public function getReferenceNumber() : ?string
        {
        }
        public function doGenerate() : string
        {
        }
    }
}
namespace Sprain\SwissQrBill\String {
    /**
     * @internal
     */
    final class StringModifier
    {
        public static function replaceLineBreaksWithString(?string $string) : string
        {
        }
        public static function replaceMultipleSpacesWithOne(?string $string) : string
        {
        }
        public static function stripWhitespace(?string $string) : string
        {
        }
    }
}
namespace Sprain\SwissQrBill {
    final class QrBill
    {
        public static function create() : self
        {
        }
        public function getHeader() : \Sprain\SwissQrBill\DataGroup\Element\Header
        {
        }
        public function setHeader(\Sprain\SwissQrBill\DataGroup\Element\Header $header) : self
        {
        }
        public function getCreditorInformation() : ?\Sprain\SwissQrBill\DataGroup\Element\CreditorInformation
        {
        }
        public function setCreditorInformation(\Sprain\SwissQrBill\DataGroup\Element\CreditorInformation $creditorInformation) : self
        {
        }
        public function getCreditor() : ?\Sprain\SwissQrBill\DataGroup\AddressInterface
        {
        }
        public function setCreditor(\Sprain\SwissQrBill\DataGroup\AddressInterface $creditor) : self
        {
        }
        public function getPaymentAmountInformation() : ?\Sprain\SwissQrBill\DataGroup\Element\PaymentAmountInformation
        {
        }
        public function setPaymentAmountInformation(\Sprain\SwissQrBill\DataGroup\Element\PaymentAmountInformation $paymentAmountInformation) : self
        {
        }
        public function getUltimateDebtor() : ?\Sprain\SwissQrBill\DataGroup\AddressInterface
        {
        }
        public function setUltimateDebtor(\Sprain\SwissQrBill\DataGroup\AddressInterface $ultimateDebtor) : self
        {
        }
        public function getPaymentReference() : ?\Sprain\SwissQrBill\DataGroup\Element\PaymentReference
        {
        }
        public function setPaymentReference(\Sprain\SwissQrBill\DataGroup\Element\PaymentReference $paymentReference) : self
        {
        }
        public function getAdditionalInformation() : ?\Sprain\SwissQrBill\DataGroup\Element\AdditionalInformation
        {
        }
        public function setAdditionalInformation(\Sprain\SwissQrBill\DataGroup\Element\AdditionalInformation $additionalInformation) : self
        {
        }
        public function getAlternativeSchemes() : array
        {
        }
        public function setAlternativeSchemes(array $alternativeSchemes) : self
        {
        }
        public function addAlternativeScheme(\Sprain\SwissQrBill\DataGroup\Element\AlternativeScheme $alternativeScheme) : self
        {
        }
        /**
         * @throws InvalidQrBillDataException
         */
        public function getQrCode() : \Sprain\SwissQrBill\QrCode\QrCode
        {
        }
    }
}
namespace Sprain\SwissQrBill\PaymentPart\Translation {
    final class Translation
    {
        public static function getAllByLanguage($language) : ?array
        {
        }
        public static function get(string $key, string $language) : ?string
        {
        }
    }
}
namespace Sprain\SwissQrBill\PaymentPart\Output {
    interface OutputInterface
    {
        public function getQrBill() : ?\Sprain\SwissQrBill\QrBill;
        public function getLanguage() : ?string;
        public function getPaymentPart();
        public function setPrintable(bool $printable);
        public function isPrintable() : bool;
        public function setQrCodeImageFormat(string $imageFormat);
        public function getQrCodeImageFormat() : string;
    }
    abstract class AbstractOutput
    {
        protected \Sprain\SwissQrBill\QrBill $qrBill;
        protected string $language;
        protected bool $printable;
        protected string $qrCodeImageFormat;
        public function __construct(\Sprain\SwissQrBill\QrBill $qrBill, string $language)
        {
        }
        public function getQrBill() : ?\Sprain\SwissQrBill\QrBill
        {
        }
        public function getLanguage() : ?string
        {
        }
        public function setPrintable(bool $printable) : self
        {
        }
        public function isPrintable() : bool
        {
        }
        public function setQrCodeImageFormat(string $fileExtension) : self
        {
        }
        public function getQrCodeImageFormat() : string
        {
        }
        protected function getInformationElements() : array
        {
        }
        protected function getInformationElementsOfReceipt() : array
        {
        }
        protected function getCurrencyElements() : array
        {
        }
        protected function getAmountElements() : array
        {
        }
        protected function getAmountElementsReceipt() : array
        {
        }
        protected function getFurtherInformationElements() : array
        {
        }
        protected function getQrCode() : \Sprain\SwissQrBill\QrCode\QrCode
        {
        }
    }
}
namespace Sprain\SwissQrBill\PaymentPart\Output\TcPdfOutput {
    final class TcPdfOutput extends \Sprain\SwissQrBill\PaymentPart\Output\AbstractOutput implements \Sprain\SwissQrBill\PaymentPart\Output\OutputInterface
    {
        public function __construct(\Sprain\SwissQrBill\QrBill $qrBill, string $language, \TCPDF $tcPdf, float $offsetX = 0, float $offsetY = 0)
        {
        }
        public function getPaymentPart() : void
        {
        }
    }
}
namespace Sprain\SwissQrBill\PaymentPart\Output\Element {
    interface OutputElementInterface
    {
    }
    /**
     * @internal
     */
    final class Title implements \Sprain\SwissQrBill\PaymentPart\Output\Element\OutputElementInterface
    {
        public static function create(string $title) : self
        {
        }
        public function getTitle() : string
        {
        }
    }
    /**
     * @internal
     */
    final class Text implements \Sprain\SwissQrBill\PaymentPart\Output\Element\OutputElementInterface
    {
        public static function create(string $text) : self
        {
        }
        public function getText() : string
        {
        }
    }
    /**
     * @internal
     */
    final class Placeholder implements \Sprain\SwissQrBill\PaymentPart\Output\Element\OutputElementInterface
    {
        public const FILE_TYPE_SVG = 'svg';
        public const FILE_TYPE_PNG = 'png';
        public const PLACEHOLDER_TYPE_PAYABLE_BY = ['type' => 'placeholder_payable_by', 'fileSvg' => __DIR__ . '/../../../../assets/marks_65x25mm.svg', 'filePng' => __DIR__ . '/../../../../assets/marks_65x25mm.png', 'width' => 65, 'height' => 25];
        public const PLACEHOLDER_TYPE_PAYABLE_BY_RECEIPT = ['type' => 'placeholder_payable_by_receipt', 'fileSvg' => __DIR__ . '/../../../../assets/marks_52x20mm.svg', 'filePng' => __DIR__ . '/../../../../assets/marks_52x20mm.png', 'width' => 52, 'height' => 20];
        public const PLACEHOLDER_TYPE_AMOUNT = ['type' => 'placeholder_amount', 'fileSvg' => __DIR__ . '/../../../../assets/marks_40x15mm.svg', 'filePng' => __DIR__ . '/../../../../assets/marks_40x15mm.png', 'width' => 40, 'height' => 15];
        public const PLACEHOLDER_TYPE_AMOUNT_RECEIPT = ['type' => 'placeholder_amount_receipt', 'fileSvg' => __DIR__ . '/../../../../assets/marks_30x10mm.svg', 'filePng' => __DIR__ . '/../../../../assets/marks_30x10mm.png', 'width' => 30, 'height' => 10];
        public static function create(array $type) : self
        {
        }
        public function getType() : ?string
        {
        }
        public function getFile($type = self::FILE_TYPE_SVG) : string
        {
        }
        public function getWidth() : ?int
        {
        }
        public function getHeight() : ?int
        {
        }
    }
}
namespace Sprain\SwissQrBill\PaymentPart\Output\FpdfOutput {
    final class FpdfOutput extends \Sprain\SwissQrBill\PaymentPart\Output\AbstractOutput implements \Sprain\SwissQrBill\PaymentPart\Output\OutputInterface
    {
        public function __construct(\Sprain\SwissQrBill\QrBill $qrBill, string $language, \Fpdf\Fpdf $fpdf, float $offsetX = 0, float $offsetY = 0)
        {
        }
        public function getPaymentPart()
        {
        }
        public function setQrCodeImageFormat(string $fileExtension) : \Sprain\SwissQrBill\PaymentPart\Output\AbstractOutput
        {
        }
    }
}
namespace Sprain\SwissQrBill\PaymentPart\Output\HtmlOutput\Template {
    class TitleElementTemplate
    {
        public const TEMPLATE = <<<EOT
<h2>{{ {{ title }} }}</h2>
EOT;
    }
    class PlaceholderElementTemplate
    {
        public const TEMPLATE = <<<EOT
<img src="{{ file }}" style="width:{{ width }}mm; height:{{ height }}mm;" class="qr-bill-placeholder" id="{{ id }}">
EOT;
    }
    class TextElementTemplate
    {
        public const TEMPLATE = <<<EOT
<p>{{ text }}</p>
EOT;
    }
    class PaymentPartTemplate
    {
        public const TEMPLATE = <<<EOT
<style>
#qr-bill {
\tborder-collapse: collapse;
\tcolor: #000;
    z-index: 400; 
    position: absolute; 
    bottom: 11cm; 
    left: 0; 
    background-color: #fff;
}

#qr-content, #qr-content td { 
    height: 10.3cm; 
}

#qr-bill * {
\tfont-family: Arial, Frutiger, Helvetica, "Liberation Sans";
}

#qr-bill img.qr-bill-placeholder {
    margin-top: 1pt;
}

#qr-bill-separate-info {
    text-align: center;
    font-size: 8pt;
    line-height: 9pt;
\tborder-bottom: 0.2mm solid black;
\theight: 4.8mm;
\tvertical-align: middle;
}

/* h1 / h2 */
#qr-bill h1 {
\tfont-size: 11pt;
\tfont-weight: bold;
\tmargin: 0;
\tpadding: 0;
\theight: 7mm;
}

#qr-bill h2 {
\tfont-weight: bold;
\tmargin: 0;
\tpadding: 0;
}

#qr-bill-payment-part h2 {
\tfont-size: 8pt;
\tline-height: 11pt;\t
    margin-top: 11pt;
}

#qr-bill-receipt h2 {
\tfont-size: 6pt;
\tline-height: 8pt;\t
    margin-top: 8pt;
}

#qr-bill-payment-part h2:first-child,
#qr-bill-receipt h2:first-child {
\tmargin-top: 0;
}

/* p */
#qr-bill p {
\tfont-weight: normal;
\tmargin: 0;
\tpadding: 0;
}

#qr-bill-receipt p {
\tfont-size: 8pt;
\tline-height: 9pt;
}

#qr-bill-payment-part p {
\tfont-size: 10pt;
\tline-height: 11pt;
}

#qr-bill-amount-area-receipt p{
    line-height: 11pt;
}

#qr-bill-amount-area p{
    line-height: 13pt;
}

#qr-bill-payment-further-information p {
    font-size: 7pt;
    line-height: 9pt;
}

/* Receipt */
#qr-bill-receipt {
    width: 56.8mm;
\tborder-right: 0.2mm solid black;
\tpadding-left: 5mm;
\tpadding-top: 5mm;
\tvertical-align: top;
}

#qr-bill-information-receipt {
    height: 56mm;
}

#qr-bill-amount-area-receipt {
    height: 14mm;
}

#qr-bill-currency-receipt {
    display: inline-block;
\tmargin-right: 2mm;
}

#qr-bill-amount-receipt {
    display: inline-block;
}

#qr-bill-acceptance-point {
    height: 18mm;
    text-align: right;
    margin-right: 5mm;
}

#qr-bill img#placeholder_amount_receipt {
    float: right;
    margin-top: -9pt;
    margin-right: 5mm;
}

/* Main part */
#qr-bill-payment-part {
    width: 138mm;
\tpadding-left: 5mm;
\tpadding-top: 5mm;
\tpadding-right: 5mm;
\tvertical-align: top;
}

#qr-bill-payment-part-left {
    display: inline-block;
    width: 51mm;
    vertical-align: top;
}

#qr-bill-payment-part-right {
    display: inline-block;
    vertical-align: top;
    margin-top: 0;
}

@media print,dompdf {
    #qr-bill-payment-part-right {
        margin-top:-11pt;
    }
}

#qr-bill-swiss-qr-image {
\twidth: 46mm;
\theight: 46mm;
\tmargin: 5mm;
\tmargin-left: 0;
}

#qr-bill-amount-area {
    height: 22mm;
}

#qr-bill-currency {
    display: inline-block;
\tmargin-right: 2mm;
}

#qr-bill-amount {
    display: inline-block;
}

#qr-bill-payment-further-information {
    clear: both;
}

#qr-bill img#placeholder_amount {
    margin-left: 11mm;
    margin-top: -11pt;
}

{{ printable-content }}
</style>

<table id="qr-bill">
    <tr id="qr-bill-separate-info">
        <td colspan="99"><span id="qr-bill-separate-info-text">{{ text.separate }}</span></td>
    </tr>
\t<tr id="qr-content">
\t    <td id="qr-bill-receipt">
\t        <h1>{{ text.receipt }}</h1>
\t        <div id="qr-bill-information-receipt">
                {{ information-content-receipt }}
            </div>
            <div id="qr-bill-amount-area-receipt">
                <div id="qr-bill-currency-receipt">
                    {{ currency-content }}
                </div>
                <div id="qr-bill-amount-receipt">
                    {{ amount-content-receipt }}
                </div>
            </div>
            <div id="qr-bill-acceptance-point">
                <h2>{{ text.acceptancePoint }}</h2>
            </div>
        </td>

        <td id="qr-bill-payment-part">
            <div id="qr-bill-payment-part-left">
                <h1>{{ text.paymentPart }}</h1>
                <img src="{{ swiss-qr-image }}" id="qr-bill-swiss-qr-image">
                <div id="qr-bill-amount-area">
                    <div id="qr-bill-currency">
                        {{ currency-content }}
                    </div>
                    <div id="qr-bill-amount">
                        {{ amount-content }}
                    </div>
                </div>
\t\t\t</div>
\t\t\t<div id="qr-bill-payment-part-right">
                <div id="qr-bill-information">
                    {{ information-content }}
                </div>
\t\t\t</div>
\t\t\t<div id="qr-bill-payment-further-information">
\t\t\t    {{ further-information-content }}
            </div>
        </td>
\t</tr>
</table>
EOT;
    }
    class PrintableStylesTemplate
    {
        public const TEMPLATE = <<<EOT
#qr-bill-separate-info {
    border-bottom: 0;
}

#qr-bill-separate-info-text {
    display: none;
}

#qr-bill-receipt {
    border-right: 0;
}
EOT;
    }
}
namespace Sprain\SwissQrBill\PaymentPart\Output\HtmlOutput {
    final class HtmlOutput extends \Sprain\SwissQrBill\PaymentPart\Output\AbstractOutput implements \Sprain\SwissQrBill\PaymentPart\Output\OutputInterface
    {
        public function getPaymentPart() : string
        {
        }
    }
}
namespace {
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Shamaa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: PHP and Arabic Language
     *  
     * Filename:   Arabic.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    Set of PHP classes developed to enhance Arabic web 
     *             applications by providing set of tools includes stem-based searching, 
     *             translitiration, soundex, Hijri calendar, charset detection and
     *             converter, spell numbers, keyboard language, Muslim prayer time, 
     *             auto-summarization, and more...
     *              
     * ----------------------------------------------------------------------
     *
     * @desc   Set of PHP classes developed to enhance Arabic web
     *         applications by providing set of tools includes stem-based searching, 
     *         translitiration, soundex, Hijri calendar, charset detection and
     *         converter, spell numbers, keyboard language, Muslim prayer time, 
     *         auto-summarization, and more...
     *          
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Shamaa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Shamaa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @version   4.0 released in Jan 8, 2016
     * @link      http://www.ar-php.org
     */
    /**
     * Core PHP and Arabic language class
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Shamaa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Shamaa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org
     */
    class I18N_Arabic
    {
        /**
         * @ignore
         */
        public $myObject;
        /**
         * @ignore
         */
        public $myClass;
        /**
         * @ignore
         */
        public $myFile;
        /**
         * Load selected library/Arabic class you would like to use its functionality
         *          
         * @param string  $library        [AutoSummarize|CharsetC|CharsetD|Date|Gender|
         *                                Glyphs|Identifier|KeySwap|Numbers|Query|Salat|
         *                                Soundex|StrToTime|WordTag|CompressStr|Mktime|
         *                                Transliteration|Stemmer|Standard|Normalise]
         * @param boolean $useAutoload    True to use Autoload (default is false)
         * @param boolean $useException   True to use Exception (default is false)
         * @param boolean $compatibleMode True to support old naming style before 
         *                                version 3.0 (default is true)
         *
         * @desc Load selected library/class you would like to use its functionality
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public function __construct($library, $useAutoload = \false, $useException = \false, $compatibleMode = \true)
        {
        }
        /**
         * Include file that include requested class
         * 
         * @param string $className Class name
         * 
         * @return null      
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public static function autoload($className)
        {
        }
        /**
         * Error handler function
         * 
         * @param int    $errno   The level of the error raised
         * @param string $errstr  The error message
         * @param string $errfile The filename that the error was raised in
         * @param int    $errline The line number the error was raised at
         * 
         * @return boolean FALSE      
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public static function myErrorHandler($errno, $errstr, $errfile, $errline)
        {
        }
        /**
         * Load selected Arabic library and create an instance of its class
         * 
         * @param string $library Library name
         * 
         * @return null      
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public function load($library)
        {
        }
        /**
         * Magic method __call() allows to capture invocation of non existing methods. 
         * That way __call() can be used to implement user defined method handling that 
         * depends on the name of the actual method being called.
         *
         * @param string $methodName Method name
         * @param array  $arguments  Array of arguments
         * 
         * @method Call a method from loaded sub class and take care of needed
         *         character set conversion for both input and output values.
         *
         * @return The value returned from the __call() method will be returned to 
         *         the caller of the method.
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public function __call($methodName, $arguments)
        {
        }
        /**
         * Garbage collection, release child objects directly
         *          
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public function __destruct()
        {
        }
        /**
         * Set charset used in class input Arabic strings
         *          
         * @param string $charset Input charset [utf-8|windows-1256|iso-8859-6]
         *      
         * @return TRUE if success, or FALSE if fail
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public function setInputCharset($charset)
        {
        }
        /**
         * Set charset used in class output Arabic strings
         *          
         * @param string $charset Output charset [utf-8|windows-1256|iso-8859-6]
         *      
         * @return boolean TRUE if success, or FALSE if fail
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public function setOutputCharset($charset)
        {
        }
        /**
         * Get the charset used in the input Arabic strings
         *      
         * @return string return current setting for class input Arabic charset
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public function getInputCharset()
        {
        }
        /**
         * Get the charset used in the output Arabic strings
         *         
         * @return string return current setting for class output Arabic charset
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public function getOutputCharset()
        {
        }
        /**
         * Get sub class file path to be included (mapping between class name and 
         * file name/path become independent now)
         *          
         * @param string $class Sub class name
         *                                  
         * @return string Sub class file path
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        protected static function getClassFile($class)
        {
        }
        /**
         * Send/set output charset in several output media in a proper way
         *
         * @param string   $mode [http|html|mysql|mysqli|pdo|text_email|html_email]
         * @param resource $conn The MySQL connection handler/the link identifier
         *                                  
         * @return string header formula if there is any (in cases of html, 
         *                text_email, and html_email)
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public function header($mode = 'http', $conn = \null)
        {
        }
        /**
         * Get web browser chosen/default language using ISO 639-1 codes (2-letter)
         *          
         * @return string Language using ISO 639-1 codes (2-letter)
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public static function getBrowserLang()
        {
        }
        /**
         * There is still a lack of original, localized, high-quality content and 
         * well-structured Arabic websites; This method help in tag HTML result pages 
         * from Arabic forum to enable filter it in/out.
         *
         * @param string $html The HTML content of the page in question
         *
         * @return boolean True if the input HTML is belong to a forum page
         * @author Khaled Al-Shamaa <khaled@ar-php.org>
         */
        public static function isForum($html)
        {
        }
    }
    /**
     * Arabic Exception class defined by extending the built-in Exception class.
     *  
     * @category  I18N
     * @package   I18N_Arabic
     * @author    Khaled Al-Shamaa <khaled@ar-php.org>
     * @copyright 2006-2013 Khaled Al-Shamaa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org
     */
    class ArabicException extends \Exception
    {
        /**
         * Make sure everything is assigned properly
         * 
         * @param string $message Exception message
         * @param int    $code    User defined exception code            
         */
        public function __construct($message, $code = 0)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Muslim Prayer Times
     *  
     * Filename:   Salat.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    The five Islamic prayers are named Fajr, Zuhr, Asr, Maghrib
     *             and Isha. The timing of these five prayers varies from place
     *             to place and from day to day. It is obligatory for Muslims
     *             to perform these prayers at the correct time.
     *              
     * ----------------------------------------------------------------------
     *  
     * Source: http://qasweb.org/qasforum/index.php?showtopic=177&st=0
     * By: Mohamad Magdy <mohamad_magdy_egy@hotmail.com>
     *  
     * ----------------------------------------------------------------------
     *  
     * Muslim Prayer Times
     *
     * Using this PHP Class you can calculate the time of Muslim prayer
     * according to the geographic location.
     * 
     * The five Islamic prayers are named Fajr, Zuhr, Asr, Maghrib and Isha. The timing 
     * of these five prayers varies from place to place and from day to day. It is 
     * obligatory for Muslims to perform these prayers at the correct time.
     * 
     * The prayer times for any given location on earth may be determined mathematically 
     * if the latitude and longitude of the location are known. However, the theoretical 
     * determination of prayer times is a lengthy process. Much of this tedium may be 
     * alleviated by using computer programs.
     * 
     * Definition of prayer times
     * 
     * - FAJR starts with the dawn or morning twilight. Fajr ends just before sunrise.
     * - ZUHR begins after midday when the trailing limb of the sun has passed the 
     *   meridian. For convenience, many published prayer timetables add five minutes to 
     *   mid-day (zawal) to obtain the start of Zuhr. Zuhr ends at the start of Asr time.
     * - The timing of ASR depends on the length of the shadow cast by an object. 
     *   According to the Shafi school of jurisprudence, Asr begins when the length of 
     *   the shadow of an object exceeds the length of the object. According to the 
     *   Hanafi school of jurisprudence, Asr begins when the length of the shadow 
     *   exceeds TWICE the length of the object. In both cases, the minimum length of 
     *   shadow (which occurs when the sun passes the meridian) is subtracted from the 
     *   length of the shadow before comparing it with the length of the object.
     * - MAGHRIB begins at sunset and ends at the start of isha.
     * - ISHA starts after dusk when the evening twilight disappears.      
     *
     * Example:
     * <code>
     *     date_default_timezone_set('UTC');
     *     
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('Salat');
     * 
     *     $obj->setLocation(33.513,36.292,2);
     *     $obj->setDate(date('j'), date('n'), date('Y'));
     * 
     *     $times = $obj->getPrayTime();
     * 
     *     echo '<b>Damascus, Syria</b><br />';
     *     echo date('l F j, Y').'<br /><br />';
     *        
     *     echo "<b class=hilight>Imsak:</b> {$times[8]}<br />";
     *     echo "<b class=hilight>Fajr:</b> {$times[0]}<br />";
     *     echo "<b class=hilight>Sunrise:</b> {$times[1]}<br />";
     *     echo "<b class=hilight>Zuhr:</b> {$times[2]}<br />";
     *     echo "<b class=hilight>Asr:</b> {$times[3]}<br />";
     *     echo "<b class=hilight>Sunset:</b> {$times[6]}<br />";
     *     echo "<b class=hilight>Maghrib:</b> {$times[4]}<br />";
     *     echo "<b class=hilight>Isha:</b> {$times[5]}<br />";    
     *     echo "<b class=hilight>Midnight:</b> {$times[7]}<br />";    
     * </code>
     * 
     * Qibla Determination Methods - Basic Spherical Trigonometric Formula
     * 
     * The problem of qibla determination has a simple formulation in spherical 
     * trigonometry. A is a given location, K is the Ka'ba, and N is the North Pole. 
     * The great circle arcs AN and KN are along the meridians through A and K, 
     * respectively, and both point to the north. The qibla is along the great circle 
     * arc AK. The spherical angle q = NAK is the angle at A from the north direction 
     * AN to the direction AK towards the Ka'ba, and so q is the qibla bearing to be 
     * computed. Let F and L be the latitude and longitude of A, and FK and LK be 
     * the latitude and longitude of K (the Ka'ba). If all angles and arc lengths 
     * are measured in degrees, then it is seen that the arcs AN and KN are of measure 
     * 90 - F and 90 - FK, respectively. Also, the angle ANK between the meridians 
     * of K and A equals the difference between the longitudes of A and K, that is, 
     * LK - L, no matter what the prime meridian is. Here we are given two sides and 
     * the included angle of a spherical triangle, and it is required to determine one 
     * other angle. One of the simplest solutions is given by the formula:
     * <pre> 
     *                       -1              sin(LK - L)
     *                q = tan   ------------------------------------------
     *                              cos F tan FK - sin F cos(LK - L) 
     * </pre>
     * In this Equation, the sign of the input quantities are assumed as follows: 
     * latitudes are positive if north, negative if south; longitudes are positive 
     * if east, negative if west. The quadrant of q is assumed to be so selected 
     * that sin q and cos q have the same sign as the numerator and denominator of 
     * this Equation. With these conventions, q will be positive for bearings east 
     * of north, negative for bearings west of north.
     * 
     * Reference:
     * The Correct Qibla, S. Kamal Abdali <k.abdali@acm.org>
     * PDF version in http://www.patriot.net/users/abdali/ftp/qibla.pdf    
     *
     * Example:
     * <code>
     *     date_default_timezone_set('UTC');
     *     
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('Salat');
     * 
     *     $obj->setLocation(33.513,36.292,2);
     *
     *     $direction = $obj->getQibla();
     *     echo "<b>Qibla Direction (from the north direction):</b> $direction<br />";
     * </code>
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class calculate the time of Muslim prayer according to the geographic 
     * location.
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Salat
    {
        /**
         * السنة
         * @ignore
         */
        protected $year = 1975;
        /**
         * الشهر
         * @ignore
         */
        protected $month = 8;
        /**
         * اليوم
         * @ignore
         */
        protected $day = 2;
        /**
         * فرق التوقيت العالمى
         * @ignore
         */
        protected $zone = 2;
        /**
         * خط الطول الجغرافى للمكان
         * @ignore
         */
        protected $long = 37.15861;
        /**
         * خط العرض الجغرافى
         * @ignore
         */
        protected $lat = 36.20278;
        /**
         * الارتفاع عن سطح البحر
         * @ignore
         */
        protected $elevation = 0;
        /**
         * زاوية الشروق والغروب
         * @ignore
         */
        protected $AB2 = -0.833333;
        /**
         * زاوية العشاء
         * @ignore
         */
        protected $AG2 = -18;
        /**
         * زاوية الفجر
         * @ignore
         */
        protected $AJ2 = -18;
        /**
         * المذهب
         * @ignore
         */
        protected $school = 'Shafi';
        /**
         * الطائفة
         * @ignore
         */
        protected $view = 'Sunni';
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Setting date of day for Salat calculation
         *      
         * @param integer $m Month of date you want to calculate Salat in
         * @param integer $d Day of date you want to calculate Salat in
         * @param integer $y Year (four digits) of date you want to calculate Salat in
         *      
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setDate($m = 8, $d = 2, $y = 1975)
        {
        }
        /**
         * Setting location information for Salat calculation
         *      
         * @param decimal $l1 Latitude of location you want to calculate Salat time in
         * @param decimal $l2 Longitude of location you want to calculate Salat time in
         * @param integer $z  Time Zone, offset from UTC (see also Greenwich Mean Time)
         * @param integer $e  Elevation, it is the observer's height in meters.
         *      
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setLocation($l1 = 36.20278, $l2 = 37.15861, $z = 2, $e = 0)
        {
        }
        /**
         * Setting rest of Salat calculation configuration
         * 
         * Convention                                 Fajr Angle  Isha Angle
         * 
         * Muslim World League                              -18       -17
         *      
         * Islamic Society of North America (ISNA)          -15       -15
         *      
         * Egyptian General Authority of Survey               -19.5     -17.5
         *      
         * Umm al-Qura University, Makkah                   -18.5   
         * Isha 90  min after Maghrib, 120 min during Ramadan
         *      
         * University of Islamic Sciences, Karachi          -18       -18
         *      
         * Institute of Geophysics, University of Tehran      -17.7     -14(*)
         *      
         * Shia Ithna Ashari, Leva Research Institute, Qum  -16       -14
         * 
         * (*) Isha angle is not explicitly defined in Tehran method
         * Fajr Angle = $fajrArc, Isha Angle = $ishaArc     
         *                 
         * - حزب العلماء في لندن لدول
         * أوروبا في خطوط عرض تزيد على 48
         *       
         *      $ishaArc = -17
         *      $fajrArc = -17
         *      
         * @param string  $sch        [Shafi|Hanafi] to define Muslims Salat 
         *                            calculation method (affect Asr time)
         * @param decimal $sunriseArc Sun rise arc (default value is -0.833333)
         * @param decimal $ishaArc    Isha arc (default value is -18)
         * @param decimal $fajrArc    Fajr arc (default value is -18)
         * @param string  $view       [Sunni|Shia] to define Muslims Salat calculation
         *                            method (affect Maghrib and Midnight time)
         *      
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setConf($sch = 'Shafi', $sunriseArc = -0.833333, $ishaArc = -17.5, $fajrArc = -19.5, $view = 'Sunni')
        {
        }
        /**
         * Alias for getPrayTime2 method
         *                        
         * @return array of Salat times + sun rise in the following format
         *               hh:mm where hh is the hour in local format and 24 mode
         *               mm is minutes with leading zero to be 2 digits always
         *               array items is [$Fajr, $Sunrise, $Dhuhr, $Asr, $Maghrib, 
         *               $Isha, $Sunset, $Midnight, $Imsak, array $timestamps]
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         * @author Hamid Zarrabi-Zadeh <zarrabi@scs.carleton.ca>
         * @source http://praytimes.org/calculation
         */
        public function getPrayTime()
        {
        }
        /**
         * Calculate Salat times for the date set in setSalatDate methode, and 
         * location set in setSalatLocation.
         *                        
         * @return array of Salat times + sun rise in the following format
         *               hh:mm where hh is the hour in local format and 24 mode
         *               mm is minutes with leading zero to be 2 digits always
         *               array items is [$Fajr, $Sunrise, $Dhuhr, $Asr, $Maghrib, 
         *               $Isha, $Sunset, $Midnight, $Imsak, array $timestamps]
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         * @author Hamid Zarrabi-Zadeh <zarrabi@scs.carleton.ca>
         * @source http://praytimes.org/calculation
         */
        public function getPrayTime2()
        {
        }
        /**
         * Determine Qibla direction using basic spherical trigonometric formula 
         *                        
         * @return float Qibla Direction (from the north direction) in degrees
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         * @author S. Kamal Abdali <k.abdali@acm.org>
         * @source http://www.patriot.net/users/abdali/ftp/qibla.pdf
         */
        public function getQibla()
        {
        }
        /**
         * Convert coordinates presented in degrees, minutes and seconds 
         * (i.e. 12°34'56"S formula) into usual float number in degree unit scale 
         * (i.e. -12.5822 value)
         *      
         * @param string $value Coordinate presented in degrees, minutes and seconds
         *                      (i.e. 12°34'56"S formula)     
         *      
         * @return float Equivalent float number in degree unit scale
         *               (i.e. -12.5822 value)     
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function coordinate2deg($value)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     * 
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Functions to normalise Arabic text.
     *  
     * Filename:   Normalise.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:   Text normalisation through various stages. Also: unshaping. 
     *  
     * ----------------------------------------------------------------------
     *  
     *  This class provides various functions to manipulate arabic text and
     *  normalise it by applying filters, for example, to strip tatweel and
     *  tashkeel, to normalise hamza and lamalephs, and to unshape
     *  a joined Arabic text back into its normalised form.
     *
     *  There is also a function to reverse a utf8 string.
     *
     *  The functions are helpful for searching, indexing and similar 
     *  functions.
     *
     * Note that this class can only deal with UTF8 strings. You can use functions
     * from the other classes to convert between encodings if necessary.
     *
     * Example:
     * <code>
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('Normalise');
     * 
     *     $str = "Arabic text with tatweel, tashkeel...";
     * 
     *     echo "<p><u><i>Before:</i></u><br />$str<br /><br />";
     *     
     *     $text = $obj->stripTatweel($str);
     *        
     *     echo "<u><i>After:</i></u><br />$text<br /><br />";    
     * </code>                  
     *
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Djihed Afifi <djihed@gmail.com>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     *  This class provides various functions to manipulate arabic text and
     *  normalise it by applying filters, for example, to strip tatweel and
     *  tashkeel, to normalise hamza and lamalephs, and to unshape
     *  a joined Arabic text back into its normalised form.
     *
     *  The functions are helpful for searching, indexing and similar 
     *  functions.
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Djihed Afifi <djihed@gmail.com>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Normalise
    {
        /**
         * Load the Unicode constants that will be used ibn substitutions
         * and normalisations.
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Strip all tatweel characters from an Arabic text.
         * 
         * @param string $text The text to be stripped.
         *      
         * @return string the stripped text.
         * @author Djihed Afifi <djihed@gmail.com>
         */
        public function stripTatweel($text)
        {
        }
        /**
         * Strip all tashkeel characters from an Arabic text.
         * 
         * @param string $text The text to be stripped.
         *      
         * @return string the stripped text.
         * @author Djihed Afifi <djihed@gmail.com>
         */
        public function stripTashkeel($text)
        {
        }
        /**
         * Normalise all Hamza characters to their corresponding aleph 
         * character in an Arabic text.
         *
         * @param string $text The text to be normalised.
         *      
         * @return string the normalised text.
         * @author Djihed Afifi <djihed@gmail.com>
         */
        public function normaliseHamza($text)
        {
        }
        /**
         * Unicode uses some special characters where the lamaleph and any
         * hamza above them are combined into one code point. Some input
         * system use them. This function expands these characters.
         *
         * @param string $text The text to be normalised.
         *      
         * @return string the normalised text.
         * @author Djihed Afifi <djihed@gmail.com>
         */
        public function normaliseLamaleph($text)
        {
        }
        /**
         * Return unicode char by its code point.
         *
         * @param char $u code point
         *      
         * @return string the result character.
         * @author Djihed Afifi <djihed@gmail.com>
         */
        public function unichr($u)
        {
        }
        /**
         * Takes a string, it applies the various filters in this class
         * to return a unicode normalised string suitable for activities
         * such as searching, indexing, etc.
         *
         * @param string $text the text to be normalised.
         *      
         * @return string the result normalised string.
         * @author Djihed Afifi <djihed@gmail.com>
         */
        public function normalise($text)
        {
        }
        /**
         * Takes Arabic text in its joined form, it untangles the characters
         * and  unshapes them.
         *
         * This can be used to process text that was processed through OCR
         * or by extracting text from a PDF document.
         *
         * Note that the result text may need further processing. In most
         * cases, you will want to use the utf8Strrev function from
         * this class to reverse the string.
         *  
         * Most of the work of setting up the characters for this function
         * is done through the ArUnicode.constants.php constants and 
         * the constructor loading.
         *
         * @param string $text the text to be unshaped.
         *      
         * @return string the result normalised string.
         * @author Djihed Afifi <djihed@gmail.com>
         */
        public function unshape($text)
        {
        }
        /**
         * Take a UTF8 string and reverse it.
         *
         * @param string  $str             the string to be reversed.
         * @param boolean $reverse_numbers whether to reverse numbers.
         *      
         * @return string The reversed string.
         */
        public function utf8Strrev($str, $reverse_numbers = \false)
        {
        }
        /**
         * Checks for Arabic Tashkeel marks (i.e. FATHA, DAMMA, KASRA, SUKUN, 
         * SHADDA, FATHATAN, DAMMATAN, KASRATAN).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Tashkeel mark
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isTashkeel($archar)
        {
        }
        /**
         * Checks for Arabic Harakat marks (i.e. FATHA, DAMMA, KASRA, SUKUN, TANWIN).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Harakat mark
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isHaraka($archar)
        {
        }
        /**
         * Checks for Arabic short Harakat marks (i.e. FATHA, DAMMA, KASRA, SUKUN).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic short Harakat mark
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isShortharaka($archar)
        {
        }
        /**
         * Checks for Arabic Tanwin marks (i.e. FATHATAN, DAMMATAN, KASRATAN).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Tanwin mark
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isTanwin($archar)
        {
        }
        /**
         * Checks for Arabic Ligatures like LamAlef (i.e. LAM ALEF, LAM ALEF HAMZA 
         * ABOVE, LAM ALEF HAMZA BELOW, LAM ALEF MADDA ABOVE).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Ligatures like LamAlef
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isLigature($archar)
        {
        }
        /**
         * Checks for Arabic Hamza forms (i.e. HAMZA, WAW HAMZA, YEH HAMZA, HAMZA ABOVE, 
         * HAMZA BELOW, ALEF HAMZA BELOW, ALEF HAMZA ABOVE).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Hamza form
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isHamza($archar)
        {
        }
        /**
         * Checks for Arabic Alef forms (i.e. ALEF, ALEF MADDA, ALEF HAMZA ABOVE, 
         * ALEF HAMZA BELOW,ALEF WASLA, ALEF MAKSURA).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Alef form
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isAlef($archar)
        {
        }
        /**
         * Checks for Arabic Weak letters (i.e. ALEF, WAW, YEH, ALEF_MAKSURA).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Weak letter
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isWeak($archar)
        {
        }
        /**
         * Checks for Arabic Yeh forms (i.e. YEH, YEH HAMZA, SMALL YEH, ALEF MAKSURA).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Yeh form
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isYehlike($archar)
        {
        }
        /**
         * Checks for Arabic Waw like forms (i.e. WAW, WAW HAMZA, SMALL WAW).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Waw like form
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isWawlike($archar)
        {
        }
        /**
         * Checks for Arabic Teh forms (i.e. TEH, TEH MARBUTA).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Teh form
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isTehlike($archar)
        {
        }
        /**
         * Checks for Arabic Small letters (i.e. SMALL ALEF, SMALL WAW, SMALL YEH).
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Small letter
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isSmall($archar)
        {
        }
        /**
         * Checks for Arabic Moon letters.
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Moon letter
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isMoon($archar)
        {
        }
        /**
         * Checks for Arabic Sun letters.
         *
         * @param string $archar Arabic unicode char
         *      
         * @return boolean True if it is Arabic Sun letter
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function isSun($archar)
        {
        }
        /**
         * Return Arabic letter name in arabic.
         *
         * @param string $archar Arabic unicode char
         *      
         * @return string Arabic letter name in arabic
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function charName($archar)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *
     * http://www.ar-php.org
     *
     * PHP Version 5
     *
     * ----------------------------------------------------------------------
     *
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *
     * ----------------------------------------------------------------------
     *
     * Class Name: Arabic Soundex
     *
     * Filename:   Soundex.php
     *
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *
     * Purpose:    Arabic soundex algorithm takes Arabic word as an input
     *             and produces a character string which identifies a set words
     *             that are (roughly) phonetically alike.
     *              
     * ----------------------------------------------------------------------
     *  
     * Arabic Soundex
     *
     * PHP class for Arabic soundex algorithm takes Arabic word as an input and
     * produces a character string which identifies a set words of those are
     * (roughly) phonetically alike.
     * 
     * Terms that are often misspelled can be a problem for database designers. Names, 
     * for example, are variable length, can have strange spellings, and they are not 
     * unique. Words can be misspelled or have multiple spellings, especially across 
     * different cultures or national sources.
     * 
     * To solve this problem, we need phonetic algorithms which can find similar 
     * sounding terms and names. Just such a family of algorithms exists and is called 
     * SoundExes, after the first patented version.
     * 
     * A Soundex search algorithm takes a word, such as a person's name, as input and 
     * produces a character string which identifies a set of words that are (roughly) 
     * phonetically alike. It is very handy for searching large databases when the user 
     * has incomplete data.
     * 
     * The original Soundex algorithm was patented by Margaret O'Dell and Robert 
     * C. Russell in 1918. The method is based on the six phonetic classifications of 
     * human speech sounds (bilabial, labiodental, dental, alveolar, velar, and 
     * glottal), which in turn are based on where you put your lips and tongue to make 
     * the sounds.
     * 
     * Soundex function that is available in PHP, but it has been limited to English and 
     * other Latin-based languages. This function described in PHP manual as the 
     * following: Soundex keys have the property that words pronounced similarly produce 
     * the same soundex key, and can thus be used to simplify searches in databases 
     * where you know the pronunciation but not the spelling. This soundex function 
     * returns string of 4 characters long, starting with a letter.
     * 
     * We develop this class as an Arabic counterpart to English Soundex, it handle an 
     * Arabic input string formatted in UTF-8 character set to return Soundex key 
     * equivalent to normal soundex function in PHP even for English and other 
     * Latin-based languages because the original algorithm focus on phonetically 
     * characters alike not the meaning of the word itself.
     * 
     * Example:
     * <code>
     *   include('./I18N/Arabic.php');
     *   $obj = new I18N_Arabic('Soundex');
     *     
     *   $soundex = $obj->soundex($name);
     * </code>   
     *    
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class implement Arabic soundex algorithm
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Soundex
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Set the length of soundex key (default value is 4)
         *      
         * @param integer $integer Soundex key length
         *      
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setLen($integer)
        {
        }
        /**
         * Set the language of the soundex key (default value is "en")
         *      
         * @param string $str Soundex key language [ar|en]
         *      
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setLang($str)
        {
        }
        /**
         * Set the mapping code of the soundex key (default value is "soundex")
         *      
         * @param string $str Soundex key mapping code [soundex|phonix]
         *      
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setCode($str)
        {
        }
        /**
         * Get the soundex key length used now
         *      
         * @return integer return current setting for soundex key length
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getLen()
        {
        }
        /**
         * Get the soundex key language used now
         *      
         * @return string return current setting for soundex key language
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getLang()
        {
        }
        /**
         * Get the soundex key calculation method used now
         *      
         * @return string return current setting for soundex key calculation method
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getCode()
        {
        }
        /**
         * Methode to get soundex/phonix numric code for given word
         *      
         * @param string $word The word that we want to encode it
         *      
         * @return string The calculated soundex/phonix numeric code
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function mapCode($word)
        {
        }
        /**
         * Remove any characters replicates
         *      
         * @param string $word Arabic word you want to check if it is feminine
         *      
         * @return string Same word without any duplicate chracters
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function trimRep($word)
        {
        }
        /**
         * Arabic soundex algorithm takes Arabic word as an input and produces a 
         * character string which identifies a set words that are (roughly) 
         * phonetically alike.
         *      
         * @param string $word Arabic word you want to calculate its soundex
         *                    
         * @return string Soundex value for a given Arabic word
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function soundex($word)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Arabic Date
     *  
     * Filename:   Date.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    Arabic customization for PHP date function
     *  
     * ----------------------------------------------------------------------
     *  
     * Arabic Date
     *
     * PHP class for Arabic and Islamic customization of PHP date function. It
     * can convert UNIX timestamp into string in Arabic as well as convert it into
     * Hijri calendar
     * 
     * The Islamic Calendar:
     * 
     * The Islamic calendar is purely lunar and consists of twelve alternating months 
     * of 30 and 29 days, with the final 29 day month extended to 30 days during leap 
     * years. Leap years follow a 30 year cycle and occur in years 1, 5, 7, 10, 13, 16, 
     * 18, 21, 24, 26, and 29. The calendar begins on Friday, July 16th, 622 C.E. in 
     * the Julian calendar, Julian day 1948439.5, the day of Muhammad's separate from 
     * Mecca to Medina, the first day of the first month of year 1 A.H.--"Anno Hegira".
     * 
     * Each cycle of 30 years thus contains 19 normal years of 354 days and 11 leap 
     * years of 355, so the average length of a year is therefore 
     * ((19 x 354) + (11 x 355)) / 30 = 354.365... days, with a mean length of month of 
     * 1/12 this figure, or 29.53055... days, which closely approximates the mean 
     * synodic month (time from new Moon to next new Moon) of 29.530588 days, with the 
     * calendar only slipping one day with respect to the Moon every 2525 years. Since 
     * the calendar is fixed to the Moon, not the solar year, the months shift with 
     * respect to the seasons, with each month beginning about 11 days earlier in each 
     * successive solar year.
     * 
     * The convert presented here is the most commonly used civil calendar in the 
     * Islamic world; for religious purposes months are defined to start with the 
     * first observation of the crescent of the new Moon.
     * 
     * The Julian Calendar:
     * 
     * The Julian calendar was proclaimed by Julius Casar in 46 B.C. and underwent 
     * several modifications before reaching its final form in 8 C.E. The Julian 
     * calendar differs from the Gregorian only in the determination of leap years, 
     * lacking the correction for years divisible by 100 and 400 in the Gregorian 
     * calendar. In the Julian calendar, any positive year is a leap year if divisible 
     * by 4. (Negative years are leap years if when divided by 4 a remainder of 3 
     * results.) Days are considered to begin at midnight.
     * 
     * In the Julian calendar the average year has a length of 365.25 days. compared to 
     * the actual solar tropical year of 365.24219878 days. The calendar thus 
     * accumulates one day of error with respect to the solar year every 128 years. 
     * Being a purely solar calendar, no attempt is made to synchronise the start of 
     * months to the phases of the Moon.
     * 
     * The Gregorian Calendar:
     * 
     * The Gregorian calendar was proclaimed by Pope Gregory XIII and took effect in 
     * most Catholic states in 1582, in which October 4, 1582 of the Julian calendar 
     * was followed by October 15 in the new calendar, correcting for the accumulated 
     * discrepancy between the Julian calendar and the equinox as of that date. When 
     * comparing historical dates, it's important to note that the Gregorian calendar, 
     * used universally today in Western countries and in international commerce, was 
     * adopted at different times by different countries. Britain and her colonies 
     * (including what is now the United States), did not switch to the Gregorian 
     * calendar until 1752, when Wednesday 2nd September in the Julian calendar dawned 
     * as Thursday the 14th in the Gregorian.
     * 
     * The Gregorian calendar is a minor correction to the Julian. In the Julian 
     * calendar every fourth year is a leap year in which February has 29, not 28 days, 
     * but in the Gregorian, years divisible by 100 are not leap years unless they are 
     * also divisible by 400. How prescient was Pope Gregory! Whatever the problems of 
     * Y2K, they won't include sloppy programming which assumes every year divisible by 
     * 4 is a leap year since 2000, unlike the previous and subsequent years divisible 
     * by 100, is a leap year. As in the Julian calendar, days are considered to begin 
     * at midnight.
     * 
     * The average length of a year in the Gregorian calendar is 365.2425 days compared 
     * to the actual solar tropical year (time from equinox to equinox) of 365.24219878 
     * days, so the calendar accumulates one day of error with respect to the solar year 
     * about every 3300 years. As a purely solar calendar, no attempt is made to 
     * synchronise the start of months to the phases of the Moon.
     * 
     * date -- Format a local time/date
     * string date ( string format, int timestamp);
     * 
     * Returns a string formatted according to the given format string using the given 
     * integer timestamp or the current local time if no timestamp is given. In 
     * otherwords, timestamp is optional and defaults to the value of time().
     * 
     * Example:
     * <code>
     *   date_default_timezone_set('UTC');
     *   $time = time();
     *   
     *   echo date('l dS F Y h:i:s A', $time);
     *   echo '<br /><br />';
     *   
     *   include('./I18N/Arabic.php');
     *   $obj = new I18N_Arabic('Date');
     *   
     *   echo $obj->date('l dS F Y h:i:s A', $time);
     *   echo '<br /><br />';
     *   
     *   $obj->setMode(2);
     *   echo $obj->date('l dS F Y h:i:s A', $time);
     *   echo '<br /><br />';
     *   
     *   $obj->setMode(3);
     *   echo $obj->date('l dS F Y h:i:s A', $time);
     *   echo '<br /><br />';
     *   
     *   $obj->setMode(4);
     *   echo $obj->date('l dS F Y h:i:s A', $time);    
     * </code>
     *                 
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class is an Arabic customization for PHP date function
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Date
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Setting value for $mode scalar
         *      
         * @param integer $mode Output mode of date function where:
         *                       1) Hijri format (Islamic calendar)
         *                       2) Arabic month names used in Middle East countries
         *                       3) Arabic Transliteration of Gregorian month names
         *                       4) Both of 2 and 3 formats together
         *                       5) Libya style
         *                       6) Algeria and Tunis style
         *                       7) Morocco style          
         *                       8) Hijri format (Islamic calendar) in English
         *                                   
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setMode($mode = 1)
        {
        }
        /**
         * Getting $mode value that refer to output mode format
         *               1) Hijri format (Islamic calendar)
         *               2) Arabic month names used in Middle East countries
         *               3) Arabic Transliteration of Gregorian month names
         *               4) Both of 2 and 3 formats together
         *               5) Libyan way
         *               6) Algeria and Tunis style
         *               7) Morocco style          
         *               8) Hijri format (Islamic calendar) in English
         *                           
         * @return Integer Value of $mode properity
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getMode()
        {
        }
        /**
         * Format a local time/date in Arabic string
         *      
         * @param string  $format     Format string (same as PHP date function)
         * @param integer $timestamp  Unix timestamp
         * @param integer $correction To apply correction factor (+/- 1-2) to
         *                            standard hijri calendar
         *                    
         * @return string Format Arabic date string according to given format string
         *                using the given integer timestamp or the current local
         *                time if no timestamp is given.
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function date($format, $timestamp, $correction = 0)
        {
        }
        /**
         * Translate English date/time terms into Arabic langauge
         *      
         * @param string $str Date/time string using English terms
         *      
         * @return string Date/time string using Arabic terms
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function en2ar($str)
        {
        }
        /**
         * Add Arabic month names to the replacement array
         *      
         * @param integer $mode Naming mode of months in Arabic where:
         *                       2) Arabic month names used in Middle East countries
         *                       3) Arabic Transliteration of Gregorian month names
         *                       4) Both of 2 and 3 formats together
         *                       5) Libya style
         *                       6) Algeria and Tunis style
         *                       7) Morocco style          
         *                                   
         * @return array Arabic month names in selected style
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function arabicMonths($mode)
        {
        }
        /**
         * Convert given Gregorian date into Hijri date
         *      
         * @param integer $Y Year Gregorian year
         * @param integer $M Month Gregorian month
         * @param integer $D Day Gregorian day
         *      
         * @return array Hijri date [int Year, int Month, int Day](Islamic calendar)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function hjConvert($Y, $M, $D)
        {
        }
        /**
         * Convert given Julian day into Hijri date
         *      
         * @param integer $jd Julian day
         *      
         * @return array Hijri date [int Year, int Month, int Day](Islamic calendar)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function jdToIslamic($jd)
        {
        }
        /**
         * Convert given Hijri date into Julian day
         *      
         * @param integer $year  Year Hijri year
         * @param integer $month Month Hijri month
         * @param integer $day   Day Hijri day
         *      
         * @return integer Julian day
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function islamicToJd($year, $month, $day)
        {
        }
        /**
         * Converts a Gregorian date to Julian Day Count
         *      
         * @param integer $m The month as a number from 1 (for January) 
         *                   to 12 (for December) 
         * @param integer $d The day as a number from 1 to 31
         * @param integer $y The year as a number between -4714 and 9999
         *       
         * @return integer The julian day for the given gregorian date as an integer
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function gregToJd($m, $d, $y)
        {
        }
        /**
         * Calculate Hijri calendar correction using Um-Al-Qura calendar information
         *      
         * @param integer $time Unix timestamp
         *       
         * @return integer Correction factor to fix Hijri calendar calculation using
         *                 Um-Al-Qura calendar information     
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function dateCorrection($time)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     * 
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Arabic Keyboard Swapping Language
     *  
     * Filename:   KeySwap.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    Convert keyboard language programmatically (English - Arabic)
     *  
     * ----------------------------------------------------------------------
     *  
     * Arabic Keyboard Swapping Language
     *
     * PHP class to convert keyboard language between English and Arabic
     * programmatically. This function can be helpful in dual language forms when
     * users miss change keyboard language while they are entering data.
     * 
     * If you wrote an Arabic sentence while your keyboard stays in English mode by 
     * mistake, you will get a non-sense English text on your PC screen. In that case 
     * you can use this class to make a kind of magic conversion to swap that odd text 
     * by original Arabic sentence you meant when you type on your keyboard.
     * 
     * Please note that magic conversion in the opposite direction (if you type English 
     * sentences while your keyboard stays in Arabic mode) is also available in this 
     * class, but it is not reliable as much as previous case because in Arabic keyboard 
     * we have some keys provide a short-cut to type two chars in one click (those keys 
     * include: b, B, G and T).
     * 
     * Well, we try in this class to come over this issue by suppose that user used 
     * optimum way by using short-cut keys when available instead of assemble chars  
     * using stand alone keys, but if (s)he does not then you may have some typo chars 
     * in converted text.
     * 
     * Example:
     * <code>
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('KeySwap');
     * 
     *     $str = "Hpf lk hgkhs hglj'vtdkK Hpf hg`dk dldg,k f;gdjil Ygn ,p]hkdm ...";
     * 
     *     echo "<p><u><i>Before:</i></u><br />$str<br /><br />";
     *     
     *     $text = $obj->swapEa($str);
     *        
     *     echo "<u><i>After:</i></u><br />$text<br /><br />";    
     * </code>                  
     *
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class convert keyboard language programmatically (English - Arabic)
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_KeySwap
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Make conversion to swap that odd Arabic text by original English sentence 
         * you meant when you type on your keyboard (if keyboard language was  
         * incorrect)
         *          
         * @param string $text Odd Arabic string
         *                    
         * @return string Normal English string
         * @author Khaled Al-Sham'aa
         */
        public function swapAe($text)
        {
        }
        /**
         * Make conversion to swap that odd English text by original Arabic sentence 
         * you meant when you type on your keyboard (if keyboard language was  
         * incorrect)
         *           
         * @param string $text Odd English string
         *                    
         * @return string Normal Arabic string
         * @author Khaled Al-Sham'aa
         */
        public function swapEa($text)
        {
        }
        /**
         * Make conversion to swap that odd Arabic text by original French sentence 
         * you meant when you type on your keyboard (if keyboard language was  
         * incorrect)
         *          
         * @param string $text Odd Arabic string
         *                    
         * @return string Normal French string
         * @author Khaled Al-Sham'aa
         */
        public function swapAf($text)
        {
        }
        /**
         * Make conversion to swap that odd French text by original Arabic sentence 
         * you meant when you type on your keyboard (if keyboard language was  
         * incorrect)
         *           
         * @param string $text Odd French string
         *                    
         * @return string Normal Arabic string
         * @author Khaled Al-Sham'aa
         */
        public function swapFa($text)
        {
        }
        /**
         * Calculate the log odd probability that inserted string from keyboard
         * is in English language
         *           
         * @param string $str Inserted string from the keyboard
         *                    
         * @return float Calculated score for input string as English language
         * @author Khaled Al-Sham'aa
         */
        protected function checkEn($str)
        {
        }
        /**
         * Calculate the log odd probability that inserted string from keyboard
         * is in Arabic language
         *           
         * @param string $str Inserted string from the keyboard
         *                    
         * @return float Calculated score for input string as Arabic language
         * @author Khaled Al-Sham'aa
         */
        protected function checkAr($str)
        {
        }
        /**
         * This method will automatically detect the language of content supplied 
         * in the input string. It will return the suggestion of correct inserted text. 
         * The accuracy of the automatic language detection increases with the amount 
         * of text entered.
         *           
         * @param string $str Inserted string from the keyboard
         *                    
         * @return string Fixed string language and letter case to the better guess
         * @author Khaled Al-Sham'aa
         */
        public function fixKeyboardLang($str)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Identify Arabic Text Segments
     *  
     * Filename:   Identifier.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    This class will identify Arabic text in a given UTF-8 multi
     *             language document, it will return array of start and end
     *             positions for Arabic text segments.
     *              
     * ----------------------------------------------------------------------
     *  
     * Identify Arabic Text Segments
     *
     * Using this PHP Class you can fully automated approach to processing
     * Arabic text by quickly and accurately determining Arabic text segments within
     * multiple languages documents.
     * 
     * Understanding the language and encoding of a given document is an essential step 
     * in working with unstructured multilingual text. Without this basic knowledge, 
     * applications such as information retrieval and text mining cannot accurately 
     * process data and important information may be completely missed or mis-routed.
     * 
     * Any application that works with Arabic in multiple languages documents can 
     * benefit from the ArIdentifier class. Using this class, applications can take a 
     * fully automated approach to processing Arabic text by quickly and accurately 
     * determining Arabic text segments within multiple languages document.      
     *
     * Example:
     * <code>
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('Identifier');
     *     
     *     $hStr=$obj->highlightText($str, '#80B020');
     * 
     *     echo $str . '<hr />' . $hStr . '<hr />';
     *     
     *     $taggedText = $obj->tagText($str);
     * 
     *     foreach($taggedText as $wordTag) {
     *         list($word, $tag) = $wordTag;
     *     
     *         if ($tag == 1) {
     *             echo "$word is Noun, ";
     *         }
     *     
     *         if ($tag == 0) {
     *             echo "$word is not Noun, ";
     *         }
     *     }    
     * </code>
     *             
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class identify Arabic text segments
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Identifier
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Identify Arabic text in a given UTF-8 multi language string
         *          
         * @param string $str UTF-8 multi language string
         *      
         * @return array Offset of the beginning and end of each Arabic segment in
         *               sequence in the given UTF-8 multi language string
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function identify($str)
        {
        }
        /**
         * Find out if given string is Arabic text or not
         *          
         * @param string $str String
         *                    
         * @return boolean True if given string is UTF-8 Arabic, else will return False
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function isArabic($str)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Arabic Gender Guesser
     *  
     * Filename:   Gender.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    This class attempts to guess the gender of Arabic names
     *  
     * ----------------------------------------------------------------------
     *
     * Arabic Gender Guesser
     *
     * This PHP class attempts to guess the gender of Arabic names.
     * 
     * Arabic nouns are either masculine or feminine. Usually when referring to a male, 
     * a masculine noun is usually used and when referring to a female, a feminine noun 
     * is used. In most cases the feminine noun is formed by adding a special characters 
     * to the end of the masculine noun. Its not just nouns referring to people that 
     * have gender. Inanimate objects (doors, houses, cars, etc.) is either masculine or 
     * feminine. Whether an inanimate noun is masculine or feminine is mostly 
     * arbitrary.      
     * 
     * Example:
     * <code>
     *   include('./I18N/Arabic.php');
     *   $obj = new I18N_Arabic('Gender');
     *      
     *   echo "$name ";
     * 
     *   if ($obj->isFemale($name) == true) { 
     *      echo '(Female)';
     *   }else{
     *      echo '(Male)';
     *   }    
     * </code>
     *             
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org
     */
    /**
     * This PHP class attempts to guess the gender of Arabic names
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Gender
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Check if Arabic word is feminine
         *          
         * @param string $str Arabic word you would like to check if it is 
         *                    feminine
         *                    
         * @return boolean Return true if input Arabic word is feminine
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function isFemale($str)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Arabic StrToTime Class
     *  
     * Filename: StrToTime.php
     *  
     * Original  Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:  Parse about any Arabic textual datetime description into 
     *           a Unix timestamp
     *  
     * ----------------------------------------------------------------------
     *  
     * Arabic StrToTime Class
     *
     * PHP class to parse about any Arabic textual datetime description into 
     * a Unix timestamp.
     * 
     * The function expects to be given a string containing an Arabic date format 
     * and will try to parse that format into a Unix timestamp (the number of seconds 
     * since January 1 1970 00:00:00 GMT), relative to the timestamp given in now, or 
     * the current time if none is supplied.
     *          
     * Example:
     * <code>
     *     date_default_timezone_set('UTC');
     *     $time = time();
     * 
     *     echo date('l dS F Y', $time);
     *     echo '<br /><br />';
     * 
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('StrToTime');
     * 
     *     $int  = $obj->strtotime($str, $time);
     *     $date = date('l dS F Y', $int);
     *     echo "<b><font color=#FFFF00>Arabic String:</font></b> $str<br />";
     *     echo "<b><font color=#FFFF00>Unix Timestamp:</font></b> $int<br />";
     *     echo "<b><font color=#FFFF00>Formated Date:</font></b> $date<br />";    
     * </code>
     *          
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class parse about any Arabic textual datetime description into a 
     * Unix timestamp
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_StrToTime
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * This method will parse about any Arabic textual datetime description into 
         * a Unix timestamp
         *          
         * @param string  $text The string to parse, according to the GNU » 
         *                      Date Input Formats syntax (in Arabic).
         * @param integer $now  The timestamp used to calculate the 
         *                      returned value.       
         *                    
         * @return Integer Returns a timestamp on success, FALSE otherwise
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function strtotime($text, $now)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Arabic Queary Class
     *  
     * Filename: Query.php
     *  
     * Original  Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:  Build WHERE condition for SQL statement using MySQL REGEXP and
     *           Arabic lexical  rules
     *            
     * ----------------------------------------------------------------------
     *  
     * Arabic Queary Class
     *
     * PHP class build WHERE condition for SQL statement using MySQL REGEXP and 
     * Arabic lexical  rules.
     *    
     * With the exception of the Qur'an and pedagogical texts, Arabic is generally 
     * written without vowels or other graphic symbols that indicate how a word is 
     * pronounced. The reader is expected to fill these in from context. Some of the 
     * graphic symbols include sukuun, which is placed over a consonant to indicate that 
     * it is not followed by a vowel; shadda, written over a consonant to indicate it is 
     * doubled; and hamza, the sign of the glottal stop, which can be written above or 
     * below (alif) at the beginning of a word, or on (alif), (waaw), (yaa'), 
     * or by itself on the line elsewhere. Also, common spelling differences regularly 
     * appear, including the use of (haa') for (taa' marbuuta) and (alif maqsuura) 
     * for (yaa'). These features of written Arabic, which are also seen in Hebrew as 
     * well as other languages written with Arabic script (such as Farsi, Pashto, and 
     * Urdu), make analyzing and searching texts quite challenging. In addition, Arabic 
     * morphology and grammar are quite rich and present some unique issues for 
     * information retrieval applications.
     * 
     * There are essentially three ways to search an Arabic text with Arabic queries: 
     * literal, stem-based or root-based.
     * 
     * A literal search, the simplest search and retrieval method, matches documents 
     * based on the search terms exactly as the user entered them. The advantage of this 
     * technique is that the documents returned will without a doubt contain the exact 
     * term for which the user is looking. But this advantage is also the biggest 
     * disadvantage: many, if not most, of the documents containing the terms in 
     * different forms will be missed. Given the many ambiguities of written Arabic, the 
     * success rate of this method is quite low. For example, if the user searches 
     * for (kitaab, book), he or she will not find documents that only 
     * contain (`al-kitaabu, the book).
     * 
     * Stem-based searching, a more complicated method, requires some normalization of 
     * the original texts and the queries. This is done by removing the vowel signs, 
     * unifying the hamza forms and removing or standardizing the other signs. 
     * Additionally, grammatical affixes and other constructions which attach directly 
     * to words, such as conjunctions, prepositions, and the definite article, should be 
     * identified and removed. Finally, regular and irregular plural forms need to be 
     * identified and reduced to their singular forms. Performing this type of stemming 
     * leads to more successful searches, but can be problematic due to over-generation 
     * or incorrect generation of stems.
     * 
     * A third method for searching Arabic texts is to index and search for the root 
     * forms of each word. Since most verbs and nouns in Arabic are derived from 
     * triliteral (or, rarely, quadriliteral) roots, identifying the underlying root of 
     * each word theoretically retrieves most of the documents containing a given search 
     * term regardless of form. However, there are some significant challenges with this 
     * approach. Determining the root for a given word is extremely difficult, since it 
     * requires a detailed morphological, syntactic and semantic analysis of the text to 
     * fully disambiguate the root forms. The issue is complicated further by the fact 
     * that not all words are derived from roots. For example, loan words (words 
     * borrowed from another language) are not based on root forms, although there are 
     * even exceptions to this rule. For example, some loans that have a structure 
     * similar to triliteral roots, such as the English word film, are handled 
     * grammatically as if they were root-based, adding to the complexity of this type 
     * of search. Finally, the root can serve as the foundation for a wide variety of 
     * words with related meanings. The root (k-t-b) is used for many words related 
     * to writing, including (kataba, to write), (kitaab, book), (maktab, 
     * office), and (kaatib, author). But the same root is also used for regiment/
     * battalion, (katiiba). As a result, searching based on root forms results in 
     * very high recall, but precision is usually quite low.
     * 
     * While search and retrieval of Arabic text will never be an easy task, relying on 
     * linguistic analysis tools and methods can help make the process more successful. 
     * Ultimately, the search method you choose should depend on how critical it is to 
     * retrieve every conceivable instance of a word or phrase and the resources you 
     * have to process search returns in order to determine their true relevance.
     * 
     * Source: Volume 13 Issue 7 of MultiLingual Computing & 
     * Technology published by MultiLingual Computing, Inc., 319 North First Ave., 
     * Sandpoint, Idaho, USA, 208-263-8178, Fax: 208-263-6310.
     * 
     * Example:
     * <code>
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('Query');
     *     
     *     $dbuser = 'root';
     *     $dbpwd = '';
     *     $dbname = 'test';
     *     
     *     try {
     *         $dbh = new PDO('mysql:host=localhost;dbname='.$dbname, $dbuser, $dbpwd);
     * 
     *         // Set the error reporting attribute
     *         $dbh->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
     * 
     *         $dbh->exec("SET NAMES 'utf8'");
     *     
     *         if ($_GET['keyword'] != '') {
     *             $keyword = @$_GET['keyword'];
     *             $keyword = str_replace('\"', '"', $keyword);
     *     
     *             $obj->setStrFields('headline');
     *             $obj->setMode($_GET['mode']);
     *     
     *             $strCondition = $Arabic->getWhereCondition($keyword);
     *         } else {
     *             $strCondition = '1';
     *         }
     *     
     *         $StrSQL = "SELECT `headline` FROM `aljazeera` WHERE $strCondition";
     * 
     *         $i = 0;
     *         foreach ($dbh->query($StrSQL) as $row) {
     *             $headline = $row['headline'];
     *             $i++;
     *             if ($i % 2 == 0) {
     *                 $bg = "#f0f0f0";
     *             } else {
     *                 $bg = "#ffffff";
     *             }
     *             echo "<tr bgcolor=\"$bg\"><td>$headline</td></tr>";
     *         }
     * 
     *         // Close the databse connection
     *         $dbh = null;
     * 
     *     } catch (PDOException $e) {
     *         echo $e->getMessage();
     *     }
     * </code>            
     * 
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class build WHERE condition for SQL statement using MySQL REGEXP and
     * Arabic lexical  rules
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Query
    {
        /**
         * Loads initialize values
         */
        public function __construct()
        {
        }
        /**
         * Setting value for $_fields array
         *      
         * @param array $arrConfig Name of the fields that SQL statement will search
         *                         them (in array format where items are those 
         *                         fields names)
         *                       
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setArrFields($arrConfig)
        {
        }
        /**
         * Setting value for $_fields array
         *      
         * @param string $strConfig Name of the fields that SQL statement will search
         *                          them (in string format using comma as delimated)
         *                          
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setStrFields($strConfig)
        {
        }
        /**
         * Setting $mode propority value that refer to search mode
         * [0 for OR logic | 1 for AND logic]
         *      
         * @param integer $mode Setting value to be saved in the $mode propority
         *      
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setMode($mode)
        {
        }
        /**
         * Getting $mode propority value that refer to search mode 
         * [0 for OR logic | 1 for AND logic]
         *      
         * @return integer Value of $mode properity
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getMode()
        {
        }
        /**
         * Getting values of $_fields Array in array format
         *      
         * @return array Value of $_fields array in Array format
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getArrFields()
        {
        }
        /**
         * Getting values of $_fields array in String format (comma delimated)
         *      
         * @return string Values of $_fields array in String format (comma delimated)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getStrFields()
        {
        }
        /**
         * Build WHERE section of the SQL statement using defind lex's rules, search 
         * mode [AND | OR], and handle also phrases (inclosed by "") using normal 
         * LIKE condition to match it as it is.
         *      
         * @param string $arg String that user search for in the database table
         *                    
         * @return string The WHERE section in SQL statement 
         *                (MySQL database engine format)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getWhereCondition($arg)
        {
        }
        /**
         * Search condition in SQL format for one word in all defind fields using 
         * REGEXP clause and lex's rules
         *      
         * @param string $arg String (one word) that you want to build a condition for
         *      
         * @return string sub SQL condition (for internal use)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function getWordRegExp($arg)
        {
        }
        /**
         * Search condition in SQL format for one word in all defind fields using 
         * normal LIKE clause
         *      
         * @param string $arg String (one word) that you want to build a condition for
         *      
         * @return string sub SQL condition (for internal use)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function getWordLike($arg)
        {
        }
        /**
         * Get more relevant order by section related to the user search keywords
         *      
         * @param string $arg String that user search for in the database table
         *                    
         * @return string sub SQL ORDER BY section 
         * @author Saleh AlMatrafe <saleh@saleh.cc>
         */
        public function getOrderBy($arg)
        {
        }
        /**
         * This method will implement various regular expressin rules based on 
         * pre-defined Arabic lexical rules
         *      
         * @param string $arg String of one word user want to search for
         *      
         * @return string Regular Expression format to be used in MySQL query statement
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function lex($arg)
        {
        }
        /**
         * Get most possible Arabic lexical forms for a given word
         *      
         * @param string $word String that user search for
         *      
         * @return string list of most possible Arabic lexical forms for a given word 
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function allWordForms($word)
        {
        }
        /**
         * Get most possible Arabic lexical forms of user search keywords
         *      
         * @param string $arg String that user search for
         *                    
         * @return string list of most possible Arabic lexical forms for given keywords 
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function allForms($arg)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Arabic Text ArStemmer Class
     *  
     * Filename: Stemmer.php
     *  
     * Original  Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:  Get stem of an Arabic word
     *  
     * ----------------------------------------------------------------------
     *  
     * Source: http://arabtechies.net/node/83
     * By: Taha Zerrouki <taha.zerrouki@gmail.com>
     *  
     * ----------------------------------------------------------------------
     *  
     * Arabic Word Stemmer Class
     *
     * PHP class to get stem of an Arabic word
     *
     * A stemmer is an automatic process in which morphological variants of terms 
     * are mapped to a single representative string called a stem. Arabic belongs 
     * to the Semitic family of languages which also includes Hebrew and Aramaic. 
     * Since morphological change in Arabic results from the addition of prefixes 
     * and infixes as well as suffixes, simple removal of suffixes is not as 
     * effective for Arabic as it is for English.
     * 
     * Arabic has much richer morphology than English. Arabic has two genders, 
     * feminine and masculine; three numbers, singular, dual, and plural; and three 
     * grammatical cases, nominative, genitive, and accusative. A noun has the 
     * nominative case when it is a subject; accusative when it is the object of a 
     * verb; and genitive when it is the object of a preposition. The form of an 
     * Arabic noun is determined by its gender, number, and grammatical case. The 
     * definitive nouns are formed by attaching the Arabic article "AL" to the 
     * immediate front of the nouns. Besides prefixes, a noun can also carry a 
     * suffix which is often a possessive pronoun. In Arabic, the conjunction word
     * "WA" (and) is often attached to the following word.
     *  
     * Like nouns, an Arabic adjective can also have many variants. When an 
     * adjective modifies a noun in a noun phrase, the adjective agrees with the 
     * noun in gender, number, case, and definiteness. Arabic verbs have two tenses: 
     * perfect and imperfect. Perfect tense denotes actions completed, while 
     * imperfect denotes uncompleted actions. The imperfect tense has four mood: 
     * indicative, subjective, jussive, and imperative. Arabic verbs in perfect 
     * tense consist of a stem and a subject marker. The subject marker indicates 
     * the person, gender, and number of the subject. The form of a verb in perfect 
     * tense can have subject marker and pronoun suffix. The form of a 
     * subject-marker is determined together by the person, gender, and number of 
     * the subject.
     * Example:
     * <code>
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('Stemmer');
     * 
     *     echo $obj->stem($word);
     * </code>
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class get stem of an Arabic word
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Stemmer
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Get rough stem of the given Arabic word 
         *      
         * @param string $word Arabic word you would like to get its stem
         *                    
         * @return string Arabic stem of the word
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function stem($word)
        {
        }
        /**
         * Get rough stem of the given Arabic word (under specific rules)
         *      
         * @param string  $word      Arabic word you would like to get its stem
         * @param string  $notChars  Arabic chars those can't be in postfix or prefix
         * @param string  $preChars  Arabic chars those may exists in the prefix
         * @param string  $postChars Arabic chars those may exists in the postfix
         * @param integer $maxPre    Max prefix length
         * @param integer $maxPost   Max postfix length
         * @param integer $minStem   Min stem length
         *
         * @return string Arabic stem of the word under giving rules
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected static function roughStem($word, $notChars, $preChars, $postChars, $maxPre, $maxPost, $minStem)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: English-Arabic Transliteration
     *  
     * Filename:   Transliteration.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    Transliterate English words into Arabic by render them
     *             in the orthography of the Arabic language and vise versa  
     *              
     * ----------------------------------------------------------------------
     *
     * English-Arabic Transliteration
     *    
     * PHP class transliterate English words into Arabic by render them in the 
     * orthography of the Arabic language and vise versa.
     *    
     * Out of vocabulary (OOV) words are a common source of errors in cross language 
     * information retrieval. Bilingual dictionaries are often limited in their coverage 
     * of named- entities, numbers, technical terms and acronyms. There is a need to 
     * generate translations for these "on-the-fly" or at query time.
     * 
     * A significant proportion of OOV words are named entities and technical terms. 
     * Typical analyses find around 50% of OOV words to be named entities. Yet these 
     * can be the most important words in the queries. Cross language retrieval 
     * performance (average precision) reduced more than 50% when named entities in the 
     * queries were not translated.
     * 
     * When the query language and the document language share the same alphabet it may 
     * be sufficient to use the OOV word as its own translation. However, when the two 
     * languages have different alphabets, the query term must somehow be rendered in 
     * the orthography of the other language. The process of converting a word from one 
     * orthography into another is called transliteration.
     * 
     * Foreign words often occur in Arabic text as transliteration. This is the case for 
     * many categories of foreign words, not just proper names but also technical terms 
     * such as caviar, telephone and internet.
     * 
     * Example:
     * <code>
     *   include('./I18N/Arabic.php');
     *   $obj = new I18N_Arabic('Transliteration');
     *     
     *   $ar_word_1 = $obj->en2ar($en_word_1);
     *   $en_word_2 = $obj->ar2en($ar_word_2);
     * </code>
     *             
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class transliterate English words into Arabic
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Transliteration
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Transliterate English string into Arabic by render them in the 
         * orthography of the Arabic language
         *         
         * @param string $string English string you want to transliterate
         * @param string $locale Locale information (e.g. 'en_GB' or 'de_DE')
         *                    
         * @return String Out of vocabulary English string in Arabic characters
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function en2ar($string, $locale = 'en_US')
        {
        }
        /**
         * Transliterate Arabic string into English by render them in the 
         * orthography of the English language
         *           
         * @param string $string   Arabic string you want to transliterate
         * @param string $standard Transliteration standard, default is UNGEGN 
         *                         and possible values are [UNGEGN, UNGEGN+, RJGC, 
         *                         SES, ISO233]
         *                    
         * @return String Out of vocabulary Arabic string in English characters
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function ar2en($string, $standard = 'UNGEGN')
        {
        }
        /**
         * Render numbers in given string using HTML entities that will show them as 
         * Arabic digits (i.e. 1, 2, 3, etc.) whatever browser language settings are 
         * (if browser supports UTF-8 character set).
         *         
         * @param string $string String includes some digits here or there
         *                    
         * @return String Original string after replace digits by HTML entities that 
         *                will show given number using Indian digits
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function enNum($string)
        {
        }
        /**
         * Render numbers in given string using HTML entities that will show them as 
         * Indian digits (i.e. ١, ٢, ٣, etc.) whatever browser language settings are 
         * (if browser supports UTF-8 character set).
         *         
         * @param string $string String includes some digits here or there
         *                    
         * @return String Original string after replace digits by HTML entities that 
         *                will show given number using Arabic digits
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function arNum($string)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Arabic Maketime
     *  
     * Filename:   Mktime.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    Arabic customization for PHP mktime function
     *  
     * ----------------------------------------------------------------------
     *  
     * Arabic Maketime
     *
     * PHP class for Arabic and Islamic customization of PHP mktime function.
     * It can convert Hijri date into UNIX timestamp format
     *
     * Unix time() value:
     * 
     * Development of the Unix operating system began at Bell Laboratories in 1969 by 
     * Dennis Ritchie and Ken Thompson, with the first PDP-11 version becoming 
     * operational in February 1971. Unix wisely adopted the convention that all 
     * internal dates and times (for example, the time of creation and last modification 
     * of files) were kept in Universal Time, and converted to local time based on a 
     * per-user time zone specification. This far-sighted choice has made it vastly 
     * easier to integrate Unix systems into far-flung networks without a chaos of 
     * conflicting time settings.
     * 
     * The machines on which Unix was developed and initially deployed could not support 
     * arithmetic on integers longer than 32 bits without costly multiple-precision 
     * computation in software. The internal representation of time was therefore chosen 
     * to be the number of seconds elapsed since 00:00 Universal time on January 1, 1970 
     * in the Gregorian calendar (Julian day 2440587.5), with time stored as a 32 bit 
     * signed integer (long in the original C implementation).
     * 
     * The influence of Unix time representation has spread well beyond Unix since most 
     * C and C++ libraries on other systems provide Unix-compatible time and date 
     * functions. The major drawback of Unix time representation is that, if kept as a 
     * 32 bit signed quantity, on January 19, 2038 it will go negative, resulting in 
     * chaos in programs unprepared for this. Modern Unix and C implementations define 
     * the result of the time() function as type time_t, which leaves the door open for 
     * remediation (by changing the definition to a 64 bit integer, for example) before 
     * the clock ticks the dreaded doomsday second.
     * 
     * mktime -- Get Unix timestamp for a date
     * int mktime (int hour, int minute, int second, int month, int day, int year);
     * 
     * Warning: Note the strange order of arguments, which differs from the order of 
     * arguments in a regular Unix mktime() call and which does not lend itself well to 
     * leaving out parameters from right to left (see below). It is a common error to 
     * mix these values up in a script.
     * 
     * Returns the Unix timestamp corresponding to the arguments given. This timestamp 
     * is a long integer containing the number of seconds between the Unix Epoch 
     * (January 1 1970) and the time specified.
     * 
     * Example:
     * <code>
     * date_default_timezone_set('UTC');
     * 
     * include('./I18N/Arabic.php');
     * $obj = new I18N_Arabic('Mktime');
     * 
     * $time = $obj->mktime(0,0,0,9,1,1427);
     * 
     * echo "<p>Calculated first day of Ramadan 1427 unix timestamp is: $time</p>";
     * 
     * $Gregorian = date('l F j, Y',$time);
     * 
     * echo "<p>Which is $Gregorian in Gregorian calendar</p>";            
     * </code>
     *    
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class is an Arabic customization for PHP mktime function
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Mktime
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * This will return current Unix timestamp 
         * for given Hijri date (Islamic calendar)
         *          
         * @param integer $hour       Time hour
         * @param integer $minute     Time minute
         * @param integer $second     Time second
         * @param integer $hj_month   Hijri month (Islamic calendar)
         * @param integer $hj_day     Hijri day   (Islamic calendar)
         * @param integer $hj_year    Hijri year  (Islamic calendar)
         * @param integer $correction To apply correction factor (+/- 1-2) 
         *                            to standard Hijri calendar
         *             
         * @return integer Returns the current time measured in the number of
         *                seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function mktime($hour, $minute, $second, $hj_month, $hj_day, $hj_year, $correction = 0)
        {
        }
        /**
         * This will convert given Hijri date (Islamic calendar) into Gregorian date
         *          
         * @param integer $Y Hijri year (Islamic calendar)
         * @param integer $M Hijri month (Islamic calendar)
         * @param integer $D Hijri day (Islamic calendar)
         *      
         * @return array Gregorian date [int Year, int Month, int Day]
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function convertDate($Y, $M, $D)
        {
        }
        /**
         * This will convert given Hijri date (Islamic calendar) into Julian day
         *          
         * @param integer $year  Hijri year
         * @param integer $month Hijri month
         * @param integer $day   Hijri day
         *      
         * @return integer Julian day
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function islamicToJd($year, $month, $day)
        {
        }
        /**
         * Converts Julian Day Count to Gregorian date
         *      
         * @param integer $julian A julian day number as integer
         *       
         * @return integer The gregorian date as a string in the form "month/day/year"
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function jdToGreg($julian)
        {
        }
        /**
         * Calculate Hijri calendar correction using Um-Al-Qura calendar information
         *      
         * @param integer $m Hijri month (Islamic calendar)
         * @param integer $y Hijri year  (Islamic calendar), valid range [1420-1459]
         *       
         * @return integer Correction factor to fix Hijri calendar calculation using
         *                 Um-Al-Qura calendar information     
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function mktimeCorrection($m, $y)
        {
        }
        /**
         * Calculate how many days in a given Hijri month
         *      
         * @param integer $m         Hijri month (Islamic calendar)
         * @param integer $y         Hijri year  (Islamic calendar), valid 
         *                           range[1320-1459]
         * @param boolean $umAlqoura Should we implement Um-Al-Qura calendar correction
         *                           in this calculation (default value is true)
         *       
         * @return integer Days in a given Hijri month     
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function hijriMonthDays($m, $y, $umAlqoura = \true)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Compress string using Huffman-like coding
     *  
     * Filename:   CompressStr.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    This class will compress given string in binary format
     *             using variable-length code table (derived in a particular way 
     *             based on the estimated probability of occurrence for each 
     *             possible value of the source symbol) for encoding a source symbol
     *              
     * ----------------------------------------------------------------------
     *  
     * Arabic Compress String Class
     *
     * Compress string using Huffman-like coding
     *
     * This class compresses text strings into roughly 70% of their original size 
     * by benefit from using compact coding for most frequented letters in a given 
     * language. This algorithm associated with text language, so you will find 6 
     * different classes for the following languages: Arabic, English, French, 
     * German, Italian and Spanish language.
     * 
     * Benefits of this compress algorithm include:
     * 
     * - It is written in pure PHP code, so there is no need to any 
     *   PHP extensions to use it.
     * - You can search in compressed string directly without any need uncompress 
     *   text before search in.
     * - You can get original string length directly without need to uncompress 
     *   compressed text.
     * 
     * Note:
     * Unfortunately text compressed using this algorithm lose the structure that 
     * normal zip algorithm used, so benefits from using ZLib functions on this 
     * text will be reduced.
     * 
     * There is another drawback, this algorithm working only on text from a given 
     * language, it does not working fine on binary files like images or PDF.
     * 
     * Example:
     * <code>
     * include('./I18N/Arabic.php');
     * $obj = new I18N_Arabic('CompressStr');
     * 
     * $obj->setInputCharset('windows-1256');
     * $obj->setOutputCharset('windows-1256');
     * 
     * $file = 'Compress/ar_example.txt';
     * $fh   = fopen($file, 'r');
     * $str  = fread($fh, filesize($file));
     * fclose($fh);
     * 
     * $zip = $obj->compress($str);
     * 
     * $before = strlen($str);
     * $after  = strlen($zip);
     * $rate   = round($after * 100 / $before);
     * 
     * echo "String size before was: $before Byte<br>";
     * echo "Compressed string size after is: $after Byte<br>";
     * echo "Rate $rate %<hr>";
     * 
     * $str = $obj->decompress($zip);
     * 
     * if ($obj->search($zip, $word)) {
     *     echo "Search for $word in zipped string and find it<hr>";
     * } else {
     *     echo "Search for $word in zipped string and do not find it<hr>";
     * }
     * 
     * $len = $obj->length($zip);
     * echo "Original length of zipped string is $len Byte<hr>";
     * 
     * echo '<div dir="rtl" align="justify">'.nl2br($str).'</div>';   
     * </code>
     *                
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class compress Arabic string using Huffman-like coding
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_CompressStr
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Set required encode and binary hash of most probably character in 
         * selected language
         *      
         * @param string $lang [en, fr, gr, it, sp, ar] Language profile selected
         *      
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setLang($lang)
        {
        }
        /**
         * Compress the given string using the Huffman-like coding
         *      
         * @param string $str The text to compress
         *                    
         * @return binary The compressed string in binary format
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function compress($str)
        {
        }
        /**
         * Uncompress a compressed string
         *       
         * @param binary $bin The text compressed by compress(). 
         *                    
         * @return string The original uncompressed string
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function decompress($bin)
        {
        }
        /**
         * Search a compressed string for a given word
         *      
         * @param binary $bin  Compressed binary string
         * @param string $word The string you looking for
         *                    
         * @return boolean True if found and False if not found
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function search($bin, $word)
        {
        }
        /**
         * Retrieve the original string length
         *      
         * @param binary $bin Compressed binary string
         *      
         * @return integer Original string length
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function length($bin)
        {
        }
        /**
         * Convert textual string into binary string
         *      
         * @param string $str The textual string to convert
         *       
         * @return binary The binary representation of textual string
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected static function str2bits($str)
        {
        }
        /**
         * Convert binary string into textual string
         *      
         * @param binary $bits The binary string to convert
         *       
         * @return string The textual representation of binary string
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected static function bits2str($bits)
        {
        }
        /**
         * Convert binary string into hexadecimal string
         *      
         * @param binary $bits The binary string to convert
         *       
         * @return hexadecimal The hexadecimal representation of binary string  
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected static function bits2hex($bits)
        {
        }
        /**
         * Convert hexadecimal string into binary string
         *      
         * @param hexadecimal $hex The hexadezimal string to convert
         *       
         * @return binary The binary representation of hexadecimal string
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected static function hex2bits($hex)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Arabic Glyphs is a simple class to render Arabic text
     *  
     * Filename:   Glyphs.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    This class takes Arabic text (encoded in Windows-1256 character 
     *             set) as input and performs Arabic glyph joining on it and outputs 
     *             a UTF-8 hexadecimals stream that is no longer logically arranged 
     *             but in a visual order which gives readable results when formatted 
     *             with a simple Unicode rendering just like GD and UFPDF libraries 
     *             that does not handle basic connecting glyphs of Arabic language 
     *             yet but simply outputs all stand alone glyphs in left-to-right 
     *             order.
     *              
     * ----------------------------------------------------------------------
     *  
     * Arabic Glyphs is class to render Arabic text
     *
     * PHP class to render Arabic text by performs Arabic glyph joining on it,
     * then output a UTF-8 hexadecimals stream gives readable results on PHP
     * libraries supports UTF-8.
     *
     * Example:
     * <code>
     *   include('./I18N/Arabic.php');
     *   $obj = new I18N_Arabic('Glyphs');
     *
     *   $text = $obj->utf8Glyphs($text);
     *      
     *   imagettftext($im, 20, 0, 200, 100, $black, $font, $text);
     * </code>
     *
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class render Arabic text by performs Arabic glyph joining on it
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Glyphs
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Get glyphs
         * 
         * @param string  $char Char
         * @param integer $type Type
         * 
         * @return string
         */
        protected function getGlyphs($char, $type)
        {
        }
        /**
         * Convert Arabic Windows-1256 charset string into glyph joining in UTF-8 
         * hexadecimals stream
         *      
         * @param string $str Arabic string in Windows-1256 charset
         *      
         * @return string Arabic glyph joining in UTF-8 hexadecimals stream
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function preConvert($str)
        {
        }
        /**
         * Regression analysis calculate roughly the max number of character fit in 
         * one A4 page line for a given font size.
         *      
         * @param integer $font Font size
         *      
         * @return integer Maximum number of characters per line
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function a4MaxChars($font)
        {
        }
        /**
         * Calculate the lines number of given Arabic text and font size that will 
         * fit in A4 page size
         *      
         * @param string  $str  Arabic string you would like to split it into lines
         * @param integer $font Font size
         *                    
         * @return integer Number of lines for a given Arabic string in A4 page size
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function a4Lines($str, $font)
        {
        }
        /**
         * Convert Arabic Windows-1256 charset string into glyph joining in UTF-8 
         * hexadecimals stream (take care of whole the document including English 
         * sections as well as numbers and arcs etc...)
         *                    
         * @param string  $str       Arabic string in Windows-1256 charset
         * @param integer $max_chars Max number of chars you can fit in one line
         * @param boolean $hindo     If true use Hindo digits else use Arabic digits
         *                    
         * @return string Arabic glyph joining in UTF-8 hexadecimals stream (take
         *                care of whole document including English sections as well
         *                as numbers and arcs etc...)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function utf8Glyphs($str, $max_chars = 50, $hindo = \true)
        {
        }
        /**
         * Decode all HTML entities (including numerical ones) to regular UTF-8 bytes. 
         * Double-escaped entities will only be decoded once 
         * ("&amp;lt;" becomes "&lt;", not "<").
         *                   
         * @param string $text    The text to decode entities in.
         * @param array  $exclude An array of characters which should not be decoded.
         *                        For example, array('<', '&', '"'). This affects
         *                        both named and numerical entities.
         *                        
         * @return string           
         */
        protected function decodeEntities($text, $exclude = array())
        {
        }
        /**
         * Helper function for decodeEntities
         * 
         * @param string $prefix    Prefix      
         * @param string $codepoint Codepoint         
         * @param string $original  Original        
         * @param array  &$table    Store named entities in a table      
         * @param array  &$exclude  An array of characters which should not be decoded
         * 
         * @return string                  
         */
        protected function decodeEntities2($prefix, $codepoint, $original, &$table, &$exclude)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Arabic Auto Summarize Class
     *  
     * Filename: AutoSummarize.php
     *  
     * Original Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose: Automatic keyphrase extraction to provide a quick mini-summary 
     *          for a long Arabic document.
     *           
     * ----------------------------------------------------------------------
     *  
     * Arabic Auto Summarize
     *
     * This class identifies the key points in an Arabic document for you to share with 
     * others or quickly scan. The class determines key points by analyzing an Arabic 
     * document and assigning a score to each sentence. Sentences that contain words 
     * used frequently in the document are given a higher score. You can then choose a 
     * percentage of the highest-scoring sentences to display in the summary. 
     * "ArAutoSummarize" class works best on well-structured documents such as reports, 
     * articles, and scientific papers.
     * 
     * "ArAutoSummarize" class cuts wordy copy to the bone by counting words and ranking 
     * sentences. First, "ArAutoSummarize" class identifies the most common words in the 
     * document and assigns a "score" to each word--the more frequently a word is used, 
     * the higher the score.
     * 
     * Then, it "averages" each sentence by adding the scores of its words and dividing 
     * the sum by the number of words in the sentence--the higher the average, the 
     * higher the rank of the sentence. "ArAutoSummarize" class can summarize texts to 
     * specific number of sentences or percentage of the original copy.
     * 
     * We use statistical approach, with some attention apparently paid to:
     * 
     * - Location: leading sentences of paragraph, title, introduction, and conclusion.
     * - Fixed phrases: in-text summaries.
     * - Frequencies of words, phrases, proper names
     * - Contextual material: query, title, headline, initial paragraph
     * 
     * The motivation for this class is the range of applications for key phrases:
     * 
     * - Mini-summary: Automatic key phrase extraction can provide a quick mini-summary 
     *   for a long document. For example, it could be a feature in a web sites; just 
     *   click the summarize button when browsing a long web page.
     * 
     * - Highlights: It can highlight key phrases in a long document, to facilitate 
     *   skimming the document.
     * 
     * - Author Assistance: Automatic key phrase extraction can help an author or editor 
     *   who wants to supply a list of key phrases for a document. For example, the 
     *   administrator of a web site might want to have a key phrase list at the top of 
     *   each web page. The automatically extracted phrases can be a starting point for 
     *   further manual refinement by the author or editor.
     * 
     * - Text Compression: On a device with limited display capacity or limited 
     *   bandwidth, key phrases can be a substitute for the full text. For example, an 
     *   email message could be reduced to a set of key phrases for display on a pager; 
     *   a web page could be reduced for display on a portable wireless web browser.
     * 
     * This list is not intended to be exhaustive, and there may be some overlap in 
     * the items.
     *
     * Example:
     * <code>
     * include('./I18N/Arabic.php');
     * $obj = new I18N_Arabic('AutoSummarize');
     * 
     * $file = 'Examples/Articles/Ajax.txt';
     * $r = 20;
     * 
     * // get contents of a file into a string
     * $fhandle = fopen($file, "r");
     * $c = fread($fhandle, filesize($file));
     * fclose($fhandle);
     * 
     * $k = $obj->getMetaKeywords($c, $r);
     * echo '<b><font color=#FFFF00>';
     * echo 'Keywords:</font></b>';
     * echo '<p dir="rtl" align="justify">';
     * echo $k . '</p>';
     * 
     * $s = $obj->doRateSummarize($c, $r);
     * echo '<b><font color=#FFFF00>';
     * echo 'Summary:</font></b>';
     * echo '<p dir="rtl" align="justify">';
     * echo $s . '</p>';
     * 
     * echo '<b><font color=#FFFF00>';
     * echo 'Full Text:</font></b>';
     * echo '<p><a class=ar_link target=_blank ';
     * echo 'href='.$file.'>Source File</a></p>';
     * </code>
     *             
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class do automatic keyphrase extraction to provide a quick 
     * mini-summary for a long Arabic document
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_AutoSummarize
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Load enhanced Arabic stop words list 
         * 
         * @return void          
         */
        public function loadExtra()
        {
        }
        /**
         * Core summarize function that implement required steps in the algorithm
         *                        
         * @param string  $str      Input Arabic document as a string
         * @param string  $keywords List of keywords higlited by search process
         * @param integer $int      Sentences value (see $mode effect also)
         * @param string  $mode     Mode of sentences count [number|rate]
         * @param string  $output   Output mode [summary|highlight]
         * @param string  $style    Name of the CSS class you would like to apply
         *                    
         * @return string Output summary requested
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function summarize($str, $keywords, $int, $mode, $output, $style = \null)
        {
        }
        /**
         * Summarize input Arabic string (document content) into specific number of 
         * sentences in the output
         *                        
         * @param string  $str      Input Arabic document as a string
         * @param integer $int      Number of sentences required in output summary
         * @param string  $keywords List of keywords higlited by search process
         *                    
         * @return string Output summary requested
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function doSummarize($str, $int, $keywords)
        {
        }
        /**
         * Summarize percentage of the input Arabic string (document content) into output
         *      
         * @param string  $str      Input Arabic document as a string
         * @param integer $rate     Rate of output summary sentence number as 
         *                          percentage of the input Arabic string 
         *                          (document content)
         * @param string  $keywords List of keywords higlited by search process
         *                    
         * @return string Output summary requested
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function doRateSummarize($str, $rate, $keywords)
        {
        }
        /**
         * Highlight key sentences (summary) of the input string (document content) 
         * using CSS and send the result back as an output
         *                             
         * @param string  $str      Input Arabic document as a string
         * @param integer $int      Number of key sentences required to be 
         *                          highlighted in the input string 
         *                          (document content)
         * @param string  $keywords List of keywords higlited by search process
         * @param string  $style    Name of the CSS class you would like to apply
         *                    
         * @return string Output highlighted key sentences summary (using CSS)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function highlightSummary($str, $int, $keywords, $style)
        {
        }
        /**
         * Highlight key sentences (summary) as percentage of the input string 
         * (document content) using CSS and send the result back as an output.
         *                    
         * @param string  $str      Input Arabic document as a string
         * @param integer $rate     Rate of highlighted key sentences summary 
         *                          number as percentage of the input Arabic 
         *                          string (document content)
         * @param string  $keywords List of keywords higlited by search process
         * @param string  $style    Name of the CSS class you would like to apply
         *                    
         * @return string Output highlighted key sentences summary (using CSS)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function highlightRateSummary($str, $rate, $keywords, $style)
        {
        }
        /**
         * Extract keywords from a given Arabic string (document content)
         *      
         * @param string  $str Input Arabic document as a string
         * @param integer $int Number of keywords required to be extracting 
         *                     from input string (document content)
         *                    
         * @return string List of the keywords extracting from input Arabic string
         *               (document content)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getMetaKeywords($str, $int)
        {
        }
        /**
         * Normalized Arabic document
         *      
         * @param string $str Input Arabic document as a string
         *      
         * @return string Normalized Arabic document
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function doNormalize($str)
        {
        }
        /**
         * Extracting common Arabic words (roughly) 
         * from input Arabic string (document content)
         *                        
         * @param string $str Input normalized Arabic document as a string
         *      
         * @return string Arabic document as a string free of common words (roughly)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function cleanCommon($str)
        {
        }
        /**
         * Remove less significant Arabic letter from given string (document content). 
         * Please note that output will not be human readable.
         *                      
         * @param string $str Input Arabic document as a string
         *      
         * @return string Output string after removing less significant Arabic letter
         *                (not human readable output)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function draftStem($str)
        {
        }
        /**
         * Ranks words in a given Arabic string (document content). That rank refers 
         * to the frequency of that word appears in that given document.
         *                      
         * @param string $str Input Arabic document as a string
         *      
         * @return hash Associated array where document words referred by index and
         *              those words ranks referred by values of those array items.
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function rankWords($str)
        {
        }
        /**
         * Ranks sentences in a given Arabic string (document content).
         *      
         * @param array $sentences        Sentences of the input Arabic document 
         *                                as an array
         * @param array $stemmedSentences Stemmed sentences of the input Arabic 
         *                                document as an array
         * @param array $arr              Words ranks array (word as an index and 
         *                                value refer to the word frequency)
         *                         
         * @return array Two dimension array, first item is an array of document
         *               sentences, second item is an array of ranks of document
         *               sentences.
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function rankSentences($sentences, $stemmedSentences, $arr)
        {
        }
        /**
         * Calculate minimum rank for sentences which will be including in the summary
         *      
         * @param array   $str Document sentences
         * @param array   $arr Sentences ranks
         * @param integer $int Number of sentences you need to include in your summary
         * @param integer $max Maximum number of characters accepted in your summary
         *      
         * @return integer Minimum accepted sentence rank (sentences with rank more
         *                 than this will be listed in the document summary)
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function minAcceptedRank($str, $arr, $int, $max)
        {
        }
        /**
         * Check some conditions to know if a given string is a formal valid word or not
         *      
         * @param string $word String to be checked if it is a valid word or not
         *      
         * @return boolean True if passed string is accepted as a valid word else 
         *                 it will return False
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function acceptedWord($word)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Translate English word into Hieroglyphics
     *  
     * Filename:   Hiero.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    Translate English word into Hieroglyphics
     *              
     * ----------------------------------------------------------------------
     *  
     * Translate English word into Hieroglyphics
     *
     * Royality is made affordable, and within your reach. Now you can have The 
     * Royal Cartouche custome made in Egypt in 18 Kt. Gold with your name 
     * translated and inscribed in Hieroglyphic.
     * 
     * Originally, the Cartouche was worn only by the Pharaohs or Kings of Egypt. 
     * The Pharaoh was considered a living God and his Cartouche was his insignia. 
     * The "Magical Oval" in which the Pharaoh's first name was written was intended 
     * to protect him from evil spirits both while he lived and in the afterworld 
     * when entombed.
     * 
     * Over the past 5000 years the Cartouche has become a universal symbol of long 
     * life, good luck and protection from any evil.
     * 
     * Now you can acquire this ancient pendent handmade in Egypt from pure 18 Karat 
     * Egyptian gold with your name spelled out in the same way as King Tut, Ramses, 
     * Queen Nefertiti did.  
     *
     * Example:
     * <code>
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('Hiero');
     * 
     *     $word = $_GET['w'];
     *     $im   = $obj->str2hiero($word);
     *      
     *     header ("Content-type: image/jpeg");
     *     imagejpeg($im, '', 80);
     *     ImageDestroy($im);
     * </code>
     *             
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * Translate English word into Hieroglyphics
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Hiero
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Set the output language
         *      
         * @param string $value Output language (Hiero or Phoenician)
         *      
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setLanguage($value)
        {
        }
        /**
         * Get the output language
         *      
         * @return string return current setting of the output language
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getLanguage()
        {
        }
        /**
         * Translate Arabic or English word into Hieroglyphics
         *      
         * @param string  $word  Arabic or English word
         * @param string  $dir   Writing direction [ltr, rtl, ttd, dtt] (default ltr)
         * @param string  $lang  Input language [en, ar] (default en)
         * @param integer $red   Value of background red component (default is null)
         * @param integer $green Value of background green component (default is null)
         * @param integer $blue  Value of background blue component (default is null)
         *      
         * @return resource Image resource identifier
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function str2graph($word, $dir = 'ltr', $lang = 'en', $red = \null, $green = \null, $blue = \null)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Tagging Arabic Word Class
     *  
     * Filename: WordTag.php
     *  
     * Original  Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:  Arabic grammarians describe Arabic as being derived from
     *           three main categories: noun, verb and particle. This class
     *           built to recognize the class of a given Arabic word.
     *            
     * ----------------------------------------------------------------------
     *  
     * Tagging Arabic Word
     *
     * This PHP Class can identifying names, places, dates, and other noun
     * words and phrases in Arabic language that establish the meaning of a body
     * of text.
     * 
     * This process of identifying names, places, dates, and other noun words and 
     * phrases that establish the meaning of a body of text-is critical to software 
     * systems that process large amounts of unstructured data coming from sources such 
     * as email, document files, and the Web.
     * 
     * Arabic words are classifies into three main classes, namely, verb, noun and 
     * particle. Verbs are sub classified into three subclasses (Past verbs, Present 
     * Verbs, etc.); nouns into forty six subclasses (e.g. Active participle, Passive 
     * participle, Exaggeration pattern, Adjectival noun, Adverbial noun, Infinitive 
     * noun, Common noun, Pronoun, Quantifier, etc.) and particles into twenty three 
     * subclasses (e.g. additional, resumption, Indefinite, Conditional, Conformational, 
     * Prohibition, Imperative, Optative, Reasonal, Dubious, etc.), and from these three 
     * main classes that the rest of the language is derived.
     * 
     * The most important aspect of this system of describing Arabic is that all the 
     * subclasses of these three main classes inherit properties from the parent 
     * classes.
     * 
     * Arabic is very rich in categorising words, and contains classes for almost every 
     * form of word imaginable. For example, there are classes for nouns of instruments, 
     * nouns of place and time, nouns of activity and so on. If we tried to use all the 
     * subclasses described by Arabic grammarians, the size of the tagset would soon 
     * reach more than two or three hundred tags. For this reason, we have chosen only 
     * the main classes. But because of the way all the classes inherit from others, it 
     * would be quite simple to extend this tagset to include more subclasses.      
     *
     * Example:
     * <code>
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('WordTag');
     * 
     *     $hStr=$obj->highlightText($str,'#80B020');
     * 
     *     echo $str . '<hr />' . $hStr . '<hr />';
     *     
     *     $taggedText = $obj->tagText($str);
     * 
     *     foreach($taggedText as $wordTag) {
     *         list($word, $tag) = $wordTag;
     *     
     *         if ($tag == 1) {
     *             echo "<font color=#DBEC21>$word is Noun</font>, ";
     *         }
     *     
     *         if ($tag == 0) {
     *             echo "$word is not Noun, ";
     *         }
     *     }    
     * </code>
     *    
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class to tagging Arabic Word
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_WordTag
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Check if given rabic word is noun or not
         *      
         * @param string $word       Word you want to check if it is 
         *                           noun (utf-8)
         * @param string $word_befor The word before word you want to check
         *                    
         * @return boolean TRUE if given word is Arabic noun
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function isNoun($word, $word_befor)
        {
        }
        /**
         * Tag all words in a given Arabic string if they are nouns or not
         *      
         * @param string $str Arabic string you want to tag all its words
         *                    
         * @return array Two dimension array where item[i][0] represent the word i
         *               in the given string, and item[i][1] is 1 if that word is
         *               noun and 0 if it is not
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function tagText($str)
        {
        }
        /**
         * Highlighted all nouns in a given Arabic string
         *      
         * @param string $str   Arabic string you want to highlighted 
         *                      all its nouns
         * @param string $style Name of the CSS class you would like to apply
         *                    
         * @return string Arabic string in HTML format where all nouns highlighted
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function highlightText($str, $style = \null)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Arabic Text ArStandard Class
     *  
     * Filename: Standard.php
     *  
     * Original  Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:  Standardize Arabic text
     *  
     * ----------------------------------------------------------------------
     *  
     * Arabic Text Standardize Class
     *
     * PHP class to standardize Arabic text just like rules followed in magazines 
     * and newspapers like spaces before and after punctuations, brackets and 
     * units etc ...
     *
     * Example:
     * <code>
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('Standard');
     * 
     *     $str = $obj->standard($content);
     *       
     *     echo $str;    
     * </code>
     *
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class standardize Arabic text
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Standard
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * This method will standardize Arabic text to follow writing standards 
         * (just like magazine rules)
         *          
         * @param string $text Arabic text you would like to standardize
         *                    
         * @return String Standardized version of input Arabic text
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public static function standard($text)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Detect Arabic String Character Set
     *  
     * Filename:   CharsetD.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    This class will return Arabic character set that used for
     *             a given Arabic string passing into this class, those available
     *             character sets that can be detected by this class includes
     *             the most popular three: Windows-1256, ISO 8859-6, and UTF-8.
     *              
     * ----------------------------------------------------------------------
     *  
     * Detect Arabic String Character Set
     *
     * The last step of the Information Retrieval process is to display the found 
     * documents to the user. However, some difficulties might occur at that point. 
     * English texts are usually written in the ASCII standard. Unlike the English 
     * language, many languages have different character sets, and do not have one 
     * standard. This plurality of standards causes problems, especially in a web 
     * environment.
     *
     * This PHP class will return Arabic character set that used for a given
     * Arabic string passing into this class, those available character sets that can
     * be detected by this class includes the most popular three: Windows-1256,
     * ISO 8859-6, and UTF-8.
     *
     * Example:
     * <code>
     *   include('./I18N/Arabic.php');
     *   $obj = new I18N_Arabic('CharsetD');
     * 
     *   $charset = $obj->getCharset($text);    
     * </code>
     *                
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org
     */
    /**
     * This PHP class detect Arabic string character set
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org
     */
    class I18N_Arabic_CharsetD
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Count number of hits for the most frequented letters in Arabic language 
         * (Alef, Lam and Yaa), then calculate association ratio with each of 
         * possible character set (UTF-8, Windows-1256 and ISO-8859-6)
         *                           
         * @param String $string Arabic string in unknown format
         *      
         * @return Array Character set as key and string association ratio as value
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function guess($string)
        {
        }
        /**
         * Find the most possible character set for given Arabic string in unknown 
         * format
         *         
         * @param String $string Arabic string in unknown format
         *      
         * @return String The most possible character set for given Arabic string in
         *                unknown format[utf-8|windows-1256|iso-8859-6]
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getCharset($string)
        {
        }
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2016 Khaled Al-Sham'aa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     *  
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Spell numbers in the Arabic idiom
     *  
     * Filename:   Numbers.php
     *  
     * Original    Author(s): Khaled Al-Sham'aa <khaled@ar-php.org>
     *  
     * Purpose:    Spell numbers in the Arabic idiom
     *  
     * ----------------------------------------------------------------------
     *  
     * Spell numbers in the Arabic idiom
     *
     * PHP class to spell numbers in the Arabic idiom. This function is very
     * useful for financial applications in Arabic for example.
     *    
     * If you ever have to create an Arabic PHP application built around invoicing or 
     * accounting, you might find this class useful. Its sole reason for existence is 
     * to help you translate integers into their spoken-word equivalents in Arabic 
     * language.
     * 
     * How is this useful? Well, consider the typical invoice: In addition to a 
     * description of the work done, the date, and the hourly or project cost, it always 
     * includes a total cost at the end, the amount that the customer is expected 
     * to pay.
     *   
     * To avoid any misinterpretation of the total amount, many organizations (mine 
     * included) put the amount in both words and figures; for example, $1,200 becomes 
     * "one thousand and two hundred dollars." You probably do the same thing every time 
     * you write a check.
     * 
     * Now take this scenario to a Web-based invoicing system. The actual data used to 
     * generate the invoice will be stored in a database as integers, both to save space 
     * and to simplify calculations. So when a printable invoice is generated, your Web 
     * application will need to convert those integers into words, this is more clarity 
     * and more personality.
     * 
     * This class will accept almost any numeric value and convert it into an equivalent 
     * string of words in written Arabic language (using Windows-1256 character set). 
     * The value can be any positive number up to 999,999,999 (users should not use 
     * commas). It will take care of feminine and Arabic grammar rules.
     *
     * Example:
     * <code>
     *     include('./I18N/Arabic.php');
     *     $obj = new I18N_Arabic('Numbers');
     *     
     *     $obj->setFeminine(1);
     *     $obj->setFormat(1);
     *     
     *     $integer = 2147483647;
     *     
     *     $text = $obj->int2str($integer);
     *     
     *     echo "<p align=\"right\"><b class=hilight>$integer</b><br />$text</p>";
     * 
     *     $obj->setFeminine(2);
     *     $obj->setFormat(2);
     *     
     *     $integer = 2147483647;
     *     
     *     $text = $obj->int2str($integer);
     *     
     *     echo "<p align=\"right\"><b class=hilight>$integer</b><br />$text</p>";   
     * </code>
     *             
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * This PHP class spell numbers in the Arabic idiom
     *  
     * @category  I18N 
     * @package   I18N_Arabic
     * @author    Khaled Al-Sham'aa <khaled@ar-php.org>
     * @copyright 2006-2016 Khaled Al-Sham'aa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    class I18N_Arabic_Numbers
    {
        /**
         * Loads initialize values
         *
         * @ignore
         */
        public function __construct()
        {
        }
        /**
         * Set feminine flag of the counted object
         *      
         * @param integer $value Counted object feminine 
         *                      (1 for masculine & 2 for feminine)
         *      
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setFeminine($value)
        {
        }
        /**
         * Set the grammar position flag of the counted object
         *      
         * @param integer $value Grammar position of counted object
         *                       (1 if Marfoua & 2 if Mansoub or Majrour)
         *                            
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setFormat($value)
        {
        }
        /**
         * Set the ordering flag, is it normal number or ordering number
         *      
         * @param integer $value Is it an ordering number? default is 1
         *                       (use 1 if no and 2 if yes)
         *                            
         * @return object $this to build a fluent interface
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function setOrder($value)
        {
        }
        /**
         * Get the feminine flag of counted object
         *      
         * @return integer return current setting of counted object feminine flag
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getFeminine()
        {
        }
        /**
         * Get the grammer position flag of counted object
         *      
         * @return integer return current setting of counted object grammer
         *                 position flag
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getFormat()
        {
        }
        /**
         * Get the ordering flag value
         *      
         * @return integer return current setting of ordering flag value
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function getOrder()
        {
        }
        /**
         * Spell integer number in Arabic idiom
         *      
         * @param integer $number The number you want to spell in Arabic idiom
         *                    
         * @return string The Arabic idiom that spells inserted number
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function int2str($number)
        {
        }
        /**
         * Spell number in Arabic idiom as money
         *      
         * @param integer $number The number you want to spell in Arabic idiom as money
         * @param string  $iso    The three-letter Arabic country code defined in 
         *                        ISO 3166 standard
         * @param string  $lang   The two-letter language code in ISO 639-1 standard
         *                        [ar|en]
         *                    
         * @return string The Arabic idiom that spells inserted number as money
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function money2str($number, $iso = 'SYP', $lang = 'ar')
        {
        }
        /**
         * Convert Arabic idiom number string into Integer
         *      
         * @param string $str The Arabic idiom that spells input number
         *                    
         * @return integer The number you spell it in the Arabic idiom
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function str2int($str)
        {
        }
        /**
         * Spell integer number in Arabic idiom
         *      
         * @param integer $number The number you want to spell in Arabic idiom
         * @param logical $zero   Present leading zero if true [default is true]     
         *      
         * @return string The Arabic idiom that spells inserted number
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function subInt2str($number, $zero = \true)
        {
        }
        /**
         * Spell sub block number of three digits max in Arabic idiom
         *      
         * @param integer $number Sub block number of three digits max you want to 
         *                        spell in Arabic idiom
         *                      
         * @return string The Arabic idiom that spells inserted sub block
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        protected function writtenBlock($number)
        {
        }
        /**
         * Represent integer number in Arabic-Indic digits using HTML entities
         *      
         * @param integer $number The number you want to present in Arabic-Indic digits
         *                        using HTML entities
         *                    
         * @return string The Arabic-Indic digits represent inserted integer number 
         *                using HTML entities
         * @author Khaled Al-Sham'aa <khaled@ar-php.org>
         */
        public function int2indic($number)
        {
        }
    }
}
namespace Dompdf {
    /**
     * Standard exception thrown by DOMPDF classes
     *
     * @package dompdf
     */
    class Exception extends \Exception
    {
        /**
         * Class constructor
         *
         * @param string $message Error message
         * @param int $code       Error code
         */
        public function __construct($message = null, $code = 0)
        {
        }
    }
}
namespace Dompdf\Exception {
    /**
     * Image exception thrown by DOMPDF
     *
     * @package dompdf
     */
    class ImageException extends \Dompdf\Exception
    {
        /**
         * Class constructor
         *
         * @param string $message Error message
         * @param int $code       Error code
         */
        function __construct($message = null, $code = 0)
        {
        }
    }
}
namespace Dompdf {
    /**
     * Maps table cells to the table grid.
     *
     * This class resolves borders in tables with collapsed borders and helps
     * place row & column spanned table cells.
     *
     * @package dompdf
     */
    class Cellmap
    {
        /**
         * Border style weight lookup for collapsed border resolution.
         *
         * @var array
         */
        protected static $_BORDER_STYLE_SCORE = ["double" => 8, "solid" => 7, "dashed" => 6, "dotted" => 5, "ridge" => 4, "outset" => 3, "groove" => 2, "inset" => 1, "none" => 0];
        /**
         * The table object this cellmap is attached to.
         *
         * @var TableFrameDecorator
         */
        protected $_table;
        /**
         * The total number of rows in the table
         *
         * @var int
         */
        protected $_num_rows;
        /**
         * The total number of columns in the table
         *
         * @var int
         */
        protected $_num_cols;
        /**
         * 2D array mapping <row,column> to frames
         *
         * @var Frame[][]
         */
        protected $_cells;
        /**
         * 1D array of column dimensions
         *
         * @var array
         */
        protected $_columns;
        /**
         * 1D array of row dimensions
         *
         * @var array
         */
        protected $_rows;
        /**
         * 2D array of border specs
         *
         * @var array
         */
        protected $_borders;
        /**
         * 1D Array mapping frames to (multiple) <row, col> pairs, keyed on frame_id.
         *
         * @var array[]
         */
        protected $_frames;
        /**
         * @param TableFrameDecorator $table
         */
        public function __construct(\Dompdf\FrameDecorator\Table $table)
        {
        }
        /**
         *
         */
        public function reset()
        {
        }
        /**
         *
         */
        public function lock_columns()
        {
        }
        /**
         * @return bool
         */
        public function is_columns_locked()
        {
        }
        /**
         * @param $fixed
         */
        public function set_layout_fixed($fixed)
        {
        }
        /**
         * @return bool
         */
        public function is_layout_fixed()
        {
        }
        /**
         * @return int
         */
        public function get_num_rows()
        {
        }
        /**
         * @return int
         */
        public function get_num_cols()
        {
        }
        /**
         * @return array
         */
        public function &get_columns()
        {
        }
        /**
         * @param $columns
         */
        public function set_columns($columns)
        {
        }
        /**
         * @param int $i
         *
         * @return mixed
         */
        public function &get_column($i)
        {
        }
        /**
         * @return array
         */
        public function &get_rows()
        {
        }
        /**
         * @param int $j
         *
         * @return mixed
         */
        public function &get_row($j)
        {
        }
        /**
         * @param int $i
         * @param int $j
         * @param mixed $h_v
         * @param null|mixed $prop
         *
         * @return mixed
         */
        public function get_border($i, $j, $h_v, $prop = null)
        {
        }
        /**
         * @param int $i
         * @param int $j
         *
         * @return array
         */
        public function get_border_properties($i, $j)
        {
        }
        /**
         * @param Frame $frame
         *
         * @return array|null
         */
        public function get_spanned_cells(\Dompdf\Frame $frame)
        {
        }
        /**
         * @param Frame $frame
         *
         * @return bool
         */
        public function frame_exists_in_cellmap(\Dompdf\Frame $frame)
        {
        }
        /**
         * @param Frame $frame
         *
         * @return array
         * @throws Exception
         */
        public function get_frame_position(\Dompdf\Frame $frame)
        {
        }
        /**
         * @param Frame $frame
         *
         * @return int
         * @throws Exception
         */
        public function get_frame_width(\Dompdf\Frame $frame)
        {
        }
        /**
         * @param Frame $frame
         *
         * @return int
         * @throws Exception
         * @throws Exception
         */
        public function get_frame_height(\Dompdf\Frame $frame)
        {
        }
        /**
         * @param int $j
         * @param mixed $width
         */
        public function set_column_width($j, $width)
        {
        }
        /**
         * @param int $i
         * @param long $height
         */
        public function set_row_height($i, $height)
        {
        }
        /**
         * https://www.w3.org/TR/CSS21/tables.html#border-conflict-resolution
         *
         * @param int $i
         * @param int $j
         * @param string $h_v
         * @param array $border_spec
         */
        protected function _resolve_border($i, $j, $h_v, $border_spec)
        {
        }
        /**
         * Get the resolved border properties for the given frame.
         *
         * @param AbstractFrameDecorator $frame
         *
         * @return array[]
         */
        protected function get_resolved_border(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame) : array
        {
        }
        /**
         * @param AbstractFrameDecorator $frame
         */
        public function add_frame(\Dompdf\Frame $frame) : void
        {
        }
        /**
         * Apply resolved borders to table cells and calculate column widths.
         */
        protected function calculate_column_widths() : void
        {
        }
        /**
         *
         */
        public function add_row()
        {
        }
        /**
         * Remove a row from the cellmap.
         *
         * @param Frame
         */
        public function remove_row(\Dompdf\Frame $row)
        {
        }
        /**
         * Remove a row group from the cellmap.
         *
         * @param Frame $group The group to remove
         */
        public function remove_row_group(\Dompdf\Frame $group)
        {
        }
        /**
         * Update a row group after rows have been removed
         *
         * @param Frame $group    The group to update
         * @param Frame $last_row The last row in the row group
         */
        public function update_row_group(\Dompdf\Frame $group, \Dompdf\Frame $last_row)
        {
        }
        /**
         *
         */
        public function assign_x_positions()
        {
        }
        /**
         *
         */
        public function assign_frame_heights()
        {
        }
        /**
         * Re-adjust frame height if the table height is larger than its content
         */
        public function set_frame_heights($table_height, $content_height)
        {
        }
        /**
         * Used for debugging:
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
    /**
     * Main rendering interface
     *
     * Currently {@link Dompdf\Adapter\CPDF}, {@link Dompdf\Adapter\PDFLib}, and {@link Dompdf\Adapter\GD}
     * implement this interface.
     *
     * Implementations should measure x and y increasing to the left and down,
     * respectively, with the origin in the top left corner.  Implementations
     * are free to use a unit other than points for length, but I can't
     * guarantee that the results will look any good.
     *
     * @package dompdf
     */
    interface Canvas
    {
        function __construct($paper = "letter", $orientation = "portrait", \Dompdf\Dompdf $dompdf = null);
        /**
         * @return Dompdf
         */
        function get_dompdf();
        /**
         * Returns the current page number
         *
         * @return int
         */
        function get_page_number();
        /**
         * Returns the total number of pages
         *
         * @return int
         */
        function get_page_count();
        /**
         * Sets the total number of pages
         *
         * @param int $count
         */
        function set_page_count($count);
        /**
         * Draws a line from x1,y1 to x2,y2
         *
         * See {@link Style::munge_color()} for the format of the color array.
         * See {@link Cpdf::setLineStyle()} for a description of the format of the
         * $style parameter (aka dash).
         *
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param array $color
         * @param float $width
         * @param array $style
         */
        function line($x1, $y1, $x2, $y2, $color, $width, $style = null);
        /**
         * Draws a rectangle at x1,y1 with width w and height h
         *
         * See {@link Style::munge_color()} for the format of the color array.
         * See {@link Cpdf::setLineStyle()} for a description of the $style
         * parameter (aka dash)
         *
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param array $color
         * @param float $width
         * @param array $style
         */
        function rectangle($x1, $y1, $w, $h, $color, $width, $style = null);
        /**
         * Draws a filled rectangle at x1,y1 with width w and height h
         *
         * See {@link Style::munge_color()} for the format of the color array.
         *
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param array $color
         */
        function filled_rectangle($x1, $y1, $w, $h, $color);
        /**
         * Starts a clipping rectangle at x1,y1 with width w and height h
         *
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         */
        function clipping_rectangle($x1, $y1, $w, $h);
        /**
         * Starts a rounded clipping rectangle at x1,y1 with width w and height h
         *
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param float $tl
         * @param float $tr
         * @param float $br
         * @param float $bl
         *
         * @return
         */
        function clipping_roundrectangle($x1, $y1, $w, $h, $tl, $tr, $br, $bl);
        /**
         * Ends the last clipping shape
         */
        function clipping_end();
        /**
         * Processes a callback on every page
         *
         * The callback function receives the four parameters `$pageNumber`,
         * `$pageCount`, `$pdf`, and `$fontMetrics`, in that order.
         *
         * This function can be used to add page numbers to all pages after the
         * first one, for example.
         *
         * @param callable $callback The callback function to process on every page
         * @todo Enable with next major release
         */
        //public function page_script(callable $callback): void;
        /**
         * Writes text at the specified x and y coordinates on every page
         *
         * The strings '{PAGE_NUM}' and '{PAGE_COUNT}' are automatically replaced
         * with their current values.
         *
         * See {@link Style::munge_color()} for the format of the color array.
         *
         * @param float  $x
         * @param float  $y
         * @param string $text       the text to write
         * @param string $font       the font file to use
         * @param float  $size       the font size, in points
         * @param array  $color
         * @param float  $word_space word spacing adjustment
         * @param float  $char_space char spacing adjustment
         * @param float  $angle      angle to write the text at, measured CW starting from the x-axis
         */
        public function page_text($x, $y, $text, $font, $size, $color = [0, 0, 0], $word_space = 0.0, $char_space = 0.0, $angle = 0.0);
        /**
         * Draw line at the specified coordinates on every page.
         *
         * See {@link Style::munge_color()} for the format of the color array.
         *
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param array $color
         * @param float $width
         * @param array $style optional
         * @todo Enable with next major release
         */
        //public function page_line($x1, $y1, $x2, $y2, $color, $width, $style = []);
        /**
         * Save current state
         */
        function save();
        /**
         * Restore last state
         */
        function restore();
        /**
         * Rotate
         *
         * @param float $angle angle in degrees for counter-clockwise rotation
         * @param float $x     Origin abscissa
         * @param float $y     Origin ordinate
         */
        function rotate($angle, $x, $y);
        /**
         * Skew
         *
         * @param float $angle_x
         * @param float $angle_y
         * @param float $x Origin abscissa
         * @param float $y Origin ordinate
         */
        function skew($angle_x, $angle_y, $x, $y);
        /**
         * Scale
         *
         * @param float $s_x scaling factor for width as percent
         * @param float $s_y scaling factor for height as percent
         * @param float $x   Origin abscissa
         * @param float $y   Origin ordinate
         */
        function scale($s_x, $s_y, $x, $y);
        /**
         * Translate
         *
         * @param float $t_x movement to the right
         * @param float $t_y movement to the bottom
         */
        function translate($t_x, $t_y);
        /**
         * Transform
         *
         * @param $a
         * @param $b
         * @param $c
         * @param $d
         * @param $e
         * @param $f
         * @return
         */
        function transform($a, $b, $c, $d, $e, $f);
        /**
         * Draws a polygon
         *
         * The polygon is formed by joining all the points stored in the $points
         * array.  $points has the following structure:
         * <code>
         * array(0 => x1,
         *       1 => y1,
         *       2 => x2,
         *       3 => y2,
         *       ...
         *       );
         * </code>
         *
         * See {@link Style::munge_color()} for the format of the color array.
         * See {@link Cpdf::setLineStyle()} for a description of the $style
         * parameter (aka dash)
         *
         * @param array $points
         * @param array $color
         * @param float $width
         * @param array $style
         * @param bool $fill Fills the polygon if true
         */
        function polygon($points, $color, $width = null, $style = null, $fill = false);
        /**
         * Draws a circle at $x,$y with radius $r
         *
         * See {@link Style::munge_color()} for the format of the color array.
         * See {@link Cpdf::setLineStyle()} for a description of the $style
         * parameter (aka dash)
         *
         * @param float $x
         * @param float $y
         * @param float $r
         * @param array $color
         * @param float $width
         * @param array $style
         * @param bool $fill Fills the circle if true
         */
        function circle($x, $y, $r, $color, $width = null, $style = null, $fill = false);
        /**
         * Add an image to the pdf.
         *
         * The image is placed at the specified x and y coordinates with the
         * given width and height.
         *
         * @param string $img_url the path to the image
         * @param float $x x position
         * @param float $y y position
         * @param int $w width (in pixels)
         * @param int $h height (in pixels)
         * @param string $resolution The resolution of the image
         */
        function image($img_url, $x, $y, $w, $h, $resolution = "normal");
        /**
         * Add an arc to the PDF
         * See {@link Style::munge_color()} for the format of the color array.
         *
         * @param float $x X coordinate of the arc
         * @param float $y Y coordinate of the arc
         * @param float $r1 Radius 1
         * @param float $r2 Radius 2
         * @param float $astart Start angle in degrees
         * @param float $aend End angle in degrees
         * @param array $color Color
         * @param float $width
         * @param array $style
         */
        function arc($x, $y, $r1, $r2, $astart, $aend, $color, $width, $style = []);
        /**
         * Writes text at the specified x and y coordinates
         * See {@link Style::munge_color()} for the format of the color array.
         *
         * @param float $x
         * @param float $y
         * @param string $text the text to write
         * @param string $font the font file to use
         * @param float $size the font size, in points
         * @param array $color
         * @param float $word_space word spacing adjustment
         * @param float $char_space char spacing adjustment
         * @param float $angle angle
         */
        function text($x, $y, $text, $font, $size, $color = [0, 0, 0], $word_space = 0.0, $char_space = 0.0, $angle = 0.0);
        /**
         * Add a named destination (similar to <a name="foo">...</a> in html)
         *
         * @param string $anchorname The name of the named destination
         */
        function add_named_dest($anchorname);
        /**
         * Add a link to the pdf
         *
         * @param string $url The url to link to
         * @param float $x The x position of the link
         * @param float $y The y position of the link
         * @param float $width The width of the link
         * @param float $height The height of the link
         */
        function add_link($url, $x, $y, $width, $height);
        /**
         * Add meta information to the pdf
         *
         * @param string $name Label of the value (Creator, Producer, etc.)
         * @param string $value The text to set
         */
        function add_info($name, $value);
        /**
         * Calculates text size, in points
         *
         * @param string $text the text to be sized
         * @param string $font the desired font
         * @param float $size the desired font size
         * @param float $word_spacing word spacing, if any
         * @param float $char_spacing char spacing, if any
         *
         * @return float
         */
        function get_text_width($text, $font, $size, $word_spacing = 0.0, $char_spacing = 0.0);
        /**
         * Calculates font height, in points
         *
         * @param string $font
         * @param float $size
         *
         * @return float
         */
        function get_font_height($font, $size);
        /**
         * Calculates font baseline, in points
         *
         * @param string $font
         * @param float $size
         *
         * @return float
         */
        function get_font_baseline($font, $size);
        /**
         * Returns the PDF's width in points
         *
         * @return float
         */
        function get_width();
        /**
         * Return the image's height in pixels
         *
         * @return float
         */
        function get_height();
        /**
         * Returns the font x-height, in points
         *
         * @param string $font
         * @param float $size
         *
         * @return float
         */
        //function get_font_x_height($font, $size);
        /**
         * Sets the opacity
         *
         * @param float $opacity
         * @param string $mode
         */
        function set_opacity($opacity, $mode = "Normal");
        /**
         * Sets the default view
         *
         * @param string $view
         * 'XYZ'  left, top, zoom
         * 'Fit'
         * 'FitH' top
         * 'FitV' left
         * 'FitR' left,bottom,right
         * 'FitB'
         * 'FitBH' top
         * 'FitBV' left
         * @param array $options
         *
         * @return void
         */
        function set_default_view($view, $options = []);
        /**
         * @param string $script
         *
         * @return void
         */
        function javascript($script);
        /**
         * Starts a new page
         *
         * Subsequent drawing operations will appear on the new page.
         */
        function new_page();
        /**
         * Streams the PDF directly to the browser.
         *
         * @param string $filename The filename to present to the browser.
         * @param array $options Associative array: 'compress' => 1 or 0 (default 1); 'Attachment' => 1 or 0 (default 1).
         */
        function stream($filename, $options = []);
        /**
         * Returns the PDF as a string.
         *
         * @param array $options Associative array: 'compress' => 1 or 0 (default 1).
         * @return string
         */
        function output($options = []);
    }
    /**
     * Create canvas instances
     *
     * The canvas factory creates canvas instances based on the
     * availability of rendering backends and config options.
     *
     * @package dompdf
     */
    class CanvasFactory
    {
        /**
         * @param Dompdf $dompdf
         * @param string|array $paper
         * @param string $orientation
         * @param string $class
         *
         * @return Canvas
         */
        static function get_instance(\Dompdf\Dompdf $dompdf, $paper = null, $orientation = null, $class = null)
        {
        }
    }
    /**
     * @package dompdf
     * @link    http://dompdf.github.com/
     * @author  Benj Carson <benjcarson@digitaljunkies.ca>
     * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License
     */
    /**
     * The main Frame class
     *
     * This class represents a single HTML element.  This class stores
     * positioning information as well as containing block location and
     * dimensions. Style information for the element is stored in a {@link
     * Style} object. Tree structure is maintained via the parent & children
     * links.
     *
     * @package dompdf
     */
    class Frame
    {
        const WS_TEXT = 1;
        const WS_SPACE = 2;
        /**
         * The DOMElement or DOMText object this frame represents
         *
         * @var \DOMElement|\DOMText
         */
        protected $_node;
        /**
         * Unique identifier for this frame.  Used to reference this frame
         * via the node.
         *
         * @var int
         */
        protected $_id;
        /**
         * Unique id counter
         *
         * @var int
         */
        public static $ID_COUNTER = 0;
        /*protected*/
        /**
         * This frame's calculated style
         *
         * @var Style
         */
        protected $_style;
        /**
         * This frame's original style.  Needed for cases where frames are
         * split across pages.
         *
         * @var Style
         */
        protected $_original_style;
        /**
         * This frame's parent in the document tree.
         *
         * @var Frame
         */
        protected $_parent;
        /**
         * This frame's children
         *
         * @var Frame[]
         */
        protected $_frame_list;
        /**
         * This frame's first child.  All children are handled as a
         * doubly-linked list.
         *
         * @var Frame
         */
        protected $_first_child;
        /**
         * This frame's last child.
         *
         * @var Frame
         */
        protected $_last_child;
        /**
         * This frame's previous sibling in the document tree.
         *
         * @var Frame
         */
        protected $_prev_sibling;
        /**
         * This frame's next sibling in the document tree.
         *
         * @var Frame
         */
        protected $_next_sibling;
        /**
         * This frame's containing block (used in layout): array(x, y, w, h)
         *
         * @var float[]
         */
        protected $_containing_block;
        /**
         * Position on the page of the top-left corner of the margin box of
         * this frame: array(x,y)
         *
         * @var float[]
         */
        protected $_position;
        /**
         * Absolute opacity of this frame
         *
         * @var float
         */
        protected $_opacity;
        /**
         * This frame's decorator
         *
         * @var \Dompdf\FrameDecorator\AbstractFrameDecorator
         */
        protected $_decorator;
        /**
         * This frame's containing line box
         *
         * @var LineBox|null
         */
        protected $_containing_line;
        /**
         * @var array
         */
        protected $_is_cache = [];
        /**
         * Tells whether the frame was already pushed to the next page
         *
         * @var bool
         */
        public $_already_pushed = false;
        /**
         * @var bool
         */
        public $_float_next_line = false;
        /**
         * Whether the frame is a split-off frame
         *
         * @var bool
         */
        public $_splitted;
        /**
         * @var int
         */
        public static $_ws_state = self::WS_SPACE;
        /**
         * Class constructor
         *
         * @param \DOMNode $node the DOMNode this frame represents
         */
        public function __construct(\DOMNode $node)
        {
        }
        /**
         * WIP : preprocessing to remove all the unused whitespace
         */
        protected function ws_trim()
        {
        }
        /**
         * @return bool
         */
        protected function ws_keep()
        {
        }
        /**
         * @return bool
         */
        protected function ws_is_text()
        {
        }
        /**
         * "Destructor": forcibly free all references held by this frame
         *
         * @param bool $recursive if true, call dispose on all children
         */
        public function dispose($recursive = false)
        {
        }
        /**
         * Re-initialize the frame
         */
        public function reset()
        {
        }
        /**
         * @return \DOMElement|\DOMText
         */
        public function get_node()
        {
        }
        /**
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * @return Style
         */
        public function get_style()
        {
        }
        /**
         * @return Style
         */
        public function get_original_style()
        {
        }
        /**
         * @return Frame
         */
        public function get_parent()
        {
        }
        /**
         * @return \Dompdf\FrameDecorator\AbstractFrameDecorator
         */
        public function get_decorator()
        {
        }
        /**
         * @return Frame
         */
        public function get_first_child()
        {
        }
        /**
         * @return Frame
         */
        public function get_last_child()
        {
        }
        /**
         * @return Frame
         */
        public function get_prev_sibling()
        {
        }
        /**
         * @return Frame
         */
        public function get_next_sibling()
        {
        }
        /**
         * @return FrameList|Frame[]
         */
        public function get_children()
        {
        }
        // Layout property accessors
        /**
         * Containing block dimensions
         *
         * @param string|null $i The key of the wanted containing block's dimension (x, y, w, h)
         *
         * @return float[]|float
         */
        public function get_containing_block($i = null)
        {
        }
        /**
         * Block position
         *
         * @param string|null $i The key of the wanted position value (x, y)
         *
         * @return float[]|float
         */
        public function get_position($i = null)
        {
        }
        //........................................................................
        /**
         * Return the width of the margin box of the frame, in pt.  Meaningless
         * unless the width has been calculated properly.
         *
         * @return float
         */
        public function get_margin_width() : float
        {
        }
        /**
         * Return the height of the margin box of the frame, in pt.  Meaningless
         * unless the height has been calculated properly.
         *
         * @return float
         */
        public function get_margin_height() : float
        {
        }
        /**
         * Return the content box (x,y,w,h) of the frame.
         *
         * Width and height might be reported as 0 if they have not been resolved
         * yet.
         *
         * @return float[]
         */
        public function get_content_box() : array
        {
        }
        /**
         * Return the padding box (x,y,w,h) of the frame.
         *
         * Width and height might be reported as 0 if they have not been resolved
         * yet.
         *
         * @return float[]
         */
        public function get_padding_box() : array
        {
        }
        /**
         * Return the border box of the frame.
         *
         * Width and height might be reported as 0 if they have not been resolved
         * yet.
         *
         * @return float[]
         */
        public function get_border_box() : array
        {
        }
        /**
         * @param null $opacity
         *
         * @return float
         */
        public function get_opacity($opacity = null)
        {
        }
        /**
         * @return LineBox|null
         */
        public function &get_containing_line()
        {
        }
        //........................................................................
        // Set methods
        /**
         * @param int $id
         */
        public function set_id($id)
        {
        }
        /**
         * @param Style $style
         */
        public function set_style(\Dompdf\Css\Style $style)
        {
        }
        /**
         * @param \Dompdf\FrameDecorator\AbstractFrameDecorator $decorator
         */
        public function set_decorator(\Dompdf\FrameDecorator\AbstractFrameDecorator $decorator)
        {
        }
        /**
         * @param float|float[]|null $x
         * @param float|null $y
         * @param float|null $w
         * @param float|null $h
         */
        public function set_containing_block($x = null, $y = null, $w = null, $h = null)
        {
        }
        /**
         * @param float|float[]|null $x
         * @param float|null $y
         */
        public function set_position($x = null, $y = null)
        {
        }
        /**
         * @param $opacity
         */
        public function set_opacity($opacity)
        {
        }
        /**
         * @param LineBox $line
         */
        public function set_containing_line(\Dompdf\LineBox $line)
        {
        }
        /**
         * Indicates if the margin height is auto sized
         *
         * @return bool
         */
        public function is_auto_height()
        {
        }
        /**
         * Indicates if the margin width is auto sized
         *
         * @return bool
         */
        public function is_auto_width()
        {
        }
        /**
         * Tells if the frame is a text node
         *
         * @return bool
         */
        public function is_text_node()
        {
        }
        /**
         * @return bool
         */
        public function is_positionned()
        {
        }
        /**
         * @return bool
         */
        public function is_absolute()
        {
        }
        /**
         * Whether the frame is a block container.
         *
         * @return bool
         */
        public function is_block()
        {
        }
        /**
         * Whether the frame has a block-level display type.
         *
         * @return bool
         */
        public function is_block_level() : bool
        {
        }
        /**
         * Whether the frame has an inline-level display type.
         *
         * @return bool
         */
        public function is_inline_level() : bool
        {
        }
        /**
         * @deprecated
         * @return bool
         */
        public function is_inline_block()
        {
        }
        /**
         * @return bool
         */
        public function is_in_flow()
        {
        }
        /**
         * @return bool
         */
        public function is_pre()
        {
        }
        /**
         * @return bool
         */
        public function is_table()
        {
        }
        /**
         * Inserts a new child at the beginning of the Frame
         *
         * @param Frame $child       The new Frame to insert
         * @param bool  $update_node Whether or not to update the DOM
         */
        public function prepend_child(\Dompdf\Frame $child, $update_node = true)
        {
        }
        /**
         * Inserts a new child at the end of the Frame
         *
         * @param Frame $child       The new Frame to insert
         * @param bool  $update_node Whether or not to update the DOM
         */
        public function append_child(\Dompdf\Frame $child, $update_node = true)
        {
        }
        /**
         * Inserts a new child immediately before the specified frame
         *
         * @param Frame $new_child   The new Frame to insert
         * @param Frame $ref         The Frame after the new Frame
         * @param bool  $update_node Whether or not to update the DOM
         *
         * @throws Exception
         */
        public function insert_child_before(\Dompdf\Frame $new_child, \Dompdf\Frame $ref, $update_node = true)
        {
        }
        /**
         * Inserts a new child immediately after the specified frame
         *
         * @param Frame $new_child   The new Frame to insert
         * @param Frame $ref         The Frame before the new Frame
         * @param bool  $update_node Whether or not to update the DOM
         *
         * @throws Exception
         */
        public function insert_child_after(\Dompdf\Frame $new_child, \Dompdf\Frame $ref, $update_node = true)
        {
        }
        /**
         * Remove a child frame
         *
         * @param Frame $child
         * @param bool  $update_node Whether or not to remove the DOM node
         *
         * @throws Exception
         * @return Frame The removed child frame
         */
        public function remove_child(\Dompdf\Frame $child, $update_node = true)
        {
        }
        //........................................................................
        // Debugging function:
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
}
namespace Dompdf\FrameDecorator {
    /**
     * @package dompdf
     * @link    http://dompdf.github.com/
     * @author  Benj Carson <benjcarson@digitaljunkies.ca>
     * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License
     */
    /**
     * Base AbstractFrameDecorator class
     *
     * @package dompdf
     */
    abstract class AbstractFrameDecorator extends \Dompdf\Frame
    {
        const DEFAULT_COUNTER = "-dompdf-default-counter";
        /**
         * array([id] => counter_value) (for generated content)
         *
         * @var array
         */
        public $_counters = [];
        /**
         * The root node of the DOM tree
         *
         * @var Frame
         */
        protected $_root;
        /**
         * The decorated frame
         *
         * @var Frame
         */
        protected $_frame;
        /**
         * AbstractPositioner object used to position this frame (Strategy pattern)
         *
         * @var AbstractPositioner
         */
        protected $_positioner;
        /**
         * Reflower object used to calculate frame dimensions (Strategy pattern)
         *
         * @var AbstractFrameReflower
         */
        protected $_reflower;
        /**
         * Reference to the current dompdf instance
         *
         * @var Dompdf
         */
        protected $_dompdf;
        /**
         * Whether generated content and counters have been set.
         *
         * @var bool
         */
        public $content_set = false;
        /**
         * Whether the frame has been split
         *
         * @var bool
         */
        public $is_split = false;
        /**
         * Class constructor
         *
         * @param Frame $frame   The decoration target
         * @param Dompdf $dompdf The Dompdf object
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * "Destructor": forcibly free all references held by this object
         *
         * @param bool $recursive if true, call dispose on all children
         */
        function dispose($recursive = false)
        {
        }
        /**
         * Return a copy of this frame with $node as its node
         *
         * @param DOMNode $node
         *
         * @return AbstractFrameDecorator
         */
        function copy(\DOMNode $node)
        {
        }
        /**
         * Create a deep copy: copy this node and all children
         *
         * @return AbstractFrameDecorator
         */
        function deep_copy()
        {
        }
        /**
         * Create an anonymous child frame, inheriting styles from this frame.
         *
         * @param string $node_name
         * @param string $display
         *
         * @return AbstractFrameDecorator
         */
        public function create_anonymous_child(string $node_name, string $display) : \Dompdf\FrameDecorator\AbstractFrameDecorator
        {
        }
        function reset()
        {
        }
        /**
         * If this represents a generated node then child nodes represent generated
         * content. Remove the children since the content will be generated next
         * time this frame is reflowed.
         */
        protected function reset_generated_content() : void
        {
        }
        /**
         * Decrement any counters that were incremented on the current node, unless
         * that node is the body.
         */
        protected function revert_counter_increment() : void
        {
        }
        // Getters -----------
        function get_id()
        {
        }
        /**
         * @return Frame
         */
        function get_frame()
        {
        }
        function get_node()
        {
        }
        function get_style()
        {
        }
        function get_original_style()
        {
        }
        function get_containing_block($i = null)
        {
        }
        function get_position($i = null)
        {
        }
        /**
         * @return Dompdf
         */
        function get_dompdf()
        {
        }
        public function get_margin_width() : float
        {
        }
        public function get_margin_height() : float
        {
        }
        public function get_content_box() : array
        {
        }
        public function get_padding_box() : array
        {
        }
        public function get_border_box() : array
        {
        }
        function set_id($id)
        {
        }
        function set_style(\Dompdf\Css\Style $style)
        {
        }
        function set_containing_block($x = null, $y = null, $w = null, $h = null)
        {
        }
        function set_position($x = null, $y = null)
        {
        }
        function is_auto_height()
        {
        }
        function is_auto_width()
        {
        }
        function __toString()
        {
        }
        function prepend_child(\Dompdf\Frame $child, $update_node = true)
        {
        }
        function append_child(\Dompdf\Frame $child, $update_node = true)
        {
        }
        function insert_child_before(\Dompdf\Frame $new_child, \Dompdf\Frame $ref, $update_node = true)
        {
        }
        function insert_child_after(\Dompdf\Frame $new_child, \Dompdf\Frame $ref, $update_node = true)
        {
        }
        function remove_child(\Dompdf\Frame $child, $update_node = true)
        {
        }
        /**
         * @param bool $use_cache
         * @return AbstractFrameDecorator
         */
        function get_parent($use_cache = true)
        {
        }
        /**
         * @return AbstractFrameDecorator
         */
        function get_first_child()
        {
        }
        /**
         * @return AbstractFrameDecorator
         */
        function get_last_child()
        {
        }
        /**
         * @return AbstractFrameDecorator
         */
        function get_prev_sibling()
        {
        }
        /**
         * @return AbstractFrameDecorator
         */
        function get_next_sibling()
        {
        }
        /**
         * @return FrameTreeList
         */
        function get_subtree()
        {
        }
        function set_positioner(\Dompdf\Positioner\AbstractPositioner $posn)
        {
        }
        function set_reflower(\Dompdf\FrameReflower\AbstractFrameReflower $reflower)
        {
        }
        /**
         * @return AbstractPositioner
         */
        function get_positioner()
        {
        }
        /**
         * @return AbstractFrameReflower
         */
        function get_reflower()
        {
        }
        /**
         * @param Frame $root
         */
        function set_root(\Dompdf\Frame $root)
        {
        }
        /**
         * @return Page
         */
        function get_root()
        {
        }
        /**
         * @return Block
         */
        function find_block_parent()
        {
        }
        /**
         * @return AbstractFrameDecorator
         */
        function find_positionned_parent()
        {
        }
        /**
         * Split this frame at $child.
         * The current frame is cloned and $child and all children following
         * $child are added to the clone.  The clone is then passed to the
         * current frame's parent->split() method.
         *
         * @param Frame|null $child
         * @param bool $page_break
         * @param bool $forced Whether the page break is forced.
         *
         * @throws Exception
         */
        public function split(?\Dompdf\Frame $child = null, bool $page_break = false, bool $forced = false) : void
        {
        }
        /**
         * @param array $counters
         */
        public function reset_counters(array $counters) : void
        {
        }
        /**
         * @param string $id
         * @param int    $value
         */
        public function reset_counter(string $id = self::DEFAULT_COUNTER, int $value = 0) : void
        {
        }
        /**
         * @param array $counters
         */
        public function decrement_counters(array $counters) : void
        {
        }
        /**
         * @param array $counters
         */
        public function increment_counters(array $counters) : void
        {
        }
        /**
         * @param string $id
         * @param int    $increment
         */
        public function increment_counter(string $id = self::DEFAULT_COUNTER, int $increment = 1) : void
        {
        }
        /**
         * @param string $id
         * @return AbstractFrameDecorator|null
         */
        function lookup_counter_frame($id = self::DEFAULT_COUNTER)
        {
        }
        /**
         * @param string $id
         * @param string $type
         * @return bool|string
         *
         * TODO: What version is the best : this one or the one in ListBullet ?
         */
        function counter_value(string $id = self::DEFAULT_COUNTER, string $type = "decimal")
        {
        }
        final function position()
        {
        }
        /**
         * @param float $offset_x
         * @param float $offset_y
         * @param bool $ignore_self
         */
        final function move($offset_x, $offset_y, $ignore_self = false)
        {
        }
        /**
         * @param Block|null $block
         */
        final function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
        /**
         * @return array
         */
        public final function get_min_max_width() : array
        {
        }
    }
    /**
     * Decorates frames for list bullet rendering
     *
     * @package dompdf
     */
    class ListBullet extends \Dompdf\FrameDecorator\AbstractFrameDecorator
    {
        /**
         * Bullet diameter as fraction of font size.
         */
        public const BULLET_SIZE = 0.35;
        /**
         * Bullet offset from font baseline as fraction of font size.
         */
        public const BULLET_OFFSET = 0.1;
        /**
         * Thickness of bullet outline as fraction of font size.
         * See also `DECO_THICKNESS`. Screen: 0.08, print: better less, e.g. 0.04.
         */
        public const BULLET_THICKNESS = 0.04;
        /**
         * Indentation from the start of the line as fraction of font size.
         */
        public const MARKER_INDENT = 0.52;
        /**
         * @deprecated
         */
        const BULLET_PADDING = 1;
        /**
         * @deprecated
         */
        const BULLET_DESCENT = 0.3;
        /**
         * @deprecated
         */
        static $BULLET_TYPES = ["disc", "circle", "square"];
        /**
         * ListBullet constructor.
         * @param Frame $frame
         * @param Dompdf $dompdf
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * Get the width of the bullet symbol.
         *
         * @return float
         */
        public function get_width() : float
        {
        }
        /**
         * Get the height of the bullet symbol.
         *
         * @return float
         */
        public function get_height() : float
        {
        }
        /**
         * Get the width of the bullet, including indentation.
         */
        public function get_margin_width() : float
        {
        }
        /**
         * Get the line height for the bullet.
         *
         * This increases the height of the corresponding line box when necessary.
         */
        public function get_margin_height() : float
        {
        }
    }
    /**
     * Decorates frames for list bullets with custom images
     *
     * @package dompdf
     */
    class ListBulletImage extends \Dompdf\FrameDecorator\ListBullet
    {
        /**
         * The underlying image frame
         *
         * @var Image
         */
        protected $_img;
        /**
         * The image's width in pixels
         *
         * @var float
         */
        protected $_width;
        /**
         * The image's height in pixels
         *
         * @var float
         */
        protected $_height;
        /**
         * ListBulletImage constructor.
         * @param Frame $frame
         * @param Dompdf $dompdf
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        public function get_width() : float
        {
        }
        public function get_height() : float
        {
        }
        public function get_margin_width() : float
        {
        }
        public function get_margin_height() : float
        {
        }
        /**
         * Return image url
         *
         * @return string
         */
        function get_image_url()
        {
        }
    }
    /**
     * Table row group decorator
     *
     * Overrides split() method for tbody, thead & tfoot elements
     *
     * @package dompdf
     */
    class TableRowGroup extends \Dompdf\FrameDecorator\AbstractFrameDecorator
    {
        /**
         * Class constructor
         *
         * @param Frame $frame   Frame to decorate
         * @param Dompdf $dompdf Current dompdf instance
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * Split the row group at the given child and remove all subsequent child
         * rows and all subsequent row groups from the cellmap.
         */
        public function split(?\Dompdf\Frame $child = null, bool $page_break = false, bool $forced = false) : void
        {
        }
    }
    /**
     * Decorates Frames for table row layout
     *
     * @package dompdf
     */
    class TableRow extends \Dompdf\FrameDecorator\AbstractFrameDecorator
    {
        /**
         * TableRow constructor.
         * @param Frame $frame
         * @param Dompdf $dompdf
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        //........................................................................
        /**
         * Remove all non table-cell frames from this row and move them after
         * the table.
         *
         * @deprecated
         */
        function normalise()
        {
        }
    }
    /**
     * Decorates Frames for table layout
     *
     * @package dompdf
     */
    class Table extends \Dompdf\FrameDecorator\AbstractFrameDecorator
    {
        public static $VALID_CHILDREN = \Dompdf\Css\Style::TABLE_INTERNAL_TYPES;
        public static $ROW_GROUPS = ["table-row-group", "table-header-group", "table-footer-group"];
        /**
         * The Cellmap object for this table.  The cellmap maps table cells
         * to rows and columns, and aids in calculating column widths.
         *
         * @var Cellmap
         */
        protected $_cellmap;
        /**
         * The minimum width of the table, in pt
         *
         * @var float
         */
        protected $_min_width;
        /**
         * The maximum width of the table, in pt
         *
         * @var float
         */
        protected $_max_width;
        /**
         * Table header rows.  Each table header is duplicated when a table
         * spans pages.
         *
         * @var TableRowGroup[]
         */
        protected $_headers;
        /**
         * Table footer rows.  Each table footer is duplicated when a table
         * spans pages.
         *
         * @var TableRowGroup[]
         */
        protected $_footers;
        /**
         * Class constructor
         *
         * @param Frame $frame the frame to decorate
         * @param Dompdf $dompdf
         */
        public function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        public function reset()
        {
        }
        //........................................................................
        /**
         * Split the table at $row.  $row and all subsequent rows will be
         * added to the clone.  This method is overridden in order to remove
         * frames from the cellmap properly.
         */
        public function split(?\Dompdf\Frame $child = null, bool $page_break = false, bool $forced = false) : void
        {
        }
        public function copy(\DOMNode $node)
        {
        }
        /**
         * Static function to locate the parent table of a frame
         *
         * @param Frame $frame
         *
         * @return Table the table that is an ancestor of $frame
         */
        public static function find_parent_table(\Dompdf\Frame $frame)
        {
        }
        /**
         * Return this table's Cellmap
         *
         * @return Cellmap
         */
        public function get_cellmap()
        {
        }
        /**
         * Return the minimum width of this table
         *
         * @return float
         */
        public function get_min_width()
        {
        }
        /**
         * Return the maximum width of this table
         *
         * @return float
         */
        public function get_max_width()
        {
        }
        /**
         * Set the minimum width of the table
         *
         * @param float $width the new minimum width
         */
        public function set_min_width($width)
        {
        }
        /**
         * Set the maximum width of the table
         *
         * @param float $width the new maximum width
         */
        public function set_max_width($width)
        {
        }
        /**
         * Restructure tree so that the table has the correct structure. Misplaced
         * children are appropriately wrapped in anonymous row groups, rows, and
         * cells.
         *
         * https://www.w3.org/TR/CSS21/tables.html#anonymous-boxes
         */
        public function normalize() : void
        {
        }
        //........................................................................
        /**
         * @deprecated
         */
        public function normalise()
        {
        }
        /**
         * Moves the specified frame and it's corresponding node outside of
         * the table.
         *
         * @deprecated
         * @param Frame $frame the frame to move
         */
        public function move_after(\Dompdf\Frame $frame)
        {
        }
    }
    /**
     * Decorates Frame objects for text layout
     *
     * @access  private
     * @package dompdf
     */
    class Text extends \Dompdf\FrameDecorator\AbstractFrameDecorator
    {
        /**
         * @var float|null
         */
        protected $_text_spacing;
        /**
         * Text constructor.
         * @param Frame $frame
         * @param Dompdf $dompdf
         * @throws Exception
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        function reset()
        {
        }
        // Accessor methods
        /**
         * @return float|null
         */
        function get_text_spacing()
        {
        }
        /**
         * @return string
         */
        function get_text()
        {
        }
        //........................................................................
        /**
         * Vertical padding, border, and margin do not apply when determining the
         * height for inline frames.
         *
         * http://www.w3.org/TR/CSS21/visudet.html#inline-non-replaced
         *
         * The vertical padding, border and margin of an inline, non-replaced box
         * start at the top and bottom of the content area, not the
         * 'line-height'. But only the 'line-height' is used to calculate the
         * height of the line box.
         *
         * @return float
         */
        public function get_margin_height() : float
        {
        }
        public function get_padding_box() : array
        {
        }
        /**
         * @param float $spacing
         */
        function set_text_spacing($spacing)
        {
        }
        /**
         * Recalculate the text width
         *
         * @return float
         */
        function recalculate_width()
        {
        }
        // Text manipulation methods
        /**
         * Split the text in this frame at the offset specified.  The remaining
         * text is added as a sibling frame following this one and is returned.
         *
         * @param int $offset
         * @return Frame|null
         */
        function split_text($offset)
        {
        }
        /**
         * @param int $offset
         * @param int $count
         */
        function delete_text($offset, $count)
        {
        }
        /**
         * @param string $text
         */
        function set_text($text)
        {
        }
    }
    /**
     * Decorates frames for inline layout
     *
     * @access  private
     * @package dompdf
     */
    class Inline extends \Dompdf\FrameDecorator\AbstractFrameDecorator
    {
        /**
         * Inline constructor.
         * @param Frame $frame
         * @param Dompdf $dompdf
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * Vertical padding, border, and margin do not apply when determining the
         * height for inline frames.
         *
         * http://www.w3.org/TR/CSS21/visudet.html#inline-non-replaced
         *
         * The vertical padding, border and margin of an inline, non-replaced box
         * start at the top and bottom of the content area, not the
         * 'line-height'. But only the 'line-height' is used to calculate the
         * height of the line box.
         *
         * @return float
         */
        public function get_margin_height() : float
        {
        }
        public function split(?\Dompdf\Frame $child = null, bool $page_break = false, bool $forced = false) : void
        {
        }
    }
    /**
     * Decorates frames for image layout and rendering
     *
     * @package dompdf
     */
    class Image extends \Dompdf\FrameDecorator\AbstractFrameDecorator
    {
        /**
         * The path to the image file (note that remote images are
         * downloaded locally to Options:tempDir).
         *
         * @var string
         */
        protected $_image_url;
        /**
         * The image's file error message
         *
         * @var string
         */
        protected $_image_msg;
        /**
         * Class constructor
         *
         * @param Frame $frame the frame to decorate
         * @param DOMPDF $dompdf the document's dompdf object (required to resolve relative & remote urls)
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * Get the intrinsic pixel dimensions of the image.
         *
         * @return array Width and height as `float|int`.
         */
        public function get_intrinsic_dimensions() : array
        {
        }
        /**
         * Resample the given pixel length according to dpi.
         *
         * @param float|int $length
         * @return float
         */
        public function resample($length) : float
        {
        }
        /**
         * Return the image's url
         *
         * @return string The url of this image
         */
        function get_image_url()
        {
        }
        /**
         * Return the image's error message
         *
         * @return string The image's error message
         */
        function get_image_msg()
        {
        }
    }
    /**
     * Dummy decorator
     *
     * @package dompdf
     */
    class NullFrameDecorator extends \Dompdf\FrameDecorator\AbstractFrameDecorator
    {
        /**
         * NullFrameDecorator constructor.
         * @param Frame $frame
         * @param Dompdf $dompdf
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
    }
    /**
     * Decorates frames for block layout
     *
     * @access  private
     * @package dompdf
     */
    class Block extends \Dompdf\FrameDecorator\AbstractFrameDecorator
    {
        /**
         * Current line index
         *
         * @var int
         */
        protected $_cl;
        /**
         * The block's line boxes
         *
         * @var LineBox[]
         */
        protected $_line_boxes;
        /**
         * List of markers that have not found their line box to vertically align
         * with yet. Markers are collected by nested block containers until an
         * inline line box is found at the start of the block.
         *
         * @var ListBullet[]
         */
        protected $dangling_markers;
        /**
         * Block constructor.
         * @param Frame $frame
         * @param Dompdf $dompdf
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        function reset()
        {
        }
        /**
         * @return LineBox
         */
        function get_current_line_box()
        {
        }
        /**
         * @return int
         */
        function get_current_line_number()
        {
        }
        /**
         * @return LineBox[]
         */
        function get_line_boxes()
        {
        }
        /**
         * @param int $line_number
         * @return int
         */
        function set_current_line_number($line_number)
        {
        }
        /**
         * @param int $i
         */
        function clear_line($i)
        {
        }
        /**
         * @param Frame $frame
         * @return LineBox|null
         */
        public function add_frame_to_line(\Dompdf\Frame $frame)
        {
        }
        /**
         * Remove the given frame and all following frames and lines from the block.
         *
         * @param Frame $frame
         */
        public function remove_frames_from_line(\Dompdf\Frame $frame) : void
        {
        }
        /**
         * @param float $w
         */
        function increase_line_width($w)
        {
        }
        /**
         * @param float $val
         * @param Frame $frame
         */
        function maximize_line_height($val, \Dompdf\Frame $frame)
        {
        }
        /**
         * @param bool $br
         */
        function add_line(bool $br = false)
        {
        }
        /**
         * @param ListBullet $marker
         */
        public function add_dangling_marker(\Dompdf\FrameDecorator\ListBullet $marker) : void
        {
        }
        /**
         * Inherit any dangling markers from the parent block.
         *
         * @param Block $block
         */
        public function inherit_dangling_markers(self $block) : void
        {
        }
    }
    /**
     * Decorates table cells for layout
     *
     * @package dompdf
     */
    class TableCell extends \Dompdf\FrameDecorator\Block
    {
        protected $_resolved_borders;
        protected $_content_height;
        //........................................................................
        /**
         * TableCell constructor.
         * @param Frame $frame
         * @param Dompdf $dompdf
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        //........................................................................
        function reset()
        {
        }
        /**
         * @return int
         */
        function get_content_height()
        {
        }
        /**
         * @param $height
         */
        function set_content_height($height)
        {
        }
        /**
         * @param $height
         */
        function set_cell_height($height)
        {
        }
        /**
         * @param $side
         * @param $border_spec
         */
        function set_resolved_border($side, $border_spec)
        {
        }
        /**
         * @param $side
         * @return mixed
         */
        function get_resolved_border($side)
        {
        }
        /**
         * @return array
         */
        function get_resolved_borders()
        {
        }
    }
    /**
     * Decorates frames for page layout
     *
     * @access  private
     * @package dompdf
     */
    class Page extends \Dompdf\FrameDecorator\AbstractFrameDecorator
    {
        /**
         * The y value of the bottom edge of the page area.
         *
         * https://www.w3.org/TR/CSS21/page.html#page-margins
         *
         * @var float
         */
        protected $bottom_page_edge;
        /**
         * Flag indicating page is full.
         *
         * @var bool
         */
        protected $_page_full;
        /**
         * Number of tables currently being reflowed
         *
         * @var int
         */
        protected $_in_table;
        /**
         * The pdf renderer
         *
         * @var Renderer
         */
        protected $_renderer;
        /**
         * This page's floating frames
         *
         * @var array
         */
        protected $_floating_frames = [];
        //........................................................................
        /**
         * Class constructor
         *
         * @param Frame $frame the frame to decorate
         * @param Dompdf $dompdf
         */
        function __construct(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * Set the renderer used for this pdf
         *
         * @param Renderer $renderer the renderer to use
         */
        function set_renderer($renderer)
        {
        }
        /**
         * Return the renderer used for this pdf
         *
         * @return Renderer
         */
        function get_renderer()
        {
        }
        /**
         * Calculate the bottom edge of the page area after margins have been
         * applied for the current page.
         */
        public function calculate_bottom_page_edge() : void
        {
        }
        /**
         * Returns true if the page is full and is no longer accepting frames.
         *
         * @return bool
         */
        function is_full()
        {
        }
        /**
         * Start a new page by resetting the full flag.
         */
        function next_page()
        {
        }
        /**
         * Indicate to the page that a table is currently being reflowed.
         */
        function table_reflow_start()
        {
        }
        /**
         * Indicate to the page that table reflow is finished.
         */
        function table_reflow_end()
        {
        }
        /**
         * Return whether we are currently in a nested table or not
         *
         * @return bool
         */
        function in_nested_table()
        {
        }
        /**
         * Check if a forced page break is required before $frame.  This uses the
         * frame's page_break_before property as well as the preceding frame's
         * page_break_after property.
         *
         * @link http://www.w3.org/TR/CSS21/page.html#forced
         *
         * @param AbstractFrameDecorator $frame the frame to check
         *
         * @return bool true if a page break occurred
         */
        function check_forced_page_break(\Dompdf\Frame $frame)
        {
        }
        /**
         * Check for a gap between the top content edge of a frame and its child
         * content.
         *
         * Additionally, the top margin, border, and padding of the frame must fit
         * on the current page.
         *
         * @param float $childPos The top margin or line-box edge of the child content.
         * @param Frame $frame The parent frame to check.
         * @return bool
         */
        protected function hasGap(float $childPos, \Dompdf\Frame $frame) : bool
        {
        }
        /**
         * Determine if a page break is allowed before $frame
         * http://www.w3.org/TR/CSS21/page.html#allowed-page-breaks
         *
         * In the normal flow, page breaks can occur at the following places:
         *
         *    1. In the vertical margin between block boxes. When an
         *    unforced page break occurs here, the used values of the
         *    relevant 'margin-top' and 'margin-bottom' properties are set
         *    to '0'. When a forced page break occurs here, the used value
         *    of the relevant 'margin-bottom' property is set to '0'; the
         *    relevant 'margin-top' used value may either be set to '0' or
         *    retained.
         *    2. Between line boxes inside a block container box.
         *    3. Between the content edge of a block container box and the
         *    outer edges of its child content (margin edges of block-level
         *    children or line box edges for inline-level children) if there
         *    is a (non-zero) gap between them.
         *
         * These breaks are subject to the following rules:
         *
         *   * Rule A: Breaking at (1) is allowed only if the
         *     'page-break-after' and 'page-break-before' properties of all
         *     the elements generating boxes that meet at this margin allow
         *     it, which is when at least one of them has the value
         *     'always', 'left', or 'right', or when all of them are 'auto'.
         *
         *   * Rule B: However, if all of them are 'auto' and a common
         *     ancestor of all the elements has a 'page-break-inside' value
         *     of 'avoid', then breaking here is not allowed.
         *
         *   * Rule C: Breaking at (2) is allowed only if the number of line
         *     boxes between the break and the start of the enclosing block
         *     box is the value of 'orphans' or more, and the number of line
         *     boxes between the break and the end of the box is the value
         *     of 'widows' or more.
         *
         *   * Rule D: In addition, breaking at (2) or (3) is allowed only
         *     if the 'page-break-inside' property of the element and all
         *     its ancestors is 'auto'.
         *
         * If the above does not provide enough break points to keep content
         * from overflowing the page boxes, then rules A, B and D are
         * dropped in order to find additional breakpoints.
         *
         * If that still does not lead to sufficient break points, rule C is
         * dropped as well, to find still more break points.
         *
         * We also allow breaks between table rows.
         *
         * @param AbstractFrameDecorator $frame the frame to check
         *
         * @return bool true if a break is allowed, false otherwise
         */
        protected function _page_break_allowed(\Dompdf\Frame $frame)
        {
        }
        /**
         * Check if $frame will fit on the page.  If the frame does not fit,
         * the frame tree is modified so that a page break occurs in the
         * correct location.
         *
         * @param AbstractFrameDecorator $frame the frame to check
         *
         * @return bool
         */
        function check_page_break(\Dompdf\Frame $frame)
        {
        }
        //........................................................................
        public function split(?\Dompdf\Frame $child = null, bool $page_break = false, bool $forced = false) : void
        {
        }
        /**
         * Add a floating frame
         *
         * @param Frame $frame
         *
         * @return void
         */
        function add_floating_frame(\Dompdf\Frame $frame)
        {
        }
        /**
         * @return Frame[]
         */
        function get_floating_frames()
        {
        }
        /**
         * @param $key
         */
        public function remove_floating_frame($key)
        {
        }
        /**
         * @param Frame $child
         * @return int|mixed
         */
        public function get_lowest_float_offset(\Dompdf\Frame $child)
        {
        }
    }
}
namespace Dompdf\Adapter {
    /**
     * Image rendering interface
     *
     * Renders to an image format supported by GD (jpeg, gif, png, xpm).
     * Not super-useful day-to-day but handy nonetheless
     *
     * @package dompdf
     */
    class GD implements \Dompdf\Canvas
    {
        /**
         * @var Dompdf
         */
        protected $_dompdf;
        /**
         * Resource handle for the image
         *
         * @var \GdImage|resource
         */
        protected $_img;
        /**
         * Resource handle for the image
         *
         * @var \GdImage[]|resource[]
         */
        protected $_imgs;
        /**
         * Apparent canvas width in pixels
         *
         * @var int
         */
        protected $_width;
        /**
         * Apparent canvas height in pixels
         *
         * @var int
         */
        protected $_height;
        /**
         * Actual image width in pixels
         *
         * @var int
         */
        protected $_actual_width;
        /**
         * Actual image height in pixels
         *
         * @var int
         */
        protected $_actual_height;
        /**
         * Current page number
         *
         * @var int
         */
        protected $_page_number;
        /**
         * Total number of pages
         *
         * @var int
         */
        protected $_page_count;
        /**
         * Image antialias factor
         *
         * @var float
         */
        protected $_aa_factor;
        /**
         * Allocated colors
         *
         * @var array
         */
        protected $_colors;
        /**
         * Background color
         *
         * @var int
         */
        protected $_bg_color;
        /**
         * Background color array
         *
         * @var int
         */
        protected $_bg_color_array;
        /**
         * Actual DPI
         *
         * @var int
         */
        protected $dpi;
        /**
         * Amount to scale font sizes
         *
         * Font sizes are 72 DPI, GD internally uses 96. Scale them proportionally.
         * 72 / 96 = 0.75.
         *
         * @var float
         */
        const FONT_SCALE = 0.75;
        /**
         * Class constructor
         *
         * @param mixed $size The size of image to create: array(x1,y1,x2,y2) or "letter", "legal", etc.
         * @param string $orientation The orientation of the document (either 'landscape' or 'portrait')
         * @param Dompdf $dompdf
         * @param float $aa_factor Anti-aliasing factor, 1 for no AA
         * @param array $bg_color Image background color: array(r,g,b,a), 0 <= r,g,b,a <= 1
         */
        public function __construct($size = 'letter', $orientation = "portrait", \Dompdf\Dompdf $dompdf = null, $aa_factor = 1.0, $bg_color = [1, 1, 1, 0])
        {
        }
        /**
         * @return Dompdf
         */
        public function get_dompdf()
        {
        }
        /**
         * Return the GD image resource
         *
         * @return \GdImage|resource
         */
        public function get_image()
        {
        }
        /**
         * Return the image's width in pixels
         *
         * @return int
         */
        public function get_width()
        {
        }
        /**
         * Return the image's height in pixels
         *
         * @return int
         */
        public function get_height()
        {
        }
        /**
         * Returns the current page number
         *
         * @return int
         */
        public function get_page_number()
        {
        }
        /**
         * Returns the total number of pages in the document
         *
         * @return int
         */
        public function get_page_count()
        {
        }
        /**
         * Sets the current page number
         *
         * @param int $num
         */
        public function set_page_number($num)
        {
        }
        /**
         * Sets the page count
         *
         * @param int $count
         */
        public function set_page_count($count)
        {
        }
        /**
         * Sets the opacity
         *
         * @param $opacity
         * @param $mode
         */
        public function set_opacity($opacity, $mode = "Normal")
        {
        }
        /**
         * Allocate a new color.  Allocate with GD as needed and store
         * previously allocated colors in $this->_colors.
         *
         * @param array $color The new current color
         * @return int           The allocated color
         */
        protected function _allocate_color($color)
        {
        }
        /**
         * Scales value up to the current canvas DPI from 72 DPI
         *
         * @param float $length
         * @return int
         */
        protected function _upscale($length)
        {
        }
        /**
         * Scales value down from the current canvas DPI to 72 DPI
         *
         * @param float $length
         * @return int
         */
        protected function _downscale($length)
        {
        }
        /**
         * Draws a line from x1,y1 to x2,y2
         *
         * See {@link Style::munge_color()} for the format of the color array.
         * See {@link Cpdf::setLineStyle()} for a description of the format of the
         * $style parameter (aka dash).
         *
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param array $color
         * @param float $width
         * @param array $style
         */
        public function line($x1, $y1, $x2, $y2, $color, $width, $style = null)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $r1
         * @param float $r2
         * @param float $astart
         * @param float $aend
         * @param array $color
         * @param float $width
         * @param array $style
         */
        public function arc($x1, $y1, $r1, $r2, $astart, $aend, $color, $width, $style = [])
        {
        }
        /**
         * Draws a rectangle at x1,y1 with width w and height h
         *
         * See {@link Style::munge_color()} for the format of the color array.
         * See {@link Cpdf::setLineStyle()} for a description of the $style
         * parameter (aka dash)
         *
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param array $color
         * @param float $width
         * @param array $style
         */
        public function rectangle($x1, $y1, $w, $h, $color, $width, $style = null)
        {
        }
        /**
         * Draws a filled rectangle at x1,y1 with width w and height h
         *
         * See {@link Style::munge_color()} for the format of the color array.
         *
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param array $color
         */
        public function filled_rectangle($x1, $y1, $w, $h, $color)
        {
        }
        /**
         * Starts a clipping rectangle at x1,y1 with width w and height h
         *
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         */
        public function clipping_rectangle($x1, $y1, $w, $h)
        {
        }
        public function clipping_roundrectangle($x1, $y1, $w, $h, $rTL, $rTR, $rBR, $rBL)
        {
        }
        /**
         * Ends the last clipping shape
         */
        public function clipping_end()
        {
        }
        /**
         *
         */
        public function save()
        {
        }
        /**
         *
         */
        public function restore()
        {
        }
        /**
         * @param $angle
         * @param $x
         * @param $y
         */
        public function rotate($angle, $x, $y)
        {
        }
        /**
         * @param $angle_x
         * @param $angle_y
         * @param $x
         * @param $y
         */
        public function skew($angle_x, $angle_y, $x, $y)
        {
        }
        /**
         * @param $s_x
         * @param $s_y
         * @param $x
         * @param $y
         */
        public function scale($s_x, $s_y, $x, $y)
        {
        }
        /**
         * @param $t_x
         * @param $t_y
         */
        public function translate($t_x, $t_y)
        {
        }
        /**
         * @param $a
         * @param $b
         * @param $c
         * @param $d
         * @param $e
         * @param $f
         */
        public function transform($a, $b, $c, $d, $e, $f)
        {
        }
        /**
         * Draws a polygon
         *
         * The polygon is formed by joining all the points stored in the $points
         * array.  $points has the following structure:
         * <code>
         * array(0 => x1,
         *       1 => y1,
         *       2 => x2,
         *       3 => y2,
         *       ...
         *       );
         * </code>
         *
         * See {@link Style::munge_color()} for the format of the color array.
         * See {@link Cpdf::setLineStyle()} for a description of the $style
         * parameter (aka dash)
         *
         * @param array $points
         * @param array $color
         * @param float $width
         * @param array $style
         * @param bool $fill Fills the polygon if true
         */
        public function polygon($points, $color, $width = null, $style = null, $fill = false)
        {
        }
        /**
         * Draws a circle at $x,$y with radius $r
         *
         * See {@link Style::munge_color()} for the format of the color array.
         * See {@link Cpdf::setLineStyle()} for a description of the $style
         * parameter (aka dash)
         *
         * @param float $x
         * @param float $y
         * @param float $r
         * @param array $color
         * @param float $width
         * @param array $style
         * @param bool $fill Fills the circle if true
         */
        public function circle($x, $y, $r, $color, $width = null, $style = null, $fill = false)
        {
        }
        /**
         * Add an image to the pdf.
         * The image is placed at the specified x and y coordinates with the
         * given width and height.
         *
         * @param string $img_url the path to the image
         * @param float $x x position
         * @param float $y y position
         * @param int $w width (in pixels)
         * @param int $h height (in pixels)
         * @param string $resolution
         * @return void
         *
         * @throws \Exception
         * @internal param string $img_type the type (e.g. extension) of the image
         */
        public function image($img_url, $x, $y, $w, $h, $resolution = "normal")
        {
        }
        /**
         * Writes text at the specified x and y coordinates
         * See {@link Style::munge_color()} for the format of the color array.
         *
         * @param float $x
         * @param float $y
         * @param string $text the text to write
         * @param string $font the font file to use
         * @param float $size the font size, in points
         * @param array $color
         * @param float $word_spacing word spacing adjustment
         * @param float $char_spacing
         * @param float $angle Text angle
         *
         * @return void
         */
        public function text($x, $y, $text, $font, $size, $color = [0, 0, 0], $word_spacing = 0.0, $char_spacing = 0.0, $angle = 0.0)
        {
        }
        public function javascript($code)
        {
        }
        /**
         * Add a named destination (similar to <a name="foo">...</a> in html)
         *
         * @param string $anchorname The name of the named destination
         */
        public function add_named_dest($anchorname)
        {
        }
        /**
         * Add a link to the pdf
         *
         * @param string $url The url to link to
         * @param float $x The x position of the link
         * @param float $y The y position of the link
         * @param float $width The width of the link
         * @param float $height The height of the link
         */
        public function add_link($url, $x, $y, $width, $height)
        {
        }
        /**
         * Add meta information to the PDF
         *
         * @param string $label label of the value (Creator, Producer, etc.)
         * @param string $value the text to set
         */
        public function add_info($label, $value)
        {
        }
        /**
         * @param string $view
         * @param array $options
         */
        public function set_default_view($view, $options = [])
        {
        }
        /**
         * Calculates text size, in points
         *
         * @param string $text the text to be sized
         * @param string $font the desired font
         * @param float $size the desired font size
         * @param float $word_spacing word spacing, if any
         * @param float $char_spacing char spacing, if any
         *
         * @return float
         */
        public function get_text_width($text, $font, $size, $word_spacing = 0.0, $char_spacing = 0.0)
        {
        }
        /**
         * @param string|null $font
         * @return string
         */
        public function get_ttf_file($font)
        {
        }
        /**
         * Calculates font height, in points
         *
         * @param string $font
         * @param float $size
         * @return int
         */
        public function get_font_height($font, $size)
        {
        }
        protected function get_font_height_actual($font, $size)
        {
        }
        /**
         * @param string $font
         * @param float $size
         * @return float
         */
        public function get_font_baseline($font, $size)
        {
        }
        /**
         * Starts a new page
         *
         * Subsequent drawing operations will appear on the new page.
         */
        public function new_page()
        {
        }
        public function open_object()
        {
        }
        public function close_object()
        {
        }
        public function add_object()
        {
        }
        public function page_script($callback)
        {
        }
        public function page_text($x, $y, $text, $font, $size, $color = [0, 0, 0], $word_space = 0.0, $char_space = 0.0, $angle = 0.0)
        {
        }
        public function page_line()
        {
        }
        /**
         * Streams the image to the client.
         *
         * @param string $filename The filename to present to the client.
         * @param array $options Associative array: 'type' => jpeg|jpg|png; 'quality' => 0 - 100 (JPEG only);
         *     'page' => Number of the page to output (defaults to the first); 'Attachment': 1 or 0 (default 1).
         */
        public function stream($filename, $options = [])
        {
        }
        /**
         * Returns the image as a string.
         *
         * @param array $options Associative array: 'type' => jpeg|jpg|png; 'quality' => 0 - 100 (JPEG only);
         *     'page' => Number of the page to output (defaults to the first).
         * @return string
         */
        public function output($options = [])
        {
        }
        /**
         * Outputs the image stream directly.
         *
         * @param array $options Associative array: 'type' => jpeg|jpg|png; 'quality' => 0 - 100 (JPEG only);
         *     'page' => Number of the page to output (defaults to the first).
         */
        protected function _output($options = [])
        {
        }
    }
    /**
     * PDF rendering interface
     *
     * Dompdf\Adapter\CPDF provides a simple stateless interface to the stateful one
     * provided by the Cpdf class.
     *
     * Unless otherwise mentioned, all dimensions are in points (1/72 in).  The
     * coordinate origin is in the top left corner, and y values increase
     * downwards.
     *
     * See {@link http://www.ros.co.nz/pdf/} for more complete documentation
     * on the underlying {@link Cpdf} class.
     *
     * @package dompdf
     */
    class CPDF implements \Dompdf\Canvas
    {
        /**
         * Dimensions of paper sizes in points
         *
         * @var array;
         */
        static $PAPER_SIZES = ["4a0" => [0, 0, 4767.87, 6740.79], "2a0" => [0, 0, 3370.39, 4767.87], "a0" => [0, 0, 2383.94, 3370.39], "a1" => [0, 0, 1683.78, 2383.94], "a2" => [0, 0, 1190.55, 1683.78], "a3" => [0, 0, 841.89, 1190.55], "a4" => [0, 0, 595.28, 841.89], "a5" => [0, 0, 419.53, 595.28], "a6" => [0, 0, 297.64, 419.53], "a7" => [0, 0, 209.76, 297.64], "a8" => [0, 0, 147.4, 209.76], "a9" => [0, 0, 104.88, 147.4], "a10" => [0, 0, 73.7, 104.88], "b0" => [0, 0, 2834.65, 4008.19], "b1" => [0, 0, 2004.09, 2834.65], "b2" => [0, 0, 1417.32, 2004.09], "b3" => [0, 0, 1000.63, 1417.32], "b4" => [0, 0, 708.66, 1000.63], "b5" => [0, 0, 498.9, 708.66], "b6" => [0, 0, 354.33, 498.9], "b7" => [0, 0, 249.45, 354.33], "b8" => [0, 0, 175.75, 249.45], "b9" => [0, 0, 124.72, 175.75], "b10" => [0, 0, 87.87, 124.72], "c0" => [0, 0, 2599.37, 3676.54], "c1" => [0, 0, 1836.85, 2599.37], "c2" => [0, 0, 1298.27, 1836.85], "c3" => [0, 0, 918.4299999999999, 1298.27], "c4" => [0, 0, 649.13, 918.4299999999999], "c5" => [0, 0, 459.21, 649.13], "c6" => [0, 0, 323.15, 459.21], "c7" => [0, 0, 229.61, 323.15], "c8" => [0, 0, 161.57, 229.61], "c9" => [0, 0, 113.39, 161.57], "c10" => [0, 0, 79.37, 113.39], "ra0" => [0, 0, 2437.8, 3458.27], "ra1" => [0, 0, 1729.13, 2437.8], "ra2" => [0, 0, 1218.9, 1729.13], "ra3" => [0, 0, 864.5700000000001, 1218.9], "ra4" => [0, 0, 609.45, 864.5700000000001], "sra0" => [0, 0, 2551.18, 3628.35], "sra1" => [0, 0, 1814.17, 2551.18], "sra2" => [0, 0, 1275.59, 1814.17], "sra3" => [0, 0, 907.09, 1275.59], "sra4" => [0, 0, 637.8, 907.09], "letter" => [0, 0, 612.0, 792.0], "half-letter" => [0, 0, 396.0, 612.0], "legal" => [0, 0, 612.0, 1008.0], "ledger" => [0, 0, 1224.0, 792.0], "tabloid" => [0, 0, 792.0, 1224.0], "executive" => [0, 0, 521.86, 756.0], "folio" => [0, 0, 612.0, 936.0], "commercial #10 envelope" => [0, 0, 684, 297], "catalog #10 1/2 envelope" => [0, 0, 648, 864], "8.5x11" => [0, 0, 612.0, 792.0], "8.5x14" => [0, 0, 612.0, 1008.0], "11x17" => [0, 0, 792.0, 1224.0]];
        /**
         * The Dompdf object
         *
         * @var Dompdf
         */
        protected $_dompdf;
        /**
         * Instance of Cpdf class
         *
         * @var \Dompdf\Cpdf
         */
        protected $_pdf;
        /**
         * PDF width, in points
         *
         * @var float
         */
        protected $_width;
        /**
         * PDF height, in points
         *
         * @var float
         */
        protected $_height;
        /**
         * Current page number
         *
         * @var int
         */
        protected $_page_number;
        /**
         * Total number of pages
         *
         * @var int
         */
        protected $_page_count;
        /**
         * Text to display on every page
         *
         * @var array
         */
        protected $_page_text;
        /**
         * Array of pages for accessing after rendering is initially complete
         *
         * @var array
         */
        protected $_pages;
        /**
         * Currently-applied opacity level (0 - 1)
         *
         * @var float
         */
        protected $_current_opacity = 1;
        /**
         * Class constructor
         *
         * @param mixed $paper The size of paper to use in this PDF ({@link CPDF::$PAPER_SIZES})
         * @param string $orientation The orientation of the document (either 'landscape' or 'portrait')
         * @param Dompdf $dompdf The Dompdf instance
         */
        public function __construct($paper = "letter", $orientation = "portrait", \Dompdf\Dompdf $dompdf = null)
        {
        }
        /**
         * @return Dompdf
         */
        public function get_dompdf()
        {
        }
        /**
         * Returns the Cpdf instance
         *
         * @return \Dompdf\Cpdf
         */
        public function get_cpdf()
        {
        }
        /**
         * Add meta information to the PDF
         *
         * @param string $label label of the value (Creator, Producer, etc.)
         * @param string $value the text to set
         */
        public function add_info($label, $value)
        {
        }
        /**
         * Opens a new 'object'
         *
         * While an object is open, all drawing actions are recorded in the object,
         * as opposed to being drawn on the current page.  Objects can be added
         * later to a specific page or to several pages.
         *
         * The return value is an integer ID for the new object.
         *
         * @see CPDF::close_object()
         * @see CPDF::add_object()
         *
         * @return int
         */
        public function open_object()
        {
        }
        /**
         * Reopens an existing 'object'
         *
         * @see CPDF::open_object()
         * @param int $object the ID of a previously opened object
         */
        public function reopen_object($object)
        {
        }
        /**
         * Closes the current 'object'
         *
         * @see CPDF::open_object()
         */
        public function close_object()
        {
        }
        /**
         * Adds a specified 'object' to the document
         *
         * $object int specifying an object created with {@link
         * CPDF::open_object()}.  $where can be one of:
         * - 'add' add to current page only
         * - 'all' add to every page from the current one onwards
         * - 'odd' add to all odd numbered pages from now on
         * - 'even' add to all even numbered pages from now on
         * - 'next' add the object to the next page only
         * - 'nextodd' add to all odd numbered pages from the next one
         * - 'nexteven' add to all even numbered pages from the next one
         *
         * @see Cpdf::addObject()
         *
         * @param int $object
         * @param string $where
         */
        public function add_object($object, $where = 'all')
        {
        }
        /**
         * Stops the specified 'object' from appearing in the document.
         *
         * The object will stop being displayed on the page following the current
         * one.
         *
         * @param int $object
         */
        public function stop_object($object)
        {
        }
        /**
         * @access private
         */
        public function serialize_object($id)
        {
        }
        /**
         * @access private
         */
        public function reopen_serialized_object($obj)
        {
        }
        //........................................................................
        /**
         * Returns the PDF's width in points
         * @return float
         */
        public function get_width()
        {
        }
        /**
         * Returns the PDF's height in points
         * @return float
         */
        public function get_height()
        {
        }
        /**
         * Returns the current page number
         * @return int
         */
        public function get_page_number()
        {
        }
        /**
         * Returns the total number of pages in the document
         * @return int
         */
        public function get_page_count()
        {
        }
        /**
         * Sets the current page number
         *
         * @param int $num
         */
        public function set_page_number($num)
        {
        }
        /**
         * Sets the page count
         *
         * @param int $count
         */
        public function set_page_count($count)
        {
        }
        /**
         * Sets the stroke color
         *
         * See {@link Style::set_color()} for the format of the color array.
         * @param array $color
         */
        protected function _set_stroke_color($color)
        {
        }
        /**
         * Sets the fill colour
         *
         * See {@link Style::set_color()} for the format of the colour array.
         * @param array $color
         */
        protected function _set_fill_color($color)
        {
        }
        /**
         * Sets line transparency
         * @see Cpdf::setLineTransparency()
         *
         * Valid blend modes are (case-sensitive):
         *
         * Normal, Multiply, Screen, Overlay, Darken, Lighten,
         * ColorDodge, ColorBurn, HardLight, SoftLight, Difference,
         * Exclusion
         *
         * @param string $mode the blending mode to use
         * @param float $opacity 0.0 fully transparent, 1.0 fully opaque
         */
        protected function _set_line_transparency($mode, $opacity)
        {
        }
        /**
         * Sets fill transparency
         * @see Cpdf::setFillTransparency()
         *
         * Valid blend modes are (case-sensitive):
         *
         * Normal, Multiply, Screen, Overlay, Darken, Lighten,
         * ColorDogde, ColorBurn, HardLight, SoftLight, Difference,
         * Exclusion
         *
         * @param string $mode the blending mode to use
         * @param float $opacity 0.0 fully transparent, 1.0 fully opaque
         */
        protected function _set_fill_transparency($mode, $opacity)
        {
        }
        /**
         * Sets the line style
         *
         * @see Cpdf::setLineStyle()
         *
         * @param float $width
         * @param string $cap
         * @param string $join
         * @param array $dash
         */
        protected function _set_line_style($width, $cap, $join, $dash)
        {
        }
        /**
         * Sets the opacity
         *
         * @param $opacity
         * @param $mode
         */
        public function set_opacity($opacity, $mode = "Normal")
        {
        }
        public function set_default_view($view, $options = [])
        {
        }
        /**
         * Remaps y coords from 4th to 1st quadrant
         *
         * @param float $y
         * @return float
         */
        protected function y($y)
        {
        }
        /**
         * Canvas implementation
         *
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param array $color
         * @param float $width
         * @param array $style
         */
        public function line($x1, $y1, $x2, $y2, $color, $width, $style = [])
        {
        }
        /**
         * Draw line at the specified coordinates on every page.
         *
         * See {@link Style::munge_color()} for the format of the colour array.
         *
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param array $color
         * @param float $width
         * @param array $style optional
         */
        public function page_line($x1, $y1, $x2, $y2, $color, $width, $style = [])
        {
        }
        /**
         * @param float $x
         * @param float $y
         * @param float $r1
         * @param float $r2
         * @param float $astart
         * @param float $aend
         * @param array $color
         * @param float $width
         * @param array $style
         */
        public function arc($x, $y, $r1, $r2, $astart, $aend, $color, $width, $style = [])
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param array $color
         * @param float $width
         * @param array $style
         */
        public function rectangle($x1, $y1, $w, $h, $color, $width, $style = [])
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param array $color
         */
        public function filled_rectangle($x1, $y1, $w, $h, $color)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         */
        public function clipping_rectangle($x1, $y1, $w, $h)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param float $rTL
         * @param float $rTR
         * @param float $rBR
         * @param float $rBL
         */
        public function clipping_roundrectangle($x1, $y1, $w, $h, $rTL, $rTR, $rBR, $rBL)
        {
        }
        /**
         *
         */
        public function clipping_end()
        {
        }
        /**
         *
         */
        public function save()
        {
        }
        /**
         *
         */
        public function restore()
        {
        }
        /**
         * @param $angle
         * @param $x
         * @param $y
         */
        public function rotate($angle, $x, $y)
        {
        }
        /**
         * @param $angle_x
         * @param $angle_y
         * @param $x
         * @param $y
         */
        public function skew($angle_x, $angle_y, $x, $y)
        {
        }
        /**
         * @param $s_x
         * @param $s_y
         * @param $x
         * @param $y
         */
        public function scale($s_x, $s_y, $x, $y)
        {
        }
        /**
         * @param $t_x
         * @param $t_y
         */
        public function translate($t_x, $t_y)
        {
        }
        /**
         * @param $a
         * @param $b
         * @param $c
         * @param $d
         * @param $e
         * @param $f
         */
        public function transform($a, $b, $c, $d, $e, $f)
        {
        }
        /**
         * @param array $points
         * @param array $color
         * @param null $width
         * @param array $style
         * @param bool $fill
         */
        public function polygon($points, $color, $width = null, $style = [], $fill = false)
        {
        }
        /**
         * @param float $x
         * @param float $y
         * @param float $r1
         * @param array $color
         * @param null $width
         * @param null $style
         * @param bool $fill
         */
        public function circle($x, $y, $r1, $color, $width = null, $style = null, $fill = false)
        {
        }
        /**
         * Convert image to a PNG image
         *
         * @param string $image_url
         * @param string $type
         *
         * @throws Exception
         * @return string The url of the newly converted image
         */
        protected function _convert_to_png($image_url, $type)
        {
        }
        /**
         * @param string $img
         * @param float $x
         * @param float $y
         * @param int $w
         * @param int $h
         * @param string $resolution
         */
        public function image($img, $x, $y, $w, $h, $resolution = "normal")
        {
        }
        public function select($x, $y, $w, $h, $font, $size, $color = [0, 0, 0], $opts = [])
        {
        }
        public function textarea($x, $y, $w, $h, $font, $size, $color = [0, 0, 0])
        {
        }
        public function input($x, $y, $w, $h, $type, $font, $size, $color = [0, 0, 0])
        {
        }
        /**
         * @param float $x
         * @param float $y
         * @param string $text
         * @param string $font
         * @param float $size
         * @param array $color
         * @param float $word_space
         * @param float $char_space
         * @param float $angle
         */
        public function text($x, $y, $text, $font, $size, $color = [0, 0, 0], $word_space = 0.0, $char_space = 0.0, $angle = 0.0)
        {
        }
        /**
         * @param string $code
         */
        public function javascript($code)
        {
        }
        //........................................................................
        /**
         * Add a named destination (similar to <a name="foo">...</a> in html)
         *
         * @param string $anchorname The name of the named destination
         */
        public function add_named_dest($anchorname)
        {
        }
        /**
         * Add a link to the pdf
         *
         * @param string $url The url to link to
         * @param float $x The x position of the link
         * @param float $y The y position of the link
         * @param float $width The width of the link
         * @param float $height The height of the link
         */
        public function add_link($url, $x, $y, $width, $height)
        {
        }
        /**
         * @param string $text
         * @param string $font
         * @param float $size
         * @param float $word_spacing
         * @param float $char_spacing
         * @return float
         */
        public function get_text_width($text, $font, $size, $word_spacing = 0, $char_spacing = 0)
        {
        }
        /**
         * @param string $font
         * @param float $size
         * @return float|int
         * @throws FontNotFoundException
         */
        public function get_font_height($font, $size)
        {
        }
        /*function get_font_x_height($font, $size) {
            $this->_pdf->selectFont($font);
            $ratio = $this->_dompdf->getOptions()->getFontHeightRatio();
            return $this->_pdf->getFontXHeight($size) * $ratio;
          }*/
        /**
         * @param string $font
         * @param float $size
         * @return float
         */
        public function get_font_baseline($font, $size)
        {
        }
        /**
         * Writes text at the specified x and y coordinates on every page
         *
         * The strings '{PAGE_NUM}' and '{PAGE_COUNT}' are automatically replaced
         * with their current values.
         *
         * See {@link Style::munge_color()} for the format of the colour array.
         *
         * @param float $x
         * @param float $y
         * @param string $text the text to write
         * @param string $font the font file to use
         * @param float $size the font size, in points
         * @param array $color
         * @param float $word_space word spacing adjustment
         * @param float $char_space char spacing adjustment
         * @param float $angle angle to write the text at, measured CW starting from the x-axis
         */
        public function page_text($x, $y, $text, $font, $size, $color = [0, 0, 0], $word_space = 0.0, $char_space = 0.0, $angle = 0.0)
        {
        }
        /**
         * Processes a callback or script on every page
         *
         * The callback function receives the four parameters `$pageNumber`,
         * `$pageCount`, `$pdf`, and `$fontMetrics`, in that order. If a script is
         * passed as string, the variables `$PAGE_NUM`, `$PAGE_COUNT`, `$pdf`, and
         * `$fontMetrics` are available instead.
         *
         * This function can be used to add page numbers to all pages after the
         * first one, for example.
         *
         * @param callable|string $code The callback function or PHP script to process on every page
         */
        public function page_script($code)
        {
        }
        /**
         * @return int
         */
        public function new_page()
        {
        }
        /**
         * Add text to each page after rendering is complete
         */
        protected function _add_page_text()
        {
        }
        /**
         * Streams the PDF to the client.
         *
         * @param string $filename The filename to present to the client.
         * @param array $options Associative array: 'compress' => 1 or 0 (default 1); 'Attachment' => 1 or 0 (default 1).
         */
        public function stream($filename = "document.pdf", $options = [])
        {
        }
        /**
         * Returns the PDF as a string.
         *
         * @param array $options Associative array: 'compress' => 1 or 0 (default 1).
         * @return string
         */
        public function output($options = [])
        {
        }
        /**
         * Returns logging messages generated by the Cpdf class
         *
         * @return string
         */
        public function get_messages()
        {
        }
    }
    /**
     * PDF rendering interface
     *
     * Dompdf\Adapter\PDFLib provides a simple, stateless interface to the one
     * provided by PDFLib.
     *
     * Unless otherwise mentioned, all dimensions are in points (1/72 in).
     * The coordinate origin is in the top left corner and y values
     * increase downwards.
     *
     * See {@link http://www.pdflib.com/} for more complete documentation
     * on the underlying PDFlib functions.
     *
     * @package dompdf
     */
    class PDFLib implements \Dompdf\Canvas
    {
        /**
         * Dimensions of paper sizes in points
         *
         * @var array;
         */
        public static $PAPER_SIZES = [];
        // Set to Dompdf\Adapter\CPDF::$PAPER_SIZES below.
        /**
         * Whether to create PDFs in memory or on disk
         *
         * @var bool
         */
        static $IN_MEMORY = true;
        /**
         * Saves the major version of PDFLib for compatibility requests
         *
         * @var null|int
         */
        protected static $MAJOR_VERSION = null;
        /**
         * Transforms the list of native fonts into PDFLib compatible names (casesensitive)
         *
         * @var array
         */
        public static $nativeFontsTpPDFLib = ["courier" => "Courier", "courier-bold" => "Courier-Bold", "courier-oblique" => "Courier-Oblique", "courier-boldoblique" => "Courier-BoldOblique", "helvetica" => "Helvetica", "helvetica-bold" => "Helvetica-Bold", "helvetica-oblique" => "Helvetica-Oblique", "helvetica-boldoblique" => "Helvetica-BoldOblique", "times" => "Times-Roman", "times-roman" => "Times-Roman", "times-bold" => "Times-Bold", "times-italic" => "Times-Italic", "times-bolditalic" => "Times-BoldItalic", "symbol" => "Symbol", "zapfdinbats" => "ZapfDingbats", "zapfdingbats" => "ZapfDingbats"];
        /**
         * @var \Dompdf\Dompdf
         */
        protected $_dompdf;
        /**
         * Instance of PDFLib class
         *
         * @var \PDFLib
         */
        protected $_pdf;
        /**
         * Name of temporary file used for PDFs created on disk
         *
         * @var string
         */
        protected $_file;
        /**
         * PDF width, in points
         *
         * @var float
         */
        protected $_width;
        /**
         * PDF height, in points
         *
         * @var float
         */
        protected $_height;
        /**
         * Last fill color used
         *
         * @var array
         */
        protected $_last_fill_color;
        /**
         * Last stroke color used
         *
         * @var array
         */
        protected $_last_stroke_color;
        /**
         * The current opacity level
         *
         * @var array
         */
        protected $_current_opacity;
        /**
         * Cache of image handles
         *
         * @var array
         */
        protected $_imgs;
        /**
         * Cache of font handles
         *
         * @var array
         */
        protected $_fonts;
        /**
         * Cache of fontFile checks
         *
         * @var array
         */
        protected $_fontsFiles;
        /**
         * List of objects (templates) to add to multiple pages
         *
         * @var array
         */
        protected $_objs;
        /**
         * List of gstate objects created for this PDF (for reuse)
         *
         * @var array
         */
        protected $_gstates = [];
        /**
         * Current page number
         *
         * @var int
         */
        protected $_page_number;
        /**
         * Total number of pages
         *
         * @var int
         */
        protected $_page_count;
        /**
         * Text to display on every page
         *
         * @var array
         */
        protected $_page_text;
        /**
         * Array of pages for accesing after rendering is initially complete
         *
         * @var array
         */
        protected $_pages;
        /**
         * Class constructor
         *
         * @param string|array $paper The size of paper to use either a string (see {@link Dompdf\Adapter\CPDF::$PAPER_SIZES}) or
         *                            an array(xmin,ymin,xmax,ymax)
         * @param string $orientation The orientation of the document (either 'landscape' or 'portrait')
         * @param Dompdf $dompdf
         */
        public function __construct($paper = "letter", $orientation = "portrait", \Dompdf\Dompdf $dompdf = null)
        {
        }
        /**
         * @return Dompdf
         */
        function get_dompdf()
        {
        }
        /**
         * Close the pdf
         */
        protected function _close()
        {
        }
        /**
         * Returns the PDFLib instance
         *
         * @return PDFLib
         */
        public function get_pdflib()
        {
        }
        /**
         * Add meta information to the PDF
         *
         * @param string $label label of the value (Creator, Producter, etc.)
         * @param string $value the text to set
         */
        public function add_info($label, $value)
        {
        }
        /**
         * Opens a new 'object' (template in PDFLib-speak)
         *
         * While an object is open, all drawing actions are recorded to the
         * object instead of being drawn on the current page.  Objects can
         * be added later to a specific page or to several pages.
         *
         * The return value is an integer ID for the new object.
         *
         * @see PDFLib::close_object()
         * @see PDFLib::add_object()
         *
         * @return int
         */
        public function open_object()
        {
        }
        /**
         * Reopen an existing object (NOT IMPLEMENTED)
         * PDFLib does not seem to support reopening templates.
         *
         * @param int $object the ID of a previously opened object
         *
         * @throws Exception
         * @return void
         */
        public function reopen_object($object)
        {
        }
        /**
         * Close the current template
         *
         * @see PDFLib::open_object()
         */
        public function close_object()
        {
        }
        /**
         * Adds the specified object to the document
         *
         * $where can be one of:
         * - 'add' add to current page only
         * - 'all' add to every page from the current one onwards
         * - 'odd' add to all odd numbered pages from now on
         * - 'even' add to all even numbered pages from now on
         * - 'next' add the object to the next page only
         * - 'nextodd' add to all odd numbered pages from the next one
         * - 'nexteven' add to all even numbered pages from the next one
         *
         * @param int    $object the object handle returned by open_object()
         * @param string $where
         */
        public function add_object($object, $where = 'all')
        {
        }
        /**
         * Stops the specified template from appearing in the document.
         *
         * The object will stop being displayed on the page following the
         * current one.
         *
         * @param int $object
         */
        public function stop_object($object)
        {
        }
        /**
         * Add all active objects to the current page
         */
        protected function _place_objects()
        {
        }
        /**
         * @return float|mixed
         */
        public function get_width()
        {
        }
        /**
         * @return float|mixed
         */
        public function get_height()
        {
        }
        /**
         * @return int
         */
        public function get_page_number()
        {
        }
        /**
         * @return int
         */
        public function get_page_count()
        {
        }
        /**
         * @param $num
         */
        public function set_page_number($num)
        {
        }
        /**
         * @param int $count
         */
        public function set_page_count($count)
        {
        }
        /**
         * Sets the line style
         *
         * @param float  $width
         * @param        $cap
         * @param string $join
         * @param array  $dash
         *
         * @return void
         */
        protected function _set_line_style($width, $cap, $join, $dash)
        {
        }
        /**
         * Sets the line color
         *
         * @param array $color array(r,g,b)
         */
        protected function _set_stroke_color($color)
        {
        }
        /**
         * Sets the fill color
         *
         * @param array $color array(r,g,b)
         */
        protected function _set_fill_color($color)
        {
        }
        /**
         * Sets the fill opacity
         *
         * @param $opacity
         * @param $mode
         */
        public function _set_fill_opacity($opacity, $mode = "Normal")
        {
        }
        /**
         * Sets the stroke opacity
         *
         * @param $opacity
         * @param $mode
         */
        public function _set_stroke_opacity($opacity, $mode = "Normal")
        {
        }
        /**
         * Sets the opacity
         *
         * @param $opacity
         * @param $mode
         */
        public function set_opacity($opacity, $mode = "Normal")
        {
        }
        /**
         * Sets the gstate
         *
         * @param $gstate_options
         * @return int
         */
        public function _set_gstate($gstate_options)
        {
        }
        public function set_default_view($view, $options = [])
        {
        }
        /**
         * Loads a specific font and stores the corresponding descriptor.
         *
         * @param string $font
         * @param string $encoding
         * @param string $options
         *
         * @return int the font descriptor for the font
         */
        protected function _load_font($font, $encoding = null, $options = "")
        {
        }
        /**
         * Remaps y coords from 4th to 1st quadrant
         *
         * @param float $y
         * @return float
         */
        protected function y($y)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param array $color
         * @param float $width
         * @param array $style
         */
        public function line($x1, $y1, $x2, $y2, $color, $width, $style = null)
        {
        }
        /**
         * Draw line at the specified coordinates on every page.
         *
         * See {@link Style::munge_color()} for the format of the colour array.
         *
         * @param float $x1
         * @param float $y1
         * @param float $x2
         * @param float $y2
         * @param array $color
         * @param float $width
         * @param array $style optional
         */
        public function page_line($x1, $y1, $x2, $y2, $color, $width, $style = [])
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $r1
         * @param float $r2
         * @param float $astart
         * @param float $aend
         * @param array $color
         * @param float $width
         * @param array $style
         */
        public function arc($x1, $y1, $r1, $r2, $astart, $aend, $color, $width, $style = [])
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param array $color
         * @param float $width
         * @param null  $style
         */
        public function rectangle($x1, $y1, $w, $h, $color, $width, $style = null)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param array $color
         */
        public function filled_rectangle($x1, $y1, $w, $h, $color)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         */
        public function clipping_rectangle($x1, $y1, $w, $h)
        {
        }
        /**
         * @param float $x1
         * @param float $y1
         * @param float $w
         * @param float $h
         * @param float $rTL
         * @param float $rTR
         * @param float $rBR
         * @param float $rBL
         */
        public function clipping_roundrectangle($x1, $y1, $w, $h, $rTL, $rTR, $rBR, $rBL)
        {
        }
        /**
         *
         */
        public function clipping_end()
        {
        }
        /**
         *
         */
        public function save()
        {
        }
        function restore()
        {
        }
        /**
         * @param $angle
         * @param $x
         * @param $y
         */
        public function rotate($angle, $x, $y)
        {
        }
        /**
         * @param $angle_x
         * @param $angle_y
         * @param $x
         * @param $y
         */
        public function skew($angle_x, $angle_y, $x, $y)
        {
        }
        /**
         * @param $s_x
         * @param $s_y
         * @param $x
         * @param $y
         */
        public function scale($s_x, $s_y, $x, $y)
        {
        }
        /**
         * @param $t_x
         * @param $t_y
         */
        public function translate($t_x, $t_y)
        {
        }
        /**
         * @param $a
         * @param $b
         * @param $c
         * @param $d
         * @param $e
         * @param $f
         */
        public function transform($a, $b, $c, $d, $e, $f)
        {
        }
        /**
         * @param array $points
         * @param array $color
         * @param null  $width
         * @param null  $style
         * @param bool  $fill
         */
        public function polygon($points, $color, $width = null, $style = null, $fill = false)
        {
        }
        /**
         * @param float $x
         * @param float $y
         * @param float $r
         * @param array $color
         * @param null  $width
         * @param null  $style
         * @param bool  $fill
         */
        public function circle($x, $y, $r, $color, $width = null, $style = null, $fill = false)
        {
        }
        /**
         * @param string $img_url
         * @param float  $x
         * @param float  $y
         * @param int    $w
         * @param int    $h
         * @param string $resolution
         */
        public function image($img_url, $x, $y, $w, $h, $resolution = "normal")
        {
        }
        /**
         * @param float  $x
         * @param float  $y
         * @param string $text
         * @param string $font
         * @param float  $size
         * @param array  $color
         * @param int    $word_spacing
         * @param int    $char_spacing
         * @param int    $angle
         */
        public function text($x, $y, $text, $font, $size, $color = [0, 0, 0], $word_spacing = 0, $char_spacing = 0, $angle = 0)
        {
        }
        /**
         * @param string $code
         */
        public function javascript($code)
        {
        }
        /**
         * Add a named destination (similar to <a name="foo">...</a> in html)
         *
         * @param string $anchorname The name of the named destination
         */
        public function add_named_dest($anchorname)
        {
        }
        /**
         * Add a link to the pdf
         *
         * @param string $url    The url to link to
         * @param float  $x      The x position of the link
         * @param float  $y      The y position of the link
         * @param float  $width  The width of the link
         * @param float  $height The height of the link
         */
        public function add_link($url, $x, $y, $width, $height)
        {
        }
        /**
         * @param string $text
         * @param string $font
         * @param float  $size
         * @param float  $word_spacing
         * @param float  $letter_spacing
         * @return mixed
         */
        public function get_text_width($text, $font, $size, $word_spacing = 0, $letter_spacing = 0)
        {
        }
        /**
         * @param string $font
         * @param float  $size
         * @return float
         */
        public function get_font_height($font, $size)
        {
        }
        /**
         * @param string $font
         * @param float  $size
         * @return float
         */
        public function get_font_baseline($font, $size)
        {
        }
        /**
         * Writes text at the specified x and y coordinates on every page
         *
         * The strings '{PAGE_NUM}' and '{PAGE_COUNT}' are automatically replaced
         * with their current values.
         *
         * See {@link Style::munge_color()} for the format of the color array.
         *
         * @param float  $x
         * @param float  $y
         * @param string $text       the text to write
         * @param string $font       the font file to use
         * @param float  $size       the font size, in points
         * @param array  $color
         * @param float  $word_space word spacing adjustment
         * @param float  $char_space char spacing adjustment
         * @param float  $angle      angle to write the text at, measured CW starting from the x-axis
         */
        public function page_text($x, $y, $text, $font, $size, $color = [0, 0, 0], $word_space = 0.0, $char_space = 0.0, $angle = 0.0)
        {
        }
        //........................................................................
        /**
         * Processes a callback or script on every page
         *
         * The callback function receives the four parameters `$pageNumber`,
         * `$pageCount`, `$pdf`, and `$fontMetrics`, in that order. If a script is
         * passed as string, the variables `$PAGE_NUM`, `$PAGE_COUNT`, `$pdf`, and
         * `$fontMetrics` are available instead.
         *
         * This function can be used to add page numbers to all pages after the
         * first one, for example.
         *
         * @param callable|string $code The callback function or PHP script to process on every page
         */
        public function page_script($code)
        {
        }
        /**
         *
         */
        public function new_page()
        {
        }
        /**
         * Add text to each page after rendering is complete
         */
        protected function _add_page_text()
        {
        }
        /**
         * Streams the PDF to the client.
         *
         * @param string $filename The filename to present to the client.
         * @param array  $options  Associative array: 'compress' => 1 or 0 (default 1); 'Attachment' => 1 or 0 (default 1).
         * @throws Exception
         */
        public function stream($filename = "document.pdf", $options = [])
        {
        }
        /**
         * Returns the PDF as a string.
         *
         * @param array $options Associative array: 'compress' => 1 or 0 (default 1).
         * @return string
         */
        public function output($options = [])
        {
        }
        /**
         * @param string $keyword
         * @param string $optlist
         * @return mixed
         */
        protected function getPDFLibParameter($keyword, $optlist = "")
        {
        }
        /**
         * @param string $keyword
         * @param string $value
         * @return mixed
         */
        protected function setPDFLibParameter($keyword, $value)
        {
        }
        /**
         * @param string $keyword
         * @param string $optlist
         * @return mixed
         */
        protected function getPDFLibValue($keyword, $optlist = "")
        {
        }
        /**
         * @param string $keyword
         * @param string $value
         * @return mixed
         */
        protected function setPDFLibValue($keyword, $value)
        {
        }
        /**
         * @return int
         */
        protected function getPDFLibMajorVersion()
        {
        }
    }
}
namespace Dompdf\Css {
    /**
     * Translates HTML 4.0 attributes into CSS rules
     *
     * @package dompdf
     */
    class AttributeTranslator
    {
        static $_style_attr = "_html_style_attribute";
        protected static $_last_basefont_size = 3;
        protected static $_font_size_lookup = [
            // For basefont support
            -3 => "4pt",
            -2 => "5pt",
            -1 => "6pt",
            0 => "7pt",
            1 => "8pt",
            2 => "10pt",
            3 => "12pt",
            4 => "14pt",
            5 => "18pt",
            6 => "24pt",
            7 => "34pt",
            // For basefont support
            8 => "48pt",
            9 => "44pt",
            10 => "52pt",
            11 => "60pt",
        ];
        /**
         * @param Frame $frame
         */
        static function translate_attributes(\Dompdf\Frame $frame)
        {
        }
        /**
         * @param \DOMNode $node
         * @param string $target
         * @param string $value
         *
         * @return string
         */
        protected static function _resolve_target(\DOMNode $node, $target, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $new_style
         */
        static function append_style(\DOMElement $node, $new_style)
        {
        }
        /**
         * @param \DOMNode $node
         *
         * @return \DOMNodeList|\DOMElement[]
         */
        protected static function get_cell_list(\DOMNode $node)
        {
        }
        /**
         * @param string $value
         *
         * @return string
         */
        protected static function _get_valid_color($value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return string
         */
        protected static function _set_color(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return string
         */
        protected static function _set_background_color(\DOMElement $node, $value)
        {
        }
        protected static function _set_px_width(\DOMElement $node, string $value) : string
        {
        }
        protected static function _set_px_height(\DOMElement $node, string $value) : string
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return null
         */
        protected static function _set_table_cellpadding(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return string
         */
        protected static function _set_table_border(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return string
         */
        protected static function _set_table_cellspacing(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return null|string
         */
        protected static function _set_table_rules(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return string
         */
        protected static function _set_hr_size(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return null|string
         */
        protected static function _set_hr_align(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return null|string
         */
        protected static function _set_input_width(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return null
         */
        protected static function _set_table_row_align(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return null
         */
        protected static function _set_table_row_valign(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return null
         */
        protected static function _set_table_row_bgcolor(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return null
         */
        protected static function _set_body_link(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return null
         */
        protected static function _set_basefont_size(\DOMElement $node, $value)
        {
        }
        /**
         * @param \DOMElement $node
         * @param string $value
         *
         * @return string
         */
        protected static function _set_font_size(\DOMElement $node, $value)
        {
        }
    }
    /**
     * The master stylesheet class
     *
     * The Stylesheet class is responsible for parsing stylesheets and style
     * tags/attributes.  It also acts as a registry of the individual Style
     * objects generated by the current set of loaded CSS files and style
     * elements.
     *
     * @see Style
     * @package dompdf
     */
    class Stylesheet
    {
        /**
         * The location of the default built-in CSS file.
         */
        const DEFAULT_STYLESHEET = "/lib/res/html.css";
        /**
         * User agent stylesheet origin
         *
         * @var int
         */
        const ORIG_UA = 1;
        /**
         * User normal stylesheet origin
         *
         * @var int
         */
        const ORIG_USER = 2;
        /**
         * Author normal stylesheet origin
         *
         * @var int
         */
        const ORIG_AUTHOR = 3;
        /**
         * Non-CSS presentational hints (i.e. HTML 4 attributes) are handled as if added
         * to the beginning of an author stylesheet, i.e. anything in author stylesheets
         * should override them.
         */
        const SPEC_NON_CSS = 0x20000000;
        /**
         * Accepted CSS media types
         * List of types and parsing rules for future extensions:
         * http://www.w3.org/TR/REC-html40/types.html
         *   screen, tty, tv, projection, handheld, print, braille, aural, all
         * The following are non standard extensions for undocumented specific environments.
         *   static, visual, bitmap, paged, dompdf
         * Note, even though the generated pdf file is intended for print output,
         * the desired content might be different (e.g. screen or projection view of html file).
         * Therefore allow specification of content by dompdf setting Options::defaultMediaType.
         * If given, replace media "print" by Options::defaultMediaType.
         * (Previous version $ACCEPTED_MEDIA_TYPES = $ACCEPTED_GENERIC_MEDIA_TYPES + $ACCEPTED_DEFAULT_MEDIA_TYPE)
         */
        static $ACCEPTED_DEFAULT_MEDIA_TYPE = "print";
        static $ACCEPTED_GENERIC_MEDIA_TYPES = ["all", "static", "visual", "bitmap", "paged", "dompdf"];
        static $VALID_MEDIA_TYPES = ["all", "aural", "bitmap", "braille", "dompdf", "embossed", "handheld", "paged", "print", "projection", "screen", "speech", "static", "tty", "tv", "visual"];
        /**
         * The class constructor.
         *
         * The base protocol, host & path are initialized to those of
         * the current script.
         */
        function __construct(\Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * Set the base protocol
         *
         * @param string $protocol
         */
        function set_protocol(string $protocol)
        {
        }
        /**
         * Set the base host
         *
         * @param string $host
         */
        function set_host(string $host)
        {
        }
        /**
         * Set the base path
         *
         * @param string $path
         */
        function set_base_path(string $path)
        {
        }
        /**
         * Return the Dompdf object
         *
         * @return Dompdf
         */
        function get_dompdf()
        {
        }
        /**
         * Return the base protocol for this stylesheet
         *
         * @return string
         */
        function get_protocol()
        {
        }
        /**
         * Return the base host for this stylesheet
         *
         * @return string
         */
        function get_host()
        {
        }
        /**
         * Return the base path for this stylesheet
         *
         * @return string
         */
        function get_base_path()
        {
        }
        /**
         * Return the array of page styles
         *
         * @return Style[]
         */
        function get_page_styles()
        {
        }
        /**
         * Create a new Style object associated with this stylesheet
         *
         * @return Style
         */
        function create_style() : \Dompdf\Css\Style
        {
        }
        /**
         * Add a new Style object to the stylesheet
         *
         * The style's origin is changed to the current origin of the stylesheet.
         *
         * @param string $key the Style's selector
         * @param Style $style the Style to be added
         */
        function add_style(string $key, \Dompdf\Css\Style $style) : void
        {
        }
        /**
         * Lookup a specific Style collection
         *
         * @deprecated
         * @param string $key the selector of the requested Style collection
         *
         * @return Style[]
         */
        function lookup(string $key) : array
        {
        }
        /**
         * load and parse a CSS string
         *
         * @param string $css
         * @param int $origin
         */
        function load_css(&$css, $origin = self::ORIG_AUTHOR)
        {
        }
        /**
         * load and parse a CSS file
         *
         * @param string $file
         * @param int $origin
         */
        function load_css_file($file, $origin = self::ORIG_AUTHOR)
        {
        }
        /**
         * https://github.com/tenderlove/nokogiri/blob/master/lib/nokogiri/css/xpath_visitor.rb
         *
         * @param $expr
         * @param bool $last
         * @return string
         */
        protected function _selector_an_plus_b($expr, $last = false)
        {
        }
        /**
         * applies all current styles to a particular document tree
         *
         * apply_styles() applies all currently loaded styles to the provided
         * {@link FrameTree}.  Aside from parsing CSS, this is the main purpose
         * of this class.
         *
         * @param \Dompdf\Frame\FrameTree $tree
         */
        function apply_styles(\Dompdf\Frame\FrameTree $tree)
        {
        }
        /**
         * Resolve the given `url()` declaration to an absolute URL.
         *
         * @param string|null $val The declaration to resolve in the context of the stylesheet.
         * @return string The resolved URL, or `none`, if the value is `none`,
         *         invalid, or points to a non-existent local file.
         */
        public function resolve_url($val) : string
        {
        }
        /**
         * @return string
         */
        public function getDefaultStylesheet()
        {
        }
        /**
         * @param FontMetrics $fontMetrics
         * @return $this
         */
        public function setFontMetrics(\Dompdf\FontMetrics $fontMetrics)
        {
        }
        /**
         * @return FontMetrics
         */
        public function getFontMetrics()
        {
        }
        /**
         * dumps the entire stylesheet as a string
         *
         * Generates a string of each selector and associated style in the
         * Stylesheet.  Useful for debugging.
         *
         * @return string
         */
        function __toString()
        {
        }
    }
    /**
     * Represents CSS properties.
     *
     * The Style class is responsible for handling and storing CSS properties.
     * It includes methods to resolve colors and lengths, as well as getters &
     * setters for many CSS properties.
     *
     * Actual CSS parsing is performed in the {@link Stylesheet} class.
     *
     * @package dompdf
     */
    class Style
    {
        const CSS_IDENTIFIER = "-?[_a-zA-Z]+[_a-zA-Z0-9-]*";
        const CSS_INTEGER = "[+-]?\\d+";
        const CSS_NUMBER = "[+-]?\\d*\\.?\\d+";
        /**
         * Default font size, in points.
         *
         * @var float
         */
        static $default_font_size = 12;
        /**
         * Default line height, as a fraction of the font size.
         *
         * @var float
         */
        static $default_line_height = 1.2;
        /**
         * Default "absolute" font sizes relative to the default font-size
         * http://www.w3.org/TR/css3-fonts/#font-size-the-font-size-property
         * @var array<float>
         */
        static $font_size_keywords = [
            "xx-small" => 0.6,
            // 3/5
            "x-small" => 0.75,
            // 3/4
            "small" => 0.889,
            // 8/9
            "medium" => 1,
            // 1
            "large" => 1.2,
            // 6/5
            "x-large" => 1.5,
            // 3/2
            "xx-large" => 2.0,
        ];
        /**
         * List of valid text-align keywords.  Should also really be a constant.
         *
         * @var array
         */
        static $text_align_keywords = ["left", "right", "center", "justify"];
        /**
         * List of valid vertical-align keywords.  Should also really be a constant.
         *
         * @var array
         */
        static $vertical_align_keywords = ["baseline", "bottom", "middle", "sub", "super", "text-bottom", "text-top", "top"];
        /**
         * List of all block-level (outer) display types.
         * * https://www.w3.org/TR/css-display-3/#display-type
         * * https://www.w3.org/TR/css-display-3/#block-level
         */
        public const BLOCK_LEVEL_TYPES = [
            "block",
            // "flow-root",
            "list-item",
            // "flex",
            // "grid",
            "table",
        ];
        /**
         * List of all inline-level (outer) display types.
         * * https://www.w3.org/TR/css-display-3/#display-type
         * * https://www.w3.org/TR/css-display-3/#inline-level
         */
        public const INLINE_LEVEL_TYPES = [
            "inline",
            "inline-block",
            // "inline-flex",
            // "inline-grid",
            "inline-table",
        ];
        /**
         * List of all table-internal (outer) display types.
         * * https://www.w3.org/TR/css-display-3/#layout-specific-display
         */
        public const TABLE_INTERNAL_TYPES = ["table-row-group", "table-header-group", "table-footer-group", "table-row", "table-cell", "table-column-group", "table-column", "table-caption"];
        /**
         * List of all inline (inner) display types.  Should really be a constant.
         *
         * @var array
         */
        static $INLINE_TYPES = ["inline"];
        /**
         * List of all block (inner) display types.  Should really be a constant.
         *
         * @var array
         */
        static $BLOCK_TYPES = ["block", "inline-block", "table-cell", "list-item"];
        /**
         * List of all table (inner) display types.  Should really be a constant.
         *
         * @var array
         */
        static $TABLE_TYPES = ["table", "inline-table"];
        /**
         * Lookup table for valid display types. Initially computed from the
         * different constants.
         *
         * @var array
         */
        protected static $valid_display_types = [];
        /**
         * List of all positioned types.  Should really be a constant.
         *
         * @var array
         */
        static $POSITIONNED_TYPES = ["relative", "absolute", "fixed"];
        /**
         * List of valid border styles.  Should also really be a constant.
         *
         * @var array
         */
        static $BORDER_STYLES = ["none", "hidden", "dotted", "dashed", "solid", "double", "groove", "ridge", "inset", "outset"];
        /**
         * Map of CSS shorthand properties and their corresponding sub-properties.
         * The order of the sub-properties is relevant for the fallback getter,
         * which is used in case no specific getter method is defined.
         *
         * @var array
         */
        protected static $_props_shorthand = ["background" => [
            "background_image",
            "background_position",
            "background_size",
            "background_repeat",
            // "background_origin",
            // "background_clip",
            "background_attachment",
            "background_color",
        ], "border" => ["border_width", "border_style", "border_color"], "border_top" => ["border_top_width", "border_top_style", "border_top_color"], "border_right" => ["border_right_width", "border_right_style", "border_right_color"], "border_bottom" => ["border_bottom_width", "border_bottom_style", "border_bottom_color"], "border_left" => ["border_left_width", "border_left_style", "border_left_color"], "border_width" => ["border_top_width", "border_right_width", "border_bottom_width", "border_left_width"], "border_style" => ["border_top_style", "border_right_style", "border_bottom_style", "border_left_style"], "border_color" => ["border_top_color", "border_right_color", "border_bottom_color", "border_left_color"], "border_radius" => ["border_top_left_radius", "border_top_right_radius", "border_bottom_right_radius", "border_bottom_left_radius"], "font" => [
            "font_family",
            "font_size",
            // "font_stretch",
            "font_style",
            "font_variant",
            "font_weight",
            "line_height",
        ], "list_style" => ["list_style_image", "list_style_position", "list_style_type"], "margin" => ["margin_top", "margin_right", "margin_bottom", "margin_left"], "padding" => ["padding_top", "padding_right", "padding_bottom", "padding_left"], "outline" => ["outline_width", "outline_style", "outline_color"]];
        /**
         * Maps legacy property names to actual property names.
         *
         * @var array
         */
        protected static $_props_alias = ["word_wrap" => "overflow_wrap", "_dompdf_background_image_resolution" => "background_image_resolution", "_dompdf_image_resolution" => "image_resolution", "_webkit_transform" => "transform", "_webkit_transform_origin" => "transform_origin"];
        /**
         * Default style values.
         *
         * @link http://www.w3.org/TR/CSS21/propidx.html
         *
         * @var array
         */
        protected static $_defaults = null;
        /**
         * List of inherited properties
         *
         * @link http://www.w3.org/TR/CSS21/propidx.html
         *
         * @var array
         */
        protected static $_inherited = null;
        /**
         * Caches method_exists result
         *
         * @var array<bool>
         */
        protected static $_methods_cache = [];
        /**
         * The stylesheet this style belongs to
         *
         * @var Stylesheet
         */
        protected $_stylesheet;
        /**
         * Media queries attached to the style
         *
         * @var array
         */
        protected $_media_queries;
        /**
         * Specified (or declared) values of the CSS properties.
         * https://www.w3.org/TR/css-cascade-3/#value-stages
         *
         * @var array
         */
        protected $_props = [];
        /**
         * Properties set by an `!important` declaration.
         *
         * @var array
         */
        protected $_important_props = [];
        /**
         * Computed values of the CSS properties.
         *
         * @var array
         */
        protected $_props_computed = [];
        /**
         * Used values of the CSS properties.
         *
         * @var array
         */
        protected $_prop_cache = [];
        protected static $_dependency_map = ["border_top_style" => ["border_top_width"], "border_bottom_style" => ["border_bottom_width"], "border_left_style" => ["border_left_width"], "border_right_style" => ["border_right_width"], "direction" => ["text_align"], "font_size" => ["background_position", "background_size", "border_top_width", "border_right_width", "border_bottom_width", "border_left_width", "line_height", "margin_top", "margin_right", "margin_bottom", "margin_left", "outline_width", "outline_offset", "padding_top", "padding_right", "padding_bottom", "padding_left"], "float" => ["display"], "position" => ["display"], "outline_style" => ["outline_width"]];
        /**
         * Lookup table for dependent properties. Initially computed from the
         * dependency map.
         *
         * @var array
         */
        protected static $_dependent_props = [];
        /**
         * Style of the parent element in document tree.
         *
         * @var Style
         */
        protected $parent_style;
        /**
         * @var Frame
         */
        protected $_frame;
        /**
         * The origin of the style
         *
         * @var int
         */
        protected $_origin = \Dompdf\Css\Stylesheet::ORIG_AUTHOR;
        /**
         * Class constructor
         *
         * @param Stylesheet $stylesheet the stylesheet this Style is associated with.
         * @param int $origin
         */
        public function __construct(\Dompdf\Css\Stylesheet $stylesheet, $origin = \Dompdf\Css\Stylesheet::ORIG_AUTHOR)
        {
        }
        /**
         * "Destructor": forcibly free all references held by this object
         */
        function dispose()
        {
        }
        /**
         * @param $media_queries
         */
        function set_media_queries($media_queries)
        {
        }
        /**
         * @return array|int
         */
        function get_media_queries()
        {
        }
        /**
         * @param Frame $frame
         */
        function set_frame(\Dompdf\Frame $frame)
        {
        }
        /**
         * @return Frame
         */
        function get_frame()
        {
        }
        /**
         * @param $origin
         */
        function set_origin($origin)
        {
        }
        /**
         * @return int
         */
        function get_origin()
        {
        }
        /**
         * returns the {@link Stylesheet} this Style is associated with.
         *
         * @return Stylesheet
         */
        function get_stylesheet()
        {
        }
        public function is_absolute() : bool
        {
        }
        public function is_in_flow() : bool
        {
        }
        /**
         * Converts any CSS length value into an absolute length in points.
         *
         * length_in_pt() takes a single length (e.g. '1em') or an array of
         * lengths and returns an absolute length.  If an array is passed, then
         * the return value is the sum of all elements. If any of the lengths
         * provided are "auto" or "none" then that value is returned.
         *
         * If a reference size is not provided, the current font size is used.
         *
         * @param float|string|array $length   The numeric length (or string measurement) or array of lengths to resolve.
         * @param float|null         $ref_size An absolute reference size to resolve percentage lengths.
         *
         * @return float|string
         */
        function length_in_pt($length, ?float $ref_size = null)
        {
        }
        /**
         * Convert a length declaration to pt.
         *
         * @param string     $l         The length declaration.
         * @param float      $ref_size  Reference size for percentage declarations.
         * @param float|null $font_size Font size for resolving font-size relative units.
         *
         * @return float|null The length in pt, or `null` for invalid declarations.
         */
        protected function single_length_in_pt(string $l, float $ref_size = 0, ?float $font_size = null) : ?float
        {
        }
        /**
         * Resolve inherited property values using the provided parent style or the
         * default values, in case no parent style exists.
         *
         * https://www.w3.org/TR/css-cascade-3/#inheriting
         *
         * @param Style|null $parent
         *
         * @return Style
         */
        function inherit(?\Dompdf\Css\Style $parent = null)
        {
        }
        /**
         * Override properties in this style with those in $style
         *
         * @param Style $style
         */
        function merge(\Dompdf\Css\Style $style)
        {
        }
        /**
         * Returns an array(r, g, b, "r"=> r, "g"=>g, "b"=>b, "alpha"=>alpha, "hex"=>"#rrggbb")
         * based on the provided CSS color value.
         *
         * @param string $color
         * @return array|string|null
         */
        function munge_color($color)
        {
        }
        /**
         * @deprecated
         * @param string $prop
         */
        function important_set($prop)
        {
        }
        /**
         * @deprecated
         * @param string $prop
         * @return bool
         */
        function important_get($prop)
        {
        }
        /**
         * Clear information about important declarations after the style has been
         * finalized during stylesheet loading.
         */
        public function clear_important() : void
        {
        }
        /**
         * Set the specified value of a property.
         *
         * Setting `$clear_dependencies` to `false` is useful for saving a bit of
         * unnecessary work while loading stylesheets.
         *
         * @param string $prop               The property to set.
         * @param mixed  $val                The value declaration.
         * @param bool   $important          Whether the declaration is important.
         * @param bool   $clear_dependencies Whether to clear computed values of dependent properties.
         */
        function set_prop(string $prop, $val, bool $important = false, bool $clear_dependencies = true) : void
        {
        }
        /**
         * Similar to __get() without storing the result. Useful for accessing
         * properties while loading stylesheets.
         *
         * @param string $prop
         *
         * @return mixed
         * @throws Exception
         */
        function get_prop(string $prop)
        {
        }
        /**
         * PHP5 overloaded setter
         *
         * This function along with {@link Style::__get()} permit a user of the
         * Style class to access any (CSS) property using the following syntax:
         * <code>
         *  Style->margin_top = "1em";
         *  echo (Style->margin_top);
         * </code>
         *
         * __set() automatically calls the provided set function, if one exists,
         * otherwise it sets the property directly.  Typically, __set() is not
         * called directly from outside of this class.
         *
         * On each modification clear cache to return accurate setting.
         * Also affects direct settings not using __set
         * For easier finding all assignments, attempted to allowing only explicite assignment:
         * Very many uses, e.g. AbstractFrameReflower.php -> for now leave as it is
         * function __set($prop, $val) {
         *   throw new Exception("Implicit replacement of assignment by __set.  Not good.");
         * }
         * function props_set($prop, $val) { ... }
         *
         * @param string $prop the property to set
         * @param mixed $val the value of the property
         *
         */
        function __set($prop, $val)
        {
        }
        /**
         * PHP5 overloaded getter
         * Along with {@link Style::__set()} __get() provides access to all CSS
         * properties directly.  Typically __get() is not called directly outside
         * of this class.
         * On each modification clear cache to return accurate setting.
         * Also affects direct settings not using __set
         *
         * @param string $prop
         *
         * @return mixed
         * @throws Exception
         */
        function __get($prop)
        {
        }
        /**
         * Experimental fast setter for used values.
         *
         * If a shorthand property is specified, all of its sub-properties are set
         * to the same value.
         *
         * @param string $prop
         * @param mixed  $val
         */
        function set_used(string $prop, $val) : void
        {
        }
        /**
         * @param string $prop The property to compute.
         * @param mixed  $val  The value to compute.
         *
         * @return mixed The computed value.
         */
        protected function compute_prop(string $prop, $val)
        {
        }
        /**
         * @param float $cbw The width of the containing block.
         * @return float|null|string
         */
        function computed_bottom_spacing(float $cbw)
        {
        }
        /**
         * @return string
         */
        function get_font_family_raw()
        {
        }
        /**
         * Getter for the 'font-family' CSS property.
         * Uses the {@link FontMetrics} class to resolve the font family into an
         * actual font file.
         *
         * @link http://www.w3.org/TR/CSS21/fonts.html#propdef-font-family
         * @throws Exception
         *
         * @return string
         */
        function get_font_family()
        {
        }
        /**
         * @link http://www.w3.org/TR/CSS21/text.html#propdef-word-spacing
         * @return float
         */
        function get_word_spacing()
        {
        }
        /**
         * @link http://www.w3.org/TR/CSS21/text.html#propdef-letter-spacing
         * @return float
         */
        function get_letter_spacing()
        {
        }
        /**
         * @link http://www.w3.org/TR/CSS21/visudet.html#propdef-line-height
         * @return float
         */
        function get_line_height()
        {
        }
        /**
         * @param string $prop
         * @param bool $current_is_parent
         * @return array|string
         */
        protected function get_prop_color(string $prop, bool $current_is_parent = false)
        {
        }
        /**
         * Returns the color as an array
         *
         * The array has the following format:
         * <code>array(r,g,b, "r" => r, "g" => g, "b" => b, "hex" => "#rrggbb")</code>
         *
         * @link http://www.w3.org/TR/CSS21/colors.html#propdef-color
         * @return array
         */
        function get_color()
        {
        }
        /**
         * Returns the background color as an array
         *
         * The returned array has the same format as {@link Style::get_color()}
         *
         * @link http://www.w3.org/TR/CSS21/colors.html#propdef-background-color
         * @return array
         */
        function get_background_color()
        {
        }
        /**
         * Returns the background image URI, or "none"
         *
         * @link https://www.w3.org/TR/CSS21/colors.html#propdef-background-image
         * @return string
         */
        function get_background_image()
        {
        }
        /**
         * Returns the background position as an array
         *
         * The returned array has the following format:
         * <code>array(x,y, "x" => x, "y" => y)</code>
         *
         * @link http://www.w3.org/TR/CSS21/colors.html#propdef-background-position
         * @return array
         */
        function get_background_position()
        {
        }
        /**
         * Returns the background size as an array
         *
         * The return value has one of the following formats:
         * <code>"cover"</code>
         * <code>"contain"</code>
         * <code>array(width,height)</code>
         *
         * @link https://www.w3.org/TR/css3-background/#background-size
         * @return string|array
         */
        function get_background_size()
        {
        }
        /**#@+
         * Returns the border color as an array
         *
         * See {@link Style::get_color()}
         *
         * @link http://www.w3.org/TR/CSS21/box.html#border-color-properties
         * @return array
         */
        function get_border_top_color()
        {
        }
        /**
         * @return array
         */
        function get_border_right_color()
        {
        }
        /**
         * @return array
         */
        function get_border_bottom_color()
        {
        }
        /**
         * @return array
         */
        function get_border_left_color()
        {
        }
        /**#@-*/
        /**
         * Return an array of all border properties.
         *
         * The returned array has the following structure:
         * <code>
         * array("top" => array("width" => [border-width],
         *                      "style" => [border-style],
         *                      "color" => [border-color (array)]),
         *       "bottom" ... )
         * </code>
         *
         * @return array
         */
        function get_border_properties()
        {
        }
        /**
         * Return a single border property
         *
         * @param string $side
         *
         * @return mixed
         */
        protected function _get_border($side)
        {
        }
        /**#@+
         * Return full border properties as a string
         *
         * Border properties are returned just as specified in CSS:
         * <pre>[width] [style] [color]</pre>
         * e.g. "1px solid blue"
         *
         * @link http://www.w3.org/TR/CSS21/box.html#border-shorthand-properties
         * @return string
         */
        function get_border_top()
        {
        }
        /**
         * @return mixed
         */
        function get_border_right()
        {
        }
        /**
         * @return mixed
         */
        function get_border_bottom()
        {
        }
        /**
         * @return mixed
         */
        function get_border_left()
        {
        }
        /**
         * @deprecated
         * @param float $w
         * @param float $h
         * @return float[]
         */
        function get_computed_border_radius($w, $h)
        {
        }
        public function has_border_radius() : bool
        {
        }
        /**
         * Get the final border-radius values to use.
         *
         * Percentage values are resolved relative to the width of the border box.
         * The border radius is additionally scaled for the given render box, and
         * constrained by its width and height.
         *
         * @param float[]      $border_box The border box of the frame.
         * @param float[]|null $render_box The box to resolve the border radius for.
         *
         * @return float[] A 4-tuple of top-left, top-right, bottom-right, and bottom-left radius.
         */
        public function resolve_border_radius(array $border_box, ?array $render_box = null) : array
        {
        }
        /**
         * Returns the outline color as an array
         *
         * See {@link Style::get_color()}
         *
         * @link http://www.w3.org/TR/CSS21/box.html#border-color-properties
         * @return array
         */
        function get_outline_color()
        {
        }
        /**
         * Return full outline properties as a string
         *
         * Outline properties are returned just as specified in CSS:
         * <pre>[width] [style] [color]</pre>
         * e.g. "1px solid blue"
         *
         * @link http://www.w3.org/TR/CSS21/box.html#border-shorthand-properties
         * @return string
         */
        function get_outline()
        {
        }
        /**
         * Returns border spacing as an array
         *
         * The array has the format (h_space,v_space)
         *
         * @link http://www.w3.org/TR/CSS21/tables.html#propdef-border-spacing
         * @return array
         */
        function get_border_spacing()
        {
        }
        /**
         * Returns the list style image URI, or "none"
         *
         * @link http://www.w3.org/TR/CSS21/generate.html#propdef-list-style-image
         * @return string
         */
        function get_list_style_image()
        {
        }
        /**
         * @param string $value
         * @param int    $default
         *
         * @return array|string
         */
        protected function parse_counter_prop(string $value, int $default)
        {
        }
        /**
         * @return array|string
         */
        function get_counter_increment()
        {
        }
        /**
         * @return array|string
         */
        protected function get_counter_reset()
        {
        }
        /**
         * @return string[]|string
         */
        protected function get_content()
        {
        }
        /*==============================*/
        /**
         * Parse a property value into its components.
         *
         * @param string $value
         *
         * @return string[]
         */
        protected function parse_property_value(string $value) : array
        {
        }
        protected function is_color_value(string $val) : bool
        {
        }
        protected function prop_name(string $style, string $side, string $type) : string
        {
        }
        /**
         * Generalized set function for individual attribute of combined style.
         *
         * Applicable for margin, border, padding, outline.
         *
         * @param string $style
         * @param string $side
         * @param string $type
         * @param mixed $val
         */
        protected function _set_style_side_type($style, $side, $type, $val)
        {
        }
        /**
         * @param string $style
         * @param string $type
         * @param mixed $val
         * @param bool $important
         */
        protected function _set_style_type($style, $type, $val, $important)
        {
        }
        /*======================*/
        /**
         * https://www.w3.org/TR/CSS21/visuren.html#display-prop
         *
         * @param string $val
         */
        protected function set_display(string $val) : void
        {
        }
        protected function set_prop_color($prop, $val)
        {
        }
        /**
         * Sets color
         *
         * The color parameter can be any valid CSS color value
         *
         * @link http://www.w3.org/TR/CSS21/colors.html#propdef-color
         * @param string $color
         */
        function set_color($color)
        {
        }
        /**
         * Sets the background color
         *
         * @link http://www.w3.org/TR/CSS21/colors.html#propdef-background-color
         * @param string $color
         */
        function set_background_color($color)
        {
        }
        /**
         * Set the background image url
         * @link https://www.w3.org/TR/CSS21/colors.html#propdef-background-image
         *
         * @param string $val
         */
        function set_background_image($val)
        {
        }
        /**
         * Sets the background repeat
         *
         * @link http://www.w3.org/TR/CSS21/colors.html#propdef-background-repeat
         * @param string $val
         */
        function set_background_repeat($val)
        {
        }
        /**
         * Sets the background attachment
         *
         * @link http://www.w3.org/TR/CSS21/colors.html#propdef-background-attachment
         * @param string $val
         */
        function set_background_attachment($val)
        {
        }
        /**
         * Sets the background position
         *
         * @link http://www.w3.org/TR/CSS21/colors.html#propdef-background-position
         * @param string $val
         */
        function set_background_position($val)
        {
        }
        /**
         * Sets the background size
         *
         * @link https://www.w3.org/TR/css3-background/#background-size
         * @param string $val
         */
        function set_background_size($val)
        {
        }
        /**
         * Sets the background - combined options
         *
         * @link http://www.w3.org/TR/CSS21/colors.html#propdef-background
         * @param string $value
         * @param bool $important
         */
        function set_background($value, bool $important = false)
        {
        }
        /**
         * Sets the font size
         *
         * $size can be any acceptable CSS size
         *
         * @link http://www.w3.org/TR/CSS21/fonts.html#propdef-font-size
         * @param string|float $size
         */
        function set_font_size($size)
        {
        }
        /**
         * Sets the font weight
         *
         * @param string|int $weight
         */
        function set_font_weight($weight)
        {
        }
        /**
         * Sets the font style
         *
         * combined attributes
         * set individual attributes also, respecting !important mark
         * exactly this order, separate by space. Multiple fonts separated by comma:
         * font-style, font-variant, font-weight, font-size, line-height, font-family
         *
         * Other than with border and list, existing partial attributes should
         * reset when starting here, even when not mentioned.
         * If individual attribute is !important and explicit or implicit replacement is not,
         * keep individual attribute
         *
         * require whitespace as delimiters for single value attributes
         * On delimiter "/" treat first as font height, second as line height
         * treat all remaining at the end of line as font
         * font-style, font-variant, font-weight, font-size, line-height, font-family
         *
         * missing font-size and font-family might be not allowed, but accept it here and
         * use default (medium size, empty font name)
         *
         * @link https://www.w3.org/TR/CSS21/fonts.html#font-shorthand
         * @param string $val
         * @param bool $important
         */
        function set_font($val, bool $important = false)
        {
        }
        /**
         * Sets the text alignment
         *
         * If no alignment is set on the element and the direction is rtl then
         * the property is set to "right", otherwise it is set to "left".
         *
         * @link https://www.w3.org/TR/CSS21/text.html#propdef-text-align
         */
        public function set_text_align($val)
        {
        }
        /**
         * Sets word spacing property
         *
         * @link http://www.w3.org/TR/CSS21/text.html#propdef-word-spacing
         * @param $val
         */
        function set_word_spacing($val)
        {
        }
        /**
         * Sets letter spacing property
         *
         * @link http://www.w3.org/TR/CSS21/text.html#propdef-letter-spacing
         * @param $val
         */
        function set_letter_spacing($val)
        {
        }
        /**
         * Sets line height property
         *
         * @link http://www.w3.org/TR/CSS21/visudet.html#propdef-line-height
         * @param $val
         */
        function set_line_height($val)
        {
        }
        /**
         * Sets page break properties
         *
         * @link http://www.w3.org/TR/CSS21/page.html#page-breaks
         * @param string $break
         */
        function set_page_break_before($break)
        {
        }
        /**
         * @param $break
         */
        function set_page_break_after($break)
        {
        }
        /**
         * Sets the margin size
         *
         * @link http://www.w3.org/TR/CSS21/box.html#margin-properties
         * @param $val
         */
        function set_margin_top($val)
        {
        }
        /**
         * @param $val
         */
        function set_margin_right($val)
        {
        }
        /**
         * @param $val
         */
        function set_margin_bottom($val)
        {
        }
        /**
         * @param $val
         */
        function set_margin_left($val)
        {
        }
        /**
         * @param string $val
         * @param bool $important
         */
        function set_margin($val, bool $important = false)
        {
        }
        /**
         * Sets the padding size
         *
         * @link http://www.w3.org/TR/CSS21/box.html#padding-properties
         * @param $val
         */
        function set_padding_top($val)
        {
        }
        /**
         * @param $val
         */
        function set_padding_right($val)
        {
        }
        /**
         * @param $val
         */
        function set_padding_bottom($val)
        {
        }
        /**
         * @param $val
         */
        function set_padding_left($val)
        {
        }
        /**
         * @param string $val
         * @param bool $important
         */
        function set_padding($val, bool $important = false)
        {
        }
        /**
         * Sets a single border
         *
         * @param string $side
         * @param string $border_spec ([width] [style] [color])
         * @param bool $important
         */
        protected function _set_border($side, $border_spec, bool $important)
        {
        }
        /**
         * @link http://www.w3.org/TR/CSS21/box.html#border-properties
         * @param string $val
         * @param bool $important
         */
        function set_border_top($val, bool $important = false)
        {
        }
        function set_border_top_color($val)
        {
        }
        function set_border_top_style($val)
        {
        }
        function set_border_top_width($val)
        {
        }
        /**
         * @param string $val
         * @param bool $important
         */
        function set_border_right($val, bool $important = false)
        {
        }
        function set_border_right_color($val)
        {
        }
        function set_border_right_style($val)
        {
        }
        function set_border_right_width($val)
        {
        }
        /**
         * @param string $val
         * @param bool $important
         */
        function set_border_bottom($val, bool $important = false)
        {
        }
        function set_border_bottom_color($val)
        {
        }
        function set_border_bottom_style($val)
        {
        }
        function set_border_bottom_width($val)
        {
        }
        /**
         * @param string $val
         * @param bool $important
         */
        function set_border_left($val, bool $important = false)
        {
        }
        function set_border_left_color($val)
        {
        }
        function set_border_left_style($val)
        {
        }
        function set_border_left_width($val)
        {
        }
        /**
         * @param string $val
         * @param bool $important
         */
        function set_border($val, bool $important = false)
        {
        }
        /**
         * @param string $val
         * @param bool $important
         */
        function set_border_width($val, bool $important = false)
        {
        }
        /**
         * @param string $val
         * @param bool $important
         */
        function set_border_color($val, bool $important = false)
        {
        }
        /**
         * @param string $val
         * @param bool $important
         */
        function set_border_style($val, bool $important = false)
        {
        }
        /**
         * Sets the border radius size
         *
         * http://www.w3.org/TR/css3-background/#corners
         *
         * @param string $val
         */
        function set_border_top_left_radius($val)
        {
        }
        /**
         * @param string $val
         */
        function set_border_top_right_radius($val)
        {
        }
        /**
         * @param string $val
         */
        function set_border_bottom_left_radius($val)
        {
        }
        /**
         * @param string $val
         */
        function set_border_bottom_right_radius($val)
        {
        }
        /**
         * @param string $val
         * @param bool $important
         */
        function set_border_radius($val, bool $important = false)
        {
        }
        /**
         * @param string $val
         * @param string $corner
         */
        protected function _set_border_radius_corner($val, $corner)
        {
        }
        /**
         * @return float|int|string
         */
        function get_border_top_left_radius()
        {
        }
        /**
         * @return float|int|string
         */
        function get_border_top_right_radius()
        {
        }
        /**
         * @return float|int|string
         */
        function get_border_bottom_left_radius()
        {
        }
        /**
         * @return float|int|string
         */
        function get_border_bottom_right_radius()
        {
        }
        /**
         * @param $corner
         * @return float|int|string
         */
        protected function _get_border_radius_corner($corner)
        {
        }
        /**
         * Sets the outline styles
         *
         * @link http://www.w3.org/TR/CSS21/ui.html#dynamic-outlines
         * @param string $value
         * @param bool $important
         */
        function set_outline($value, bool $important = false)
        {
        }
        /**
         * @param $val
         */
        function set_outline_width($val)
        {
        }
        /**
         * @param $val
         */
        function set_outline_color($val)
        {
        }
        /**
         * @param $val
         */
        function set_outline_style($val)
        {
        }
        /**
         * Sets the border spacing
         *
         * @link http://www.w3.org/TR/CSS21/box.html#border-properties
         * @param float $val
         */
        function set_border_spacing($val)
        {
        }
        /**
         * Sets the list style image
         *
         * @link http://www.w3.org/TR/CSS21/generate.html#propdef-list-style-image
         * @param $val
         */
        function set_list_style_image($val)
        {
        }
        /**
         * Sets the list style
         *
         * @link http://www.w3.org/TR/CSS21/generate.html#propdef-list-style
         * @param string $value
         * @param bool $important
         */
        function set_list_style($value, bool $important = false)
        {
        }
        /**
         * @param $val
         */
        function set_size($val)
        {
        }
        /**
         * Gets the CSS3 transform property
         *
         * @link http://www.w3.org/TR/css3-2d-transforms/#transform-property
         * @return array|null
         */
        function get_transform()
        {
        }
        /**
         * @param $val
         */
        function set_transform($val)
        {
        }
        /**
         * Sets the CSS3 transform-origin property
         *
         * @link http://www.w3.org/TR/css3-2d-transforms/#transform-origin
         * @param string $val
         */
        function set_transform_origin($val)
        {
        }
        /**
         * Gets the CSS3 transform-origin property
         *
         * @link http://www.w3.org/TR/css3-2d-transforms/#transform-origin
         * @return mixed[]
         */
        function get_transform_origin()
        {
        }
        /**
         * @param $val
         * @return null
         */
        protected function parse_image_resolution($val)
        {
        }
        /**
         * auto | normal | dpi
         *
         * @param $val
         */
        function set_background_image_resolution($val)
        {
        }
        /**
         * auto | normal | dpi
         *
         * @param $val
         */
        function set_image_resolution($val)
        {
        }
        /**
         * @param $val
         */
        function set_z_index($val)
        {
        }
        /**
         * @param FontMetrics $fontMetrics
         * @return $this
         */
        public function setFontMetrics(\Dompdf\FontMetrics $fontMetrics)
        {
        }
        /**
         * @return FontMetrics
         */
        public function getFontMetrics()
        {
        }
        /**
         * Generate a string representation of the Style
         *
         * This dumps the entire property array into a string via print_r.  Useful
         * for debugging.
         *
         * @return string
         */
        /*DEBUGCSS print: see below additional debugging util*/
        function __toString()
        {
        }
        /*DEBUGCSS*/
        function debug_print()
        {
        }
    }
    class Color
    {
        static $cssColorNames = ["aliceblue" => "F0F8FF", "antiquewhite" => "FAEBD7", "aqua" => "00FFFF", "aquamarine" => "7FFFD4", "azure" => "F0FFFF", "beige" => "F5F5DC", "bisque" => "FFE4C4", "black" => "000000", "blanchedalmond" => "FFEBCD", "blue" => "0000FF", "blueviolet" => "8A2BE2", "brown" => "A52A2A", "burlywood" => "DEB887", "cadetblue" => "5F9EA0", "chartreuse" => "7FFF00", "chocolate" => "D2691E", "coral" => "FF7F50", "cornflowerblue" => "6495ED", "cornsilk" => "FFF8DC", "crimson" => "DC143C", "cyan" => "00FFFF", "darkblue" => "00008B", "darkcyan" => "008B8B", "darkgoldenrod" => "B8860B", "darkgray" => "A9A9A9", "darkgreen" => "006400", "darkgrey" => "A9A9A9", "darkkhaki" => "BDB76B", "darkmagenta" => "8B008B", "darkolivegreen" => "556B2F", "darkorange" => "FF8C00", "darkorchid" => "9932CC", "darkred" => "8B0000", "darksalmon" => "E9967A", "darkseagreen" => "8FBC8F", "darkslateblue" => "483D8B", "darkslategray" => "2F4F4F", "darkslategrey" => "2F4F4F", "darkturquoise" => "00CED1", "darkviolet" => "9400D3", "deeppink" => "FF1493", "deepskyblue" => "00BFFF", "dimgray" => "696969", "dimgrey" => "696969", "dodgerblue" => "1E90FF", "firebrick" => "B22222", "floralwhite" => "FFFAF0", "forestgreen" => "228B22", "fuchsia" => "FF00FF", "gainsboro" => "DCDCDC", "ghostwhite" => "F8F8FF", "gold" => "FFD700", "goldenrod" => "DAA520", "gray" => "808080", "green" => "008000", "greenyellow" => "ADFF2F", "grey" => "808080", "honeydew" => "F0FFF0", "hotpink" => "FF69B4", "indianred" => "CD5C5C", "indigo" => "4B0082", "ivory" => "FFFFF0", "khaki" => "F0E68C", "lavender" => "E6E6FA", "lavenderblush" => "FFF0F5", "lawngreen" => "7CFC00", "lemonchiffon" => "FFFACD", "lightblue" => "ADD8E6", "lightcoral" => "F08080", "lightcyan" => "E0FFFF", "lightgoldenrodyellow" => "FAFAD2", "lightgray" => "D3D3D3", "lightgreen" => "90EE90", "lightgrey" => "D3D3D3", "lightpink" => "FFB6C1", "lightsalmon" => "FFA07A", "lightseagreen" => "20B2AA", "lightskyblue" => "87CEFA", "lightslategray" => "778899", "lightslategrey" => "778899", "lightsteelblue" => "B0C4DE", "lightyellow" => "FFFFE0", "lime" => "00FF00", "limegreen" => "32CD32", "linen" => "FAF0E6", "magenta" => "FF00FF", "maroon" => "800000", "mediumaquamarine" => "66CDAA", "mediumblue" => "0000CD", "mediumorchid" => "BA55D3", "mediumpurple" => "9370DB", "mediumseagreen" => "3CB371", "mediumslateblue" => "7B68EE", "mediumspringgreen" => "00FA9A", "mediumturquoise" => "48D1CC", "mediumvioletred" => "C71585", "midnightblue" => "191970", "mintcream" => "F5FFFA", "mistyrose" => "FFE4E1", "moccasin" => "FFE4B5", "navajowhite" => "FFDEAD", "navy" => "000080", "oldlace" => "FDF5E6", "olive" => "808000", "olivedrab" => "6B8E23", "orange" => "FFA500", "orangered" => "FF4500", "orchid" => "DA70D6", "palegoldenrod" => "EEE8AA", "palegreen" => "98FB98", "paleturquoise" => "AFEEEE", "palevioletred" => "DB7093", "papayawhip" => "FFEFD5", "peachpuff" => "FFDAB9", "peru" => "CD853F", "pink" => "FFC0CB", "plum" => "DDA0DD", "powderblue" => "B0E0E6", "purple" => "800080", "red" => "FF0000", "rosybrown" => "BC8F8F", "royalblue" => "4169E1", "saddlebrown" => "8B4513", "salmon" => "FA8072", "sandybrown" => "F4A460", "seagreen" => "2E8B57", "seashell" => "FFF5EE", "sienna" => "A0522D", "silver" => "C0C0C0", "skyblue" => "87CEEB", "slateblue" => "6A5ACD", "slategray" => "708090", "slategrey" => "708090", "snow" => "FFFAFA", "springgreen" => "00FF7F", "steelblue" => "4682B4", "tan" => "D2B48C", "teal" => "008080", "thistle" => "D8BFD8", "tomato" => "FF6347", "turquoise" => "40E0D0", "violet" => "EE82EE", "wheat" => "F5DEB3", "white" => "FFFFFF", "whitesmoke" => "F5F5F5", "yellow" => "FFFF00", "yellowgreen" => "9ACD32"];
        /**
         * @param $color
         * @return array|string|null
         */
        static function parse($color)
        {
        }
        /**
         * @param $color
         * @param float $alpha
         * @return array
         */
        static function getArray($color, $alpha = 1.0)
        {
        }
    }
}
namespace Dompdf {
    class Helpers
    {
        /**
         * print_r wrapper for html/cli output
         *
         * Wraps print_r() output in < pre > tags if the current sapi is not 'cli'.
         * Returns the output string instead of displaying it if $return is true.
         *
         * @param mixed $mixed variable or expression to display
         * @param bool $return
         *
         * @return string|null
         */
        public static function pre_r($mixed, $return = false)
        {
        }
        /**
         * builds a full url given a protocol, hostname, base path and url
         *
         * @param string $protocol
         * @param string $host
         * @param string $base_path
         * @param string $url
         * @return string
         *
         * Initially the trailing slash of $base_path was optional, and conditionally appended.
         * However on dynamically created sites, where the page is given as url parameter,
         * the base path might not end with an url.
         * Therefore do not append a slash, and **require** the $base_url to ending in a slash
         * when needed.
         * Vice versa, on using the local file system path of a file, make sure that the slash
         * is appended (o.k. also for Windows)
         */
        public static function build_url($protocol, $host, $base_path, $url)
        {
        }
        /**
         * Builds a HTTP Content-Disposition header string using `$dispositionType`
         * and `$filename`.
         *
         * If the filename contains any characters not in the ISO-8859-1 character
         * set, a fallback filename will be included for clients not supporting the
         * `filename*` parameter.
         *
         * @param string $dispositionType
         * @param string $filename
         * @return string
         */
        public static function buildContentDispositionHeader($dispositionType, $filename)
        {
        }
        /**
         * Converts decimal numbers to roman numerals.
         *
         * As numbers larger than 3999 (and smaller than 1) cannot be represented in
         * the standard form of roman numerals, those are left in decimal form.
         *
         * See https://en.wikipedia.org/wiki/Roman_numerals#Standard_form
         *
         * @param int|string $num
         *
         * @throws Exception
         * @return string
         */
        public static function dec2roman($num) : string
        {
        }
        /**
         * Restrict a length to the given range.
         *
         * If min > max, the result is min.
         *
         * @param float $length
         * @param float $min
         * @param float $max
         *
         * @return float
         */
        public static function clamp(float $length, float $min, float $max) : float
        {
        }
        /**
         * Determines whether $value is a percentage or not
         *
         * @param string|float|int $value
         *
         * @return bool
         */
        public static function is_percent($value) : bool
        {
        }
        /**
         * Parses a data URI scheme
         * http://en.wikipedia.org/wiki/Data_URI_scheme
         *
         * @param string $data_uri The data URI to parse
         *
         * @return array|bool The result with charset, mime type and decoded data
         */
        public static function parse_data_uri($data_uri)
        {
        }
        /**
         * Encodes a Uniform Resource Identifier (URI) by replacing non-alphanumeric
         * characters with a percent (%) sign followed by two hex digits, excepting
         * characters in the URI reserved character set.
         *
         * Assumes that the URI is a complete URI, so does not encode reserved
         * characters that have special meaning in the URI.
         *
         * Simulates the encodeURI function available in JavaScript
         * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/encodeURI
         *
         * Source: http://stackoverflow.com/q/4929584/264628
         *
         * @param string $uri The URI to encode
         * @return string The original URL with special characters encoded
         */
        public static function encodeURI($uri)
        {
        }
        /**
         * Decoder for RLE8 compression in windows bitmaps
         * http://msdn.microsoft.com/library/default.asp?url=/library/en-us/gdi/bitmaps_6x0u.asp
         *
         * @param string $str Data to decode
         * @param int $width Image width
         *
         * @return string
         */
        public static function rle8_decode($str, $width)
        {
        }
        /**
         * Decoder for RLE4 compression in windows bitmaps
         * see http://msdn.microsoft.com/library/default.asp?url=/library/en-us/gdi/bitmaps_6x0u.asp
         *
         * @param string $str Data to decode
         * @param int $width Image width
         *
         * @return string
         */
        public static function rle4_decode($str, $width)
        {
        }
        /**
         * parse a full url or pathname and return an array(protocol, host, path,
         * file + query + fragment)
         *
         * @param string $url
         * @return array
         */
        public static function explode_url($url)
        {
        }
        /**
         * Print debug messages
         *
         * @param string $type The type of debug messages to print
         * @param string $msg The message to show
         */
        public static function dompdf_debug($type, $msg)
        {
        }
        /**
         * Stores warnings in an array for display later
         * This function allows warnings generated by the DomDocument parser
         * and CSS loader ({@link Stylesheet}) to be captured and displayed
         * later.  Without this function, errors are displayed immediately and
         * PDF streaming is impossible.
         * @see http://www.php.net/manual/en/function.set-error_handler.php
         *
         * @param int $errno
         * @param string $errstr
         * @param string $errfile
         * @param string $errline
         *
         * @throws Exception
         */
        public static function record_warnings($errno, $errstr, $errfile, $errline)
        {
        }
        /**
         * @param $c
         * @return bool|string
         */
        public static function unichr($c)
        {
        }
        /**
         * Converts a CMYK color to RGB
         *
         * @param float|float[] $c
         * @param float $m
         * @param float $y
         * @param float $k
         *
         * @return float[]
         */
        public static function cmyk_to_rgb($c, $m = null, $y = null, $k = null)
        {
        }
        /**
         * getimagesize doesn't give a good size for 32bit BMP image v5
         *
         * @param string $filename
         * @param resource $context
         * @return array An array of three elements: width and height as
         *         `float|int`, and image type as `string|null`.
         */
        public static function dompdf_getimagesize($filename, $context = null)
        {
        }
        /**
         * Credit goes to mgutt
         * http://www.programmierer-forum.de/function-imagecreatefrombmp-welche-variante-laeuft-t143137.htm
         * Modified by Fabien Menager to support RGB555 BMP format
         */
        public static function imagecreatefrombmp($filename, $context = null)
        {
        }
        /**
         * Gets the content of the file at the specified path using one of
         * the following methods, in preferential order:
         *  - file_get_contents: if allow_url_fopen is true or the file is local
         *  - curl: if allow_url_fopen is false and curl is available
         *
         * @param string $uri
         * @param resource $context (ignored if curl is used)
         * @param int $offset
         * @param int $maxlen (ignored if curl is used)
         * @return string[]
         */
        public static function getFileContent($uri, $context = null, $offset = 0, $maxlen = null)
        {
        }
        /**
         * @param string $str
         * @return string
         */
        public static function mb_ucwords(string $str) : string
        {
        }
        /**
         * Check whether two lengths should be considered equal, accounting for
         * inaccuracies in float computation.
         *
         * The implementation relies on the fact that we are neither dealing with
         * very large, nor with very small numbers in layout. Adapted from
         * https://floating-point-gui.de/errors/comparison/.
         *
         * @param float $a
         * @param float $b
         *
         * @return bool
         */
        public static function lengthEqual(float $a, float $b) : bool
        {
        }
        /**
         * Check `$a < $b`, accounting for inaccuracies in float computation.
         */
        public static function lengthLess(float $a, float $b) : bool
        {
        }
        /**
         * Check `$a <= $b`, accounting for inaccuracies in float computation.
         */
        public static function lengthLessOrEqual(float $a, float $b) : bool
        {
        }
        /**
         * Check `$a > $b`, accounting for inaccuracies in float computation.
         */
        public static function lengthGreater(float $a, float $b) : bool
        {
        }
        /**
         * Check `$a >= $b`, accounting for inaccuracies in float computation.
         */
        public static function lengthGreaterOrEqual(float $a, float $b) : bool
        {
        }
    }
}
namespace Dompdf\Image {
    /**
     * Static class that resolves image urls and downloads and caches
     * remote images if required.
     *
     * @package dompdf
     */
    class Cache
    {
        /**
         * Array of downloaded images.  Cached so that identical images are
         * not needlessly downloaded.
         *
         * @var array
         */
        protected static $_cache = [];
        /**
         * @var array
         */
        protected static $tempImages = [];
        /**
         * The url to the "broken image" used when images can't be loaded
         *
         * @var string
         */
        public static $broken_image = "data:image/svg+xml;charset=utf8,%3C?xml version='1.0'?%3E%3Csvg width='64' height='64' xmlns='http://www.w3.org/2000/svg'%3E%3Cg%3E%3Crect stroke='%23666666' id='svg_1' height='60.499994' width='60.166667' y='1.666669' x='1.999998' stroke-width='1.5' fill='none'/%3E%3Cline stroke-linecap='null' stroke-linejoin='null' id='svg_3' y2='59.333253' x2='59.749916' y1='4.333415' x1='4.250079' stroke-width='1.5' stroke='%23999999' fill='none'/%3E%3Cline stroke-linecap='null' stroke-linejoin='null' id='svg_4' y2='59.999665' x2='4.062838' y1='3.750342' x1='60.062164' stroke-width='1.5' stroke='%23999999' fill='none'/%3E%3C/g%3E%3C/svg%3E";
        public static $error_message = "Image not found or type unknown";
        /**
         * Current dompdf instance
         *
         * @var Dompdf
         */
        protected static $_dompdf;
        /**
         * Resolve and fetch an image for use.
         *
         * @param string $url       The url of the image
         * @param string $protocol  Default protocol if none specified in $url
         * @param string $host      Default host if none specified in $url
         * @param string $base_path Default path if none specified in $url
         * @param Dompdf $dompdf    The Dompdf instance
         *
         * @throws ImageException
         * @return array             An array with two elements: The local path to the image and the image extension
         */
        static function resolve_url($url, $protocol, $host, $base_path, \Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * Register a temp file for the given original image file.
         *
         * @param string $filePath The path of the original image.
         * @param string $tempPath The path of the temp file to register.
         * @param string $key      An optional key to register the temp file at.
         */
        static function addTempImage(string $filePath, string $tempPath, string $key = "default") : void
        {
        }
        /**
         * Get the path of a temp file registered for the given original image file.
         *
         * @param string $filePath The path of the original image.
         * @param string $key      The key the temp file is registered at.
         */
        static function getTempImage(string $filePath, string $key = "default") : ?string
        {
        }
        /**
         * Unlink all cached images (i.e. temporary images either downloaded
         * or converted) except for the bundled "broken image"
         */
        static function clear(bool $debugPng = false)
        {
        }
        static function detect_type($file, $context = null)
        {
        }
        static function is_broken($url)
        {
        }
    }
}
namespace Dompdf {
    /**
     * Autoloads Dompdf classes
     *
     * @package Dompdf
     */
    class Autoloader
    {
        const PREFIX = 'Dompdf';
        /**
         * Register the autoloader
         */
        public static function register()
        {
        }
        /**
         * Autoloader
         *
         * @param string
         */
        public static function autoload($class)
        {
        }
    }
    /**
     * Executes inline PHP code during the rendering process
     *
     * @package dompdf
     */
    class PhpEvaluator
    {
        /**
         * @var Canvas
         */
        protected $_canvas;
        /**
         * PhpEvaluator constructor.
         * @param Canvas $canvas
         */
        public function __construct(\Dompdf\Canvas $canvas)
        {
        }
        /**
         * @param $code
         * @param array $vars
         */
        public function evaluate($code, $vars = [])
        {
        }
        /**
         * @param Frame $frame
         */
        public function render(\Dompdf\Frame $frame)
        {
        }
    }
}
namespace Dompdf\Renderer {
    /**
     * Base renderer class
     *
     * @package dompdf
     */
    abstract class AbstractRenderer
    {
        /**
         * Rendering backend
         *
         * @var \Dompdf\Canvas
         */
        protected $_canvas;
        /**
         * Current dompdf instance
         *
         * @var Dompdf
         */
        protected $_dompdf;
        /**
         * Class constructor
         *
         * @param Dompdf $dompdf The current dompdf instance
         */
        function __construct(\Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * Render a frame.
         *
         * Specialized in child classes
         *
         * @param Frame $frame The frame to render
         */
        abstract function render(\Dompdf\Frame $frame);
        /**
         * Render a background image over a rectangular area
         *
         * @param string $url   The background image to load
         * @param float $x      The left edge of the rectangular area
         * @param float $y      The top edge of the rectangular area
         * @param float $width  The width of the rectangular area
         * @param float $height The height of the rectangular area
         * @param Style $style  The associated Style object
         *
         * @throws \Exception
         */
        protected function _background_image($url, $x, $y, $width, $height, $style)
        {
        }
        /**
         * @param $style
         * @param $width
         * @return array
         */
        protected function _get_dash_pattern($style, $width)
        {
        }
        /**
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param int $r1
         * @param int $r2
         */
        protected function _border_none($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $r1 = 0, $r2 = 0)
        {
        }
        /**
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param int $r1
         * @param int $r2
         */
        protected function _border_hidden($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $r1 = 0, $r2 = 0)
        {
        }
        // Border rendering functions
        /**
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param int $r1
         * @param int $r2
         */
        protected function _border_dotted($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $r1 = 0, $r2 = 0)
        {
        }
        /**
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param int $r1
         * @param int $r2
         */
        protected function _border_dashed($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $r1 = 0, $r2 = 0)
        {
        }
        /**
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param int $r1
         * @param int $r2
         */
        protected function _border_solid($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $r1 = 0, $r2 = 0)
        {
        }
        /**
         * @param $side
         * @param $ratio
         * @param $top
         * @param $right
         * @param $bottom
         * @param $left
         * @param $x
         * @param $y
         * @param $length
         * @param $r1
         * @param $r2
         */
        protected function _apply_ratio($side, $ratio, $top, $right, $bottom, $left, &$x, &$y, &$length, &$r1, &$r2)
        {
        }
        /**
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param int $r1
         * @param int $r2
         */
        protected function _border_double($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $r1 = 0, $r2 = 0)
        {
        }
        /**
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param int $r1
         * @param int $r2
         */
        protected function _border_groove($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $r1 = 0, $r2 = 0)
        {
        }
        /**
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param int $r1
         * @param int $r2
         */
        protected function _border_ridge($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $r1 = 0, $r2 = 0)
        {
        }
        /**
         * @param $c
         * @return mixed
         */
        protected function _tint($c)
        {
        }
        /**
         * @param $c
         * @return mixed
         */
        protected function _shade($c)
        {
        }
        /**
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param int $r1
         * @param int $r2
         */
        protected function _border_inset($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $r1 = 0, $r2 = 0)
        {
        }
        /**
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param int $r1
         * @param int $r2
         */
        protected function _border_outset($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $r1 = 0, $r2 = 0)
        {
        }
        /**
         * Draws a solid, dotted, or dashed line, observing the border radius
         *
         * @param $x
         * @param $y
         * @param $length
         * @param $color
         * @param $widths
         * @param $side
         * @param string $corner_style
         * @param $pattern_name
         * @param int $r1
         * @param int $r2
         *
         * @var $top
         */
        protected function _border_line($x, $y, $length, $color, $widths, $side, $corner_style = "bevel", $pattern_name = "none", $r1 = 0, $r2 = 0)
        {
        }
        /**
         * @param $opacity
         */
        protected function _set_opacity($opacity)
        {
        }
        /**
         * @param array $box
         * @param string $color
         * @param array $style
         */
        protected function _debug_layout($box, $color = "red", $style = [])
        {
        }
        /**
         * @param float $img_width
         * @param float $img_height
         * @param float $container_width
         * @param float $container_height
         * @param array|string $bg_resize
         * @param int $dpi
         * @return array
         */
        protected function _resize_background_image($img_width, $img_height, $container_width, $container_height, $bg_resize, $dpi)
        {
        }
    }
}
namespace Dompdf {
    /**
     * Concrete renderer
     *
     * Instantiates several specific renderers in order to render any given frame.
     *
     * @package dompdf
     */
    class Renderer extends \Dompdf\Renderer\AbstractRenderer
    {
        /**
         * Array of renderers for specific frame types
         *
         * @var AbstractRenderer[]
         */
        protected $_renderers;
        /**
         * Advance the canvas to the next page
         */
        function new_page()
        {
        }
        /**
         * Render frames recursively
         *
         * @param Frame $frame the frame to render
         */
        public function render(\Dompdf\Frame $frame)
        {
        }
        /**
         * Check for callbacks that need to be performed when a given event
         * gets triggered on a frame
         *
         * @param string $event The type of event
         * @param Frame  $frame The frame that event is triggered on
         */
        protected function _check_callbacks(string $event, \Dompdf\Frame $frame) : void
        {
        }
        /**
         * Render a single frame
         *
         * Creates Renderer objects on demand
         *
         * @param string $type type of renderer to use
         * @param Frame $frame the frame to render
         */
        protected function _render_frame($type, $frame)
        {
        }
    }
    /**
     * Embeds Javascript into the PDF document
     *
     * @package dompdf
     */
    class JavascriptEmbedder
    {
        /**
         * @var Dompdf
         */
        protected $_dompdf;
        /**
         * JavascriptEmbedder constructor.
         *
         * @param Dompdf $dompdf
         */
        public function __construct(\Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * @param $script
         */
        public function insert($script)
        {
        }
        /**
         * @param Frame $frame
         */
        public function render(\Dompdf\Frame $frame)
        {
        }
    }
    /**
     * The font metrics class
     *
     * This class provides information about fonts and text.  It can resolve
     * font names into actual installed font files, as well as determine the
     * size of text in a particular font and size.
     *
     * @static
     * @package dompdf
     */
    class FontMetrics
    {
        /**
         * Name of the font cache file
         *
         * This file must be writable by the webserver process only to update it
         * with save_font_families() after adding the .afm file references of a new font family
         * with FontMetrics::saveFontFamilies().
         * This is typically done only from command line with load_font.php on converting
         * ttf fonts to ufm with php-font-lib.
         */
        const CACHE_FILE = "dompdf_font_family_cache.php";
        /**
         * @var Canvas
         * @deprecated
         */
        protected $pdf;
        /**
         * Underlying {@link Canvas} object to perform text size calculations
         *
         * @var Canvas
         */
        protected $canvas;
        /**
         * Array of font family names to font files
         *
         * Usually cached by the {@link load_font.php} script
         *
         * @var array
         */
        protected $fontLookup = [];
        /**
         * Class initialization
         */
        public function __construct(\Dompdf\Canvas $canvas, \Dompdf\Options $options)
        {
        }
        /**
         * @deprecated
         */
        public function save_font_families()
        {
        }
        /**
         * Saves the stored font family cache
         *
         * The name and location of the cache file are determined by {@link
         * FontMetrics::CACHE_FILE}. This file should be writable by the
         * webserver process.
         *
         * @see FontMetrics::loadFontFamilies()
         */
        public function saveFontFamilies()
        {
        }
        /**
         * @deprecated
         */
        public function load_font_families()
        {
        }
        /**
         * Loads the stored font family cache
         *
         * @see FontMetrics::saveFontFamilies()
         */
        public function loadFontFamilies()
        {
        }
        /**
         * @param array $style
         * @param string $remote_file
         * @param resource $context
         * @return bool
         * @deprecated
         */
        public function register_font($style, $remote_file, $context = null)
        {
        }
        /**
         * @param array $style
         * @param string $remoteFile
         * @param resource $context
         * @return bool
         */
        public function registerFont($style, $remoteFile, $context = null)
        {
        }
        /**
         * @param $text
         * @param $font
         * @param $size
         * @param float $word_spacing
         * @param float $char_spacing
         * @return float
         * @deprecated
         */
        public function get_text_width($text, $font, $size, $word_spacing = 0.0, $char_spacing = 0.0)
        {
        }
        /**
         * Calculates text size, in points
         *
         * @param string $text the text to be sized
         * @param string $font the desired font
         * @param float $size  the desired font size
         * @param float $wordSpacing
         * @param float $charSpacing
         *
         * @internal param float $spacing word spacing, if any
         * @return float
         */
        public function getTextWidth($text, $font, $size, $wordSpacing = 0.0, $charSpacing = 0.0)
        {
        }
        /**
         * @param $font
         * @param $size
         * @return float
         * @deprecated
         */
        public function get_font_height($font, $size)
        {
        }
        /**
         * Calculates font height, in points
         *
         * @param string $font
         * @param float $size
         *
         * @return float
         */
        public function getFontHeight($font, $size)
        {
        }
        /**
         * Calculates font baseline, in points
         *
         * @param string $font
         * @param float $size
         *
         * @return float
         */
        public function getFontBaseline($font, $size)
        {
        }
        /**
         * @param $family_raw
         * @param string $subtype_raw
         * @return string
         * @deprecated
         */
        public function get_font($family_raw, $subtype_raw = "normal")
        {
        }
        /**
         * Resolves a font family & subtype into an actual font file
         * Subtype can be one of 'normal', 'bold', 'italic' or 'bold_italic'.  If
         * the particular font family has no suitable font file, the default font
         * ({@link Options::defaultFont}) is used.  The font file returned
         * is the absolute pathname to the font file on the system.
         *
         * @param string $familyRaw
         * @param string $subtypeRaw
         *
         * @return string
         */
        public function getFont($familyRaw, $subtypeRaw = "normal")
        {
        }
        /**
         * @param $family
         * @return null|string
         * @deprecated
         */
        public function get_family($family)
        {
        }
        /**
         * @param string $family
         * @return null|string
         */
        public function getFamily($family)
        {
        }
        /**
         * @param $type
         * @return string
         * @deprecated
         */
        public function get_type($type)
        {
        }
        /**
         * @param string $type
         * @return string
         */
        public function getType($type)
        {
        }
        /**
         * @return array
         * @deprecated
         */
        public function get_font_families()
        {
        }
        /**
         * Returns the current font lookup table
         *
         * @return array
         */
        public function getFontFamilies()
        {
        }
        /**
         * @param string $fontname
         * @param mixed $entry
         * @deprecated
         */
        public function set_font_family($fontname, $entry)
        {
        }
        /**
         * @param string $fontname
         * @param mixed $entry
         */
        public function setFontFamily($fontname, $entry)
        {
        }
        /**
         * @return string
         */
        public function getCacheFile()
        {
        }
        /**
         * @param Options $options
         * @return $this
         */
        public function setOptions(\Dompdf\Options $options)
        {
        }
        /**
         * @return Options
         */
        public function getOptions()
        {
        }
        /**
         * @param Canvas $canvas
         * @return $this
         */
        public function setCanvas(\Dompdf\Canvas $canvas)
        {
        }
        /**
         * @return Canvas
         */
        public function getCanvas()
        {
        }
    }
}
namespace Dompdf\Positioner {
    /**
     * Base AbstractPositioner class
     *
     * Defines postioner interface
     *
     * @access  private
     * @package dompdf
     */
    abstract class AbstractPositioner
    {
        /**
         * @param AbstractFrameDecorator $frame
         * @return mixed
         */
        abstract function position(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame);
        /**
         * @param AbstractFrameDecorator $frame
         * @param float $offset_x
         * @param float $offset_y
         * @param bool $ignore_self
         */
        function move(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame, $offset_x, $offset_y, $ignore_self = false)
        {
        }
    }
    /**
     * Positions table rows
     *
     * @package dompdf
     */
    class TableRow extends \Dompdf\Positioner\AbstractPositioner
    {
        /**
         * @param AbstractFrameDecorator $frame
         */
        function position(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame)
        {
        }
    }
    /**
     * Positions inline frames
     *
     * @package dompdf
     */
    class Inline extends \Dompdf\Positioner\AbstractPositioner
    {
        /**
         * @param AbstractFrameDecorator $frame
         * @throws Exception
         */
        function position(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame)
        {
        }
    }
    /**
     * Positions absolutely positioned frames
     */
    class Absolute extends \Dompdf\Positioner\AbstractPositioner
    {
        /**
         * @param AbstractFrameDecorator $frame
         */
        function position(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame)
        {
        }
    }
    /**
     * Positions fixely positioned frames
     */
    class Fixed extends \Dompdf\Positioner\Absolute
    {
        /**
         * @param AbstractFrameDecorator $frame
         */
        function position(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame)
        {
        }
    }
    /**
     * Positions block frames
     *
     * @access  private
     * @package dompdf
     */
    class Block extends \Dompdf\Positioner\AbstractPositioner
    {
        function position(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame)
        {
        }
    }
    /**
     * Positions list bullets
     *
     * @package dompdf
     */
    class ListBullet extends \Dompdf\Positioner\AbstractPositioner
    {
        /**
         * @param ListBulletFrameDecorator $frame
         */
        function position(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame)
        {
        }
    }
    /**
     * Dummy positioner
     *
     * @package dompdf
     */
    class NullPositioner extends \Dompdf\Positioner\AbstractPositioner
    {
        /**
         * @param AbstractFrameDecorator $frame
         */
        function position(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame)
        {
        }
    }
    /**
     * Positions table cells
     *
     * @package dompdf
     */
    class TableCell extends \Dompdf\Positioner\AbstractPositioner
    {
        /**
         * @param AbstractFrameDecorator $frame
         */
        function position(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame)
        {
        }
    }
}
namespace Dompdf {
    class Options
    {
        /**
         * @param array $attributes
         */
        public function __construct(array $attributes = null)
        {
        }
        /**
         * @param array|string $attributes
         * @param null|mixed $value
         * @return $this
         */
        public function set($attributes, $value = null)
        {
        }
        /**
         * @param string $key
         * @return mixed
         */
        public function get($key)
        {
        }
        /**
         * @param string $pdfBackend
         * @return $this
         */
        public function setPdfBackend($pdfBackend)
        {
        }
        /**
         * @return string
         */
        public function getPdfBackend()
        {
        }
        /**
         * @param string $pdflibLicense
         * @return $this
         */
        public function setPdflibLicense($pdflibLicense)
        {
        }
        /**
         * @return string
         */
        public function getPdflibLicense()
        {
        }
        /**
         * @param array|string $chroot
         * @return $this
         */
        public function setChroot($chroot, $delimiter = ',')
        {
        }
        /**
         * @return array
         */
        public function getChroot()
        {
        }
        /**
         * @param boolean $debugCss
         * @return $this
         */
        public function setDebugCss($debugCss)
        {
        }
        /**
         * @return boolean
         */
        public function getDebugCss()
        {
        }
        /**
         * @param boolean $debugKeepTemp
         * @return $this
         */
        public function setDebugKeepTemp($debugKeepTemp)
        {
        }
        /**
         * @return boolean
         */
        public function getDebugKeepTemp()
        {
        }
        /**
         * @param boolean $debugLayout
         * @return $this
         */
        public function setDebugLayout($debugLayout)
        {
        }
        /**
         * @return boolean
         */
        public function getDebugLayout()
        {
        }
        /**
         * @param boolean $debugLayoutBlocks
         * @return $this
         */
        public function setDebugLayoutBlocks($debugLayoutBlocks)
        {
        }
        /**
         * @return boolean
         */
        public function getDebugLayoutBlocks()
        {
        }
        /**
         * @param boolean $debugLayoutInline
         * @return $this
         */
        public function setDebugLayoutInline($debugLayoutInline)
        {
        }
        /**
         * @return boolean
         */
        public function getDebugLayoutInline()
        {
        }
        /**
         * @param boolean $debugLayoutLines
         * @return $this
         */
        public function setDebugLayoutLines($debugLayoutLines)
        {
        }
        /**
         * @return boolean
         */
        public function getDebugLayoutLines()
        {
        }
        /**
         * @param boolean $debugLayoutPaddingBox
         * @return $this
         */
        public function setDebugLayoutPaddingBox($debugLayoutPaddingBox)
        {
        }
        /**
         * @return boolean
         */
        public function getDebugLayoutPaddingBox()
        {
        }
        /**
         * @param boolean $debugPng
         * @return $this
         */
        public function setDebugPng($debugPng)
        {
        }
        /**
         * @return boolean
         */
        public function getDebugPng()
        {
        }
        /**
         * @param string $defaultFont
         * @return $this
         */
        public function setDefaultFont($defaultFont)
        {
        }
        /**
         * @return string
         */
        public function getDefaultFont()
        {
        }
        /**
         * @param string $defaultMediaType
         * @return $this
         */
        public function setDefaultMediaType($defaultMediaType)
        {
        }
        /**
         * @return string
         */
        public function getDefaultMediaType()
        {
        }
        /**
         * @param string $defaultPaperSize
         * @return $this
         */
        public function setDefaultPaperSize($defaultPaperSize)
        {
        }
        /**
         * @param string $defaultPaperOrientation
         * @return $this
         */
        public function setDefaultPaperOrientation($defaultPaperOrientation)
        {
        }
        /**
         * @return string
         */
        public function getDefaultPaperSize()
        {
        }
        /**
         * @return string
         */
        public function getDefaultPaperOrientation()
        {
        }
        /**
         * @param int $dpi
         * @return $this
         */
        public function setDpi($dpi)
        {
        }
        /**
         * @return int
         */
        public function getDpi()
        {
        }
        /**
         * @param string $fontCache
         * @return $this
         */
        public function setFontCache($fontCache)
        {
        }
        /**
         * @return string
         */
        public function getFontCache()
        {
        }
        /**
         * @param string $fontDir
         * @return $this
         */
        public function setFontDir($fontDir)
        {
        }
        /**
         * @return string
         */
        public function getFontDir()
        {
        }
        /**
         * @param float $fontHeightRatio
         * @return $this
         */
        public function setFontHeightRatio($fontHeightRatio)
        {
        }
        /**
         * @return float
         */
        public function getFontHeightRatio()
        {
        }
        /**
         * @param boolean $isFontSubsettingEnabled
         * @return $this
         */
        public function setIsFontSubsettingEnabled($isFontSubsettingEnabled)
        {
        }
        /**
         * @return boolean
         */
        public function getIsFontSubsettingEnabled()
        {
        }
        /**
         * @return boolean
         */
        public function isFontSubsettingEnabled()
        {
        }
        /**
         * @param boolean $isHtml5ParserEnabled
         * @return $this
         */
        public function setIsHtml5ParserEnabled($isHtml5ParserEnabled)
        {
        }
        /**
         * @return boolean
         */
        public function getIsHtml5ParserEnabled()
        {
        }
        /**
         * @return boolean
         */
        public function isHtml5ParserEnabled()
        {
        }
        /**
         * @param boolean $isJavascriptEnabled
         * @return $this
         */
        public function setIsJavascriptEnabled($isJavascriptEnabled)
        {
        }
        /**
         * @return boolean
         */
        public function getIsJavascriptEnabled()
        {
        }
        /**
         * @return boolean
         */
        public function isJavascriptEnabled()
        {
        }
        /**
         * @param boolean $isPhpEnabled
         * @return $this
         */
        public function setIsPhpEnabled($isPhpEnabled)
        {
        }
        /**
         * @return boolean
         */
        public function getIsPhpEnabled()
        {
        }
        /**
         * @return boolean
         */
        public function isPhpEnabled()
        {
        }
        /**
         * @param boolean $isRemoteEnabled
         * @return $this
         */
        public function setIsRemoteEnabled($isRemoteEnabled)
        {
        }
        /**
         * @return boolean
         */
        public function getIsRemoteEnabled()
        {
        }
        /**
         * @return boolean
         */
        public function isRemoteEnabled()
        {
        }
        /**
         * @param string $logOutputFile
         * @return $this
         */
        public function setLogOutputFile($logOutputFile)
        {
        }
        /**
         * @return string
         */
        public function getLogOutputFile()
        {
        }
        /**
         * @param string $tempDir
         * @return $this
         */
        public function setTempDir($tempDir)
        {
        }
        /**
         * @return string
         */
        public function getTempDir()
        {
        }
        /**
         * @param string $rootDir
         * @return $this
         */
        public function setRootDir($rootDir)
        {
        }
        /**
         * @return string
         */
        public function getRootDir()
        {
        }
        /**
         * Sets the HTTP context
         *
         * @param resource|array $httpContext
         * @return $this
         */
        public function setHttpContext($httpContext)
        {
        }
        /**
         * Returns the HTTP context
         *
         * @return resource
         */
        public function getHttpContext()
        {
        }
    }
}
namespace Dompdf\Renderer {
    /**
     * Renders block frames
     *
     * @package dompdf
     */
    class Block extends \Dompdf\Renderer\AbstractRenderer
    {
        /**
         * @param Frame $frame
         */
        function render(\Dompdf\Frame $frame)
        {
        }
        /**
         * @param Frame $frame
         * @param float[] $border_box
         */
        protected function _render_background(\Dompdf\Frame $frame, array $border_box) : void
        {
        }
        /**
         * @param Frame $frame
         * @param float[] $border_box
         * @param string $corner_style
         */
        protected function _render_border(\Dompdf\Frame $frame, array $border_box, string $corner_style = "bevel") : void
        {
        }
        /**
         * @param Frame $frame
         * @param float[] $border_box
         * @param string $corner_style
         */
        protected function _render_outline(\Dompdf\Frame $frame, array $border_box, string $corner_style = "bevel") : void
        {
        }
        protected function debugBlockLayout(\Dompdf\Frame $frame, ?string $color, bool $lines = false) : void
        {
        }
    }
    /**
     * Renders block frames
     *
     * @package dompdf
     */
    class TableRowGroup extends \Dompdf\Renderer\Block
    {
        /**
         * @param Frame $frame
         */
        function render(\Dompdf\Frame $frame)
        {
        }
    }
    /**
     * Renders text frames
     *
     * @package dompdf
     */
    class Text extends \Dompdf\Renderer\AbstractRenderer
    {
        /** Thickness of underline. Screen: 0.08, print: better less, e.g. 0.04 */
        const DECO_THICKNESS = 0.02;
        //Tweaking if $base and $descent are not accurate.
        //Check method_exists( $this->_canvas, "get_cpdf" )
        //- For cpdf these can and must stay 0, because font metrics are used directly.
        //- For other renderers, if different values are wanted, separate the parameter sets.
        //  But $size and $size-$height seem to be accurate enough
        /** Relative to bottom of text, as fraction of height */
        const UNDERLINE_OFFSET = 0.0;
        /** Relative to top of text */
        const OVERLINE_OFFSET = 0.0;
        /** Relative to centre of text. */
        const LINETHROUGH_OFFSET = 0.0;
        /** How far to extend lines past either end, in pt */
        const DECO_EXTENSION = 0.0;
        /**
         * @param \Dompdf\FrameDecorator\Text $frame
         */
        function render(\Dompdf\Frame $frame)
        {
        }
    }
    /**
     * Renders inline frames
     *
     * @access  private
     * @package dompdf
     */
    class Inline extends \Dompdf\Renderer\AbstractRenderer
    {
        function render(\Dompdf\Frame $frame)
        {
        }
        protected function get_child_size(\Dompdf\Frame $frame, bool $do_debug_layout_line) : array
        {
        }
    }
    /**
     * Image renderer
     *
     * @access  private
     * @package dompdf
     */
    class Image extends \Dompdf\Renderer\Block
    {
        /**
         * @param ImageFrameDecorator $frame
         */
        function render(\Dompdf\Frame $frame)
        {
        }
    }
    /**
     * Renders list bullets
     *
     * @access  private
     * @package dompdf
     */
    class ListBullet extends \Dompdf\Renderer\AbstractRenderer
    {
        /**
         * @param $type
         * @return mixed|string
         */
        static function get_counter_chars($type)
        {
        }
        /**
         * @param ListBulletFrameDecorator $frame
         */
        function render(\Dompdf\Frame $frame)
        {
        }
    }
    /**
     * Renders table cells
     *
     * @package dompdf
     */
    class TableCell extends \Dompdf\Renderer\Block
    {
        /**
         * @param Frame $frame
         */
        function render(\Dompdf\Frame $frame)
        {
        }
        /**
         * @param Frame $frame
         * @param Table $table
         */
        protected function _render_collapsed_border(\Dompdf\Frame $frame, \Dompdf\FrameDecorator\Table $table) : void
        {
        }
    }
}
namespace Dompdf\FrameReflower {
    /**
     * Base reflower class
     *
     * Reflower objects are responsible for determining the width and height of
     * individual frames.  They also create line and page breaks as necessary.
     *
     * @package dompdf
     */
    abstract class AbstractFrameReflower
    {
        /**
         * Frame for this reflower
         *
         * @var AbstractFrameDecorator
         */
        protected $_frame;
        /**
         * Cached min/max child size
         *
         * @var array
         */
        protected $_min_max_child_cache;
        /**
         * Cached min/max size
         *
         * @var array
         */
        protected $_min_max_cache;
        /**
         * AbstractFrameReflower constructor.
         * @param AbstractFrameDecorator $frame
         */
        function __construct(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame)
        {
        }
        function dispose()
        {
        }
        /**
         * @return Dompdf
         */
        function get_dompdf()
        {
        }
        public function reset() : void
        {
        }
        /**
         * Determine the actual containing block for absolute and fixed position.
         *
         * https://www.w3.org/TR/CSS21/visudet.html#containing-block-details
         */
        protected function determine_absolute_containing_block() : void
        {
        }
        /**
         * Collapse frames margins
         * http://www.w3.org/TR/CSS21/box.html#collapsing-margins
         */
        protected function _collapse_margins()
        {
        }
        /**
         * Handle relative positioning according to
         * https://www.w3.org/TR/CSS21/visuren.html#relative-positioning.
         *
         * @param AbstractFrameDecorator $frame The frame to handle.
         */
        protected function position_relative(\Dompdf\FrameDecorator\AbstractFrameDecorator $frame) : void
        {
        }
        /**
         * @param Block|null $block
         */
        abstract function reflow(\Dompdf\FrameDecorator\Block $block = null);
        /**
         * Resolve the `min-width` property.
         *
         * Resolves to 0 if not set or if a percentage and the containing-block
         * width is not defined.
         *
         * @param float|null $cbw Width of the containing block.
         *
         * @return float
         */
        protected function resolve_min_width(?float $cbw) : float
        {
        }
        /**
         * Resolve the `max-width` property.
         *
         * Resolves to `INF` if not set or if a percentage and the containing-block
         * width is not defined.
         *
         * @param float|null $cbw Width of the containing block.
         *
         * @return float
         */
        protected function resolve_max_width(?float $cbw) : float
        {
        }
        /**
         * Resolve the `min-height` property.
         *
         * Resolves to 0 if not set or if a percentage and the containing-block
         * height is not defined.
         *
         * @param float|null $cbh Height of the containing block.
         *
         * @return float
         */
        protected function resolve_min_height(?float $cbh) : float
        {
        }
        /**
         * Resolve the `max-height` property.
         *
         * Resolves to `INF` if not set or if a percentage and the containing-block
         * height is not defined.
         *
         * @param float|null $cbh Height of the containing block.
         *
         * @return float
         */
        protected function resolve_max_height(?float $cbh) : float
        {
        }
        /**
         * Get the minimum and maximum preferred width of the contents of the frame,
         * as requested by its children.
         *
         * @return array A two-element array of min and max width.
         */
        public function get_min_max_child_width() : array
        {
        }
        /**
         * Get the minimum and maximum preferred content-box width of the frame.
         *
         * @return array A two-element array of min and max width.
         */
        public function get_min_max_content_width() : array
        {
        }
        /**
         * Get the minimum and maximum preferred border-box width of the frame.
         *
         * Required for shrink-to-fit width calculation, as used in automatic table
         * layout, absolute positioning, float and inline-block. This provides a
         * basic implementation. Child classes should override this or
         * `get_min_max_content_width` as necessary.
         *
         * @return array An array `[0 => min, 1 => max, "min" => min, "max" => max]`
         *         of min and max width.
         */
        public function get_min_max_width() : array
        {
        }
        /**
         * Parses a CSS string containing quotes and escaped hex characters
         *
         * @param $string string The CSS string to parse
         * @param $single_trim
         * @return string
         */
        protected function _parse_string($string, $single_trim = false)
        {
        }
        /**
         * Parses a CSS "quotes" property
         *
         * https://www.w3.org/TR/css-content-3/#quotes
         *
         * @return array An array of pairs of quotes
         */
        protected function _parse_quotes() : array
        {
        }
        /**
         * Parses the CSS "content" property
         *
         * https://www.w3.org/TR/CSS21/generate.html#content
         *
         * @return string The resulting string
         */
        protected function _parse_content() : string
        {
        }
        /**
         * Handle counters and set generated content if the frame is a
         * generated-content frame.
         */
        protected function _set_content() : void
        {
        }
    }
    /**
     * Dummy reflower
     *
     * @package dompdf
     */
    class NullFrameReflower extends \Dompdf\FrameReflower\AbstractFrameReflower
    {
        /**
         * NullFrameReflower constructor.
         * @param Frame $frame
         */
        function __construct(\Dompdf\Frame $frame)
        {
        }
        /**
         * @param BlockFrameDecorator|null $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
    }
    /**
     * Reflows table row groups (e.g. tbody tags)
     *
     * @package dompdf
     */
    class TableRowGroup extends \Dompdf\FrameReflower\AbstractFrameReflower
    {
        /**
         * TableRowGroup constructor.
         * @param TableRowGroupFrameDecorator $frame
         */
        function __construct(\Dompdf\FrameDecorator\TableRowGroup $frame)
        {
        }
        /**
         * @param BlockFrameDecorator|null $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
    }
    /**
     * Reflows table rows
     *
     * @package dompdf
     */
    class TableRow extends \Dompdf\FrameReflower\AbstractFrameReflower
    {
        /**
         * TableRow constructor.
         * @param TableRowFrameDecorator $frame
         */
        function __construct(\Dompdf\FrameDecorator\TableRow $frame)
        {
        }
        /**
         * @param BlockFrameDecorator|null $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
        /**
         * @throws Exception
         */
        public function get_min_max_width() : array
        {
        }
    }
    /**
     * Reflows tables
     *
     * @access  private
     * @package dompdf
     */
    class Table extends \Dompdf\FrameReflower\AbstractFrameReflower
    {
        /**
         * Frame for this reflower
         *
         * @var TableFrameDecorator
         */
        protected $_frame;
        /**
         * Cache of results between call to get_min_max_width and assign_widths
         *
         * @var array
         */
        protected $_state;
        /**
         * Table constructor.
         * @param TableFrameDecorator $frame
         */
        function __construct(\Dompdf\FrameDecorator\Table $frame)
        {
        }
        /**
         * State is held here so it needs to be reset along with the decorator
         */
        public function reset() : void
        {
        }
        protected function _assign_widths()
        {
        }
        /**
         * Determine the frame's height based on min/max height
         *
         * @return float
         */
        protected function _calculate_height()
        {
        }
        /**
         * @param BlockFrameDecorator|null $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
        public function get_min_max_width() : array
        {
        }
    }
    /**
     * Reflows text frames.
     *
     * @package dompdf
     */
    class Text extends \Dompdf\FrameReflower\AbstractFrameReflower
    {
        /**
         * PHP string representation of HTML entity <shy>
         */
        const SOFT_HYPHEN = "­";
        /**
         * The regex splits on everything that's a separator (^\S double negative),
         * excluding the following non-breaking space characters:
         * * nbsp (\xA0)
         * * narrow nbsp (\x{202F})
         * * figure space (\x{2007})
         */
        public static $_whitespace_pattern = '/([^\\S\\xA0\\x{202F}\\x{2007}]+)/u';
        /**
         * The regex splits on everything that's a separator (^\S double negative)
         * plus dashes, excluding the following non-breaking space characters:
         * * nbsp (\xA0)
         * * narrow nbsp (\x{202F})
         * * figure space (\x{2007})
         */
        public static $_wordbreak_pattern = '/([^\\S\\xA0\\x{202F}\\x{2007}\\n]+|\\R|\\-+|\\xAD+)/u';
        /**
         * @var TextFrameDecorator
         */
        protected $_frame;
        /**
         * Saves trailing whitespace trimmed after a line break, so it can be
         * restored when needed.
         *
         * @var string|null
         */
        protected $trailingWs = null;
        /**
         * @param TextFrameDecorator $frame
         * @param FontMetrics $fontMetrics
         */
        public function __construct(\Dompdf\FrameDecorator\Text $frame, \Dompdf\FontMetrics $fontMetrics)
        {
        }
        /**
         * Apply text transform and white-space collapse according to style.
         *
         * * http://www.w3.org/TR/CSS21/text.html#propdef-text-transform
         * * http://www.w3.org/TR/CSS21/text.html#propdef-white-space
         *
         * @param string $text
         * @return string
         */
        protected function pre_process_text(string $text) : string
        {
        }
        /**
         * @param string $text
         * @param BlockFrameDecorator $block
         * @return bool|int
         */
        protected function line_break(string $text, \Dompdf\FrameDecorator\Block $block)
        {
        }
        /**
         * @param string $text
         * @return bool|int
         */
        protected function newline_break(string $text)
        {
        }
        /**
         * @param BlockFrameDecorator $block
         * @return bool|null Whether to add a new line at the end. `null` if reflow
         *         should be stopped.
         */
        protected function layout_line(\Dompdf\FrameDecorator\Block $block) : ?bool
        {
        }
        /**
         * @param BlockFrameDecorator|null $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
        /**
         * Trim trailing white space from the frame text.
         */
        public function trim_trailing_ws() : void
        {
        }
        public function reset() : void
        {
        }
        //........................................................................
        public function get_min_max_width() : array
        {
        }
        /**
         * @param FontMetrics $fontMetrics
         * @return $this
         */
        public function setFontMetrics(\Dompdf\FontMetrics $fontMetrics)
        {
        }
        /**
         * @return FontMetrics
         */
        public function getFontMetrics()
        {
        }
    }
    /**
     * Reflows inline frames
     *
     * @package dompdf
     */
    class Inline extends \Dompdf\FrameReflower\AbstractFrameReflower
    {
        /**
         * Inline constructor.
         * @param InlineFrameDecorator $frame
         */
        function __construct(\Dompdf\FrameDecorator\Inline $frame)
        {
        }
        /**
         * Handle reflow of empty inline frames.
         *
         * Regular inline frames are positioned together with their text (or inline)
         * children after child reflow. Empty inline frames have no children that
         * could determine the positioning, so they need to be handled separately.
         *
         * @param BlockFrameDecorator $block
         */
        protected function reflow_empty(\Dompdf\FrameDecorator\Block $block) : void
        {
        }
        /**
         * @param BlockFrameDecorator|null $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
    }
    /**
     * Image reflower class
     *
     * @package dompdf
     */
    class Image extends \Dompdf\FrameReflower\AbstractFrameReflower
    {
        /**
         * Image constructor.
         * @param ImageFrameDecorator $frame
         */
        function __construct(\Dompdf\FrameDecorator\Image $frame)
        {
        }
        /**
         * @param BlockFrameDecorator|null $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
        public function get_min_max_content_width() : array
        {
        }
        /**
         * Calculate width and height, accounting for min/max constraints.
         *
         * * https://www.w3.org/TR/CSS21/visudet.html#inline-replaced-width
         * * https://www.w3.org/TR/CSS21/visudet.html#inline-replaced-height
         * * https://www.w3.org/TR/CSS21/visudet.html#min-max-widths
         * * https://www.w3.org/TR/CSS21/visudet.html#min-max-heights
         *
         * @param float|null $cbw Width of the containing block.
         * @param float|null $cbh Height of the containing block.
         *
         * @return float[]
         */
        protected function calculate_size(?float $cbw, ?float $cbh) : array
        {
        }
        protected function resolve_dimensions() : void
        {
        }
        protected function resolve_margins() : void
        {
        }
    }
    /**
     * Reflows block frames
     *
     * @package dompdf
     */
    class Block extends \Dompdf\FrameReflower\AbstractFrameReflower
    {
        // Minimum line width to justify, as fraction of available width
        const MIN_JUSTIFY_WIDTH = 0.8;
        /**
         * @var BlockFrameDecorator
         */
        protected $_frame;
        function __construct(\Dompdf\FrameDecorator\Block $frame)
        {
        }
        /**
         *  Calculate the ideal used value for the width property as per:
         *  http://www.w3.org/TR/CSS21/visudet.html#Computing_widths_and_margins
         *
         * @param float $width
         *
         * @return array
         */
        protected function _calculate_width($width)
        {
        }
        /**
         * Call the above function, but resolve max/min widths
         *
         * @throws Exception
         * @return array
         */
        protected function _calculate_restricted_width()
        {
        }
        /**
         * Determine the unrestricted height of content within the block
         * not by adding each line's height, but by getting the last line's position.
         * This because lines could have been pushed lower by a clearing element.
         *
         * @return float
         */
        protected function _calculate_content_height()
        {
        }
        /**
         * Determine the frame's restricted height
         *
         * @return array
         */
        protected function _calculate_restricted_height()
        {
        }
        /**
         * Adjust the justification of each of our lines.
         * http://www.w3.org/TR/CSS21/text.html#propdef-text-align
         */
        protected function _text_align()
        {
        }
        /**
         * Align inline children vertically.
         * Aligns each child vertically after each line is reflowed
         */
        function vertical_align()
        {
        }
        /**
         * @param Frame $child
         */
        function process_clear(\Dompdf\Frame $child)
        {
        }
        /**
         * @param Frame $child
         * @param float $cb_x
         * @param float $cb_w
         */
        function process_float(\Dompdf\Frame $child, $cb_x, $cb_w)
        {
        }
        /**
         * @param BlockFrameDecorator $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
        public function get_min_max_content_width() : array
        {
        }
    }
    /**
     * Reflows list bullets
     *
     * @package dompdf
     */
    class ListBullet extends \Dompdf\FrameReflower\AbstractFrameReflower
    {
        /**
         * ListBullet constructor.
         * @param ListBulletFrameDecorator $frame
         */
        function __construct(\Dompdf\FrameDecorator\ListBullet $frame)
        {
        }
        /**
         * @param BlockFrameDecorator|null $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
    }
    /**
     * Reflows table cells
     *
     * @package dompdf
     */
    class TableCell extends \Dompdf\FrameReflower\Block
    {
        /**
         * TableCell constructor.
         * @param BlockFrameDecorator $frame
         */
        function __construct(\Dompdf\FrameDecorator\Block $frame)
        {
        }
        /**
         * @param BlockFrameDecorator|null $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
        public function get_min_max_content_width() : array
        {
        }
    }
    /**
     * Reflows pages
     *
     * @package dompdf
     */
    class Page extends \Dompdf\FrameReflower\AbstractFrameReflower
    {
        /**
         * Page constructor.
         * @param PageFrameDecorator $frame
         */
        function __construct(\Dompdf\FrameDecorator\Page $frame)
        {
        }
        /**
         * @param PageFrameDecorator $frame
         * @param int $page_number
         */
        function apply_page_style(\Dompdf\Frame $frame, $page_number)
        {
        }
        /**
         * Paged layout:
         * http://www.w3.org/TR/CSS21/page.html
         *
         * @param BlockFrameDecorator|null $block
         */
        function reflow(\Dompdf\FrameDecorator\Block $block = null)
        {
        }
        /**
         * Check for callbacks that need to be performed when a given event
         * gets triggered on a page
         *
         * @param string $event The type of event
         * @param Frame  $frame The frame that event is triggered on
         */
        protected function _check_callbacks(string $event, \Dompdf\Frame $frame) : void
        {
        }
    }
}
namespace Dompdf {
    /**
     * Dompdf - PHP5 HTML to PDF renderer
     *
     * Dompdf loads HTML and does its best to render it as a PDF.  It gets its
     * name from the new DomDocument PHP5 extension.  Source HTML is first
     * parsed by a DomDocument object.  Dompdf takes the resulting DOM tree and
     * attaches a {@link Frame} object to each node.  {@link Frame} objects store
     * positioning and layout information and each has a reference to a {@link
     * Style} object.
     *
     * Style information is loaded and parsed (see {@link Stylesheet}) and is
     * applied to the frames in the tree by using XPath.  CSS selectors are
     * converted into XPath queries, and the computed {@link Style} objects are
     * applied to the {@link Frame}s.
     *
     * {@link Frame}s are then decorated (in the design pattern sense of the
     * word) based on their CSS display property ({@link
     * http://www.w3.org/TR/CSS21/visuren.html#propdef-display}).
     * Frame_Decorators augment the basic {@link Frame} class by adding
     * additional properties and methods specific to the particular type of
     * {@link Frame}.  For example, in the CSS layout model, block frames
     * (display: block;) contain line boxes that are usually filled with text or
     * other inline frames.  The Block therefore adds a $lines
     * property as well as methods to add {@link Frame}s to lines and to add
     * additional lines.  {@link Frame}s also are attached to specific
     * AbstractPositioner and {@link AbstractFrameReflower} objects that contain the
     * positioining and layout algorithm for a specific type of frame,
     * respectively.  This is an application of the Strategy pattern.
     *
     * Layout, or reflow, proceeds recursively (post-order) starting at the root
     * of the document.  Space constraints (containing block width & height) are
     * pushed down, and resolved positions and sizes bubble up.  Thus, every
     * {@link Frame} in the document tree is traversed once (except for tables
     * which use a two-pass layout algorithm).  If you are interested in the
     * details, see the reflow() method of the Reflower classes.
     *
     * Rendering is relatively straightforward once layout is complete. {@link
     * Frame}s are rendered using an adapted {@link Cpdf} class, originally
     * written by Wayne Munro, http://www.ros.co.nz/pdf/.  (Some performance
     * related changes have been made to the original {@link Cpdf} class, and
     * the {@link Dompdf\Adapter\CPDF} class provides a simple, stateless interface to
     * PDF generation.)  PDFLib support has now also been added, via the {@link
     * Dompdf\Adapter\PDFLib}.
     *
     *
     * @package dompdf
     */
    class Dompdf
    {
        /**
         * The list of built-in fonts
         *
         * @var array
         * @deprecated
         */
        public static $native_fonts = ["courier", "courier-bold", "courier-oblique", "courier-boldoblique", "helvetica", "helvetica-bold", "helvetica-oblique", "helvetica-boldoblique", "times-roman", "times-bold", "times-italic", "times-bolditalic", "symbol", "zapfdinbats"];
        /**
         * The list of built-in fonts
         *
         * @var array
         */
        public static $nativeFonts = ["courier", "courier-bold", "courier-oblique", "courier-boldoblique", "helvetica", "helvetica-bold", "helvetica-oblique", "helvetica-boldoblique", "times-roman", "times-bold", "times-italic", "times-bolditalic", "symbol", "zapfdinbats"];
        /**
         * Class constructor
         *
         * @param array|Options $options
         */
        public function __construct($options = null)
        {
        }
        /**
         * @param $file
         * @deprecated
         */
        public function load_html_file($file)
        {
        }
        /**
         * Loads an HTML file
         * Parse errors are stored in the global array _dompdf_warnings.
         *
         * @param string $file a filename or url to load
         * @param string $encoding Encoding of $file
         *
         * @throws Exception
         */
        public function loadHtmlFile($file, $encoding = null)
        {
        }
        /**
         * @param string $str
         * @param string $encoding
         * @deprecated
         */
        public function load_html($str, $encoding = null)
        {
        }
        public function loadDOM($doc, $quirksmode = false)
        {
        }
        /**
         * Loads an HTML string
         * Parse errors are stored in the global array _dompdf_warnings.
         *
         * @param string $str HTML text to load
         * @param string $encoding Encoding of $str
         */
        public function loadHtml($str, $encoding = null)
        {
        }
        /**
         * @param DOMNode $node
         * @deprecated
         */
        public static function remove_text_nodes(\DOMNode $node)
        {
        }
        /**
         * @param DOMNode $node
         */
        public static function removeTextNodes(\DOMNode $node)
        {
        }
        /**
         * @param string $cacheId
         * @deprecated
         */
        public function enable_caching($cacheId)
        {
        }
        /**
         * Enable experimental caching capability
         *
         * @param string $cacheId
         */
        public function enableCaching($cacheId)
        {
        }
        /**
         * @param string $value
         * @return bool
         * @deprecated
         */
        public function parse_default_view($value)
        {
        }
        /**
         * @param string $value
         * @return bool
         */
        public function parseDefaultView($value)
        {
        }
        /**
         * Renders the HTML to PDF
         */
        public function render()
        {
        }
        /**
         * Add meta information to the PDF after rendering
         */
        public function add_info($label, $value)
        {
        }
        /**
         * Streams the PDF to the client.
         *
         * The file will open a download dialog by default. The options
         * parameter controls the output. Accepted options (array keys) are:
         *
         * 'compress' = > 1 (=default) or 0:
         *   Apply content stream compression
         *
         * 'Attachment' => 1 (=default) or 0:
         *   Set the 'Content-Disposition:' HTTP header to 'attachment'
         *   (thereby causing the browser to open a download dialog)
         *
         * @param string $filename the name of the streamed file
         * @param array $options header options (see above)
         */
        public function stream($filename = "document.pdf", $options = [])
        {
        }
        /**
         * Returns the PDF as a string.
         *
         * The options parameter controls the output. Accepted options are:
         *
         * 'compress' = > 1 or 0 - apply content stream compression, this is
         *    on (1) by default
         *
         * @param array $options options (see above)
         *
         * @return string|null
         */
        public function output($options = [])
        {
        }
        /**
         * @return string
         * @deprecated
         */
        public function output_html()
        {
        }
        /**
         * Returns the underlying HTML document as a string
         *
         * @return string
         */
        public function outputHtml()
        {
        }
        /**
         * Get the dompdf option value
         *
         * @param string $key
         * @return mixed
         * @deprecated
         */
        public function get_option($key)
        {
        }
        /**
         * @param string $key
         * @param mixed $value
         * @return $this
         * @deprecated
         */
        public function set_option($key, $value)
        {
        }
        /**
         * @param array $options
         * @return $this
         * @deprecated
         */
        public function set_options(array $options)
        {
        }
        /**
         * @param string $size
         * @param string $orientation
         * @deprecated
         */
        public function set_paper($size, $orientation = "portrait")
        {
        }
        /**
         * Sets the paper size & orientation
         *
         * @param string|array $size 'letter', 'legal', 'A4', etc. {@link Dompdf\Adapter\CPDF::$PAPER_SIZES}
         * @param string $orientation 'portrait' or 'landscape'
         * @return $this
         */
        public function setPaper($size, $orientation = "portrait")
        {
        }
        /**
         * Gets the paper size
         *
         * @param null|string|array $paperSize
         * @return int[] A four-element integer array
         */
        public function getPaperSize($paperSize = null)
        {
        }
        /**
         * Gets the paper orientation
         *
         * @return string Either "portrait" or "landscape"
         */
        public function getPaperOrientation()
        {
        }
        /**
         * @param FrameTree $tree
         * @return $this
         */
        public function setTree(\Dompdf\Frame\FrameTree $tree)
        {
        }
        /**
         * @return FrameTree
         * @deprecated
         */
        public function get_tree()
        {
        }
        /**
         * Returns the underlying {@link FrameTree} object
         *
         * @return FrameTree
         */
        public function getTree()
        {
        }
        /**
         * @param string $protocol
         * @return $this
         * @deprecated
         */
        public function set_protocol($protocol)
        {
        }
        /**
         * Sets the protocol to use
         * FIXME validate these
         *
         * @param string $protocol
         * @return $this
         */
        public function setProtocol(string $protocol)
        {
        }
        /**
         * @return string
         * @deprecated
         */
        public function get_protocol()
        {
        }
        /**
         * Returns the protocol in use
         *
         * @return string
         */
        public function getProtocol()
        {
        }
        /**
         * @param string $host
         * @deprecated
         */
        public function set_host($host)
        {
        }
        /**
         * Sets the base hostname
         *
         * @param string $baseHost
         * @return $this
         */
        public function setBaseHost(string $baseHost)
        {
        }
        /**
         * @return string
         * @deprecated
         */
        public function get_host()
        {
        }
        /**
         * Returns the base hostname
         *
         * @return string
         */
        public function getBaseHost()
        {
        }
        /**
         * Sets the base path
         *
         * @param string $path
         * @deprecated
         */
        public function set_base_path($path)
        {
        }
        /**
         * Sets the base path
         *
         * @param string $basePath
         * @return $this
         */
        public function setBasePath(string $basePath)
        {
        }
        /**
         * @return string
         * @deprecated
         */
        public function get_base_path()
        {
        }
        /**
         * Returns the base path
         *
         * @return string
         */
        public function getBasePath()
        {
        }
        /**
         * @param string $default_view The default document view
         * @param array $options The view's options
         * @return $this
         * @deprecated
         */
        public function set_default_view($default_view, $options)
        {
        }
        /**
         * Sets the default view
         *
         * @param string $defaultView The default document view
         * @param array $options The view's options
         * @return $this
         */
        public function setDefaultView($defaultView, $options)
        {
        }
        /**
         * @param resource $http_context
         * @return $this
         * @deprecated
         */
        public function set_http_context($http_context)
        {
        }
        /**
         * Sets the HTTP context
         *
         * @param resource|array $httpContext
         * @return $this
         */
        public function setHttpContext($httpContext)
        {
        }
        /**
         * @return resource
         * @deprecated
         */
        public function get_http_context()
        {
        }
        /**
         * Returns the HTTP context
         *
         * @return resource
         */
        public function getHttpContext()
        {
        }
        /**
         * @param Canvas $canvas
         * @return $this
         */
        public function setCanvas(\Dompdf\Canvas $canvas)
        {
        }
        /**
         * @return Canvas
         * @deprecated
         */
        public function get_canvas()
        {
        }
        /**
         * Return the underlying Canvas instance (e.g. Dompdf\Adapter\CPDF, Dompdf\Adapter\GD)
         *
         * @return Canvas
         */
        public function getCanvas()
        {
        }
        /**
         * @param Stylesheet $css
         * @return $this
         */
        public function setCss(\Dompdf\Css\Stylesheet $css)
        {
        }
        /**
         * @return Stylesheet
         * @deprecated
         */
        public function get_css()
        {
        }
        /**
         * Returns the stylesheet
         *
         * @return Stylesheet
         */
        public function getCss()
        {
        }
        /**
         * @param DOMDocument $dom
         * @return $this
         */
        public function setDom(\DOMDocument $dom)
        {
        }
        /**
         * @return DOMDocument
         * @deprecated
         */
        public function get_dom()
        {
        }
        /**
         * @return DOMDocument
         */
        public function getDom()
        {
        }
        /**
         * @param Options $options
         * @return $this
         */
        public function setOptions(\Dompdf\Options $options)
        {
        }
        /**
         * @return Options
         */
        public function getOptions()
        {
        }
        /**
         * @return array
         * @deprecated
         */
        public function get_callbacks()
        {
        }
        /**
         * Returns the callbacks array
         *
         * @return array
         */
        public function getCallbacks()
        {
        }
        /**
         * @param array $callbacks the set of callbacks to set
         * @deprecated
         */
        public function set_callbacks($callbacks)
        {
        }
        /**
         * Sets callbacks for events like rendering of pages and elements.
         *
         * The callbacks array should contain arrays with `event` set to a callback
         * event name and `f` set to a function or any other callable.
         *
         * The available callback events are:
         * * `begin_page_reflow`: called before page reflow
         * * `begin_frame`: called before a frame is rendered
         * * `end_frame`: called after frame rendering is complete
         * * `begin_page_render`: called before a page is rendered
         * * `end_page_render`: called after page rendering is complete
         *
         * The function `f` must take an array as argument, which contains info
         * about the event (`[0 => Canvas, 1 => Frame, "canvas" => Canvas,
         * "frame" => Frame]`).
         *
         * @param array $callbacks The set of callbacks to set
         */
        public function setCallbacks($callbacks)
        {
        }
        /**
         * @return boolean
         * @deprecated
         */
        public function get_quirksmode()
        {
        }
        /**
         * Get the quirks mode
         *
         * @return boolean true if quirks mode is active
         */
        public function getQuirksmode()
        {
        }
        /**
         * @param FontMetrics $fontMetrics
         * @return $this
         */
        public function setFontMetrics(\Dompdf\FontMetrics $fontMetrics)
        {
        }
        /**
         * @return FontMetrics
         */
        public function getFontMetrics()
        {
        }
        /**
         * PHP5 overloaded getter
         * Along with {@link Dompdf::__set()} __get() provides access to all
         * properties directly.  Typically __get() is not called directly outside
         * of this class.
         *
         * @param string $prop
         *
         * @throws Exception
         * @return mixed
         */
        function __get($prop)
        {
        }
    }
    /**
     * The line box class
     *
     * This class represents a line box
     * http://www.w3.org/TR/CSS2/visuren.html#line-box
     *
     * @package dompdf
     */
    class LineBox
    {
        /**
         * @var Block
         */
        protected $_block_frame;
        /**
         * @var AbstractFrameDecorator[]
         */
        protected $_frames = [];
        /**
         * @var ListBullet[]
         */
        protected $list_markers = [];
        /**
         * @var int
         */
        public $wc = 0;
        /**
         * @var float
         */
        public $y = null;
        /**
         * @var float
         */
        public $w = 0.0;
        /**
         * @var float
         */
        public $h = 0.0;
        /**
         * @var float
         */
        public $left = 0.0;
        /**
         * @var float
         */
        public $right = 0.0;
        /**
         * @var AbstractFrameDecorator
         */
        public $tallest_frame = null;
        /**
         * @var bool[]
         */
        public $floating_blocks = [];
        /**
         * @var bool
         */
        public $br = false;
        /**
         * Whether the line box contains any inline-positioned frames.
         *
         * @var bool
         */
        public $inline = false;
        /**
         * Class constructor
         *
         * @param Block $frame the Block containing this line
         * @param int $y
         */
        public function __construct(\Dompdf\FrameDecorator\Block $frame, $y = 0)
        {
        }
        /**
         * Returns the floating elements inside the first floating parent
         *
         * @param Page $root
         *
         * @return Frame[]
         */
        public function get_floats_inside(\Dompdf\FrameDecorator\Page $root)
        {
        }
        public function get_float_offsets()
        {
        }
        /**
         * @return float
         */
        public function get_width()
        {
        }
        /**
         * @return Block
         */
        public function get_block_frame()
        {
        }
        /**
         * @return AbstractFrameDecorator[]
         */
        function &get_frames()
        {
        }
        /**
         * @param AbstractFrameDecorator $frame
         */
        public function add_frame(\Dompdf\Frame $frame)
        {
        }
        /**
         * Remove the frame at the given index and all following frames from the
         * line.
         *
         * @param int $index
         */
        public function remove_frames(int $index) : void
        {
        }
        /**
         * Get the `outside` positioned list markers to be vertically aligned with
         * the line box.
         *
         * @return ListBullet[]
         */
        public function get_list_markers() : array
        {
        }
        /**
         * Add a list marker to the line box.
         *
         * The list marker is only added for the purpose of vertical alignment, it
         * is not actually added to the list of frames of the line box.
         */
        public function add_list_marker(\Dompdf\FrameDecorator\ListBullet $marker) : void
        {
        }
        /**
         * An iterator of all list markers and inline positioned frames of the line
         * box.
         *
         * @return \Iterator<AbstractFrameDecorator>
         */
        public function frames_to_align() : \Iterator
        {
        }
        /**
         * Trim trailing whitespace from the line.
         */
        public function trim_trailing_ws() : void
        {
        }
        /**
         * Recalculate LineBox width based on the contained frames total width.
         *
         * @return float
         */
        public function recalculate_width()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
    }
}
namespace Dompdf\Frame {
    /**
     * Linked-list IteratorAggregate
     *
     * @access private
     * @package dompdf
     */
    class FrameList implements \IteratorAggregate
    {
        /**
         * @var Frame
         */
        protected $_frame;
        /**
         * @param Frame $frame
         */
        function __construct($frame)
        {
        }
        /**
         * @return FrameListIterator
         */
        function getIterator() : \Dompdf\Frame\FrameListIterator
        {
        }
    }
    /**
     * Linked-list Iterator
     *
     * Returns children in order and allows for the list to change during iteration,
     * provided the changes occur to or after the current element.
     *
     * @access private
     * @package dompdf
     */
    class FrameListIterator implements \Iterator
    {
        /**
         * @var Frame
         */
        protected $parent;
        /**
         * @var Frame|null
         */
        protected $cur;
        /**
         * @var Frame|null
         */
        protected $prev;
        /**
         * @var int
         */
        protected $num;
        /**
         * @param Frame $frame
         */
        public function __construct(\Dompdf\Frame $frame)
        {
        }
        public function rewind() : void
        {
        }
        /**
         * @return bool
         */
        public function valid() : bool
        {
        }
        /**
         * @return int
         */
        public function key() : int
        {
        }
        /**
         * @return Frame|null
         */
        public function current() : ?\Dompdf\Frame
        {
        }
        public function next() : void
        {
        }
    }
    /**
     * @package dompdf
     * @link    http://dompdf.github.com/
     * @author  Benj Carson <benjcarson@digitaljunkies.ca>
     * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License
     */
    /**
     * Represents an entire document as a tree of frames
     *
     * The FrameTree consists of {@link Frame} objects each tied to specific
     * DOMNode objects in a specific DomDocument.  The FrameTree has the same
     * structure as the DomDocument, but adds additional capabilities for
     * styling and layout.
     *
     * @package dompdf
     */
    class FrameTree
    {
        /**
         * Tags to ignore while parsing the tree
         *
         * @var array
         */
        protected static $HIDDEN_TAGS = ["area", "base", "basefont", "head", "style", "meta", "title", "colgroup", "noembed", "param", "#comment"];
        /**
         * The main DomDocument
         *
         * @see http://ca2.php.net/manual/en/ref.dom.php
         * @var DOMDocument
         */
        protected $_dom;
        /**
         * The root node of the FrameTree.
         *
         * @var Frame
         */
        protected $_root;
        /**
         * Subtrees of absolutely positioned elements
         *
         * @var array of Frames
         */
        protected $_absolute_frames;
        /**
         * A mapping of {@link Frame} objects to DOMNode objects
         *
         * @var array
         */
        protected $_registry;
        /**
         * Class constructor
         *
         * @param DOMDocument $dom the main DomDocument object representing the current html document
         */
        public function __construct(\DOMDocument $dom)
        {
        }
        /**
         * Returns the DOMDocument object representing the current html document
         *
         * @return DOMDocument
         */
        public function get_dom()
        {
        }
        /**
         * Returns the root frame of the tree
         *
         * @return Frame
         */
        public function get_root()
        {
        }
        /**
         * Returns a specific frame given its id
         *
         * @param string $id
         *
         * @return Frame|null
         */
        public function get_frame($id)
        {
        }
        /**
         * Returns a post-order iterator for all frames in the tree
         *
         * @return FrameTreeList|Frame[]
         */
        public function get_frames()
        {
        }
        /**
         * Builds the tree
         */
        public function build_tree()
        {
        }
        /**
         * Adds missing TBODYs around TR
         */
        protected function fix_tables()
        {
        }
        // FIXME: temporary hack, preferably we will improve rendering of sequential #text nodes
        /**
         * Remove a child from a node
         *
         * Remove a child from a node. If the removed node results in two
         * adjacent #text nodes then combine them.
         *
         * @param DOMNode $node the current DOMNode being considered
         * @param array $children an array of nodes that are the children of $node
         * @param int $index index from the $children array of the node to remove
         */
        protected function _remove_node(\DOMNode $node, array &$children, $index)
        {
        }
        /**
         * Recursively adds {@link Frame} objects to the tree
         *
         * Recursively build a tree of Frame objects based on a dom tree.
         * No layout information is calculated at this time, although the
         * tree may be adjusted (i.e. nodes and frames for generated content
         * and images may be created).
         *
         * @param DOMNode $node the current DOMNode being considered
         *
         * @return Frame
         */
        protected function _build_tree_r(\DOMNode $node)
        {
        }
        /**
         * @param DOMElement $node
         * @param DOMElement $new_node
         * @param string $pos
         *
         * @return mixed
         */
        public function insert_node(\DOMElement $node, \DOMElement $new_node, $pos)
        {
        }
    }
    /**
     * Contains frame decorating logic
     *
     * This class is responsible for assigning the correct {@link AbstractFrameDecorator},
     * {@link AbstractPositioner}, and {@link AbstractFrameReflower} objects to {@link Frame}
     * objects.  This is determined primarily by the Frame's display type, but
     * also by the Frame's node's type (e.g. DomElement vs. #text)
     *
     * @access  private
     * @package dompdf
     */
    class Factory
    {
        /**
         * Array of positioners for specific frame types
         *
         * @var AbstractPositioner[]
         */
        protected static $_positioners;
        /**
         * Decorate the root Frame
         *
         * @param $root   Frame The frame to decorate
         * @param $dompdf Dompdf The dompdf instance
         *
         * @return PageFrameDecorator
         */
        static function decorate_root(\Dompdf\Frame $root, \Dompdf\Dompdf $dompdf)
        {
        }
        /**
         * Decorate a Frame
         *
         * @param Frame $frame   The frame to decorate
         * @param Dompdf $dompdf The dompdf instance
         * @param Frame $root    The root of the frame
         *
         * @throws Exception
         * @return AbstractFrameDecorator
         * FIXME: this is admittedly a little smelly...
         */
        static function decorate_frame(\Dompdf\Frame $frame, \Dompdf\Dompdf $dompdf, \Dompdf\Frame $root = null)
        {
        }
        /**
         * Creates Positioners
         *
         * @param string $type type of positioner to use
         * @return AbstractPositioner
         */
        protected static function getPositionerInstance($type)
        {
        }
    }
    /**
     * Pre-order Iterator
     *
     * Returns frames in preorder traversal order (parent then children)
     *
     * @access private
     * @package dompdf
     */
    class FrameTreeIterator implements \Iterator
    {
        /**
         * @var Frame
         */
        protected $_root;
        /**
         * @var Frame[]
         */
        protected $_stack = [];
        /**
         * @var int
         */
        protected $_num;
        /**
         * @param Frame $root
         */
        public function __construct(\Dompdf\Frame $root)
        {
        }
        public function rewind() : void
        {
        }
        /**
         * @return bool
         */
        public function valid() : bool
        {
        }
        /**
         * @return int
         */
        public function key() : int
        {
        }
        /**
         * @return Frame
         */
        public function current() : \Dompdf\Frame
        {
        }
        public function next() : void
        {
        }
    }
    /**
     * Pre-order IteratorAggregate
     *
     * @access private
     * @package dompdf
     */
    class FrameTreeList implements \IteratorAggregate
    {
        /**
         * @var Frame
         */
        protected $_root;
        /**
         * @param Frame $root
         */
        public function __construct(\Dompdf\Frame $root)
        {
        }
        /**
         * @return FrameTreeIterator
         */
        public function getIterator() : \Dompdf\Frame\FrameTreeIterator
        {
        }
    }
}
namespace FontLib {
    /**
     * Generic font file binary stream.
     *
     * @package php-font-lib
     */
    class BinaryStream
    {
        /**
         * @var resource The file pointer
         */
        protected $f;
        const uint8 = 1;
        const int8 = 2;
        const uint16 = 3;
        const int16 = 4;
        const uint32 = 5;
        const int32 = 6;
        const shortFrac = 7;
        const Fixed = 8;
        const FWord = 9;
        const uFWord = 10;
        const F2Dot14 = 11;
        const longDateTime = 12;
        const char = 13;
        const modeRead = "rb";
        const modeWrite = "wb";
        const modeReadWrite = "rb+";
        static function backtrace()
        {
        }
        /**
         * Open a font file in read mode
         *
         * @param string $filename The file name of the font to open
         *
         * @return bool
         */
        public function load($filename)
        {
        }
        /**
         * Open a font file in a chosen mode
         *
         * @param string $filename The file name of the font to open
         * @param string $mode     The opening mode
         *
         * @throws \Exception
         * @return bool
         */
        public function open($filename, $mode = self::modeRead)
        {
        }
        /**
         * Close the internal file pointer
         */
        public function close()
        {
        }
        /**
         * Change the internal file pointer
         *
         * @param resource $fp
         *
         * @throws \Exception
         */
        public function setFile($fp)
        {
        }
        /**
         * Create a temporary file in write mode
         *
         * @param bool $allow_memory Allow in-memory files
         *
         * @return resource the temporary file pointer resource
         */
        public static function getTempFile($allow_memory = true)
        {
        }
        /**
         * Move the internal file pinter to $offset bytes
         *
         * @param int $offset
         *
         * @return bool True if the $offset position exists in the file
         */
        public function seek($offset)
        {
        }
        /**
         * Gives the current position in the file
         *
         * @return int The current position
         */
        public function pos()
        {
        }
        public function skip($n)
        {
        }
        /**
         * @param int $n The number of bytes to read
         *
         * @return string
         */
        public function read($n)
        {
        }
        public function write($data, $length = null)
        {
        }
        public function readUInt8()
        {
        }
        public function readUInt8Many($count)
        {
        }
        public function writeUInt8($data)
        {
        }
        public function readInt8()
        {
        }
        public function readInt8Many($count)
        {
        }
        public function writeInt8($data)
        {
        }
        public function readUInt16()
        {
        }
        public function readUInt16Many($count)
        {
        }
        public function readUFWord()
        {
        }
        public function writeUInt16($data)
        {
        }
        public function writeUFWord($data)
        {
        }
        public function readInt16()
        {
        }
        public function readInt16Many($count)
        {
        }
        public function readFWord()
        {
        }
        public function writeInt16($data)
        {
        }
        public function writeFWord($data)
        {
        }
        public function readUInt32()
        {
        }
        public function writeUInt32($data)
        {
        }
        public function readFixed()
        {
        }
        public function writeFixed($data)
        {
        }
        public function readLongDateTime()
        {
        }
        public function writeLongDateTime($data)
        {
        }
        public function unpack($def)
        {
        }
        public function pack($def, $data)
        {
        }
        /**
         * Read a data of type $type in the file from the current position
         *
         * @param mixed $type The data type to read
         *
         * @return mixed The data that was read
         */
        public function r($type)
        {
        }
        /**
         * Write $data of type $type in the file from the current position
         *
         * @param mixed $type The data type to write
         * @param mixed $data The data to write
         *
         * @return int The number of bytes read
         */
        public function w($type, $data)
        {
        }
        /**
         * Converts a Uint32 value to string
         *
         * @param int $uint32
         *
         * @return string The string
         */
        public function convertUInt32ToStr($uint32)
        {
        }
    }
}
namespace FontLib\Table {
    /**
     * Generic font table.
     *
     * @package php-font-lib
     */
    class Table extends \FontLib\BinaryStream
    {
        /**
         * @var DirectoryEntry
         */
        protected $entry;
        protected $def = array();
        public $data;
        public final function __construct(\FontLib\Table\DirectoryEntry $entry)
        {
        }
        /**
         * @return File
         */
        public function getFont()
        {
        }
        protected function _encode()
        {
        }
        protected function _parse()
        {
        }
        protected function _parseRaw()
        {
        }
        protected function _encodeRaw()
        {
        }
        public function toHTML()
        {
        }
        public final function encode()
        {
        }
        public final function parse()
        {
        }
    }
}
namespace FontLib\Table\Type {
    /**
     * `glyf` font table.
     *
     * @package php-font-lib
     * @property Outline[] $data
     */
    class glyf extends \FontLib\Table\Table
    {
        protected function _parse()
        {
        }
        public function getGlyphIDs($gids = array())
        {
        }
        public function toHTML()
        {
        }
        protected function _encode()
        {
        }
    }
    /**
     * `post` font table.
     *
     * @package php-font-lib
     */
    class post extends \FontLib\Table\Table
    {
        protected $def = array("format" => self::Fixed, "italicAngle" => self::Fixed, "underlinePosition" => self::FWord, "underlineThickness" => self::FWord, "isFixedPitch" => self::uint32, "minMemType42" => self::uint32, "maxMemType42" => self::uint32, "minMemType1" => self::uint32, "maxMemType1" => self::uint32);
        protected function _parse()
        {
        }
        function _encode()
        {
        }
    }
    /**
     * `hhea` font table.
     *
     * @package php-font-lib
     */
    class hhea extends \FontLib\Table\Table
    {
        protected $def = array("version" => self::Fixed, "ascent" => self::FWord, "descent" => self::FWord, "lineGap" => self::FWord, "advanceWidthMax" => self::uFWord, "minLeftSideBearing" => self::FWord, "minRightSideBearing" => self::FWord, "xMaxExtent" => self::FWord, "caretSlopeRise" => self::int16, "caretSlopeRun" => self::int16, "caretOffset" => self::FWord, self::int16, self::int16, self::int16, self::int16, "metricDataFormat" => self::int16, "numOfLongHorMetrics" => self::uint16);
        function _encode()
        {
        }
    }
    /**
     * Font table name record.
     *
     * @package php-font-lib
     */
    class nameRecord extends \FontLib\BinaryStream
    {
        public $platformID;
        public $platformSpecificID;
        public $languageID;
        public $nameID;
        public $length;
        public $offset;
        public $string;
        public static $format = array("platformID" => self::uint16, "platformSpecificID" => self::uint16, "languageID" => self::uint16, "nameID" => self::uint16, "length" => self::uint16, "offset" => self::uint16);
        public function map($data)
        {
        }
        public function getUTF8()
        {
        }
        public function getUTF16()
        {
        }
        function __toString()
        {
        }
    }
    /**
     * `name` font table.
     *
     * @package php-font-lib
     */
    class name extends \FontLib\Table\Table
    {
        const NAME_COPYRIGHT = 0;
        const NAME_NAME = 1;
        const NAME_SUBFAMILY = 2;
        const NAME_SUBFAMILY_ID = 3;
        const NAME_FULL_NAME = 4;
        const NAME_VERSION = 5;
        const NAME_POSTSCRIPT_NAME = 6;
        const NAME_TRADEMARK = 7;
        const NAME_MANUFACTURER = 8;
        const NAME_DESIGNER = 9;
        const NAME_DESCRIPTION = 10;
        const NAME_VENDOR_URL = 11;
        const NAME_DESIGNER_URL = 12;
        const NAME_LICENSE = 13;
        const NAME_LICENSE_URL = 14;
        const NAME_PREFERRE_FAMILY = 16;
        const NAME_PREFERRE_SUBFAMILY = 17;
        const NAME_COMPAT_FULL_NAME = 18;
        const NAME_SAMPLE_TEXT = 19;
        static $nameIdCodes = array(
            0 => "Copyright",
            1 => "FontName",
            2 => "FontSubfamily",
            3 => "UniqueID",
            4 => "FullName",
            5 => "Version",
            6 => "PostScriptName",
            7 => "Trademark",
            8 => "Manufacturer",
            9 => "Designer",
            10 => "Description",
            11 => "FontVendorURL",
            12 => "FontDesignerURL",
            13 => "LicenseDescription",
            14 => "LicenseURL",
            // 15
            16 => "PreferredFamily",
            17 => "PreferredSubfamily",
            18 => "CompatibleFullName",
            19 => "SampleText",
        );
        static $platforms = array(
            0 => "Unicode",
            1 => "Macintosh",
            // 2 =>  Reserved
            3 => "Microsoft",
        );
        static $platformSpecific = array(
            // Unicode
            0 => array(0 => "Default semantics", 1 => "Version 1.1 semantics", 2 => "ISO 10646 1993 semantics (deprecated)", 3 => "Unicode 2.0 or later semantics"),
            // Macintosh
            1 => array(0 => "Roman", 1 => "Japanese", 2 => "Traditional Chinese", 3 => "Korean", 4 => "Arabic", 5 => "Hebrew", 6 => "Greek", 7 => "Russian", 8 => "RSymbol", 9 => "Devanagari", 10 => "Gurmukhi", 11 => "Gujarati", 12 => "Oriya", 13 => "Bengali", 14 => "Tamil", 15 => "Telugu", 16 => "Kannada", 17 => "Malayalam", 18 => "Sinhalese", 19 => "Burmese", 20 => "Khmer", 21 => "Thai", 22 => "Laotian", 23 => "Georgian", 24 => "Armenian", 25 => "Simplified Chinese", 26 => "Tibetan", 27 => "Mongolian", 28 => "Geez", 29 => "Slavic", 30 => "Vietnamese", 31 => "Sindhi"),
            // Microsoft
            3 => array(
                0 => "Symbol",
                1 => "Unicode BMP (UCS-2)",
                2 => "ShiftJIS",
                3 => "PRC",
                4 => "Big5",
                5 => "Wansung",
                6 => "Johab",
                //  7 => Reserved
                //  8 => Reserved
                //  9 => Reserved
                10 => "Unicode UCS-4",
            ),
        );
        protected function _parse()
        {
        }
        protected function _encode()
        {
        }
    }
    /**
     * `maxp` font table.
     *
     * @package php-font-lib
     */
    class maxp extends \FontLib\Table\Table
    {
        protected $def = array("version" => self::Fixed, "numGlyphs" => self::uint16, "maxPoints" => self::uint16, "maxContours" => self::uint16, "maxComponentPoints" => self::uint16, "maxComponentContours" => self::uint16, "maxZones" => self::uint16, "maxTwilightPoints" => self::uint16, "maxStorage" => self::uint16, "maxFunctionDefs" => self::uint16, "maxInstructionDefs" => self::uint16, "maxStackElements" => self::uint16, "maxSizeOfInstructions" => self::uint16, "maxComponentElements" => self::uint16, "maxComponentDepth" => self::uint16);
        function _encode()
        {
        }
    }
    /**
     * `hmtx` font table.
     *
     * @package php-font-lib
     */
    class hmtx extends \FontLib\Table\Table
    {
        protected function _parse()
        {
        }
        protected function _encode()
        {
        }
    }
    /**
     * `cmap` font table.
     *
     * @package php-font-lib
     */
    class cmap extends \FontLib\Table\Table
    {
        protected function _parse()
        {
        }
        function _encode()
        {
        }
    }
    /**
     * `kern` font table.
     *
     * @package php-font-lib
     */
    class kern extends \FontLib\Table\Table
    {
        protected function _parse()
        {
        }
    }
    /**
     * `head` font table.
     *
     * @package php-font-lib
     */
    class head extends \FontLib\Table\Table
    {
        protected $def = array("tableVersion" => self::Fixed, "fontRevision" => self::Fixed, "checkSumAdjustment" => self::uint32, "magicNumber" => self::uint32, "flags" => self::uint16, "unitsPerEm" => self::uint16, "created" => self::longDateTime, "modified" => self::longDateTime, "xMin" => self::FWord, "yMin" => self::FWord, "xMax" => self::FWord, "yMax" => self::FWord, "macStyle" => self::uint16, "lowestRecPPEM" => self::uint16, "fontDirectionHint" => self::int16, "indexToLocFormat" => self::int16, "glyphDataFormat" => self::int16);
        protected function _parse()
        {
        }
    }
    /**
     * `loca` font table.
     *
     * @package php-font-lib
     */
    class loca extends \FontLib\Table\Table
    {
        protected function _parse()
        {
        }
        function _encode()
        {
        }
    }
    /**
     * `OS/2` font table.
     *
     * @package php-font-lib
     */
    class os2 extends \FontLib\Table\Table
    {
        protected $def = array("version" => self::uint16, "xAvgCharWidth" => self::int16, "usWeightClass" => self::uint16, "usWidthClass" => self::uint16, "fsType" => self::int16, "ySubscriptXSize" => self::int16, "ySubscriptYSize" => self::int16, "ySubscriptXOffset" => self::int16, "ySubscriptYOffset" => self::int16, "ySuperscriptXSize" => self::int16, "ySuperscriptYSize" => self::int16, "ySuperscriptXOffset" => self::int16, "ySuperscriptYOffset" => self::int16, "yStrikeoutSize" => self::int16, "yStrikeoutPosition" => self::int16, "sFamilyClass" => self::int16, "panose" => array(self::uint8, 10), "ulCharRange" => array(self::uint32, 4), "achVendID" => array(self::char, 4), "fsSelection" => self::uint16, "fsFirstCharIndex" => self::uint16, "fsLastCharIndex" => self::uint16, "typoAscender" => self::int16, "typoDescender" => self::int16, "typoLineGap" => self::int16, "winAscent" => self::int16, "winDescent" => self::int16);
    }
}
namespace FontLib\Table {
    /**
     * Generic Font table directory entry.
     *
     * @package php-font-lib
     */
    class DirectoryEntry extends \FontLib\BinaryStream
    {
        /**
         * @var File
         */
        protected $font;
        /**
         * @var Table
         */
        protected $font_table;
        public $entryLength = 4;
        public $tag;
        public $checksum;
        public $offset;
        public $length;
        protected $origF;
        /**
         * @param string $data
         *
         * @return int
         */
        static function computeChecksum($data)
        {
        }
        function __construct(\FontLib\TrueType\File $font)
        {
        }
        function parse()
        {
        }
        function open($filename, $mode = self::modeRead)
        {
        }
        function setTable(\FontLib\Table\Table $font_table)
        {
        }
        function encode($entry_offset)
        {
        }
        /**
         * @return File
         */
        function getFont()
        {
        }
        function startRead()
        {
        }
        function endRead()
        {
        }
        function startWrite()
        {
        }
        function endWrite()
        {
        }
    }
}
namespace FontLib {
    /**
     * Encoding map used to map a code point to a Unicode char.
     *
     * @package php-font-lib
     */
    class EncodingMap
    {
        function __construct($file)
        {
        }
        function parse()
        {
        }
    }
}
namespace FontLib\Exception {
    class FontNotFoundException extends \Exception
    {
        public function __construct($fontPath)
        {
        }
    }
}
namespace FontLib {
    /**
     * Font header container.
     *
     * @package php-font-lib
     */
    abstract class Header extends \FontLib\BinaryStream
    {
        /**
         * @var File
         */
        protected $font;
        protected $def = array();
        public $data;
        public function __construct(\FontLib\TrueType\File $font)
        {
        }
        public function encode()
        {
        }
        public function parse()
        {
        }
    }
}
namespace FontLib\EOT {
    /**
     * TrueType font file header.
     *
     * @package php-font-lib
     *
     * @property File $font
     */
    class Header extends \FontLib\Header
    {
        protected $def = array("format" => self::uint32, "numTables" => self::uint16, "searchRange" => self::uint16, "entrySelector" => self::uint16, "rangeShift" => self::uint16);
        public function parse()
        {
        }
        public function encode()
        {
        }
    }
}
namespace FontLib\TrueType {
    /**
     * TrueType font file.
     *
     * @package php-font-lib
     */
    class File extends \FontLib\BinaryStream
    {
        /**
         * @var Header
         */
        public $header = array();
        protected $directory = array();
        protected $data = array();
        protected $glyph_subset = array();
        public $glyph_all = array();
        static $macCharNames = array(".notdef", ".null", "CR", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "increment", "guillemotleft", "guillemotright", "ellipsis", "nbspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "applelogo", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idot", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "dmacron");
        function getTable()
        {
        }
        function setTableOffset($offset)
        {
        }
        function parse()
        {
        }
        function utf8toUnicode($str)
        {
        }
        function getUnicodeCharMap()
        {
        }
        function setSubset($subset)
        {
        }
        function getSubset()
        {
        }
        function encode($tags = array())
        {
        }
        function parseHeader()
        {
        }
        function getFontType()
        {
        }
        function parseTableEntries()
        {
        }
        function normalizeFUnit($value, $base = 1000)
        {
        }
        protected function readTable($tag)
        {
        }
        /**
         * @param $name
         *
         * @return Table
         */
        public function getTableObject($name)
        {
        }
        public function setTableObject($name, \FontLib\Table\Table $data)
        {
        }
        public function getData($name, $key = null)
        {
        }
        function addDirectoryEntry(\FontLib\Table\DirectoryEntry $entry)
        {
        }
        function saveAdobeFontMetrics($file, $encoding = null)
        {
        }
        /**
         * Get a specific name table string value from its ID
         *
         * @param int $nameID The name ID
         *
         * @return string|null
         */
        function getNameTableString($nameID)
        {
        }
        /**
         * Get font copyright
         *
         * @return string|null
         */
        function getFontCopyright()
        {
        }
        /**
         * Get font name
         *
         * @return string|null
         */
        function getFontName()
        {
        }
        /**
         * Get font subfamily
         *
         * @return string|null
         */
        function getFontSubfamily()
        {
        }
        /**
         * Get font subfamily ID
         *
         * @return string|null
         */
        function getFontSubfamilyID()
        {
        }
        /**
         * Get font full name
         *
         * @return string|null
         */
        function getFontFullName()
        {
        }
        /**
         * Get font version
         *
         * @return string|null
         */
        function getFontVersion()
        {
        }
        /**
         * Get font weight
         *
         * @return string|null
         */
        function getFontWeight()
        {
        }
        /**
         * Get font Postscript name
         *
         * @return string|null
         */
        function getFontPostscriptName()
        {
        }
        function reduce()
        {
        }
    }
}
namespace FontLib\EOT {
    /**
     * EOT font file.
     *
     * @package php-font-lib
     */
    class File extends \FontLib\TrueType\File
    {
        const TTEMBED_SUBSET = 0x1;
        const TTEMBED_TTCOMPRESSED = 0x4;
        const TTEMBED_FAILIFVARIATIONSIMULATED = 0x10;
        const TTMBED_EMBEDEUDC = 0x20;
        const TTEMBED_VALIDATIONTESTS = 0x40;
        // Deprecated
        const TTEMBED_WEBOBJECT = 0x80;
        const TTEMBED_XORENCRYPTDATA = 0x10000000;
        /**
         * @var Header
         */
        public $header;
        function parseHeader()
        {
        }
        function parse()
        {
        }
        /**
         * Little endian version of the read method
         *
         * @param int $n The number of bytes to read
         *
         * @return string
         */
        public function read($n)
        {
        }
        public function readUInt32()
        {
        }
        /**
         * Get font copyright
         *
         * @return string|null
         */
        function getFontCopyright()
        {
        }
        /**
         * Get font name
         *
         * @return string|null
         */
        function getFontName()
        {
        }
        /**
         * Get font subfamily
         *
         * @return string|null
         */
        function getFontSubfamily()
        {
        }
        /**
         * Get font subfamily ID
         *
         * @return string|null
         */
        function getFontSubfamilyID()
        {
        }
        /**
         * Get font full name
         *
         * @return string|null
         */
        function getFontFullName()
        {
        }
        /**
         * Get font version
         *
         * @return string|null
         */
        function getFontVersion()
        {
        }
        /**
         * Get font weight
         *
         * @return string|null
         */
        function getFontWeight()
        {
        }
        /**
         * Get font Postscript name
         *
         * @return string|null
         */
        function getFontPostscriptName()
        {
        }
    }
}
namespace FontLib\TrueType {
    /**
     * TrueType table directory entry.
     *
     * @package php-font-lib
     */
    class TableDirectoryEntry extends \FontLib\Table\DirectoryEntry
    {
        function __construct(\FontLib\TrueType\File $font)
        {
        }
        function parse()
        {
        }
    }
}
namespace FontLib\OpenType {
    /**
     * Open Type Table directory entry, the same as a TrueType one.
     *
     * @package php-font-lib
     */
    class TableDirectoryEntry extends \FontLib\TrueType\TableDirectoryEntry
    {
    }
    /**
     * Open Type font, the same as a TrueType one.
     *
     * @package php-font-lib
     */
    class File extends \FontLib\TrueType\File
    {
        //
    }
}
namespace FontLib {
    /**
     * Adobe Font Metrics file creation utility class.
     *
     * @package php-font-lib
     */
    class AdobeFontMetrics
    {
        function __construct(\FontLib\TrueType\File $font)
        {
        }
        function write($file, $encoding = null)
        {
        }
        function addLine($line)
        {
        }
        function addPair($key, $value)
        {
        }
        function addArray($key, $array)
        {
        }
        function addMetric($data)
        {
        }
        function startSection($name, $value = "")
        {
        }
        function endSection($name)
        {
        }
    }
}
namespace FontLib\TrueType {
    /**
     * TrueType font file header.
     *
     * @package php-font-lib
     */
    class Header extends \FontLib\Header
    {
        protected $def = array("format" => self::uint32, "numTables" => self::uint16, "searchRange" => self::uint16, "entrySelector" => self::uint16, "rangeShift" => self::uint16);
        public function parse()
        {
        }
    }
    /**
     * TrueType collection font file.
     *
     * @package php-font-lib
     */
    class Collection extends \FontLib\BinaryStream implements \Iterator, \Countable
    {
        protected $collectionOffsets = array();
        protected $collection = array();
        protected $version;
        protected $numFonts;
        function parse()
        {
        }
        /**
         * @param int $fontId
         *
         * @throws OutOfBoundsException
         * @return File
         */
        function getFont($fontId)
        {
        }
        function current()
        {
        }
        function key()
        {
        }
        function next()
        {
        }
        function rewind()
        {
        }
        function valid()
        {
        }
        function count()
        {
        }
    }
}
namespace FontLib\Glyph {
    /**
     * Glyph outline component
     *
     * @package php-font-lib
     */
    class OutlineComponent
    {
        public $flags;
        public $glyphIndex;
        public $a, $b, $c, $d, $e, $f;
        public $point_compound;
        public $point_component;
        public $instructions;
        function getMatrix()
        {
        }
    }
    /**
     * `glyf` font table.
     *
     * @package php-font-lib
     */
    class Outline extends \FontLib\BinaryStream
    {
        /**
         * @var \FontLib\Table\Type\glyf
         */
        protected $table;
        protected $offset;
        protected $size;
        // Data
        public $numberOfContours;
        public $xMin;
        public $yMin;
        public $xMax;
        public $yMax;
        /**
         * @var string|null
         */
        public $raw;
        /**
         * @param glyf $table
         * @param                 $offset
         * @param                 $size
         *
         * @return Outline
         */
        static function init(\FontLib\Table\Type\glyf $table, $offset, $size, \FontLib\BinaryStream $font)
        {
        }
        /**
         * @return File
         */
        function getFont()
        {
        }
        function __construct(\FontLib\Table\Type\glyf $table, $offset = null, $size = null)
        {
        }
        function parse(\FontLib\BinaryStream $font)
        {
        }
        function parseData()
        {
        }
        function encode()
        {
        }
        function getSVGContours()
        {
        }
        function getGlyphIDs()
        {
        }
    }
    /**
     * `glyf` font table.
     *
     * @package php-font-lib
     */
    class OutlineSimple extends \FontLib\Glyph\Outline
    {
        const ON_CURVE = 0x1;
        const X_SHORT_VECTOR = 0x2;
        const Y_SHORT_VECTOR = 0x4;
        const REPEAT = 0x8;
        const THIS_X_IS_SAME = 0x10;
        const THIS_Y_IS_SAME = 0x20;
        public $instructions;
        public $points;
        function parseData()
        {
        }
        public function splitSVGPath($path)
        {
        }
        public function makePoints($path)
        {
        }
        function encode()
        {
        }
        public function encodePoints($points)
        {
        }
        public function getSVGContours($points = null)
        {
        }
        protected function getSVGPath($points, $startIndex, $count)
        {
        }
        function midValue($a, $b)
        {
        }
    }
    /**
     * Composite glyph outline
     *
     * @package php-font-lib
     */
    class OutlineComposite extends \FontLib\Glyph\Outline
    {
        const ARG_1_AND_2_ARE_WORDS = 0x1;
        const ARGS_ARE_XY_VALUES = 0x2;
        const ROUND_XY_TO_GRID = 0x4;
        const WE_HAVE_A_SCALE = 0x8;
        const MORE_COMPONENTS = 0x20;
        const WE_HAVE_AN_X_AND_Y_SCALE = 0x40;
        const WE_HAVE_A_TWO_BY_TWO = 0x80;
        const WE_HAVE_INSTRUCTIONS = 0x100;
        const USE_MY_METRICS = 0x200;
        const OVERLAP_COMPOUND = 0x400;
        /**
         * @var OutlineComponent[]
         */
        public $components = array();
        function getGlyphIDs()
        {
        }
        /*function parse() {
            //$this->parseData();
          }*/
        function parseData()
        {
        }
        function encode()
        {
        }
        public function getSVGContours()
        {
        }
    }
}
namespace FontLib {
    /**
     * Autoloads FontLib classes
     *
     * @package php-font-lib
     */
    class Autoloader
    {
        const PREFIX = 'FontLib';
        /**
         * Register the autoloader
         */
        public static function register()
        {
        }
        /**
         * Autoloader
         *
         * @param string
         */
        public static function autoload($class)
        {
        }
    }
}
namespace FontLib\WOFF {
    /**
     * WOFF font file header.
     *
     * @package php-font-lib
     */
    class Header extends \FontLib\TrueType\Header
    {
        protected $def = array("format" => self::uint32, "flavor" => self::uint32, "length" => self::uint32, "numTables" => self::uint16, self::uint16, "totalSfntSize" => self::uint32, "majorVersion" => self::uint16, "minorVersion" => self::uint16, "metaOffset" => self::uint32, "metaLength" => self::uint32, "metaOrigLength" => self::uint32, "privOffset" => self::uint32, "privLength" => self::uint32);
    }
    /**
     * WOFF font file table directory entry.
     *
     * @package php-font-lib
     */
    class TableDirectoryEntry extends \FontLib\Table\DirectoryEntry
    {
        public $origLength;
        function __construct(\FontLib\WOFF\File $font)
        {
        }
        function parse()
        {
        }
    }
    /**
     * WOFF font file.
     *
     * @package php-font-lib
     *
     * @property TableDirectoryEntry[] $directory
     */
    class File extends \FontLib\TrueType\File
    {
        function parseHeader()
        {
        }
        public function load($file)
        {
        }
    }
}
namespace FontLib {
    /**
     * Generic font file.
     *
     * @package php-font-lib
     */
    class Font
    {
        static $debug = false;
        /**
         * @param string $file The font file
         *
         * @return TrueType\File|null $file
         */
        public static function load($file)
        {
        }
        static function d($str)
        {
        }
        static function UTF16ToUTF8($str)
        {
        }
        static function UTF8ToUTF16($str)
        {
        }
    }
}
namespace Sabberworm\CSS {
    /**
     * Class OutputFormat
     *
     * @method OutputFormat setSemicolonAfterLastRule(bool $bSemicolonAfterLastRule) Set whether semicolons are added after
     *     last rule.
     */
    class OutputFormat
    {
        /**
         * Value format: `"` means double-quote, `'` means single-quote
         *
         * @var string
         */
        public $sStringQuotingType = '"';
        /**
         * Output RGB colors in hash notation if possible
         *
         * @var string
         */
        public $bRGBHashNotation = true;
        /**
         * Declaration format
         *
         * Semicolon after the last rule of a declaration block can be omitted. To do that, set this false.
         *
         * @var bool
         */
        public $bSemicolonAfterLastRule = true;
        /**
         * Spacing
         * Note that these strings are not sanity-checked: the value should only consist of whitespace
         * Any newline character will be indented according to the current level.
         * The triples (After, Before, Between) can be set using a wildcard (e.g. `$oFormat->set('Space*Rules', "\n");`)
         */
        public $sSpaceAfterRuleName = ' ';
        /**
         * @var string
         */
        public $sSpaceBeforeRules = '';
        /**
         * @var string
         */
        public $sSpaceAfterRules = '';
        /**
         * @var string
         */
        public $sSpaceBetweenRules = '';
        /**
         * @var string
         */
        public $sSpaceBeforeBlocks = '';
        /**
         * @var string
         */
        public $sSpaceAfterBlocks = '';
        /**
         * @var string
         */
        public $sSpaceBetweenBlocks = "\n";
        /**
         * Content injected in and around at-rule blocks.
         *
         * @var string
         */
        public $sBeforeAtRuleBlock = '';
        /**
         * @var string
         */
        public $sAfterAtRuleBlock = '';
        /**
         * This is what’s printed before and after the comma if a declaration block contains multiple selectors.
         *
         * @var string
         */
        public $sSpaceBeforeSelectorSeparator = '';
        /**
         * @var string
         */
        public $sSpaceAfterSelectorSeparator = ' ';
        /**
         * This is what’s printed after the comma of value lists
         *
         * @var string
         */
        public $sSpaceBeforeListArgumentSeparator = '';
        /**
         * @var string
         */
        public $sSpaceAfterListArgumentSeparator = '';
        /**
         * @var string
         */
        public $sSpaceBeforeOpeningBrace = ' ';
        /**
         * Content injected in and around declaration blocks.
         *
         * @var string
         */
        public $sBeforeDeclarationBlock = '';
        /**
         * @var string
         */
        public $sAfterDeclarationBlockSelectors = '';
        /**
         * @var string
         */
        public $sAfterDeclarationBlock = '';
        /**
         * Indentation character(s) per level. Only applicable if newlines are used in any of the spacing settings.
         *
         * @var string
         */
        public $sIndentation = "\t";
        /**
         * Output exceptions.
         *
         * @var bool
         */
        public $bIgnoreExceptions = false;
        public function __construct()
        {
        }
        /**
         * @param string $sName
         *
         * @return string|null
         */
        public function get($sName)
        {
        }
        /**
         * @param array<array-key, string>|string $aNames
         * @param mixed $mValue
         *
         * @return self|false
         */
        public function set($aNames, $mValue)
        {
        }
        /**
         * @param string $sMethodName
         * @param array<array-key, mixed> $aArguments
         *
         * @return mixed
         *
         * @throws \Exception
         */
        public function __call($sMethodName, array $aArguments)
        {
        }
        /**
         * @param int $iNumber
         *
         * @return self
         */
        public function indentWithTabs($iNumber = 1)
        {
        }
        /**
         * @param int $iNumber
         *
         * @return self
         */
        public function indentWithSpaces($iNumber = 2)
        {
        }
        /**
         * @return OutputFormat
         */
        public function nextLevel()
        {
        }
        /**
         * @return void
         */
        public function beLenient()
        {
        }
        /**
         * @return OutputFormatter
         */
        public function getFormatter()
        {
        }
        /**
         * @return int
         */
        public function level()
        {
        }
        /**
         * Creates an instance of this class without any particular formatting settings.
         *
         * @return self
         */
        public static function create()
        {
        }
        /**
         * Creates an instance of this class with a preset for compact formatting.
         *
         * @return self
         */
        public static function createCompact()
        {
        }
        /**
         * Creates an instance of this class with a preset for pretty formatting.
         *
         * @return self
         */
        public static function createPretty()
        {
        }
    }
    class OutputFormatter
    {
        public function __construct(\Sabberworm\CSS\OutputFormat $oFormat)
        {
        }
        /**
         * @param string $sName
         * @param string|null $sType
         *
         * @return string
         */
        public function space($sName, $sType = null)
        {
        }
        /**
         * @return string
         */
        public function spaceAfterRuleName()
        {
        }
        /**
         * @return string
         */
        public function spaceBeforeRules()
        {
        }
        /**
         * @return string
         */
        public function spaceAfterRules()
        {
        }
        /**
         * @return string
         */
        public function spaceBetweenRules()
        {
        }
        /**
         * @return string
         */
        public function spaceBeforeBlocks()
        {
        }
        /**
         * @return string
         */
        public function spaceAfterBlocks()
        {
        }
        /**
         * @return string
         */
        public function spaceBetweenBlocks()
        {
        }
        /**
         * @return string
         */
        public function spaceBeforeSelectorSeparator()
        {
        }
        /**
         * @return string
         */
        public function spaceAfterSelectorSeparator()
        {
        }
        /**
         * @param string $sSeparator
         *
         * @return string
         */
        public function spaceBeforeListArgumentSeparator($sSeparator)
        {
        }
        /**
         * @param string $sSeparator
         *
         * @return string
         */
        public function spaceAfterListArgumentSeparator($sSeparator)
        {
        }
        /**
         * @return string
         */
        public function spaceBeforeOpeningBrace()
        {
        }
        /**
         * Runs the given code, either swallowing or passing exceptions, depending on the `bIgnoreExceptions` setting.
         *
         * @param string $cCode the name of the function to call
         *
         * @return string|null
         */
        public function safely($cCode)
        {
        }
        /**
         * Clone of the `implode` function, but calls `render` with the current output format instead of `__toString()`.
         *
         * @param string $sSeparator
         * @param array<array-key, Renderable|string> $aValues
         * @param bool $bIncreaseLevel
         *
         * @return string
         */
        public function implode($sSeparator, array $aValues, $bIncreaseLevel = false)
        {
        }
        /**
         * @param string $sString
         *
         * @return string
         */
        public function removeLastSemicolon($sString)
        {
        }
    }
}
namespace Sabberworm\CSS\Parsing {
    class ParserState
    {
        /**
         * @var null
         */
        const EOF = null;
        /**
         * @param string $sText
         * @param int $iLineNo
         */
        public function __construct($sText, \Sabberworm\CSS\Settings $oParserSettings, $iLineNo = 1)
        {
        }
        /**
         * @param string $sCharset
         *
         * @return void
         */
        public function setCharset($sCharset)
        {
        }
        /**
         * @return string
         */
        public function getCharset()
        {
        }
        /**
         * @return int
         */
        public function currentLine()
        {
        }
        /**
         * @return int
         */
        public function currentColumn()
        {
        }
        /**
         * @return Settings
         */
        public function getSettings()
        {
        }
        /**
         * @param bool $bIgnoreCase
         *
         * @return string
         *
         * @throws UnexpectedTokenException
         */
        public function parseIdentifier($bIgnoreCase = true)
        {
        }
        /**
         * @param bool $bIsForIdentifier
         *
         * @return string|null
         *
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public function parseCharacter($bIsForIdentifier)
        {
        }
        /**
         * @return array<int, Comment>|void
         *
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public function consumeWhiteSpace()
        {
        }
        /**
         * @param string $sString
         * @param bool $bCaseInsensitive
         *
         * @return bool
         */
        public function comes($sString, $bCaseInsensitive = false)
        {
        }
        /**
         * @param int $iLength
         * @param int $iOffset
         *
         * @return string
         */
        public function peek($iLength = 1, $iOffset = 0)
        {
        }
        /**
         * @param int $mValue
         *
         * @return string
         *
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public function consume($mValue = 1)
        {
        }
        /**
         * @param string $mExpression
         * @param int|null $iMaxLength
         *
         * @return string
         *
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public function consumeExpression($mExpression, $iMaxLength = null)
        {
        }
        /**
         * @return Comment|false
         */
        public function consumeComment()
        {
        }
        /**
         * @return bool
         */
        public function isEnd()
        {
        }
        /**
         * @param array<array-key, string>|string $aEnd
         * @param string $bIncludeEnd
         * @param string $consumeEnd
         * @param array<int, Comment> $comments
         *
         * @return string
         *
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public function consumeUntil($aEnd, $bIncludeEnd = false, $consumeEnd = false, array &$comments = [])
        {
        }
        /**
         * @param string $sString1
         * @param string $sString2
         * @param bool $bCaseInsensitive
         *
         * @return bool
         */
        public function streql($sString1, $sString2, $bCaseInsensitive = true)
        {
        }
        /**
         * @param int $iAmount
         *
         * @return void
         */
        public function backtrack($iAmount)
        {
        }
        /**
         * @param string $sString
         *
         * @return int
         */
        public function strlen($sString)
        {
        }
    }
    class SourceException extends \Exception
    {
        /**
         * @param string $sMessage
         * @param int $iLineNo
         */
        public function __construct($sMessage, $iLineNo = 0)
        {
        }
        /**
         * @return int
         */
        public function getLineNo()
        {
        }
    }
    /**
     * Thrown if the CSS parser attempts to print something invalid.
     */
    class OutputException extends \Sabberworm\CSS\Parsing\SourceException
    {
        /**
         * @param string $sMessage
         * @param int $iLineNo
         */
        public function __construct($sMessage, $iLineNo = 0)
        {
        }
    }
    /**
     * Thrown if the CSS parser encounters a token it did not expect.
     */
    class UnexpectedTokenException extends \Sabberworm\CSS\Parsing\SourceException
    {
        /**
         * @param string $sExpected
         * @param string $sFound
         * @param string $sMatchType
         * @param int $iLineNo
         */
        public function __construct($sExpected, $sFound, $sMatchType = 'literal', $iLineNo = 0)
        {
        }
    }
    /**
     * Thrown if the CSS parser encounters end of file it did not expect.
     *
     * Extends `UnexpectedTokenException` in order to preserve backwards compatibility.
     */
    class UnexpectedEOFException extends \Sabberworm\CSS\Parsing\UnexpectedTokenException
    {
    }
}
namespace Sabberworm\CSS\Comment {
    interface Commentable
    {
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function addComments(array $aComments);
        /**
         * @return array<array-key, Comment>
         */
        public function getComments();
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function setComments(array $aComments);
    }
}
namespace Sabberworm\CSS {
    interface Renderable
    {
        /**
         * @return string
         */
        public function __toString();
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat);
        /**
         * @return int
         */
        public function getLineNo();
    }
}
namespace Sabberworm\CSS\Comment {
    class Comment implements \Sabberworm\CSS\Renderable
    {
        /**
         * @var int
         */
        protected $iLineNo;
        /**
         * @var string
         */
        protected $sComment;
        /**
         * @param string $sComment
         * @param int $iLineNo
         */
        public function __construct($sComment = '', $iLineNo = 0)
        {
        }
        /**
         * @return string
         */
        public function getComment()
        {
        }
        /**
         * @return int
         */
        public function getLineNo()
        {
        }
        /**
         * @param string $sComment
         *
         * @return void
         */
        public function setComment($sComment)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
}
namespace Sabberworm\CSS\CSSList {
    /**
     * A `CSSList` is the most generic container available. Its contents include `RuleSet` as well as other `CSSList`
     * objects.
     *
     * Also, it may contain `Import` and `Charset` objects stemming from at-rules.
     */
    abstract class CSSList implements \Sabberworm\CSS\Renderable, \Sabberworm\CSS\Comment\Commentable
    {
        /**
         * @var array<array-key, Comment>
         */
        protected $aComments;
        /**
         * @var array<int, RuleSet|CSSList|Import|Charset>
         */
        protected $aContents;
        /**
         * @var int
         */
        protected $iLineNo;
        /**
         * @param int $iLineNo
         */
        public function __construct($iLineNo = 0)
        {
        }
        /**
         * @return void
         *
         * @throws UnexpectedTokenException
         * @throws SourceException
         */
        public static function parseList(\Sabberworm\CSS\Parsing\ParserState $oParserState, \Sabberworm\CSS\CSSList\CSSList $oList)
        {
        }
        /**
         * @return int
         */
        public function getLineNo()
        {
        }
        /**
         * Prepends an item to the list of contents.
         *
         * @param RuleSet|CSSList|Import|Charset $oItem
         *
         * @return void
         */
        public function prepend($oItem)
        {
        }
        /**
         * Appends an item to tje list of contents.
         *
         * @param RuleSet|CSSList|Import|Charset $oItem
         *
         * @return void
         */
        public function append($oItem)
        {
        }
        /**
         * Splices the list of contents.
         *
         * @param int $iOffset
         * @param int $iLength
         * @param array<int, RuleSet|CSSList|Import|Charset> $mReplacement
         *
         * @return void
         */
        public function splice($iOffset, $iLength = null, $mReplacement = null)
        {
        }
        /**
         * Removes an item from the CSS list.
         *
         * @param RuleSet|Import|Charset|CSSList $oItemToRemove
         *        May be a RuleSet (most likely a DeclarationBlock), a Import,
         *        a Charset or another CSSList (most likely a MediaQuery)
         *
         * @return bool whether the item was removed
         */
        public function remove($oItemToRemove)
        {
        }
        /**
         * Replaces an item from the CSS list.
         *
         * @param RuleSet|Import|Charset|CSSList $oOldItem
         *        May be a `RuleSet` (most likely a `DeclarationBlock`), an `Import`, a `Charset`
         *        or another `CSSList` (most likely a `MediaQuery`)
         *
         * @return bool
         */
        public function replace($oOldItem, $mNewItem)
        {
        }
        /**
         * @param array<int, RuleSet|Import|Charset|CSSList> $aContents
         */
        public function setContents(array $aContents)
        {
        }
        /**
         * Removes a declaration block from the CSS list if it matches all given selectors.
         *
         * @param DeclarationBlock|array<array-key, Selector>|string $mSelector the selectors to match
         * @param bool $bRemoveAll whether to stop at the first declaration block found or remove all blocks
         *
         * @return void
         */
        public function removeDeclarationBlockBySelector($mSelector, $bRemoveAll = false)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
        /**
         * Return true if the list can not be further outdented. Only important when rendering.
         *
         * @return bool
         */
        public abstract function isRootList();
        /**
         * @return array<int, RuleSet|Import|Charset|CSSList>
         */
        public function getContents()
        {
        }
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function addComments(array $aComments)
        {
        }
        /**
         * @return array<array-key, Comment>
         */
        public function getComments()
        {
        }
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function setComments(array $aComments)
        {
        }
    }
    /**
     * A `CSSBlockList` is a `CSSList` whose `DeclarationBlock`s are guaranteed to contain valid declaration blocks or
     * at-rules.
     *
     * Most `CSSList`s conform to this category but some at-rules (such as `@keyframes`) do not.
     */
    abstract class CSSBlockList extends \Sabberworm\CSS\CSSList\CSSList
    {
        /**
         * @param int $iLineNo
         */
        public function __construct($iLineNo = 0)
        {
        }
        /**
         * @param array<int, DeclarationBlock> $aResult
         *
         * @return void
         */
        protected function allDeclarationBlocks(array &$aResult)
        {
        }
        /**
         * @param array<int, RuleSet> $aResult
         *
         * @return void
         */
        protected function allRuleSets(array &$aResult)
        {
        }
        /**
         * @param CSSList|Rule|RuleSet|Value $oElement
         * @param array<int, Value> $aResult
         * @param string|null $sSearchString
         * @param bool $bSearchInFunctionArguments
         *
         * @return void
         */
        protected function allValues($oElement, array &$aResult, $sSearchString = null, $bSearchInFunctionArguments = false)
        {
        }
        /**
         * @param array<int, Selector> $aResult
         * @param string|null $sSpecificitySearch
         *
         * @return void
         */
        protected function allSelectors(array &$aResult, $sSpecificitySearch = null)
        {
        }
    }
    /**
     * The root `CSSList` of a parsed file. Contains all top-level CSS contents, mostly declaration blocks,
     * but also any at-rules encountered.
     */
    class Document extends \Sabberworm\CSS\CSSList\CSSBlockList
    {
        /**
         * @param int $iLineNo
         */
        public function __construct($iLineNo = 0)
        {
        }
        /**
         * @return Document
         *
         * @throws SourceException
         */
        public static function parse(\Sabberworm\CSS\Parsing\ParserState $oParserState)
        {
        }
        /**
         * Gets all `DeclarationBlock` objects recursively.
         *
         * @return array<int, DeclarationBlock>
         */
        public function getAllDeclarationBlocks()
        {
        }
        /**
         * Gets all `DeclarationBlock` objects recursively.
         *
         * @return array<int, DeclarationBlock>
         *
         * @deprecated will be removed in version 9.0; use `getAllDeclarationBlocks()` instead
         */
        public function getAllSelectors()
        {
        }
        /**
         * Returns all `RuleSet` objects found recursively in the tree.
         *
         * @return array<int, RuleSet>
         */
        public function getAllRuleSets()
        {
        }
        /**
         * Returns all `Value` objects found recursively in the tree.
         *
         * @param CSSList|RuleSet|string $mElement
         *        the `CSSList` or `RuleSet` to start the search from (defaults to the whole document).
         *        If a string is given, it is used as rule name filter.
         * @param bool $bSearchInFunctionArguments whether to also return Value objects used as Function arguments.
         *
         * @return array<int, Value>
         *
         * @see RuleSet->getRules()
         */
        public function getAllValues($mElement = null, $bSearchInFunctionArguments = false)
        {
        }
        /**
         * Returns all `Selector` objects found recursively in the tree.
         *
         * Note that this does not yield the full `DeclarationBlock` that the selector belongs to
         * (and, currently, there is no way to get to that).
         *
         * @param string|null $sSpecificitySearch
         *        An optional filter by specificity.
         *        May contain a comparison operator and a number or just a number (defaults to "==").
         *
         * @return array<int, Selector>
         * @example `getSelectorsBySpecificity('>= 100')`
         *
         */
        public function getSelectorsBySpecificity($sSpecificitySearch = null)
        {
        }
        /**
         * Expands all shorthand properties to their long value.
         *
         * @return void
         */
        public function expandShorthands()
        {
        }
        /**
         * Create shorthands properties whenever possible.
         *
         * @return void
         */
        public function createShorthands()
        {
        }
        /**
         * Overrides `render()` to make format argument optional.
         *
         * @param OutputFormat|null $oOutputFormat
         *
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat = null)
        {
        }
        /**
         * @return bool
         */
        public function isRootList()
        {
        }
    }
}
namespace Sabberworm\CSS\Property {
    interface AtRule extends \Sabberworm\CSS\Renderable, \Sabberworm\CSS\Comment\Commentable
    {
        /**
         * Since there are more set rules than block rules,
         * we’re whitelisting the block rules and have anything else be treated as a set rule.
         *
         * @var string
         */
        const BLOCK_RULES = 'media/document/supports/region-style/font-feature-values';
        /**
         * … and more font-specific ones (to be used inside font-feature-values)
         *
         * @var string
         */
        const SET_RULES = 'font-face/counter-style/page/swash/styleset/annotation';
        /**
         * @return string|null
         */
        public function atRuleName();
        /**
         * @return string|null
         */
        public function atRuleArgs();
    }
}
namespace Sabberworm\CSS\CSSList {
    /**
     * A `BlockList` constructed by an unknown at-rule. `@media` rules are rendered into `AtRuleBlockList` objects.
     */
    class AtRuleBlockList extends \Sabberworm\CSS\CSSList\CSSBlockList implements \Sabberworm\CSS\Property\AtRule
    {
        /**
         * @param string $sType
         * @param string $sArgs
         * @param int $iLineNo
         */
        public function __construct($sType, $sArgs = '', $iLineNo = 0)
        {
        }
        /**
         * @return string
         */
        public function atRuleName()
        {
        }
        /**
         * @return string
         */
        public function atRuleArgs()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
        /**
         * @return bool
         */
        public function isRootList()
        {
        }
    }
    class KeyFrame extends \Sabberworm\CSS\CSSList\CSSList implements \Sabberworm\CSS\Property\AtRule
    {
        /**
         * @param int $iLineNo
         */
        public function __construct($iLineNo = 0)
        {
        }
        /**
         * @param string $vendorKeyFrame
         */
        public function setVendorKeyFrame($vendorKeyFrame)
        {
        }
        /**
         * @return string|null
         */
        public function getVendorKeyFrame()
        {
        }
        /**
         * @param string $animationName
         */
        public function setAnimationName($animationName)
        {
        }
        /**
         * @return string|null
         */
        public function getAnimationName()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
        /**
         * @return bool
         */
        public function isRootList()
        {
        }
        /**
         * @return string|null
         */
        public function atRuleName()
        {
        }
        /**
         * @return string|null
         */
        public function atRuleArgs()
        {
        }
    }
}
namespace Sabberworm\CSS\RuleSet {
    /**
     * RuleSet is a generic superclass denoting rules. The typical example for rule sets are declaration block.
     * However, unknown At-Rules (like `@font-face`) are also rule sets.
     */
    abstract class RuleSet implements \Sabberworm\CSS\Renderable, \Sabberworm\CSS\Comment\Commentable
    {
        /**
         * @var int
         */
        protected $iLineNo;
        /**
         * @var array<array-key, Comment>
         */
        protected $aComments;
        /**
         * @param int $iLineNo
         */
        public function __construct($iLineNo = 0)
        {
        }
        /**
         * @return void
         *
         * @throws UnexpectedTokenException
         * @throws UnexpectedEOFException
         */
        public static function parseRuleSet(\Sabberworm\CSS\Parsing\ParserState $oParserState, \Sabberworm\CSS\RuleSet\RuleSet $oRuleSet)
        {
        }
        /**
         * @return int
         */
        public function getLineNo()
        {
        }
        /**
         * @param Rule|null $oSibling
         *
         * @return void
         */
        public function addRule(\Sabberworm\CSS\Rule\Rule $oRule, \Sabberworm\CSS\Rule\Rule $oSibling = null)
        {
        }
        /**
         * Returns all rules matching the given rule name
         *
         * @example $oRuleSet->getRules('font') // returns array(0 => $oRule, …) or array().
         *
         * @example $oRuleSet->getRules('font-')
         *          //returns an array of all rules either beginning with font- or matching font.
         *
         * @param Rule|string|null $mRule
         *        Pattern to search for. If null, returns all rules.
         *        If the pattern ends with a dash, all rules starting with the pattern are returned
         *        as well as one matching the pattern with the dash excluded.
         *        Passing a Rule behaves like calling `getRules($mRule->getRule())`.
         *
         * @return array<int, Rule>
         */
        public function getRules($mRule = null)
        {
        }
        /**
         * Overrides all the rules of this set.
         *
         * @param array<array-key, Rule> $aRules The rules to override with.
         *
         * @return void
         */
        public function setRules(array $aRules)
        {
        }
        /**
         * Returns all rules matching the given pattern and returns them in an associative array with the rule’s name
         * as keys. This method exists mainly for backwards-compatibility and is really only partially useful.
         *
         * Note: This method loses some information: Calling this (with an argument of `background-`) on a declaration block
         * like `{ background-color: green; background-color; rgba(0, 127, 0, 0.7); }` will only yield an associative array
         * containing the rgba-valued rule while `getRules()` would yield an indexed array containing both.
         *
         * @param Rule|string|null $mRule $mRule
         *        Pattern to search for. If null, returns all rules. If the pattern ends with a dash,
         *        all rules starting with the pattern are returned as well as one matching the pattern with the dash
         *        excluded. Passing a Rule behaves like calling `getRules($mRule->getRule())`.
         *
         * @return array<string, Rule>
         */
        public function getRulesAssoc($mRule = null)
        {
        }
        /**
         * Removes a rule from this RuleSet. This accepts all the possible values that `getRules()` accepts.
         *
         * If given a Rule, it will only remove this particular rule (by identity).
         * If given a name, it will remove all rules by that name.
         *
         * Note: this is different from pre-v.2.0 behaviour of PHP-CSS-Parser, where passing a Rule instance would
         * remove all rules with the same name. To get the old behaviour, use `removeRule($oRule->getRule())`.
         *
         * @param Rule|string|null $mRule
         *        pattern to remove. If $mRule is null, all rules are removed. If the pattern ends in a dash,
         *        all rules starting with the pattern are removed as well as one matching the pattern with the dash
         *        excluded. Passing a Rule behaves matches by identity.
         *
         * @return void
         */
        public function removeRule($mRule)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
        /**
         * @param array<string, Comment> $aComments
         *
         * @return void
         */
        public function addComments(array $aComments)
        {
        }
        /**
         * @return array<string, Comment>
         */
        public function getComments()
        {
        }
        /**
         * @param array<string, Comment> $aComments
         *
         * @return void
         */
        public function setComments(array $aComments)
        {
        }
    }
    /**
     * A RuleSet constructed by an unknown at-rule. `@font-face` rules are rendered into AtRuleSet objects.
     */
    class AtRuleSet extends \Sabberworm\CSS\RuleSet\RuleSet implements \Sabberworm\CSS\Property\AtRule
    {
        /**
         * @param string $sType
         * @param string $sArgs
         * @param int $iLineNo
         */
        public function __construct($sType, $sArgs = '', $iLineNo = 0)
        {
        }
        /**
         * @return string
         */
        public function atRuleName()
        {
        }
        /**
         * @return string
         */
        public function atRuleArgs()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
    /**
     * Declaration blocks are the parts of a CSS file which denote the rules belonging to a selector.
     *
     * Declaration blocks usually appear directly inside a `Document` or another `CSSList` (mostly a `MediaQuery`).
     */
    class DeclarationBlock extends \Sabberworm\CSS\RuleSet\RuleSet
    {
        /**
         * @param int $iLineNo
         */
        public function __construct($iLineNo = 0)
        {
        }
        /**
         * @param CSSList|null $oList
         *
         * @return DeclarationBlock|false
         *
         * @throws UnexpectedTokenException
         * @throws UnexpectedEOFException
         */
        public static function parse(\Sabberworm\CSS\Parsing\ParserState $oParserState, $oList = null)
        {
        }
        /**
         * @param array<int, Selector|string>|string $mSelector
         * @param CSSList|null $oList
         *
         * @throws UnexpectedTokenException
         */
        public function setSelectors($mSelector, $oList = null)
        {
        }
        /**
         * Remove one of the selectors of the block.
         *
         * @param Selector|string $mSelector
         *
         * @return bool
         */
        public function removeSelector($mSelector)
        {
        }
        /**
         * @return array<int, Selector|string>
         *
         * @deprecated will be removed in version 9.0; use `getSelectors()` instead
         */
        public function getSelector()
        {
        }
        /**
         * @param Selector|string $mSelector
         * @param CSSList|null $oList
         *
         * @return void
         *
         * @deprecated will be removed in version 9.0; use `setSelectors()` instead
         */
        public function setSelector($mSelector, $oList = null)
        {
        }
        /**
         * @return array<int, Selector|string>
         */
        public function getSelectors()
        {
        }
        /**
         * Splits shorthand declarations (e.g. `margin` or `font`) into their constituent parts.
         *
         * @return void
         */
        public function expandShorthands()
        {
        }
        /**
         * Creates shorthand declarations (e.g. `margin` or `font`) whenever possible.
         *
         * @return void
         */
        public function createShorthands()
        {
        }
        /**
         * Splits shorthand border declarations (e.g. `border: 1px red;`).
         *
         * Additional splitting happens in expandDimensionsShorthand.
         *
         * Multiple borders are not yet supported as of 3.
         *
         * @return void
         */
        public function expandBorderShorthand()
        {
        }
        /**
         * Splits shorthand dimensional declarations (e.g. `margin: 0px auto;`)
         * into their constituent parts.
         *
         * Handles `margin`, `padding`, `border-color`, `border-style` and `border-width`.
         *
         * @return void
         */
        public function expandDimensionsShorthand()
        {
        }
        /**
         * Converts shorthand font declarations
         * (e.g. `font: 300 italic 11px/14px verdana, helvetica, sans-serif;`)
         * into their constituent parts.
         *
         * @return void
         */
        public function expandFontShorthand()
        {
        }
        /**
         * Converts shorthand background declarations
         * (e.g. `background: url("chess.png") gray 50% repeat fixed;`)
         * into their constituent parts.
         *
         * @see http://www.w3.org/TR/21/colors.html#propdef-background
         *
         * @return void
         */
        public function expandBackgroundShorthand()
        {
        }
        /**
         * @return void
         */
        public function expandListStyleShorthand()
        {
        }
        /**
         * @param array<array-key, string> $aProperties
         * @param string $sShorthand
         *
         * @return void
         */
        public function createShorthandProperties(array $aProperties, $sShorthand)
        {
        }
        /**
         * @return void
         */
        public function createBackgroundShorthand()
        {
        }
        /**
         * @return void
         */
        public function createListStyleShorthand()
        {
        }
        /**
         * Combines `border-color`, `border-style` and `border-width` into `border`.
         *
         * Should be run after `create_dimensions_shorthand`!
         *
         * @return void
         */
        public function createBorderShorthand()
        {
        }
        /**
         * Looks for long format CSS dimensional properties
         * (margin, padding, border-color, border-style and border-width)
         * and converts them into shorthand CSS properties.
         *
         * @return void
         */
        public function createDimensionsShorthand()
        {
        }
        /**
         * Looks for long format CSS font properties (e.g. `font-weight`) and
         * tries to convert them into a shorthand CSS `font` property.
         *
         * At least `font-size` AND `font-family` must be present in order to create a shorthand declaration.
         *
         * @return void
         */
        public function createFontShorthand()
        {
        }
        /**
         * @return string
         *
         * @throws OutputException
         */
        public function __toString()
        {
        }
        /**
         * @return string
         *
         * @throws OutputException
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
}
namespace Sabberworm\CSS {
    /**
     * This class parses CSS from text into a data structure.
     */
    class Parser
    {
        /**
         * @param string $sText
         * @param Settings|null $oParserSettings
         * @param int $iLineNo the line number (starting from 1, not from 0)
         */
        public function __construct($sText, \Sabberworm\CSS\Settings $oParserSettings = null, $iLineNo = 1)
        {
        }
        /**
         * @param string $sCharset
         *
         * @return void
         */
        public function setCharset($sCharset)
        {
        }
        /**
         * @return void
         */
        public function getCharset()
        {
        }
        /**
         * @return Document
         *
         * @throws SourceException
         */
        public function parse()
        {
        }
    }
    /**
     * Parser settings class.
     *
     * Configure parser behaviour here.
     */
    class Settings
    {
        /**
         * Multi-byte string support.
         * If true (mbstring extension must be enabled), will use (slower) `mb_strlen`, `mb_convert_case`, `mb_substr`
         * and `mb_strpos` functions. Otherwise, the normal (ASCII-Only) functions will be used.
         *
         * @var bool
         */
        public $bMultibyteSupport;
        /**
         * The default charset for the CSS if no `@charset` rule is found. Defaults to utf-8.
         *
         * @var string
         */
        public $sDefaultCharset = 'utf-8';
        /**
         * Lenient parsing. When used (which is true by default), the parser will not choke
         * on unexpected tokens but simply ignore them.
         *
         * @var bool
         */
        public $bLenientParsing = true;
        /**
         * @return self new instance
         */
        public static function create()
        {
        }
        /**
         * @param bool $bMultibyteSupport
         *
         * @return self fluent interface
         */
        public function withMultibyteSupport($bMultibyteSupport = true)
        {
        }
        /**
         * @param string $sDefaultCharset
         *
         * @return self fluent interface
         */
        public function withDefaultCharset($sDefaultCharset)
        {
        }
        /**
         * @param bool $bLenientParsing
         *
         * @return self fluent interface
         */
        public function withLenientParsing($bLenientParsing = true)
        {
        }
        /**
         * @return self fluent interface
         */
        public function beStrict()
        {
        }
    }
}
namespace Sabberworm\CSS\Rule {
    /**
     * RuleSets contains Rule objects which always have a key and a value.
     * In CSS, Rules are expressed as follows: “key: value[0][0] value[0][1], value[1][0] value[1][1];”
     */
    class Rule implements \Sabberworm\CSS\Renderable, \Sabberworm\CSS\Comment\Commentable
    {
        /**
         * @var int
         */
        protected $iLineNo;
        /**
         * @var int
         */
        protected $iColNo;
        /**
         * @var array<array-key, Comment>
         */
        protected $aComments;
        /**
         * @param string $sRule
         * @param int $iLineNo
         * @param int $iColNo
         */
        public function __construct($sRule, $iLineNo = 0, $iColNo = 0)
        {
        }
        /**
         * @return Rule
         *
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public static function parse(\Sabberworm\CSS\Parsing\ParserState $oParserState)
        {
        }
        /**
         * @return int
         */
        public function getLineNo()
        {
        }
        /**
         * @return int
         */
        public function getColNo()
        {
        }
        /**
         * @param int $iLine
         * @param int $iColumn
         *
         * @return void
         */
        public function setPosition($iLine, $iColumn)
        {
        }
        /**
         * @param string $sRule
         *
         * @return void
         */
        public function setRule($sRule)
        {
        }
        /**
         * @return string
         */
        public function getRule()
        {
        }
        /**
         * @return RuleValueList|null
         */
        public function getValue()
        {
        }
        /**
         * @param RuleValueList|null $mValue
         *
         * @return void
         */
        public function setValue($mValue)
        {
        }
        /**
         * @param array<array-key, array<array-key, RuleValueList>> $aSpaceSeparatedValues
         *
         * @return RuleValueList
         *
         * @deprecated will be removed in version 9.0
         *             Old-Style 2-dimensional array given. Retained for (some) backwards-compatibility.
         *             Use `setValue()` instead and wrap the value inside a RuleValueList if necessary.
         */
        public function setValues(array $aSpaceSeparatedValues)
        {
        }
        /**
         * @return array<int, array<int, RuleValueList>>
         *
         * @deprecated will be removed in version 9.0
         *             Old-Style 2-dimensional array returned. Retained for (some) backwards-compatibility.
         *             Use `getValue()` instead and check for the existence of a (nested set of) ValueList object(s).
         */
        public function getValues()
        {
        }
        /**
         * Adds a value to the existing value. Value will be appended if a `RuleValueList` exists of the given type.
         * Otherwise, the existing value will be wrapped by one.
         *
         * @param RuleValueList|array<int, RuleValueList> $mValue
         * @param string $sType
         *
         * @return void
         */
        public function addValue($mValue, $sType = ' ')
        {
        }
        /**
         * @param int $iModifier
         *
         * @return void
         */
        public function addIeHack($iModifier)
        {
        }
        /**
         * @param array<int, int> $aModifiers
         *
         * @return void
         */
        public function setIeHack(array $aModifiers)
        {
        }
        /**
         * @return array<int, int>
         */
        public function getIeHack()
        {
        }
        /**
         * @param bool $bIsImportant
         *
         * @return void
         */
        public function setIsImportant($bIsImportant)
        {
        }
        /**
         * @return bool
         */
        public function getIsImportant()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function addComments(array $aComments)
        {
        }
        /**
         * @return array<array-key, Comment>
         */
        public function getComments()
        {
        }
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function setComments(array $aComments)
        {
        }
    }
}
namespace Sabberworm\CSS\Property {
    /**
     * Class representing a single CSS selector. Selectors have to be split by the comma prior to being passed into this
     * class.
     */
    class Selector
    {
        /**
         * regexp for specificity calculations
         *
         * @var string
         */
        const NON_ID_ATTRIBUTES_AND_PSEUDO_CLASSES_RX = '/
        (\\.[\\w]+)                   # classes
        |
        \\[(\\w+)                     # attributes
        |
        (\\:(                        # pseudo classes
            link|visited|active
            |hover|focus
            |lang
            |target
            |enabled|disabled|checked|indeterminate
            |root
            |nth-child|nth-last-child|nth-of-type|nth-last-of-type
            |first-child|last-child|first-of-type|last-of-type
            |only-child|only-of-type
            |empty|contains
        ))
        /ix';
        /**
         * regexp for specificity calculations
         *
         * @var string
         */
        const ELEMENTS_AND_PSEUDO_ELEMENTS_RX = '/
        ((^|[\\s\\+\\>\\~]+)[\\w]+   # elements
        |
        \\:{1,2}(                # pseudo-elements
            after|before|first-letter|first-line|selection
        ))
        /ix';
        /**
         * regexp for specificity calculations
         *
         * @var string
         */
        const SELECTOR_VALIDATION_RX = '/
        ^(
            (?:
                [a-zA-Z0-9\\x{00A0}-\\x{FFFF}_^$|*="\'~\\[\\]()\\-\\s\\.:#+>]* # any sequence of valid unescaped characters
                (?:\\\\.)?                                              # a single escaped character
                (?:([\'"]).*?(?<!\\\\)\\2)?                              # a quoted text like [id="example"]
            )*
        )$
        /ux';
        /**
         * @param string $sSelector
         *
         * @return bool
         */
        public static function isValid($sSelector)
        {
        }
        /**
         * @param string $sSelector
         * @param bool $bCalculateSpecificity
         */
        public function __construct($sSelector, $bCalculateSpecificity = false)
        {
        }
        /**
         * @return string
         */
        public function getSelector()
        {
        }
        /**
         * @param string $sSelector
         *
         * @return void
         */
        public function setSelector($sSelector)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return int
         */
        public function getSpecificity()
        {
        }
    }
    class KeyframeSelector extends \Sabberworm\CSS\Property\Selector
    {
        /**
         * regexp for specificity calculations
         *
         * @var string
         */
        const SELECTOR_VALIDATION_RX = '/
    ^(
        (?:
            [a-zA-Z0-9\\x{00A0}-\\x{FFFF}_^$|*="\'~\\[\\]()\\-\\s\\.:#+>]* # any sequence of valid unescaped characters
            (?:\\\\.)?                                              # a single escaped character
            (?:([\'"]).*?(?<!\\\\)\\2)?                              # a quoted text like [id="example"]
        )*
    )|
    (\\d+%)                                                          # keyframe animation progress percentage (e.g. 50%)
    $
    /ux';
    }
    /**
     * Class representing an `@charset` rule.
     *
     * The following restrictions apply:
     * - May not be found in any CSSList other than the Document.
     * - May only appear at the very top of a Document’s contents.
     * - Must not appear more than once.
     */
    class Charset implements \Sabberworm\CSS\Property\AtRule
    {
        /**
         * @var int
         */
        protected $iLineNo;
        /**
         * @var array<array-key, Comment>
         */
        protected $aComments;
        /**
         * @param string $sCharset
         * @param int $iLineNo
         */
        public function __construct($sCharset, $iLineNo = 0)
        {
        }
        /**
         * @return int
         */
        public function getLineNo()
        {
        }
        /**
         * @param string $sCharset
         *
         * @return void
         */
        public function setCharset($sCharset)
        {
        }
        /**
         * @return string
         */
        public function getCharset()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
        /**
         * @return string
         */
        public function atRuleName()
        {
        }
        /**
         * @return string
         */
        public function atRuleArgs()
        {
        }
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function addComments(array $aComments)
        {
        }
        /**
         * @return array<array-key, Comment>
         */
        public function getComments()
        {
        }
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function setComments(array $aComments)
        {
        }
    }
    /**
     * Class representing an `@import` rule.
     */
    class Import implements \Sabberworm\CSS\Property\AtRule
    {
        /**
         * @var int
         */
        protected $iLineNo;
        /**
         * @var array<array-key, Comment>
         */
        protected $aComments;
        /**
         * @param URL $oLocation
         * @param string $sMediaQuery
         * @param int $iLineNo
         */
        public function __construct(\Sabberworm\CSS\Value\URL $oLocation, $sMediaQuery, $iLineNo = 0)
        {
        }
        /**
         * @return int
         */
        public function getLineNo()
        {
        }
        /**
         * @param URL $oLocation
         *
         * @return void
         */
        public function setLocation($oLocation)
        {
        }
        /**
         * @return URL
         */
        public function getLocation()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
        /**
         * @return string
         */
        public function atRuleName()
        {
        }
        /**
         * @return array<int, URL|string>
         */
        public function atRuleArgs()
        {
        }
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function addComments(array $aComments)
        {
        }
        /**
         * @return array<array-key, Comment>
         */
        public function getComments()
        {
        }
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function setComments(array $aComments)
        {
        }
    }
    /**
     * `CSSNamespace` represents an `@namespace` rule.
     */
    class CSSNamespace implements \Sabberworm\CSS\Property\AtRule
    {
        /**
         * @var array<array-key, Comment>
         */
        protected $aComments;
        /**
         * @param string $mUrl
         * @param string|null $sPrefix
         * @param int $iLineNo
         */
        public function __construct($mUrl, $sPrefix = null, $iLineNo = 0)
        {
        }
        /**
         * @return int
         */
        public function getLineNo()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
        /**
         * @return string
         */
        public function getUrl()
        {
        }
        /**
         * @return string|null
         */
        public function getPrefix()
        {
        }
        /**
         * @param string $mUrl
         *
         * @return void
         */
        public function setUrl($mUrl)
        {
        }
        /**
         * @param string $sPrefix
         *
         * @return void
         */
        public function setPrefix($sPrefix)
        {
        }
        /**
         * @return string
         */
        public function atRuleName()
        {
        }
        /**
         * @return array<int, string>
         */
        public function atRuleArgs()
        {
        }
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function addComments(array $aComments)
        {
        }
        /**
         * @return array<array-key, Comment>
         */
        public function getComments()
        {
        }
        /**
         * @param array<array-key, Comment> $aComments
         *
         * @return void
         */
        public function setComments(array $aComments)
        {
        }
    }
}
namespace Sabberworm\CSS\Value {
    abstract class Value implements \Sabberworm\CSS\Renderable
    {
        /**
         * @var int
         */
        protected $iLineNo;
        /**
         * @param int $iLineNo
         */
        public function __construct($iLineNo = 0)
        {
        }
        /**
         * @param array<array-key, string> $aListDelimiters
         *
         * @return RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string
         *
         * @throws UnexpectedTokenException
         * @throws UnexpectedEOFException
         */
        public static function parseValue(\Sabberworm\CSS\Parsing\ParserState $oParserState, array $aListDelimiters = [])
        {
        }
        /**
         * @param bool $bIgnoreCase
         *
         * @return CSSFunction|string
         *
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public static function parseIdentifierOrFunction(\Sabberworm\CSS\Parsing\ParserState $oParserState, $bIgnoreCase = false)
        {
        }
        /**
         * @return CSSFunction|CSSString|LineName|Size|URL|string
         *
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         * @throws SourceException
         */
        public static function parsePrimitiveValue(\Sabberworm\CSS\Parsing\ParserState $oParserState)
        {
        }
        /**
         * @return int
         */
        public function getLineNo()
        {
        }
    }
    abstract class ValueList extends \Sabberworm\CSS\Value\Value
    {
        /**
         * @var array<int, RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string>
         */
        protected $aComponents;
        /**
         * @var string
         */
        protected $sSeparator;
        /**
         * phpcs:ignore Generic.Files.LineLength
         * @param array<int, RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string>|RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string $aComponents
         * @param string $sSeparator
         * @param int $iLineNo
         */
        public function __construct($aComponents = [], $sSeparator = ',', $iLineNo = 0)
        {
        }
        /**
         * @param RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string $mComponent
         *
         * @return void
         */
        public function addListComponent($mComponent)
        {
        }
        /**
         * @return array<int, RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string>
         */
        public function getListComponents()
        {
        }
        /**
         * @param array<int, RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string> $aComponents
         *
         * @return void
         */
        public function setListComponents(array $aComponents)
        {
        }
        /**
         * @return string
         */
        public function getListSeparator()
        {
        }
        /**
         * @param string $sSeparator
         *
         * @return void
         */
        public function setListSeparator($sSeparator)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
    class RuleValueList extends \Sabberworm\CSS\Value\ValueList
    {
        /**
         * @param string $sSeparator
         * @param int $iLineNo
         */
        public function __construct($sSeparator = ',', $iLineNo = 0)
        {
        }
    }
    class CalcRuleValueList extends \Sabberworm\CSS\Value\RuleValueList
    {
        /**
         * @param int $iLineNo
         */
        public function __construct($iLineNo = 0)
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
    abstract class PrimitiveValue extends \Sabberworm\CSS\Value\Value
    {
        /**
         * @param int $iLineNo
         */
        public function __construct($iLineNo = 0)
        {
        }
    }
    class CSSFunction extends \Sabberworm\CSS\Value\ValueList
    {
        /**
         * @var string
         */
        protected $sName;
        /**
         * @param string $sName
         * @param RuleValueList|array<int, RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string> $aArguments
         * @param string $sSeparator
         * @param int $iLineNo
         */
        public function __construct($sName, $aArguments, $sSeparator = ',', $iLineNo = 0)
        {
        }
        /**
         * @return string
         */
        public function getName()
        {
        }
        /**
         * @param string $sName
         *
         * @return void
         */
        public function setName($sName)
        {
        }
        /**
         * @return array<int, RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string>
         */
        public function getArguments()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
    class CalcFunction extends \Sabberworm\CSS\Value\CSSFunction
    {
        /**
         * @var int
         */
        const T_OPERAND = 1;
        /**
         * @var int
         */
        const T_OPERATOR = 2;
        /**
         * @return CalcFunction
         *
         * @throws UnexpectedTokenException
         * @throws UnexpectedEOFException
         */
        public static function parse(\Sabberworm\CSS\Parsing\ParserState $oParserState)
        {
        }
    }
    class URL extends \Sabberworm\CSS\Value\PrimitiveValue
    {
        /**
         * @param int $iLineNo
         */
        public function __construct(\Sabberworm\CSS\Value\CSSString $oURL, $iLineNo = 0)
        {
        }
        /**
         * @return URL
         *
         * @throws SourceException
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public static function parse(\Sabberworm\CSS\Parsing\ParserState $oParserState)
        {
        }
        /**
         * @return void
         */
        public function setURL(\Sabberworm\CSS\Value\CSSString $oURL)
        {
        }
        /**
         * @return CSSString
         */
        public function getURL()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
    class Size extends \Sabberworm\CSS\Value\PrimitiveValue
    {
        /**
         * vh/vw/vm(ax)/vmin/rem are absolute insofar as they don’t scale to the immediate parent (only the viewport)
         *
         * @var array<int, string>
         */
        const ABSOLUTE_SIZE_UNITS = ['px', 'cm', 'mm', 'mozmm', 'in', 'pt', 'pc', 'vh', 'vw', 'vmin', 'vmax', 'rem'];
        /**
         * @var array<int, string>
         */
        const RELATIVE_SIZE_UNITS = ['%', 'em', 'ex', 'ch', 'fr'];
        /**
         * @var array<int, string>
         */
        const NON_SIZE_UNITS = ['deg', 'grad', 'rad', 's', 'ms', 'turns', 'Hz', 'kHz'];
        /**
         * @param float|int|string $fSize
         * @param string|null $sUnit
         * @param bool $bIsColorComponent
         * @param int $iLineNo
         */
        public function __construct($fSize, $sUnit = null, $bIsColorComponent = false, $iLineNo = 0)
        {
        }
        /**
         * @param bool $bIsColorComponent
         *
         * @return Size
         *
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public static function parse(\Sabberworm\CSS\Parsing\ParserState $oParserState, $bIsColorComponent = false)
        {
        }
        /**
         * @param string $sUnit
         *
         * @return void
         */
        public function setUnit($sUnit)
        {
        }
        /**
         * @return string|null
         */
        public function getUnit()
        {
        }
        /**
         * @param float|int|string $fSize
         */
        public function setSize($fSize)
        {
        }
        /**
         * @return float
         */
        public function getSize()
        {
        }
        /**
         * @return bool
         */
        public function isColorComponent()
        {
        }
        /**
         * Returns whether the number stored in this Size really represents a size (as in a length of something on screen).
         *
         * @return false if the unit an angle, a duration, a frequency or the number is a component in a Color object.
         */
        public function isSize()
        {
        }
        /**
         * @return bool
         */
        public function isRelative()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
    class Color extends \Sabberworm\CSS\Value\CSSFunction
    {
        /**
         * @param array<int, RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string> $aColor
         * @param int $iLineNo
         */
        public function __construct(array $aColor, $iLineNo = 0)
        {
        }
        /**
         * @return Color|CSSFunction
         *
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public static function parse(\Sabberworm\CSS\Parsing\ParserState $oParserState)
        {
        }
        /**
         * @return array<int, RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string>
         */
        public function getColor()
        {
        }
        /**
         * @param array<int, RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string> $aColor
         *
         * @return void
         */
        public function setColor(array $aColor)
        {
        }
        /**
         * @return string
         */
        public function getColorDescription()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
    class LineName extends \Sabberworm\CSS\Value\ValueList
    {
        /**
         * @param array<int, RuleValueList|CSSFunction|CSSString|LineName|Size|URL|string> $aComponents
         * @param int $iLineNo
         */
        public function __construct(array $aComponents = [], $iLineNo = 0)
        {
        }
        /**
         * @return LineName
         *
         * @throws UnexpectedTokenException
         * @throws UnexpectedEOFException
         */
        public static function parse(\Sabberworm\CSS\Parsing\ParserState $oParserState)
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
    class CSSString extends \Sabberworm\CSS\Value\PrimitiveValue
    {
        /**
         * @param string $sString
         * @param int $iLineNo
         */
        public function __construct($sString, $iLineNo = 0)
        {
        }
        /**
         * @return CSSString
         *
         * @throws SourceException
         * @throws UnexpectedEOFException
         * @throws UnexpectedTokenException
         */
        public static function parse(\Sabberworm\CSS\Parsing\ParserState $oParserState)
        {
        }
        /**
         * @param string $sString
         *
         * @return void
         */
        public function setString($sString)
        {
        }
        /**
         * @return string
         */
        public function getString()
        {
        }
        /**
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * @return string
         */
        public function render(\Sabberworm\CSS\OutputFormat $oOutputFormat)
        {
        }
    }
}
namespace Dompdf {
    class Cpdf
    {
        const PDF_VERSION = '1.7';
        const ACROFORM_SIG_SIGNATURESEXISTS = 0x1;
        const ACROFORM_SIG_APPENDONLY = 0x2;
        const ACROFORM_FIELD_BUTTON = 'Btn';
        const ACROFORM_FIELD_TEXT = 'Tx';
        const ACROFORM_FIELD_CHOICE = 'Ch';
        const ACROFORM_FIELD_SIG = 'Sig';
        const ACROFORM_FIELD_READONLY = 0x1;
        const ACROFORM_FIELD_REQUIRED = 0x2;
        const ACROFORM_FIELD_TEXT_MULTILINE = 0x1000;
        const ACROFORM_FIELD_TEXT_PASSWORD = 0x2000;
        const ACROFORM_FIELD_TEXT_RICHTEXT = 0x10000;
        const ACROFORM_FIELD_CHOICE_COMBO = 0x20000;
        const ACROFORM_FIELD_CHOICE_EDIT = 0x40000;
        const ACROFORM_FIELD_CHOICE_SORT = 0x80000;
        const ACROFORM_FIELD_CHOICE_MULTISELECT = 0x200000;
        const XOBJECT_SUBTYPE_FORM = 'Form';
        /**
         * @var integer The current number of pdf objects in the document
         */
        public $numObj = 0;
        /**
         * @var array This array contains all of the pdf objects, ready for final assembly
         */
        public $objects = [];
        /**
         * @var integer The objectId (number within the objects array) of the document catalog
         */
        public $catalogId;
        /**
         * @var integer The objectId (number within the objects array) of indirect references (Javascript EmbeddedFiles)
         */
        protected $indirectReferenceId = 0;
        /**
         * @var integer The objectId (number within the objects array)
         */
        protected $embeddedFilesId = 0;
        /**
         * AcroForm objectId
         *
         * @var integer
         */
        public $acroFormId;
        /**
         * @var int
         */
        public $signatureMaxLen = 5000;
        /**
         * @var array Array carrying information about the fonts that the system currently knows about
         * Used to ensure that a font is not loaded twice, among other things
         */
        public $fonts = [];
        /**
         * @var string The default font metrics file to use if no other font has been loaded.
         * The path to the directory containing the font metrics should be included
         */
        public $defaultFont = './fonts/Helvetica.afm';
        /**
         * @string A record of the current font
         */
        public $currentFont = '';
        /**
         * @var string The current base font
         */
        public $currentBaseFont = '';
        /**
         * @var integer The number of the current font within the font array
         */
        public $currentFontNum = 0;
        /**
         * @var integer
         */
        public $currentNode;
        /**
         * @var integer Object number of the current page
         */
        public $currentPage;
        /**
         * @var integer Object number of the currently active contents block
         */
        public $currentContents;
        /**
         * @var integer Number of fonts within the system
         */
        public $numFonts = 0;
        /**
         * @var array Current color for fill operations, defaults to inactive value,
         * all three components should be between 0 and 1 inclusive when active
         */
        public $currentColor = null;
        /**
         * @var array Current color for stroke operations (lines etc.)
         */
        public $currentStrokeColor = null;
        /**
         * @var string Fill rule (nonzero or evenodd)
         */
        public $fillRule = "nonzero";
        /**
         * @var string Current style that lines are drawn in
         */
        public $currentLineStyle = '';
        /**
         * @var array Current line transparency (partial graphics state)
         */
        public $currentLineTransparency = ["mode" => "Normal", "opacity" => 1.0];
        /**
         * array Current fill transparency (partial graphics state)
         */
        public $currentFillTransparency = ["mode" => "Normal", "opacity" => 1.0];
        /**
         * @var array An array which is used to save the state of the document, mainly the colors and styles
         * it is used to temporarily change to another state, then change back to what it was before
         */
        public $stateStack = [];
        /**
         * @var integer Number of elements within the state stack
         */
        public $nStateStack = 0;
        /**
         * @var integer Number of page objects within the document
         */
        public $numPages = 0;
        /**
         * @var array Object Id storage stack
         */
        public $stack = [];
        /**
         * @var integer Number of elements within the object Id storage stack
         */
        public $nStack = 0;
        /**
         * an array which contains information about the objects which are not firmly attached to pages
         * these have been added with the addObject function
         */
        public $looseObjects = [];
        /**
         * array contains information about how the loose objects are to be added to the document
         */
        public $addLooseObjects = [];
        /**
         * @var integer The objectId of the information object for the document
         * this contains authorship, title etc.
         */
        public $infoObject = 0;
        /**
         * @var integer Number of images being tracked within the document
         */
        public $numImages = 0;
        /**
         * @var array An array containing options about the document
         * it defaults to turning on the compression of the objects
         */
        public $options = ['compression' => true];
        /**
         * @var integer The objectId of the first page of the document
         */
        public $firstPageId;
        /**
         * @var integer The object Id of the procset object
         */
        public $procsetObjectId;
        /**
         * @var array Store the information about the relationship between font families
         * this used so that the code knows which font is the bold version of another font, etc.
         * the value of this array is initialised in the constructor function.
         */
        public $fontFamilies = [];
        /**
         * @var string Folder for php serialized formats of font metrics files.
         * If empty string, use same folder as original metrics files.
         * This can be passed in from class creator.
         * If this folder does not exist or is not writable, Cpdf will be **much** slower.
         * Because of potential trouble with php safe mode, folder cannot be created at runtime.
         */
        public $fontcache = '';
        /**
         * @var integer The version of the font metrics cache file.
         * This value must be manually incremented whenever the internal font data structure is modified.
         */
        public $fontcacheVersion = 6;
        /**
         * @var string Temporary folder.
         * If empty string, will attempt system tmp folder.
         * This can be passed in from class creator.
         */
        public $tmp = '';
        /**
         * @var string Track if the current font is bolded or italicised
         */
        public $currentTextState = '';
        /**
         * @var string Messages are stored here during processing, these can be selected afterwards to give some useful debug information
         */
        public $messages = '';
        /**
         * @var string The encryption array for the document encryption is stored here
         */
        public $arc4 = '';
        /**
         * @var integer The object Id of the encryption information
         */
        public $arc4_objnum = 0;
        /**
         * @var string The file identifier, used to uniquely identify a pdf document
         */
        public $fileIdentifier = '';
        /**
         * @var boolean A flag to say if a document is to be encrypted or not
         */
        public $encrypted = false;
        /**
         * @var string The encryption key for the encryption of all the document content (structure is not encrypted)
         */
        public $encryptionKey = '';
        /**
         * @var array Array which forms a stack to keep track of nested callback functions
         */
        public $callback = [];
        /**
         * @var integer The number of callback functions in the callback array
         */
        public $nCallback = 0;
        /**
         * @var array Store label->id pairs for named destinations, these will be used to replace internal links
         * done this way so that destinations can be defined after the location that links to them
         */
        public $destinations = [];
        /**
         * @var array Store the stack for the transaction commands, each item in here is a record of the values of all the
         * publiciables within the class, so that the user can rollback at will (from each 'start' command)
         * note that this includes the objects array, so these can be large.
         */
        public $checkpoint = '';
        /**
         * @var array Table of Image origin filenames and image labels which were already added with o_image().
         * Allows to merge identical images
         */
        public $imagelist = [];
        /**
         * @var array Table of already added alpha and plain image files for transparent PNG images.
         */
        protected $imageAlphaList = [];
        /**
         * @var array List of temporary image files to be deleted after processing.
         */
        protected $imageCache = [];
        /**
         * @var boolean Whether the text passed in should be treated as Unicode or just local character set.
         */
        public $isUnicode = false;
        /**
         * @var string the JavaScript code of the document
         */
        public $javascript = '';
        /**
         * @var boolean whether the compression is possible
         */
        protected $compressionReady = false;
        /**
         * @var array Current page size
         */
        protected $currentPageSize = ["width" => 0, "height" => 0];
        /**
         * @var array All the chars that will be required in the font subsets
         */
        protected $stringSubsets = [];
        /**
         * @var string The target internal encoding
         */
        protected static $targetEncoding = 'Windows-1252';
        /**
         * @var array
         */
        protected $byteRange = array();
        /**
         * @var array The list of the core fonts
         */
        protected static $coreFonts = ['courier', 'courier-bold', 'courier-oblique', 'courier-boldoblique', 'helvetica', 'helvetica-bold', 'helvetica-oblique', 'helvetica-boldoblique', 'times-roman', 'times-bold', 'times-italic', 'times-bolditalic', 'symbol', 'zapfdingbats'];
        /**
         * Class constructor
         * This will start a new document
         *
         * @param array   $pageSize  Array of 4 numbers, defining the bottom left and upper right corner of the page. first two are normally zero.
         * @param boolean $isUnicode Whether text will be treated as Unicode or not.
         * @param string  $fontcache The font cache folder
         * @param string  $tmp       The temporary folder
         */
        function __construct($pageSize = [0, 0, 612, 792], $isUnicode = false, $fontcache = '', $tmp = '')
        {
        }
        public function __destruct()
        {
        }
        /**
         * Document object methods (internal use only)
         *
         * There is about one object method for each type of object in the pdf document
         * Each function has the same call list ($id,$action,$options).
         * $id = the object ID of the object, or what it is to be if it is being created
         * $action = a string specifying the action to be performed, though ALL must support:
         *           'new' - create the object with the id $id
         *           'out' - produce the output for the pdf object
         * $options = optional, a string or array containing the various parameters for the object
         *
         * These, in conjunction with the output function are the ONLY way for output to be produced
         * within the pdf 'file'.
         */
        /**
         * Destination object, used to specify the location for the user to jump to, presently on opening
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return string|null
         */
        protected function o_destination($id, $action, $options = '')
        {
        }
        /**
         * set the viewer preferences
         *
         * @param $id
         * @param $action
         * @param string|array $options
         * @return string|null
         */
        protected function o_viewerPreferences($id, $action, $options = '')
        {
        }
        /**
         * define the document catalog, the overall controller for the document
         *
         * @param $id
         * @param $action
         * @param string|array $options
         * @return string|null
         */
        protected function o_catalog($id, $action, $options = '')
        {
        }
        /**
         * object which is a parent to the pages in the document
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return string|null
         */
        protected function o_pages($id, $action, $options = '')
        {
        }
        /**
         * define the outlines in the doc, empty for now
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return string|null
         */
        protected function o_outlines($id, $action, $options = '')
        {
        }
        /**
         * an object to hold the font description
         *
         * @param $id
         * @param $action
         * @param string|array $options
         * @return string|null
         * @throws FontNotFoundException
         */
        protected function o_font($id, $action, $options = '')
        {
        }
        protected function getFontSubsettingTag(array $font) : string
        {
        }
        /**
         * A toUnicode section, needed for unicode fonts
         *
         * @param $id
         * @param $action
         * @return null|string
         */
        protected function o_toUnicode($id, $action)
        {
        }
        /**
         * a font descriptor, needed for including additional fonts
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_fontDescriptor($id, $action, $options = '')
        {
        }
        /**
         * the font encoding
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_fontEncoding($id, $action, $options = '')
        {
        }
        /**
         * a descendent cid font, needed for unicode fonts
         *
         * @param $id
         * @param $action
         * @param string|array $options
         * @return null|string
         */
        protected function o_fontDescendentCID($id, $action, $options = '')
        {
        }
        /**
         * CID system info section, needed for unicode fonts
         *
         * @param $id
         * @param $action
         * @return null|string
         */
        protected function o_cidSystemInfo($id, $action)
        {
        }
        /**
         * a font glyph to character map, needed for unicode fonts
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_fontGIDtoCIDMap($id, $action, $options = '')
        {
        }
        /**
         * the document procset, solves some problems with printing to old PS printers
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_procset($id, $action, $options = '')
        {
        }
        /**
         * define the document information
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_info($id, $action, $options = '')
        {
        }
        /**
         * an action object, used to link to URLS initially
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_action($id, $action, $options = '')
        {
        }
        /**
         * an annotation object, this will add an annotation to the current page.
         * initially will support just link annotations
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_annotation($id, $action, $options = '')
        {
        }
        /**
         * a page object, it also creates a contents object to hold its contents
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_page($id, $action, $options = '')
        {
        }
        /**
         * the contents objects hold all of the content which appears on pages
         *
         * @param $id
         * @param $action
         * @param string|array $options
         * @return null|string
         */
        protected function o_contents($id, $action, $options = '')
        {
        }
        /**
         * @param $id
         * @param $action
         * @return string|null
         */
        protected function o_embedjs($id, $action)
        {
        }
        /**
         * @param $id
         * @param $action
         * @param string $code
         * @return null|string
         */
        protected function o_javascript($id, $action, $code = '')
        {
        }
        /**
         * an image object, will be an XObject in the document, includes description and data
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_image($id, $action, $options = '')
        {
        }
        /**
         * graphics state object
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_extGState($id, $action, $options = "")
        {
        }
        /**
         * @param integer $id
         * @param string $action
         * @param mixed $options
         * @return string
         */
        protected function o_xobject($id, $action, $options = '')
        {
        }
        /**
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_acroform($id, $action, $options = '')
        {
        }
        /**
         * @param $id
         * @param $action
         * @param mixed $options
         * @return null|string
         */
        protected function o_field($id, $action, $options = '')
        {
        }
        /**
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_sig($id, $action, $options = '')
        {
        }
        /**
         * encryption object.
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return string|null
         */
        protected function o_encryption($id, $action, $options = '')
        {
        }
        protected function o_indirect_references($id, $action, $options = null)
        {
        }
        protected function o_names($id, $action, $options = null)
        {
        }
        protected function o_embedded_file_dictionary($id, $action, $options = null)
        {
        }
        protected function o_embedded_file($id, $action, $options = null) : ?string
        {
        }
        /**
         * ARC4 functions
         * A series of function to implement ARC4 encoding in PHP
         */
        /**
         * calculate the 16 byte version of the 128 bit md5 digest of the string
         *
         * @param $string
         * @return string
         */
        function md5_16($string)
        {
        }
        /**
         * initialize the encryption for processing a particular object
         *
         * @param $id
         */
        function encryptInit($id)
        {
        }
        /**
         * initialize the ARC4 encryption
         *
         * @param string $key
         */
        function ARC4_init($key = '')
        {
        }
        /**
         * ARC4 encrypt a text string
         *
         * @param $text
         * @return string
         */
        function ARC4($text)
        {
        }
        /**
         * functions which can be called to adjust or add to the document
         */
        /**
         * add a link in the document to an external URL
         *
         * @param $url
         * @param $x0
         * @param $y0
         * @param $x1
         * @param $y1
         */
        function addLink($url, $x0, $y0, $x1, $y1)
        {
        }
        /**
         * add a link in the document to an internal destination (ie. within the document)
         *
         * @param $label
         * @param $x0
         * @param $y0
         * @param $x1
         * @param $y1
         */
        function addInternalLink($label, $x0, $y0, $x1, $y1)
        {
        }
        /**
         * set the encryption of the document
         * can be used to turn it on and/or set the passwords which it will have.
         * also the functions that the user will have are set here, such as print, modify, add
         *
         * @param string $userPass
         * @param string $ownerPass
         * @param array $pc
         */
        function setEncryption($userPass = '', $ownerPass = '', $pc = [])
        {
        }
        /**
         * should be used for internal checks, not implemented as yet
         */
        function checkAllHere()
        {
        }
        /**
         * return the pdf stream as a string returned from the function
         *
         * @param bool $debug
         * @return string
         */
        function output($debug = false)
        {
        }
        /**
         * if the font is not loaded then load it and make the required object
         * else just make it the current font
         * the encoding array can contain 'encoding'=> 'none','WinAnsiEncoding','MacRomanEncoding' or 'MacExpertEncoding'
         * note that encoding='none' will need to be used for symbolic fonts
         * and 'differences' => an array of mappings between numbers 0->255 and character names.
         *
         * @param $fontName
         * @param string $encoding
         * @param bool $set
         * @param bool $isSubsetting
         * @return int
         * @throws FontNotFoundException
         */
        function selectFont($fontName, $encoding = '', $set = true, $isSubsetting = true)
        {
        }
        /**
         * function for the user to find out what the ID is of the first page that was created during
         * startup - useful if they wish to add something to it later.
         *
         * @return int
         */
        function getFirstPageId()
        {
        }
        /**
         * sets the color for fill operations
         *
         * @param $color
         * @param bool $force
         */
        function setColor($color, $force = false)
        {
        }
        /**
         * sets the color for fill operations
         *
         * @param $fillRule
         */
        function setFillRule($fillRule)
        {
        }
        /**
         * sets the color for stroke operations
         *
         * @param $color
         * @param bool $force
         */
        function setStrokeColor($color, $force = false)
        {
        }
        /**
         * Set the graphics state for compositions
         *
         * @param $parameters
         */
        function setGraphicsState($parameters)
        {
        }
        /**
         * Set current blend mode & opacity for lines.
         *
         * Valid blend modes are:
         *
         * Normal, Multiply, Screen, Overlay, Darken, Lighten,
         * ColorDogde, ColorBurn, HardLight, SoftLight, Difference,
         * Exclusion
         *
         * @param string $mode    the blend mode to use
         * @param float  $opacity 0.0 fully transparent, 1.0 fully opaque
         */
        function setLineTransparency($mode, $opacity)
        {
        }
        /**
         * Set current blend mode & opacity for filled objects.
         *
         * Valid blend modes are:
         *
         * Normal, Multiply, Screen, Overlay, Darken, Lighten,
         * ColorDogde, ColorBurn, HardLight, SoftLight, Difference,
         * Exclusion
         *
         * @param string $mode    the blend mode to use
         * @param float  $opacity 0.0 fully transparent, 1.0 fully opaque
         */
        function setFillTransparency($mode, $opacity)
        {
        }
        /**
         * draw a line from one set of coordinates to another
         *
         * @param $x1
         * @param $y1
         * @param $x2
         * @param $y2
         * @param bool $stroke
         */
        function line($x1, $y1, $x2, $y2, $stroke = true)
        {
        }
        /**
         * draw a bezier curve based on 4 control points
         *
         * @param $x0
         * @param $y0
         * @param $x1
         * @param $y1
         * @param $x2
         * @param $y2
         * @param $x3
         * @param $y3
         */
        function curve($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3)
        {
        }
        /**
         * draw a part of an ellipse
         *
         * @param $x0
         * @param $y0
         * @param $astart
         * @param $afinish
         * @param $r1
         * @param int $r2
         * @param int $angle
         * @param int $nSeg
         */
        function partEllipse($x0, $y0, $astart, $afinish, $r1, $r2 = 0, $angle = 0, $nSeg = 8)
        {
        }
        /**
         * draw a filled ellipse
         *
         * @param $x0
         * @param $y0
         * @param $r1
         * @param int $r2
         * @param int $angle
         * @param int $nSeg
         * @param int $astart
         * @param int $afinish
         */
        function filledEllipse($x0, $y0, $r1, $r2 = 0, $angle = 0, $nSeg = 8, $astart = 0, $afinish = 360)
        {
        }
        /**
         * @param $x
         * @param $y
         */
        function lineTo($x, $y)
        {
        }
        /**
         * @param $x
         * @param $y
         */
        function moveTo($x, $y)
        {
        }
        /**
         * draw a bezier curve based on 4 control points
         *
         * @param $x1
         * @param $y1
         * @param $x2
         * @param $y2
         * @param $x3
         * @param $y3
         */
        function curveTo($x1, $y1, $x2, $y2, $x3, $y3)
        {
        }
        /**
         * draw a bezier curve based on 4 control points
         */
        function quadTo($cpx, $cpy, $x, $y)
        {
        }
        function closePath()
        {
        }
        function endPath()
        {
        }
        /**
         * draw an ellipse
         * note that the part and filled ellipse are just special cases of this function
         *
         * draws an ellipse in the current line style
         * centered at $x0,$y0, radii $r1,$r2
         * if $r2 is not set, then a circle is drawn
         * from $astart to $afinish, measured in degrees, running anti-clockwise from the right hand side of the ellipse.
         * nSeg is not allowed to be less than 2, as this will simply draw a line (and will even draw a
         * pretty crappy shape at 2, as we are approximating with bezier curves.
         *
         * @param $x0
         * @param $y0
         * @param $r1
         * @param int $r2
         * @param int $angle
         * @param int $nSeg
         * @param int $astart
         * @param int $afinish
         * @param bool $close
         * @param bool $fill
         * @param bool $stroke
         * @param bool $incomplete
         */
        function ellipse($x0, $y0, $r1, $r2 = 0, $angle = 0, $nSeg = 8, $astart = 0, $afinish = 360, $close = true, $fill = false, $stroke = true, $incomplete = false)
        {
        }
        /**
         * this sets the line drawing style.
         * width, is the thickness of the line in user units
         * cap is the type of cap to put on the line, values can be 'butt','round','square'
         *    where the diffference between 'square' and 'butt' is that 'square' projects a flat end past the
         *    end of the line.
         * join can be 'miter', 'round', 'bevel'
         * dash is an array which sets the dash pattern, is a series of length values, which are the lengths of the
         *   on and off dashes.
         *   (2) represents 2 on, 2 off, 2 on , 2 off ...
         *   (2,1) is 2 on, 1 off, 2 on, 1 off.. etc
         * phase is a modifier on the dash pattern which is used to shift the point at which the pattern starts.
         *
         * @param int $width
         * @param string $cap
         * @param string $join
         * @param string $dash
         * @param int $phase
         */
        function setLineStyle($width = 1, $cap = '', $join = '', $dash = '', $phase = 0)
        {
        }
        /**
         * draw a polygon, the syntax for this is similar to the GD polygon command
         *
         * @param $p
         * @param $np
         * @param bool $f
         */
        function polygon($p, $np, $f = false)
        {
        }
        /**
         * a filled rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not
         * the coordinates of the upper-right corner
         *
         * @param $x1
         * @param $y1
         * @param $width
         * @param $height
         */
        function filledRectangle($x1, $y1, $width, $height)
        {
        }
        /**
         * draw a rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not
         * the coordinates of the upper-right corner
         *
         * @param $x1
         * @param $y1
         * @param $width
         * @param $height
         */
        function rectangle($x1, $y1, $width, $height)
        {
        }
        /**
         * draw a rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not
         * the coordinates of the upper-right corner
         *
         * @param $x1
         * @param $y1
         * @param $width
         * @param $height
         */
        function rect($x1, $y1, $width, $height)
        {
        }
        function stroke()
        {
        }
        function fill()
        {
        }
        function fillStroke()
        {
        }
        /**
         * @param string $subtype
         * @param integer $x
         * @param integer $y
         * @param integer $w
         * @param integer $h
         * @return int
         */
        function addXObject($subtype, $x, $y, $w, $h)
        {
        }
        /**
         * @param integer $numXObject
         * @param string $type
         * @param array $options
         */
        function setXObjectResource($numXObject, $type, $options)
        {
        }
        /**
         * add signature
         *
         * $fieldSigId = $cpdf->addFormField(Cpdf::ACROFORM_FIELD_SIG, 'Signature1', 0, 0, 0, 0, 0);
         *
         * $signatureId = $cpdf->addSignature([
         *   'signcert' => file_get_contents('dompdf.crt'),
         *   'privkey' => file_get_contents('dompdf.key'),
         *   'password' => 'password',
         *   'name' => 'DomPDF DEMO',
         *   'location' => 'Home',
         *   'reason' => 'First Form',
         *   'contactinfo' => 'info'
         * ]);
         * $cpdf->setFormFieldValue($fieldSigId, "$signatureId 0 R");
         *
         * @param string $signcert
         * @param string $privkey
         * @param string $password
         * @param string|null $name
         * @param string|null $location
         * @param string|null $reason
         * @param string|null $contactinfo
         * @return int
         */
        function addSignature($signcert, $privkey, $password = '', $name = null, $location = null, $reason = null, $contactinfo = null)
        {
        }
        /**
         * add field to form
         *
         * @param string $type ACROFORM_FIELD_*
         * @param string $name
         * @param $x0
         * @param $y0
         * @param $x1
         * @param $y1
         * @param integer $ff Field Flag ACROFORM_FIELD_*_*
         * @param float $size
         * @param array $color
         * @return int
         */
        public function addFormField($type, $name, $x0, $y0, $x1, $y1, $ff = 0, $size = 10.0, $color = [0, 0, 0])
        {
        }
        /**
         * set Field value
         *
         * @param integer $numFieldObj
         * @param string $value
         */
        public function setFormFieldValue($numFieldObj, $value)
        {
        }
        /**
         * set Field value (reference)
         *
         * @param integer $numFieldObj
         * @param integer $numObj Object number
         */
        public function setFormFieldRefValue($numFieldObj, $numObj)
        {
        }
        /**
         * set Field Appearanc (reference)
         *
         * @param integer $numFieldObj
         * @param integer $normalNumObj
         * @param integer|null $rolloverNumObj
         * @param integer|null $downNumObj
         */
        public function setFormFieldAppearance($numFieldObj, $normalNumObj, $rolloverNumObj = null, $downNumObj = null)
        {
        }
        /**
         * set Choice Field option values
         *
         * @param integer $numFieldObj
         * @param array $value
         */
        public function setFormFieldOpt($numFieldObj, $value)
        {
        }
        /**
         * add form to document
         *
         * @param integer $sigFlags
         * @param boolean $needAppearances
         */
        public function addForm($sigFlags = 0, $needAppearances = false)
        {
        }
        /**
         * save the current graphic state
         */
        function save()
        {
        }
        /**
         * restore the last graphic state
         */
        function restore()
        {
        }
        /**
         * draw a clipping rectangle, all the elements added after this will be clipped
         *
         * @param $x1
         * @param $y1
         * @param $width
         * @param $height
         */
        function clippingRectangle($x1, $y1, $width, $height)
        {
        }
        /**
         * draw a clipping rounded rectangle, all the elements added after this will be clipped
         *
         * @param $x1
         * @param $y1
         * @param $w
         * @param $h
         * @param $rTL
         * @param $rTR
         * @param $rBR
         * @param $rBL
         */
        function clippingRectangleRounded($x1, $y1, $w, $h, $rTL, $rTR, $rBR, $rBL)
        {
        }
        /**
         * ends the last clipping shape
         */
        function clippingEnd()
        {
        }
        /**
         * scale
         *
         * @param float $s_x scaling factor for width as percent
         * @param float $s_y scaling factor for height as percent
         * @param float $x   Origin abscissa
         * @param float $y   Origin ordinate
         */
        function scale($s_x, $s_y, $x, $y)
        {
        }
        /**
         * translate
         *
         * @param float $t_x movement to the right
         * @param float $t_y movement to the bottom
         */
        function translate($t_x, $t_y)
        {
        }
        /**
         * rotate
         *
         * @param float $angle angle in degrees for counter-clockwise rotation
         * @param float $x     Origin abscissa
         * @param float $y     Origin ordinate
         */
        function rotate($angle, $x, $y)
        {
        }
        /**
         * skew
         *
         * @param float $angle_x
         * @param float $angle_y
         * @param float $x Origin abscissa
         * @param float $y Origin ordinate
         */
        function skew($angle_x, $angle_y, $x, $y)
        {
        }
        /**
         * apply graphic transformations
         *
         * @param array $tm transformation matrix
         */
        function transform($tm)
        {
        }
        /**
         * add a new page to the document
         * this also makes the new page the current active object
         *
         * @param int $insert
         * @param int $id
         * @param string $pos
         * @return int
         */
        function newPage($insert = 0, $id = 0, $pos = 'after')
        {
        }
        /**
         * Streams the PDF to the client.
         *
         * @param string $filename The filename to present to the client.
         * @param array $options Associative array: 'compress' => 1 or 0 (default 1); 'Attachment' => 1 or 0 (default 1).
         */
        function stream($filename = "document.pdf", $options = [])
        {
        }
        /**
         * return the height in units of the current font in the given size
         *
         * @param $size
         * @return float|int
         */
        function getFontHeight($size)
        {
        }
        /**
         * @param $size
         * @return float|int
         */
        function getFontXHeight($size)
        {
        }
        /**
         * return the font descender, this will normally return a negative number
         * if you add this number to the baseline, you get the level of the bottom of the font
         * it is in the pdf user units
         *
         * @param $size
         * @return float|int
         */
        function getFontDescender($size)
        {
        }
        /**
         * filter the text, this is applied to all text just before being inserted into the pdf document
         * it escapes the various things that need to be escaped, and so on
         *
         * @access private
         *
         * @param $text
         * @param bool $bom
         * @param bool $convert_encoding
         * @return string
         */
        function filterText($text, $bom = true, $convert_encoding = true)
        {
        }
        /**
         * return array containing codepoints (UTF-8 character values) for the
         * string passed in.
         *
         * based on the excellent TCPDF code by Nicola Asuni and the
         * RFC for UTF-8 at http://www.faqs.org/rfcs/rfc3629.html
         *
         * @access private
         * @author Orion Richardson
         * @since  January 5, 2008
         *
         * @param string $text UTF-8 string to process
         *
         * @return array UTF-8 codepoints array for the string
         */
        function utf8toCodePointsArray(&$text)
        {
        }
        /**
         * convert UTF-8 to UTF-16 with an additional byte order marker
         * at the front if required.
         *
         * based on the excellent TCPDF code by Nicola Asuni and the
         * RFC for UTF-8 at http://www.faqs.org/rfcs/rfc3629.html
         *
         * @access private
         * @author Orion Richardson
         * @since  January 5, 2008
         *
         * @param string  $text UTF-8 string to process
         * @param boolean $bom  whether to add the byte order marker
         *
         * @return string UTF-16 result string
         */
        function utf8toUtf16BE(&$text, $bom = true)
        {
        }
        /**
         * Callback method used by smallCaps
         *
         * @param array $matches
         *
         * @return string
         */
        function toUpper($matches)
        {
        }
        function concatMatches($matches)
        {
        }
        /**
         * register text for font subsetting
         *
         * @param $font
         * @param $text
         */
        function registerText($font, $text)
        {
        }
        /**
         * add text to the document, at a specified location, size and angle on the page
         *
         * @param $x
         * @param $y
         * @param $size
         * @param $text
         * @param int $angle
         * @param int $wordSpaceAdjust
         * @param int $charSpaceAdjust
         * @param bool $smallCaps
         */
        function addText($x, $y, $size, $text, $angle = 0, $wordSpaceAdjust = 0, $charSpaceAdjust = 0, $smallCaps = false)
        {
        }
        /**
         * calculate how wide a given text string will be on a page, at a given size.
         * this can be called externally, but is also used by the other class functions
         *
         * @param float $size
         * @param string $text
         * @param float $word_spacing
         * @param float $char_spacing
         * @return float
         */
        function getTextWidth($size, $text, $word_spacing = 0, $char_spacing = 0)
        {
        }
        /**
         * this will be called at a new page to return the state to what it was on the
         * end of the previous page, before the stack was closed down
         * This is to get around not being able to have open 'q' across pages
         *
         * @param int $pageEnd
         */
        function saveState($pageEnd = 0)
        {
        }
        /**
         * restore a previously saved state
         *
         * @param int $pageEnd
         */
        function restoreState($pageEnd = 0)
        {
        }
        /**
         * make a loose object, the output will go into this object, until it is closed, then will revert to
         * the current one.
         * this object will not appear until it is included within a page.
         * the function will return the object number
         *
         * @return int
         */
        function openObject()
        {
        }
        /**
         * open an existing object for editing
         *
         * @param $id
         */
        function reopenObject($id)
        {
        }
        /**
         * close an object
         */
        function closeObject()
        {
        }
        /**
         * stop an object from appearing on pages from this point on
         *
         * @param $id
         */
        function stopObject($id)
        {
        }
        /**
         * after an object has been created, it wil only show if it has been added, using this function.
         *
         * @param $id
         * @param string $options
         */
        function addObject($id, $options = 'add')
        {
        }
        /**
         * return a storable representation of a specific object
         *
         * @param $id
         * @return string|null
         */
        function serializeObject($id)
        {
        }
        /**
         * restore an object from its stored representation. Returns its new object id.
         *
         * @param $obj
         * @return int
         */
        function restoreSerializedObject($obj)
        {
        }
        /**
         * Embeds a file inside the PDF
         *
         * @param string $filepath path to the file to store inside the PDF
         * @param string $embeddedFilename the filename displayed in the list of embedded files
         * @param string $description a description in the list of embedded files
         */
        public function addEmbeddedFile(string $filepath, string $embeddedFilename, string $description) : void
        {
        }
        /**
         * add content to the documents info object
         *
         * @param $label
         * @param int $value
         */
        function addInfo($label, $value = 0)
        {
        }
        /**
         * set the viewer preferences of the document, it is up to the browser to obey these.
         *
         * @param $label
         * @param int $value
         */
        function setPreferences($label, $value = 0)
        {
        }
        /**
         * Check if image already added to pdf image directory.
         * If yes, need not to create again (pass empty data)
         *
         * @param string $imgname
         * @return bool
         */
        function image_iscached($imgname)
        {
        }
        /**
         * add a PNG image into the document, from a GD object
         * this should work with remote files
         *
         * @param \GdImage|resource $img A GD resource
         * @param string $file The PNG file
         * @param float $x X position
         * @param float $y Y position
         * @param float $w Width
         * @param float $h Height
         * @param bool $is_mask true if the image is a mask
         * @param bool $mask true if the image is masked
         * @throws Exception
         */
        function addImagePng(&$img, $file, $x, $y, $w = 0.0, $h = 0.0, $is_mask = false, $mask = null)
        {
        }
        /**
         * @param $file
         * @param $x
         * @param $y
         * @param $w
         * @param $h
         * @param $byte
         */
        protected function addImagePngAlpha($file, $x, $y, $w, $h, $byte)
        {
        }
        /**
         * add a PNG image into the document, from a file
         * this should work with remote files
         *
         * @param $file
         * @param $x
         * @param $y
         * @param int $w
         * @param int $h
         * @throws Exception
         */
        function addPngFromFile($file, $x, $y, $w = 0, $h = 0)
        {
        }
        /**
         * add a PNG image into the document, from a file
         * this should work with remote files
         *
         * @param $file
         * @param $x
         * @param $y
         * @param int $w
         * @param int $h
         */
        function addSvgFromFile($file, $x, $y, $w = 0, $h = 0)
        {
        }
        /**
         * add a PNG image into the document, from a memory buffer of the file
         *
         * @param $data
         * @param $file
         * @param $x
         * @param $y
         * @param float $w
         * @param float $h
         * @param bool $is_mask
         * @param null $mask
         */
        function addPngFromBuf(&$data, $file, $x, $y, $w = 0.0, $h = 0.0, $is_mask = false, $mask = null)
        {
        }
        /**
         * add a JPEG image into the document, from a file
         *
         * @param $img
         * @param $x
         * @param $y
         * @param int $w
         * @param int $h
         */
        function addJpegFromFile($img, $x, $y, $w = 0, $h = 0)
        {
        }
        /**
         * specify where the document should open when it first starts
         *
         * @param $style
         * @param int $a
         * @param int $b
         * @param int $c
         */
        function openHere($style, $a = 0, $b = 0, $c = 0)
        {
        }
        /**
         * Add JavaScript code to the PDF document
         *
         * @param string $code
         */
        function addJavascript($code)
        {
        }
        /**
         * create a labelled destination within the document
         *
         * @param $label
         * @param $style
         * @param int $a
         * @param int $b
         * @param int $c
         */
        function addDestination($label, $style, $a = 0, $b = 0, $c = 0)
        {
        }
        /**
         * define font families, this is used to initialize the font families for the default fonts
         * and for the user to add new ones for their fonts. The default bahavious can be overridden should
         * that be desired.
         *
         * @param $family
         * @param string $options
         */
        function setFontFamily($family, $options = '')
        {
        }
        /**
         * used to add messages for use in debugging
         *
         * @param $message
         */
        function addMessage($message)
        {
        }
        /**
         * a few functions which should allow the document to be treated transactionally.
         *
         * @param $action
         */
        function transaction($action)
        {
        }
    }
}
namespace Svg\Tag {
    abstract class AbstractTag
    {
        /** @var Document */
        protected $document;
        public $tagName;
        /** @var Style */
        protected $style;
        protected $attributes = array();
        protected $hasShape = true;
        /** @var self[] */
        protected $children = array();
        public function __construct(\Svg\Document $document, $tagName)
        {
        }
        public function getDocument()
        {
        }
        /**
         * @return Group|null
         */
        public function getParentGroup()
        {
        }
        public function handle($attributes)
        {
        }
        public function handleEnd()
        {
        }
        protected function before($attributes)
        {
        }
        protected function start($attributes)
        {
        }
        protected function end()
        {
        }
        protected function after()
        {
        }
        public function getAttributes()
        {
        }
        protected function setStyle(\Svg\Style $style)
        {
        }
        /**
         * @return Style
         */
        public function getStyle()
        {
        }
        /**
         * Make a style object from the tag and its attributes
         *
         * @param array $attributes
         *
         * @return Style
         */
        protected function makeStyle($attributes)
        {
        }
        protected function applyTransform($attributes)
        {
        }
    }
}
namespace Svg {
    class Document extends \Svg\Tag\AbstractTag
    {
        protected $filename;
        public $inDefs = false;
        protected $x;
        protected $y;
        protected $width;
        protected $height;
        protected $subPathInit;
        protected $pathBBox;
        protected $viewBox;
        /** @var SurfaceInterface */
        protected $surface;
        /** @var AbstractTag[] */
        protected $stack = array();
        /** @var AbstractTag[] */
        protected $defs = array();
        /** @var \Sabberworm\CSS\CSSList\Document[] */
        protected $styleSheets = array();
        public function loadFile($filename)
        {
        }
        protected function initParser()
        {
        }
        public function __construct()
        {
        }
        /**
         * @return SurfaceInterface
         */
        public function getSurface()
        {
        }
        public function getStack()
        {
        }
        public function getWidth()
        {
        }
        public function getHeight()
        {
        }
        public function getDimensions()
        {
        }
        public function handleSizeAttributes($attributes)
        {
        }
        public function getDocument()
        {
        }
        /**
         * Append a style sheet
         *
         * @param \Sabberworm\CSS\CSSList\Document $stylesheet
         */
        public function appendStyleSheet($stylesheet)
        {
        }
        /**
         * Get the document style sheets
         *
         * @return \Sabberworm\CSS\CSSList\Document[]
         */
        public function getStyleSheets()
        {
        }
        protected function before($attributes)
        {
        }
        public function render(\Svg\Surface\SurfaceInterface $surface)
        {
        }
        protected function svgOffset($attributes)
        {
        }
        public function getDef($id)
        {
        }
        function _charData($parser, $data)
        {
        }
        function _tagEnd($parser, $name)
        {
        }
    }
    class Style
    {
        const TYPE_COLOR = 1;
        const TYPE_LENGTH = 2;
        const TYPE_NAME = 3;
        const TYPE_ANGLE = 4;
        const TYPE_NUMBER = 5;
        public $color;
        public $opacity;
        public $display;
        public $fill;
        public $fillOpacity;
        public $fillRule;
        public $stroke;
        public $strokeOpacity;
        public $strokeLinecap;
        public $strokeLinejoin;
        public $strokeMiterlimit;
        public $strokeWidth;
        public $strokeDasharray;
        public $strokeDashoffset;
        public $fontFamily = 'serif';
        public $fontSize = 12;
        public $fontWeight = 'normal';
        public $fontStyle = 'normal';
        public $textAnchor = 'start';
        protected function getStyleMap()
        {
        }
        /**
         * @param $attributes
         *
         * @return Style
         */
        public function fromAttributes($attributes)
        {
        }
        public function inherit(\Svg\Tag\AbstractTag $tag)
        {
        }
        public function fromStyleSheets(\Svg\Tag\AbstractTag $tag, $attributes)
        {
        }
        protected function fillStyles($styles)
        {
        }
        static function parseColor($color)
        {
        }
        static function getTriplet($color, $percent = false)
        {
        }
        static function parseHexColor($hex)
        {
        }
        /**
         * Simple CSS parser
         *
         * @param $style
         *
         * @return array
         */
        static function parseCssStyle($style)
        {
        }
        /**
         * Convert a size to a float
         *
         * @param string $size          SVG size
         * @param float  $dpi           DPI
         * @param float  $referenceSize Reference size
         *
         * @return float|null
         */
        static function convertSize($size, $referenceSize = 11.0, $dpi = 96.0)
        {
        }
        static $colorNames = array('antiquewhite' => '#FAEBD7', 'aqua' => '#00FFFF', 'aquamarine' => '#7FFFD4', 'beige' => '#F5F5DC', 'black' => '#000000', 'blue' => '#0000FF', 'brown' => '#A52A2A', 'cadetblue' => '#5F9EA0', 'chocolate' => '#D2691E', 'cornflowerblue' => '#6495ED', 'crimson' => '#DC143C', 'darkblue' => '#00008B', 'darkgoldenrod' => '#B8860B', 'darkgreen' => '#006400', 'darkmagenta' => '#8B008B', 'darkorange' => '#FF8C00', 'darkred' => '#8B0000', 'darkseagreen' => '#8FBC8F', 'darkslategray' => '#2F4F4F', 'darkviolet' => '#9400D3', 'deepskyblue' => '#00BFFF', 'dodgerblue' => '#1E90FF', 'firebrick' => '#B22222', 'forestgreen' => '#228B22', 'fuchsia' => '#FF00FF', 'gainsboro' => '#DCDCDC', 'gold' => '#FFD700', 'gray' => '#808080', 'green' => '#008000', 'greenyellow' => '#ADFF2F', 'hotpink' => '#FF69B4', 'indigo' => '#4B0082', 'khaki' => '#F0E68C', 'lavenderblush' => '#FFF0F5', 'lemonchiffon' => '#FFFACD', 'lightcoral' => '#F08080', 'lightgoldenrodyellow' => '#FAFAD2', 'lightgreen' => '#90EE90', 'lightsalmon' => '#FFA07A', 'lightskyblue' => '#87CEFA', 'lightslategray' => '#778899', 'lightyellow' => '#FFFFE0', 'lime' => '#00FF00', 'limegreen' => '#32CD32', 'magenta' => '#FF00FF', 'maroon' => '#800000', 'mediumaquamarine' => '#66CDAA', 'mediumorchid' => '#BA55D3', 'mediumseagreen' => '#3CB371', 'mediumspringgreen' => '#00FA9A', 'mediumvioletred' => '#C71585', 'midnightblue' => '#191970', 'mintcream' => '#F5FFFA', 'moccasin' => '#FFE4B5', 'navy' => '#000080', 'olive' => '#808000', 'orange' => '#FFA500', 'orchid' => '#DA70D6', 'palegreen' => '#98FB98', 'palevioletred' => '#D87093', 'peachpuff' => '#FFDAB9', 'pink' => '#FFC0CB', 'powderblue' => '#B0E0E6', 'purple' => '#800080', 'red' => '#FF0000', 'royalblue' => '#4169E1', 'salmon' => '#FA8072', 'seagreen' => '#2E8B57', 'sienna' => '#A0522D', 'silver' => '#C0C0C0', 'skyblue' => '#87CEEB', 'slategray' => '#708090', 'springgreen' => '#00FF7F', 'steelblue' => '#4682B4', 'tan' => '#D2B48C', 'teal' => '#008080', 'thistle' => '#D8BFD8', 'turquoise' => '#40E0D0', 'violetred' => '#D02090', 'white' => '#FFFFFF', 'yellow' => '#FFFF00', 'aliceblue' => '#f0f8ff', 'azure' => '#f0ffff', 'bisque' => '#ffe4c4', 'blanchedalmond' => '#ffebcd', 'blueviolet' => '#8a2be2', 'burlywood' => '#deb887', 'chartreuse' => '#7fff00', 'coral' => '#ff7f50', 'cornsilk' => '#fff8dc', 'cyan' => '#00ffff', 'darkcyan' => '#008b8b', 'darkgray' => '#a9a9a9', 'darkgrey' => '#a9a9a9', 'darkkhaki' => '#bdb76b', 'darkolivegreen' => '#556b2f', 'darkorchid' => '#9932cc', 'darksalmon' => '#e9967a', 'darkslateblue' => '#483d8b', 'darkslategrey' => '#2f4f4f', 'darkturquoise' => '#00ced1', 'deeppink' => '#ff1493', 'dimgray' => '#696969', 'dimgrey' => '#696969', 'floralwhite' => '#fffaf0', 'ghostwhite' => '#f8f8ff', 'goldenrod' => '#daa520', 'grey' => '#808080', 'honeydew' => '#f0fff0', 'indianred' => '#cd5c5c', 'ivory' => '#fffff0', 'lavender' => '#e6e6fa', 'lawngreen' => '#7cfc00', 'lightblue' => '#add8e6', 'lightcyan' => '#e0ffff', 'lightgray' => '#d3d3d3', 'lightgrey' => '#d3d3d3', 'lightpink' => '#ffb6c1', 'lightseagreen' => '#20b2aa', 'lightslategrey' => '#778899', 'lightsteelblue' => '#b0c4de', 'linen' => '#faf0e6', 'mediumblue' => '#0000cd', 'mediumpurple' => '#9370db', 'mediumslateblue' => '#7b68ee', 'mediumturquoise' => '#48d1cc', 'mistyrose' => '#ffe4e1', 'navajowhite' => '#ffdead', 'oldlace' => '#fdf5e6', 'olivedrab' => '#6b8e23', 'orangered' => '#ff4500', 'palegoldenrod' => '#eee8aa', 'paleturquoise' => '#afeeee', 'papayawhip' => '#ffefd5', 'peru' => '#cd853f', 'plum' => '#dda0dd', 'rosybrown' => '#bc8f8f', 'saddlebrown' => '#8b4513', 'sandybrown' => '#f4a460', 'seashell' => '#fff5ee', 'slateblue' => '#6a5acd', 'slategrey' => '#708090', 'snow' => '#fffafa', 'tomato' => '#ff6347', 'violet' => '#ee82ee', 'wheat' => '#f5deb3', 'whitesmoke' => '#f5f5f5', 'yellowgreen' => '#9acd32');
    }
    class DefaultStyle extends \Svg\Style
    {
        public $color = '';
        public $opacity = 1.0;
        public $display = 'inline';
        public $fill = 'black';
        public $fillOpacity = 1.0;
        public $fillRule = 'nonzero';
        public $stroke = 'none';
        public $strokeOpacity = 1.0;
        public $strokeLinecap = 'butt';
        public $strokeLinejoin = 'miter';
        public $strokeMiterlimit = 4;
        public $strokeWidth = 1.0;
        public $strokeDasharray = 0;
        public $strokeDashoffset = 0;
    }
}
namespace Svg\Gradient {
    class Stop
    {
        public $offset;
        public $color;
        public $opacity = 1.0;
    }
}
namespace Svg\Tag {
    class LinearGradient extends \Svg\Tag\AbstractTag
    {
        protected $x1;
        protected $y1;
        protected $x2;
        protected $y2;
        /** @var Gradient\Stop[] */
        protected $stops = array();
        public function start($attributes)
        {
        }
        public function getStops()
        {
        }
    }
    class Shape extends \Svg\Tag\AbstractTag
    {
        protected function before($attributes)
        {
        }
        protected function after()
        {
        }
    }
    class Text extends \Svg\Tag\Shape
    {
        protected $x = 0;
        protected $y = 0;
        protected $text = "";
        public function start($attributes)
        {
        }
        public function end()
        {
        }
        protected function after()
        {
        }
        public function appendText($text)
        {
        }
        public function getText()
        {
        }
    }
    class Polygon extends \Svg\Tag\Shape
    {
        public function start($attributes)
        {
        }
    }
    class Group extends \Svg\Tag\AbstractTag
    {
        protected function before($attributes)
        {
        }
        protected function after()
        {
        }
    }
    class Circle extends \Svg\Tag\Shape
    {
        protected $cx = 0;
        protected $cy = 0;
        protected $r;
        public function start($attributes)
        {
        }
    }
    class UseTag extends \Svg\Tag\AbstractTag
    {
        protected $x = 0;
        protected $y = 0;
        protected $width;
        protected $height;
        /** @var AbstractTag */
        protected $reference;
        protected function before($attributes)
        {
        }
        protected function after()
        {
        }
        public function handle($attributes)
        {
        }
        public function handleEnd()
        {
        }
    }
    class Stop extends \Svg\Tag\AbstractTag
    {
        public function start($attributes)
        {
        }
    }
    class Path extends \Svg\Tag\Shape
    {
        // kindly borrowed from fabric.util.parsePath.
        /* @see https://github.com/fabricjs/fabric.js/blob/master/src/util/path.js#L664 */
        const NUMBER_PATTERN = '([-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?)\\s*';
        const COMMA_PATTERN = '(?:\\s+,?\\s*|,\\s*)?';
        const FLAG_PATTERN = '([01])';
        const ARC_REGEXP = '/' . self::NUMBER_PATTERN . self::COMMA_PATTERN . self::NUMBER_PATTERN . self::COMMA_PATTERN . self::NUMBER_PATTERN . self::COMMA_PATTERN . self::FLAG_PATTERN . self::COMMA_PATTERN . self::FLAG_PATTERN . self::COMMA_PATTERN . self::NUMBER_PATTERN . self::COMMA_PATTERN . self::NUMBER_PATTERN . '/';
        static $commandLengths = array('m' => 2, 'l' => 2, 'h' => 1, 'v' => 1, 'c' => 6, 's' => 4, 'q' => 4, 't' => 2, 'a' => 7);
        static $repeatedCommands = array('m' => 'l', 'M' => 'L');
        public static function parse(string $commandSequence) : array
        {
        }
        public function start($attributes)
        {
        }
        function drawArc(\Svg\Surface\SurfaceInterface $surface, $fx, $fy, $coords)
        {
        }
        function arcToSegments($toX, $toY, $rx, $ry, $large, $sweep, $rotateX)
        {
        }
        function segmentToBezier($th2, $th3, $cosTh, $sinTh, $rx, $ry, $cx1, $cy1, $mT, $fromX, $fromY)
        {
        }
        function calcVectorAngle($ux, $uy, $vx, $vy)
        {
        }
    }
    class Polyline extends \Svg\Tag\Shape
    {
        public function start($attributes)
        {
        }
    }
    class Line extends \Svg\Tag\Shape
    {
        protected $x1 = 0;
        protected $y1 = 0;
        protected $x2 = 0;
        protected $y2 = 0;
        public function start($attributes)
        {
        }
    }
    class Image extends \Svg\Tag\AbstractTag
    {
        protected $x = 0;
        protected $y = 0;
        protected $width = 0;
        protected $height = 0;
        protected $href = null;
        protected function before($attributes)
        {
        }
        public function start($attributes)
        {
        }
        protected function after()
        {
        }
    }
    class ClipPath extends \Svg\Tag\AbstractTag
    {
        protected function before($attributes)
        {
        }
        protected function after()
        {
        }
    }
    class Anchor extends \Svg\Tag\Group
    {
    }
    class StyleTag extends \Svg\Tag\AbstractTag
    {
        protected $text = "";
        public function end()
        {
        }
        public function appendText($text)
        {
        }
    }
    class RadialGradient extends \Svg\Tag\AbstractTag
    {
        public function start($attributes)
        {
        }
    }
    class Ellipse extends \Svg\Tag\Shape
    {
        protected $cx = 0;
        protected $cy = 0;
        protected $rx = 0;
        protected $ry = 0;
        public function start($attributes)
        {
        }
    }
    class Rect extends \Svg\Tag\Shape
    {
        protected $x = 0;
        protected $y = 0;
        protected $width = 0;
        protected $height = 0;
        protected $rx = 0;
        protected $ry = 0;
        public function start($attributes)
        {
        }
    }
}
namespace Svg\Surface {
    /**
     * Interface Surface, like CanvasRenderingContext2D
     *
     * @package Svg
     */
    interface SurfaceInterface
    {
        public function save();
        public function restore();
        // transformations (default transform is the identity matrix)
        public function scale($x, $y);
        public function rotate($angle);
        public function translate($x, $y);
        public function transform($a, $b, $c, $d, $e, $f);
        // path ends
        public function beginPath();
        public function closePath();
        public function fill();
        public function stroke();
        public function endPath();
        public function fillStroke();
        public function clip();
        // text (see also the CanvasDrawingStyles interface)
        public function fillText($text, $x, $y, $maxWidth = null);
        public function strokeText($text, $x, $y, $maxWidth = null);
        public function measureText($text);
        // drawing images
        public function drawImage($image, $sx, $sy, $sw = null, $sh = null, $dx = null, $dy = null, $dw = null, $dh = null);
        // paths
        public function lineTo($x, $y);
        public function moveTo($x, $y);
        public function quadraticCurveTo($cpx, $cpy, $x, $y);
        public function bezierCurveTo($cp1x, $cp1y, $cp2x, $cp2y, $x, $y);
        public function arcTo($x1, $y1, $x2, $y2, $radius);
        public function circle($x, $y, $radius);
        public function arc($x, $y, $radius, $startAngle, $endAngle, $anticlockwise = false);
        public function ellipse($x, $y, $radiusX, $radiusY, $rotation, $startAngle, $endAngle, $anticlockwise);
        // Rectangle
        public function rect($x, $y, $w, $h, $rx = 0, $ry = 0);
        public function fillRect($x, $y, $w, $h);
        public function strokeRect($x, $y, $w, $h);
        public function setStyle(\Svg\Style $style);
        /**
         * @return Style
         */
        public function getStyle();
        public function setFont($family, $style, $weight);
    }
    class SurfaceCpdf implements \Svg\Surface\SurfaceInterface
    {
        const DEBUG = false;
        public function __construct(\Svg\Document $doc, $canvas = null)
        {
        }
        function out()
        {
        }
        public function save()
        {
        }
        public function restore()
        {
        }
        public function scale($x, $y)
        {
        }
        public function rotate($angle)
        {
        }
        public function translate($x, $y)
        {
        }
        public function transform($a, $b, $c, $d, $e, $f)
        {
        }
        public function beginPath()
        {
        }
        public function closePath()
        {
        }
        public function fillStroke()
        {
        }
        public function clip()
        {
        }
        public function fillText($text, $x, $y, $maxWidth = null)
        {
        }
        public function strokeText($text, $x, $y, $maxWidth = null)
        {
        }
        public function drawImage($image, $sx, $sy, $sw = null, $sh = null, $dx = null, $dy = null, $dw = null, $dh = null)
        {
        }
        public static function getimagesize($filename)
        {
        }
        function image($img, $x, $y, $w, $h, $resolution = "normal")
        {
        }
        public function lineTo($x, $y)
        {
        }
        public function moveTo($x, $y)
        {
        }
        public function quadraticCurveTo($cpx, $cpy, $x, $y)
        {
        }
        public function bezierCurveTo($cp1x, $cp1y, $cp2x, $cp2y, $x, $y)
        {
        }
        public function arcTo($x1, $y1, $x2, $y2, $radius)
        {
        }
        public function arc($x, $y, $radius, $startAngle, $endAngle, $anticlockwise = false)
        {
        }
        public function circle($x, $y, $radius)
        {
        }
        public function ellipse($x, $y, $radiusX, $radiusY, $rotation, $startAngle, $endAngle, $anticlockwise)
        {
        }
        public function fillRect($x, $y, $w, $h)
        {
        }
        public function rect($x, $y, $w, $h, $rx = 0, $ry = 0)
        {
        }
        public function fill()
        {
        }
        public function strokeRect($x, $y, $w, $h)
        {
        }
        public function stroke()
        {
        }
        public function endPath()
        {
        }
        public function measureText($text)
        {
        }
        public function getStyle()
        {
        }
        public function setStyle(\Svg\Style $style)
        {
        }
        public function setFont($family, $style, $weight)
        {
        }
    }
    class SurfacePDFLib implements \Svg\Surface\SurfaceInterface
    {
        const DEBUG = false;
        public function __construct(\Svg\Document $doc, $canvas = null)
        {
        }
        function out()
        {
        }
        public function save()
        {
        }
        public function restore()
        {
        }
        public function scale($x, $y)
        {
        }
        public function rotate($angle)
        {
        }
        public function translate($x, $y)
        {
        }
        public function transform($a, $b, $c, $d, $e, $f)
        {
        }
        public function beginPath()
        {
        }
        public function closePath()
        {
        }
        public function fillStroke()
        {
        }
        public function clip()
        {
        }
        public function fillText($text, $x, $y, $maxWidth = null)
        {
        }
        public function strokeText($text, $x, $y, $maxWidth = null)
        {
        }
        public function drawImage($image, $sx, $sy, $sw = null, $sh = null, $dx = null, $dy = null, $dw = null, $dh = null)
        {
        }
        public function lineTo($x, $y)
        {
        }
        public function moveTo($x, $y)
        {
        }
        public function quadraticCurveTo($cpx, $cpy, $x, $y)
        {
        }
        public function bezierCurveTo($cp1x, $cp1y, $cp2x, $cp2y, $x, $y)
        {
        }
        public function arcTo($x1, $y1, $x2, $y2, $radius)
        {
        }
        public function arc($x, $y, $radius, $startAngle, $endAngle, $anticlockwise = false)
        {
        }
        public function circle($x, $y, $radius)
        {
        }
        public function ellipse($x, $y, $radiusX, $radiusY, $rotation, $startAngle, $endAngle, $anticlockwise)
        {
        }
        public function fillRect($x, $y, $w, $h)
        {
        }
        public function rect($x, $y, $w, $h, $rx = 0, $ry = 0)
        {
        }
        public function fill()
        {
        }
        public function strokeRect($x, $y, $w, $h)
        {
        }
        public function stroke()
        {
        }
        public function endPath()
        {
        }
        public function measureText($text)
        {
        }
        public function getStyle()
        {
        }
        public function setStyle(\Svg\Style $style)
        {
        }
        public function setFont($family, $style, $weight)
        {
        }
    }
    class CPdf
    {
        const PDF_VERSION = '1.7';
        const ACROFORM_SIG_SIGNATURESEXISTS = 0x1;
        const ACROFORM_SIG_APPENDONLY = 0x2;
        const ACROFORM_FIELD_BUTTON = 'Btn';
        const ACROFORM_FIELD_TEXT = 'Tx';
        const ACROFORM_FIELD_CHOICE = 'Ch';
        const ACROFORM_FIELD_SIG = 'Sig';
        const ACROFORM_FIELD_READONLY = 0x1;
        const ACROFORM_FIELD_REQUIRED = 0x2;
        const ACROFORM_FIELD_TEXT_MULTILINE = 0x1000;
        const ACROFORM_FIELD_TEXT_PASSWORD = 0x2000;
        const ACROFORM_FIELD_TEXT_RICHTEXT = 0x10000;
        const ACROFORM_FIELD_CHOICE_COMBO = 0x20000;
        const ACROFORM_FIELD_CHOICE_EDIT = 0x40000;
        const ACROFORM_FIELD_CHOICE_SORT = 0x80000;
        const ACROFORM_FIELD_CHOICE_MULTISELECT = 0x200000;
        const XOBJECT_SUBTYPE_FORM = 'Form';
        /**
         * @var integer The current number of pdf objects in the document
         */
        public $numObj = 0;
        /**
         * @var array This array contains all of the pdf objects, ready for final assembly
         */
        public $objects = [];
        /**
         * @var integer The objectId (number within the objects array) of the document catalog
         */
        public $catalogId;
        /**
         * @var integer The objectId (number within the objects array) of indirect references (Javascript EmbeddedFiles)
         */
        protected $indirectReferenceId = 0;
        /**
         * @var integer The objectId (number within the objects array)
         */
        protected $embeddedFilesId = 0;
        /**
         * AcroForm objectId
         *
         * @var integer
         */
        public $acroFormId;
        /**
         * @var int
         */
        public $signatureMaxLen = 5000;
        /**
         * @var array Array carrying information about the fonts that the system currently knows about
         * Used to ensure that a font is not loaded twice, among other things
         */
        public $fonts = [];
        /**
         * @var string The default font metrics file to use if no other font has been loaded.
         * The path to the directory containing the font metrics should be included
         */
        public $defaultFont = './fonts/Helvetica.afm';
        /**
         * @string A record of the current font
         */
        public $currentFont = '';
        /**
         * @var string The current base font
         */
        public $currentBaseFont = '';
        /**
         * @var integer The number of the current font within the font array
         */
        public $currentFontNum = 0;
        /**
         * @var integer
         */
        public $currentNode;
        /**
         * @var integer Object number of the current page
         */
        public $currentPage;
        /**
         * @var integer Object number of the currently active contents block
         */
        public $currentContents;
        /**
         * @var integer Number of fonts within the system
         */
        public $numFonts = 0;
        /**
         * @var array Current color for fill operations, defaults to inactive value,
         * all three components should be between 0 and 1 inclusive when active
         */
        public $currentColor = null;
        /**
         * @var array Current color for stroke operations (lines etc.)
         */
        public $currentStrokeColor = null;
        /**
         * @var string Fill rule (nonzero or evenodd)
         */
        public $fillRule = "nonzero";
        /**
         * @var string Current style that lines are drawn in
         */
        public $currentLineStyle = '';
        /**
         * @var array Current line transparency (partial graphics state)
         */
        public $currentLineTransparency = ["mode" => "Normal", "opacity" => 1.0];
        /**
         * array Current fill transparency (partial graphics state)
         */
        public $currentFillTransparency = ["mode" => "Normal", "opacity" => 1.0];
        /**
         * @var array An array which is used to save the state of the document, mainly the colors and styles
         * it is used to temporarily change to another state, then change back to what it was before
         */
        public $stateStack = [];
        /**
         * @var integer Number of elements within the state stack
         */
        public $nStateStack = 0;
        /**
         * @var integer Number of page objects within the document
         */
        public $numPages = 0;
        /**
         * @var array Object Id storage stack
         */
        public $stack = [];
        /**
         * @var integer Number of elements within the object Id storage stack
         */
        public $nStack = 0;
        /**
         * an array which contains information about the objects which are not firmly attached to pages
         * these have been added with the addObject function
         */
        public $looseObjects = [];
        /**
         * array contains information about how the loose objects are to be added to the document
         */
        public $addLooseObjects = [];
        /**
         * @var integer The objectId of the information object for the document
         * this contains authorship, title etc.
         */
        public $infoObject = 0;
        /**
         * @var integer Number of images being tracked within the document
         */
        public $numImages = 0;
        /**
         * @var array An array containing options about the document
         * it defaults to turning on the compression of the objects
         */
        public $options = ['compression' => true];
        /**
         * @var integer The objectId of the first page of the document
         */
        public $firstPageId;
        /**
         * @var integer The object Id of the procset object
         */
        public $procsetObjectId;
        /**
         * @var array Store the information about the relationship between font families
         * this used so that the code knows which font is the bold version of another font, etc.
         * the value of this array is initialised in the constructor function.
         */
        public $fontFamilies = [];
        /**
         * @var string Folder for php serialized formats of font metrics files.
         * If empty string, use same folder as original metrics files.
         * This can be passed in from class creator.
         * If this folder does not exist or is not writable, Cpdf will be **much** slower.
         * Because of potential trouble with php safe mode, folder cannot be created at runtime.
         */
        public $fontcache = '';
        /**
         * @var integer The version of the font metrics cache file.
         * This value must be manually incremented whenever the internal font data structure is modified.
         */
        public $fontcacheVersion = 6;
        /**
         * @var string Temporary folder.
         * If empty string, will attempt system tmp folder.
         * This can be passed in from class creator.
         */
        public $tmp = '';
        /**
         * @var string Track if the current font is bolded or italicised
         */
        public $currentTextState = '';
        /**
         * @var string Messages are stored here during processing, these can be selected afterwards to give some useful debug information
         */
        public $messages = '';
        /**
         * @var string The encryption array for the document encryption is stored here
         */
        public $arc4 = '';
        /**
         * @var integer The object Id of the encryption information
         */
        public $arc4_objnum = 0;
        /**
         * @var string The file identifier, used to uniquely identify a pdf document
         */
        public $fileIdentifier = '';
        /**
         * @var boolean A flag to say if a document is to be encrypted or not
         */
        public $encrypted = false;
        /**
         * @var string The encryption key for the encryption of all the document content (structure is not encrypted)
         */
        public $encryptionKey = '';
        /**
         * @var array Array which forms a stack to keep track of nested callback functions
         */
        public $callback = [];
        /**
         * @var integer The number of callback functions in the callback array
         */
        public $nCallback = 0;
        /**
         * @var array Store label->id pairs for named destinations, these will be used to replace internal links
         * done this way so that destinations can be defined after the location that links to them
         */
        public $destinations = [];
        /**
         * @var array Store the stack for the transaction commands, each item in here is a record of the values of all the
         * publiciables within the class, so that the user can rollback at will (from each 'start' command)
         * note that this includes the objects array, so these can be large.
         */
        public $checkpoint = '';
        /**
         * @var array Table of Image origin filenames and image labels which were already added with o_image().
         * Allows to merge identical images
         */
        public $imagelist = [];
        /**
         * @var array Table of already added alpha and plain image files for transparent PNG images.
         */
        protected $imageAlphaList = [];
        /**
         * @var array List of temporary image files to be deleted after processing.
         */
        protected $imageCache = [];
        /**
         * @var boolean Whether the text passed in should be treated as Unicode or just local character set.
         */
        public $isUnicode = false;
        /**
         * @var string the JavaScript code of the document
         */
        public $javascript = '';
        /**
         * @var boolean whether the compression is possible
         */
        protected $compressionReady = false;
        /**
         * @var array Current page size
         */
        protected $currentPageSize = ["width" => 0, "height" => 0];
        /**
         * @var array All the chars that will be required in the font subsets
         */
        protected $stringSubsets = [];
        /**
         * @var string The target internal encoding
         */
        protected static $targetEncoding = 'Windows-1252';
        /**
         * @var array
         */
        protected $byteRange = array();
        /**
         * @var array The list of the core fonts
         */
        protected static $coreFonts = ['courier', 'courier-bold', 'courier-oblique', 'courier-boldoblique', 'helvetica', 'helvetica-bold', 'helvetica-oblique', 'helvetica-boldoblique', 'times-roman', 'times-bold', 'times-italic', 'times-bolditalic', 'symbol', 'zapfdingbats'];
        /**
         * Class constructor
         * This will start a new document
         *
         * @param array   $pageSize  Array of 4 numbers, defining the bottom left and upper right corner of the page. first two are normally zero.
         * @param boolean $isUnicode Whether text will be treated as Unicode or not.
         * @param string  $fontcache The font cache folder
         * @param string  $tmp       The temporary folder
         */
        function __construct($pageSize = [0, 0, 612, 792], $isUnicode = false, $fontcache = '', $tmp = '')
        {
        }
        public function __destruct()
        {
        }
        /**
         * Document object methods (internal use only)
         *
         * There is about one object method for each type of object in the pdf document
         * Each function has the same call list ($id,$action,$options).
         * $id = the object ID of the object, or what it is to be if it is being created
         * $action = a string specifying the action to be performed, though ALL must support:
         *           'new' - create the object with the id $id
         *           'out' - produce the output for the pdf object
         * $options = optional, a string or array containing the various parameters for the object
         *
         * These, in conjunction with the output function are the ONLY way for output to be produced
         * within the pdf 'file'.
         */
        /**
         * Destination object, used to specify the location for the user to jump to, presently on opening
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return string|null
         */
        protected function o_destination($id, $action, $options = '')
        {
        }
        /**
         * set the viewer preferences
         *
         * @param $id
         * @param $action
         * @param string|array $options
         * @return string|null
         */
        protected function o_viewerPreferences($id, $action, $options = '')
        {
        }
        /**
         * define the document catalog, the overall controller for the document
         *
         * @param $id
         * @param $action
         * @param string|array $options
         * @return string|null
         */
        protected function o_catalog($id, $action, $options = '')
        {
        }
        /**
         * object which is a parent to the pages in the document
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return string|null
         */
        protected function o_pages($id, $action, $options = '')
        {
        }
        /**
         * define the outlines in the doc, empty for now
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return string|null
         */
        protected function o_outlines($id, $action, $options = '')
        {
        }
        /**
         * an object to hold the font description
         *
         * @param $id
         * @param $action
         * @param string|array $options
         * @return string|null
         * @throws FontNotFoundException
         */
        protected function o_font($id, $action, $options = '')
        {
        }
        protected function getFontSubsettingTag(array $font) : string
        {
        }
        /**
         * A toUnicode section, needed for unicode fonts
         *
         * @param $id
         * @param $action
         * @return null|string
         */
        protected function o_toUnicode($id, $action)
        {
        }
        /**
         * a font descriptor, needed for including additional fonts
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_fontDescriptor($id, $action, $options = '')
        {
        }
        /**
         * the font encoding
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_fontEncoding($id, $action, $options = '')
        {
        }
        /**
         * a descendent cid font, needed for unicode fonts
         *
         * @param $id
         * @param $action
         * @param string|array $options
         * @return null|string
         */
        protected function o_fontDescendentCID($id, $action, $options = '')
        {
        }
        /**
         * CID system info section, needed for unicode fonts
         *
         * @param $id
         * @param $action
         * @return null|string
         */
        protected function o_cidSystemInfo($id, $action)
        {
        }
        /**
         * a font glyph to character map, needed for unicode fonts
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_fontGIDtoCIDMap($id, $action, $options = '')
        {
        }
        /**
         * the document procset, solves some problems with printing to old PS printers
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_procset($id, $action, $options = '')
        {
        }
        /**
         * define the document information
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_info($id, $action, $options = '')
        {
        }
        /**
         * an action object, used to link to URLS initially
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_action($id, $action, $options = '')
        {
        }
        /**
         * an annotation object, this will add an annotation to the current page.
         * initially will support just link annotations
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_annotation($id, $action, $options = '')
        {
        }
        /**
         * a page object, it also creates a contents object to hold its contents
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_page($id, $action, $options = '')
        {
        }
        /**
         * the contents objects hold all of the content which appears on pages
         *
         * @param $id
         * @param $action
         * @param string|array $options
         * @return null|string
         */
        protected function o_contents($id, $action, $options = '')
        {
        }
        /**
         * @param $id
         * @param $action
         * @return string|null
         */
        protected function o_embedjs($id, $action)
        {
        }
        /**
         * @param $id
         * @param $action
         * @param string $code
         * @return null|string
         */
        protected function o_javascript($id, $action, $code = '')
        {
        }
        /**
         * an image object, will be an XObject in the document, includes description and data
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_image($id, $action, $options = '')
        {
        }
        /**
         * graphics state object
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_extGState($id, $action, $options = "")
        {
        }
        /**
         * @param integer $id
         * @param string $action
         * @param mixed $options
         * @return string
         */
        protected function o_xobject($id, $action, $options = '')
        {
        }
        /**
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_acroform($id, $action, $options = '')
        {
        }
        /**
         * @param $id
         * @param $action
         * @param mixed $options
         * @return null|string
         */
        protected function o_field($id, $action, $options = '')
        {
        }
        /**
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return null|string
         */
        protected function o_sig($id, $action, $options = '')
        {
        }
        /**
         * encryption object.
         *
         * @param $id
         * @param $action
         * @param string $options
         * @return string|null
         */
        protected function o_encryption($id, $action, $options = '')
        {
        }
        protected function o_indirect_references($id, $action, $options = null)
        {
        }
        protected function o_names($id, $action, $options = null)
        {
        }
        protected function o_embedded_file_dictionary($id, $action, $options = null)
        {
        }
        protected function o_embedded_file($id, $action, $options = null) : ?string
        {
        }
        /**
         * ARC4 functions
         * A series of function to implement ARC4 encoding in PHP
         */
        /**
         * calculate the 16 byte version of the 128 bit md5 digest of the string
         *
         * @param $string
         * @return string
         */
        function md5_16($string)
        {
        }
        /**
         * initialize the encryption for processing a particular object
         *
         * @param $id
         */
        function encryptInit($id)
        {
        }
        /**
         * initialize the ARC4 encryption
         *
         * @param string $key
         */
        function ARC4_init($key = '')
        {
        }
        /**
         * ARC4 encrypt a text string
         *
         * @param $text
         * @return string
         */
        function ARC4($text)
        {
        }
        /**
         * functions which can be called to adjust or add to the document
         */
        /**
         * add a link in the document to an external URL
         *
         * @param $url
         * @param $x0
         * @param $y0
         * @param $x1
         * @param $y1
         */
        function addLink($url, $x0, $y0, $x1, $y1)
        {
        }
        /**
         * add a link in the document to an internal destination (ie. within the document)
         *
         * @param $label
         * @param $x0
         * @param $y0
         * @param $x1
         * @param $y1
         */
        function addInternalLink($label, $x0, $y0, $x1, $y1)
        {
        }
        /**
         * set the encryption of the document
         * can be used to turn it on and/or set the passwords which it will have.
         * also the functions that the user will have are set here, such as print, modify, add
         *
         * @param string $userPass
         * @param string $ownerPass
         * @param array $pc
         */
        function setEncryption($userPass = '', $ownerPass = '', $pc = [])
        {
        }
        /**
         * should be used for internal checks, not implemented as yet
         */
        function checkAllHere()
        {
        }
        /**
         * return the pdf stream as a string returned from the function
         *
         * @param bool $debug
         * @return string
         */
        function output($debug = false)
        {
        }
        /**
         * if the font is not loaded then load it and make the required object
         * else just make it the current font
         * the encoding array can contain 'encoding'=> 'none','WinAnsiEncoding','MacRomanEncoding' or 'MacExpertEncoding'
         * note that encoding='none' will need to be used for symbolic fonts
         * and 'differences' => an array of mappings between numbers 0->255 and character names.
         *
         * @param $fontName
         * @param string $encoding
         * @param bool $set
         * @param bool $isSubsetting
         * @return int
         * @throws FontNotFoundException
         */
        function selectFont($fontName, $encoding = '', $set = true, $isSubsetting = true)
        {
        }
        /**
         * function for the user to find out what the ID is of the first page that was created during
         * startup - useful if they wish to add something to it later.
         *
         * @return int
         */
        function getFirstPageId()
        {
        }
        /**
         * sets the color for fill operations
         *
         * @param $color
         * @param bool $force
         */
        function setColor($color, $force = false)
        {
        }
        /**
         * sets the color for fill operations
         *
         * @param $fillRule
         */
        function setFillRule($fillRule)
        {
        }
        /**
         * sets the color for stroke operations
         *
         * @param $color
         * @param bool $force
         */
        function setStrokeColor($color, $force = false)
        {
        }
        /**
         * Set the graphics state for compositions
         *
         * @param $parameters
         */
        function setGraphicsState($parameters)
        {
        }
        /**
         * Set current blend mode & opacity for lines.
         *
         * Valid blend modes are:
         *
         * Normal, Multiply, Screen, Overlay, Darken, Lighten,
         * ColorDogde, ColorBurn, HardLight, SoftLight, Difference,
         * Exclusion
         *
         * @param string $mode    the blend mode to use
         * @param float  $opacity 0.0 fully transparent, 1.0 fully opaque
         */
        function setLineTransparency($mode, $opacity)
        {
        }
        /**
         * Set current blend mode & opacity for filled objects.
         *
         * Valid blend modes are:
         *
         * Normal, Multiply, Screen, Overlay, Darken, Lighten,
         * ColorDogde, ColorBurn, HardLight, SoftLight, Difference,
         * Exclusion
         *
         * @param string $mode    the blend mode to use
         * @param float  $opacity 0.0 fully transparent, 1.0 fully opaque
         */
        function setFillTransparency($mode, $opacity)
        {
        }
        /**
         * draw a line from one set of coordinates to another
         *
         * @param $x1
         * @param $y1
         * @param $x2
         * @param $y2
         * @param bool $stroke
         */
        function line($x1, $y1, $x2, $y2, $stroke = true)
        {
        }
        /**
         * draw a bezier curve based on 4 control points
         *
         * @param $x0
         * @param $y0
         * @param $x1
         * @param $y1
         * @param $x2
         * @param $y2
         * @param $x3
         * @param $y3
         */
        function curve($x0, $y0, $x1, $y1, $x2, $y2, $x3, $y3)
        {
        }
        /**
         * draw a part of an ellipse
         *
         * @param $x0
         * @param $y0
         * @param $astart
         * @param $afinish
         * @param $r1
         * @param int $r2
         * @param int $angle
         * @param int $nSeg
         */
        function partEllipse($x0, $y0, $astart, $afinish, $r1, $r2 = 0, $angle = 0, $nSeg = 8)
        {
        }
        /**
         * draw a filled ellipse
         *
         * @param $x0
         * @param $y0
         * @param $r1
         * @param int $r2
         * @param int $angle
         * @param int $nSeg
         * @param int $astart
         * @param int $afinish
         */
        function filledEllipse($x0, $y0, $r1, $r2 = 0, $angle = 0, $nSeg = 8, $astart = 0, $afinish = 360)
        {
        }
        /**
         * @param $x
         * @param $y
         */
        function lineTo($x, $y)
        {
        }
        /**
         * @param $x
         * @param $y
         */
        function moveTo($x, $y)
        {
        }
        /**
         * draw a bezier curve based on 4 control points
         *
         * @param $x1
         * @param $y1
         * @param $x2
         * @param $y2
         * @param $x3
         * @param $y3
         */
        function curveTo($x1, $y1, $x2, $y2, $x3, $y3)
        {
        }
        /**
         * draw a bezier curve based on 4 control points
         */
        function quadTo($cpx, $cpy, $x, $y)
        {
        }
        function closePath()
        {
        }
        function endPath()
        {
        }
        /**
         * draw an ellipse
         * note that the part and filled ellipse are just special cases of this function
         *
         * draws an ellipse in the current line style
         * centered at $x0,$y0, radii $r1,$r2
         * if $r2 is not set, then a circle is drawn
         * from $astart to $afinish, measured in degrees, running anti-clockwise from the right hand side of the ellipse.
         * nSeg is not allowed to be less than 2, as this will simply draw a line (and will even draw a
         * pretty crappy shape at 2, as we are approximating with bezier curves.
         *
         * @param $x0
         * @param $y0
         * @param $r1
         * @param int $r2
         * @param int $angle
         * @param int $nSeg
         * @param int $astart
         * @param int $afinish
         * @param bool $close
         * @param bool $fill
         * @param bool $stroke
         * @param bool $incomplete
         */
        function ellipse($x0, $y0, $r1, $r2 = 0, $angle = 0, $nSeg = 8, $astart = 0, $afinish = 360, $close = true, $fill = false, $stroke = true, $incomplete = false)
        {
        }
        /**
         * this sets the line drawing style.
         * width, is the thickness of the line in user units
         * cap is the type of cap to put on the line, values can be 'butt','round','square'
         *    where the diffference between 'square' and 'butt' is that 'square' projects a flat end past the
         *    end of the line.
         * join can be 'miter', 'round', 'bevel'
         * dash is an array which sets the dash pattern, is a series of length values, which are the lengths of the
         *   on and off dashes.
         *   (2) represents 2 on, 2 off, 2 on , 2 off ...
         *   (2,1) is 2 on, 1 off, 2 on, 1 off.. etc
         * phase is a modifier on the dash pattern which is used to shift the point at which the pattern starts.
         *
         * @param int $width
         * @param string $cap
         * @param string $join
         * @param string $dash
         * @param int $phase
         */
        function setLineStyle($width = 1, $cap = '', $join = '', $dash = '', $phase = 0)
        {
        }
        /**
         * draw a polygon, the syntax for this is similar to the GD polygon command
         *
         * @param $p
         * @param $np
         * @param bool $f
         */
        function polygon($p, $np, $f = false)
        {
        }
        /**
         * a filled rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not
         * the coordinates of the upper-right corner
         *
         * @param $x1
         * @param $y1
         * @param $width
         * @param $height
         */
        function filledRectangle($x1, $y1, $width, $height)
        {
        }
        /**
         * draw a rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not
         * the coordinates of the upper-right corner
         *
         * @param $x1
         * @param $y1
         * @param $width
         * @param $height
         */
        function rectangle($x1, $y1, $width, $height)
        {
        }
        /**
         * draw a rectangle, note that it is the width and height of the rectangle which are the secondary parameters, not
         * the coordinates of the upper-right corner
         *
         * @param $x1
         * @param $y1
         * @param $width
         * @param $height
         */
        function rect($x1, $y1, $width, $height)
        {
        }
        function stroke()
        {
        }
        function fill()
        {
        }
        function fillStroke()
        {
        }
        /**
         * @param string $subtype
         * @param integer $x
         * @param integer $y
         * @param integer $w
         * @param integer $h
         * @return int
         */
        function addXObject($subtype, $x, $y, $w, $h)
        {
        }
        /**
         * @param integer $numXObject
         * @param string $type
         * @param array $options
         */
        function setXObjectResource($numXObject, $type, $options)
        {
        }
        /**
         * add signature
         *
         * $fieldSigId = $cpdf->addFormField(Cpdf::ACROFORM_FIELD_SIG, 'Signature1', 0, 0, 0, 0, 0);
         *
         * $signatureId = $cpdf->addSignature([
         *   'signcert' => file_get_contents('dompdf.crt'),
         *   'privkey' => file_get_contents('dompdf.key'),
         *   'password' => 'password',
         *   'name' => 'DomPDF DEMO',
         *   'location' => 'Home',
         *   'reason' => 'First Form',
         *   'contactinfo' => 'info'
         * ]);
         * $cpdf->setFormFieldValue($fieldSigId, "$signatureId 0 R");
         *
         * @param string $signcert
         * @param string $privkey
         * @param string $password
         * @param string|null $name
         * @param string|null $location
         * @param string|null $reason
         * @param string|null $contactinfo
         * @return int
         */
        function addSignature($signcert, $privkey, $password = '', $name = null, $location = null, $reason = null, $contactinfo = null)
        {
        }
        /**
         * add field to form
         *
         * @param string $type ACROFORM_FIELD_*
         * @param string $name
         * @param $x0
         * @param $y0
         * @param $x1
         * @param $y1
         * @param integer $ff Field Flag ACROFORM_FIELD_*_*
         * @param float $size
         * @param array $color
         * @return int
         */
        public function addFormField($type, $name, $x0, $y0, $x1, $y1, $ff = 0, $size = 10.0, $color = [0, 0, 0])
        {
        }
        /**
         * set Field value
         *
         * @param integer $numFieldObj
         * @param string $value
         */
        public function setFormFieldValue($numFieldObj, $value)
        {
        }
        /**
         * set Field value (reference)
         *
         * @param integer $numFieldObj
         * @param integer $numObj Object number
         */
        public function setFormFieldRefValue($numFieldObj, $numObj)
        {
        }
        /**
         * set Field Appearanc (reference)
         *
         * @param integer $numFieldObj
         * @param integer $normalNumObj
         * @param integer|null $rolloverNumObj
         * @param integer|null $downNumObj
         */
        public function setFormFieldAppearance($numFieldObj, $normalNumObj, $rolloverNumObj = null, $downNumObj = null)
        {
        }
        /**
         * set Choice Field option values
         *
         * @param integer $numFieldObj
         * @param array $value
         */
        public function setFormFieldOpt($numFieldObj, $value)
        {
        }
        /**
         * add form to document
         *
         * @param integer $sigFlags
         * @param boolean $needAppearances
         */
        public function addForm($sigFlags = 0, $needAppearances = false)
        {
        }
        /**
         * save the current graphic state
         */
        function save()
        {
        }
        /**
         * restore the last graphic state
         */
        function restore()
        {
        }
        /**
         * draw a clipping rectangle, all the elements added after this will be clipped
         *
         * @param $x1
         * @param $y1
         * @param $width
         * @param $height
         */
        function clippingRectangle($x1, $y1, $width, $height)
        {
        }
        /**
         * draw a clipping rounded rectangle, all the elements added after this will be clipped
         *
         * @param $x1
         * @param $y1
         * @param $w
         * @param $h
         * @param $rTL
         * @param $rTR
         * @param $rBR
         * @param $rBL
         */
        function clippingRectangleRounded($x1, $y1, $w, $h, $rTL, $rTR, $rBR, $rBL)
        {
        }
        /**
         * ends the last clipping shape
         */
        function clippingEnd()
        {
        }
        /**
         * scale
         *
         * @param float $s_x scaling factor for width as percent
         * @param float $s_y scaling factor for height as percent
         * @param float $x   Origin abscissa
         * @param float $y   Origin ordinate
         */
        function scale($s_x, $s_y, $x, $y)
        {
        }
        /**
         * translate
         *
         * @param float $t_x movement to the right
         * @param float $t_y movement to the bottom
         */
        function translate($t_x, $t_y)
        {
        }
        /**
         * rotate
         *
         * @param float $angle angle in degrees for counter-clockwise rotation
         * @param float $x     Origin abscissa
         * @param float $y     Origin ordinate
         */
        function rotate($angle, $x, $y)
        {
        }
        /**
         * skew
         *
         * @param float $angle_x
         * @param float $angle_y
         * @param float $x Origin abscissa
         * @param float $y Origin ordinate
         */
        function skew($angle_x, $angle_y, $x, $y)
        {
        }
        /**
         * apply graphic transformations
         *
         * @param array $tm transformation matrix
         */
        function transform($tm)
        {
        }
        /**
         * add a new page to the document
         * this also makes the new page the current active object
         *
         * @param int $insert
         * @param int $id
         * @param string $pos
         * @return int
         */
        function newPage($insert = 0, $id = 0, $pos = 'after')
        {
        }
        /**
         * Streams the PDF to the client.
         *
         * @param string $filename The filename to present to the client.
         * @param array $options Associative array: 'compress' => 1 or 0 (default 1); 'Attachment' => 1 or 0 (default 1).
         */
        function stream($filename = "document.pdf", $options = [])
        {
        }
        /**
         * return the height in units of the current font in the given size
         *
         * @param $size
         * @return float|int
         */
        function getFontHeight($size)
        {
        }
        /**
         * @param $size
         * @return float|int
         */
        function getFontXHeight($size)
        {
        }
        /**
         * return the font descender, this will normally return a negative number
         * if you add this number to the baseline, you get the level of the bottom of the font
         * it is in the pdf user units
         *
         * @param $size
         * @return float|int
         */
        function getFontDescender($size)
        {
        }
        /**
         * filter the text, this is applied to all text just before being inserted into the pdf document
         * it escapes the various things that need to be escaped, and so on
         *
         * @access private
         *
         * @param $text
         * @param bool $bom
         * @param bool $convert_encoding
         * @return string
         */
        function filterText($text, $bom = true, $convert_encoding = true)
        {
        }
        /**
         * return array containing codepoints (UTF-8 character values) for the
         * string passed in.
         *
         * based on the excellent TCPDF code by Nicola Asuni and the
         * RFC for UTF-8 at http://www.faqs.org/rfcs/rfc3629.html
         *
         * @access private
         * @author Orion Richardson
         * @since  January 5, 2008
         *
         * @param string $text UTF-8 string to process
         *
         * @return array UTF-8 codepoints array for the string
         */
        function utf8toCodePointsArray(&$text)
        {
        }
        /**
         * convert UTF-8 to UTF-16 with an additional byte order marker
         * at the front if required.
         *
         * based on the excellent TCPDF code by Nicola Asuni and the
         * RFC for UTF-8 at http://www.faqs.org/rfcs/rfc3629.html
         *
         * @access private
         * @author Orion Richardson
         * @since  January 5, 2008
         *
         * @param string  $text UTF-8 string to process
         * @param boolean $bom  whether to add the byte order marker
         *
         * @return string UTF-16 result string
         */
        function utf8toUtf16BE(&$text, $bom = true)
        {
        }
        /**
         * Callback method used by smallCaps
         *
         * @param array $matches
         *
         * @return string
         */
        function toUpper($matches)
        {
        }
        function concatMatches($matches)
        {
        }
        /**
         * register text for font subsetting
         *
         * @param $font
         * @param $text
         */
        function registerText($font, $text)
        {
        }
        /**
         * add text to the document, at a specified location, size and angle on the page
         *
         * @param $x
         * @param $y
         * @param $size
         * @param $text
         * @param int $angle
         * @param int $wordSpaceAdjust
         * @param int $charSpaceAdjust
         * @param bool $smallCaps
         */
        function addText($x, $y, $size, $text, $angle = 0, $wordSpaceAdjust = 0, $charSpaceAdjust = 0, $smallCaps = false)
        {
        }
        /**
         * calculate how wide a given text string will be on a page, at a given size.
         * this can be called externally, but is also used by the other class functions
         *
         * @param float $size
         * @param string $text
         * @param float $word_spacing
         * @param float $char_spacing
         * @return float
         */
        function getTextWidth($size, $text, $word_spacing = 0, $char_spacing = 0)
        {
        }
        /**
         * this will be called at a new page to return the state to what it was on the
         * end of the previous page, before the stack was closed down
         * This is to get around not being able to have open 'q' across pages
         *
         * @param int $pageEnd
         */
        function saveState($pageEnd = 0)
        {
        }
        /**
         * restore a previously saved state
         *
         * @param int $pageEnd
         */
        function restoreState($pageEnd = 0)
        {
        }
        /**
         * make a loose object, the output will go into this object, until it is closed, then will revert to
         * the current one.
         * this object will not appear until it is included within a page.
         * the function will return the object number
         *
         * @return int
         */
        function openObject()
        {
        }
        /**
         * open an existing object for editing
         *
         * @param $id
         */
        function reopenObject($id)
        {
        }
        /**
         * close an object
         */
        function closeObject()
        {
        }
        /**
         * stop an object from appearing on pages from this point on
         *
         * @param $id
         */
        function stopObject($id)
        {
        }
        /**
         * after an object has been created, it wil only show if it has been added, using this function.
         *
         * @param $id
         * @param string $options
         */
        function addObject($id, $options = 'add')
        {
        }
        /**
         * return a storable representation of a specific object
         *
         * @param $id
         * @return string|null
         */
        function serializeObject($id)
        {
        }
        /**
         * restore an object from its stored representation. Returns its new object id.
         *
         * @param $obj
         * @return int
         */
        function restoreSerializedObject($obj)
        {
        }
        /**
         * Embeds a file inside the PDF
         *
         * @param string $filepath path to the file to store inside the PDF
         * @param string $embeddedFilename the filename displayed in the list of embedded files
         * @param string $description a description in the list of embedded files
         */
        public function addEmbeddedFile(string $filepath, string $embeddedFilename, string $description) : void
        {
        }
        /**
         * add content to the documents info object
         *
         * @param $label
         * @param int $value
         */
        function addInfo($label, $value = 0)
        {
        }
        /**
         * set the viewer preferences of the document, it is up to the browser to obey these.
         *
         * @param $label
         * @param int $value
         */
        function setPreferences($label, $value = 0)
        {
        }
        /**
         * Check if image already added to pdf image directory.
         * If yes, need not to create again (pass empty data)
         *
         * @param string $imgname
         * @return bool
         */
        function image_iscached($imgname)
        {
        }
        /**
         * add a PNG image into the document, from a GD object
         * this should work with remote files
         *
         * @param \GdImage|resource $img A GD resource
         * @param string $file The PNG file
         * @param float $x X position
         * @param float $y Y position
         * @param float $w Width
         * @param float $h Height
         * @param bool $is_mask true if the image is a mask
         * @param bool $mask true if the image is masked
         * @throws Exception
         */
        function addImagePng(&$img, $file, $x, $y, $w = 0.0, $h = 0.0, $is_mask = false, $mask = null)
        {
        }
        /**
         * @param $file
         * @param $x
         * @param $y
         * @param $w
         * @param $h
         * @param $byte
         */
        protected function addImagePngAlpha($file, $x, $y, $w, $h, $byte)
        {
        }
        /**
         * add a PNG image into the document, from a file
         * this should work with remote files
         *
         * @param $file
         * @param $x
         * @param $y
         * @param int $w
         * @param int $h
         * @throws Exception
         */
        function addPngFromFile($file, $x, $y, $w = 0, $h = 0)
        {
        }
        /**
         * add a PNG image into the document, from a memory buffer of the file
         *
         * @param $data
         * @param $file
         * @param $x
         * @param $y
         * @param float $w
         * @param float $h
         * @param bool $is_mask
         * @param null $mask
         */
        function addPngFromBuf(&$data, $file, $x, $y, $w = 0.0, $h = 0.0, $is_mask = false, $mask = null)
        {
        }
        /**
         * add a JPEG image into the document, from a file
         *
         * @param $img
         * @param $x
         * @param $y
         * @param int $w
         * @param int $h
         */
        function addJpegFromFile($img, $x, $y, $w = 0, $h = 0)
        {
        }
        /**
         * specify where the document should open when it first starts
         *
         * @param $style
         * @param int $a
         * @param int $b
         * @param int $c
         */
        function openHere($style, $a = 0, $b = 0, $c = 0)
        {
        }
        /**
         * Add JavaScript code to the PDF document
         *
         * @param string $code
         */
        function addJavascript($code)
        {
        }
        /**
         * create a labelled destination within the document
         *
         * @param $label
         * @param $style
         * @param int $a
         * @param int $b
         * @param int $c
         */
        function addDestination($label, $style, $a = 0, $b = 0, $c = 0)
        {
        }
        /**
         * define font families, this is used to initialize the font families for the default fonts
         * and for the user to add new ones for their fonts. The default bahavious can be overridden should
         * that be desired.
         *
         * @param $family
         * @param string $options
         */
        function setFontFamily($family, $options = '')
        {
        }
        /**
         * used to add messages for use in debugging
         *
         * @param $message
         */
        function addMessage($message)
        {
        }
        /**
         * a few functions which should allow the document to be treated transactionally.
         *
         * @param $action
         */
        function transaction($action)
        {
        }
    }
}
namespace {
    // warning: this file is encoded in UTF-8!
    class HTML5_Data
    {
        // at some point this should be moved to a .ser file. Another
        // possible optimization is to give UTF-8 bytes, not Unicode
        // codepoints
        // XXX: Not quite sure why it's named this; this is
        // actually the numeric entity dereference table.
        protected static $realCodepointTable = [
            0x0 => 0xfffd,
            // REPLACEMENT CHARACTER
            0xd => 0xa,
            // LINE FEED (LF)
            0x80 => 0x20ac,
            // EURO SIGN ('€')
            0x81 => 0x81,
            // <control>
            0x82 => 0x201a,
            // SINGLE LOW-9 QUOTATION MARK ('‚')
            0x83 => 0x192,
            // LATIN SMALL LETTER F WITH HOOK ('ƒ')
            0x84 => 0x201e,
            // DOUBLE LOW-9 QUOTATION MARK ('„')
            0x85 => 0x2026,
            // HORIZONTAL ELLIPSIS ('…')
            0x86 => 0x2020,
            // DAGGER ('†')
            0x87 => 0x2021,
            // DOUBLE DAGGER ('‡')
            0x88 => 0x2c6,
            // MODIFIER LETTER CIRCUMFLEX ACCENT ('ˆ')
            0x89 => 0x2030,
            // PER MILLE SIGN ('‰')
            0x8a => 0x160,
            // LATIN CAPITAL LETTER S WITH CARON ('Š')
            0x8b => 0x2039,
            // SINGLE LEFT-POINTING ANGLE QUOTATION MARK ('‹')
            0x8c => 0x152,
            // LATIN CAPITAL LIGATURE OE ('Œ')
            0x8d => 0x8d,
            // <control>
            0x8e => 0x17d,
            // LATIN CAPITAL LETTER Z WITH CARON ('Ž')
            0x8f => 0x8f,
            // <control>
            0x90 => 0x90,
            // <control>
            0x91 => 0x2018,
            // LEFT SINGLE QUOTATION MARK ('‘')
            0x92 => 0x2019,
            // RIGHT SINGLE QUOTATION MARK ('’')
            0x93 => 0x201c,
            // LEFT DOUBLE QUOTATION MARK ('“')
            0x94 => 0x201d,
            // RIGHT DOUBLE QUOTATION MARK ('”')
            0x95 => 0x2022,
            // BULLET ('•')
            0x96 => 0x2013,
            // EN DASH ('–')
            0x97 => 0x2014,
            // EM DASH ('—')
            0x98 => 0x2dc,
            // SMALL TILDE ('˜')
            0x99 => 0x2122,
            // TRADE MARK SIGN ('™')
            0x9a => 0x161,
            // LATIN SMALL LETTER S WITH CARON ('š')
            0x9b => 0x203a,
            // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK ('›')
            0x9c => 0x153,
            // LATIN SMALL LIGATURE OE ('œ')
            0x9d => 0x9d,
            // <control>
            0x9e => 0x17e,
            // LATIN SMALL LETTER Z WITH CARON ('ž')
            0x9f => 0x178,
        ];
        protected static $namedCharacterReferences;
        protected static $namedCharacterReferenceMaxLength;
        /**
         * Returns the "real" Unicode codepoint of a malformed character
         * reference.
         */
        public static function getRealCodepoint($ref)
        {
        }
        public static function getNamedCharacterReferences()
        {
        }
        /**
         * Converts a Unicode codepoint to sequence of UTF-8 bytes.
         * @note Shamelessly stolen from HTML Purifier, which is also
         *       shamelessly stolen from Feyd (which is in public domain).
         */
        public static function utf8chr($code)
        {
        }
    }
    /**
     * Outwards facing interface for HTML5.
     */
    class HTML5_Parser
    {
        /**
         * Parses a full HTML document.
         * @param $text | HTML text to parse
         * @param $builder | Custom builder implementation
         * @return DOMDocument|DOMNodeList Parsed HTML as DOMDocument
         */
        public static function parse($text, $builder = \null)
        {
        }
        /**
         * Parses an HTML fragment.
         * @param $text | HTML text to parse
         * @param $context String name of context element to pretend parsing is in.
         * @param $builder | Custom builder implementation
         * @return DOMDocument|DOMNodeList Parsed HTML as DOMDocument
         */
        public static function parseFragment($text, $context = \null, $builder = \null)
        {
        }
    }
    /*
    Copyright 2007 Jeroen van der Meer <http://jero.net/>
    Copyright 2009 Edward Z. Yang <edwardzyang@thewritingpot.com>
    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    */
    // Tags for FIX ME!!!: (in order of priority)
    //      XXX - should be fixed NAO!
    //      XERROR - with regards to parse errors
    //      XSCRIPT - with regards to scripting mode
    //      XENCODING - with regards to encoding (for reparsing tests)
    //      XDOM - DOM specific code (tagName is explicitly not marked).
    //          this is not (yet) in helper functions.
    class HTML5_TreeBuilder
    {
        public $stack = [];
        public $content_model;
        // Tree construction modes
        const INITIAL = 0;
        const BEFORE_HTML = 1;
        const BEFORE_HEAD = 2;
        const IN_HEAD = 3;
        const IN_HEAD_NOSCRIPT = 4;
        const AFTER_HEAD = 5;
        const IN_BODY = 6;
        const IN_CDATA_RCDATA = 7;
        const IN_TABLE = 8;
        const IN_TABLE_TEXT = 9;
        const IN_CAPTION = 10;
        const IN_COLUMN_GROUP = 11;
        const IN_TABLE_BODY = 12;
        const IN_ROW = 13;
        const IN_CELL = 14;
        const IN_SELECT = 15;
        const IN_SELECT_IN_TABLE = 16;
        const IN_FOREIGN_CONTENT = 17;
        const AFTER_BODY = 18;
        const IN_FRAMESET = 19;
        const AFTER_FRAMESET = 20;
        const AFTER_AFTER_BODY = 21;
        const AFTER_AFTER_FRAMESET = 22;
        // The different types of elements.
        const SPECIAL = 100;
        const SCOPING = 101;
        const FORMATTING = 102;
        const PHRASING = 103;
        // Quirks modes in $quirks_mode
        const NO_QUIRKS = 200;
        const QUIRKS_MODE = 201;
        const LIMITED_QUIRKS_MODE = 202;
        // Marker to be placed in $a_formatting
        const MARKER = 300;
        // Namespaces for foreign content
        const NS_HTML = \null;
        // to prevent DOM from requiring NS on everything
        const NS_MATHML = 'http://www.w3.org/1998/Math/MathML';
        const NS_SVG = 'http://www.w3.org/2000/svg';
        const NS_XLINK = 'http://www.w3.org/1999/xlink';
        const NS_XML = 'http://www.w3.org/XML/1998/namespace';
        const NS_XMLNS = 'http://www.w3.org/2000/xmlns/';
        // Different types of scopes to test for elements
        const SCOPE = 0;
        const SCOPE_LISTITEM = 1;
        const SCOPE_TABLE = 2;
        /**
         * HTML5_TreeBuilder constructor.
         */
        public function __construct()
        {
        }
        public function getQuirksMode()
        {
        }
        /**
         * Process tag tokens
         *
         * @param $token
         * @param null $mode
         */
        public function emitToken($token, $mode = \null)
        {
        }
        /**
         * @param $node
         */
        public function fosterParent($node)
        {
        }
        /**
         * @return bool
         */
        public function currentTableIsTainted()
        {
        }
        /**
         * Sets up the tree constructor for building a fragment.
         *
         * @param null $context
         */
        public function setupContext($context = \null)
        {
        }
        /**
         * @param $token
         * @return mixed
         */
        public function adjustMathMLAttributes($token)
        {
        }
        /**
         * @param $token
         * @return mixed
         */
        public function adjustSVGAttributes($token)
        {
        }
        /**
         * @param $token
         * @return mixed
         */
        public function adjustForeignAttributes($token)
        {
        }
        /**
         * @param $token
         * @param $namespaceURI
         */
        public function insertForeignElement($token, $namespaceURI)
        {
        }
        /**
         * @return DOMDocument|DOMNodeList
         */
        public function save()
        {
        }
    }
    /*
    Copyright 2009 Geoffrey Sneddon <http://gsnedders.com/>
    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    */
    // Some conventions:
    // /* */ indicates verbatim text from the HTML 5 specification
    // // indicates regular comments
    class HTML5_InputStream
    {
        /**
         * Parse errors.
         */
        public $errors = [];
        /**
         * @param $data | Data to parse
         * @throws Exception
         */
        public function __construct($data)
        {
        }
        /**
         * Returns the current line that the tokenizer is at.
         *
         * @return int
         */
        public function getCurrentLine()
        {
        }
        /**
         * Returns the current column of the current line that the tokenizer is at.
         *
         * @return int
         */
        public function getColumnOffset()
        {
        }
        /**
         * Retrieve the currently consume character.
         * @note This performs bounds checking
         *
         * @return bool|string
         */
        public function char()
        {
        }
        /**
         * Get all characters until EOF.
         * @note This performs bounds checking
         *
         * @return string|bool
         */
        public function remainingChars()
        {
        }
        /**
         * Matches as far as possible until we reach a certain set of bytes
         * and returns the matched substring.
         *
         * @param $bytes | Bytes to match.
         * @param null $max
         * @return bool|string
         */
        public function charsUntil($bytes, $max = \null)
        {
        }
        /**
         * Matches as far as possible with a certain set of bytes
         * and returns the matched substring.
         *
         * @param $bytes | Bytes to match.
         * @param null $max
         * @return bool|string
         */
        public function charsWhile($bytes, $max = \null)
        {
        }
        /**
         * Unconsume one character.
         */
        public function unget()
        {
        }
    }
    /*
    Copyright 2007 Jeroen van der Meer <http://jero.net/>
    Copyright 2008 Edward Z. Yang <http://htmlpurifier.org/>
    Copyright 2009 Geoffrey Sneddon <http://gsnedders.com/>
    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
    */
    // Some conventions:
    // /* */ indicates verbatim text from the HTML 5 specification
    // // indicates regular comments
    // all flags are in hyphenated form
    class HTML5_Tokenizer
    {
        /**
         * @var HTML5_InputStream
         *
         * Points to an InputStream object.
         */
        protected $stream;
        /**
         * @var int
         *
         * Current content model we are parsing as.
         */
        protected $content_model;
        /**
         * Current token that is being built, but not yet emitted. Also
         * is the last token emitted, if applicable.
         */
        protected $token;
        // These are constants describing the content model
        const PCDATA = 0;
        const RCDATA = 1;
        const CDATA = 2;
        const PLAINTEXT = 3;
        // These are constants describing tokens
        // XXX should probably be moved somewhere else, probably the
        // HTML5 class.
        const DOCTYPE = 0;
        const STARTTAG = 1;
        const ENDTAG = 2;
        const COMMENT = 3;
        const CHARACTER = 4;
        const SPACECHARACTER = 5;
        const EOF = 6;
        const PARSEERROR = 7;
        // These are constants representing bunches of characters.
        const ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
        const UPPER_ALPHA = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const LOWER_ALPHA = 'abcdefghijklmnopqrstuvwxyz';
        const DIGIT = '0123456789';
        const HEX = '0123456789ABCDEFabcdef';
        const WHITESPACE = "\t\n\f ";
        /**
         * @param $data | Data to parse
         * @param HTML5_TreeBuilder|null $builder
         */
        public function __construct($data, $builder = \null)
        {
        }
        /**
         * @param null $context
         */
        public function parseFragment($context = \null)
        {
        }
        // XXX maybe convert this into an iterator? regardless, this function
        // and the save function should go into a Parser facade of some sort
        /**
         * Performs the actual parsing of the document.
         */
        public function parse()
        {
        }
        /**
         * Returns a serialized representation of the tree.
         *
         * @return DOMDocument|DOMNodeList
         */
        public function save()
        {
        }
        /**
         * @return HTML5_TreeBuilder The tree
         */
        public function getTree()
        {
        }
        /**
         * Returns the input stream.
         *
         * @return HTML5_InputStream
         */
        public function stream()
        {
        }
        /**
         * Emits a token, passing it on to the tree builder.
         *
         * @param $token
         * @param bool $checkStream
         * @param bool $dry
         */
        protected function emitToken($token, $checkStream = \true, $dry = \false)
        {
        }
    }
}
namespace setasign\Fpdi {
    /**
     * Trait FpdfTplTrait
     *
     * This class adds a templating feature to tFPDF.
     */
    trait FpdfTplTrait
    {
        /**
         * Data of all created templates.
         *
         * @var array
         */
        protected $templates = [];
        /**
         * The template id for the currently created template.
         *
         * @var null|int
         */
        protected $currentTemplateId;
        /**
         * A counter for template ids.
         *
         * @var int
         */
        protected $templateId = 0;
        /**
         * Set the page format of the current page.
         *
         * @param array $size An array with two values defining the size.
         * @param string $orientation "L" for landscape, "P" for portrait.
         * @throws \BadMethodCallException
         */
        public function setPageFormat($size, $orientation)
        {
        }
        /**
         * Draws a template onto the page or another template.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param array|float|int $x The abscissa of upper-left corner. Alternatively you could use an assoc array
         *                           with the keys "x", "y", "width", "height", "adjustPageSize".
         * @param float|int $y The ordinate of upper-left corner.
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @param bool $adjustPageSize
         * @return array The size
         * @see FpdfTplTrait::getTemplateSize()
         */
        public function useTemplate($tpl, $x = 0, $y = 0, $width = null, $height = null, $adjustPageSize = false)
        {
        }
        /**
         * Get the size of a template.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @return array|bool An array with following keys: width, height, 0 (=width), 1 (=height), orientation (L or P)
         */
        public function getTemplateSize($tpl, $width = null, $height = null)
        {
        }
        /**
         * Begins a new template.
         *
         * @param float|int|null $width The width of the template. If null, the current page width is used.
         * @param float|int|null $height The height of the template. If null, the current page height is used.
         * @param bool $groupXObject Define the form XObject as a group XObject to support transparency (if used).
         * @return int A template identifier.
         */
        public function beginTemplate($width = null, $height = null, $groupXObject = false)
        {
        }
        /**
         * Ends a template.
         *
         * @return bool|int|null A template identifier.
         */
        public function endTemplate()
        {
        }
        /**
         * Get the next template id.
         *
         * @return int
         */
        protected function getNextTemplateId()
        {
        }
        /* overwritten FPDF methods: */
        /**
         * @inheritdoc
         */
        public function AddPage($orientation = '', $size = '', $rotation = 0)
        {
        }
        /**
         * @inheritdoc
         */
        public function Link($x, $y, $w, $h, $link)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetLink($link, $y = 0, $page = -1)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetDrawColor($r, $g = null, $b = null)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetFillColor($r, $g = null, $b = null)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetLineWidth($width)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetFont($family, $style = '', $size = 0)
        {
        }
        /**
         * @inheritdoc
         */
        public function SetFontSize($size)
        {
        }
        /**
         * @inheritdoc
         */
        protected function _putimages()
        {
        }
        /**
         * @inheritdoc
         */
        protected function _putxobjectdict()
        {
        }
        /**
         * @inheritdoc
         */
        public function _out($s)
        {
        }
    }
    /**
     * Class FpdfTpl
     *
     * This class adds a templating feature to FPDF.
     */
    class FpdfTpl extends \FPDF
    {
        use \setasign\Fpdi\FpdfTplTrait;
    }
}
namespace setasign\Fpdi\PdfReader {
    /**
     * An abstract class for page boundary constants and some helper methods
     */
    abstract class PageBoundaries
    {
        /**
         * MediaBox
         *
         * The media box defines the boundaries of the physical medium on which the page is to be printed.
         *
         * @see PDF 32000-1:2008 - 14.11.2 Page Boundaries
         * @var string
         */
        const MEDIA_BOX = 'MediaBox';
        /**
         * CropBox
         *
         * The crop box defines the region to which the contents of the page shall be clipped (cropped) when displayed or
         * printed.
         *
         * @see PDF 32000-1:2008 - 14.11.2 Page Boundaries
         * @var string
         */
        const CROP_BOX = 'CropBox';
        /**
         * BleedBox
         *
         * The bleed box defines the region to which the contents of the page shall be clipped when output in a
         * production environment.
         *
         * @see PDF 32000-1:2008 - 14.11.2 Page Boundaries
         * @var string
         */
        const BLEED_BOX = 'BleedBox';
        /**
         * TrimBox
         *
         * The trim box defines the intended dimensions of the finished page after trimming.
         *
         * @see PDF 32000-1:2008 - 14.11.2 Page Boundaries
         * @var string
         */
        const TRIM_BOX = 'TrimBox';
        /**
         * ArtBox
         *
         * The art box defines the extent of the page’s meaningful content (including potential white space) as intended
         * by the page’s creator.
         *
         * @see PDF 32000-1:2008 - 14.11.2 Page Boundaries
         * @var string
         */
        const ART_BOX = 'ArtBox';
        /**
         * All page boundaries
         *
         * @var array
         */
        public static $all = array(self::MEDIA_BOX, self::CROP_BOX, self::BLEED_BOX, self::TRIM_BOX, self::ART_BOX);
        /**
         * Checks if a name is a valid page boundary name.
         *
         * @param string $name The boundary name
         * @return boolean A boolean value whether the name is valid or not.
         */
        public static function isValidName($name)
        {
        }
    }
}
namespace setasign\Fpdi {
    /**
     * Base exception class for the FPDI package.
     */
    class FpdiException extends \Exception
    {
    }
}
namespace setasign\Fpdi\PdfReader {
    /**
     * Exception for the pdf reader class
     */
    class PdfReaderException extends \setasign\Fpdi\FpdiException
    {
        /**
         * @var int
         */
        const KIDS_EMPTY = 0x101;
        /**
         * @var int
         */
        const UNEXPECTED_DATA_TYPE = 0x102;
        /**
         * @var int
         */
        const MISSING_DATA = 0x103;
    }
}
namespace setasign\Fpdi\PdfReader\DataStructure {
    /**
     * Class representing a rectangle
     */
    class Rectangle
    {
        /**
         * @var int|float
         */
        protected $llx;
        /**
         * @var int|float
         */
        protected $lly;
        /**
         * @var int|float
         */
        protected $urx;
        /**
         * @var int|float
         */
        protected $ury;
        /**
         * Create a rectangle instance by a PdfArray.
         *
         * @param PdfArray|mixed $array
         * @param PdfParser $parser
         * @return Rectangle
         * @throws PdfTypeException
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public static function byPdfArray($array, \setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Rectangle constructor.
         *
         * @param float|int $ax
         * @param float|int $ay
         * @param float|int $bx
         * @param float|int $by
         */
        public function __construct($ax, $ay, $bx, $by)
        {
        }
        /**
         * Get the width of the rectangle.
         *
         * @return float|int
         */
        public function getWidth()
        {
        }
        /**
         * Get the height of the rectangle.
         *
         * @return float|int
         */
        public function getHeight()
        {
        }
        /**
         * Get the lower left abscissa.
         *
         * @return float|int
         */
        public function getLlx()
        {
        }
        /**
         * Get the lower left ordinate.
         *
         * @return float|int
         */
        public function getLly()
        {
        }
        /**
         * Get the upper right abscissa.
         *
         * @return float|int
         */
        public function getUrx()
        {
        }
        /**
         * Get the upper right ordinate.
         *
         * @return float|int
         */
        public function getUry()
        {
        }
        /**
         * Get the rectangle as an array.
         *
         * @return array
         */
        public function toArray()
        {
        }
        /**
         * Get the rectangle as a PdfArray.
         *
         * @return PdfArray
         */
        public function toPdfArray()
        {
        }
    }
}
namespace setasign\Fpdi\PdfReader {
    /**
     * A PDF reader class
     */
    class PdfReader
    {
        /**
         * @var PdfParser
         */
        protected $parser;
        /**
         * @var int
         */
        protected $pageCount;
        /**
         * Indirect objects of resolved pages.
         *
         * @var PdfIndirectObjectReference[]|PdfIndirectObject[]
         */
        protected $pages = [];
        /**
         * PdfReader constructor.
         *
         * @param PdfParser $parser
         */
        public function __construct(\setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * PdfReader destructor.
         */
        public function __destruct()
        {
        }
        /**
         * Get the pdf parser instance.
         *
         * @return PdfParser
         */
        public function getParser()
        {
        }
        /**
         * Get the PDF version.
         *
         * @return string
         * @throws PdfParserException
         */
        public function getPdfVersion()
        {
        }
        /**
         * Get the page count.
         *
         * @return int
         * @throws PdfTypeException
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public function getPageCount()
        {
        }
        /**
         * Get a page instance.
         *
         * @param int $pageNumber
         * @return Page
         * @throws PdfTypeException
         * @throws CrossReferenceException
         * @throws PdfParserException
         * @throws \InvalidArgumentException
         */
        public function getPage($pageNumber)
        {
        }
        /**
         * Walk the page tree and resolve all indirect objects of all pages.
         *
         * @param bool $readAll
         * @throws CrossReferenceException
         * @throws PdfParserException
         * @throws PdfTypeException
         */
        protected function readPages($readAll = false)
        {
        }
    }
    /**
     * Class representing a page of a PDF document
     */
    class Page
    {
        /**
         * @var PdfIndirectObject
         */
        protected $pageObject;
        /**
         * @var PdfDictionary
         */
        protected $pageDictionary;
        /**
         * @var PdfParser
         */
        protected $parser;
        /**
         * Inherited attributes
         *
         * @var null|array
         */
        protected $inheritedAttributes;
        /**
         * Page constructor.
         *
         * @param PdfIndirectObject $page
         * @param PdfParser $parser
         */
        public function __construct(\setasign\Fpdi\PdfParser\Type\PdfIndirectObject $page, \setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Get the indirect object of this page.
         *
         * @return PdfIndirectObject
         */
        public function getPageObject()
        {
        }
        /**
         * Get the dictionary of this page.
         *
         * @return PdfDictionary
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws CrossReferenceException
         */
        public function getPageDictionary()
        {
        }
        /**
         * Get a page attribute.
         *
         * @param string $name
         * @param bool $inherited
         * @return PdfType|null
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws CrossReferenceException
         */
        public function getAttribute($name, $inherited = true)
        {
        }
        /**
         * Get the rotation value.
         *
         * @return int
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws CrossReferenceException
         */
        public function getRotation()
        {
        }
        /**
         * Get a boundary of this page.
         *
         * @param string $box
         * @param bool $fallback
         * @return bool|Rectangle
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws CrossReferenceException
         * @see PageBoundaries
         */
        public function getBoundary($box = \setasign\Fpdi\PdfReader\PageBoundaries::CROP_BOX, $fallback = true)
        {
        }
        /**
         * Get the width and height of this page.
         *
         * @param string $box
         * @param bool $fallback
         * @return array|bool
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws CrossReferenceException
         */
        public function getWidthAndHeight($box = \setasign\Fpdi\PdfReader\PageBoundaries::CROP_BOX, $fallback = true)
        {
        }
        /**
         * Get the raw content stream.
         *
         * @return string
         * @throws PdfReaderException
         * @throws PdfTypeException
         * @throws FilterException
         * @throws PdfParserException
         */
        public function getContentStream()
        {
        }
    }
}
namespace setasign\Fpdi {
    /**
     * The FpdiTrait
     *
     * This trait offers the core functionalities of FPDI. By passing them to a trait we can reuse it with e.g. TCPDF in a
     * very easy way.
     */
    trait FpdiTrait
    {
        /**
         * The pdf reader instances.
         *
         * @var PdfReader[]
         */
        protected $readers = [];
        /**
         * Instances created internally.
         *
         * @var array
         */
        protected $createdReaders = [];
        /**
         * The current reader id.
         *
         * @var string|null
         */
        protected $currentReaderId;
        /**
         * Data of all imported pages.
         *
         * @var array
         */
        protected $importedPages = [];
        /**
         * A map from object numbers of imported objects to new assigned object numbers by FPDF.
         *
         * @var array
         */
        protected $objectMap = [];
        /**
         * An array with information about objects, which needs to be copied to the resulting document.
         *
         * @var array
         */
        protected $objectsToCopy = [];
        /**
         * Release resources and file handles.
         *
         * This method is called internally when the document is created successfully. By default it only cleans up
         * stream reader instances which were created internally.
         *
         * @param bool $allReaders
         */
        public function cleanUp($allReaders = false)
        {
        }
        /**
         * Set the minimal PDF version.
         *
         * @param string $pdfVersion
         */
        protected function setMinPdfVersion($pdfVersion)
        {
        }
        /** @noinspection PhpUndefinedClassInspection */
        /**
         * Get a new pdf parser instance.
         *
         * @param StreamReader $streamReader
         * @return PdfParser|FpdiPdfParser
         */
        protected function getPdfParserInstance(\setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Get an unique reader id by the $file parameter.
         *
         * @param string|resource|PdfReader|StreamReader $file An open file descriptor, a path to a file, a PdfReader
         *                                                     instance or a StreamReader instance.
         * @return string
         */
        protected function getPdfReaderId($file)
        {
        }
        /**
         * Get a pdf reader instance by its id.
         *
         * @param string $id
         * @return PdfReader
         */
        protected function getPdfReader($id)
        {
        }
        /**
         * Set the source PDF file.
         *
         * @param string|resource|StreamReader $file Path to the file or a stream resource or a StreamReader instance.
         * @return int The page count of the PDF document.
         * @throws PdfParserException
         */
        public function setSourceFile($file)
        {
        }
        /**
         * Imports a page.
         *
         * @param int $pageNumber The page number.
         * @param string $box The page boundary to import. Default set to PageBoundaries::CROP_BOX.
         * @param bool $groupXObject Define the form XObject as a group XObject to support transparency (if used).
         * @return string A unique string identifying the imported page.
         * @throws CrossReferenceException
         * @throws FilterException
         * @throws PdfParserException
         * @throws PdfTypeException
         * @throws PdfReaderException
         * @see PageBoundaries
         */
        public function importPage($pageNumber, $box = \setasign\Fpdi\PdfReader\PageBoundaries::CROP_BOX, $groupXObject = true)
        {
        }
        /**
         * Draws an imported page onto the page.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $pageId The page id
         * @param float|int|array $x The abscissa of upper-left corner. Alternatively you could use an assoc array
         *                           with the keys "x", "y", "width", "height", "adjustPageSize".
         * @param float|int $y The ordinate of upper-left corner.
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @param bool $adjustPageSize
         * @return array The size.
         * @see Fpdi::getTemplateSize()
         */
        public function useImportedPage($pageId, $x = 0, $y = 0, $width = null, $height = null, $adjustPageSize = false)
        {
        }
        /**
         * Get the size of an imported page.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @return array|bool An array with following keys: width, height, 0 (=width), 1 (=height), orientation (L or P)
         */
        public function getImportedPageSize($tpl, $width = null, $height = null)
        {
        }
        /**
         * Writes a PdfType object to the resulting buffer.
         *
         * @param PdfType $value
         * @throws PdfTypeException
         */
        protected function writePdfType(\setasign\Fpdi\PdfParser\Type\PdfType $value)
        {
        }
    }
}
namespace setasign\Fpdi\PdfParser {
    /**
     * A stream reader class
     */
    class StreamReader
    {
        /**
         * Creates a stream reader instance by a string value.
         *
         * @param string $content
         * @param int $maxMemory
         * @return StreamReader
         */
        public static function createByString($content, $maxMemory = 2097152)
        {
        }
        /**
         * Creates a stream reader instance by a filename.
         *
         * @param string $filename
         * @return StreamReader
         */
        public static function createByFile($filename)
        {
        }
        /**
         * Defines whether the stream should be closed when the stream reader instance is deconstructed or not.
         *
         * @var bool
         */
        protected $closeStream;
        /**
         * The stream resource.
         *
         * @var resource
         */
        protected $stream;
        /**
         * The byte-offset position in the stream.
         *
         * @var int
         */
        protected $position;
        /**
         * The byte-offset position in the buffer.
         *
         * @var int
         */
        protected $offset;
        /**
         * The buffer length.
         *
         * @var int
         */
        protected $bufferLength;
        /**
         * The total length of the stream.
         *
         * @var int
         */
        protected $totalLength;
        /**
         * The buffer.
         *
         * @var string
         */
        protected $buffer;
        /**
         * StreamReader constructor.
         *
         * @param resource $stream
         * @param bool $closeStream Defines whether to close the stream resource if the instance is destructed or not.
         */
        public function __construct($stream, $closeStream = false)
        {
        }
        /**
         * The destructor.
         */
        public function __destruct()
        {
        }
        /**
         * Closes the file handle.
         */
        public function cleanUp()
        {
        }
        /**
         * Returns the byte length of the buffer.
         *
         * @param bool $atOffset
         * @return int
         */
        public function getBufferLength($atOffset = false)
        {
        }
        /**
         * Get the current position in the stream.
         *
         * @return int
         */
        public function getPosition()
        {
        }
        /**
         * Returns the current buffer.
         *
         * @param bool $atOffset
         * @return string
         */
        public function getBuffer($atOffset = true)
        {
        }
        /**
         * Gets a byte at a specific position in the buffer.
         *
         * If the position is invalid the method will return false.
         *
         * If the $position parameter is set to null the value of $this->offset will be used.
         *
         * @param int|null $position
         * @return string|bool
         */
        public function getByte($position = null)
        {
        }
        /**
         * Returns a byte at a specific position, and set the offset to the next byte position.
         *
         * If the position is invalid the method will return false.
         *
         * If the $position parameter is set to null the value of $this->offset will be used.
         *
         * @param int|null $position
         * @return string|bool
         */
        public function readByte($position = null)
        {
        }
        /**
         * Read bytes from the current or a specific offset position and set the internal pointer to the next byte.
         *
         * If the position is invalid the method will return false.
         *
         * If the $position parameter is set to null the value of $this->offset will be used.
         *
         * @param int $length
         * @param int|null $position
         * @return string|false
         */
        public function readBytes($length, $position = null)
        {
        }
        /**
         * Read a line from the current position.
         *
         * @param int $length
         * @return string|bool
         */
        public function readLine($length = 1024)
        {
        }
        /**
         * Set the offset position in the current buffer.
         *
         * @param int $offset
         */
        public function setOffset($offset)
        {
        }
        /**
         * Returns the current offset in the current buffer.
         *
         * @return int
         */
        public function getOffset()
        {
        }
        /**
         * Add an offset to the current offset.
         *
         * @param int $offset
         */
        public function addOffset($offset)
        {
        }
        /**
         * Make sure that there is at least one character beyond the current offset in the buffer.
         *
         * @return bool
         */
        public function ensureContent()
        {
        }
        /**
         * Returns the stream.
         *
         * @return resource
         */
        public function getStream()
        {
        }
        /**
         * Gets the total available length.
         *
         * @return int
         */
        public function getTotalLength()
        {
        }
        /**
         * Resets the buffer to a position and re-read the buffer with the given length.
         *
         * If the $pos parameter is negative the start buffer position will be the $pos'th position from
         * the end of the file.
         *
         * If the $pos parameter is negative and the absolute value is bigger then the totalLength of
         * the file $pos will set to zero.
         *
         * @param int|null $pos Start position of the new buffer
         * @param int $length Length of the new buffer. Mustn't be negative
         */
        public function reset($pos = 0, $length = 200)
        {
        }
        /**
         * Ensures bytes in the buffer with a specific length and location in the file.
         *
         * @param int $pos
         * @param int $length
         * @see reset()
         */
        public function ensure($pos, $length)
        {
        }
        /**
         * Forcefully read more data into the buffer.
         *
         * @param int $minLength
         * @return bool Returns false if the stream reaches the end
         */
        public function increaseLength($minLength = 100)
        {
        }
    }
    /**
     * Exception for the pdf parser class
     */
    class PdfParserException extends \setasign\Fpdi\FpdiException
    {
        /**
         * @var int
         */
        const NOT_IMPLEMENTED = 0x1;
        /**
         * @var int
         */
        const IMPLEMENTED_IN_FPDI_PDF_PARSER = 0x2;
        /**
         * @var int
         */
        const INVALID_DATA_TYPE = 0x3;
        /**
         * @var int
         */
        const FILE_HEADER_NOT_FOUND = 0x4;
        /**
         * @var int
         */
        const PDF_VERSION_NOT_FOUND = 0x5;
        /**
         * @var int
         */
        const INVALID_DATA_SIZE = 0x6;
    }
}
namespace setasign\Fpdi\PdfParser\Type {
    /**
     * A class defining a PDF data type
     */
    class PdfType
    {
        /**
         * Resolves a PdfType value to its value.
         *
         * This method is used to evaluate indirect and direct object references until a final value is reached.
         *
         * @param PdfType $value
         * @param PdfParser $parser
         * @param bool $stopAtIndirectObject
         * @return PdfType
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public static function resolve(\setasign\Fpdi\PdfParser\Type\PdfType $value, \setasign\Fpdi\PdfParser\PdfParser $parser, $stopAtIndirectObject = false)
        {
        }
        /**
         * Ensure that a value is an instance of a specific PDF type.
         *
         * @param string $type
         * @param PdfType $value
         * @param string $errorMessage
         * @return mixed
         * @throws PdfTypeException
         */
        protected static function ensureType($type, $value, $errorMessage)
        {
        }
        /**
         * The value of the PDF type.
         *
         * @var mixed
         */
        public $value;
    }
    /**
     * Class representing a PDF null object
     */
    class PdfNull extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        // empty body
    }
    /**
     * Class representing PDF token object
     */
    class PdfToken extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Helper method to create an instance.
         *
         * @param string $token
         * @return self
         */
        public static function create($token)
        {
        }
        /**
         * Ensures that the passed value is a PdfToken instance.
         *
         * @param mixed $token
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($token)
        {
        }
    }
    /**
     * Class representing a PDF name object
     */
    class PdfName extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses a name object from the passed tokenizer and stream-reader.
         *
         * @param Tokenizer $tokenizer
         * @param StreamReader $streamReader
         * @return self
         */
        public static function parse(\setasign\Fpdi\PdfParser\Tokenizer $tokenizer, \setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Unescapes a name string.
         *
         * @param string $value
         * @return string
         */
        public static function unescape($value)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param string $string
         * @return self
         */
        public static function create($string)
        {
        }
        /**
         * Ensures that the passed value is a PdfName instance.
         *
         * @param mixed $name
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($name)
        {
        }
    }
    /**
     * Class representing a numeric PDF object
     */
    class PdfNumeric extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Helper method to create an instance.
         *
         * @param int|float $value
         * @return PdfNumeric
         */
        public static function create($value)
        {
        }
        /**
         * Ensures that the passed value is a PdfNumeric instance.
         *
         * @param mixed $value
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($value)
        {
        }
    }
    /**
     * Class representing a PDF dictionary object
     */
    class PdfDictionary extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses a dictionary of the passed tokenizer, stream-reader and parser.
         *
         * @param Tokenizer $tokenizer
         * @param StreamReader $streamReader
         * @param PdfParser $parser
         * @return bool|self
         * @throws PdfTypeException
         */
        public static function parse(\setasign\Fpdi\PdfParser\Tokenizer $tokenizer, \setasign\Fpdi\PdfParser\StreamReader $streamReader, \setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param PdfType[] $entries The keys are the name entries of the dictionary.
         * @return self
         */
        public static function create(array $entries = [])
        {
        }
        /**
         * Get a value by its key from a dictionary or a default value.
         *
         * @param mixed $dictionary
         * @param string $key
         * @param PdfType|null $default
         * @return PdfNull|PdfType
         * @throws PdfTypeException
         */
        public static function get($dictionary, $key, \setasign\Fpdi\PdfParser\Type\PdfType $default = null)
        {
        }
        /**
         * Ensures that the passed value is a PdfDictionary instance.
         *
         * @param mixed $dictionary
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($dictionary)
        {
        }
    }
    /**
     * Class representing a hexadecimal encoded PDF string object
     */
    class PdfHexString extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses a hexadecimal string object from the stream reader.
         *
         * @param StreamReader $streamReader
         * @return bool|self
         */
        public static function parse(\setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param string $string The hex encoded string.
         * @return self
         */
        public static function create($string)
        {
        }
        /**
         * Ensures that the passed value is a PdfHexString instance.
         *
         * @param mixed $hexString
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($hexString)
        {
        }
    }
    /**
     * Class representing a PDF stream object
     */
    class PdfStream extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses a stream from a stream reader.
         *
         * @param PdfDictionary $dictionary
         * @param StreamReader $reader
         * @param PdfParser $parser Optional to keep backwards compatibility
         * @return self
         * @throws PdfTypeException
         */
        public static function parse(\setasign\Fpdi\PdfParser\Type\PdfDictionary $dictionary, \setasign\Fpdi\PdfParser\StreamReader $reader, \setasign\Fpdi\PdfParser\PdfParser $parser = null)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param PdfDictionary $dictionary
         * @param string $stream
         * @return self
         */
        public static function create(\setasign\Fpdi\PdfParser\Type\PdfDictionary $dictionary, $stream)
        {
        }
        /**
         * Ensures that the passed value is a PdfStream instance.
         *
         * @param mixed $stream
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($stream)
        {
        }
        /**
         * The stream or its byte-offset position.
         *
         * @var int|string
         */
        protected $stream;
        /**
         * The stream reader instance.
         *
         * @var StreamReader|null
         */
        protected $reader;
        /**
         * The PDF parser instance.
         *
         * @var PdfParser
         */
        protected $parser;
        /**
         * Get the stream data.
         *
         * @param bool $cache Whether cache the stream data or not.
         * @return bool|string
         * @throws PdfTypeException
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public function getStream($cache = false)
        {
        }
        /**
         * Extract the stream "manually".
         *
         * @return string
         * @throws PdfTypeException
         */
        protected function extractStream()
        {
        }
        /**
         * Get the unfiltered stream data.
         *
         * @return string
         * @throws FilterException
         * @throws PdfParserException
         */
        public function getUnfilteredStream()
        {
        }
    }
    /**
     * Class representing an indirect object
     */
    class PdfIndirectObject extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses an indirect object from a tokenizer, parser and stream-reader.
         *
         * @param int $objectNumberToken
         * @param int $objectGenerationNumberToken
         * @param PdfParser $parser
         * @param Tokenizer $tokenizer
         * @param StreamReader $reader
         * @return bool|self
         * @throws PdfTypeException
         */
        public static function parse($objectNumberToken, $objectGenerationNumberToken, \setasign\Fpdi\PdfParser\PdfParser $parser, \setasign\Fpdi\PdfParser\Tokenizer $tokenizer, \setasign\Fpdi\PdfParser\StreamReader $reader)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param int $objectNumber
         * @param int $generationNumber
         * @param PdfType $value
         * @return self
         */
        public static function create($objectNumber, $generationNumber, \setasign\Fpdi\PdfParser\Type\PdfType $value)
        {
        }
        /**
         * Ensures that the passed value is a PdfIndirectObject instance.
         *
         * @param mixed $indirectObject
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($indirectObject)
        {
        }
        /**
         * The object number.
         *
         * @var int
         */
        public $objectNumber;
        /**
         * The generation number.
         *
         * @var int
         */
        public $generationNumber;
    }
    /**
     * Exception class for pdf type classes
     */
    class PdfTypeException extends \setasign\Fpdi\PdfParser\PdfParserException
    {
        /**
         * @var int
         */
        const NO_NEWLINE_AFTER_STREAM_KEYWORD = 0x601;
    }
    /**
     * Class representing a boolean PDF object
     */
    class PdfBoolean extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Helper method to create an instance.
         *
         * @param bool $value
         * @return self
         */
        public static function create($value)
        {
        }
        /**
         * Ensures that the passed value is a PdfBoolean instance.
         *
         * @param mixed $value
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($value)
        {
        }
    }
    /**
     * Class representing a PDF string object
     */
    class PdfString extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses a string object from the stream reader.
         *
         * @param StreamReader $streamReader
         * @return self
         */
        public static function parse(\setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param string $value The string needs to be escaped accordingly.
         * @return self
         */
        public static function create($value)
        {
        }
        /**
         * Ensures that the passed value is a PdfString instance.
         *
         * @param mixed $string
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($string)
        {
        }
        /**
         * Unescapes escaped sequences in a PDF string according to the PDF specification.
         *
         * @param string $s
         * @return string
         */
        public static function unescape($s)
        {
        }
    }
    /**
     * Class representing an indirect object reference
     */
    class PdfIndirectObjectReference extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Helper method to create an instance.
         *
         * @param int $objectNumber
         * @param int $generationNumber
         * @return self
         */
        public static function create($objectNumber, $generationNumber)
        {
        }
        /**
         * Ensures that the passed value is a PdfIndirectObject instance.
         *
         * @param mixed $value
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($value)
        {
        }
        /**
         * The generation number.
         *
         * @var int
         */
        public $generationNumber;
    }
    /**
     * Class representing a PDF array object
     *
     * @property array $value The value of the PDF type.
     */
    class PdfArray extends \setasign\Fpdi\PdfParser\Type\PdfType
    {
        /**
         * Parses an array of the passed tokenizer and parser.
         *
         * @param Tokenizer $tokenizer
         * @param PdfParser $parser
         * @return bool|self
         * @throws PdfTypeException
         */
        public static function parse(\setasign\Fpdi\PdfParser\Tokenizer $tokenizer, \setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Helper method to create an instance.
         *
         * @param PdfType[] $values
         * @return self
         */
        public static function create(array $values = [])
        {
        }
        /**
         * Ensures that the passed array is a PdfArray instance with a (optional) specific size.
         *
         * @param mixed $array
         * @param null|int $size
         * @return self
         * @throws PdfTypeException
         */
        public static function ensure($array, $size = null)
        {
        }
    }
}
namespace setasign\Fpdi\PdfParser\Filter {
    /**
     * Exception for filters
     */
    class FilterException extends \setasign\Fpdi\PdfParser\PdfParserException
    {
        const UNSUPPORTED_FILTER = 0x201;
        const NOT_IMPLEMENTED = 0x202;
    }
    /**
     * Exception for flate filter class
     */
    class FlateException extends \setasign\Fpdi\PdfParser\Filter\FilterException
    {
        /**
         * @var integer
         */
        const NO_ZLIB = 0x401;
        /**
         * @var integer
         */
        const DECOMPRESS_ERROR = 0x402;
    }
    /**
     * Exception for Ascii85 filter class
     */
    class Ascii85Exception extends \setasign\Fpdi\PdfParser\Filter\FilterException
    {
        /**
         * @var integer
         */
        const ILLEGAL_CHAR_FOUND = 0x301;
        /**
         * @var integer
         */
        const ILLEGAL_LENGTH = 0x302;
    }
    /**
     * Interface for filters
     */
    interface FilterInterface
    {
        /**
         * Decode a string.
         *
         * @param string $data The input string
         * @return string
         */
        public function decode($data);
    }
    /**
     * Class for handling LZW encoded data
     */
    class Lzw implements \setasign\Fpdi\PdfParser\Filter\FilterInterface
    {
        /**
         * @var null|string
         */
        protected $data;
        /**
         * @var array
         */
        protected $sTable = [];
        /**
         * @var int
         */
        protected $dataLength = 0;
        /**
         * @var int
         */
        protected $tIdx;
        /**
         * @var int
         */
        protected $bitsToGet = 9;
        /**
         * @var int
         */
        protected $bytePointer;
        /**
         * @var int
         */
        protected $nextData = 0;
        /**
         * @var int
         */
        protected $nextBits = 0;
        /**
         * @var array
         */
        protected $andTable = [511, 1023, 2047, 4095];
        /**
         * Method to decode LZW compressed data.
         *
         * @param string $data The compressed data
         * @return string The uncompressed data
         * @throws LzwException
         */
        public function decode($data)
        {
        }
        /**
         * Initialize the string table.
         */
        protected function initsTable()
        {
        }
        /**
         * Add a new string to the string table.
         *
         * @param string $oldString
         * @param string $newString
         */
        protected function addStringToTable($oldString, $newString = '')
        {
        }
        /**
         * Returns the next 9, 10, 11 or 12 bits.
         *
         * @return integer
         */
        protected function getNextCode()
        {
        }
    }
    /**
     * Class for handling ASCII hexadecimal encoded data
     */
    class AsciiHex implements \setasign\Fpdi\PdfParser\Filter\FilterInterface
    {
        /**
         * Converts an ASCII hexadecimal encoded string into its binary representation.
         *
         * @param string $data The input string
         * @return string
         */
        public function decode($data)
        {
        }
        /**
         * Converts a string into ASCII hexadecimal representation.
         *
         * @param string $data The input string
         * @param boolean $leaveEOD
         * @return string
         */
        public function encode($data, $leaveEOD = false)
        {
        }
    }
    /**
     * Class for handling zlib/deflate encoded data
     */
    class Flate implements \setasign\Fpdi\PdfParser\Filter\FilterInterface
    {
        /**
         * Checks whether the zlib extension is loaded.
         *
         * Used for testing purpose.
         *
         * @return boolean
         * @internal
         */
        protected function extensionLoaded()
        {
        }
        /**
         * Decodes a flate compressed string.
         *
         * @param string|false $data The input string
         * @return string
         * @throws FlateException
         */
        public function decode($data)
        {
        }
    }
    /**
     * Exception for LZW filter class
     */
    class LzwException extends \setasign\Fpdi\PdfParser\Filter\FilterException
    {
        /**
         * @var integer
         */
        const LZW_FLAVOUR_NOT_SUPPORTED = 0x501;
    }
    /**
     * Class for handling ASCII base-85 encoded data
     */
    class Ascii85 implements \setasign\Fpdi\PdfParser\Filter\FilterInterface
    {
        /**
         * Decode ASCII85 encoded string.
         *
         * @param string $data The input string
         * @return string
         * @throws Ascii85Exception
         */
        public function decode($data)
        {
        }
    }
}
namespace setasign\Fpdi\PdfParser\CrossReference {
    /**
     * ReaderInterface for cross-reference readers.
     */
    interface ReaderInterface
    {
        /**
         * Get an offset by an object number.
         *
         * @param int $objectNumber
         * @return int|bool False if the offset was not found.
         */
        public function getOffsetFor($objectNumber);
        /**
         * Get the trailer related to this cross reference.
         *
         * @return PdfDictionary
         */
        public function getTrailer();
    }
    /**
     * Abstract class for cross-reference reader classes.
     */
    abstract class AbstractReader
    {
        /**
         * @var PdfParser
         */
        protected $parser;
        /**
         * @var PdfDictionary
         */
        protected $trailer;
        /**
         * AbstractReader constructor.
         *
         * @param PdfParser $parser
         * @throws CrossReferenceException
         * @throws PdfTypeException
         */
        public function __construct(\setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Get the trailer dictionary.
         *
         * @return PdfDictionary
         */
        public function getTrailer()
        {
        }
        /**
         * Read the trailer dictionary.
         *
         * @throws CrossReferenceException
         * @throws PdfTypeException
         */
        protected function readTrailer()
        {
        }
    }
    /**
     * Class FixedReader
     *
     * This reader allows a very less overhead parsing of single entries of the cross-reference, because the main entries
     * are only read when needed and not in a single run.
     */
    class FixedReader extends \setasign\Fpdi\PdfParser\CrossReference\AbstractReader implements \setasign\Fpdi\PdfParser\CrossReference\ReaderInterface
    {
        /**
         * @var StreamReader
         */
        protected $reader;
        /**
         * Data of subsections.
         *
         * @var array
         */
        protected $subSections;
        /**
         * FixedReader constructor.
         *
         * @param PdfParser $parser
         * @throws CrossReferenceException
         */
        public function __construct(\setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * Get all subsection data.
         *
         * @return array
         */
        public function getSubSections()
        {
        }
        /**
         * @inheritdoc
         */
        public function getOffsetFor($objectNumber)
        {
        }
        /**
         * Read the cross-reference.
         *
         * This reader will only read the subsections in this method. The offsets were resolved individually by this
         * information.
         *
         * @throws CrossReferenceException
         */
        protected function read()
        {
        }
        /**
         * Fixes an invalid object number shift.
         *
         * This method can be used to repair documents with an invalid subsection header:
         *
         * <code>
         * xref
         * 1 7
         * 0000000000 65535 f
         * 0000000009 00000 n
         * 0000412075 00000 n
         * 0000412172 00000 n
         * 0000412359 00000 n
         * 0000412417 00000 n
         * 0000412468 00000 n
         * </code>
         *
         * It shall only be called on the first table.
         *
         * @return bool
         */
        public function fixFaultySubSectionShift()
        {
        }
    }
    /**
     * Exception used by the CrossReference and Reader classes.
     */
    class CrossReferenceException extends \setasign\Fpdi\PdfParser\PdfParserException
    {
        /**
         * @var int
         */
        const INVALID_DATA = 0x101;
        /**
         * @var int
         */
        const XREF_MISSING = 0x102;
        /**
         * @var int
         */
        const ENTRIES_TOO_LARGE = 0x103;
        /**
         * @var int
         */
        const ENTRIES_TOO_SHORT = 0x104;
        /**
         * @var int
         */
        const NO_ENTRIES = 0x105;
        /**
         * @var int
         */
        const NO_TRAILER_FOUND = 0x106;
        /**
         * @var int
         */
        const NO_STARTXREF_FOUND = 0x107;
        /**
         * @var int
         */
        const NO_XREF_FOUND = 0x108;
        /**
         * @var int
         */
        const UNEXPECTED_END = 0x109;
        /**
         * @var int
         */
        const OBJECT_NOT_FOUND = 0x10a;
        /**
         * @var int
         */
        const COMPRESSED_XREF = 0x10b;
        /**
         * @var int
         */
        const ENCRYPTED = 0x10c;
    }
    /**
     * Class CrossReference
     *
     * This class processes the standard cross reference of a PDF document.
     */
    class CrossReference
    {
        /**
         * The byte length in which the "startxref" keyword should be searched.
         *
         * @var int
         */
        public static $trailerSearchLength = 5500;
        /**
         * @var int
         */
        protected $fileHeaderOffset = 0;
        /**
         * @var PdfParser
         */
        protected $parser;
        /**
         * @var ReaderInterface[]
         */
        protected $readers = [];
        /**
         * CrossReference constructor.
         *
         * @param PdfParser $parser
         * @throws CrossReferenceException
         * @throws PdfTypeException
         */
        public function __construct(\setasign\Fpdi\PdfParser\PdfParser $parser, $fileHeaderOffset = 0)
        {
        }
        /**
         * Get the size of the cross reference.
         *
         * @return integer
         */
        public function getSize()
        {
        }
        /**
         * Get the trailer dictionary.
         *
         * @return PdfDictionary
         */
        public function getTrailer()
        {
        }
        /**
         * Get the cross reference readser instances.
         *
         * @return ReaderInterface[]
         */
        public function getReaders()
        {
        }
        /**
         * Get the offset by an object number.
         *
         * @param int $objectNumber
         * @return integer|bool
         */
        public function getOffsetFor($objectNumber)
        {
        }
        /**
         * Get an indirect object by its object number.
         *
         * @param int $objectNumber
         * @return PdfIndirectObject
         * @throws CrossReferenceException
         */
        public function getIndirectObject($objectNumber)
        {
        }
        /**
         * Read the cross-reference table at a given offset.
         *
         * Internally the method will try to evaluate the best reader for this cross-reference.
         *
         * @param int $offset
         * @return ReaderInterface
         * @throws CrossReferenceException
         * @throws PdfTypeException
         */
        protected function readXref($offset)
        {
        }
        /**
         * Get a cross-reference reader instance.
         *
         * @param PdfToken|PdfIndirectObject $initValue
         * @return ReaderInterface|bool
         * @throws CrossReferenceException
         * @throws PdfTypeException
         */
        protected function initReaderInstance($initValue)
        {
        }
        /**
         * Check for encryption.
         *
         * @param PdfDictionary $dictionary
         * @throws CrossReferenceException
         */
        protected function checkForEncryption(\setasign\Fpdi\PdfParser\Type\PdfDictionary $dictionary)
        {
        }
        /**
         * Find the start position for the first cross-reference.
         *
         * @return int The byte-offset position of the first cross-reference.
         * @throws CrossReferenceException
         */
        protected function findStartXref()
        {
        }
    }
    /**
     * Class LineReader
     *
     * This reader class read all cross-reference entries in a single run.
     * It supports reading cross-references with e.g. invalid data (e.g. entries with a length < or > 20 bytes).
     */
    class LineReader extends \setasign\Fpdi\PdfParser\CrossReference\AbstractReader implements \setasign\Fpdi\PdfParser\CrossReference\ReaderInterface
    {
        /**
         * The object offsets.
         *
         * @var array
         */
        protected $offsets;
        /**
         * LineReader constructor.
         *
         * @param PdfParser $parser
         * @throws CrossReferenceException
         */
        public function __construct(\setasign\Fpdi\PdfParser\PdfParser $parser)
        {
        }
        /**
         * @inheritdoc
         */
        public function getOffsetFor($objectNumber)
        {
        }
        /**
         * Get all found offsets.
         *
         * @return array
         */
        public function getOffsets()
        {
        }
        /**
         * Extracts the cross reference data from the stream reader.
         *
         * @param StreamReader $reader
         * @return string
         * @throws CrossReferenceException
         */
        protected function extract(\setasign\Fpdi\PdfParser\StreamReader $reader)
        {
        }
        /**
         * Read the cross-reference entries.
         *
         * @param string $xrefContent
         * @throws CrossReferenceException
         */
        protected function read($xrefContent)
        {
        }
    }
}
namespace setasign\Fpdi\PdfParser {
    /**
     * A PDF parser class
     */
    class PdfParser
    {
        /**
         * @var StreamReader
         */
        protected $streamReader;
        /**
         * @var Tokenizer
         */
        protected $tokenizer;
        /**
         * The file header.
         *
         * @var string
         */
        protected $fileHeader;
        /**
         * The offset to the file header.
         *
         * @var int
         */
        protected $fileHeaderOffset;
        /**
         * @var CrossReference|null
         */
        protected $xref;
        /**
         * All read objects.
         *
         * @var array
         */
        protected $objects = [];
        /**
         * PdfParser constructor.
         *
         * @param StreamReader $streamReader
         */
        public function __construct(\setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Removes cycled references.
         *
         * @internal
         */
        public function cleanUp()
        {
        }
        /**
         * Get the stream reader instance.
         *
         * @return StreamReader
         */
        public function getStreamReader()
        {
        }
        /**
         * Get the tokenizer instance.
         *
         * @return Tokenizer
         */
        public function getTokenizer()
        {
        }
        /**
         * Resolves the file header.
         *
         * @throws PdfParserException
         * @return int
         */
        protected function resolveFileHeader()
        {
        }
        /**
         * Get the cross reference instance.
         *
         * @return CrossReference
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public function getCrossReference()
        {
        }
        /**
         * Get the PDF version.
         *
         * @return int[] An array of major and minor version.
         * @throws PdfParserException
         */
        public function getPdfVersion()
        {
        }
        /**
         * Get the catalog dictionary.
         *
         * @return PdfDictionary
         * @throws Type\PdfTypeException
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public function getCatalog()
        {
        }
        /**
         * Get an indirect object by its object number.
         *
         * @param int $objectNumber
         * @param bool $cache
         * @return PdfIndirectObject
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        public function getIndirectObject($objectNumber, $cache = false)
        {
        }
        /**
         * Read a PDF value.
         *
         * @param null|bool|string $token
         * @param null|string $expectedType
         * @return false|PdfArray|PdfBoolean|PdfDictionary|PdfHexString|PdfIndirectObject|PdfIndirectObjectReference|PdfName|PdfNull|PdfNumeric|PdfStream|PdfString|PdfToken
         * @throws Type\PdfTypeException
         */
        public function readValue($token = null, $expectedType = null)
        {
        }
    }
    /**
     * A tokenizer class.
     */
    class Tokenizer
    {
        /**
         * @var StreamReader
         */
        protected $streamReader;
        /**
         * A token stack.
         *
         * @var string[]
         */
        protected $stack = [];
        /**
         * Tokenizer constructor.
         *
         * @param StreamReader $streamReader
         */
        public function __construct(\setasign\Fpdi\PdfParser\StreamReader $streamReader)
        {
        }
        /**
         * Get the stream reader instance.
         *
         * @return StreamReader
         */
        public function getStreamReader()
        {
        }
        /**
         * Clear the token stack.
         */
        public function clearStack()
        {
        }
        /**
         * Push a token onto the stack.
         *
         * @param string $token
         */
        public function pushStack($token)
        {
        }
        /**
         * Get next token.
         *
         * @return bool|string
         */
        public function getNextToken()
        {
        }
        /**
         * Leap white spaces.
         *
         * @return boolean
         */
        public function leapWhiteSpaces()
        {
        }
    }
}
namespace setasign\Fpdi {
    /**
     * Class Fpdi
     *
     * This class let you import pages of existing PDF documents into a reusable structure for FPDF.
     */
    class Fpdi extends \setasign\Fpdi\FpdfTpl
    {
        use \setasign\Fpdi\FpdiTrait;
        /**
         * FPDI version
         *
         * @string
         */
        const VERSION = '2.3.4';
        protected function _enddoc()
        {
        }
        /**
         * Draws an imported page or a template onto the page or another template.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param float|int|array $x The abscissa of upper-left corner. Alternatively you could use an assoc array
         *                           with the keys "x", "y", "width", "height", "adjustPageSize".
         * @param float|int $y The ordinate of upper-left corner.
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @param bool $adjustPageSize
         * @return array The size
         * @see Fpdi::getTemplateSize()
         */
        public function useTemplate($tpl, $x = 0, $y = 0, $width = null, $height = null, $adjustPageSize = false)
        {
        }
        /**
         * Get the size of an imported page or template.
         *
         * Give only one of the size parameters (width, height) to calculate the other one automatically in view to the
         * aspect ratio.
         *
         * @param mixed $tpl The template id
         * @param float|int|null $width The width.
         * @param float|int|null $height The height.
         * @return array|bool An array with following keys: width, height, 0 (=width), 1 (=height), orientation (L or P)
         */
        public function getTemplateSize($tpl, $width = null, $height = null)
        {
        }
        /**
         * @inheritdoc
         * @throws CrossReferenceException
         * @throws PdfParserException
         */
        protected function _putimages()
        {
        }
        /**
         * @inheritdoc
         */
        protected function _putxobjectdict()
        {
        }
        /**
         * @inheritdoc
         */
        protected function _put($s, $newLine = true)
        {
        }
    }
}
namespace {
    # OO wrapper for 'php-iban.php'
    class IBAN
    {
        function __construct($iban = '')
        {
        }
        public function Verify($iban = '', $machine_format_only = \false)
        {
        }
        public function VerifyMachineFormatOnly($iban = '')
        {
        }
        public function MistranscriptionSuggestions()
        {
        }
        public function MachineFormat()
        {
        }
        public function HumanFormat()
        {
        }
        public function Country($iban = '')
        {
        }
        public function Checksum($iban = '')
        {
        }
        public function NationalChecksum($iban = '')
        {
        }
        public function BBAN()
        {
        }
        public function VerifyChecksum()
        {
        }
        public function FindChecksum()
        {
        }
        public function SetChecksum()
        {
        }
        public function ChecksumStringReplace()
        {
        }
        public function FindNationalChecksum()
        {
        }
        public function SetNationalChecksum()
        {
        }
        public function VerifyNationalChecksum()
        {
        }
        public function Parts()
        {
        }
        public function Bank()
        {
        }
        public function Branch()
        {
        }
        public function Account()
        {
        }
        public function Countries()
        {
        }
    }
    # IBANCountry
    class IBANCountry
    {
        # constructor with code
        function __construct($code = '')
        {
        }
        public function Code()
        {
        }
        public function Name()
        {
        }
        public function DomesticExample()
        {
        }
        public function BBANExample()
        {
        }
        public function BBANFormatSWIFT()
        {
        }
        public function BBANFormatRegex()
        {
        }
        public function BBANLength()
        {
        }
        public function IBANExample()
        {
        }
        public function IBANFormatSWIFT()
        {
        }
        public function IBANFormatRegex()
        {
        }
        public function IBANLength()
        {
        }
        public function BankIDStartOffset()
        {
        }
        public function BankIDStopOffset()
        {
        }
        public function BranchIDStartOffset()
        {
        }
        public function BranchIDStopOffset()
        {
        }
        public function NationalChecksumStartOffset()
        {
        }
        public function NationalChecksumStopOffset()
        {
        }
        public function RegistryEdition()
        {
        }
        public function SWIFTOfficial()
        {
        }
        public function IsSEPA()
        {
        }
        public function IANA()
        {
        }
        public function ISO3166()
        {
        }
        public function ParentRegistrar()
        {
        }
        public function CurrencyISO4217()
        {
        }
        public function CentralBankURL()
        {
        }
        public function CentralBankName()
        {
        }
    }
}
namespace AbcAeffchen\SepaUtilities {
    /**
     * Useful methods to validate an sanitize input used in SEPA files
     */
    class SepaUtilities
    {
        // credit transfers version
        const SEPA_PAIN_001_002_03 = 100203;
        const SEPA_PAIN_001_003_03 = 100303;
        const SEPA_PAIN_001_001_03 = 100103;
        const SEPA_PAIN_001_001_03_GBIC = 1001031;
        // direct debit versions
        const SEPA_PAIN_008_002_02 = 800202;
        const SEPA_PAIN_008_003_02 = 800302;
        const SEPA_PAIN_008_001_02 = 800102;
        const SEPA_PAIN_008_001_02_GBIC = 8001021;
        const SEPA_PAIN_008_001_02_AUSTRIAN_003 = 8001022;
        const HTML_PATTERN_IBAN = '([a-zA-Z]\\s*){2}([0-9]\\s?){2}\\s*([a-zA-Z0-9]\\s*){1,30}';
        const HTML_PATTERN_BIC = '([a-zA-Z]\\s*){6}[a-zA-Z2-9]\\s*[a-nA-Np-zP-Z0-9]\\s*(([A-Z0-9]\\s*){3}){0,1}';
        const PATTERN_IBAN = '[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}';
        const PATTERN_BIC = '[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3}){0,1}';
        /**
         * equates to RestrictedPersonIdentifierSEPA
         */
        const PATTERN_CREDITOR_IDENTIFIER = '[a-zA-Z]{2,2}[0-9]{2,2}([A-Za-z0-9]|[\\+|\\?|/|\\-|:|\\(|\\)|\\.|,|\']){3,3}([A-Za-z0-9]|[\\+|\\?|/|\\-|:|\\(|\\)|\\.|,|\']){1,28}';
        /**
         * used for Names, etc.
         */
        const PATTERN_SHORT_TEXT = '[a-zA-Z0-9/\\-?:().,\'+\\s]{0,70}';
        /**
         * used for remittance information
         */
        const PATTERN_LONG_TEXT = '[a-zA-Z0-9/\\-?:().,\'+\\s]{0,140}';
        /**
         * Used for Message-, Payment- and Transfer-IDs (since 2016 also for Mandate-ID)
         */
        const PATTERN_RESTRICTED_IDENTIFICATION_SEPA1 = '([A-Za-z0-9]|[\\+|\\?|/|\\-|:|\\(|\\)|\\.|,|\'|\\s]){1,35}';
        /**
         * Used for Mandate-ID
         */
        const PATTERN_RESTRICTED_IDENTIFICATION_SEPA2 = '([A-Za-z0-9]|[\\+|\\?|/|\\-|:|\\(|\\)|\\.|,|\']){1,35}';
        /**
         * This is just for compatibility to v1.1.*
         */
        const PATTERN_MANDATE_ID = self::PATTERN_RESTRICTED_IDENTIFICATION_SEPA2;
        const FLAG_ALT_REPLACEMENT_GERMAN = 1;
        // 1 << 0
        const FLAG_NO_REPLACEMENT_GERMAN = 32768;
        // 1 << 15
        /**
         * first direct debit
         */
        const SEQUENCE_TYPE_FIRST = 'FRST';
        /**
         * recurring direct debit
         */
        const SEQUENCE_TYPE_RECURRING = 'RCUR';
        /**
         * one time direct debit
         */
        const SEQUENCE_TYPE_ONCE = 'OOFF';
        /**
         * final direct debit
         */
        const SEQUENCE_TYPE_FINAL = 'FNAL';
        /**
         * normal direct debit
         */
        const LOCAL_INSTRUMENT_CORE_DIRECT_DEBIT = 'CORE';
        /**
         * urgent direct debit
         */
        const LOCAL_INSTRUMENT_CORE_DIRECT_DEBIT_D_1 = 'COR1';
        /**
         * business direct debit
         */
        const LOCAL_INSTRUMENT_BUSINESS_2_BUSINESS = 'B2B';
        /**
         * @type int BIC_REQUIRED_THRESHOLD Until 2016-01-31 (incl.) the BIC is required for international
         *           payment transactions
         */
        const BIC_REQUIRED_THRESHOLD = 20160131;
        /**
         * Valid maximal text length
         */
        const TEXT_LENGTH_VERY_SHORT = 35;
        const TEXT_LENGTH_SHORT = 70;
        const TEXT_LENGTH_LONG = 140;
        /*
         * Checks if an creditor identifier (ci) is valid. Note that also if the ci is valid it does
         * not have to exist
         *
         * @param string $ci
         * @return string|false The valid iban or false if it is not valid
         */
        public static function checkCreditorIdentifier($ci)
        {
        }
        /**
        * Checks if an iban is valid. Note that also if the iban is valid it does not have to exist
        *
        *@param string $iban
        * @param array  $options valid keys:
        *                        - checkByCheckSum (boolean): If true, the IBAN checksum is
        *                        calculated (default:true)
        *                        - checkByFormat (boolean): If true, the format is checked by
        *                        regular expression (default: true)
        * @return string|false The valid iban or false if it is not valid
        */
        public static function checkIBAN($iban, $options = null)
        {
        }
        /**
         * Checks if a bic is valid. Note that also if the bic is valid it does not have to exist
         *
         * @param string $bic
         * @param array  $options Takes the following keys:
         *                        - `allowEmptyBic`: (bool) The BIC can be empty.
         *                        - `forceLongBic`: (bool) If the BIC has exact 8 characters, `forceLongBicStr`
         *                        is added. (default false)
         *                        - `forceLongBicStr`: string (default 'XXX')
         * @return string|false the valid bic or false if it is not valid
         */
        public static function checkBIC($bic, array $options = null)
        {
        }
        /**
         * Checks if both IBANs do belong to the same country.
         * This function does not check if the IBANs are valid.
         *
         * @param string $iban1
         * @param string $iban2
         * @return bool
         */
        public static function isNationalTransaction($iban1, $iban2)
        {
        }
        /**
         * Checks if both IBANs belong to the EEA (European Economic Area)
         * This function does not check if the IBANs are valid.
         *
         * @param string $iban1
         * @param string $iban2
         * @return bool
         */
        public static function isEEATransaction($iban1, $iban2)
        {
        }
        /**
         * Checks if IBAN and BIC belong to the same country. If not, they also can not belong to
         * each other.
         *
         * @param string $iban
         * @param string $bic
         * @return bool
         */
        public static function crossCheckIbanBic($iban, $bic)
        {
        }
        /**
         * Tries to convert the given date into the format YYYY-MM-DD (Y-m-d). Therefor it tries the
         * following input formats in the order of appearance: d.m.Y, d.m.y, j.n.Y, j.n.y, m.d.Y,
         * m.d.y, n.j.Y, n.j.y, Y/m/d, y/m/d, Y/n/j, y/n/j, Y.m.d, y.m.d, Y.n.j, y.n.j.
         * Notice that this method tries to interpret the first number as day-of-month. This can
         * lead to wrong dates if you have something like the 1st of April 2016 written as 04.01.2016.
         * This will be interpreted as the 4th of January 2016. This is why you have to call this
         * method on your owen risk and it is not included in the sanitize() method.
         *
         * @param string $input The date that should be reformatted
         * @param array  $preferredFormats An array of formats that will be checked first.
         * @return string|false The sanitized date or false, if it is not sanitizable.
         */
        public static function sanitizeDateFormat($input, array $preferredFormats = [])
        {
        }
        /**
         * Checks if the input has the format 'Y-m-d\TH:i:s'
         * @param string $input
         * @return string|false Returns $input if it is valid and false else.
         */
        public static function checkCreateDateTime($input)
        {
        }
        /**
         * Reformat a date string from a given format to the ISODate format. Notice: 20.13.2014 is
         * valid and becomes 2015-01-20.
         *
         * @param string $date A date string of the given input format
         * @param string $inputFormat default is the german format DD.MM.YYYY
         * @return string|false date as YYYY-MM-DD or false, if the input is not a date.
         */
        public static function getDate($date = null, $inputFormat = 'd.m.Y')
        {
        }
        /**
         * Computes the next TARGET2 day (including today) with respect to a TARGET2 offset.
         *
         * @param int    $workdayOffset a positive number of workdays to skip.
         * @param string $today         if set, this date is used as today
         * @param string $inputFormat
         * @return string|false YYYY-MM-DD
         */
        public static function getDateWithOffset($workdayOffset, $today = null, $inputFormat = 'd.m.Y')
        {
        }
        /**
         * Returns the target date, if it has at least the given offset of TARGET2 days form today. Else
         * the earliest date that respects the offset is returned.
         *
         * @param string $target
         * @param int    $workdayMinOffset
         * @param string $inputFormat
         * @param string $today
         * @return string
         */
        public static function getDateWithMinOffsetFromToday($target, $workdayMinOffset, $inputFormat = 'd.m.Y', $today = null)
        {
        }
        /**
         * Checks if the input holds for the field.
         *
         * @param string $field   Valid fields are: 'orgnlcdtrschmeid_id','ci','msgid','pmtid','pmtinfid',
         *                        'orgnlmndtid','mndtid','initgpty','cdtr','dbtr','orgnlcdtrschmeid_nm',
         *                        'ultmtcdrt','ultmtdebtr','rmtinf','orgnldbtracct_iban','iban','bic',
         *                        'ccy','amendment', 'btchbookg','instdamt','seqtp','lclinstrm',
         *                        'elctrncsgntr','reqdexctndt','purp','ctgypurp','orgnldbtragt'
         * @param mixed  $input
         * @param array  $options See `checkBIC()`, `checkIBAN()` and `checkLocalInstrument()` for details.
         * @param int    $version Can be used to specify one of the `SEPA_PAIN_*` constants.
         * @return false|mixed The checked input or false, if it is not valid
         */
        public static function check($field, $input, array $options = null, $version = null)
        {
        }
        /**
         * This function checks if the index of the inputArray exists and if the input is valid. The
         * function can be called as `checkInput($fieldName,$_POST,['input',$fieldName],$options)`
         * and equals `check($fieldName,$_POST['input'][$fieldName],$options)`, but checks first, if
         * the index exists.
         * @param string $field     see `check()` for valid values.
         * @param array $inputArray
         * @param string|int|mixed[] $inputKeys
         * @param array $options    see `check()` for valid values.
         * @return mixed|false
         */
        public static function checkInput($field, array &$inputArray, $inputKeys, array $options = null)
        {
        }
        /**
         * This function checks if the index of the inputArray exists and if the input is valid. The
         * function can be called as `sanitizeInput($fieldName,$_POST,['input',$fieldName],$flags)`
         * and equals `sanitize($fieldName,$_POST['input'][$fieldName],$flags)`, but checks first, if
         * the index exists.
         * @param string $field     see `sanitize()` for valid values.
         * @param array $inputArray
         * @param string|int|mixed[] $inputKeys
         * @param int   $flags    see `sanitize()` for valid values.
         * @return mixed|false
         */
        public static function sanitizeInput($field, array &$inputArray, $inputKeys, $flags = 0)
        {
        }
        /**
         * Checks the input and if it is not valid it tries to sanitize it.
         *
         * @param string $field all fields check and/or sanitize supports
         * @param mixed  $input
         * @param int    $flags   see `sanitize()` for details
         * @param array  $options see `check()` for details
         * @return mixed|false
         */
        public static function checkAndSanitize($field, $input, $flags = 0, array $options = null)
        {
        }
        /**
         * This function checks if the index of the inputArray exists and if the input is valid. The
         * function can be called as `checkAndSanitizeInput($fieldName,$_POST,['input',$fieldName],$flags,$options)`
         * and equals `checkAndSanitize($fieldName,$_POST['input'][$fieldName],$flags,$options)`, but checks first, if
         * the index exists.
         *
         * @param string             $field   see `checkAndSanitize()` for valid values.
         * @param array              $inputArray
         * @param string|int|mixed[] $inputKeys
         * @param int                $flags   see `checkAndSanitize()` for valid values.
         * @param array              $options see `checkAndSanitize()` for valid values.
         * @return false|mixed
         */
        public static function checkAndSanitizeInput($field, array &$inputArray, $inputKeys, $flags = 0, array $options = null)
        {
        }
        /**
         * @param array $inputs A reference to an input array (field => value)
         * @param int   $flags  Flags for sanitizing
         * @param array $options Options for checking
         * @return true|string returns true, if everything is ok or could be sanitized. Otherwise a
         *                     string with fields, that could not be sanitized is returned.
         */
        public static function checkAndSanitizeAll(array &$inputs, $flags = 0, array $options = null)
        {
        }
        public static function sanitizeText($length, $input, $allowEmpty = false, $flags = 0)
        {
        }
        /**
         * @deprecated
         * @param      $input
         * @param bool $allowEmpty
         * @param int  $flags
         * @return bool|string
         */
        public static function sanitizeShortText($input, $allowEmpty = false, $flags = 0)
        {
        }
        /**
         * @deprecated1111
         * @param      $input
         * @param bool $allowEmpty
         * @param int  $flags
         * @return bool|string
         */
        public static function sanitizeLongText($input, $allowEmpty = false, $flags = 0)
        {
        }
        /**
         * Tries to sanitize the the input so it fits in the field.
         *
         * @param string $field Valid fields are: 'ultmtcdrt', 'ultmtdebtr',
         *                      'orgnlcdtrschmeid_nm', 'initgpty', 'cdtr', 'dbtr', 'rmtinf'
         * @param mixed  $input
         * @param int    $flags Flags used in replaceSpecialChars()
         * @return mixed|false The sanitized input or false if the input is not sanitizeable or
         *                      invalid also after sanitizing.
         */
        public static function sanitize($field, $input, $flags = 0)
        {
        }
        public static function checkRequiredCollectionKeys(array $inputs, $version)
        {
        }
        public static function checkRequiredPaymentKeys(array $inputs, $version)
        {
        }
        /**
         * Checks if $arr misses one of the given $keys
         * @param array $arr
         * @param array $keys
         * @return bool false, if at least one key is missing, else true
         */
        public static function containsAllKeys(array $arr, array $keys)
        {
        }
        /**
         * Checks if $arr not contains any key of $keys
         * @param array $arr
         * @param array $keys
         * @return bool true, if $arr contains not even on the the keys, else false
         */
        public static function containsNotAnyKey(array $arr, array $keys)
        {
        }
        /**
         * Shortens the input string to the max length if it is to long.
         * @param string $input
         * @param int $maxLen
         * @return string sanitized string
         */
        public static function sanitizeLength($input, $maxLen)
        {
        }
        /**
         * Replaces all special chars like á, ä, â, à, å, ã, æ, Ç, Ø, Š, ", ’ and & by a latin character.
         * All special characters that cannot be replaced by a latin char (such like quotes) will
         * be removed as long as they cannot be converted. See http://www.europeanpaymentscouncil.eu/index.cfm/knowledge-bank/epc-documents/sepa-requirements-for-an-extended-character-set-unicode-subset-best-practices/
         * for more information about converting characters.
         *
         * @param string $str
         * @param int    $flags Use the SepaUtilities::FLAG_ALT_REPLACEMENT_* and SepaUtilities::FLAG_NO_REPLACEMENT_*
         *                      constants. FLAG_ALT_REPLACEMENT_* will ignore the best practice replacement
         *                      and use a more common one. You can use more than one flag by using
         *                      the | (bitwise or) operator. FLAG_NO_REPLACEMENT_* tells the function
         *                      not to replace the character group.
         * @return string
         */
        public static function replaceSpecialChars($str, $flags = 0)
        {
        }
        /**
         * Returns the SEPA file version as a string.
         * @param int $version Use the SEPA_PAIN_* constants.
         * @return string|false SEPA file version as a string or false if the version is invalid.
         */
        public static function version2string($version)
        {
        }
    }
}
namespace {
    class SepaUtilitiesTest extends \PHPUnit\Framework\TestCase
    {
        public function testCheckCreditorIdentifier()
        {
        }
        public function testCheckIBAN()
        {
        }
        public function testCheckBIC()
        {
        }
        public function testFormatDate()
        {
        }
        public function testCheck()
        {
        }
        public function testContainsNotAllKeys()
        {
        }
        public function testContainsNotAnyKey()
        {
        }
        public function testReplaceSpecialChars()
        {
        }
        public function testGetDateWithOffset()
        {
        }
        public function testGetDateWithMinOffsetFromToday()
        {
        }
        public function testCheckCcy()
        {
        }
        public function testCheckRequiredCollectionKeys()
        {
        }
        public function testCheckRequiredPaymentKeys()
        {
        }
        public function testCheckAndSanitizeAll()
        {
        }
        public function testCheckMandtId()
        {
        }
        public function testCheckCreateDateTime()
        {
        }
        public function testCheckDateFormat()
        {
        }
        public function testCrossIbanBicCheck()
        {
        }
        public function testCheckAmountFormat()
        {
        }
        public function testIsNationalTransaction()
        {
        }
        public function testIsEEATransaction()
        {
        }
        public function testSanitizeLength()
        {
        }
        public function testCheckSeqTp()
        {
        }
        public function testEsterDate()
        {
        }
        public function testVersion2string()
        {
        }
    }
    /*******************************************************************************
    * Class to parse and subset TrueType fonts                                     *
    *                                                                              *
    * Version: 1.11                                                                *
    * Date:    2021-04-18                                                          *
    * Author:  Olivier PLATHEY                                                     *
    *******************************************************************************/
    class TTFParser
    {
        protected $f;
        protected $tables;
        protected $numberOfHMetrics;
        protected $numGlyphs;
        protected $glyphNames;
        protected $indexToLocFormat;
        protected $subsettedChars;
        protected $subsettedGlyphs;
        public $chars;
        public $glyphs;
        public $unitsPerEm;
        public $xMin, $yMin, $xMax, $yMax;
        public $postScriptName;
        public $embeddable;
        public $bold;
        public $typoAscender;
        public $typoDescender;
        public $capHeight;
        public $italicAngle;
        public $underlinePosition;
        public $underlineThickness;
        public $isFixedPitch;
        function __construct($file)
        {
        }
        function __destruct()
        {
        }
        function Parse()
        {
        }
        function ParseOffsetTable()
        {
        }
        function ParseHead()
        {
        }
        function ParseHhea()
        {
        }
        function ParseMaxp()
        {
        }
        function ParseHmtx()
        {
        }
        function ParseLoca()
        {
        }
        function ParseGlyf()
        {
        }
        function ParseCmap()
        {
        }
        function ParseName()
        {
        }
        function ParseOS2()
        {
        }
        function ParsePost()
        {
        }
        function Subset($chars)
        {
        }
        function AddGlyph($id)
        {
        }
        function Build()
        {
        }
        function BuildCmap()
        {
        }
        function BuildHhea()
        {
        }
        function BuildHmtx()
        {
        }
        function BuildLoca()
        {
        }
        function BuildGlyf()
        {
        }
        function BuildMaxp()
        {
        }
        function BuildPost()
        {
        }
        function BuildFont()
        {
        }
        function LoadTable($tag)
        {
        }
        function SetTable($tag, $data)
        {
        }
        function Seek($tag)
        {
        }
        function Skip($n)
        {
        }
        function Read($n)
        {
        }
        function ReadUShort()
        {
        }
        function ReadShort()
        {
        }
        function ReadULong()
        {
        }
        function CheckSum($s)
        {
        }
        function Error($msg)
        {
        }
    }
    // autoload_real.php @generated by Composer
    class ComposerAutoloaderInit8804f0adb55a0f029742adffe2efbc36
    {
        public static function loadClassLoader($class)
        {
        }
        /**
         * @return \Composer\Autoload\ClassLoader
         */
        public static function getLoader()
        {
        }
    }
}
namespace Composer\Autoload {
    class ComposerStaticInit8804f0adb55a0f029742adffe2efbc36
    {
        public static $prefixLengthsPsr4 = array('c' => array('chillerlan\\Settings\\' => 20, 'chillerlan\\QRCode\\' => 18));
        public static $prefixDirsPsr4 = array('chillerlan\\Settings\\' => array(0 => __DIR__ . '/..' . '/chillerlan/php-settings-container/src'), 'chillerlan\\QRCode\\' => array(0 => __DIR__ . '/..' . '/chillerlan/php-qrcode/src'));
        public static $classMap = array('Composer\\InstalledVersions' => __DIR__ . '/..' . '/composer/InstalledVersions.php');
        public static function getInitializer(\Composer\Autoload\ClassLoader $loader)
        {
        }
    }
}
namespace chillerlan\Settings {
    /**
     * a generic container with magic getter and setter
     */
    interface SettingsContainerInterface extends \JsonSerializable
    {
        /**
         * Retrieve the value of $property
         *
         * @return mixed|null
         */
        public function __get(string $property);
        /**
         * Set $property to $value while avoiding private and non-existing properties
         *
         * @param string $property
         * @param mixed  $value
         */
        public function __set(string $property, $value) : void;
        /**
         * Checks if $property is set (aka. not null), excluding private properties
         */
        public function __isset(string $property) : bool;
        /**
         * Unsets $property while avoiding private and non-existing properties
         */
        public function __unset(string $property) : void;
        /**
         * @see SettingsContainerInterface::toJSON()
         */
        public function __toString() : string;
        /**
         * Returns an array representation of the settings object
         */
        public function toArray() : array;
        /**
         * Sets properties from a given iterable
         */
        public function fromIterable(iterable $properties) : \chillerlan\Settings\SettingsContainerInterface;
        /**
         * Returns a JSON representation of the settings object
         * @see \json_encode()
         */
        public function toJSON(int $jsonOptions = null) : string;
        /**
         * Sets properties from a given JSON string
         *
         * @throws \Exception
         * @throws \JsonException
         */
        public function fromJSON(string $json) : \chillerlan\Settings\SettingsContainerInterface;
    }
    abstract class SettingsContainerAbstract implements \chillerlan\Settings\SettingsContainerInterface
    {
        /**
         * SettingsContainerAbstract constructor.
         */
        public function __construct(iterable $properties = null)
        {
        }
        /**
         * calls a method with trait name as replacement constructor for each used trait
         * (remember pre-php5 classname constructors? yeah, basically this.)
         */
        protected function construct() : void
        {
        }
        /**
         * @inheritdoc
         */
        public function __get(string $property)
        {
        }
        /**
         * @inheritdoc
         */
        public function __set(string $property, $value) : void
        {
        }
        /**
         * @inheritdoc
         */
        public function __isset(string $property) : bool
        {
        }
        /**
         * @internal Checks if a property is private
         *
         * @param string $property
         *
         * @return bool
         */
        protected function isPrivate(string $property) : bool
        {
        }
        /**
         * @inheritdoc
         */
        public function __unset(string $property) : void
        {
        }
        /**
         * @inheritdoc
         */
        public function __toString() : string
        {
        }
        /**
         * @inheritdoc
         */
        public function toArray() : array
        {
        }
        /**
         * @inheritdoc
         */
        public function fromIterable(iterable $properties) : \chillerlan\Settings\SettingsContainerInterface
        {
        }
        /**
         * @inheritdoc
         */
        public function toJSON(int $jsonOptions = null) : string
        {
        }
        /**
         * @inheritdoc
         */
        public function fromJSON(string $json) : \chillerlan\Settings\SettingsContainerInterface
        {
        }
        /**
         * @inheritdoc
         */
        public function jsonSerialize() : array
        {
        }
    }
}
namespace chillerlan\SettingsTest {
    trait TestOptionsTrait
    {
        protected string $test1 = 'foo';
        protected ?bool $test2 = null;
        protected string $testConstruct;
        protected ?string $test4 = null;
        protected ?string $test5 = null;
        protected ?string $test6 = null;
        protected function TestOptionsTrait() : void
        {
        }
        protected function set_test5($value) : void
        {
        }
        protected function get_test6() : string
        {
        }
    }
    /**
     * @property $test1
     * @property $test2
     * @property $test3
     * @property $test4
     * @property $test5
     * @property $test6
     */
    class TestContainer extends \chillerlan\Settings\SettingsContainerAbstract
    {
        use \chillerlan\SettingsTest\TestOptionsTrait;
    }
    class ContainerTest extends \PHPUnit\Framework\TestCase
    {
        public function testConstruct()
        {
        }
        public function testGet()
        {
        }
        public function testSet()
        {
        }
        public function testToArray()
        {
        }
        public function testToJSON()
        {
        }
        public function testFromJsonException()
        {
        }
        public function testFromJsonTypeError()
        {
        }
    }
}
namespace chillerlan\QRCode\Data {
    /**
     * Specifies the methods reqired for the data modules (Number, Alphanum, Byte and Kanji)
     * and holds version information in several constants
     */
    interface QRDataInterface
    {
        /**
         * @var int[]
         */
        const CHAR_MAP_NUMBER = ['0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9];
        /**
         * ISO/IEC 18004:2000 Table 5
         *
         * @var int[]
         */
        const CHAR_MAP_ALPHANUM = ['0' => 0, '1' => 1, '2' => 2, '3' => 3, '4' => 4, '5' => 5, '6' => 6, '7' => 7, '8' => 8, '9' => 9, 'A' => 10, 'B' => 11, 'C' => 12, 'D' => 13, 'E' => 14, 'F' => 15, 'G' => 16, 'H' => 17, 'I' => 18, 'J' => 19, 'K' => 20, 'L' => 21, 'M' => 22, 'N' => 23, 'O' => 24, 'P' => 25, 'Q' => 26, 'R' => 27, 'S' => 28, 'T' => 29, 'U' => 30, 'V' => 31, 'W' => 32, 'X' => 33, 'Y' => 34, 'Z' => 35, ' ' => 36, '$' => 37, '%' => 38, '*' => 39, '+' => 40, '-' => 41, '.' => 42, '/' => 43, ':' => 44];
        /**
         * ISO/IEC 18004:2000 Tables 7-11 - Number of symbol characters and input data capacity for versions 1 to 40
         *
         * @see http://www.qrcode.com/en/about/version.html
         *
         * @var int [][][]
         */
        const MAX_LENGTH = [
            //	v  => [NUMERIC => [L, M, Q, H ], ALPHANUM => [L, M, Q, H], BINARY => [L, M, Q, H  ], KANJI => [L, M, Q, H   ]]  // modules
            1 => [[41, 34, 27, 17], [25, 20, 16, 10], [17, 14, 11, 7], [10, 8, 7, 4]],
            //  21
            2 => [[77, 63, 48, 34], [47, 38, 29, 20], [32, 26, 20, 14], [20, 16, 12, 8]],
            //  25
            3 => [[127, 101, 77, 58], [77, 61, 47, 35], [53, 42, 32, 24], [32, 26, 20, 15]],
            //  29
            4 => [[187, 149, 111, 82], [114, 90, 67, 50], [78, 62, 46, 34], [48, 38, 28, 21]],
            //  33
            5 => [[255, 202, 144, 106], [154, 122, 87, 64], [106, 84, 60, 44], [65, 52, 37, 27]],
            //  37
            6 => [[322, 255, 178, 139], [195, 154, 108, 84], [134, 106, 74, 58], [82, 65, 45, 36]],
            //  41
            7 => [[370, 293, 207, 154], [224, 178, 125, 93], [154, 122, 86, 64], [95, 75, 53, 39]],
            //  45
            8 => [[461, 365, 259, 202], [279, 221, 157, 122], [192, 152, 108, 84], [118, 93, 66, 52]],
            //  49
            9 => [[552, 432, 312, 235], [335, 262, 189, 143], [230, 180, 130, 98], [141, 111, 80, 60]],
            //  53
            10 => [[652, 513, 364, 288], [395, 311, 221, 174], [271, 213, 151, 119], [167, 131, 93, 74]],
            //  57
            11 => [[772, 604, 427, 331], [468, 366, 259, 200], [321, 251, 177, 137], [198, 155, 109, 85]],
            //  61
            12 => [[883, 691, 489, 374], [535, 419, 296, 227], [367, 287, 203, 155], [226, 177, 125, 96]],
            //  65
            13 => [[1022, 796, 580, 427], [619, 483, 352, 259], [425, 331, 241, 177], [262, 204, 149, 109]],
            //  69 NICE!
            14 => [[1101, 871, 621, 468], [667, 528, 376, 283], [458, 362, 258, 194], [282, 223, 159, 120]],
            //  73
            15 => [[1250, 991, 703, 530], [758, 600, 426, 321], [520, 412, 292, 220], [320, 254, 180, 136]],
            //  77
            16 => [[1408, 1082, 775, 602], [854, 656, 470, 365], [586, 450, 322, 250], [361, 277, 198, 154]],
            //  81
            17 => [[1548, 1212, 876, 674], [938, 734, 531, 408], [644, 504, 364, 280], [397, 310, 224, 173]],
            //  85
            18 => [[1725, 1346, 948, 746], [1046, 816, 574, 452], [718, 560, 394, 310], [442, 345, 243, 191]],
            //  89
            19 => [[1903, 1500, 1063, 813], [1153, 909, 644, 493], [792, 624, 442, 338], [488, 384, 272, 208]],
            //  93
            20 => [[2061, 1600, 1159, 919], [1249, 970, 702, 557], [858, 666, 482, 382], [528, 410, 297, 235]],
            //  97
            21 => [[2232, 1708, 1224, 969], [1352, 1035, 742, 587], [929, 711, 509, 403], [572, 438, 314, 248]],
            // 101
            22 => [[2409, 1872, 1358, 1056], [1460, 1134, 823, 640], [1003, 779, 565, 439], [618, 480, 348, 270]],
            // 105
            23 => [[2620, 2059, 1468, 1108], [1588, 1248, 890, 672], [1091, 857, 611, 461], [672, 528, 376, 284]],
            // 109
            24 => [[2812, 2188, 1588, 1228], [1704, 1326, 963, 744], [1171, 911, 661, 511], [721, 561, 407, 315]],
            // 113
            25 => [[3057, 2395, 1718, 1286], [1853, 1451, 1041, 779], [1273, 997, 715, 535], [784, 614, 440, 330]],
            // 117
            26 => [[3283, 2544, 1804, 1425], [1990, 1542, 1094, 864], [1367, 1059, 751, 593], [842, 652, 462, 365]],
            // 121
            27 => [[3517, 2701, 1933, 1501], [2132, 1637, 1172, 910], [1465, 1125, 805, 625], [902, 692, 496, 385]],
            // 125
            28 => [[3669, 2857, 2085, 1581], [2223, 1732, 1263, 958], [1528, 1190, 868, 658], [940, 732, 534, 405]],
            // 129
            29 => [[3909, 3035, 2181, 1677], [2369, 1839, 1322, 1016], [1628, 1264, 908, 698], [1002, 778, 559, 430]],
            // 133
            30 => [[4158, 3289, 2358, 1782], [2520, 1994, 1429, 1080], [1732, 1370, 982, 742], [1066, 843, 604, 457]],
            // 137
            31 => [[4417, 3486, 2473, 1897], [2677, 2113, 1499, 1150], [1840, 1452, 1030, 790], [1132, 894, 634, 486]],
            // 141
            32 => [[4686, 3693, 2670, 2022], [2840, 2238, 1618, 1226], [1952, 1538, 1112, 842], [1201, 947, 684, 518]],
            // 145
            33 => [[4965, 3909, 2805, 2157], [3009, 2369, 1700, 1307], [2068, 1628, 1168, 898], [1273, 1002, 719, 553]],
            // 149
            34 => [[5253, 4134, 2949, 2301], [3183, 2506, 1787, 1394], [2188, 1722, 1228, 958], [1347, 1060, 756, 590]],
            // 153
            35 => [[5529, 4343, 3081, 2361], [3351, 2632, 1867, 1431], [2303, 1809, 1283, 983], [1417, 1113, 790, 605]],
            // 157
            36 => [[5836, 4588, 3244, 2524], [3537, 2780, 1966, 1530], [2431, 1911, 1351, 1051], [1496, 1176, 832, 647]],
            // 161
            37 => [[6153, 4775, 3417, 2625], [3729, 2894, 2071, 1591], [2563, 1989, 1423, 1093], [1577, 1224, 876, 673]],
            // 165
            38 => [[6479, 5039, 3599, 2735], [3927, 3054, 2181, 1658], [2699, 2099, 1499, 1139], [1661, 1292, 923, 701]],
            // 169
            39 => [[6743, 5313, 3791, 2927], [4087, 3220, 2298, 1774], [2809, 2213, 1579, 1219], [1729, 1362, 972, 750]],
            // 173
            40 => [[7089, 5596, 3993, 3057], [4296, 3391, 2420, 1852], [2953, 2331, 1663, 1273], [1817, 1435, 1024, 784]],
        ];
        /**
         * ISO/IEC 18004:2000 Tables 7-11 - Number of symbol characters and input data capacity for versions 1 to 40
         *
         * @var int [][]
         */
        const MAX_BITS = [
            // version => [L, M, Q, H ]
            1 => [152, 128, 104, 72],
            2 => [272, 224, 176, 128],
            3 => [440, 352, 272, 208],
            4 => [640, 512, 384, 288],
            5 => [864, 688, 496, 368],
            6 => [1088, 864, 608, 480],
            7 => [1248, 992, 704, 528],
            8 => [1552, 1232, 880, 688],
            9 => [1856, 1456, 1056, 800],
            10 => [2192, 1728, 1232, 976],
            11 => [2592, 2032, 1440, 1120],
            12 => [2960, 2320, 1648, 1264],
            13 => [3424, 2672, 1952, 1440],
            14 => [3688, 2920, 2088, 1576],
            15 => [4184, 3320, 2360, 1784],
            16 => [4712, 3624, 2600, 2024],
            17 => [5176, 4056, 2936, 2264],
            18 => [5768, 4504, 3176, 2504],
            19 => [6360, 5016, 3560, 2728],
            20 => [6888, 5352, 3880, 3080],
            21 => [7456, 5712, 4096, 3248],
            22 => [8048, 6256, 4544, 3536],
            23 => [8752, 6880, 4912, 3712],
            24 => [9392, 7312, 5312, 4112],
            25 => [10208, 8000, 5744, 4304],
            26 => [10960, 8496, 6032, 4768],
            27 => [11744, 9024, 6464, 5024],
            28 => [12248, 9544, 6968, 5288],
            29 => [13048, 10136, 7288, 5608],
            30 => [13880, 10984, 7880, 5960],
            31 => [14744, 11640, 8264, 6344],
            32 => [15640, 12328, 8920, 6760],
            33 => [16568, 13048, 9368, 7208],
            34 => [17528, 13800, 9848, 7688],
            35 => [18448, 14496, 10288, 7888],
            36 => [19472, 15312, 10832, 8432],
            37 => [20528, 15936, 11408, 8768],
            38 => [21616, 16816, 12016, 9136],
            39 => [22496, 17728, 12656, 9776],
            40 => [23648, 18672, 13328, 10208],
        ];
        /**
         * @see http://www.thonky.com/qr-code-tutorial/error-correction-table
         *
         * @var int [][][]
         */
        const RSBLOCKS = [1 => [[1, 0, 26, 19], [1, 0, 26, 16], [1, 0, 26, 13], [1, 0, 26, 9]], 2 => [[1, 0, 44, 34], [1, 0, 44, 28], [1, 0, 44, 22], [1, 0, 44, 16]], 3 => [[1, 0, 70, 55], [1, 0, 70, 44], [2, 0, 35, 17], [2, 0, 35, 13]], 4 => [[1, 0, 100, 80], [2, 0, 50, 32], [2, 0, 50, 24], [4, 0, 25, 9]], 5 => [[1, 0, 134, 108], [2, 0, 67, 43], [2, 2, 33, 15], [2, 2, 33, 11]], 6 => [[2, 0, 86, 68], [4, 0, 43, 27], [4, 0, 43, 19], [4, 0, 43, 15]], 7 => [[2, 0, 98, 78], [4, 0, 49, 31], [2, 4, 32, 14], [4, 1, 39, 13]], 8 => [[2, 0, 121, 97], [2, 2, 60, 38], [4, 2, 40, 18], [4, 2, 40, 14]], 9 => [[2, 0, 146, 116], [3, 2, 58, 36], [4, 4, 36, 16], [4, 4, 36, 12]], 10 => [[2, 2, 86, 68], [4, 1, 69, 43], [6, 2, 43, 19], [6, 2, 43, 15]], 11 => [[4, 0, 101, 81], [1, 4, 80, 50], [4, 4, 50, 22], [3, 8, 36, 12]], 12 => [[2, 2, 116, 92], [6, 2, 58, 36], [4, 6, 46, 20], [7, 4, 42, 14]], 13 => [[4, 0, 133, 107], [8, 1, 59, 37], [8, 4, 44, 20], [12, 4, 33, 11]], 14 => [[3, 1, 145, 115], [4, 5, 64, 40], [11, 5, 36, 16], [11, 5, 36, 12]], 15 => [[5, 1, 109, 87], [5, 5, 65, 41], [5, 7, 54, 24], [11, 7, 36, 12]], 16 => [[5, 1, 122, 98], [7, 3, 73, 45], [15, 2, 43, 19], [3, 13, 45, 15]], 17 => [[1, 5, 135, 107], [10, 1, 74, 46], [1, 15, 50, 22], [2, 17, 42, 14]], 18 => [[5, 1, 150, 120], [9, 4, 69, 43], [17, 1, 50, 22], [2, 19, 42, 14]], 19 => [[3, 4, 141, 113], [3, 11, 70, 44], [17, 4, 47, 21], [9, 16, 39, 13]], 20 => [[3, 5, 135, 107], [3, 13, 67, 41], [15, 5, 54, 24], [15, 10, 43, 15]], 21 => [[4, 4, 144, 116], [17, 0, 68, 42], [17, 6, 50, 22], [19, 6, 46, 16]], 22 => [[2, 7, 139, 111], [17, 0, 74, 46], [7, 16, 54, 24], [34, 0, 37, 13]], 23 => [[4, 5, 151, 121], [4, 14, 75, 47], [11, 14, 54, 24], [16, 14, 45, 15]], 24 => [[6, 4, 147, 117], [6, 14, 73, 45], [11, 16, 54, 24], [30, 2, 46, 16]], 25 => [[8, 4, 132, 106], [8, 13, 75, 47], [7, 22, 54, 24], [22, 13, 45, 15]], 26 => [[10, 2, 142, 114], [19, 4, 74, 46], [28, 6, 50, 22], [33, 4, 46, 16]], 27 => [[8, 4, 152, 122], [22, 3, 73, 45], [8, 26, 53, 23], [12, 28, 45, 15]], 28 => [[3, 10, 147, 117], [3, 23, 73, 45], [4, 31, 54, 24], [11, 31, 45, 15]], 29 => [[7, 7, 146, 116], [21, 7, 73, 45], [1, 37, 53, 23], [19, 26, 45, 15]], 30 => [[5, 10, 145, 115], [19, 10, 75, 47], [15, 25, 54, 24], [23, 25, 45, 15]], 31 => [[13, 3, 145, 115], [2, 29, 74, 46], [42, 1, 54, 24], [23, 28, 45, 15]], 32 => [[17, 0, 145, 115], [10, 23, 74, 46], [10, 35, 54, 24], [19, 35, 45, 15]], 33 => [[17, 1, 145, 115], [14, 21, 74, 46], [29, 19, 54, 24], [11, 46, 45, 15]], 34 => [[13, 6, 145, 115], [14, 23, 74, 46], [44, 7, 54, 24], [59, 1, 46, 16]], 35 => [[12, 7, 151, 121], [12, 26, 75, 47], [39, 14, 54, 24], [22, 41, 45, 15]], 36 => [[6, 14, 151, 121], [6, 34, 75, 47], [46, 10, 54, 24], [2, 64, 45, 15]], 37 => [[17, 4, 152, 122], [29, 14, 74, 46], [49, 10, 54, 24], [24, 46, 45, 15]], 38 => [[4, 18, 152, 122], [13, 32, 74, 46], [48, 14, 54, 24], [42, 32, 45, 15]], 39 => [[20, 4, 147, 117], [40, 7, 75, 47], [43, 22, 54, 24], [10, 67, 45, 15]], 40 => [[19, 6, 148, 118], [18, 31, 75, 47], [34, 34, 54, 24], [20, 61, 45, 15]]];
        /**
         * Sets the data string (internally called by the constructor)
         */
        public function setData(string $data) : \chillerlan\QRCode\Data\QRDataInterface;
        /**
         * returns a fresh matrix object with the data written for the given $maskPattern
         */
        public function initMatrix(int $maskPattern, bool $test = null) : \chillerlan\QRCode\Data\QRMatrix;
    }
    /**
     * Processes the binary data and maps it on a matrix which is then being returned
     */
    abstract class QRDataAbstract implements \chillerlan\QRCode\Data\QRDataInterface
    {
        /**
         * the string byte count
         */
        protected ?int $strlen = null;
        /**
         * the current data mode: Num, Alphanum, Kanji, Byte
         */
        protected int $datamode;
        /**
         * mode length bits for the version breakpoints 1-9, 10-26 and 27-40
         *
         * ISO/IEC 18004:2000 Table 3 - Number of bits in Character Count Indicator
         */
        protected array $lengthBits = [0, 0, 0];
        /**
         * current QR Code version
         */
        protected int $version;
        /**
         * ECC temp data
         */
        protected array $ecdata;
        /**
         * ECC temp data
         */
        protected array $dcdata;
        /**
         * the options instance
         *
         * @var \chillerlan\Settings\SettingsContainerInterface|\chillerlan\QRCode\QROptions
         */
        protected \chillerlan\Settings\SettingsContainerInterface $options;
        /**
         * a BitBuffer instance
         */
        protected \chillerlan\QRCode\Helpers\BitBuffer $bitBuffer;
        /**
         * QRDataInterface constructor.
         */
        public function __construct(\chillerlan\Settings\SettingsContainerInterface $options, string $data = null)
        {
        }
        /**
         * @inheritDoc
         */
        public function setData(string $data) : \chillerlan\QRCode\Data\QRDataInterface
        {
        }
        /**
         * @inheritDoc
         */
        public function initMatrix(int $maskPattern, bool $test = null) : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * returns the length bits for the version breakpoints 1-9, 10-26 and 27-40
         *
         * @throws \chillerlan\QRCode\Data\QRCodeDataException
         * @codeCoverageIgnore
         */
        protected function getLengthBits() : int
        {
        }
        /**
         * returns the byte count of the $data string
         */
        protected function getLength(string $data) : int
        {
        }
        /**
         * returns the minimum version number for the given string
         *
         * @throws \chillerlan\QRCode\Data\QRCodeDataException
         */
        protected function getMinimumVersion() : int
        {
        }
        /**
         * writes the actual data string to the BitBuffer
         *
         * @see \chillerlan\QRCode\Data\QRDataAbstract::writeBitBuffer()
         */
        protected abstract function write(string $data) : void;
        /**
         * creates a BitBuffer and writes the string data to it
         *
         * @throws \chillerlan\QRCode\QRCodeException on data overflow
         */
        protected function writeBitBuffer(string $data) : void
        {
        }
        /**
         * ECC masking
         *
         * ISO/IEC 18004:2000 Section 8.5 ff
         *
         * @see http://www.thonky.com/qr-code-tutorial/error-correction-coding
         */
        protected function maskECC() : array
        {
        }
        /**
         * helper method for the polynomial operations
         */
        protected function poly(int $key, int $count) : array
        {
        }
    }
    /**
     * Alphanumeric mode: 0 to 9, A to Z, space, $ % * + - . / :
     *
     * ISO/IEC 18004:2000 Section 8.3.3
     * ISO/IEC 18004:2000 Section 8.4.3
     */
    final class AlphaNum extends \chillerlan\QRCode\Data\QRDataAbstract
    {
    }
    /**
     * Byte mode, ISO-8859-1 or UTF-8
     *
     * ISO/IEC 18004:2000 Section 8.3.4
     * ISO/IEC 18004:2000 Section 8.4.4
     */
    final class Byte extends \chillerlan\QRCode\Data\QRDataAbstract
    {
    }
    /**
     * Receives a QRDataInterface object and runs the mask pattern tests on it.
     *
     * ISO/IEC 18004:2000 Section 8.8.2 - Evaluation of masking results
     *
     * @see http://www.thonky.com/qr-code-tutorial/data-masking
     */
    final class MaskPatternTester
    {
        /**
         * Receives the QRDataInterface
         *
         * @see \chillerlan\QRCode\QROptions::$maskPattern
         * @see \chillerlan\QRCode\Data\QRMatrix::$maskPattern
         */
        public function __construct(\chillerlan\QRCode\Data\QRDataInterface $dataInterface)
        {
        }
        /**
         * shoves a QRMatrix through the MaskPatternTester to find the lowest penalty mask pattern
         *
         * @see \chillerlan\QRCode\Data\MaskPatternTester
         */
        public function getBestMaskPattern() : int
        {
        }
        /**
         * Returns the penalty for the given mask pattern
         *
         * @see \chillerlan\QRCode\QROptions::$maskPattern
         * @see \chillerlan\QRCode\Data\QRMatrix::$maskPattern
         */
        public function testPattern(int $pattern) : int
        {
        }
    }
}
namespace chillerlan\QRCode {
    /**
     * An exception container
     */
    class QRCodeException extends \Exception
    {
    }
}
namespace chillerlan\QRCode\Data {
    class QRCodeDataException extends \chillerlan\QRCode\QRCodeException
    {
    }
    /**
     * Numeric mode: decimal digits 0 to 9
     *
     * ISO/IEC 18004:2000 Section 8.3.2
     * ISO/IEC 18004:2000 Section 8.4.2
     */
    final class Number extends \chillerlan\QRCode\Data\QRDataAbstract
    {
    }
    /**
     * Kanji mode: double-byte characters from the Shift JIS character set
     *
     * ISO/IEC 18004:2000 Section 8.3.5
     * ISO/IEC 18004:2000 Section 8.4.5
     */
    final class Kanji extends \chillerlan\QRCode\Data\QRDataAbstract
    {
    }
    /**
     * Holds a numerical representation of the final QR Code;
     * maps the ECC coded binary data and applies the mask pattern
     *
     * @see http://www.thonky.com/qr-code-tutorial/format-version-information
     */
    final class QRMatrix
    {
        /** @var int */
        public const M_NULL = 0x0;
        /** @var int */
        public const M_DARKMODULE = 0x2;
        /** @var int */
        public const M_DATA = 0x4;
        /** @var int */
        public const M_FINDER = 0x6;
        /** @var int */
        public const M_SEPARATOR = 0x8;
        /** @var int */
        public const M_ALIGNMENT = 0xa;
        /** @var int */
        public const M_TIMING = 0xc;
        /** @var int */
        public const M_FORMAT = 0xe;
        /** @var int */
        public const M_VERSION = 0x10;
        /** @var int */
        public const M_QUIETZONE = 0x12;
        /** @var int */
        public const M_LOGO = 0x14;
        /** @var int */
        public const M_FINDER_DOT = 0x16;
        /** @var int */
        public const M_TEST = 0xff;
        /**
         * QRMatrix constructor.
         *
         * @throws \chillerlan\QRCode\Data\QRCodeDataException
         */
        public function __construct(int $version, int $eclevel)
        {
        }
        /**
         * shortcut to initialize the matrix
         */
        public function init(int $maskPattern, bool $test = null) : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Returns the data matrix, returns a pure boolean representation if $boolean is set to true
         *
         * @return int[][]|bool[][]
         */
        public function matrix(bool $boolean = false) : array
        {
        }
        /**
         * Returns the current version number
         */
        public function version() : int
        {
        }
        /**
         * Returns the current ECC level
         */
        public function eccLevel() : int
        {
        }
        /**
         * Returns the current mask pattern
         */
        public function maskPattern() : int
        {
        }
        /**
         * Returns the absoulute size of the matrix, including quiet zone (after setting it).
         *
         * size = version * 4 + 17 [ + 2 * quietzone size]
         */
        public function size() : int
        {
        }
        /**
         * Returns the value of the module at position [$x, $y]
         */
        public function get(int $x, int $y) : int
        {
        }
        /**
         * Sets the $M_TYPE value for the module at position [$x, $y]
         *
         *   true  => $M_TYPE << 8
         *   false => $M_TYPE
         */
        public function set(int $x, int $y, bool $value, int $M_TYPE) : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Checks whether a module is true (dark) or false (light)
         *
         *   true  => $value >> 8 === $M_TYPE
         *            $value >> 8 > 0
         *
         *   false => $value === $M_TYPE
         *            $value >> 8 === 0
         */
        public function check(int $x, int $y) : bool
        {
        }
        /**
         * Sets the "dark module", that is always on the same position 1x1px away from the bottom left finder
         */
        public function setDarkModule() : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Draws the 7x7 finder patterns in the corners top left/right and bottom left
         *
         * ISO/IEC 18004:2000 Section 7.3.2
         */
        public function setFinderPattern() : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Draws the separator lines around the finder patterns
         *
         * ISO/IEC 18004:2000 Section 7.3.3
         */
        public function setSeparators() : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Draws the 5x5 alignment patterns
         *
         * ISO/IEC 18004:2000 Section 7.3.5
         */
        public function setAlignmentPattern() : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Draws the timing pattern (h/v checkered line between the finder patterns)
         *
         * ISO/IEC 18004:2000 Section 7.3.4
         */
        public function setTimingPattern() : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Draws the version information, 2x 3x6 pixel
         *
         * ISO/IEC 18004:2000 Section 8.10
         */
        public function setVersionNumber(bool $test = null) : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Draws the format info along the finder patterns
         *
         * ISO/IEC 18004:2000 Section 8.9
         */
        public function setFormatInfo(int $maskPattern, bool $test = null) : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Draws the "quiet zone" of $size around the matrix
         *
         * ISO/IEC 18004:2000 Section 7.3.7
         *
         * @throws \chillerlan\QRCode\Data\QRCodeDataException
         */
        public function setQuietZone(int $size = null) : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Clears a space of $width * $height in order to add a logo or text.
         *
         * Additionally, the logo space can be positioned within the QR Code - respecting the main functional patterns -
         * using $startX and $startY. If either of these are null, the logo space will be centered in that direction.
         * ECC level "H" (30%) is required.
         *
         * Please note that adding a logo space minimizes the error correction capacity of the QR Code and
         * created images may become unreadable, especially when printed with a chance to receive damage.
         * Please test thoroughly before using this feature in production.
         *
         * This method should be called from within an output module (after the matrix has been filled with data).
         * Note that there is no restiction on how many times this method could be called on the same matrix instance.
         *
         * @link https://github.com/chillerlan/php-qrcode/issues/52
         *
         * @throws \chillerlan\QRCode\Data\QRCodeDataException
         */
        public function setLogoSpace(int $width, int $height, int $startX = null, int $startY = null) : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * Maps the binary $data array from QRDataInterface::maskECC() on the matrix,
         * masking the data using $maskPattern (ISO/IEC 18004:2000 Section 8.8)
         *
         * @see \chillerlan\QRCode\Data\QRDataAbstract::maskECC()
         *
         * @param int[] $data
         * @param int   $maskPattern
         *
         * @return \chillerlan\QRCode\Data\QRMatrix
         */
        public function mapData(array $data, int $maskPattern) : \chillerlan\QRCode\Data\QRMatrix
        {
        }
    }
}
namespace chillerlan\QRCode {
    /**
     * Turns a text string into a Model 2 QR Code
     *
     * @see https://github.com/kazuhikoarase/qrcode-generator/tree/master/php
     * @see http://www.qrcode.com/en/codes/model12.html
     * @see https://www.swisseduc.ch/informatik/theoretische_informatik/qr_codes/docs/qr_standard.pdf
     * @see https://en.wikipedia.org/wiki/QR_code
     * @see http://www.thonky.com/qr-code-tutorial/
     */
    class QRCode
    {
        /** @var int */
        public const VERSION_AUTO = -1;
        /** @var int */
        public const MASK_PATTERN_AUTO = -1;
        // ISO/IEC 18004:2000 Table 2
        /** @var int */
        public const DATA_NUMBER = 0b1;
        /** @var int */
        public const DATA_ALPHANUM = 0b10;
        /** @var int */
        public const DATA_BYTE = 0b100;
        /** @var int */
        public const DATA_KANJI = 0b1000;
        /**
         * References to the keys of the following tables:
         *
         * @see \chillerlan\QRCode\Data\QRDataInterface::MAX_LENGTH
         *
         * @var int[]
         */
        public const DATA_MODES = [self::DATA_NUMBER => 0, self::DATA_ALPHANUM => 1, self::DATA_BYTE => 2, self::DATA_KANJI => 3];
        // ISO/IEC 18004:2000 Tables 12, 25
        /** @var int */
        public const ECC_L = 0b1;
        // 7%.
        /** @var int */
        public const ECC_M = 0b0;
        // 15%.
        /** @var int */
        public const ECC_Q = 0b11;
        // 25%.
        /** @var int */
        public const ECC_H = 0b10;
        // 30%.
        /**
         * References to the keys of the following tables:
         *
         * @see \chillerlan\QRCode\Data\QRDataInterface::MAX_BITS
         * @see \chillerlan\QRCode\Data\QRDataInterface::RSBLOCKS
         * @see \chillerlan\QRCode\Data\QRMatrix::formatPattern
         *
         * @var int[]
         */
        public const ECC_MODES = [self::ECC_L => 0, self::ECC_M => 1, self::ECC_Q => 2, self::ECC_H => 3];
        /** @var string */
        public const OUTPUT_MARKUP_HTML = 'html';
        /** @var string */
        public const OUTPUT_MARKUP_SVG = 'svg';
        /** @var string */
        public const OUTPUT_IMAGE_PNG = 'png';
        /** @var string */
        public const OUTPUT_IMAGE_JPG = 'jpg';
        /** @var string */
        public const OUTPUT_IMAGE_GIF = 'gif';
        /** @var string */
        public const OUTPUT_STRING_JSON = 'json';
        /** @var string */
        public const OUTPUT_STRING_TEXT = 'text';
        /** @var string */
        public const OUTPUT_IMAGICK = 'imagick';
        /** @var string */
        public const OUTPUT_FPDF = 'fpdf';
        /** @var string */
        public const OUTPUT_CUSTOM = 'custom';
        /**
         * Map of built-in output modules => capabilities
         *
         * @var string[][]
         */
        public const OUTPUT_MODES = [\chillerlan\QRCode\Output\QRMarkup::class => [self::OUTPUT_MARKUP_SVG, self::OUTPUT_MARKUP_HTML], \chillerlan\QRCode\Output\QRImage::class => [self::OUTPUT_IMAGE_PNG, self::OUTPUT_IMAGE_GIF, self::OUTPUT_IMAGE_JPG], \chillerlan\QRCode\Output\QRString::class => [self::OUTPUT_STRING_JSON, self::OUTPUT_STRING_TEXT], \chillerlan\QRCode\Output\QRImagick::class => [self::OUTPUT_IMAGICK], \chillerlan\QRCode\Output\QRFpdf::class => [self::OUTPUT_FPDF]];
        /**
         * Map of data mode => interface
         *
         * @var string[]
         */
        protected const DATA_INTERFACES = ['number' => \chillerlan\QRCode\Data\Number::class, 'alphanum' => \chillerlan\QRCode\Data\AlphaNum::class, 'kanji' => \chillerlan\QRCode\Data\Kanji::class, 'byte' => \chillerlan\QRCode\Data\Byte::class];
        /**
         * The settings container
         *
         * @var \chillerlan\QRCode\QROptions|\chillerlan\Settings\SettingsContainerInterface
         */
        protected \chillerlan\Settings\SettingsContainerInterface $options;
        /**
         * The selected data interface (Number, AlphaNum, Kanji, Byte)
         */
        protected \chillerlan\QRCode\Data\QRDataInterface $dataInterface;
        /**
         * QRCode constructor.
         *
         * Sets the options instance, determines the current mb-encoding and sets it to UTF-8
         */
        public function __construct(\chillerlan\Settings\SettingsContainerInterface $options = null)
        {
        }
        /**
         * Renders a QR Code for the given $data and QROptions
         *
         * @return mixed
         */
        public function render(string $data, string $file = null)
        {
        }
        /**
         * Returns a QRMatrix object for the given $data and current QROptions
         *
         * @throws \chillerlan\QRCode\Data\QRCodeDataException
         */
        public function getMatrix(string $data) : \chillerlan\QRCode\Data\QRMatrix
        {
        }
        /**
         * returns a fresh QRDataInterface for the given $data
         *
         * @throws \chillerlan\QRCode\Data\QRCodeDataException
         */
        public function initDataInterface(string $data) : \chillerlan\QRCode\Data\QRDataInterface
        {
        }
        /**
         * returns a fresh (built-in) QROutputInterface
         *
         * @throws \chillerlan\QRCode\Output\QRCodeOutputException
         */
        protected function initOutputInterface(string $data) : \chillerlan\QRCode\Output\QROutputInterface
        {
        }
        /**
         * checks if a string qualifies as numeric
         */
        public function isNumber(string $string) : bool
        {
        }
        /**
         * checks if a string qualifies as alphanumeric
         */
        public function isAlphaNum(string $string) : bool
        {
        }
        /**
         * checks is a given $string matches the characters of a given $charmap, returns false on the first invalid occurence.
         */
        protected function checkString(string $string, array $charmap) : bool
        {
        }
        /**
         * checks if a string qualifies as Kanji
         */
        public function isKanji(string $string) : bool
        {
        }
        /**
         * a dummy
         */
        public function isByte(string $data) : bool
        {
        }
    }
}
namespace chillerlan\QRCode\Helpers {
    /**
     * Holds the raw binary data
     */
    final class BitBuffer
    {
        /**
         * clears the buffer
         */
        public function clear() : \chillerlan\QRCode\Helpers\BitBuffer
        {
        }
        /**
         * appends a sequence of bits
         */
        public function put(int $num, int $length) : \chillerlan\QRCode\Helpers\BitBuffer
        {
        }
        /**
         * appends a single bit
         */
        public function putBit(bool $bit) : \chillerlan\QRCode\Helpers\BitBuffer
        {
        }
        /**
         * returns the current buffer length
         */
        public function getLength() : int
        {
        }
        /**
         * returns the buffer content
         */
        public function getBuffer() : array
        {
        }
    }
    /**
     * Polynomial long division helpers
     *
     * @see http://www.thonky.com/qr-code-tutorial/error-correction-coding
     */
    final class Polynomial
    {
        /**
         * Polynomial constructor.
         */
        public function __construct(array $num = null, int $shift = null)
        {
        }
        /**
         *
         */
        public function getNum() : array
        {
        }
        /**
         * @param int[]    $num
         * @param int|null $shift
         *
         * @return \chillerlan\QRCode\Helpers\Polynomial
         */
        public function setNum(array $num, int $shift = null) : \chillerlan\QRCode\Helpers\Polynomial
        {
        }
        /**
         * @param int[] $e
         *
         * @return \chillerlan\QRCode\Helpers\Polynomial
         */
        public function multiply(array $e) : \chillerlan\QRCode\Helpers\Polynomial
        {
        }
        /**
         * @param int[] $e
         *
         * @return \chillerlan\QRCode\Helpers\Polynomial
         */
        public function mod(array $e) : \chillerlan\QRCode\Helpers\Polynomial
        {
        }
        /**
         * @throws \chillerlan\QRCode\QRCodeException
         */
        public function glog(int $n) : int
        {
        }
        /**
         *
         */
        public function gexp(int $n) : int
        {
        }
    }
}
namespace chillerlan\QRCode {
    /**
     * The QRCode plug-in settings & setter functionality
     */
    trait QROptionsTrait
    {
        /**
         * QR Code version number
         *
         * [1 ... 40] or QRCode::VERSION_AUTO
         */
        protected int $version = \chillerlan\QRCode\QRCode::VERSION_AUTO;
        /**
         * Minimum QR version
         *
         * if $version = QRCode::VERSION_AUTO
         */
        protected int $versionMin = 1;
        /**
         * Maximum QR version
         */
        protected int $versionMax = 40;
        /**
         * Error correct level
         *
         * QRCode::ECC_X where X is:
         *
         *   - L =>  7%
         *   - M => 15%
         *   - Q => 25%
         *   - H => 30%
         */
        protected int $eccLevel = \chillerlan\QRCode\QRCode::ECC_L;
        /**
         * Mask Pattern to use
         *
         * [0...7] or QRCode::MASK_PATTERN_AUTO
         */
        protected int $maskPattern = \chillerlan\QRCode\QRCode::MASK_PATTERN_AUTO;
        /**
         * Add a "quiet zone" (margin) according to the QR code spec
         */
        protected bool $addQuietzone = true;
        /**
         * Size of the quiet zone
         *
         * internally clamped to [0 ... $moduleCount / 2], defaults to 4 modules
         */
        protected int $quietzoneSize = 4;
        /**
         * Use this to circumvent the data mode detection and force the usage of the given mode.
         *
         * valid modes are: Number, AlphaNum, Kanji, Byte (case insensitive)
         *
         * @see https://github.com/chillerlan/php-qrcode/issues/39
         */
        protected ?string $dataModeOverride = null;
        /**
         * The output type
         *
         *   - QRCode::OUTPUT_MARKUP_XXXX where XXXX = HTML, SVG
         *   - QRCode::OUTPUT_IMAGE_XXX where XXX = PNG, GIF, JPG
         *   - QRCode::OUTPUT_STRING_XXXX where XXXX = TEXT, JSON
         *   - QRCode::OUTPUT_CUSTOM
         */
        protected string $outputType = \chillerlan\QRCode\QRCode::OUTPUT_IMAGE_PNG;
        /**
         * the FQCN of the custom QROutputInterface if $outputType is set to QRCode::OUTPUT_CUSTOM
         */
        protected ?string $outputInterface = null;
        /**
         * /path/to/cache.file
         */
        protected ?string $cachefile = null;
        /**
         * newline string [HTML, SVG, TEXT]
         */
        protected string $eol = PHP_EOL;
        /**
         * size of a QR code pixel [SVG, IMAGE_*], HTML via CSS
         */
        protected int $scale = 5;
        /**
         * a common css class
         */
        protected string $cssClass = '';
        /**
         * SVG opacity
         */
        protected float $svgOpacity = 1.0;
        /**
         * anything between <defs>
         *
         * @see https://developer.mozilla.org/docs/Web/SVG/Element/defs
         */
        protected string $svgDefs = '<style>rect{shape-rendering:crispEdges}</style>';
        /**
         * SVG viewBox size. a single integer number which defines width/height of the viewBox attribute.
         *
         * viewBox="0 0 x x"
         *
         * @see https://css-tricks.com/scale-svg/#article-header-id-3
         */
        protected ?int $svgViewBoxSize = null;
        /**
         * string substitute for dark
         */
        protected string $textDark = '🔴';
        /**
         * string substitute for light
         */
        protected string $textLight = '⭕';
        /**
         * markup substitute for dark (CSS value)
         */
        protected string $markupDark = '#000';
        /**
         * markup substitute for light (CSS value)
         */
        protected string $markupLight = '#fff';
        /**
         * Return the image resource instead of a render if applicable.
         * This option overrides other output options, such as $cachefile and $imageBase64.
         *
         * Supported by the following modules:
         *
         * - QRImage:   resource (PHP < 8), GdImage
         * - QRImagick: Imagick
         * - QRFpdf:    FPDF
         *
         * @see \chillerlan\QRCode\Output\QROutputInterface::dump()
         *
         * @var bool
         */
        protected bool $returnResource = false;
        /**
         * toggle base64 or raw image data
         */
        protected bool $imageBase64 = true;
        /**
         * toggle transparency, not supported by jpg
         */
        protected bool $imageTransparent = true;
        /**
         * @see imagecolortransparent()
         *
         * [R, G, B]
         */
        protected array $imageTransparencyBG = [255, 255, 255];
        /**
         * @see imagepng()
         */
        protected int $pngCompression = -1;
        /**
         * @see imagejpeg()
         */
        protected int $jpegQuality = 85;
        /**
         * Imagick output format
         *
         * @see \Imagick::setType()
         */
        protected string $imagickFormat = 'png';
        /**
         * Imagick background color (defaults to "transparent")
         *
         * @see \ImagickPixel::__construct()
         */
        protected ?string $imagickBG = null;
        /**
         * Measurement unit for FPDF output: pt, mm, cm, in (defaults to "pt")
         *
         * @see \FPDF::__construct()
         */
        protected string $fpdfMeasureUnit = 'pt';
        /**
         * Module values map
         *
         *   - HTML, IMAGICK: #ABCDEF, cssname, rgb(), rgba()...
         *   - IMAGE: [63, 127, 255] // R, G, B
         */
        protected ?array $moduleValues = null;
        /**
         * clamp min/max version number
         */
        protected function setMinMaxVersion(int $versionMin, int $versionMax) : void
        {
        }
        /**
         * sets the minimum version number
         */
        protected function set_versionMin(int $version) : void
        {
        }
        /**
         * sets the maximum version number
         */
        protected function set_versionMax(int $version) : void
        {
        }
        /**
         * sets the error correction level
         *
         * @throws \chillerlan\QRCode\QRCodeException
         */
        protected function set_eccLevel(int $eccLevel) : void
        {
        }
        /**
         * sets/clamps the mask pattern
         */
        protected function set_maskPattern(int $maskPattern) : void
        {
        }
        /**
         * sets the transparency background color
         *
         * @throws \chillerlan\QRCode\QRCodeException
         */
        protected function set_imageTransparencyBG(array $imageTransparencyBG) : void
        {
        }
        /**
         * sets/clamps the version number
         */
        protected function set_version(int $version) : void
        {
        }
        /**
         * sets the FPDF measurement unit
         *
         * @codeCoverageIgnore
         */
        protected function set_fpdfMeasureUnit(string $unit) : void
        {
        }
    }
    /**
     * The QRCode settings container
     *
     * @property int         $version
     * @property int         $versionMin
     * @property int         $versionMax
     * @property int         $eccLevel
     * @property int         $maskPattern
     * @property bool        $addQuietzone
     * @property int         $quietzoneSize
     * @property string|null $dataModeOverride
     * @property string      $outputType
     * @property string|null $outputInterface
     * @property string|null $cachefile
     * @property string      $eol
     * @property int         $scale
     * @property string      $cssClass
     * @property float       $svgOpacity
     * @property string      $svgDefs
     * @property int         $svgViewBoxSize
     * @property string      $textDark
     * @property string      $textLight
     * @property string      $markupDark
     * @property string      $markupLight
     * @property bool        $returnResource
     * @property bool        $imageBase64
     * @property bool        $imageTransparent
     * @property array       $imageTransparencyBG
     * @property int         $pngCompression
     * @property int         $jpegQuality
     * @property string      $imagickFormat
     * @property string|null $imagickBG
     * @property string      $fpdfMeasureUnit
     * @property array|null  $moduleValues
     */
    class QROptions extends \chillerlan\Settings\SettingsContainerAbstract
    {
        use \chillerlan\QRCode\QROptionsTrait;
    }
}
namespace chillerlan\QRCode\Output {
    /**
     * Converts the data matrix into readable output
     */
    interface QROutputInterface
    {
        const DEFAULT_MODULE_VALUES = [
            // light
            \chillerlan\QRCode\Data\QRMatrix::M_NULL => false,
            // 0
            \chillerlan\QRCode\Data\QRMatrix::M_DATA => false,
            // 4
            \chillerlan\QRCode\Data\QRMatrix::M_FINDER => false,
            // 6
            \chillerlan\QRCode\Data\QRMatrix::M_SEPARATOR => false,
            // 8
            \chillerlan\QRCode\Data\QRMatrix::M_ALIGNMENT => false,
            // 10
            \chillerlan\QRCode\Data\QRMatrix::M_TIMING => false,
            // 12
            \chillerlan\QRCode\Data\QRMatrix::M_FORMAT => false,
            // 14
            \chillerlan\QRCode\Data\QRMatrix::M_VERSION => false,
            // 16
            \chillerlan\QRCode\Data\QRMatrix::M_QUIETZONE => false,
            // 18
            \chillerlan\QRCode\Data\QRMatrix::M_LOGO => false,
            // 20
            \chillerlan\QRCode\Data\QRMatrix::M_TEST => false,
            // 255
            // dark
            \chillerlan\QRCode\Data\QRMatrix::M_DARKMODULE << 8 => true,
            // 512
            \chillerlan\QRCode\Data\QRMatrix::M_DATA << 8 => true,
            // 1024
            \chillerlan\QRCode\Data\QRMatrix::M_FINDER << 8 => true,
            // 1536
            \chillerlan\QRCode\Data\QRMatrix::M_ALIGNMENT << 8 => true,
            // 2560
            \chillerlan\QRCode\Data\QRMatrix::M_TIMING << 8 => true,
            // 3072
            \chillerlan\QRCode\Data\QRMatrix::M_FORMAT << 8 => true,
            // 3584
            \chillerlan\QRCode\Data\QRMatrix::M_VERSION << 8 => true,
            // 4096
            \chillerlan\QRCode\Data\QRMatrix::M_FINDER_DOT << 8 => true,
            // 5632
            \chillerlan\QRCode\Data\QRMatrix::M_TEST << 8 => true,
        ];
        /**
         * generates the output, optionally dumps it to a file, and returns it
         *
         * @return mixed
         */
        public function dump(string $file = null);
    }
    /**
     * common output abstract
     */
    abstract class QROutputAbstract implements \chillerlan\QRCode\Output\QROutputInterface
    {
        /**
         * the current size of the QR matrix
         *
         * @see \chillerlan\QRCode\Data\QRMatrix::size()
         */
        protected int $moduleCount;
        /**
         * the current output mode
         *
         * @see \chillerlan\QRCode\QROptions::$outputType
         */
        protected string $outputMode;
        /**
         * the default output mode of the current output module
         */
        protected string $defaultMode;
        /**
         * the current scaling for a QR pixel
         *
         * @see \chillerlan\QRCode\QROptions::$scale
         */
        protected int $scale;
        /**
         * the side length of the QR image (modules * scale)
         */
        protected int $length;
        /**
         * an (optional) array of color values for the several QR matrix parts
         */
        protected array $moduleValues;
        /**
         * the (filled) data matrix object
         */
        protected \chillerlan\QRCode\Data\QRMatrix $matrix;
        /**
         * @var \chillerlan\Settings\SettingsContainerInterface|\chillerlan\QRCode\QROptions
         */
        protected \chillerlan\Settings\SettingsContainerInterface $options;
        /**
         * QROutputAbstract constructor.
         */
        public function __construct(\chillerlan\Settings\SettingsContainerInterface $options, \chillerlan\QRCode\Data\QRMatrix $matrix)
        {
        }
        /**
         * Sets the initial module values (clean-up & defaults)
         */
        protected abstract function setModuleValues() : void;
        /**
         * saves the qr data to a file
         *
         * @see file_put_contents()
         * @see \chillerlan\QRCode\QROptions::cachefile
         *
         * @throws \chillerlan\QRCode\Output\QRCodeOutputException
         */
        protected function saveToFile(string $data, string $file) : bool
        {
        }
        /**
         * @inheritDoc
         */
        public function dump(string $file = null)
        {
        }
    }
    /**
     * QRFpdf output module (requires fpdf)
     *
     * @see https://github.com/Setasign/FPDF
     * @see http://www.fpdf.org/
     */
    class QRFpdf extends \chillerlan\QRCode\Output\QROutputAbstract
    {
        public function __construct(\chillerlan\Settings\SettingsContainerInterface $options, \chillerlan\QRCode\Data\QRMatrix $matrix)
        {
        }
        /**
         * @inheritDoc
         */
        protected function setModuleValues() : void
        {
        }
        /**
         * @inheritDoc
         *
         * @return string|\FPDF
         */
        public function dump(string $file = null)
        {
        }
    }
    /**
     * ImageMagick output module (requires ext-imagick)
     *
     * @see http://php.net/manual/book.imagick.php
     * @see http://phpimagick.com
     */
    class QRImagick extends \chillerlan\QRCode\Output\QROutputAbstract
    {
        protected \Imagick $imagick;
        /**
         * @inheritDoc
         */
        public function __construct(\chillerlan\Settings\SettingsContainerInterface $options, \chillerlan\QRCode\Data\QRMatrix $matrix)
        {
        }
        /**
         * @inheritDoc
         */
        protected function setModuleValues() : void
        {
        }
        /**
         * @inheritDoc
         *
         * @return string|\Imagick
         */
        public function dump(string $file = null)
        {
        }
        /**
         * Creates the QR image via ImagickDraw
         */
        protected function drawImage() : void
        {
        }
    }
    /**
     * Converts the matrix into GD images, raw or base64 output (requires ext-gd)
     *
     * @see http://php.net/manual/book.image.php
     */
    class QRImage extends \chillerlan\QRCode\Output\QROutputAbstract
    {
        /**
         * GD image types that support transparency
         *
         * @var string[]
         */
        protected const TRANSPARENCY_TYPES = [\chillerlan\QRCode\QRCode::OUTPUT_IMAGE_PNG, \chillerlan\QRCode\QRCode::OUTPUT_IMAGE_GIF];
        protected string $defaultMode = \chillerlan\QRCode\QRCode::OUTPUT_IMAGE_PNG;
        /**
         * The GD image resource
         *
         * @see imagecreatetruecolor()
         * @var resource|\GdImage
         *
         * @phan-suppress PhanUndeclaredTypeProperty
         */
        protected $image;
        /**
         * @inheritDoc
         *
         * @throws \chillerlan\QRCode\QRCodeException
         */
        public function __construct(\chillerlan\Settings\SettingsContainerInterface $options, \chillerlan\QRCode\Data\QRMatrix $matrix)
        {
        }
        /**
         * @inheritDoc
         */
        protected function setModuleValues() : void
        {
        }
        /**
         * @inheritDoc
         *
         * @return string|resource|\GdImage
         *
         * @phan-suppress PhanUndeclaredTypeReturnType, PhanTypeMismatchReturn
         */
        public function dump(string $file = null)
        {
        }
        /**
         * Creates a single QR pixel with the given settings
         */
        protected function setPixel(int $x, int $y, array $rgb) : void
        {
        }
        /**
         * Creates the final image by calling the desired GD output function
         *
         * @throws \chillerlan\QRCode\Output\QRCodeOutputException
         */
        protected function dumpImage() : string
        {
        }
        /**
         * PNG output
         *
         * @return void
         */
        protected function png() : void
        {
        }
        /**
         * Jiff - like... JitHub!
         *
         * @return void
         */
        protected function gif() : void
        {
        }
        /**
         * JPG output
         *
         * @return void
         */
        protected function jpg() : void
        {
        }
    }
    /**
     * Converts the matrix into markup types: HTML, SVG, ...
     */
    class QRMarkup extends \chillerlan\QRCode\Output\QROutputAbstract
    {
        protected string $defaultMode = \chillerlan\QRCode\QRCode::OUTPUT_MARKUP_SVG;
        /**
         * @see \sprintf()
         */
        protected string $svgHeader = '<svg xmlns="http://www.w3.org/2000/svg" class="qr-svg %1$s" ' . 'style="width: 100%%; height: auto;" viewBox="0 0 %2$d %2$d">';
        /**
         * @inheritDoc
         */
        protected function setModuleValues() : void
        {
        }
        /**
         * HTML output
         */
        protected function html(string $file = null) : string
        {
        }
        /**
         * SVG output
         *
         * @see https://github.com/codemasher/php-qrcode/pull/5
         */
        protected function svg(string $file = null) : string
        {
        }
    }
    class QRCodeOutputException extends \chillerlan\QRCode\QRCodeException
    {
    }
    /**
     * Converts the matrix data into string types
     */
    class QRString extends \chillerlan\QRCode\Output\QROutputAbstract
    {
        protected string $defaultMode = \chillerlan\QRCode\QRCode::OUTPUT_STRING_TEXT;
        /**
         * @inheritDoc
         */
        protected function setModuleValues() : void
        {
        }
        /**
         * string output
         */
        protected function text(string $file = null) : string
        {
        }
        /**
         * JSON output
         */
        protected function json(string $file = null) : string
        {
        }
    }
}
/**
 * Sephpa
 *
 * @license   GNU LGPL v3.0 - For details have a look at the LICENSE file
 * @copyright ©2018 Alexander Schickedanz
 * @link      https://github.com/AbcAeffchen/Sephpa
 *
 * @author  Alexander Schickedanz <abcaeffchen@gmail.com>
 */
namespace AbcAeffchen\Sephpa {
    function sephpaAutoloader($class)
    {
    }
}
/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
namespace Symfony\Polyfill\Intl\Grapheme {
    \define('SYMFONY_GRAPHEME_CLUSTER_RX', \PCRE_VERSION >= '8.32' ? '\\X' : \Symfony\Polyfill\Intl\Grapheme\Grapheme::GRAPHEME_CLUSTER_RX);
}
/**
 * SepaUtilities
 *
 * @license   GNU LGPL v3.0 - For details have a look at the LICENSE file
 * @copyright ©2018 Alexander Schickedanz
 * @link      https://github.com/AbcAeffchen/SepaUtilities
 *
 * @author    Alexander Schickedanz <abcaeffchen@gmail.com>
 */
namespace AbcAeffchen\SepaUtilities {
    /**
     * Returns a DateTime object of easter sunday in the given year.
     * This is calculated with the Gaussian Algorithm.
     * @param int $year The year written with four digits.
     * @return \DateTime DateTime object pointing to easter sunday of the $year.
     */
    function easterDate($year)
    {
    }
}
namespace {
    /**
     * Second Checkout Setup.
     */
    \define('WGM_CHECKOUT', \TRUE);
    \define('WOOCOMMERCE_CHECKOUT', \TRUE);
    /**
     * ## Customer Order Comments.
     */
    $order_comments = \WGM_Template::checkout_readonly_field('order_comments', array('type' => 'textarea', 'class' => array('notes'), 'name' => 'order_comments', 'label' => ''));
    /**
     * ## Checkout Notice
     */
    $last_hint = \get_option('woocommerce_de_last_checkout_hints');
    /**
     * Override PPU Part of Variations for Variable Products
     *
     * @wp-hook wgm_product_summary_parts
     * @param Array $parts
     * @param WC_Product $product
     * @param Boolean $option_check
     * @return Array
     */
    function wcppufv_add_price_per_unit($parts = array(), $product = \null, $option_check = \true)
    {
    }
    /**
     * Get PPU String by variable product
     *
     * @param WC_Product $product
     * @return String
     */
    function wcppufv_get_price_per_unit_string_by_variable_product($product)
    {
    }
    /**
     * Get PPU String by product
     *
     * @param WC_Product $product
     * @return String
     */
    function wcppufv_get_price_per_unit_string_by_product($product)
    {
    }
    /**
     * Feature Name: Helper
     * Descriptions: Here are some helper functions we need
     * Version:      1.0
     * Author:       MarketPress
     * Author URI:   https://marketpress.com
     * Licence:      GPLv3
     */
    /**
     * getting the Script and Style suffix for Kiel-Theme
     * Adds a conditional ".min" suffix to the file name when WP_DEBUG is NOT set to TRUE.
     *
     * @return	string
     */
    function wcppufv_get_script_suffix()
    {
    }
    /**
     * Gets the specific asset directory url
     *
     * @param	string $path the relative path to the wanted subdirectory. If
     *				no path is selected, the root asset directory will be returned
     * @return	string the url of the wcppufv asset directory
     */
    function wcppufv_get_asset_directory_url($path = '')
    {
    }
    /**
     * Gets the specific asset directory path
     *
     * @param	string $path the relative path to the wanted subdirectory. If
     *				no path is selected, the root asset directory will be returned
     * @return	string the url of the wcppufv asset directory
     */
    function wcppufv_get_asset_directory($path = '')
    {
    }
    /**
     * Make a select field for scale_units
     * 
     * @param	array $field
     * @return	string html
     */
    function wcppufv_select_scale_units($post_id, $field)
    {
    }
    /**
     * Retrives price per unit data
     * 
     * @param	int $variation_id
     * @param	object $product
     * @return	array
     */
    function wcppufv_get_price_per_unit_data($variation_id, $product)
    {
    }
    /**
     * Feature Name: Variation Fields
     * Descriptions: These functions are adding the fields
     * Version:      1.0
     * Author:       MarketPress
     * Author URI:   https://marketpress.com
     * Licence:      GPLv3
     */
    /**
     * Adds the field to the variations
     * 
     * @param	int $loop the current loop count
     * @param	array $variation_data the data of the current variation
     * @param	object $variation the variation post object
     * @return	void
     */
    function wcppufv_add_field($loop, $variation_data, $variation)
    {
    }
    /**
     * Adds the field to the variations if automatic calculation is activated
     * 
     * @since 	3.6.4
     * @param	int $loop the current loop count
     * @param	array $variation_data the data of the current variation
     * @param	object $variation the variation post object
     * @return	void
     */
    function wcppufv_add_product_write_panel_automatic_calculation($loop, $variation_data, $variation)
    {
    }
    /**
     * Adds the field to the variations
     * 
     * @param	int $post_id
     * @return	void
     */
    function wcppufv_save_field($post_id, $post = \NULL)
    {
    }
    // define needed constants
    \define('WCPPUFV_PLUGIN_URL', \plugin_dir_url(__FILE__));
    \define('WCPPUFV_PLUGIN_PATH', \plugin_dir_path(__FILE__));
    \define('WCPPUFV_BASEFILE', \plugin_basename(__FILE__));
    /**
     * Initializes the plugin, registers
     * all the filters, hooks and loads
     * the files.
     * 
     * @wp-hook	plugins_loaded
     * @return	void
     */
    function wcppufv_init()
    {
    }
    /**
     * Get "tax exempt" status of an order as String
     *
     * @param	WC_Order $order
     * @return	String
     */
    function wcvat_woocommerce_order_details_status($order)
    {
    }
    function zocker_loop_product_summary()
    {
    }
    function zocker_woocommerce_single_product_price_rating()
    {
    }
    function zigcy_lite_product_title_wrap()
    {
    }
    /**
     * Feature Name: Script Functions
     * Version:      1.0
     * Author:       MarketPress
     * Author URI:   http://marketpress.com/
     */
    /**
     * Enqueue the scripts.
     *
     * @wp-hook wp_enqueue_scripts
     * @return  void
     */
    function wcvat_wp_enqueue_scripts()
    {
    }
    /**
     * Returning our Scripts
     *
     * @return  array
     */
    function wcvat_get_scripts()
    {
    }
    /**
     * Feature Name: Styles
     * Author:		 Inpsyde GmbH for MarketPress.com
     * Author URI:   http://marketpress.com
     * Licence:      GPLv3
     */
    /**
     * Enqueue styles and scripts.
     *
     * @wp-hook wp_enqueue_scripts
     *
     * @return  Void
     */
    function wcvat_wp_enqueue_styles()
    {
    }
    /**
     * Returning our Styles
     *
     * @return  Array
     */
    function wcvat_get_styles()
    {
    }
    /**
     * Feature Name: Tax
     * Version:      1.0
     * Author:       MarketPress
     * Author URI:   http://marketpress.com
     */
    /**
     * Recalculate totals and overwrite cart totals data.
     *
     * @wp-hook woocommerce_calculate_totals
     * @return  void
     */
    function wcvat_recalculate_cart()
    {
    }
    /**
     * Feature Name: Helpers
     * Version:      1.0
     * Author:       MarketPress
     * Author URI:   http://marketpress.com
     */
    /**
     * Check if the requirements are setted. If not we need an admin
     * notice to inform the administration about the tasks to be
     * done to get this plugin work
     * 
     * @return	boolean
     */
    function wcvat_system_check()
    {
    }
    /**
     * Shows the admin notice
     * 
     * @param	string $message
     * @return	void
     */
    function wcvat_show_admin_notice($message)
    {
    }
    /**
     * Calles the admin notice for this message
     * 
     * @wp-hook	admin_notices
     * @return	void
     */
    function wcvat_show_admin_notice_missing_woocommerce()
    {
    }
    /**
     * Calles the admin notice for this message
     * 
     * @wp-hook	admin_notices
     * @return	void
     */
    function wcvat_show_admin_notice_missing_tax()
    {
    }
    /**
     * Calles the admin notice for this message
     * 
     * @wp-hook	admin_notices
     * @return	void
     */
    function wcvat_show_admin_notice_kleinunternehmerregelung()
    {
    }
    /**
     * getting the Script and Style suffix for the plugin
     * Adds a conditional ".min" suffix to the file name
     * when WP_DEBUG is NOT set to TRUE.
     *
     * @return string
     */
    function wcvat_get_script_suffix()
    {
    }
    /**
     * Gets the specific asset directory url
     *
     * @param	string $path the relative path to the wanted subdirectory. If
     *				no path is selected, the root asset directory will be returned
     * @return	string the url of the bbp_hd asset directory
     */
    function wcvat_get_asset_directory_url($path = '')
    {
    }
    /**
     * Gets the specific asset directory path
     *
     * @param	string $path the relative path to the wanted subdirectory. If
     *				no path is selected, the root asset directory will be returned
     * @return	string the url of the bbp_hd asset directory
     */
    function wcvat_get_asset_directory($path = '')
    {
    }
    /**
     * inserts an array before a given key
     *
     * @param array  $array
     * @param string $search
     * @param array  $insertment
     *
     * @return array
     */
    function wcvat_array_insert($array, $search, $insertment)
    {
    }
    /**
     * set customers to not vat exempted in first login and remove vat id if billing country is base country
     *
     * @wp-hook init
     * @since GM 3.4.1
     * @return void
     */
    function wcvat_vat_exempt_first_login()
    {
    }
    /**
     * Add the VAT field to checkout before order notes.
     *
     * @wp-hook woocommerce_before_order_notes
     *
     * @param WC_Checkout $checkout
     *
     * @return void
     */
    function wcvat_woocommerce_add_vat_field($checkout)
    {
    }
    /**
     * Shows the VAT in order received
     *
     * @wp-hook	woocommerce_order_details_after_customer_details
     * @param	object $order
     * @return	void
     */
    function wcvat_order_details_after_customer_details($order)
    {
    }
    /**
     * Validates the user input and
     * loads the VAT Validator to
     * check it.
     *
     * @return void
     */
    function wcvat_woocommerce_after_checkout_validation()
    {
    }
    /**
     * If 2nd Checkout is enabled in German Market
     *
     * @wp-hook	gm_checkout_validation_first_checkout
     * @param	Integer $error_count
     * @return	Integer
     */
    function wcvat_validation_first_checkout($error_count)
    {
    }
    /**
     * Adds the VAT Number to the E-Mails
     *
     * NOT IN USE SINCE v.3.9.1.9
     *
     * @wp-hook	woocommerce_email_order_meta_keys
     * @param	array $keys
     * @return	array $keys
     */
    function wcvat_custom_checkout_field_order_meta_keys($keys)
    {
    }
    /**
     * Notice: "Tax free intracommunity delivery" and VAT ID in emails
     *
     * @wp-hook	woocommerce_email_after_order_table
     * @param	WC_Order $order
     * @return	void
     */
    function wcvat_woocommerce_email_after_order_table($order)
    {
    }
    /**
     * Notice: "Tax free intracommunity delivery" in my-account
     *
     * @wp-hook	woocommerce_order_details_after_order_table
     * @param	WC_Order $order
     * @return	void
     */
    function wcvat_woocommerce_order_details_after_order_table($order)
    {
    }
    /**
     * Notice: "Tax free intracommunity delivery" in checkout
     *
     * @wp-hook	woocommerce_review_order_after_order_total
     * @return	void
     */
    function wcvat_woocommerce_checkout_details_after_order_table()
    {
    }
    /**
     * Display the VAT Field in the Backend
     *
     * @wp-hook woocommerce_admin_order_data_after_order_details
     * @param object $order
     * @return void
     */
    function wcvat_woocommerce_admin_order_data_after_billing_address($order)
    {
    }
    /**
     * Save the VAT Field in the backend
     *
     * @wp-hook woocommerce_process_shop_order_meta
     * @param Integer $post_id
     * @param WC_Post $post
     * @return void
     */
    function wcvat_woocommerce_admin_save_vat_id_field($order_id, $post_or_order_object)
    {
    }
    /**
     * Save the VAT woocommerce_checkout_create_order at the order
     *
     * @param WC_order $order
     * @param Array $posted
     * @return void
     */
    function wcvat_woocommerce_checkout_update_order_meta($order, $posted)
    {
    }
    /**
     * Save order notes (api resonse)
     *
     * @param Integer $order_id
     * @param Array $posted
     * @return void
     */
    function wcvat_woocommerce_checkout_update_order_meta_order_notes_log($order_id, $data)
    {
    }
    /**
     * AJAX callback to check the VAT
     *
     * @wp-hook	wp_ajax_wcvat_check_vat, wp_ajax_nopriv_wcvat_check_vat
     * @return	void
     */
    function wcvat_check_vat()
    {
    }
    /**
     * Check VAT exempt with WGM_Session Class
     *
     * @wp-hook	woocommerce_before_calculate_totals
     * @return	void
     */
    function wcvat_woocommerce_before_calculate_totals()
    {
    }
    /**
     * Add UK to european union countries by backend option
     *
     * @wp-hook	woocommerce_european_union_countries
     * @param Array $countries
     * @return Array
     */
    function wcvat_woocommerce_european_union_countries_uk($countries)
    {
    }
    // Exit if accessed directly
    /**
    * Order List Data
    *
    * wp-hook WGM_Hpos::get_hook_manage_shop_order_custom_column()
    * @since 3.8.2
    * @param String $column
    * @param Integer $post_id
    * @return void
    */
    function wcvat_order_list_data($column, $post_id_or_order_object)
    {
    }
    /**
    * Backend Settings German Market 3.1
    *
    * wp-hook woocommerce_de_ui_left_menu_items
    * @param Array $items
    * @return Array
    */
    function wcvat_woocommerce_de_ui_left_menu_items($items)
    {
    }
    /**
    * Render Options for global
    * 
    * @return void
    */
    function wcvat_woocommerce_de_ui_render_options()
    {
    }
    /**
     * Feature Name: Styles
     * Author:		 Inpsyde GmbH for MarketPress.com
     * Author URI:   http://marketpress.com
     * Licence:      GPLv3
     */
    /**
     * Enqueue styles and scripts.
     *
     * @wp-hook admin_enqueue_styles
     * @return  void
     */
    function wcvat_admin_enqueue_styles()
    {
    }
    /**
     * Returning our Styles
     *
     * @return  Array
     */
    function wcvat_get_admin_styles()
    {
    }
    // needed constants
    \define('WCVAT_PLUGIN_BASENAME', \plugin_basename(__FILE__));
    \define('WCVAT_PLUGIN_URL', \plugin_dir_url(__FILE__));
    \define('WCVAT_PLUGIN_PATH', \plugin_dir_path(__FILE__));
    // kickoff
    function wcvat_init()
    {
    }
    /**
     * init
     *
     * @return void
     */
    function gm_it_recht_kanzlei_init()
    {
    }
    /**
    * Email Attachments
    * @hook woocommerce_email_attachments
    * @param Array $attachments
    * @param String $status
    * @param WC_Order $order
    * @return Array
    */
    function gm_it_recht_kanzlei_email_attachments($attachments, $status, $order)
    {
    }
    /**
    * Backend Settings German Market 3.1
    *
    * wp-hook woocommerce_de_ui_options_global
    * @param Array $items
    * @return Array
    */
    function gm_it_recht_kanzlei_ui_left_menu_items($items)
    {
    }
    function gm_it_recht_kanzlei_gm_ui_render_options_documents()
    {
    }
    /**
    * Render Options for API Settings
    * 
    * @return void
    */
    function gm_it_recht_kanzlei_gm_ui_render_options_api_settings()
    {
    }
    /**
    * Load JS only in IT-Recht Kanzlei Tab
    *
    * @wp-hook current_screen
    * @return void
    **/
    function gm_it_recht_kanzlei_backend_scripts()
    {
    }
    /**
    * Load JS on documents tab
    *
    * @wp-hook admin_enqueue_scripts
    * @return void
    **/
    function gm_it_recht_kanzlei_backend_scripts_load_scripts()
    {
    }
    /**
     * init
     *
     * @return void
     */
    function german_market_billbee_init()
    {
    }
    /**
     * adds a small download button to the admin page for orders
     *
     * @hook woocommerce_admin_order_actions
     * @param Array $actions
     * @param WC_Order $order
     * @return Array
     */
    function gm_billbee_order_action($actions, $order)
    {
    }
    /**
     * enqueue css and file for link on shop order page
     *
     * @since 0.0.1
     * @access public
     * @static
     * @hook admin_enqueue_scripts
     * @return void
     */
    function gm_billbee_styles_and_scripts()
    {
    }
    /**
    * Get Default Nutritionals
    *
    * @return Array
    */
    function gm_fic_get_default_nutritionals()
    {
    }
    /**
    * Backend Settings German Market 3.1
    *
    * wp-hook woocommerce_de_ui_options_global
    * @param Array $items
    * @return Array
    */
    function gm_fic_woocommerce_de_ui_left_menu_items($items)
    {
    }
    /**
    * Render Options for global
    * 
    * @return void
    */
    function gm_fic_ui_render_options()
    {
    }
    /**
    * Add Product Meta
    *
    * @wp-hook woocommerce_product_options_general_product_data
    * @wp-hook woocommerce_product_options_general_product_data
    * @param Mixed $loop
    * @param Mixed $variation_data
    * @param Mixed $variation
    * @return void
    **/
    function gm_fic_product_options($loop = \NULL, $variation_data = \NULL, $variation = \NULL)
    {
    }
    /**
    * Save Product Meta
    *
    * @wp-hook woocommerce_process_product_meta
    * @wp-hook woocommerce_ajax_save_product_variations
    * @param Integer $post_id
    * @param WP_Post $post
    * @return void
    **/
    function gm_fic_product_options_save($post_id, $post = \NULL)
    {
    }
    /**
    * Ajax Update Variation Nutritional Values
    *
    * @wp-hook wp_ajax_gm_fic_product_update_variation
    * @wp-hook wp_ajax_nopriv_gm_fic_product_update_variation
    * @return void
    **/
    function gm_fic_product_update_variation()
    {
    }
    /**
    * Ajax Update Variation Allergens
    *
    * @wp-hook wp_ajax_gm_fic_product_update_variation_allergens
    * @wp-hook wp_ajax_nopriv_gm_fic_product_update_variation_allergens
    * @return void
    **/
    function gm_fic_product_update_variation_allergens()
    {
    }
    /**
    * Ajax Update Variation Ingredients
    *
    * @wp-hook wp_ajax_gm_fic_product_update_variation_ingredients
    * @wp-hook wp_ajax_nopriv_gm_fic_product_update_variation_ingredients
    * @return void
    **/
    function gm_fic_product_update_variation_ingredients()
    {
    }
    /**
    * Add Alcohol Content to Product Info
    *
    * @wp-hook wgm_product_summary_parts
    * @param Array $output_parts
    * @param WC_Product $product
    * @param String $hook
    * @return String
    **/
    function gm_fic_add_alcohol_content_to_product_info($output_parts, $product, $hook, $option_check = \true)
    {
    }
    /**
    * Make Markup
    *
    * @param String $value
    * @param String $unit
    * @return String
    **/
    function gm_fic_alcohol_get_markup($value, $unit)
    {
    }
    /**
    * Add item meta
    *
    * @wp-hook woocommerce_add_cart_item_data
    * @param Array $cart_item_data
    * @param Integer $product_id
    * @param Integer $variation_id
    * @return Array
    **/
    function gm_fic_woocommerce_add_cart_item_data($cart_item_data, $product_id, $variation_id)
    {
    }
    /**
    * Add item meta from session
    *
    * @wp-hook woocommerce_add_cart_item_data
    * @param Array $cart_item_data
    * @param Array $cart_item_session_data
    * @param String $cart_item_key
    * @return Array
    **/
    function gm_fic_woocommerce_get_cart_item_from_session($cart_item_data, $cart_item_session_data, $cart_item_key)
    {
    }
    /**
    * Show Item Meta in Checkout
    *
    * @wp-hook woocommerce_add_cart_item_data
    * @param Array $data
    * @param Array $cart_item
    * @return Array
    **/
    function gm_fic_woocommerce_get_item_data($data, $cart_item)
    {
    }
    /**
    * Store into order
    *
    * @wp-hook woocommerce_new_order_item
    * @param Integer $item_id
    * @param Object $item
    * @param Integer $order_id
    * @return void
    **/
    function gm_fic_woocommerce_add_order_item_meta_wc_3($item_id, $item, $order_id)
    {
    }
    /**
    * Add Tabs to Product Page
    *
    * @wp-hook woocommerce_product_tabs
    * @param Array $tabs
    * @return Array
    **/
    function gm_fic_product_tab($tabs)
    {
    }
    /**
    * return array with boolean if a tab has to be added
    *
    * @since 3.10.5.0.1
    * @param WC_Product $product
    * @return Array
    */
    function gm_fic_have_to_add_tabs($product)
    {
    }
    /**
    * Render Tab for Nutritional Values
    *
    * @return void
    **/
    function gm_fic_tab_content_nutritional_values()
    {
    }
    /**
    * Render Tab for Allergens
    *
    * @return void
    **/
    function gm_fic_tab_content_allergens()
    {
    }
    /**
    * Render Tab for Ingredients
    *
    * @return void
    **/
    function gm_fic_tab_content_ingredients()
    {
    }
    /**
    * Get Nutritional Values Table(ajax and none-ajax)
    *
    * @param Integer $id
    * @return void
    **/
    function gm_fic_tab_content_nutritional_values_by_id($id)
    {
    }
    /**
    * Get Allergens Table(ajax and none-ajax)
    *
    * @param Integer $id
    * @return void
    **/
    function gm_fic_tab_content_allergens_by_id($id)
    {
    }
    /**
    * Get Ingredient Table(ajax and none-ajax)
    *
    * @param Integer $id
    * @return void
    **/
    function gm_fic_tab_content_ingredients_by_id($id)
    {
    }
    /**
    * Register JS
    *
    * @wp-hook wp_enqueue_scripts
    * @return void
    **/
    function gm_fic_product_tab_scripts()
    {
    }
    /**
    * Register taxonomies
    *
    * @return void
    * @hook woocommerce_register_taxonomy
    *
    */
    function gm_fic_register_taxonomies()
    {
    }
    /**
     * init
     *
     * @return void
     */
    function german_market_fic_init()
    {
    }
    \define('MB_OVERLOAD_MAIL', 1);
    \define('MB_OVERLOAD_STRING', 2);
    \define('MB_OVERLOAD_REGEX', 4);
    /**
    * Send Voucher to sevdesk if order is marked as completed
    *
    * @since 	GM 3.7.1
    * @wp-hook 	woocommerce_order_status_completed
    * @param 	Integer $order_id
    * @return 	void
    */
    function sevdesk_woocommerce_status_completed($order_id, $old_status, $new_status)
    {
    }
    /**
    * Send Voucher to sevdesk if refund is created
    *
    * @since 	GM 3.7.1
    * @wp-hook 	woocommerce_create_refund
    * @param 	WC_Order_Refund $refund
    * @param 	Array $args
    * @return 	void
    */
    function sevdesk_woocommerce_create_refund($refund, $args)
    {
    }
    /**
    * API - send order
    *
    * @param WC_ORDER $order
    * @return String ("SUCCESS" or "ERROR: {your error Message}")
    */
    function sevdesk_woocomerce_api_send_order($order, $show_errors = \true)
    {
    }
    /**
    * API - send refund
    *
    * @param WC_ORDER $order
    * @return String ("SUCCESS" or "ERROR: {your error Message}")
    */
    function sevdesk_woocommerce_api_send_refund($refund, $show_errors = \true)
    {
    }
    /**
    * send refund as voucher to sevDesk
    *
    * @param Array $args
    * @return String
    */
    function sevdesk_woocommerce_api_send_voucher_refund($args, $show_errors = \true)
    {
    }
    /**
    * send order as voucher to sevDesk
    *
    * @param Array $args
    * @return String
    */
    function sevdesk_woocommerce_api_send_voucher($args, $show_errors = \true)
    {
    }
    /**
    * create guest user data in sevDesk
    *
    * @param Array $args
    * @return Integer
    */
    function sevdesk_woocommerce_api_contact_guest_user($args)
    {
    }
    /**
    * create or update user data in sevDesk
    *
    * @param Integer $wordpress_user_id
    * @return Integer
    */
    function sevdesk_woocommerce_api_contact($wordpress_user_id, $args)
    {
    }
    /**
    * build company array from wordpress user_id
    *
    * @param Integer $wordpress_user_id
    * @return Mixed: false (no company) / Array
    */
    function sevdesk_woocommerce_api_contact_build_company_array($wordpress_user_id, $order = \null)
    {
    }
    /**
    * build company array from order for guest users
    *
    * @param Integer $wordpress_user_id
    * @return Mixed: false (no company) / Array
    */
    function sevdesk_woocommerce_api_contact_build_company_array_guest($order)
    {
    }
    /**
    * build customer array from order for guest user
    *
    * @param WC_Order
    * @return Array
    */
    function sevdesk_woocommerce_api_contact_build_customer_guest_array($order)
    {
    }
    /**
    * build customer array from wordpress user_id
    *
    * @param Integer $wordpress_user_id
    * @return Array
    */
    function sevdesk_woocommerce_api_contact_build_customer_array($wordpress_user_id, $order = \null)
    {
    }
    /**
    * get customer vat number by order or wordpress_user_id
    *
    * @param Integer $wordpress_user_id
    * @return Array
    */
    function sevdesk_get_vat_number_of_order_and_wordpress_user_id($order = \null, $wordpress_user_id = \null)
    {
    }
    /**
    * add additional customer data
    *
    * @param String $endpoint
    * @param Integer $wordpress_user_id
    * @param Integer $sevdesk_user_id
    * @param Array $args
    * @param Integer $address_category
    * @return Array
    */
    function sevdesk_woocommerce_api_contact_add_data($endpoint, $wordpress_user_id, $sevdesk_user_id, $args, $address_category = 47, $update = \false, $addresses_and_communication_ways = array())
    {
    }
    /**
    * add additional customer data for guest users
    *
    * @param String $endpoint
    * @param Integer $wordpress_user_id
    * @param Integer $sevdesk_user_id
    * @param Array $args
    * @param Integer $address_category
    * @return Array
    */
    function sevdesk_woocommerce_api_contact_add_data_guest($endpoint, $order, $sevdesk_user_id, $args, $address_category = 47, $update = \false, $user_data = array(), $addresses_and_communication_ways = array())
    {
    }
    /**
    * this functions checks if the value of an endpoint (email, phone, address)
    * already exists for a sevdesk user. It returns true if this data is new.
    *
    * @param String $sevdes_user_id
    * @param Array $data
    * @param String $endpoint
    * @param Array $args
    * @param Integer $address_category
    * @return Boolean
    */
    function sevdesk_woocommerce_update_sevdesk_user_data($sevdesk_user_id, $data, $endpoint, $args, $address_category, $user_data)
    {
    }
    /**
    * get sevdesk_user bei sevdesk_user_id
    *
    * @param Integer $sevdesk_user_id
    * @return -1 OR Array
    */
    function sevdesk_woocommerce_api_contact_get_by_customer_number($sevdesk_customer_number, $args)
    {
    }
    /**
    * get all address data and communication ways (phone & email) of a sevdesk user
    *
    * @param String $sevdesk_user_id
    * @param Array $args
    * @return Array
    */
    function sevdesk_woocommerce_get_contact_addresses_and_communication_ways($sevdesk_user_id, $args)
    {
    }
    /**
    * check if a sevdesk user with the same email exists
    * and return the sevdesk user id
    *
    * @param String $email
    * @param Array $args
    * @return String
    */
    function sevdesk_woocommerce_api_contact_get_by_email($email, $args)
    {
    }
    /**
    * build temp file of invoice pdf
    *
    * @param Array $args
    * @return String
    */
    function sevdesk_woocommerce_api_build_temp_file($args, $show_errors = \true)
    {
    }
    /**
    * get voucher status (exists or not)
    *
    * @param Integer $args
    * @return Boolean
    */
    function sevdesk_woocommerce_api_get_vouchers_status($voucher_id, $show_errors = \true)
    {
    }
    /**
    * Get api token
    * @return String
    */
    function sevdesk_woocommerce_api_get_api_token($show_errors = \true)
    {
    }
    /**
    * Get invoice pdf, path to file
    * @param WC_Order $order
    * @return String
    */
    function sevdesk_woocommerce_api_get_invoice_pdf($order)
    {
    }
    /**
    * Get refund pdf, path to file
    * @param WC_Order $refund
    * @return String
    */
    function sevdesk_woocommerce_api_get_refund_pdf($refund)
    {
    }
    /**
    * check if we can use the order
    * @param WC_Order $order
    * @return WC_Order
    */
    function sevdesk_woocommerce_api_check_order($order)
    {
    }
    /**
    * Markup for error message
    * @param String $message
    * @return String
    */
    function sevdesk_woocommerce_api_get_error_message($message = '')
    {
    }
    /**
    * Check if curl response is an error
    * @param String $response
    * @return void (exit if error)
    */
    function sevdesk_woocommerce_api_curl_error_validaton($response)
    {
    }
    /**
    * get base_url
    * @return String
    */
    function sevdesk_woocommerce_api_get_base_url()
    {
    }
    /**
    * get default value for strings of options 'sevdesk_voucher_description_order' or 'sevdesk_voucher_description_reund'
    * depending on the former setting 'woocommerce_de_sevdesk_voucher_number'
    *
    * @since 3.9.2
    * @param String $option_key
    * @return String
    */
    function sevdesk_woocommerce_get_default_value($option_key)
    {
    }
    /**
    * Get type of check account
    *
    * @since 3.11.1.4
    * @param Integer $checkaccount_id
    * @return String
    **/
    function sevdesk_woocommerce_get_type_of_check_account($checkaccount_id)
    {
    }
    /**
    * Get User Agent for CUrl
    *
    * @since 3.16
    * @return String
    **/
    function sevdesk_woocommerce_get_user_agent()
    {
    }
    /**
    * Backend Settings German Market 3.1
    *
    * wp-hook woocommerce_de_ui_left_menu_items
    * @param Array $items
    * @return Array
    */
    function sevdesk_woocommerce_de_ui_left_menu_items($items)
    {
    }
    /**
    * Render Options for global
    * 
    * @return void
    */
    function sevdesk_woocommerce_de_ui_render_options()
    {
    }
    /**
    * Individual Accounts: Save Meta Data
    *
    * @since 3.8.2 
    * @wp-hook woocommerce_process_product_meta
    * @param Integer $post_id
    * @param WP_Post $post
    * @return void 
    **/
    function sevdesk_woocommerce_accounts_save_meta($post_id, $post = \NULL)
    {
    }
    /**
    * Individual Accounts: Add Product Tab
    *
    * @since 3.8.2 
    * @wp-hook woocommerce_product_data_tabs
    * @param Array $tabs
    * @return Array 
    **/
    function sevdesk_woocommerce_accounts_product_tab($tabs)
    {
    }
    /**
    * Individual Accounts: Render Product Tab
    *
    * @since 3.8.2 
    * @wp-hook woocommerce_product_data_panels
    * @return void 
    **/
    function sevdesk_woocommerce_accounts_product_panel()
    {
    }
    /**
    * Init actions and hooks needed for the check account field in gateways
    *
    * @since 3.8.2
    * @wp-hook admin_init
    * @return void
    */
    function woocommerce_de_sevdesk_gateway_check_accounts_init()
    {
    }
    /**
    * Field in Payment Gateways
    *
    * @since 3.8.2
    * @param Array $settings
    * @return Array
    */
    function woocommerce_de_sevdesk_gateway_check_accounts_field($settings)
    {
    }
    /**
    * init actions and hooks needed for the edit-shop screen
    *
    * wp-hook current_screen
    * @return void
    */
    function sevdesk_woocommerce_edit_shop_order()
    {
    }
    /**
    * ajax handler, click on button on edit_shop-order screen
    *
    * wp-hook wp_ajax_$action (wp_ajax_sevdesk_woocommerce_edit_shop_order)
    * @return exit();
    */
    function sevdesk_woocommerce_edit_shop_order_ajax()
    {
    }
    /**
    * ajax handler, click on button on page=wgm-refunds screen
    *
    * wp-hook wp_ajax_$action (wp_ajax_sevdesk_woocommerce_edit_shop_order_refund)
    * @return exit();
    */
    function sevdesk_woocommerce_edit_shop_order_ajax_refund()
    {
    }
    /**
    * Output Icon
    *
    * wp-hook woocommerce_admin_order_actions_end
    * @param WC_Order $order
    * @return void
    */
    function sevdesk_woocommerce_edit_shop_order_icon($order)
    {
    }
    /**
    * adds a small download button to the admin page for refunds
    *
    * @since WGM 3.0
    * @access public
    * @static 
    * @hook wgm_refunds_actions
    * @param String $string
    * @param shop_order_refund $refund
    * @return String
    */
    function sevdesk_woocommerce_edit_refund_icon($actions, $refund)
    {
    }
    /**
    * Enqueue scripts and styles
    *
    * wp-hook admin_enqueue_scripts
    * @return void
    */
    function sevdesk_woocommerce_edit_shop_order_styles_and_scripts()
    {
    }
    /**
     * init
     *
     * @return void
     */
    function sevdesk_woocommerce_init()
    {
    }
    /**
    * Add German Market Submenu
    * 
    * @wp-hook woocommerce_de_ui_left_menu_items
    * @param Array
    * @return Array
    */
    function german_market_temporary_tax_reduction_settings($items)
    {
    }
    /**
    * Render German Market Submenu
    * 
    * @return Array
    */
    function german_market_temporary_tax_reduction_render_settings()
    {
    }
    /**
    * Returns wheter option is activated and current time is between start and end date
    * 
    * @return Boolean
    */
    function german_market_temporary_tax_reduction_find_is_frontend_activated()
    {
    }
    /**
    * Manipulate Tax Rates
    * 
    * @wp-hook woocommerce_find_rates
    * @param Array $matched_tax_rates
    * @param Array args
    * @return Array
    */
    function german_market_temporary_tax_reduction_find_rates($matched_tax_rates, $args = array())
    {
    }
    /**
    * Manipulate Tax Rate Outpu
    * 
    * @wp-hook woocommerce_rate_percent
    * @param String $rate_percent
    * @param Integer rate_id
    * @return String
    */
    function german_market_temporary_tax_reduction_rate_percent($rate_percent, $rate_id)
    {
    }
    /**
    * Save if temporary tax reduction has been applied
    * 
    * @wp-hook woocommerce_checkout_order_processed
    * @param Integer $order_id
    * @param Array posted_data
    * @param WC_Order $order
    * @return void
    */
    function german_market_temporary_tax_reduction_checkout_order_processed($order_id, $posted_data, $order)
    {
    }
    /**
    * Add Checkbox to backend
    * 
    * @wp-hook woocommerce_admin_order_data_after_order_details
    * @param WC_Order $order
    * @return void
    */
    function german_market_temporary_tax_reduction_backend_checkbox($order)
    {
    }
    /**
    * Save Checkbox in backend
    * 
    * @wp-hook woocommerce_admin_order_data_after_order_details
    * @param Integer $post_id
    * @param WP_Post $post
    * @return void
    */
    function german_market_temporary_reduction_tax_process_shop_order_meta($order_id, $post_or_order_object)
    {
    }
    /**
    * Used before output orders (emails, pdfs) and recalculation
    * 
    * @param WC_Order $order
    * @return void
    */
    function german_market_temporary_tax_reduction_add_hooks_start($order)
    {
    }
    /**
    * Used after output orders (emails, pdfs) and recalculation
    * 
    * @param WC_Order $order
    * @return void
    */
    function german_market_temporary_tax_reduction_add_hooks_end($order)
    {
    }
    /**
    * Check Meta before recaculating taxes
    * 
    * @wp-hook woocommerce_order_before_calculate_taxes
    * @param Array $args
    * @param WC_Order $order
    * @return void
    */
    function german_market_temporary_tax_reduction_order_before_calculate_taxes($args, $order)
    {
    }
    /**
    * Check Meta before output taxes in Invoice PDFs
    * 
    * @wp-hook wp_wc_invoice_pdf_start_template
    * @param Array $args
    * @return void
    */
    function german_market_temporary_tax_reduction_wp_wc_invoice_pdf_start_template($args)
    {
    }
    /**
    * Check Meta before output taxes in Invoice PDFs
    * 
    * @wp-hook wp_wc_invoice_pdf_end_template
    * @param Array $args
    * @return void
    */
    function german_market_temporary_tax_reduction_wp_wc_invoice_pdf_end_template($args)
    {
    }
    /**
    * Check Meta before output taxes in emails
    * 
    * @wp-hook woocommerce_email_order_details
    * @param WC_Order $order
    * @return void
    */
    function german_market_temporary_tax_reduction_email_order_details($order)
    {
    }
    /**
    * Check Meta before output taxes in emails
    * 
    * @wp-hook woocommerce_email_customer_details
    * @param WC_Order $order
    * @return void
    */
    function german_market_temporary_tax_reduction_email_customer_details($order)
    {
    }
    /**
    * General Tax output
    * 
    * @wp-hook wgm_get_totals_tax_string
    * @param String $tax_total_string
    * @param Array $tax_string_array
    * @param String $tax_totals
    * @param Mixed $tax_display
    * @return String
    */
    function german_market_temporary_tax_reduction_wgm_get_totals_tax_string($tax_total_string, $tax_string_array, $tax_totals, $tax_display)
    {
    }
    /**
    * General Tax output
    * 
    * @wp-hook wgm_product_summary_parts_after
    * @param Array $output_parts
    * @param WC_Product $product
    * @param String $hook
    * @return Array
    */
    function german_market_temporary_tax_reduction_wgm_product_summary_parts_after($output_parts, $product, $hook)
    {
    }
    /**
    * General Tax output
    * 
    * @wp-hook wgm_get_tax_line
    * @param String $tax_line
    * @param WC_Product $product
    * @return String
    */
    function german_market_temporary_tax_reduction_wgm_get_tax_line($tax_line, $product)
    {
    }
    /**
    * General Tax output
    * 
    * @wp-hook wgm_get_excl_incl_tax_string
    * @param String $msg
    * @param String $type
    * @param String $rate
    * @param String $amount
    * @return String
    */
    function german_market_temporary_tax_reduction_wgm_get_excl_incl_tax_string($msg, $type, $rate, $amount)
    {
    }
    /**
    * General Tax output, deactivate cart.php of GM
    * 
    * @wp-hook german_market_add_woocommerce_de_templates_force_original
    * @param Boolean $boolean
    * @param String $template_name
    * @return Boolean
    */
    function german_market_temporary_tax_reduction_cart_template($boolean, $template_name)
    {
    }
    /**
    * General Tax output, Mini cart
    * 
    * @wp-hook german_market_mini_cart_price_tax
    * @param String $string
    * @return String
    */
    function german_market_temporary_tax_reduction_mini_cart_price_tax($string)
    {
    }
    /**
     * Setup function for our plugin.
     *
     * @wp-hook plugins_loaded
     *
     * @return  void
     */
    function wcevc_setup()
    {
    }
    /**
     * Callback for activating the plugin.
     *
     * @return  void
     */
    function wcevc_activate()
    {
    }
    /**
    * Send Voucher to lexoffice if order is marked as completed
    *
    * @since 	GM 3.7.1
    * @version 	3.22.1.3
    * @wp-hook 	woocommerce_order_status_completed
    * @param 	Integer $order_id
    * @return 	void
    */
    function lexoffice_woocommerce_status_completed($order_id, $old_status, $new_status)
    {
    }
    /**
    * Send Voucher to lexoffice if refund is created
    *
    * @since 	GM 3.7.1
    * @version 	3.22.1.3
    * @wp-hook 	woocommerce_create_refund
    * @param 	WC_Order_Refund $refund
    * @param 	Array $args
    * @return 	void
    */
    function lexoffice_woocommerce_create_refund($refund, $args)
    {
    }
    /**
    * API - send voucher
    *
    * @param WC_ORDER $order
    * @return String ("SUCCESS" or "ERROR: {your error Message}")
    */
    function lexoffice_woocomerce_api_send_voucher($order, $show_errors = \true)
    {
    }
    /**
    * API - create voucher, post method
    *
    * @param WC_ORDER $order
    * @return String
    */
    function lexoffice_woocomerce_api_send_voucher_post($order, $show_errors = \true)
    {
    }
    /**
    * API - update voucher, put method
    *
    * @param WC_ORDER $order || Refund
    * @return String
    */
    function lexoffice_woocomerce_api_send_voucher_put($order, $show_errors = \true)
    {
    }
    /**
    * API - send refund
    *
    * @param WC_ORDER $order
    * @return String ("SUCCESS" or "ERROR: {your error Message}")
    */
    function lexoffice_woocommerce_api_send_refund($refund, $show_errors = \true)
    {
    }
    /**
    * API - create refund voucher, post method
    *
    * @param WC_ORDER $order
    * @return String
    */
    function lexoffice_woocomerce_api_send_refund_post($refund, $show_errors = \true)
    {
    }
    /**
    * API - update refund, put method
    *
    * @param WC_ORDER $order || Refund
    * @return String
    */
    function lexoffice_woocomerce_api_send_refund_put($refund, $show_errors = \true)
    {
    }
    /**
    * Create Curlopt Postfields from a refund
    *
    * @param WC_Order_Refund $refund
    * @param String $file
    * @return String (JSON formated)
    */
    function lexoffice_woocomerce_api_refund_to_curlopt_postfields($refund, $file = \null, $show_errors = \true)
    {
    }
    /**
    * Create Curlopt Postfields
    *
    * @param WC_ORDER $order
    * @param String $file
    * @return String (JSON formated)
    */
    function lexoffice_woocomerce_api_order_to_curlopt_postfields($order, $file = \null, $show_errors = \true)
    {
    }
    /**
    * API - send invoice pdf
    *
    * @param WC_ORDER $order
    * @return String json response
    */
    function lexoffice_woocomerce_api_upload_invoice_pdf($voucher_id, $order, $is_refund = \false, $show_errors = \true)
    {
    }
    /**
    * Get voucher status
    *
    * @param String $voucher_id
    * @param $return_bool
    * @return Boolean (true if voucher exists) | Array if $return_bool is set to false
    */
    function lexoffice_woocommerce_api_get_vouchers_status($voucher_id, $return_bool = \true)
    {
    }
    /**
    * API - get auth bearer, OAuth2 authorization
    * @return String
    */
    function lexoffice_woocomerce_api_get_bearer()
    {
    }
    /**
    * Revoke Authorization
    */
    function lexoffice_woocomerce_api_revoke_auth()
    {
    }
    /**
    * Get beauty error text from json string if possible
    * @param String
    * @return String
    */
    function lexoffice_woocomerce_get_error_text($json, $order = \null)
    {
    }
    /**
    * Get all contacts
    * @return Array
    */
    function lexoffice_woocommerce_get_all_contacts()
    {
    }
    /**
    * Create a new lexoffice user
    * @param WP_USer $wp_user
    * @param WC_Order $order
    * @return String (lexoffice contact id)
    */
    function lexoffice_woocommerce_create_new_user($wp_user, $order = \null)
    {
    }
    /**
    * Build array for wp_user to be send to lexoffice
    * @param WP_User $wp_user
    * @param WP_Order $order
    * @return array
    */
    function lexoffice_woocommerce_build_customer_array($wp_user, $order = \null, $lexoffice_user_data = \null)
    {
    }
    /**
    * Manipulate addresses for exceptions (e.g. Northern Ireland)
    *
    * @param Object $address
    * @return Object
    **/
    function lexoffice_woocommerce_api_exceptions_for_addresses($address)
    {
    }
    /**
    * Use Collective Contact or lexoffice Users when sending the voucher
    *
    * @param Array $array
    * @param WP_User $user
    * @param WC_Order $order
    * @return Array
    **/
    function lexoffice_woocommerce_api_add_user_to_voucher($array, $user, $order = \null)
    {
    }
    /**
    * Get all tax rates used in the shop
    *
    * @return Array
    **/
    function lexoffice_woocommerce_api_get_all_rates_in_shop()
    {
    }
    /**
    * Get lexoffice oss setting info
    *
    * @return String
    **/
    function lexoffice_woocommerce_api_get_oss_info()
    {
    }
    /**
    * Update existing lexoffice user
    *
    * @param WP_User $user
    * @param WC_Order $order
    * @param Array  $response_array
    * @param Integer $lexoffice_user_id
    *
    * @return void
    **/
    function lexoffice_woocommerce_api_update_user($user, $order, $response_array, $lexoffice_user_id)
    {
    }
    /**
    * Before a refund is transmitted to lexoffice => transmit order (if not done yet)
    *
    * @since 3.22.1.1
    * @wp-hook woocommerce_de_lexoffice_api_before_send_refund
    * @param WC_Order $order
    * @param WC_Order_refund $refund
    * @return void
    */
    function lexoffice_send_order_before_refund($order, $refund)
    {
    }
    /**
    * Backend Settings German Market 3.1
    *
    * wp-hook woocommerce_de_ui_options_global
    * @param Array $items
    * @return Array
    */
    function lexoffice_woocommerce_de_ui_left_menu_items($items)
    {
    }
    /**
    * Render Options for global
    * 
    * @return void
    */
    function lexoffice_woocommerce_de_ui_render_options()
    {
    }
    /**
    * Update bearer when saving options
    * 
    * @wp-hook woocommerce_de_ui_update_options
    * @param Array $options
    * @return void
    */
    function lexoffice_woocommerce_de_ui_update_options($options)
    {
    }
    /**
    * init actions and hooks needed for the due date
    *
    * wp-hook init
    * @return void
    */
    function lexoffice_woocommerce_due_date_init()
    {
    }
    /**
    * add "Due Date for Lexoffice" to gateway settings
    *
    * wp-hook woocommerce_settings_api_form_fields_ . {gateway_id}
    * @param Array $settings
    * @return Array
    */
    function lexoffice_woocommerce_due_date_settings_field($settings)
    {
    }
    /**
    * init actions and hooks needed for the edit-shop screen
    *
    * wp-hook current_screen
    * @return void
    */
    function lexoffice_woocommerce_edit_shop_order()
    {
    }
    /**
    * Render Setting fiels
    *
    * @wp-hook show_user_profile, edit_user_profile
    * @param WP_User $user
    * @return void
    **/
    function lexoffice_woocommerce_profile_fields($user)
    {
    }
    /**
    * Save Profile Settings
    *
    * @wp-hook personal_options_update, edit_user_profile_update
    * @param Integer $user_id
    * @return void
    **/
    function lexoffice_woocommerce_save_profile_fields($user_id)
    {
    }
    /**
    * ajax handler, click on button on edit_shop-order screen
    *
    * wp-hook wp_ajax_$action (wp_ajax_lexoffice_woocommerce_edit_shop_order)
    * @return exit();
    */
    function lexoffice_woocommerce_edit_shop_order_ajax()
    {
    }
    /**
    * ajax handler, click on button on page=wgm-refunds screen
    *
    * wp-hook wp_ajax_$action (wp_ajax_lexoffice_woocommerce_edit_shop_order_refund)
    * @return exit();
    */
    function lexoffice_woocommerce_edit_shop_order_ajax_refund()
    {
    }
    /**
    * Output Icon
    *
    * wp-hook woocommerce_admin_order_actions_end
    * @param WC_Order $order
    * @return void
    */
    function lexoffice_woocommerce_edit_shop_order_icon($order)
    {
    }
    /**
    * adds a small download button to the admin page for refunds
    *
    * @since WGM 3.0
    * @access public
    * @static 
    * @hook wgm_refunds_actions
    * @param String $string
    * @param shop_order_refund $refund
    * @return String
    */
    function lexoffice_woocommerce_edit_refund_icon($actions, $refund)
    {
    }
    /**
    * Enqueue scripts and styles
    *
    * wp-hook admin_enqueue_scripts
    * @return void
    */
    function lexoffice_woocommerce_edit_shop_order_styles_and_scripts()
    {
    }
    /**
     * init
     *
     * @return void
     */
    function lexoffice_woocommerce_init()
    {
    }
    /**
     * init
     *
     * @return void
     */
    function gm_protected_shops_init()
    {
    }
    /**
    * Check whether the cronjob has to run
    *
    * wp-hook wp_loaded
    * @return void
    */
    function gm_protected_shops_cronjob_checker()
    {
    }
    /**
    * Email Attachments
    * @hook woocommerce_email_attachments
    * @param Array $attachments
    * @param String $status
    * @param WC_Order $order
    * @return Array
    */
    function gm_protected_shops_email_attachments($attachments, $status, $order)
    {
    }
    /**
    * runs the cronjob, updates page content if neccessary
    *
    * @return void
    */
    function gm_protected_shops_cronjob()
    {
    }
    /**
    * Backend Settings German Market 3.1
    *
    * wp-hook woocommerce_de_ui_options_global
    * @param Array $items
    * @return Array
    */
    function gm_protected_shops_ui_left_menu_items($items)
    {
    }
    /**
    * Render Options for Auto Update of Page Content - Settings
    * 
    * @return void
    */
    function gm_protected_shops_gm_ui_render_options_uto_update_of_page_content_settings()
    {
    }
    /**
    * Render Options for Documents
    * 
    * @return void
    */
    function gm_protected_shops_gm_ui_render_options_documents()
    {
    }
    /**
    * Render Options for API Settings
    * 
    * @return void
    */
    function gm_protected_shops_gm_ui_render_options_api_settings()
    {
    }
    /**
    * Load JS and CSS of questionary library only on sub_tab questionary
    *
    * @wp-hook current_screen
    * @return void
    **/
    function gm_protected_shops_questionary_library()
    {
    }
    /**
    * Load JS on documents tab
    *
    * @wp-hook admin_enqueue_scripts
    * @return void
    **/
    function gm_protected_shops_documents_js()
    {
    }
    /**
    * Load JS and CSS of questionary library
    *
    * @wp-hook admin_enqueue_scripts
    * @return void
    **/
    function gm_protected_shops_questionary_library_js_and_css()
    {
    }
    /**
    * Questionary Tab
    * 
    * @return void
    */
    function gm_protected_shops_gm_ui_render_options_questionary()
    {
    }
    /**
    * Return json questionary for ps js library
    * 
    * @wp-hook wp_ajax_gm_ps_get_questionary
    * @return void
    */
    function gm_protected_shops_ajax_get_questionary()
    {
    }
    /** 
    * Save questionary for ps js library
    * 
    * @wp-hook wp_ajax_gm_ps_save_questionary
    * @return void
    */
    function gm_protected_shops_ajax_save_questionary()
    {
    }
    /** 
    * Ajax for getting pdf or docx document
    * 
    * @wp-hook wp_ajax_gm_ps_download_documents
    * @return void
    */
    function gm_protected_shops_ajax_download_documents()
    {
    }
    /** 
    * Ajax to save content into page
    * 
    * @wp-hook wp_ajax_gm_ps_save_page
    * @return void
    */
    function gm_protected_shops_ajax_save_page()
    {
    }
    /**
    * Update cronjob settings when saving options and all documents that needs email attachments
    * 
    * @wp-hook woocommerce_de_ui_update_options
    * @param Array $options
    * @return void
    */
    function gm_protected_shops_cronjob_helper_save_settings($options)
    {
    }
    function testTimeMemory()
    {
    }
    function arraycopy($srcArray, $srcPos, $destArray, $destPos, $length)
    {
    }
    function hashCode($s)
    {
    }
    function numberOfTrailingZeros($i)
    {
    }
    function uRShift($a, $b)
    {
    }
    function sdvig3($a, $b)
    {
    }
    function floatToIntBits($float_val)
    {
    }
    function fill_array($index, $count, $value)
    {
    }
    function composerRequire8d11275db931fd436ade8efabs1bf1079($fileIdentifier, $file)
    {
    }
    /**
     * Triggers a silenced deprecation notice.
     *
     * @param string $package The name of the Composer package that is triggering the deprecation
     * @param string $version The version of the package that introduced the deprecation
     * @param string $message The message of the deprecation
     * @param mixed  ...$args Values to insert in the message using printf() formatting
     *
     * @author Nicolas Grekas <p@tchwork.com>
     */
    function trigger_deprecation(string $package, string $version, string $message, mixed ...$args) : void
    {
    }
    /**
     * ----------------------------------------------------------------------
     *  
     * Copyright (c) 2006-2011 Khaled Al-Shamaa.
     *  
     * http://www.ar-php.org
     *  
     * PHP Version 5 
     *  
     * ----------------------------------------------------------------------
     *  
     * LICENSE
     *
     * This program is open source product; you can redistribute it and/or
     * modify it under the terms of the GNU Lesser General Public License (LGPL)
     * as published by the Free Software Foundation; either version 3
     * of the License, or (at your option) any later version.
     * 
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU Lesser General Public License for more details.
     *  
     * You should have received a copy of the GNU Lesser General Public License
     * along with this program.  If not, see <http://www.gnu.org/licenses/lgpl.txt>.
     *  
     * ----------------------------------------------------------------------
     *  
     * Class Name: Functions to normalise Arabic text.
     *  
     * Filename:   ArUnicode.constants.php
     *  
     * Original    Author(s): Djihed Afifi <djihed@gmail.com>
     *  
     * Purpose:    Arabic Unicode code point constants. To be used by other classes. 
     *  
     * ----------------------------------------------------------------------
     *  
     * This is normally a private file that is used by the ArNormalise class.
     *
     * This file contains the Arabic Unicode code points.
     *
     * It also contains a map the maps the Arabic joined characters code
     * points (e.g Baa' in the middle of a word) with the original letter 
     * (e.g Baa).
     *
     * Code to load this file is present in the constructor of ArNormalise.
     *
     * @category  I18N 
     * @package   Arabic
     * @author    Djihed Afifi <djihed@gmail.com>
     * @copyright 2006-2010 Khaled Al-Shamaa
     *    
     * @license   LGPL <http://www.gnu.org/licenses/lgpl.txt>
     * @link      http://www.ar-php.org 
     */
    /**
     * Function to convert the code points to entites.
     *  
     * @param integer $u HTML entity number for Arabic character
     *                    
     * @return string Returns convert Arabic character encoding 
     *                from HTML entities to UTF-8
     */
    function unichr($u)
    {
    }
    /**
     * A map of Arabic attached forms of characters to original characters
     */
    $ligature_map = array(\unichr(0xfe80) => \unichr(0x621), \unichr(0xfe81) => \unichr(0x622), \unichr(0xfe82) => \unichr(0x622), \unichr(0xfe83) => \unichr(0x623), \unichr(0xfe84) => \unichr(0x623), \unichr(0xfe85) => \unichr(0x624), \unichr(0xfe86) => \unichr(0x624), \unichr(0xfe87) => \unichr(0x625), \unichr(0xfe88) => \unichr(0x625), \unichr(0xfe89) => \unichr(0x626), \unichr(0xfe8b) => \unichr(0x626), \unichr(0xfe8c) => \unichr(0x626), \unichr(0xfe8a) => \unichr(0x626), \unichr(0xfe8d) => \unichr(0x627), \unichr(0xfe8e) => \unichr(0x627), \unichr(0xfe8f) => \unichr(0x628), \unichr(0xfe91) => \unichr(0x628), \unichr(0xfe92) => \unichr(0x628), \unichr(0xfe90) => \unichr(0x628), \unichr(0xfe93) => \unichr(0x629), \unichr(0xfe94) => \unichr(0x629), \unichr(0xfe95) => \unichr(0x62a), \unichr(0xfe97) => \unichr(0x62a), \unichr(0xfe98) => \unichr(0x62a), \unichr(0xfe96) => \unichr(0x62a), \unichr(0xfe99) => \unichr(0x62b), \unichr(0xfe9b) => \unichr(0x62b), \unichr(0xfe9c) => \unichr(0x62b), \unichr(0xfe9a) => \unichr(0x62b), \unichr(0xfe9d) => \unichr(0x62c), \unichr(0xfe9f) => \unichr(0x62c), \unichr(0xfea0) => \unichr(0x62c), \unichr(0xfe9e) => \unichr(0x62c), \unichr(0xfea1) => \unichr(0x62d), \unichr(0xfea3) => \unichr(0x62d), \unichr(0xfea4) => \unichr(0x62d), \unichr(0xfea2) => \unichr(0x62d), \unichr(0xfea5) => \unichr(0x62e), \unichr(0xfea7) => \unichr(0x62e), \unichr(0xfea8) => \unichr(0x62e), \unichr(0xfea6) => \unichr(0x62e), \unichr(0xfea9) => \unichr(0x62f), \unichr(0xfeaa) => \unichr(0x62f), \unichr(0xfeab) => \unichr(0x630), \unichr(0xfeac) => \unichr(0x630), \unichr(0xfead) => \unichr(0x631), \unichr(0xfeae) => \unichr(0x631), \unichr(0xfeaf) => \unichr(0x632), \unichr(0xfeb0) => \unichr(0x632), \unichr(0xfeb1) => \unichr(0x633), \unichr(0xfeb3) => \unichr(0x633), \unichr(0xfeb4) => \unichr(0x633), \unichr(0xfeb2) => \unichr(0x633), \unichr(0xfeb5) => \unichr(0x634), \unichr(0xfeb7) => \unichr(0x634), \unichr(0xfeb8) => \unichr(0x634), \unichr(0xfeb6) => \unichr(0x634), \unichr(0xfeb9) => \unichr(0x635), \unichr(0xfebb) => \unichr(0x635), \unichr(0xfebc) => \unichr(0x635), \unichr(0xfeba) => \unichr(0x635), \unichr(0xfebd) => \unichr(0x636), \unichr(0xfebf) => \unichr(0x636), \unichr(0xfec0) => \unichr(0x636), \unichr(0xfebe) => \unichr(0x636), \unichr(0xfec1) => \unichr(0x637), \unichr(0xfec3) => \unichr(0x637), \unichr(0xfec4) => \unichr(0x637), \unichr(0xfec2) => \unichr(0x637), \unichr(0xfec5) => \unichr(0x638), \unichr(0xfec7) => \unichr(0x638), \unichr(0xfec8) => \unichr(0x638), \unichr(0xfec6) => \unichr(0x638), \unichr(0xfec9) => \unichr(0x639), \unichr(0xfecb) => \unichr(0x639), \unichr(0xfecc) => \unichr(0x639), \unichr(0xfeca) => \unichr(0x639), \unichr(0xfecd) => \unichr(0x63a), \unichr(0xfecf) => \unichr(0x63a), \unichr(0xfed0) => \unichr(0x63a), \unichr(0xfece) => \unichr(0x63a), \unichr(0x640) => \unichr(0x640), \unichr(0xfed1) => \unichr(0x641), \unichr(0xfed3) => \unichr(0x641), \unichr(0xfed4) => \unichr(0x641), \unichr(0xfed2) => \unichr(0x641), \unichr(0xfed5) => \unichr(0x642), \unichr(0xfed7) => \unichr(0x642), \unichr(0xfed8) => \unichr(0x642), \unichr(0xfed6) => \unichr(0x642), \unichr(0xfed9) => \unichr(0x643), \unichr(0xfedb) => \unichr(0x643), \unichr(0xfedc) => \unichr(0x643), \unichr(0xfeda) => \unichr(0x643), \unichr(0xfedd) => \unichr(0x644), \unichr(0xfedf) => \unichr(0x644), \unichr(0xfee0) => \unichr(0x644), \unichr(0xfede) => \unichr(0x644), \unichr(0xfee1) => \unichr(0x645), \unichr(0xfee3) => \unichr(0x645), \unichr(0xfee4) => \unichr(0x645), \unichr(0xfee2) => \unichr(0x645), \unichr(0xfee5) => \unichr(0x646), \unichr(0xfee7) => \unichr(0x646), \unichr(0xfee8) => \unichr(0x646), \unichr(0xfee6) => \unichr(0x646), \unichr(0xfee9) => \unichr(0x647), \unichr(0xfeeb) => \unichr(0x647), \unichr(0xfeec) => \unichr(0x647), \unichr(0xfeea) => \unichr(0x647), \unichr(0xfeed) => \unichr(0x648), \unichr(0xfeee) => \unichr(0x648), \unichr(0xfeef) => \unichr(0x649), \unichr(0xfef0) => \unichr(0x649), \unichr(0xfef1) => \unichr(0x64a), \unichr(0xfef3) => \unichr(0x64a), \unichr(0xfef4) => \unichr(0x64a), \unichr(0xfef2) => \unichr(0x64a));
    /**
     * Arabic unicode code points
     **/
    $char_names = array(
        'COMMA' => \unichr(0x60c),
        'SEMICOLON' => \unichr(0x61b),
        'QUESTION' => \unichr(0x61f),
        'HAMZA' => \unichr(0x621),
        'ALEF_MADDA' => \unichr(0x622),
        'ALEF_HAMZA_ABOVE' => \unichr(0x623),
        'WAW_HAMZA' => \unichr(0x624),
        'ALEF_HAMZA_BELOW' => \unichr(0x625),
        'YEH_HAMZA' => \unichr(0x626),
        'ALEF' => \unichr(0x627),
        'BEH' => \unichr(0x628),
        'TEH_MARBUTA' => \unichr(0x629),
        'TEH' => \unichr(0x62a),
        'THEH' => \unichr(0x62b),
        'JEEM' => \unichr(0x62c),
        'HAH' => \unichr(0x62d),
        'KHAH' => \unichr(0x62e),
        'DAL' => \unichr(0x62f),
        'THAL' => \unichr(0x630),
        'REH' => \unichr(0x631),
        'ZAIN' => \unichr(0x632),
        'SEEN' => \unichr(0x633),
        'SHEEN' => \unichr(0x634),
        'SAD' => \unichr(0x635),
        'DAD' => \unichr(0x636),
        'TAH' => \unichr(0x637),
        'ZAH' => \unichr(0x638),
        'AIN' => \unichr(0x639),
        'GHAIN' => \unichr(0x63a),
        'TATWEEL' => \unichr(0x640),
        'FEH' => \unichr(0x641),
        'QAF' => \unichr(0x642),
        'KAF' => \unichr(0x643),
        'LAM' => \unichr(0x644),
        'MEEM' => \unichr(0x645),
        'NOON' => \unichr(0x646),
        'HEH' => \unichr(0x647),
        'WAW' => \unichr(0x648),
        'ALEF_MAKSURA' => \unichr(0x649),
        'YEH' => \unichr(0x64a),
        'MADDA_ABOVE' => \unichr(0x653),
        'HAMZA_ABOVE' => \unichr(0x654),
        'HAMZA_BELOW' => \unichr(0x655),
        'ZERO' => \unichr(0x660),
        'ONE' => \unichr(0x661),
        'TWO' => \unichr(0x662),
        'THREE' => \unichr(0x663),
        'FOUR' => \unichr(0x664),
        'FIVE' => \unichr(0x665),
        'SIX' => \unichr(0x666),
        'SEVEN' => \unichr(0x667),
        'EIGHT' => \unichr(0x668),
        'NINE' => \unichr(0x669),
        'PERCENT' => \unichr(0x66a),
        'DECIMAL' => \unichr(0x66b),
        'THOUSANDS' => \unichr(0x66c),
        'STAR' => \unichr(0x66d),
        'MINI_ALEF' => \unichr(0x670),
        'ALEF_WASLA' => \unichr(0x671),
        'FULL_STOP' => \unichr(0x6d4),
        'BYTE_ORDER_MARK' => \unichr(0xfeff),
        //Diacritics
        'FATHATAN' => \unichr(0x64b),
        'DAMMATAN' => \unichr(0x64c),
        'KASRATAN' => \unichr(0x64d),
        'FATHA' => \unichr(0x64e),
        'DAMMA' => \unichr(0x64f),
        'KASRA' => \unichr(0x650),
        'SHADDA' => \unichr(0x651),
        'SUKUN' => \unichr(0x652),
        'SMALL_ALEF' => \unichr(0x670),
        'SMALL_WAW' => \unichr(0x6e5),
        'SMALL_YEH' => \unichr(0x6e6),
        //Ligatures
        'LAM_ALEF' => \unichr(0xfefb),
        'LAM_ALEF_HAMZA_ABOVE' => \unichr(0xfef7),
        'LAM_ALEF_HAMZA_BELOW' => \unichr(0xfef9),
        'LAM_ALEF_MADDA_ABOVE' => \unichr(0xfef5),
        'simple_LAM_ALEF' => \unichr(0x644) . \unichr(0x64e) . \unichr(0x627),
        'simple_LAM_ALEF_HAMZA_ABOVE' => \unichr(0x644) . \unichr(0x623),
        'simple_LAM_ALEF_HAMZA_BELOW' => \unichr(0x644) . \unichr(0x625),
        'simple_LAM_ALEF_MADDA_ABOVE' => \unichr(0x644) . \unichr(0x621) . \unichr(0x64e) . \unichr(0x627),
    );
    /**
     * Arabic char groups
     **/
    $char_groups = array('LETTER' => array('ALEF', 'BEH', 'TEH', 'TEH_MARBUTA', 'THEH', 'JEEM', 'HAH', 'KHAH', 'DAL', 'THAL', 'REH', 'ZAIN', 'SEEN', 'SHEEN', 'SAD', 'DAD', 'TAH', 'ZAH', 'AIN', 'GHAIN', 'FEH', 'QAF', 'KAF', 'LAM', 'MEEM', 'NOON', 'HEH', 'WAW', 'YEH', 'HAMZA', 'ALEF_MADDA', 'ALEF_HAMZA_ABOVE', 'WAW_HAMZA', 'ALEF_HAMZA_BELOW', 'YEH_HAMZA'), 'TASHKEEL' => array('FATHATAN', 'DAMMATAN', 'KASRATAN', 'FATHA', 'DAMMA', 'KASRA', 'SUKUN', 'SHADDA'), 'HARAKAT' => array('FATHATAN', 'DAMMATAN', 'KASRATAN', 'FATHA', 'DAMMA', 'KASRA', 'SUKUN'), 'SHORTHARAKAT' => array('FATHA', 'DAMMA', 'KASRA', 'SUKUN'), 'TANWIN' => array('FATHATAN', 'DAMMATAN', 'KASRATAN'), 'LIGUATURES' => array('LAM_ALEF', 'LAM_ALEF_HAMZA_ABOVE', 'LAM_ALEF_HAMZA_BELOW', 'LAM_ALEF_MADDA_ABOVE'), 'HAMZAT' => array('HAMZA', 'WAW_HAMZA', 'YEH_HAMZA', 'HAMZA_ABOVE', 'HAMZA_BELOW', 'ALEF_HAMZA_BELOW', 'ALEF_HAMZA_ABOVE'), 'ALEFAT' => array('ALEF', 'ALEF_MADDA', 'ALEF_HAMZA_ABOVE', 'ALEF_HAMZA_BELOW', 'ALEF_WASLA', 'ALEF_MAKSURA', 'SMALL_ALEF'), 'WEAK' => array('ALEF', 'WAW', 'YEH', 'ALEF_MAKSURA'), 'YEHLIKE' => array('YEH', 'YEH_HAMZA', 'ALEF_MAKSURA', 'SMALL_YEH'), 'WAWLIKE' => array('WAW', 'WAW_HAMZA', 'SMALL_WAW'), 'TEHLIKE' => array('TEH', 'TEH_MARBUTA'), 'SMALL' => array('SMALL_ALEF', 'SMALL_WAW', 'SMALL_YEH'), 'MOON' => array('HAMZA', 'ALEF_MADDA', 'ALEF_HAMZA_ABOVE', 'ALEF_HAMZA_BELOW', 'ALEF', 'BEH', 'JEEM', 'HAH', 'KHAH', 'AIN', 'GHAIN', 'FEH', 'QAF', 'KAF', 'MEEM', 'HEH', 'WAW', 'YEH'), 'SUN' => array('TEH', 'THEH', 'DAL', 'THAL', 'REH', 'ZAIN', 'SEEN', 'SHEEN', 'SAD', 'DAD', 'TAH', 'ZAH', 'LAM', 'NOON'));
    /**
     * Arabic char names
     **/
    $char_ar_names = array('ALEF' => 'ألف', 'BEH' => 'باء', 'TEH' => 'تاء', 'TEH_MARBUTA' => 'تاء مربوطة', 'THEH' => 'ثاء', 'JEEM' => 'جيم', 'HAH' => 'حاء', 'KHAH' => 'خاء', 'DAL' => 'دال', 'THAL' => 'ذال', 'REH' => 'راء', 'ZAIN' => 'زاي', 'SEEN' => 'سين', 'SHEEN' => 'شين', 'SAD' => 'صاد', 'DAD' => 'ضاد', 'TAH' => 'طاء', 'ZAH' => 'ظاء', 'AIN' => 'عين', 'GHAIN' => 'غين', 'FEH' => 'فاء', 'QAF' => 'قاف', 'KAF' => 'كاف', 'LAM' => 'لام', 'MEEM' => 'ميم', 'NOON' => 'نون', 'HEH' => 'هاء', 'WAW' => 'واو', 'YEH' => 'ياء', 'HAMZA' => 'همزة', 'TATWEEL' => 'تطويل', 'ALEF_MADDA' => 'ألف ممدودة', 'ALEF_MAKSURA' => 'ألف مقصورة', 'ALEF_HAMZA_ABOVE' => 'همزة على الألف', 'WAW_HAMZA' => 'همزة على الواو', 'ALEF_HAMZA_BELOW' => 'همزة تحت الألف', 'YEH_HAMZA' => 'همزة على الياء', 'FATHATAN' => 'فتحتان', 'DAMMATAN' => 'ضمتان', 'KASRATAN' => 'كسرتان', 'FATHA' => 'فتحة', 'DAMMA' => 'ضمة', 'KASRA' => 'كسرة', 'SHADDA' => 'شدة', 'SUKUN' => 'سكون');
    # Verify an IBAN number.
    #  If $machine_format_only, do not tolerate unclean (eg. spaces, dashes, leading 'IBAN ' or 'IIBAN ', lower case) input.
    #  (Otherwise, input can be printed 'IIBAN xx xx xx...' or 'IBAN xx xx xx...' or machine 'xxxxx' format.)
    #  Returns true or false.
    function verify_iban($iban, $machine_format_only = \false)
    {
    }
    # Convert an IBAN to machine format.  To do this, we
    # remove IBAN from the start, if present, and remove
    # non basic roman letter / digit characters
    function iban_to_machine_format($iban)
    {
    }
    # Convert an IBAN to human format. To do this, we
    # simply insert spaces right now, as per the ECBS
    # (European Committee for Banking Standards)
    # recommendations available at:
    # http://www.europeanpaymentscouncil.eu/knowledge_bank_download.cfm?file=ECBS%20standard%20implementation%20guidelines%20SIG203V3.2.pdf
    function iban_to_human_format($iban)
    {
    }
    # Get the country part from an IBAN
    function iban_get_country_part($iban)
    {
    }
    # Get the checksum part from an IBAN
    function iban_get_checksum_part($iban)
    {
    }
    # Get the BBAN part from an IBAN
    function iban_get_bban_part($iban)
    {
    }
    # Check the checksum of an IBAN - code modified from Validate_Finance PEAR class
    function iban_verify_checksum($iban)
    {
    }
    # Find the correct checksum for an IBAN
    #  $iban  The IBAN whose checksum should be calculated
    function iban_find_checksum($iban)
    {
    }
    # Set the correct checksum for an IBAN
    #  $iban  IBAN whose checksum should be set
    function iban_set_checksum($iban)
    {
    }
    # Character substitution required for IBAN MOD97-10 checksum validation/generation
    #  $s  Input string (IBAN)
    function iban_checksum_string_replace($s)
    {
    }
    # Same as below but actually returns resulting checksum
    function iban_mod97_10_checksum($numeric_representation)
    {
    }
    # Perform MOD97-10 checksum calculation ('Germanic-level efficiency' version - thanks Chris!)
    function iban_mod97_10($numeric_representation)
    {
    }
    # Get an array of all the parts from an IBAN
    function iban_get_parts($iban)
    {
    }
    # Get the Bank ID (institution code) from an IBAN
    function iban_get_bank_part($iban)
    {
    }
    # Get the Branch ID (sort code) from an IBAN
    function iban_get_branch_part($iban)
    {
    }
    # Get the (branch-local) account ID from an IBAN
    function iban_get_account_part($iban)
    {
    }
    # Get the national checksum part from an IBAN
    function iban_get_nationalchecksum_part($iban)
    {
    }
    # Get the name of an IBAN country
    function iban_country_get_country_name($iban_country)
    {
    }
    # Get the domestic example for an IBAN country
    function iban_country_get_domestic_example($iban_country)
    {
    }
    # Get the BBAN example for an IBAN country
    function iban_country_get_bban_example($iban_country)
    {
    }
    # Get the BBAN format (in SWIFT format) for an IBAN country
    function iban_country_get_bban_format_swift($iban_country)
    {
    }
    # Get the BBAN format (as a regular expression) for an IBAN country
    function iban_country_get_bban_format_regex($iban_country)
    {
    }
    # Get the BBAN length for an IBAN country
    function iban_country_get_bban_length($iban_country)
    {
    }
    # Get the IBAN example for an IBAN country
    function iban_country_get_iban_example($iban_country)
    {
    }
    # Get the IBAN format (in SWIFT format) for an IBAN country
    function iban_country_get_iban_format_swift($iban_country)
    {
    }
    # Get the IBAN format (as a regular expression) for an IBAN country
    function iban_country_get_iban_format_regex($iban_country)
    {
    }
    # Get the IBAN length for an IBAN country
    function iban_country_get_iban_length($iban_country)
    {
    }
    # Get the BBAN Bank ID start offset for an IBAN country
    function iban_country_get_bankid_start_offset($iban_country)
    {
    }
    # Get the BBAN Bank ID stop offset for an IBAN country
    function iban_country_get_bankid_stop_offset($iban_country)
    {
    }
    # Get the BBAN Branch ID start offset for an IBAN country
    function iban_country_get_branchid_start_offset($iban_country)
    {
    }
    # Get the BBAN Branch ID stop offset for an IBAN country
    function iban_country_get_branchid_stop_offset($iban_country)
    {
    }
    # Get the BBAN (national) checksum start offset for an IBAN country
    #  Returns '' when (often) not present)
    function iban_country_get_nationalchecksum_start_offset($iban_country)
    {
    }
    # Get the BBAN (national) checksum stop offset for an IBAN country
    #  Returns '' when (often) not present)
    function iban_country_get_nationalchecksum_stop_offset($iban_country)
    {
    }
    # Get the registry edition for an IBAN country
    function iban_country_get_registry_edition($iban_country)
    {
    }
    # Is the IBAN country one official issued by SWIFT?
    function iban_country_get_country_swift_official($iban_country)
    {
    }
    # Is the IBAN country a SEPA member?
    function iban_country_is_sepa($iban_country)
    {
    }
    # Get the IANA code of an IBAN country
    function iban_country_get_iana($iban_country)
    {
    }
    # Get the ISO3166-1 alpha-2 code of an IBAN country
    function iban_country_get_iso3166($iban_country)
    {
    }
    # Get the parent registrar IBAN country of an IBAN country
    function iban_country_get_parent_registrar($iban_country)
    {
    }
    # Get the official currency of an IBAN country as an ISO4217 alpha code
    # (Note: Returns '' if there is no official currency, eg. for AA (IIBAN))
    function iban_country_get_currency_iso4217($iban_country)
    {
    }
    # Get the URL of an IBAN country's central bank
    # (Note: Returns '' if there is no central bank. Also, note that
    #        sometimes multiple countries share one central bank)
    function iban_country_get_central_bank_url($iban_country)
    {
    }
    # Get the name of an IBAN country's central bank
    # (Note: Returns '' if there is no central bank. Also, note that
    #        sometimes multiple countries share one central bank)
    function iban_country_get_central_bank_name($iban_country)
    {
    }
    # Get the list of all IBAN countries
    function iban_countries()
    {
    }
    # Given an incorrect IBAN, return an array of zero or more checksum-valid
    # suggestions for what the user might have meant, based upon common
    # mistranscriptions.
    #  IDEAS:
    #   - length correction via adding/removing leading zeros from any single component
    #   - overlength correction via dropping final digit(s)
    #   - national checksum algorithm checks (apply same testing methodology, abstract to separate function)
    #   - length correction by removing double digits (xxyzabxybaaz = change aa to a, or xx to x)
    #   - validate bank codes
    #   - utilize format knowledge with regards to alphanumeric applicability in that offset in that national BBAN format
    #   - turkish TL/TK thing
    #   - norway NO gets dropped due to mis-identification with "No." for number (ie. if no country code try prepending NO)
    function iban_mistranscription_suggestions($incorrect_iban)
    {
    }
    function _iban_load_registry()
    {
    }
    # Get information from the IBAN registry by example IBAN / code combination
    function _iban_get_info($iban, $code)
    {
    }
    # Get information from the IBAN registry by country / code combination
    function _iban_country_get_info($country, $code)
    {
    }
    # Load common mistranscriptions from disk.
    function _iban_load_mistranscriptions()
    {
    }
    # Find the correct national checksum for an IBAN
    #  (Returns the correct national checksum as a string, or '' if unimplemented for this IBAN's country)
    #  (NOTE: only works for some countries)
    function iban_find_nationalchecksum($iban)
    {
    }
    # Verify the correct national checksum for an IBAN
    #  (Returns true or false, or '' if unimplemented for this IBAN's country)
    #  (NOTE: only works for some countries)
    function iban_verify_nationalchecksum($iban)
    {
    }
    # Verify the correct national checksum for an IBAN
    #  (Returns the (possibly) corrected IBAN, or '' if unimplemented for this IBAN's country)
    #  (NOTE: only works for some countries)
    function iban_set_nationalchecksum($iban)
    {
    }
    # Internal function to overwrite the national checksum portion of an IBAN
    function _iban_nationalchecksum_set($iban, $nationalchecksum)
    {
    }
    # Currently unused but may be useful for Norway.
    # ISO7064 MOD11-2
    # Adapted from https://gist.github.com/andreCatita/5714353 by Andrew Catita
    function _iso7064_mod112_catita($input)
    {
    }
    # Currently unused but may be useful for Norway.
    # ISO 7064:1983.MOD 11-2
    # by goseaside@sina.com
    function _iso7064_mod112_goseaside($vString)
    {
    }
    # ISO7064 MOD97-10 (Bosnia, etc.)
    # (Credit: Adapted from https://github.com/stvkoch/ISO7064-Mod-97-10/blob/master/ISO7064Mod97_10.php)
    function _iso7064_mod97_10($str)
    {
    }
    # Implement the national checksum for a Belgium (BE) IBAN
    #  (Credit: @gaetan-be)
    function _iban_nationalchecksum_implementation_be($iban, $mode)
    {
    }
    # MOD11 helper function for the Spanish (ES) IBAN national checksum implementation
    #  (Credit: @dem3trio, code lifted from Spanish Wikipedia at https://es.wikipedia.org/wiki/C%C3%B3digo_cuenta_cliente)
    function _iban_nationalchecksum_implementation_es_mod11_helper($numero)
    {
    }
    # Implement the national checksum for a Spanish (ES) IBAN
    #  (Credit: @dem3trio, adapted from code on Spanish Wikipedia at https://es.wikipedia.org/wiki/C%C3%B3digo_cuenta_cliente)
    function _iban_nationalchecksum_implementation_es($iban, $mode)
    {
    }
    # Helper function for the France (FR) BBAN national checksum implementation
    #  (Credit: @gaetan-be)
    function _iban_nationalchecksum_implementation_fr_letters2numbers_helper($bban)
    {
    }
    # NOTE: Worryingly at least one domestic number found within CF online is
    #       not passing national checksum support. Perhaps banks do not issue
    #       with correct RIB (French-style national checksum) despite using
    #       the legacy format? Perhaps this is a mistranscribed number?
    #        http://www.radiomariacentrafrique.org/virement-bancaire.aspx
    #	  ie. CF19 20001 00001 01401832401 40
    #	The following two numbers work:
    #        http://fondationvoixducoeur.net/fr/pour-contribuer.html
    #	  ie. CF4220002002003712551080145 and CF4220001004113717538890110
    #       Since in the latter case the bank is the same as the former and
    #       the French structure, terminology and 2/3 correct is a fairly high
    #       correlation, we are going to assume that the first error is theirs.
    #
    # Implement the national checksum for a Central African Republic (CF) IBAN
    function _iban_nationalchecksum_implementation_cf($iban, $mode)
    {
    }
    # Implement the national checksum for a Chad (TD) IBAN
    function _iban_nationalchecksum_implementation_td($iban, $mode)
    {
    }
    # Implement the national checksum for a Comoros (KM) IBAN
    function _iban_nationalchecksum_implementation_km($iban, $mode)
    {
    }
    # Implement the national checksum for a Congo (CG) IBAN
    function _iban_nationalchecksum_implementation_cg($iban, $mode)
    {
    }
    # Implement the national checksum for a Djibouti (DJ) IBAN
    function _iban_nationalchecksum_implementation_dj($iban, $mode)
    {
    }
    # Implement the national checksum for an Egypt (EG) IBAN
    function _iban_nationalchecksum_implementation_eg($iban, $mode)
    {
    }
    # Implement the national checksum for an Equitorial Guinea (GQ) IBAN
    function _iban_nationalchecksum_implementation_gq($iban, $mode)
    {
    }
    # Implement the national checksum for a Gabon (GA) IBAN
    function _iban_nationalchecksum_implementation_ga($iban, $mode)
    {
    }
    # Implement the national checksum for a Monaco (MC) IBAN
    #  (Credit: @gaetan-be)
    function _iban_nationalchecksum_implementation_mc($iban, $mode)
    {
    }
    # Implement the national checksum for a France (FR) IBAN
    #  (Credit: @gaetan-be, http://www.credit-card.be/BankAccount/ValidationRules.htm#FR_Validation and
    #           https://docs.oracle.com/cd/E18727_01/doc.121/e13483/T359831T498954.htm)
    function _iban_nationalchecksum_implementation_fr($iban, $mode)
    {
    }
    # Implement the national checksum for a Norway (NO) IBAN
    #  (NOTE: Built from description at https://docs.oracle.com/cd/E18727_01/doc.121/e13483/T359831T498954.htm, not well tested)
    function _iban_nationalchecksum_implementation_no($iban, $mode)
    {
    }
    # ISO/IEC 7064, MOD 11-2
    # @param $input string Must contain only characters ('0123456789').
    # @output A 1 character string containing '0123456789X',
    #         or '' (empty string) on failure due to bad input.
    # (Credit: php-iso7064 @ https://github.com/globalcitizen/php-iso7064)
    function _iso7064_mod11_2($input)
    {
    }
    # Implement the national checksum systems based on ISO7064 MOD11-2 Algorithm
    function _iban_nationalchecksum_implementation_iso7064_mod11_2($iban, $mode, $drop_at_front = 0, $drop_at_end = 1)
    {
    }
    # Implement the national checksum systems based on Damm Algorithm
    function _iban_nationalchecksum_implementation_damm($iban, $mode)
    {
    }
    # Implement the national checksum systems based on Verhoeff Algorithm
    function _iban_nationalchecksum_implementation_verhoeff($iban, $mode, $strip_length_end, $strip_length_front = 0)
    {
    }
    # ISO/IEC 7064, MOD 97-10
    # @param $input string Must contain only characters ('0123456789').
    # @output A 2 character string containing '0123456789',
    #         or '' (empty string) on failure due to bad input.
    # (Credit: php-iso7064 @ https://github.com/globalcitizen/php-iso7064)
    function _iso7064_mod97_10_generated($input)
    {
    }
    # Implement the national checksum for an Montenegro (ME) IBAN
    #  (NOTE: Reverse engineered)
    function _iban_nationalchecksum_implementation_me($iban, $mode)
    {
    }
    # Implement the national checksum for an Macedonia (MK) IBAN
    #  (NOTE: Reverse engineered)
    function _iban_nationalchecksum_implementation_mk($iban, $mode)
    {
    }
    # Implement the national checksum for an Netherlands (NL) IBAN
    #  This applies to most banks, but not to 'INGB', therefore we
    #  treat it specially here.
    #  (Original code: Validate_NL PEAR class, since extended)
    function _iban_nationalchecksum_implementation_nl($iban, $mode)
    {
    }
    # Implement the national checksum for an Portugal (PT) IBAN
    #  (NOTE: Reverse engineered)
    function _iban_nationalchecksum_implementation_pt($iban, $mode)
    {
    }
    # Implement the national checksum for an Serbia (RS) IBAN
    #  (NOTE: Reverse engineered, including bank 'Narodna banka Srbije' (908) exception. For two
    #         separately published and legitimate looking IBANs from that bank, there appears to
    #         be a +97 offset on the checksum, so we simply ignore all checksums for this bank.)
    function _iban_nationalchecksum_implementation_rs($iban, $mode)
    {
    }
    # Implement the national checksum for an Slovenia (SI) IBAN
    #  Note: It appears that the central bank does not use these
    #        checksums, thus an exception has been added.
    #  (NOTE: Reverse engineered)
    function _iban_nationalchecksum_implementation_si($iban, $mode)
    {
    }
    # Implement the national checksum for Slovak Republic (SK) IBAN
    # Source of algorithm: https://www.nbs.sk/_img/Documents/_Legislativa/_Vestnik/OPAT8-09.pdf
    # Account number is currently verified only, it's possible to also add validation for bank code and account number prefix
    function _iban_nationalchecksum_implementation_sk($iban, $mode)
    {
    }
    # Implement the national checksum for MOD97-10 countries
    function _iban_nationalchecksum_implementation_mod97_10($iban, $mode)
    {
    }
    # Implement the national checksum for an Timor-Lest (TL) IBAN
    #  (NOTE: Reverse engineered, but works on 2 different IBAN from official sources)
    function _iban_nationalchecksum_implementation_tl($iban, $mode)
    {
    }
    # Luhn Check
    # (Credit: Adapted from @gajus' https://gist.github.com/troelskn/1287893#gistcomment-857491)
    function _luhn($string)
    {
    }
    # Verhoeff checksum
    # (Credit: Adapted from Semyon Velichko's code at https://en.wikibooks.org/wiki/Algorithm_Implementation/Checksums/Verhoeff_Algorithm#PHP)
    function _verhoeff($input)
    {
    }
    # Damm checksum
    # (Credit: https://en.wikibooks.org/wiki/Algorithm_Implementation/Checksums/Damm_Algorithm#PHP)
    function _damm($input)
    {
    }
    # Implement the national checksum for an Italian (IT) IBAN
    function _iban_nationalchecksum_implementation_it($iban, $mode)
    {
    }
    # Implement the national checksum for a San Marino (SM) IBAN
    function _iban_nationalchecksum_implementation_sm($iban, $mode)
    {
    }
    # Italian (and San Marino's) checksum
    # (Credit: Translated by Francesco Zanoni from http://community.visual-basic.it/lucianob/archive/2004/12/26/2464.aspx)
    # (Source: European Commettee of Banking Standards' Register of European Account Numbers (TR201 V3.23 — FEBRUARY 2007),
    #          available at URL http://www.cnb.cz/cs/platebni_styk/iban/download/TR201.pdf)
    function _italian($input)
    {
    }
    # Internal proxy function to access national checksum implementations
    #  $iban = IBAN to work with (length and country must be valid, IBAN checksum and national checksum may be incorrect)
    #  $mode = 'find', 'set', or 'verify'
    #    - In 'find' mode, the correct national checksum for $iban is returned.
    #    - In 'set' mode, a (possibly) modified version of $iban with the national checksum corrected is returned.
    #    - In 'verify' mode, the checksum within $iban is compared to correctly calculated value, and true or false is returned.
    #  If a national checksum algorithm does not exist or remains unimplemented for this country, or the supplied $iban or $mode is invalid, '' is returned.
    #  (NOTE: We cannot collapse 'verify' mode and implement here via simple string comparison between 'find' mode output and the nationalchecksum part,
    #         because some countries have systems which do not map to this approach, for example the Netherlands has no checksum part yet an algorithm exists)
    function _iban_nationalchecksum_implementation($iban, $mode)
    {
    }
    /*******************************************************************************
    * FPDF                                                                         *
    *                                                                              *
    * Version: 1.84                                                                *
    * Date:    2021-08-28                                                          *
    * Author:  Olivier PLATHEY                                                     *
    *******************************************************************************/
    \define('FPDF_VERSION', '1.84');
    function Message($txt, $severity = '')
    {
    }
    function Notice($txt)
    {
    }
    function Warning($txt)
    {
    }
    function Error($txt)
    {
    }
    function LoadMap($enc)
    {
    }
    function GetInfoFromTrueType($file, $embed, $subset, $map)
    {
    }
    function GetInfoFromType1($file, $embed, $map)
    {
    }
    function MakeFontDescriptor($info)
    {
    }
    function MakeWidthArray($widths)
    {
    }
    function MakeFontEncoding($map)
    {
    }
    function MakeUnicodeArray($map)
    {
    }
    function SaveToFile($file, $s, $mode)
    {
    }
    function MakeDefinitionFile($file, $type, $enc, $embed, $subset, $map, $info)
    {
    }
    function MakeFont($fontfile, $enc = 'cp1252', $embed = \true, $subset = \true)
    {
    }
}